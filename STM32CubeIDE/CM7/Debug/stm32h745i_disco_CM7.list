
stm32h745i_disco_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000286c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d68  08028968  08028968  00038968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000054  0802c6d0  0802c6d0  0003c6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802c724  0802c724  00050f58  2**0
                  CONTENTS
  5 .ARM          00000008  0802c724  0802c724  0003c724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802c72c  0802c72c  00050f58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0802c72c  0802c72c  0003c72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802c740  0802c740  0003c740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  0802c748  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b3d4  2400012c  0802c874  0004012c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b500  0802c874  0004b500  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00050f58  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000a44  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000514  90000a44  90000a44  00050a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00000000  90000f58  90000f58  00050f86  2**0
                  CONTENTS
 16 .debug_info   000bfa2f  00000000  00000000  00050f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001361c  00000000  00000000  001109b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004160  00000000  00000000  00123fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003cc8  00000000  00000000  00128138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000132a2  00000000  00000000  0012be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004f642  00000000  00000000  0013f0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001bad8b  00000000  00000000  0018e6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0034946f  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00011db8  00000000  00000000  00349544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08028950 	.word	0x08028950

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	08028950 	.word	0x08028950

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800068e:	f000 fc31 	bl	8000ef4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000692:	4b65      	ldr	r3, [pc, #404]	; (8000828 <main+0x1a0>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d11b      	bne.n	80006d6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800069e:	f3bf 8f4f 	dsb	sy
}
 80006a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a4:	f3bf 8f6f 	isb	sy
}
 80006a8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006aa:	4b5f      	ldr	r3, [pc, #380]	; (8000828 <main+0x1a0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b2:	f3bf 8f4f 	dsb	sy
}
 80006b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b8:	f3bf 8f6f 	isb	sy
}
 80006bc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006be:	4b5a      	ldr	r3, [pc, #360]	; (8000828 <main+0x1a0>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a59      	ldr	r2, [pc, #356]	; (8000828 <main+0x1a0>)
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	e000      	b.n	80006d8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006d6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d8:	4b53      	ldr	r3, [pc, #332]	; (8000828 <main+0x1a0>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d138      	bne.n	8000756 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006e4:	4b50      	ldr	r3, [pc, #320]	; (8000828 <main+0x1a0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006ec:	f3bf 8f4f 	dsb	sy
}
 80006f0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006f2:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <main+0x1a0>)
 80006f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006f8:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	0b5b      	lsrs	r3, r3, #13
 80006fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000702:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800070c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	015a      	lsls	r2, r3, #5
 8000712:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000716:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800071c:	4942      	ldr	r1, [pc, #264]	; (8000828 <main+0x1a0>)
 800071e:	4313      	orrs	r3, r2
 8000720:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	60ba      	str	r2, [r7, #8]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1ef      	bne.n	800070e <main+0x86>
    } while(sets-- != 0U);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	60fa      	str	r2, [r7, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1e5      	bne.n	8000704 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000738:	f3bf 8f4f 	dsb	sy
}
 800073c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800073e:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <main+0x1a0>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a39      	ldr	r2, [pc, #228]	; (8000828 <main+0x1a0>)
 8000744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000748:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
}
 800074e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000750:	f3bf 8f6f 	isb	sy
}
 8000754:	e000      	b.n	8000758 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000756:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800075c:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800075e:	bf00      	nop
 8000760:	4b32      	ldr	r3, [pc, #200]	; (800082c <main+0x1a4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000768:	2b00      	cmp	r3, #0
 800076a:	d004      	beq.n	8000776 <main+0xee>
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	1e5a      	subs	r2, r3, #1
 8000770:	617a      	str	r2, [r7, #20]
 8000772:	2b00      	cmp	r3, #0
 8000774:	dcf4      	bgt.n	8000760 <main+0xd8>
  if ( timeout < 0 )
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	da01      	bge.n	8000780 <main+0xf8>
  {
  Error_Handler();
 800077c:	f000 fc04 	bl	8000f88 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f00c fe9c 	bl	800d4bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f860 	bl	8000848 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <main+0x1a4>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	4a27      	ldr	r2, [pc, #156]	; (800082c <main+0x1a4>)
 8000790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <main+0x1a4>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f00d fdb0 	bl	800e30c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2000      	movs	r0, #0
 80007b0:	f00d fdc6 	bl	800e340 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b8:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007ba:	bf00      	nop
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <main+0x1a4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d104      	bne.n	80007d2 <main+0x14a>
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	1e5a      	subs	r2, r3, #1
 80007cc:	617a      	str	r2, [r7, #20]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	dcf4      	bgt.n	80007bc <main+0x134>
if ( timeout < 0 )
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	da01      	bge.n	80007dc <main+0x154>
{
Error_Handler();
 80007d8:	f000 fbd6 	bl	8000f88 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f000 fa56 	bl	8000c8c <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80007e0:	f000 f984 	bl	8000aec <MX_QUADSPI_Init>
  MX_FMC_Init();
 80007e4:	f000 f9fc 	bl	8000be0 <MX_FMC_Init>
  MX_LTDC_Init();
 80007e8:	f000 f8fc 	bl	80009e4 <MX_LTDC_Init>
  MX_CRC_Init();
 80007ec:	f000 f8ba 	bl	8000964 <MX_CRC_Init>
  MX_DMA2D_Init();
 80007f0:	f000 f8da 	bl	80009a8 <MX_DMA2D_Init>
  MX_USART3_UART_Init();
 80007f4:	f000 f9a8 	bl	8000b48 <MX_USART3_UART_Init>
  MX_TouchGFX_Init();
 80007f8:	f001 f9e1 	bl	8001bbe <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007fc:	f006 fe66 	bl	80074cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000800:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <main+0x1a8>)
 8000802:	2100      	movs	r1, #0
 8000804:	480b      	ldr	r0, [pc, #44]	; (8000834 <main+0x1ac>)
 8000806:	f006 feab 	bl	8007560 <osThreadNew>
 800080a:	4603      	mov	r3, r0
 800080c:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <main+0x1b0>)
 800080e:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <main+0x1b4>)
 8000812:	2100      	movs	r1, #0
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <main+0x1b8>)
 8000816:	f006 fea3 	bl	8007560 <osThreadNew>
 800081a:	4603      	mov	r3, r0
 800081c:	4a09      	ldr	r2, [pc, #36]	; (8000844 <main+0x1bc>)
 800081e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000820:	f006 fe78 	bl	8007514 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000824:	e7fe      	b.n	8000824 <main+0x19c>
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00
 800082c:	58024400 	.word	0x58024400
 8000830:	080293c4 	.word	0x080293c4
 8000834:	08000ec1 	.word	0x08000ec1
 8000838:	2400b188 	.word	0x2400b188
 800083c:	080293e8 	.word	0x080293e8
 8000840:	08001bcb 	.word	0x08001bcb
 8000844:	2400b31c 	.word	0x2400b31c

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09c      	sub	sp, #112	; 0x70
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	224c      	movs	r2, #76	; 0x4c
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f027 f88c 	bl	8027974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2220      	movs	r2, #32
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f027 f886 	bl	8027974 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000868:	2004      	movs	r0, #4
 800086a:	f00f f8d3 	bl	800fa14 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b39      	ldr	r3, [pc, #228]	; (8000958 <SystemClock_Config+0x110>)
 8000874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000876:	4a38      	ldr	r2, [pc, #224]	; (8000958 <SystemClock_Config+0x110>)
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800087e:	4b36      	ldr	r3, [pc, #216]	; (8000958 <SystemClock_Config+0x110>)
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	4b34      	ldr	r3, [pc, #208]	; (800095c <SystemClock_Config+0x114>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a33      	ldr	r2, [pc, #204]	; (800095c <SystemClock_Config+0x114>)
 800088e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b31      	ldr	r3, [pc, #196]	; (800095c <SystemClock_Config+0x114>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a0:	bf00      	nop
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <SystemClock_Config+0x114>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ae:	d1f8      	bne.n	80008a2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008b0:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <SystemClock_Config+0x118>)
 80008b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b4:	f023 0303 	bic.w	r3, r3, #3
 80008b8:	4a29      	ldr	r2, [pc, #164]	; (8000960 <SystemClock_Config+0x118>)
 80008ba:	f043 0302 	orr.w	r3, r3, #2
 80008be:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008c0:	2303      	movs	r3, #3
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ce:	2340      	movs	r3, #64	; 0x40
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d6:	2302      	movs	r3, #2
 80008d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008da:	2305      	movs	r3, #5
 80008dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008de:	23a0      	movs	r3, #160	; 0xa0
 80008e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008ee:	2308      	movs	r3, #8
 80008f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4618      	mov	r0, r3
 8000900:	f00f ffc4 	bl	801088c <HAL_RCC_OscConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800090a:	f000 fb3d 	bl	8000f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090e:	233f      	movs	r3, #63	; 0x3f
 8000910:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000912:	2303      	movs	r3, #3
 8000914:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800091a:	2308      	movs	r3, #8
 800091c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800091e:	2340      	movs	r3, #64	; 0x40
 8000920:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000922:	2340      	movs	r3, #64	; 0x40
 8000924:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2102      	movs	r1, #2
 8000934:	4618      	mov	r0, r3
 8000936:	f010 fbd5 	bl	80110e4 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000940:	f000 fb22 	bl	8000f88 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000944:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000948:	2100      	movs	r1, #0
 800094a:	2000      	movs	r0, #0
 800094c:	f010 fd80 	bl	8011450 <HAL_RCC_MCOConfig>
}
 8000950:	bf00      	nop
 8000952:	3770      	adds	r7, #112	; 0x70
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58000400 	.word	0x58000400
 800095c:	58024800 	.word	0x58024800
 8000960:	58024400 	.word	0x58024400

08000964 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MX_CRC_Init+0x3c>)
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <MX_CRC_Init+0x40>)
 800096c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000970:	2200      	movs	r2, #0
 8000972:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000976:	2200      	movs	r2, #0
 8000978:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_CRC_Init+0x3c>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000988:	2201      	movs	r2, #1
 800098a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_CRC_Init+0x3c>)
 800098e:	f00c ff8b 	bl	800d8a8 <HAL_CRC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000998:	f000 faf6 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2400b21c 	.word	0x2400b21c
 80009a4:	58024c00 	.word	0x58024c00

080009a8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_DMA2D_Init+0x34>)
 80009ae:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <MX_DMA2D_Init+0x38>)
 80009b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <MX_DMA2D_Init+0x34>)
 80009b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009b8:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_DMA2D_Init+0x34>)
 80009bc:	2202      	movs	r2, #2
 80009be:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_DMA2D_Init+0x34>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_DMA2D_Init+0x34>)
 80009c8:	f00d f858 	bl	800da7c <HAL_DMA2D_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80009d2:	f000 fad9 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2400b320 	.word	0x2400b320
 80009e0:	52001000 	.word	0x52001000

080009e4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 80009ea:	f000 fad3 	bl	8000f94 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2234      	movs	r2, #52	; 0x34
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f026 ffbd 	bl	8027974 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009fa:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <MX_LTDC_Init+0x100>)
 80009fc:	4a3a      	ldr	r2, [pc, #232]	; (8000ae8 <MX_LTDC_Init+0x104>)
 80009fe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a00:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a06:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a0c:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a12:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000a18:	4b32      	ldr	r3, [pc, #200]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a1a:	2228      	movs	r2, #40	; 0x28
 8000a1c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000a1e:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a20:	2209      	movs	r2, #9
 8000a22:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000a24:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a26:	2235      	movs	r2, #53	; 0x35
 8000a28:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a2c:	220b      	movs	r2, #11
 8000a2e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a32:	f240 2215 	movw	r2, #533	; 0x215
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000a38:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a3a:	f240 121b 	movw	r2, #283	; 0x11b
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000a40:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a42:	f240 2235 	movw	r2, #565	; 0x235
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a4a:	f240 121d 	movw	r2, #285	; 0x11d
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a68:	481e      	ldr	r0, [pc, #120]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000a6a:	f00e fad7 	bl	800f01c <HAL_LTDC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000a74:	f000 fa88 	bl	8000f88 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000a7c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a80:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000a86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a8a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a90:	23ff      	movs	r3, #255	; 0xff
 8000a92:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a9c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000aa2:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000aa8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000aae:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_LTDC_Init+0x100>)
 8000ace:	f00e fc2d 	bl	800f32c <HAL_LTDC_ConfigLayer>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000ad8:	f000 fa56 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3738      	adds	r7, #56	; 0x38
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2400b240 	.word	0x2400b240
 8000ae8:	50001000 	.word	0x50001000

08000aec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_QUADSPI_Init+0x50>)
 8000af2:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <MX_QUADSPI_Init+0x54>)
 8000af4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_QUADSPI_Init+0x50>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_QUADSPI_Init+0x50>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_QUADSPI_Init+0x50>)
 8000b04:	2210      	movs	r2, #16
 8000b06:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_QUADSPI_Init+0x50>)
 8000b0a:	221a      	movs	r2, #26
 8000b0c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_QUADSPI_Init+0x50>)
 8000b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b14:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_QUADSPI_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <MX_QUADSPI_Init+0x50>)
 8000b1e:	2240      	movs	r2, #64	; 0x40
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <MX_QUADSPI_Init+0x50>)
 8000b24:	f00e ffd0 	bl	800fac8 <HAL_QSPI_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8000b2e:	f000 fa2b 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_QUADSPI_Init+0x58>)
 8000b34:	f000 faa2 	bl	800107c <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2400b388 	.word	0x2400b388
 8000b40:	52005000 	.word	0x52005000
 8000b44:	08000f89 	.word	0x08000f89

08000b48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b4e:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <MX_USART3_UART_Init+0x94>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b90:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b92:	f012 fdcf 	bl	8013734 <HAL_UART_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b9c:	f000 f9f4 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000ba4:	f013 fdfa 	bl	801479c <HAL_UARTEx_SetTxFifoThreshold>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bae:	f000 f9eb 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000bb6:	f013 fe2f 	bl	8014818 <HAL_UARTEx_SetRxFifoThreshold>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bc0:	f000 f9e2 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000bc6:	f013 fdb0 	bl	801472a <HAL_UARTEx_DisableFifoMode>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bd0:	f000 f9da 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	2400b18c 	.word	0x2400b18c
 8000bdc:	40004800 	.word	0x40004800

08000be0 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
 8000bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000bfa:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <MX_FMC_Init+0xa4>)
 8000bfc:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000c12:	2210      	movs	r2, #16
 8000c14:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000c18:	2240      	movs	r2, #64	; 0x40
 8000c1a:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c22:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c30:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000c44:	2306      	movs	r3, #6
 8000c46:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4807      	ldr	r0, [pc, #28]	; (8000c80 <MX_FMC_Init+0xa0>)
 8000c62:	f012 f9d9 	bl	8013018 <HAL_SDRAM_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000c6c:	f000 f98c 	bl	8000f88 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_FMC_Init+0xa8>)
 8000c72:	f000 fa24 	bl	80010be <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 8000c76:	bf00      	nop
 8000c78:	3720      	adds	r7, #32
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2400b2e8 	.word	0x2400b2e8
 8000c84:	52004140 	.word	0x52004140
 8000c88:	08000f89 	.word	0x08000f89

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b090      	sub	sp, #64	; 0x40
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ca2:	4b81      	ldr	r3, [pc, #516]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	4a7f      	ldr	r2, [pc, #508]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb2:	4b7d      	ldr	r3, [pc, #500]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc0:	4b79      	ldr	r3, [pc, #484]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	4a78      	ldr	r2, [pc, #480]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd0:	4b75      	ldr	r3, [pc, #468]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cde:	4b72      	ldr	r3, [pc, #456]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	4a70      	ldr	r2, [pc, #448]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cee:	4b6e      	ldr	r3, [pc, #440]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf8:	623b      	str	r3, [r7, #32]
 8000cfa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfc:	4b6a      	ldr	r3, [pc, #424]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	4a69      	ldr	r2, [pc, #420]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d04:	f043 0310 	orr.w	r3, r3, #16
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0c:	4b66      	ldr	r3, [pc, #408]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	61fb      	str	r3, [r7, #28]
 8000d18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d1a:	4b63      	ldr	r3, [pc, #396]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	4a61      	ldr	r2, [pc, #388]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d38:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	4a5a      	ldr	r2, [pc, #360]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d48:	4b57      	ldr	r3, [pc, #348]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	4b54      	ldr	r3, [pc, #336]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	4a52      	ldr	r2, [pc, #328]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d66:	4b50      	ldr	r3, [pc, #320]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	4a4b      	ldr	r2, [pc, #300]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d84:	4b48      	ldr	r3, [pc, #288]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d92:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d98:	4a43      	ldr	r2, [pc, #268]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000d9a:	f043 0320 	orr.w	r3, r3, #32
 8000d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da2:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	f003 0320 	and.w	r3, r3, #32
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db0:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db6:	4a3c      	ldr	r2, [pc, #240]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc0:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	4a34      	ldr	r2, [pc, #208]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dde:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_2_GPIO_Port, GREEN_LED_2_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2108      	movs	r1, #8
 8000df0:	482e      	ldr	r0, [pc, #184]	; (8000eac <MX_GPIO_Init+0x220>)
 8000df2:	f00d fa71 	bl	800e2d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfc:	482c      	ldr	r0, [pc, #176]	; (8000eb0 <MX_GPIO_Init+0x224>)
 8000dfe:	f00d fa6b 	bl	800e2d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_1_GPIO_Port, GREEN_LED_1_Pin, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2104      	movs	r1, #4
 8000e06:	482b      	ldr	r0, [pc, #172]	; (8000eb4 <MX_GPIO_Init+0x228>)
 8000e08:	f00d fa66 	bl	800e2d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_2_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_2_Pin;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GREEN_LED_2_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e20:	4619      	mov	r1, r3
 8000e22:	4822      	ldr	r0, [pc, #136]	; (8000eac <MX_GPIO_Init+0x220>)
 8000e24:	f00c ff9e 	bl	800dd64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e32:	2302      	movs	r3, #2
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481e      	ldr	r0, [pc, #120]	; (8000eb8 <MX_GPIO_Init+0x22c>)
 8000e3e:	f00c ff91 	bl	800dd64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4817      	ldr	r0, [pc, #92]	; (8000ebc <MX_GPIO_Init+0x230>)
 8000e60:	f00c ff80 	bl	800dd64 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2302      	movs	r3, #2
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_GPIO_Init+0x224>)
 8000e7e:	f00c ff71 	bl	800dd64 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_1_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_1_Pin;
 8000e82:	2304      	movs	r3, #4
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GREEN_LED_1_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e96:	4619      	mov	r1, r3
 8000e98:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <MX_GPIO_Init+0x228>)
 8000e9a:	f00c ff63 	bl	800dd64 <HAL_GPIO_Init>

}
 8000e9e:	bf00      	nop
 8000ea0:	3740      	adds	r7, #64	; 0x40
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	58020c00 	.word	0x58020c00
 8000eb0:	58022000 	.word	0x58022000
 8000eb4:	58022400 	.word	0x58022400
 8000eb8:	58020800 	.word	0x58020800
 8000ebc:	58020000 	.word	0x58020000

08000ec0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  char *msg = "Hello World\r\n";
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <StartDefaultTask+0x2c>)
 8000eca:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen((char*) msg), HAL_MAX_DELAY);
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff fa07 	bl	80002e0 <strlen>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <StartDefaultTask+0x30>)
 8000ede:	f012 fc79 	bl	80137d4 <HAL_UART_Transmit>
	  osDelay(1000);
 8000ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee6:	f006 fbcd 	bl	8007684 <osDelay>
  {
 8000eea:	e7ed      	b.n	8000ec8 <StartDefaultTask+0x8>
 8000eec:	08028984 	.word	0x08028984
 8000ef0:	2400b18c 	.word	0x2400b18c

08000ef4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000efa:	463b      	mov	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f06:	f00c fc53 	bl	800d7b0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000f12:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000f16:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000f18:	2313      	movs	r3, #19
 8000f1a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f24:	2303      	movs	r3, #3
 8000f26:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f00c fc70 	bl	800d820 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000f44:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000f48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000f4a:	231a      	movs	r3, #26
 8000f4c:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00c fc65 	bl	800d820 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f56:	2004      	movs	r0, #4
 8000f58:	f00c fc42 	bl	800d7e0 <HAL_MPU_Enable>

}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f76:	f00c fadd 	bl	800d534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40001000 	.word	0x40001000

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000f9a:	4b36      	ldr	r3, [pc, #216]	; (8001074 <initLtdcClocks+0xe0>)
 8000f9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000fa0:	4a34      	ldr	r2, [pc, #208]	; (8001074 <initLtdcClocks+0xe0>)
 8000fa2:	f043 0308 	orr.w	r3, r3, #8
 8000fa6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <initLtdcClocks+0xe0>)
 8000fac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <initLtdcClocks+0xe0>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a2d      	ldr	r2, [pc, #180]	; (8001074 <initLtdcClocks+0xe0>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <initLtdcClocks+0xe0>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fd6:	4b27      	ldr	r3, [pc, #156]	; (8001074 <initLtdcClocks+0xe0>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a25      	ldr	r2, [pc, #148]	; (8001074 <initLtdcClocks+0xe0>)
 8000fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <initLtdcClocks+0xe0>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <initLtdcClocks+0xe0>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <initLtdcClocks+0xe0>)
 8000ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <initLtdcClocks+0xe0>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <initLtdcClocks+0xe0>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001018:	4a16      	ldr	r2, [pc, #88]	; (8001074 <initLtdcClocks+0xe0>)
 800101a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <initLtdcClocks+0xe0>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <initLtdcClocks+0xe0>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <initLtdcClocks+0xe0>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <initLtdcClocks+0xe0>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	4806      	ldr	r0, [pc, #24]	; (8001078 <initLtdcClocks+0xe4>)
 800105e:	f00c fe81 	bl	800dd64 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	4804      	ldr	r0, [pc, #16]	; (8001078 <initLtdcClocks+0xe4>)
 8001068:	f00d f936 	bl	800e2d8 <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	3730      	adds	r7, #48	; 0x30
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	58024400 	.word	0x58024400
 8001078:	58020c00 	.word	0x58020c00

0800107c <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8001084:	2303      	movs	r3, #3
 8001086:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8001088:	2301      	movs	r3, #1
 800108a:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 800108c:	2340      	movs	r3, #64	; 0x40
 800108e:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4619      	mov	r1, r3
 8001096:	2000      	movs	r0, #0
 8001098:	f00b f9ca 	bl	800c430 <BSP_QSPI_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <initBspQuadSpi+0x2a>
   {
      error_handler();
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f00b fa9c 	bl	800c5e4 <BSP_QSPI_EnableMemoryMappedMode>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <initBspQuadSpi+0x3a>
   {
      error_handler();
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4798      	blx	r3
   }
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f00b fdfa 	bl	800ccc0 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80010cc:	2000      	movs	r0, #0
 80010ce:	f00b fd9b 	bl	800cc08 <BSP_SDRAM_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <initBspSdRam+0x1e>
   {
      error_handler();
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4798      	blx	r3
   }
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_MspInit+0x38>)
 80010ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_MspInit+0x38>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_MspInit+0x38>)
 80010fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	210f      	movs	r1, #15
 800110c:	f06f 0001 	mvn.w	r0, #1
 8001110:	f00c fb18 	bl	800d744 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58024400 	.word	0x58024400

08001120 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_CRC_MspInit+0x3c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d10e      	bne.n	8001150 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_CRC_MspInit+0x40>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	4a09      	ldr	r2, [pc, #36]	; (8001160 <HAL_CRC_MspInit+0x40>)
 800113a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <HAL_CRC_MspInit+0x40>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	58024c00 	.word	0x58024c00
 8001160:	58024400 	.word	0x58024400

08001164 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_DMA2D_MspInit+0x48>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d116      	bne.n	80011a4 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_DMA2D_MspInit+0x4c>)
 8001178:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <HAL_DMA2D_MspInit+0x4c>)
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_DMA2D_MspInit+0x4c>)
 8001188:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2105      	movs	r1, #5
 8001198:	205a      	movs	r0, #90	; 0x5a
 800119a:	f00c fad3 	bl	800d744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800119e:	205a      	movs	r0, #90	; 0x5a
 80011a0:	f00c faea 	bl	800d778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	52001000 	.word	0x52001000
 80011b0:	58024400 	.word	0x58024400

080011b4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0bc      	sub	sp, #240	; 0xf0
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0320 	add.w	r3, r7, #32
 80011d0:	22bc      	movs	r2, #188	; 0xbc
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f026 fbcd 	bl	8027974 <memset>
  if(hltdc->Instance==LTDC)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a68      	ldr	r2, [pc, #416]	; (8001380 <HAL_LTDC_MspInit+0x1cc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	f040 80c8 	bne.w	8001376 <HAL_LTDC_MspInit+0x1c2>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011ea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 80011ec:	2305      	movs	r3, #5
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 80011f0:	23a0      	movs	r3, #160	; 0xa0
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 80011fc:	2353      	movs	r3, #83	; 0x53
 80011fe:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001204:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001206:	2300      	movs	r3, #0
 8001208:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	4618      	mov	r0, r3
 8001214:	f010 fb9e 	bl	8011954 <HAL_RCCEx_PeriphCLKConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 800121e:	f7ff feb3 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001222:	4b58      	ldr	r3, [pc, #352]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 8001224:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001228:	4a56      	ldr	r2, [pc, #344]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001232:	4b54      	ldr	r3, [pc, #336]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 8001234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001240:	4b50      	ldr	r3, [pc, #320]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 8001248:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800124c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001250:	4b4c      	ldr	r3, [pc, #304]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800125e:	4b49      	ldr	r3, [pc, #292]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	4a47      	ldr	r2, [pc, #284]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 8001266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126e:	4b45      	ldr	r3, [pc, #276]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800127c:	4b41      	ldr	r3, [pc, #260]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	4a40      	ldr	r2, [pc, #256]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 8001284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128c:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	4a38      	ldr	r2, [pc, #224]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 80012a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <HAL_LTDC_MspInit+0x1d0>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80012b8:	23fc      	movs	r3, #252	; 0xfc
 80012ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012d0:	230e      	movs	r3, #14
 80012d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012da:	4619      	mov	r1, r3
 80012dc:	482a      	ldr	r0, [pc, #168]	; (8001388 <HAL_LTDC_MspInit+0x1d4>)
 80012de:	f00c fd41 	bl	800dd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80012e2:	f24d 2303 	movw	r3, #53763	; 0xd203
 80012e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f6:	2302      	movs	r3, #2
 80012f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012fc:	230e      	movs	r3, #14
 80012fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001302:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001306:	4619      	mov	r1, r3
 8001308:	4820      	ldr	r0, [pc, #128]	; (800138c <HAL_LTDC_MspInit+0x1d8>)
 800130a:	f00c fd2b 	bl	800dd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800130e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001328:	230e      	movs	r3, #14
 800132a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800132e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001332:	4619      	mov	r1, r3
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <HAL_LTDC_MspInit+0x1dc>)
 8001336:	f00c fd15 	bl	800dd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800133a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001354:	230e      	movs	r3, #14
 8001356:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800135a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800135e:	4619      	mov	r1, r3
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <HAL_LTDC_MspInit+0x1e0>)
 8001362:	f00c fcff 	bl	800dd64 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2105      	movs	r1, #5
 800136a:	2058      	movs	r0, #88	; 0x58
 800136c:	f00c f9ea 	bl	800d744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001370:	2058      	movs	r0, #88	; 0x58
 8001372:	f00c fa01 	bl	800d778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	37f0      	adds	r7, #240	; 0xf0
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	50001000 	.word	0x50001000
 8001384:	58024400 	.word	0x58024400
 8001388:	58022800 	.word	0x58022800
 800138c:	58022000 	.word	0x58022000
 8001390:	58022400 	.word	0x58022400
 8001394:	58021c00 	.word	0x58021c00

08001398 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0bc      	sub	sp, #240	; 0xf0
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	22bc      	movs	r2, #188	; 0xbc
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f026 fadb 	bl	8027974 <memset>
  if(hqspi->Instance==QUADSPI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a76      	ldr	r2, [pc, #472]	; (800159c <HAL_QSPI_MspInit+0x204>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	f040 80e4 	bne.w	8001592 <HAL_QSPI_MspInit+0x1fa>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80013ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ce:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d4:	f107 0320 	add.w	r3, r7, #32
 80013d8:	4618      	mov	r0, r3
 80013da:	f010 fabb 	bl	8011954 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80013e4:	f7ff fdd0 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80013e8:	4b6d      	ldr	r3, [pc, #436]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 80013ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013ee:	4a6c      	ldr	r2, [pc, #432]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80013f8:	4b69      	ldr	r3, [pc, #420]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 80013fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001406:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	4a64      	ldr	r2, [pc, #400]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 800140e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001416:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001424:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142a:	4a5d      	ldr	r2, [pc, #372]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 800142c:	f043 0320 	orr.w	r3, r3, #32
 8001430:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001434:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	4a55      	ldr	r2, [pc, #340]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 800144a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001460:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	4a4e      	ldr	r2, [pc, #312]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001470:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <HAL_QSPI_MspInit+0x208>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800147e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001498:	2309      	movs	r3, #9
 800149a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a2:	4619      	mov	r1, r3
 80014a4:	483f      	ldr	r0, [pc, #252]	; (80015a4 <HAL_QSPI_MspInit+0x20c>)
 80014a6:	f00c fc5d 	bl	800dd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014aa:	2340      	movs	r3, #64	; 0x40
 80014ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014c2:	230a      	movs	r3, #10
 80014c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014cc:	4619      	mov	r1, r3
 80014ce:	4835      	ldr	r0, [pc, #212]	; (80015a4 <HAL_QSPI_MspInit+0x20c>)
 80014d0:	f00c fc48 	bl	800dd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80014d4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80014d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014ee:	2309      	movs	r3, #9
 80014f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014f8:	4619      	mov	r1, r3
 80014fa:	482b      	ldr	r0, [pc, #172]	; (80015a8 <HAL_QSPI_MspInit+0x210>)
 80014fc:	f00c fc32 	bl	800dd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001504:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800151a:	230a      	movs	r3, #10
 800151c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001520:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001524:	4619      	mov	r1, r3
 8001526:	4820      	ldr	r0, [pc, #128]	; (80015a8 <HAL_QSPI_MspInit+0x210>)
 8001528:	f00c fc1c 	bl	800dd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800152c:	230c      	movs	r3, #12
 800152e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001544:	2309      	movs	r3, #9
 8001546:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800154a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800154e:	4619      	mov	r1, r3
 8001550:	4816      	ldr	r0, [pc, #88]	; (80015ac <HAL_QSPI_MspInit+0x214>)
 8001552:	f00c fc07 	bl	800dd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001556:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800155a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001570:	2309      	movs	r3, #9
 8001572:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <HAL_QSPI_MspInit+0x218>)
 800157e:	f00c fbf1 	bl	800dd64 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2105      	movs	r1, #5
 8001586:	205c      	movs	r0, #92	; 0x5c
 8001588:	f00c f8dc 	bl	800d744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800158c:	205c      	movs	r0, #92	; 0x5c
 800158e:	f00c f8f3 	bl	800d778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	37f0      	adds	r7, #240	; 0xf0
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	52005000 	.word	0x52005000
 80015a0:	58024400 	.word	0x58024400
 80015a4:	58021800 	.word	0x58021800
 80015a8:	58021400 	.word	0x58021400
 80015ac:	58021c00 	.word	0x58021c00
 80015b0:	58020c00 	.word	0x58020c00

080015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0b8      	sub	sp, #224	; 0xe0
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	22bc      	movs	r2, #188	; 0xbc
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f026 f9cd 	bl	8027974 <memset>
  if(huart->Instance==USART3)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a25      	ldr	r2, [pc, #148]	; (8001674 <HAL_UART_MspInit+0xc0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d142      	bne.n	800166a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015e4:	2302      	movs	r3, #2
 80015e6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	4618      	mov	r0, r3
 80015f4:	f010 f9ae 	bl	8011954 <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015fe:	f7ff fcc3 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_UART_MspInit+0xc4>)
 8001604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <HAL_UART_MspInit+0xc4>)
 800160a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_UART_MspInit+0xc4>)
 8001614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_UART_MspInit+0xc4>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <HAL_UART_MspInit+0xc4>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_UART_MspInit+0xc4>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800163e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001642:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001658:	2307      	movs	r3, #7
 800165a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <HAL_UART_MspInit+0xc8>)
 8001666:	f00c fb7d 	bl	800dd64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	37e0      	adds	r7, #224	; 0xe0
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40004800 	.word	0x40004800
 8001678:	58024400 	.word	0x58024400
 800167c:	58020400 	.word	0x58020400

08001680 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	b0b6      	sub	sp, #216	; 0xd8
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001686:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001696:	4b4f      	ldr	r3, [pc, #316]	; (80017d4 <HAL_FMC_MspInit+0x154>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 8096 	bne.w	80017cc <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 80016a0:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_FMC_MspInit+0x154>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	22bc      	movs	r2, #188	; 0xbc
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f026 f960 	bl	8027974 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80016b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016b8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4618      	mov	r0, r3
 80016c4:	f010 f946 	bl	8011954 <HAL_RCCEx_PeriphCLKConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 80016ce:	f7ff fc5b 	bl	8000f88 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <HAL_FMC_MspInit+0x158>)
 80016d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016d8:	4a3f      	ldr	r2, [pc, #252]	; (80017d8 <HAL_FMC_MspInit+0x158>)
 80016da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016de:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80016e2:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <HAL_FMC_MspInit+0x158>)
 80016e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80016f0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80016f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800170a:	230c      	movs	r3, #12
 800170c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001710:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001714:	4619      	mov	r1, r3
 8001716:	4831      	ldr	r0, [pc, #196]	; (80017dc <HAL_FMC_MspInit+0x15c>)
 8001718:	f00c fb24 	bl	800dd64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800171c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001720:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001736:	230c      	movs	r3, #12
 8001738:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800173c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001740:	4619      	mov	r1, r3
 8001742:	4827      	ldr	r0, [pc, #156]	; (80017e0 <HAL_FMC_MspInit+0x160>)
 8001744:	f00c fb0e 	bl	800dd64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001748:	f24c 7303 	movw	r3, #50947	; 0xc703
 800174c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001762:	230c      	movs	r3, #12
 8001764:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001768:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800176c:	4619      	mov	r1, r3
 800176e:	481d      	ldr	r0, [pc, #116]	; (80017e4 <HAL_FMC_MspInit+0x164>)
 8001770:	f00c faf8 	bl	800dd64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001774:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001778:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800178e:	230c      	movs	r3, #12
 8001790:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001794:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001798:	4619      	mov	r1, r3
 800179a:	4813      	ldr	r0, [pc, #76]	; (80017e8 <HAL_FMC_MspInit+0x168>)
 800179c:	f00c fae2 	bl	800dd64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017a0:	23e0      	movs	r3, #224	; 0xe0
 80017a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017b8:	230c      	movs	r3, #12
 80017ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017c2:	4619      	mov	r1, r3
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <HAL_FMC_MspInit+0x16c>)
 80017c6:	f00c facd 	bl	800dd64 <HAL_GPIO_Init>
 80017ca:	e000      	b.n	80017ce <HAL_FMC_MspInit+0x14e>
    return;
 80017cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80017ce:	37d8      	adds	r7, #216	; 0xd8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	24000148 	.word	0x24000148
 80017d8:	58024400 	.word	0x58024400
 80017dc:	58021000 	.word	0x58021000
 80017e0:	58021800 	.word	0x58021800
 80017e4:	58020c00 	.word	0x58020c00
 80017e8:	58021400 	.word	0x58021400
 80017ec:	58021c00 	.word	0x58021c00

080017f0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80017f8:	f7ff ff42 	bl	8001680 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_FMC_MspDeInit+0x58>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d123      	bne.n	8001858 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_FMC_MspDeInit+0x58>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_FMC_MspDeInit+0x5c>)
 8001818:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800181c:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_FMC_MspDeInit+0x5c>)
 800181e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001822:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001826:	f64f 7183 	movw	r1, #65411	; 0xff83
 800182a:	480e      	ldr	r0, [pc, #56]	; (8001864 <HAL_FMC_MspDeInit+0x60>)
 800182c:	f00c fc4a 	bl	800e0c4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001830:	f248 1133 	movw	r1, #33075	; 0x8133
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <HAL_FMC_MspDeInit+0x64>)
 8001836:	f00c fc45 	bl	800e0c4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800183a:	f24c 7103 	movw	r1, #50947	; 0xc703
 800183e:	480b      	ldr	r0, [pc, #44]	; (800186c <HAL_FMC_MspDeInit+0x68>)
 8001840:	f00c fc40 	bl	800e0c4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001844:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8001848:	4809      	ldr	r0, [pc, #36]	; (8001870 <HAL_FMC_MspDeInit+0x6c>)
 800184a:	f00c fc3b 	bl	800e0c4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800184e:	21e0      	movs	r1, #224	; 0xe0
 8001850:	4808      	ldr	r0, [pc, #32]	; (8001874 <HAL_FMC_MspDeInit+0x70>)
 8001852:	f00c fc37 	bl	800e0c4 <HAL_GPIO_DeInit>
 8001856:	e000      	b.n	800185a <HAL_FMC_MspDeInit+0x56>
    return;
 8001858:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2400014c 	.word	0x2400014c
 8001860:	58024400 	.word	0x58024400
 8001864:	58021000 	.word	0x58021000
 8001868:	58021800 	.word	0x58021800
 800186c:	58020c00 	.word	0x58020c00
 8001870:	58021400 	.word	0x58021400
 8001874:	58021c00 	.word	0x58021c00

08001878 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 8001880:	f7ff ffc0 	bl	8001804 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b090      	sub	sp, #64	; 0x40
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b0f      	cmp	r3, #15
 8001898:	d827      	bhi.n	80018ea <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800189a:	2200      	movs	r2, #0
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	2036      	movs	r0, #54	; 0x36
 80018a0:	f00b ff50 	bl	800d744 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018a4:	2036      	movs	r0, #54	; 0x36
 80018a6:	f00b ff67 	bl	800d778 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80018aa:	4a29      	ldr	r2, [pc, #164]	; (8001950 <HAL_InitTick+0xc4>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <HAL_InitTick+0xc8>)
 80018b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b6:	4a27      	ldr	r2, [pc, #156]	; (8001954 <HAL_InitTick+0xc8>)
 80018b8:	f043 0310 	orr.w	r3, r3, #16
 80018bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_InitTick+0xc8>)
 80018c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ce:	f107 0210 	add.w	r2, r7, #16
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f00f fff9 	bl	80118d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d106      	bne.n	80018f6 <HAL_InitTick+0x6a>
 80018e8:	e001      	b.n	80018ee <HAL_InitTick+0x62>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e02b      	b.n	8001946 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018ee:	f00f ffc3 	bl	8011878 <HAL_RCC_GetPCLK1Freq>
 80018f2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80018f4:	e004      	b.n	8001900 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018f6:	f00f ffbf 	bl	8011878 <HAL_RCC_GetPCLK1Freq>
 80018fa:	4603      	mov	r3, r0
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001902:	4a15      	ldr	r2, [pc, #84]	; (8001958 <HAL_InitTick+0xcc>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	0c9b      	lsrs	r3, r3, #18
 800190a:	3b01      	subs	r3, #1
 800190c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_InitTick+0xd0>)
 8001910:	4a13      	ldr	r2, [pc, #76]	; (8001960 <HAL_InitTick+0xd4>)
 8001912:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_InitTick+0xd0>)
 8001916:	f240 32e7 	movw	r2, #999	; 0x3e7
 800191a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800191c:	4a0f      	ldr	r2, [pc, #60]	; (800195c <HAL_InitTick+0xd0>)
 800191e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001920:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_InitTick+0xd0>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_InitTick+0xd0>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800192e:	480b      	ldr	r0, [pc, #44]	; (800195c <HAL_InitTick+0xd0>)
 8001930:	f011 fc27 	bl	8013182 <HAL_TIM_Base_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d104      	bne.n	8001944 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800193a:	4808      	ldr	r0, [pc, #32]	; (800195c <HAL_InitTick+0xd0>)
 800193c:	f011 fc82 	bl	8013244 <HAL_TIM_Base_Start_IT>
 8001940:	4603      	mov	r3, r0
 8001942:	e000      	b.n	8001946 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	3740      	adds	r7, #64	; 0x40
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	24000048 	.word	0x24000048
 8001954:	58024400 	.word	0x58024400
 8001958:	431bde83 	.word	0x431bde83
 800195c:	2400b3d4 	.word	0x2400b3d4
 8001960:	40001000 	.word	0x40001000

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <TIM6_DAC_IRQHandler+0x10>)
 8001996:	f011 fccd 	bl	8013334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2400b3d4 	.word	0x2400b3d4

080019a4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <LTDC_IRQHandler+0x10>)
 80019aa:	f00d fc07 	bl	800f1bc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2400b240 	.word	0x2400b240

080019b8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA2D_IRQHandler+0x10>)
 80019be:	f00c f8c1 	bl	800db44 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2400b320 	.word	0x2400b320

080019cc <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <QUADSPI_IRQHandler+0x10>)
 80019d2:	f00e f8ed 	bl	800fbb0 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2400b388 	.word	0x2400b388

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_kill>:

int _kill(int pid, int sig)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019fa:	f025 ff61 	bl	80278c0 <__errno>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2216      	movs	r2, #22
 8001a02:	601a      	str	r2, [r3, #0]
	return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_exit>:

void _exit (int status)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ffe7 	bl	80019f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a22:	e7fe      	b.n	8001a22 <_exit+0x12>

08001a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e00a      	b.n	8001a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a36:	f3af 8000 	nop.w
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60ba      	str	r2, [r7, #8]
 8001a42:	b2ca      	uxtb	r2, r1
 8001a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbf0      	blt.n	8001a36 <_read+0x12>
	}

return len;
 8001a54:	687b      	ldr	r3, [r7, #4]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e009      	b.n	8001a84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	60ba      	str	r2, [r7, #8]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbf1      	blt.n	8001a70 <_write+0x12>
	}
	return len;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_close>:

int _close(int file)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001abe:	605a      	str	r2, [r3, #4]
	return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <_isatty>:

int _isatty(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
	return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <_sbrk+0x5c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <_sbrk+0x60>)
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <_sbrk+0x64>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <_sbrk+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b30:	f025 fec6 	bl	80278c0 <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	220c      	movs	r2, #12
 8001b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e009      	b.n	8001b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <_sbrk+0x64>)
 8001b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	24080000 	.word	0x24080000
 8001b60:	00001000 	.word	0x00001000
 8001b64:	24000150 	.word	0x24000150
 8001b68:	2400b500 	.word	0x2400b500

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b70:	f009 f86a 	bl	800ac48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b74:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b76:	490d      	ldr	r1, [pc, #52]	; (8001bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	; (8001bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f025 fea9 	bl	80278f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7fe fd73 	bl	8000688 <main>
  bx  lr
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ba8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bac:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 8001bb0:	0802c748 	.word	0x0802c748
  ldr r2, =_sbss
 8001bb4:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8001bb8:	2400b500 	.word	0x2400b500

08001bbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC3_IRQHandler>

08001bbe <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001bc2:	f001 fc69 	bl	8003498 <touchgfx_init>
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001bd2:	f001 fc8b 	bl	80034ec <touchgfx_taskEntry>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    {
 8001be8:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	601a      	str	r2, [r3, #0]
    }
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	0802942c 	.word	0x0802942c

08001c00 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    }
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ffe9 	bl	8001be0 <_ZN8touchgfx15TouchControllerD1Ev>
 8001c0e:	2104      	movs	r1, #4
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f025 fdf4 	bl	80277fe <_ZdlPvj>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 8001c28:	f000 faa8 	bl	800217c <_ZN25STM32H745ITouchController4initEv>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	68b8      	ldr	r0, [r7, #8]
 8001c44:	f000 fabe 	bl	80021c4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ffbb 	bl	8001be0 <_ZN8touchgfx15TouchControllerD1Ev>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	08029414 	.word	0x08029414

08001c78 <_ZN20STM32TouchControllerD0Ev>:
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ffe7 	bl	8001c54 <_ZN20STM32TouchControllerD1Ev>
 8001c86:	2104      	movs	r1, #4
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f025 fdb8 	bl	80277fe <_ZdlPvj>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d80c      	bhi.n	8001cc2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8001ca8:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8001caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cae:	bf00      	nop
 8001cb0:	08001cc1 	.word	0x08001cc1
 8001cb4:	08001cc1 	.word	0x08001cc1
 8001cb8:	08001cc1 	.word	0x08001cc1
 8001cbc:	08001cc1 	.word	0x08001cc1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 8001cc0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop

08001cd0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d80c      	bhi.n	8001cfa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8001ce0:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	08001cf9 	.word	0x08001cf9
 8001cec:	08001cf9 	.word	0x08001cf9
 8001cf0:	08001cf9 	.word	0x08001cf9
 8001cf4:	08001cf9 	.word	0x08001cf9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8001cf8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop

08001d08 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d80c      	bhi.n	8001d32 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8001d18:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001d31 	.word	0x08001d31
 8001d24:	08001d31 	.word	0x08001d31
 8001d28:	08001d31 	.word	0x08001d31
 8001d2c:	08001d31 	.word	0x08001d31
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8001d30:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
    {
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <_ZN8touchgfx3HALD1Ev+0x1c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	601a      	str	r2, [r3, #0]
    }
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	0802a4d4 	.word	0x0802a4d4

08001d60 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
    }
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ffe9 	bl	8001d40 <_ZN8touchgfx3HALD1Ev>
 8001d6e:	217c      	movs	r1, #124	; 0x7c
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f025 fd44 	bl	80277fe <_ZdlPvj>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
 8001db4:	4613      	mov	r3, r2
 8001db6:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	887a      	ldrh	r2, [r7, #2]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d304      	bcc.n	8001dcc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	883a      	ldrh	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d205      	bcs.n	8001dd8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001dd0:	219e      	movs	r1, #158	; 0x9e
 8001dd2:	480a      	ldr	r0, [pc, #40]	; (8001dfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001dd4:	f025 fd42 	bl	802785c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001dd8:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001de0:	883b      	ldrh	r3, [r7, #0]
 8001de2:	8013      	strh	r3, [r2, #0]
    }
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	2400aee0 	.word	0x2400aee0
 8001df0:	2400aee2 	.word	0x2400aee2
 8001df4:	08028994 	.word	0x08028994
 8001df8:	080289f8 	.word	0x080289f8
 8001dfc:	08028a3c 	.word	0x08028a3c
 8001e00:	2400aee6 	.word	0x2400aee6
 8001e04:	2400aee8 	.word	0x2400aee8

08001e08 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4610      	mov	r0, r2
 8001e28:	4798      	blx	r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	e000      	b.n	8001e30 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001e2e:	2300      	movs	r3, #0
    }
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f014 fe77 	bl	8016b34 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	33a4      	adds	r3, #164	; 0xa4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
    }
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
    {
        return false;
 8001e64:	2300      	movs	r3, #0
    }
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001e8c:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001e90:	4811      	ldr	r0, [pc, #68]	; (8001ed8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001e92:	f025 fce3 	bl	802785c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001eb6:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001ec6:	701a      	strb	r2, [r3, #0]
    }
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	08028a90 	.word	0x08028a90
 8001ed4:	08028ac8 	.word	0x08028ac8
 8001ed8:	08028a3c 	.word	0x08028a3c
 8001edc:	2400aeea 	.word	0x2400aeea
 8001ee0:	2400aeeb 	.word	0x2400aeeb

08001ee4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001eec:	2300      	movs	r3, #0
    }
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d004      	beq.n	8001f18 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	4610      	mov	r0, r2
 8001f16:	4798      	blx	r3
        }
    }
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3318      	adds	r3, #24
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4798      	blx	r3
 8001f52:	4603      	mov	r3, r0
    }
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d011      	beq.n	8001f98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d11e      	bne.n	8001fba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001f84:	881a      	ldrh	r2, [r3, #0]
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001f88:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001f8a:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001f8c:	89bb      	ldrh	r3, [r7, #12]
 8001f8e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001f96:	e010      	b.n	8001fba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00c      	beq.n	8001fba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001fac:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001fb0:	89fb      	ldrh	r3, [r7, #14]
 8001fb2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
    }
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	2400aee4 	.word	0x2400aee4
 8001fcc:	2400aee2 	.word	0x2400aee2
 8001fd0:	2400aee0 	.word	0x2400aee0

08001fd4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f013 ff5d 	bl	8015e9e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	4a05      	ldr	r2, [pc, #20]	; (800200c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fe9f 	bl	8001d40 <_ZN8touchgfx3HALD1Ev>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	08029794 	.word	0x08029794

08002010 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffe7 	bl	8001fec <_ZN20TouchGFXGeneratedHALD1Ev>
 800201e:	217c      	movs	r1, #124	; 0x7c
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f025 fbec 	bl	80277fe <_ZdlPvj>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ffca 	bl	8001fd4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	f001 fd3a 	bl	8003acc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4618      	mov	r0, r3
 800206c:	f001 fdc6 	bl	8003bfc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6839      	ldr	r1, [r7, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f001 fdc5 	bl	8003c18 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6839      	ldr	r1, [r7, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 fdcd 	bl	8003c44 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	f001 fe14 	bl	8003cf4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 fd17 	bl	8003b14 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 fd1b 	bl	8003b34 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4618      	mov	r0, r3
 8002112:	f001 fd1d 	bl	8003b50 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f001 fd1f 	bl	8003b6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	4a05      	ldr	r2, [pc, #20]	; (8002158 <_ZN11TouchGFXHALD1Ev+0x20>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff4f 	bl	8001fec <_ZN20TouchGFXGeneratedHALD1Ev>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	08029444 	.word	0x08029444

0800215c <_ZN11TouchGFXHALD0Ev>:
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ffe7 	bl	8002138 <_ZN11TouchGFXHALD1Ev>
 800216a:	217c      	movs	r1, #124	; 0x7c
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f025 fb46 	bl	80277fe <_ZdlPvj>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8002182:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002186:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8002188:	f44f 7388 	mov.w	r3, #272	; 0x110
 800218c:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 800218e:	2308      	movs	r3, #8
 8002190:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8002196:	463b      	mov	r3, r7
 8002198:	4619      	mov	r1, r3
 800219a:	2000      	movs	r0, #0
 800219c:	f00a ff16 	bl	800cfcc <BSP_TS_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <_ZN25STM32H745ITouchController4initEv+0x44>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
 80021b6:	e000      	b.n	80021ba <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 80021b8:	bf00      	nop
}
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	24000154 	.word	0x24000154

080021c4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	f083 0301 	eor.w	r3, r3, #1
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 80021dc:	2300      	movs	r3, #0
 80021de:	e014      	b.n	800220a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 80021e0:	490d      	ldr	r1, [pc, #52]	; (8002218 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 80021e2:	2000      	movs	r0, #0
 80021e4:	f00a ffae 	bl	800d144 <BSP_TS_GetState>

    if (!state.TouchDetected)
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e00a      	b.n	800220a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	461a      	mov	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	461a      	mov	r2, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	601a      	str	r2, [r3, #0]
    return true;
 8002208:	2301      	movs	r3, #1
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	24000154 	.word	0x24000154
 8002218:	24000158 	.word	0x24000158

0800221c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002220:	2200      	movs	r2, #0
 8002222:	2101      	movs	r1, #1
 8002224:	2001      	movs	r0, #1
 8002226:	f005 fa48 	bl	80076ba <osSemaphoreNew>
 800222a:	4603      	mov	r3, r0
 800222c:	4a0f      	ldr	r2, [pc, #60]	; (800226c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800222e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800223c:	2128      	movs	r1, #40	; 0x28
 800223e:	480e      	ldr	r0, [pc, #56]	; (8002278 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002240:	f025 fb0c 	bl	802785c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002244:	2200      	movs	r2, #0
 8002246:	2104      	movs	r1, #4
 8002248:	2001      	movs	r0, #1
 800224a:	f005 fb55 	bl	80078f8 <osMessageQueueNew>
 800224e:	4603      	mov	r3, r0
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002252:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002260:	212c      	movs	r1, #44	; 0x2c
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002264:	f025 fafa 	bl	802785c <__assert_func>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	24000164 	.word	0x24000164
 8002270:	08028b18 	.word	0x08028b18
 8002274:	08028b64 	.word	0x08028b64
 8002278:	08028b94 	.word	0x08028b94
 800227c:	24000168 	.word	0x24000168
 8002280:	08028be4 	.word	0x08028be4

08002284 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	4618      	mov	r0, r3
 8002292:	f005 fa9b 	bl	80077cc <osSemaphoreAcquire>
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	24000164 	.word	0x24000164

080022a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f005 fae1 	bl	8007870 <osSemaphoreRelease>
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	24000164 	.word	0x24000164

080022b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 fa82 	bl	80077cc <osSemaphoreAcquire>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	24000164 	.word	0x24000164

080022d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f005 fac9 	bl	8007870 <osSemaphoreRelease>
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	24000164 	.word	0x24000164

080022e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	2300      	movs	r3, #0
 80022f2:	2200      	movs	r2, #0
 80022f4:	4903      	ldr	r1, [pc, #12]	; (8002304 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80022f6:	f005 fb73 	bl	80079e0 <osMessageQueuePut>
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	24000168 	.word	0x24000168
 8002304:	24000004 	.word	0x24000004

08002308 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	1d39      	adds	r1, r7, #4
 8002314:	2300      	movs	r3, #0
 8002316:	2200      	movs	r2, #0
 8002318:	f005 fbc2 	bl	8007aa0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	1d39      	adds	r1, r7, #4
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	2200      	movs	r2, #0
 8002328:	f005 fbba 	bl	8007aa0 <osMessageQueueGet>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	24000168 	.word	0x24000168

08002338 <__NVIC_EnableIRQ>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002346:	2b00      	cmp	r3, #0
 8002348:	db0b      	blt.n	8002362 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	4907      	ldr	r1, [pc, #28]	; (8002370 <__NVIC_EnableIRQ+0x38>)
 8002352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2001      	movs	r0, #1
 800235a:	fa00 f202 	lsl.w	r2, r0, r2
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100

08002374 <__NVIC_DisableIRQ>:
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db12      	blt.n	80023ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	490a      	ldr	r1, [pc, #40]	; (80023b8 <__NVIC_DisableIRQ+0x44>)
 800238e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	3320      	adds	r3, #32
 800239c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80023a0:	f3bf 8f4f 	dsb	sy
}
 80023a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023a6:	f3bf 8f6f 	isb	sy
}
 80023aa:	bf00      	nop
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100

080023bc <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
        : color(0)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
    {
    }
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
    {
        return color;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
    }
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
    {
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
    }
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	08029564 	.word	0x08029564

08002410 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
    }
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffe9 	bl	80023f0 <_ZN8touchgfx9DMA_QueueD1Ev>
 800241e:	2104      	movs	r1, #4
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f025 f9ec 	bl	80277fe <_ZdlPvj>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3344      	adds	r3, #68	; 0x44
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
    }
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
    {
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	601a      	str	r2, [r3, #0]
    }
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	0802aa2c 	.word	0x0802aa2c

0800246c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    }
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffe9 	bl	800244c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800247a:	210c      	movs	r1, #12
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f025 f9be 	bl	80277fe <_ZdlPvj>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002496:	4a09      	ldr	r2, [pc, #36]	; (80024bc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	721a      	strb	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	725a      	strb	r2, [r3, #9]
    {
    }
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	0802aa2c 	.word	0x0802aa2c

080024c0 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80024c8:	2301      	movs	r3, #1
    }
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3328      	adds	r3, #40	; 0x28
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4610      	mov	r0, r2
 80024ea:	4798      	blx	r3
    }
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
        return instance;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
    }
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	2400aeec 	.word	0x2400aeec

0800250c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3314      	adds	r3, #20
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4610      	mov	r0, r2
 8002524:	4798      	blx	r3
    }
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002536:	f7ff ffdd 	bl	80024f4 <_ZN8touchgfx3HAL11getInstanceEv>
 800253a:	4603      	mov	r3, r0
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ffe5 	bl	800250c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	330c      	adds	r3, #12
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff30 	bl	80023bc <_ZN8touchgfx9colortypeC1Ev>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	330c      	adds	r3, #12
 8002576:	4619      	mov	r1, r3
 8002578:	4610      	mov	r0, r2
 800257a:	f7ff ff87 	bl	800248c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800257e:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <_ZN8STM32DMAC1Ev+0x50>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f103 000c 	add.w	r0, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3320      	adds	r3, #32
 800258e:	2260      	movs	r2, #96	; 0x60
 8002590:	4619      	mov	r1, r3
 8002592:	f014 fc35 	bl	8016e00 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3320      	adds	r3, #32
 800259a:	245f      	movs	r4, #95	; 0x5f
 800259c:	461d      	mov	r5, r3
 800259e:	2c00      	cmp	r4, #0
 80025a0:	db05      	blt.n	80025ae <_ZN8STM32DMAC1Ev+0x46>
 80025a2:	4628      	mov	r0, r5
 80025a4:	f7ff ffd1 	bl	800254a <_ZN8touchgfx6BlitOpC1Ev>
 80025a8:	3520      	adds	r5, #32
 80025aa:	3c01      	subs	r4, #1
 80025ac:	e7f7      	b.n	800259e <_ZN8STM32DMAC1Ev+0x36>
{
}
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bdb0      	pop	{r4, r5, r7, pc}
 80025b8:	08029514 	.word	0x08029514

080025bc <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	4a09      	ldr	r2, [pc, #36]	; (80025ec <_ZN8STM32DMAD1Ev+0x30>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80025ca:	205a      	movs	r0, #90	; 0x5a
 80025cc:	f7ff fed2 	bl	8002374 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	330c      	adds	r3, #12
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fac7 	bl	8002b68 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff35 	bl	800244c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	08029514 	.word	0x08029514

080025f0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
}
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ffdf 	bl	80025bc <_ZN8STM32DMAD1Ev>
 80025fe:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f025 f8fb 	bl	80277fe <_ZdlPvj>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <_ZN8STM32DMA10initializeEv+0x54>)
 800261e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002622:	4a11      	ldr	r2, [pc, #68]	; (8002668 <_ZN8STM32DMA10initializeEv+0x54>)
 8002624:	f043 0310 	orr.w	r3, r3, #16
 8002628:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <_ZN8STM32DMA10initializeEv+0x54>)
 800262e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <_ZN8STM32DMA10initializeEv+0x54>)
 800263c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <_ZN8STM32DMA10initializeEv+0x54>)
 8002640:	f043 0310 	orr.w	r3, r3, #16
 8002644:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <_ZN8STM32DMA10initializeEv+0x54>)
 8002648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <_ZN8STM32DMA10initializeEv+0x54>)
 800264c:	f023 0310 	bic.w	r3, r3, #16
 8002650:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <_ZN8STM32DMA10initializeEv+0x58>)
 8002654:	4a06      	ldr	r2, [pc, #24]	; (8002670 <_ZN8STM32DMA10initializeEv+0x5c>)
 8002656:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002658:	205a      	movs	r0, #90	; 0x5a
 800265a:	f7ff fe6d 	bl	8002338 <__NVIC_EnableIRQ>
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	58024400 	.word	0x58024400
 800266c:	2400b320 	.word	0x2400b320
 8002670:	0800252f 	.word	0x0800252f

08002674 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	2b0b      	cmp	r3, #11
 8002688:	d826      	bhi.n	80026d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800268a:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	080026cd 	.word	0x080026cd
 8002694:	080026c7 	.word	0x080026c7
 8002698:	080026c1 	.word	0x080026c1
 800269c:	080026d9 	.word	0x080026d9
 80026a0:	080026d9 	.word	0x080026d9
 80026a4:	080026d9 	.word	0x080026d9
 80026a8:	080026d9 	.word	0x080026d9
 80026ac:	080026d3 	.word	0x080026d3
 80026b0:	080026d3 	.word	0x080026d3
 80026b4:	080026d3 	.word	0x080026d3
 80026b8:	080026d3 	.word	0x080026d3
 80026bc:	080026d3 	.word	0x080026d3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
        break;
 80026c4:	e00e      	b.n	80026e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80026c6:	2301      	movs	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
        break;
 80026ca:	e00b      	b.n	80026e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80026cc:	2302      	movs	r3, #2
 80026ce:	60fb      	str	r3, [r7, #12]
        break;
 80026d0:	e008      	b.n	80026e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80026d2:	2305      	movs	r3, #5
 80026d4:	60fb      	str	r3, [r7, #12]
        break;
 80026d6:	e005      	b.n	80026e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80026da:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80026dc:	2166      	movs	r1, #102	; 0x66
 80026de:	4806      	ldr	r0, [pc, #24]	; (80026f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80026e0:	f025 f8bc 	bl	802785c <__assert_func>
        break;
    }

    return dma2dColorMode;
 80026e4:	68fb      	ldr	r3, [r7, #12]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	08028c28 	.word	0x08028c28
 80026f4:	08028c44 	.word	0x08028c44
 80026f8:	08028c90 	.word	0x08028c90

080026fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	2b0a      	cmp	r3, #10
 8002710:	d821      	bhi.n	8002756 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002712:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	08002751 	.word	0x08002751
 800271c:	0800274b 	.word	0x0800274b
 8002720:	08002745 	.word	0x08002745
 8002724:	08002757 	.word	0x08002757
 8002728:	08002757 	.word	0x08002757
 800272c:	08002757 	.word	0x08002757
 8002730:	08002757 	.word	0x08002757
 8002734:	0800274b 	.word	0x0800274b
 8002738:	0800274b 	.word	0x0800274b
 800273c:	0800274b 	.word	0x0800274b
 8002740:	0800274b 	.word	0x0800274b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
        break;
 8002748:	e00b      	b.n	8002762 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800274a:	2301      	movs	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
        break;
 800274e:	e008      	b.n	8002762 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002750:	2302      	movs	r3, #2
 8002752:	60fb      	str	r3, [r7, #12]
        break;
 8002754:	e005      	b.n	8002762 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002758:	4a05      	ldr	r2, [pc, #20]	; (8002770 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800275a:	2187      	movs	r1, #135	; 0x87
 800275c:	4805      	ldr	r0, [pc, #20]	; (8002774 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800275e:	f025 f87d 	bl	802785c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	08028c28 	.word	0x08028c28
 8002770:	08028cdc 	.word	0x08028cdc
 8002774:	08028c90 	.word	0x08028c90

08002778 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002780:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	7f5b      	ldrb	r3, [r3, #29]
 800279e:	4619      	mov	r1, r3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ff67 	bl	8002674 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80027a6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	7f9b      	ldrb	r3, [r3, #30]
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff60 	bl	8002674 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80027b4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	7f9b      	ldrb	r3, [r3, #30]
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff9d 	bl	80026fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80027c2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	8b5b      	ldrh	r3, [r3, #26]
 80027c8:	461a      	mov	r2, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	8a9b      	ldrh	r3, [r3, #20]
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	4b96      	ldr	r3, [pc, #600]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	8b5b      	ldrh	r3, [r3, #26]
 80027d8:	461a      	mov	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	8a9b      	ldrh	r3, [r3, #20]
 80027de:	1ad2      	subs	r2, r2, r3
 80027e0:	4b92      	ldr	r3, [pc, #584]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80027e2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	8b1b      	ldrh	r3, [r3, #24]
 80027e8:	461a      	mov	r2, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	8a9b      	ldrh	r3, [r3, #20]
 80027ee:	1ad2      	subs	r2, r2, r3
 80027f0:	4b8e      	ldr	r3, [pc, #568]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80027f2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80027f4:	4a8d      	ldr	r2, [pc, #564]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	8adb      	ldrh	r3, [r3, #22]
 80027fe:	461a      	mov	r2, r3
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	8a9b      	ldrh	r3, [r3, #20]
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	431a      	orrs	r2, r3
 8002808:	4b88      	ldr	r3, [pc, #544]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800280a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	4b86      	ldr	r3, [pc, #536]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4b84      	ldr	r3, [pc, #528]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800281a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002824:	d036      	beq.n	8002894 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 8002826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282a:	f200 80e2 	bhi.w	80029f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800282e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002832:	d014      	beq.n	800285e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8002834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002838:	f200 80db 	bhi.w	80029f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800283c:	2b80      	cmp	r3, #128	; 0x80
 800283e:	d059      	beq.n	80028f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8002840:	2b80      	cmp	r3, #128	; 0x80
 8002842:	f200 80d6 	bhi.w	80029f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	f000 80be 	beq.w	80029c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	f200 80d0 	bhi.w	80029f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002852:	2b04      	cmp	r3, #4
 8002854:	d039      	beq.n	80028ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8002856:	2b20      	cmp	r3, #32
 8002858:	f000 80b6 	beq.w	80029c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 800285c:	e0c9      	b.n	80029f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7f1b      	ldrb	r3, [r3, #28]
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	4619      	mov	r1, r3
 8002866:	4a71      	ldr	r2, [pc, #452]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002868:	4b71      	ldr	r3, [pc, #452]	; (8002a30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800286a:	430b      	orrs	r3, r1
 800286c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	330c      	adds	r3, #12
 8002872:	4c6e      	ldr	r4, [pc, #440]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fdaf 	bl	80023d8 <_ZNK8touchgfx9colortypecvmEv>
 800287a:	4603      	mov	r3, r0
 800287c:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800287e:	4a6b      	ldr	r2, [pc, #428]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	4b68      	ldr	r3, [pc, #416]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800288a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800288c:	4b67      	ldr	r3, [pc, #412]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800288e:	4a69      	ldr	r2, [pc, #420]	; (8002a34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002890:	601a      	str	r2, [r3, #0]
        break;
 8002892:	e0c7      	b.n	8002a24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	7f1b      	ldrb	r3, [r3, #28]
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	4619      	mov	r1, r3
 800289c:	4a63      	ldr	r2, [pc, #396]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800289e:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80028a0:	430b      	orrs	r3, r1
 80028a2:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	4c60      	ldr	r4, [pc, #384]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fd94 	bl	80023d8 <_ZNK8touchgfx9colortypecvmEv>
 80028b0:	4603      	mov	r3, r0
 80028b2:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80028b4:	4a5d      	ldr	r2, [pc, #372]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80028c0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80028c2:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80028c4:	4a5b      	ldr	r2, [pc, #364]	; (8002a34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80028c6:	601a      	str	r2, [r3, #0]
        break;
 80028c8:	e0ac      	b.n	8002a24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	7f1b      	ldrb	r3, [r3, #28]
 80028ce:	061b      	lsls	r3, r3, #24
 80028d0:	461a      	mov	r2, r3
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	4a55      	ldr	r2, [pc, #340]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028dc:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80028de:	4a53      	ldr	r2, [pc, #332]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80028ea:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80028ec:	4b4f      	ldr	r3, [pc, #316]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80028ee:	4a51      	ldr	r2, [pc, #324]	; (8002a34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80028f0:	601a      	str	r2, [r3, #0]
        break;
 80028f2:	e097      	b.n	8002a24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 80028f4:	2301      	movs	r3, #1
 80028f6:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1d1a      	adds	r2, r3, #4
 8002902:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	7f1b      	ldrb	r3, [r3, #28]
 800290a:	061b      	lsls	r3, r3, #24
 800290c:	461a      	mov	r2, r3
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	4a46      	ldr	r2, [pc, #280]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002918:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800291a:	4a44      	ldr	r2, [pc, #272]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002926:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8002932:	2b01      	cmp	r3, #1
 8002934:	d00d      	beq.n	8002952 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 8002936:	e020      	b.n	800297a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002938:	4b3c      	ldr	r3, [pc, #240]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800293e:	4013      	ands	r3, r2
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	8852      	ldrh	r2, [r2, #2]
 8002944:	3a01      	subs	r2, #1
 8002946:	0212      	lsls	r2, r2, #8
 8002948:	4611      	mov	r1, r2
 800294a:	4a38      	ldr	r2, [pc, #224]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800294c:	430b      	orrs	r3, r1
 800294e:	61d3      	str	r3, [r2, #28]
                break;
 8002950:	e01a      	b.n	8002988 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	7f1b      	ldrb	r3, [r3, #28]
 8002956:	2bff      	cmp	r3, #255	; 0xff
 8002958:	d101      	bne.n	800295e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                  blend = false;
 800295a:	2300      	movs	r3, #0
 800295c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800295e:	4b33      	ldr	r3, [pc, #204]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002964:	4013      	ands	r3, r2
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	8852      	ldrh	r2, [r2, #2]
 800296a:	3a01      	subs	r2, #1
 800296c:	0212      	lsls	r2, r2, #8
 800296e:	4313      	orrs	r3, r2
 8002970:	4a2e      	ldr	r2, [pc, #184]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002972:	f043 0310 	orr.w	r3, r3, #16
 8002976:	61d3      	str	r3, [r2, #28]
                break;
 8002978:	e006      	b.n	8002988 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800297c:	4a31      	ldr	r2, [pc, #196]	; (8002a44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 800297e:	f240 1111 	movw	r1, #273	; 0x111
 8002982:	4831      	ldr	r0, [pc, #196]	; (8002a48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8002984:	f024 ff6a 	bl	802785c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002988:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800298e:	f043 0320 	orr.w	r3, r3, #32
 8002992:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002994:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d000      	beq.n	80029ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 80029aa:	e7f3      	b.n	8002994 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80029ac:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80029ae:	2210      	movs	r2, #16
 80029b0:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 80029b2:	7ffb      	ldrb	r3, [r7, #31]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80029b8:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80029ba:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80029bc:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 80029be:	e031      	b.n	8002a24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80029c2:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 80029c4:	601a      	str	r2, [r3, #0]
      break;
 80029c6:	e02d      	b.n	8002a24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	7f1b      	ldrb	r3, [r3, #28]
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	461a      	mov	r2, r3
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80029d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029da:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80029dc:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80029e8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80029ec:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80029ee:	601a      	str	r2, [r3, #0]
        break;
 80029f0:	e018      	b.n	8002a24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	7f1b      	ldrb	r3, [r3, #28]
 80029f6:	061b      	lsls	r3, r3, #24
 80029f8:	461a      	mov	r2, r3
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a04:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	7f5a      	ldrb	r2, [r3, #29]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	7f9b      	ldrb	r3, [r3, #30]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d003      	beq.n	8002a1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002a14:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8002a16:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8002a18:	e003      	b.n	8002a22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002a1c:	f240 2201 	movw	r2, #513	; 0x201
 8002a20:	601a      	str	r2, [r3, #0]
        break;
 8002a22:	bf00      	nop
    }
}
 8002a24:	bf00      	nop
 8002a26:	3724      	adds	r7, #36	; 0x24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd90      	pop	{r4, r7, pc}
 8002a2c:	52001000 	.word	0x52001000
 8002a30:	0002000a 	.word	0x0002000a
 8002a34:	00020201 	.word	0x00020201
 8002a38:	00020009 	.word	0x00020009
 8002a3c:	ffff00ef 	.word	0xffff00ef
 8002a40:	08028d28 	.word	0x08028d28
 8002a44:	08028d44 	.word	0x08028d44
 8002a48:	08028c90 	.word	0x08028c90
 8002a4c:	00010201 	.word	0x00010201

08002a50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	7f9b      	ldrb	r3, [r3, #30]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff fe4b 	bl	80026fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002a66:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002a68:	4a3b      	ldr	r2, [pc, #236]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	8adb      	ldrh	r3, [r3, #22]
 8002a72:	461a      	mov	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	8a9b      	ldrh	r3, [r3, #20]
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002a7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002a86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	8b5b      	ldrh	r3, [r3, #26]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	8a9b      	ldrh	r3, [r3, #20]
 8002a92:	1ad2      	subs	r2, r2, r3
 8002a94:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d12e      	bne.n	8002afe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	8b5b      	ldrh	r3, [r3, #26]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	8a9b      	ldrh	r3, [r3, #20]
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002aae:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	8b5b      	ldrh	r3, [r3, #26]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	8a9b      	ldrh	r3, [r3, #20]
 8002aba:	1ad2      	subs	r2, r2, r3
 8002abc:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002abe:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ac0:	4a25      	ldr	r2, [pc, #148]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	7f1b      	ldrb	r3, [r3, #28]
 8002aca:	061b      	lsls	r3, r3, #24
 8002acc:	4619      	mov	r1, r3
 8002ace:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002ad0:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	330c      	adds	r3, #12
 8002ada:	4c1f      	ldr	r4, [pc, #124]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fc7b 	bl	80023d8 <_ZNK8touchgfx9colortypecvmEv>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002aec:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002af4:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8002afa:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8002afc:	e027      	b.n	8002b4e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002afe:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fc62 	bl	80023d8 <_ZNK8touchgfx9colortypecvmEv>
 8002b14:	4603      	mov	r3, r0
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fc59 	bl	80023d8 <_ZNK8touchgfx9colortypecvmEv>
 8002b26:	4603      	mov	r3, r0
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002b2e:	431c      	orrs	r4, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fc4f 	bl	80023d8 <_ZNK8touchgfx9colortypecvmEv>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	08db      	lsrs	r3, r3, #3
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002b44:	4323      	orrs	r3, r4
 8002b46:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002b4a:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 8002b4c:	601a      	str	r2, [r3, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd90      	pop	{r4, r7, pc}
 8002b56:	bf00      	nop
 8002b58:	52001000 	.word	0x52001000
 8002b5c:	00010009 	.word	0x00010009
 8002b60:	00020201 	.word	0x00020201
 8002b64:	00030201 	.word	0x00030201

08002b68 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fc39 	bl	80023f0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	0802aa7c 	.word	0x0802aa7c

08002b8c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ffe7 	bl	8002b68 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002b9a:	2114      	movs	r1, #20
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f024 fe2e 	bl	80277fe <_ZdlPvj>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	801a      	strh	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	805a      	strh	r2, [r3, #2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	809a      	strh	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	80da      	strh	r2, [r3, #6]
    {
    }
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6013      	str	r3, [r2, #0]
    }
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	2400af48 	.word	0x2400af48

08002bfc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
    {
 8002c04:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	601a      	str	r2, [r3, #0]
    }
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	08029780 	.word	0x08029780

08002c1c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
    }
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ffe9 	bl	8002bfc <_ZN8touchgfx12FontProviderD1Ev>
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f024 fde6 	bl	80277fe <_ZdlPvj>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	611a      	str	r2, [r3, #16]
    {
    }
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	08029770 	.word	0x08029770

08002c7c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
    {
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	601a      	str	r2, [r3, #0]
    }
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	08029770 	.word	0x08029770

08002c9c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    }
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ffe9 	bl	8002c7c <_ZN8touchgfx7MVPHeapD1Ev>
 8002caa:	2114      	movs	r1, #20
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f024 fda6 	bl	80277fe <_ZdlPvj>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    {
    }
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
    {
    }
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
    {
    }
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
    {
    }
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
    {
    }
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
    {
 8002d48:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
    }
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	08029748 	.word	0x08029748

08002d60 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
    }
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ffe9 	bl	8002d40 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002d6e:	2104      	movs	r1, #4
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f024 fd44 	bl	80277fe <_ZdlPvj>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    {
 8002d88:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
    }
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	0802ae24 	.word	0x0802ae24

08002da0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
    }
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ffe9 	bl	8002d80 <_ZN8touchgfx3LCDD1Ev>
 8002dae:	2108      	movs	r1, #8
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f024 fd24 	bl	80277fe <_ZdlPvj>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002dea:	6810      	ldr	r0, [r2, #0]
 8002dec:	6851      	ldr	r1, [r2, #4]
 8002dee:	c303      	stmia	r3!, {r0, r1}
    }
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
    {
 8002e04:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	601a      	str	r2, [r3, #0]
    }
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	08029730 	.word	0x08029730

08002e1c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    }
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ffe9 	bl	8002dfc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f024 fce6 	bl	80277fe <_ZdlPvj>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	801a      	strh	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	805a      	strh	r2, [r3, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	809a      	strh	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	80da      	strh	r2, [r3, #6]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	811a      	strh	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	815a      	strh	r2, [r3, #10]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	819a      	strh	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	739a      	strb	r2, [r3, #14]
        {
        }
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ffd5 	bl	8002e3c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	829a      	strh	r2, [r3, #20]
    {
    }
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002eb6:	4a55      	ldr	r2, [pc, #340]	; (800300c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	615a      	str	r2, [r3, #20]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	331c      	adds	r3, #28
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ffcc 	bl	8002e82 <_ZN8touchgfx8GesturesC1Ev>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	63da      	str	r2, [r3, #60]	; 0x3c
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3350      	adds	r3, #80	; 0x50
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fe39 	bl	8002bac <_ZN8touchgfx4RectC1Ev>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	661a      	str	r2, [r3, #96]	; 0x60
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	671a      	str	r2, [r3, #112]	; 0x70
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8002fc2:	4a13      	ldr	r2, [pc, #76]	; (8003010 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002fc8:	4a12      	ldr	r2, [pc, #72]	; (8003014 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002fca:	8b3b      	ldrh	r3, [r7, #24]
 8002fcc:	8013      	strh	r3, [r2, #0]
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002fd0:	881a      	ldrh	r2, [r3, #0]
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002fd4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002fd6:	4a11      	ldr	r2, [pc, #68]	; (800301c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002fd8:	8bbb      	ldrh	r3, [r7, #28]
 8002fda:	8013      	strh	r3, [r2, #0]
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002fde:	881a      	ldrh	r2, [r3, #0]
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002fe2:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002fea:	8b3a      	ldrh	r2, [r7, #24]
 8002fec:	8bbb      	ldrh	r3, [r7, #28]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	bf34      	ite	cc
 8002ff2:	2301      	movcc	r3, #1
 8002ff4:	2300      	movcs	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	0802a4d4 	.word	0x0802a4d4
 8003010:	2400aeec 	.word	0x2400aeec
 8003014:	2400aee0 	.word	0x2400aee0
 8003018:	2400aee6 	.word	0x2400aee6
 800301c:	2400aee2 	.word	0x2400aee2
 8003020:	2400aee8 	.word	0x2400aee8
 8003024:	2400aee4 	.word	0x2400aee4

08003028 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	4a05      	ldr	r2, [pc, #20]	; (8003048 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fe81 	bl	8002d40 <_ZN8touchgfx15UIEventListenerD1Ev>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	0802af38 	.word	0x0802af38

0800304c <_ZN8touchgfx11ApplicationD0Ev>:
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ffe7 	bl	8003028 <_ZN8touchgfx11ApplicationD1Ev>
 800305a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f024 fbcd 	bl	80277fe <_ZdlPvj>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f804 	bl	8003084 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00f      	beq.n	80030b6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4610      	mov	r0, r2
 80030aa:	4798      	blx	r3
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80030b6:	2300      	movs	r3, #0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00e      	beq.n	80030da <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3308      	adds	r3, #8
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4610      	mov	r0, r2
 80030d0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	4a05      	ldr	r2, [pc, #20]	; (8003104 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff97 	bl	8003028 <_ZN8touchgfx11ApplicationD1Ev>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	080296ec 	.word	0x080296ec

08003108 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ffe7 	bl	80030e4 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003116:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f024 fb6f 	bl	80277fe <_ZdlPvj>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	4a08      	ldr	r2, [pc, #32]	; (8003158 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fae9 	bl	8003718 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ffcb 	bl	80030e4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	08029690 	.word	0x08029690

0800315c <_ZN23FrontendApplicationBaseD0Ev>:
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ffe1 	bl	800312c <_ZN23FrontendApplicationBaseD1Ev>
 800316a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f024 fb45 	bl	80277fe <_ZdlPvj>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <_ZN19FrontendApplicationD1Ev+0x20>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ffcb 	bl	800312c <_ZN23FrontendApplicationBaseD1Ev>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	0802964c 	.word	0x0802964c

080031a4 <_ZN19FrontendApplicationD0Ev>:
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ffe7 	bl	8003180 <_ZN19FrontendApplicationD1Ev>
 80031b2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f024 fb21 	bl	80277fe <_ZdlPvj>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 fffd 	bl	80071d4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	f015 fd33 	bl	8018c48 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 f8ee 	bl	80043d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	f7ff fd0d 	bl	8002c3c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8003222:	4a04      	ldr	r2, [pc, #16]	; (8003234 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]
    {

    }
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	08029638 	.word	0x08029638

08003238 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
 800323c:	4801      	ldr	r0, [pc, #4]	; (8003244 <__tcf_0+0xc>)
 800323e:	f000 f95f 	bl	8003500 <_ZN12FrontendHeapD1Ev>
 8003242:	bd80      	pop	{r7, pc}
 8003244:	2400016c 	.word	0x2400016c

08003248 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	f3bf 8f5b 	dmb	ish
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8003268:	480b      	ldr	r0, [pc, #44]	; (8003298 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800326a:	f024 faca 	bl	8027802 <__cxa_guard_acquire>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800327e:	4807      	ldr	r0, [pc, #28]	; (800329c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003280:	f000 f868 	bl	8003354 <_ZN12FrontendHeapC1Ev>
 8003284:	4804      	ldr	r0, [pc, #16]	; (8003298 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003286:	f024 fac8 	bl	802781a <__cxa_guard_release>
 800328a:	4805      	ldr	r0, [pc, #20]	; (80032a0 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800328c:	f024 fb04 	bl	8027898 <atexit>
        return instance;
 8003290:	4b02      	ldr	r3, [pc, #8]	; (800329c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8003292:	4618      	mov	r0, r3
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	24000874 	.word	0x24000874
 800329c:	2400016c 	.word	0x2400016c
 80032a0:	08003239 	.word	0x08003239

080032a4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fce1 	bl	8002c7c <_ZN8touchgfx7MVPHeapD1Ev>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	08029638 	.word	0x08029638

080032c8 <_ZN16FrontendHeapBaseD0Ev>:
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ffe7 	bl	80032a4 <_ZN16FrontendHeapBaseD1Ev>
 80032d6:	2114      	movs	r1, #20
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f024 fa90 	bl	80277fe <_ZdlPvj>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f011 fcc6 	bl	8014c84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80032f8:	4a03      	ldr	r2, [pc, #12]	; (8003308 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	08029604 	.word	0x08029604

0800330c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4618      	mov	r0, r3
 8003318:	f011 fcb4 	bl	8014c84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800331c:	4a03      	ldr	r2, [pc, #12]	; (800332c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	080295d0 	.word	0x080295d0

08003330 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4618      	mov	r0, r3
 800333c:	f011 fca2 	bl	8014c84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003340:	4a03      	ldr	r2, [pc, #12]	; (8003350 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	0802959c 	.word	0x0802959c

08003354 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b085      	sub	sp, #20
 8003358:	af02      	add	r7, sp, #8
 800335a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f103 0114 	add.w	r1, r3, #20
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f503 64b3 	add.w	r4, r3, #1432	; 0x598
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
                     app(model, *this)
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4623      	mov	r3, r4
 800337a:	f7ff ff43 	bl	8003204 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800337e:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <_ZN12FrontendHeapC1Ev+0x8c>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3314      	adds	r3, #20
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ffad 	bl	80032e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	332c      	adds	r3, #44	; 0x2c
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff ffba 	bl	800330c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ffc6 	bl	8003330 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 ff04 	bl	80071b8 <_ZN5ModelC1Ev>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f503 60b6 	add.w	r0, r3, #1456	; 0x5b0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4619      	mov	r1, r3
 80033c0:	f003 fee4 	bl	800718c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	f7ff ff0b 	bl	80031ea <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd90      	pop	{r4, r7, pc}
 80033de:	bf00      	nop
 80033e0:	08029588 	.word	0x08029588

080033e4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	8bbb      	ldrh	r3, [r7, #28]
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	8b3b      	ldrh	r3, [r7, #24]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	f7ff fd51 	bl	8002ea8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8003406:	4a04      	ldr	r2, [pc, #16]	; (8003418 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	601a      	str	r2, [r3, #0]
    }
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	08029794 	.word	0x08029794

0800341c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	8bbb      	ldrh	r3, [r7, #28]
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	8b3b      	ldrh	r3, [r7, #24]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	f7ff ffd3 	bl	80033e4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800343e:	4a04      	ldr	r2, [pc, #16]	; (8003450 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	601a      	str	r2, [r3, #0]
    }
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	08029444 	.word	0x08029444

08003454 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	4a04      	ldr	r2, [pc, #16]	; (8003470 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	0802942c 	.word	0x0802942c

08003474 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff ffe8 	bl	8003454 <_ZN8touchgfx15TouchControllerC1Ev>
 8003484:	4a03      	ldr	r2, [pc, #12]	; (8003494 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	08029414 	.word	0x08029414

08003498 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b085      	sub	sp, #20
 800349c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800349e:	f000 fd51 	bl	8003f44 <_ZN14BitmapDatabase11getInstanceEv>
 80034a2:	4604      	mov	r4, r0
 80034a4:	f000 fd58 	bl	8003f58 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4619      	mov	r1, r3
 80034ac:	2300      	movs	r3, #0
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	2300      	movs	r3, #0
 80034b2:	2200      	movs	r2, #0
 80034b4:	4620      	mov	r0, r4
 80034b6:	f018 f94b 	bl	801b750 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80034ba:	4809      	ldr	r0, [pc, #36]	; (80034e0 <touchgfx_init+0x48>)
 80034bc:	f7ff fb8e 	bl	8002bdc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80034c0:	2000      	movs	r0, #0
 80034c2:	f003 fdb1 	bl	8007028 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80034c6:	4807      	ldr	r0, [pc, #28]	; (80034e4 <touchgfx_init+0x4c>)
 80034c8:	f018 f884 	bl	801b5d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80034cc:	f7ff febc 	bl	8003248 <_ZN12FrontendHeap11getInstanceEv>
 80034d0:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80034d2:	4805      	ldr	r0, [pc, #20]	; (80034e8 <touchgfx_init+0x50>)
 80034d4:	f7fe fdb8 	bl	8002048 <_ZN11TouchGFXHAL10initializeEv>
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd90      	pop	{r4, r7, pc}
 80034e0:	24001514 	.word	0x24001514
 80034e4:	24000008 	.word	0x24000008
 80034e8:	24001518 	.word	0x24001518

080034ec <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80034f0:	4802      	ldr	r0, [pc, #8]	; (80034fc <touchgfx_taskEntry+0x10>)
 80034f2:	f012 fd3c 	bl	8015f6e <_ZN8touchgfx3HAL9taskEntryEv>
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	24001518 	.word	0x24001518

08003500 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	4a10      	ldr	r2, [pc, #64]	; (800354c <_ZN12FrontendHeapD1Ev+0x4c>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fe33 	bl	8003180 <_ZN19FrontendApplicationD1Ev>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8003520:	4618      	mov	r0, r3
 8003522:	f000 f827 	bl	8003574 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	332c      	adds	r3, #44	; 0x2c
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f844 	bl	80035b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3314      	adds	r3, #20
 8003534:	4618      	mov	r0, r3
 8003536:	f000 f863 	bl	8003600 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff feb1 	bl	80032a4 <_ZN16FrontendHeapBaseD1Ev>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	08029588 	.word	0x08029588

08003550 <_ZN12FrontendHeapD0Ev>:
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ffd1 	bl	8003500 <_ZN12FrontendHeapD1Ev>
 800355e:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f024 f94b 	bl	80277fe <_ZdlPvj>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	4a05      	ldr	r2, [pc, #20]	; (8003594 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4618      	mov	r0, r3
 8003586:	f011 fb7b 	bl	8014c80 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	0802959c 	.word	0x0802959c

08003598 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ffe7 	bl	8003574 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80035a6:	2114      	movs	r1, #20
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f024 f928 	bl	80277fe <_ZdlPvj>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f011 fb59 	bl	8014c80 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	080295d0 	.word	0x080295d0

080035dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ffe7 	bl	80035b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80035ea:	f240 516c 	movw	r1, #1388	; 0x56c
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f024 f905 	bl	80277fe <_ZdlPvj>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	4a05      	ldr	r2, [pc, #20]	; (8003620 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4618      	mov	r0, r3
 8003612:	f011 fb35 	bl	8014c80 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	08029604 	.word	0x08029604

08003624 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ffe7 	bl	8003600 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003632:	2118      	movs	r1, #24
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f024 f8e2 	bl	80277fe <_ZdlPvj>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	4a05      	ldr	r2, [pc, #20]	; (8003664 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fb93 	bl	8002d80 <_ZN8touchgfx3LCDD1Ev>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	0802c0dc 	.word	0x0802c0dc

08003668 <_ZN8touchgfx8LCD16bppD0Ev>:
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ffe7 	bl	8003644 <_ZN8touchgfx8LCD16bppD1Ev>
 8003676:	2178      	movs	r1, #120	; 0x78
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f024 f8c0 	bl	80277fe <_ZdlPvj>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <_Z41__static_initialization_and_destruction_0ii>:
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af02      	add	r7, sp, #8
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d119      	bne.n	80036cc <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800369e:	4293      	cmp	r3, r2
 80036a0:	d114      	bne.n	80036cc <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80036a2:	4818      	ldr	r0, [pc, #96]	; (8003704 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80036a4:	f7ff fee6 	bl	8003474 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80036a8:	4817      	ldr	r0, [pc, #92]	; (8003708 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80036aa:	f7fe ff5d 	bl	8002568 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80036ae:	4817      	ldr	r0, [pc, #92]	; (800370c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80036b0:	f01b f916 	bl	801e8e0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80036b4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80036c2:	4a12      	ldr	r2, [pc, #72]	; (800370c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80036c4:	4910      	ldr	r1, [pc, #64]	; (8003708 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80036c6:	4812      	ldr	r0, [pc, #72]	; (8003710 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80036c8:	f7ff fea8 	bl	800341c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d113      	bne.n	80036fa <_Z41__static_initialization_and_destruction_0ii+0x72>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036d8:	4293      	cmp	r3, r2
 80036da:	d10e      	bne.n	80036fa <_Z41__static_initialization_and_destruction_0ii+0x72>
 80036dc:	480c      	ldr	r0, [pc, #48]	; (8003710 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80036de:	f7fe fd2b 	bl	8002138 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80036e2:	480c      	ldr	r0, [pc, #48]	; (8003714 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80036e4:	f000 f83a 	bl	800375c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80036e8:	4808      	ldr	r0, [pc, #32]	; (800370c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80036ea:	f7ff ffab 	bl	8003644 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 80036ee:	4806      	ldr	r0, [pc, #24]	; (8003708 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80036f0:	f7fe ff64 	bl	80025bc <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80036f4:	4803      	ldr	r0, [pc, #12]	; (8003704 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80036f6:	f7fe faad 	bl	8001c54 <_ZN20STM32TouchControllerD1Ev>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	24000878 	.word	0x24000878
 8003708:	2400087c 	.word	0x2400087c
 800370c:	2400149c 	.word	0x2400149c
 8003710:	24001518 	.word	0x24001518
 8003714:	24000008 	.word	0x24000008

08003718 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	4a05      	ldr	r2, [pc, #20]	; (8003738 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fb67 	bl	8002dfc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	080296d4 	.word	0x080296d4

0800373c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ffe7 	bl	8003718 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800374a:	2110      	movs	r1, #16
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f024 f856 	bl	80277fe <_ZdlPvj>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId MEDIUM = 3;  // verdana_14_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	4a05      	ldr	r2, [pc, #20]	; (800377c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fa45 	bl	8002bfc <_ZN8touchgfx12FontProviderD1Ev>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	08029864 	.word	0x08029864

08003780 <_ZN23ApplicationFontProviderD0Ev>:
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff ffe7 	bl	800375c <_ZN23ApplicationFontProviderD1Ev>
 800378e:	2104      	movs	r1, #4
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f024 f834 	bl	80277fe <_ZdlPvj>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80037a8:	2301      	movs	r3, #1
    }
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80037be:	230c      	movs	r3, #12
    }
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80037d8:	887a      	ldrh	r2, [r7, #2]
 80037da:	4613      	mov	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	3308      	adds	r3, #8
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
    }
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003800:	887a      	ldrh	r2, [r7, #2]
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	3308      	adds	r3, #8
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4413      	add	r3, r2
    }
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003824:	2301      	movs	r3, #1
    }
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800383a:	f240 5364 	movw	r3, #1380	; 0x564
    }
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003856:	887b      	ldrh	r3, [r7, #2]
 8003858:	f240 5264 	movw	r2, #1380	; 0x564
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	3308      	adds	r3, #8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4413      	add	r3, r2
    }
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800387e:	887b      	ldrh	r3, [r7, #2]
 8003880:	f240 5264 	movw	r2, #1380	; 0x564
 8003884:	fb02 f303 	mul.w	r3, r2, r3
 8003888:	3308      	adds	r3, #8
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4413      	add	r3, r2
    }
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80038a2:	2301      	movs	r3, #1
    }
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80038b8:	2310      	movs	r3, #16
    }
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	3308      	adds	r3, #8
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4413      	add	r3, r2
    }
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	3308      	adds	r3, #8
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4413      	add	r3, r2
    }
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68d2      	ldr	r2, [r2, #12]
 800391a:	1052      	asrs	r2, r2, #1
 800391c:	1899      	adds	r1, r3, r2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	e00a      	b.n	8003946 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68d2      	ldr	r2, [r2, #12]
 8003938:	1052      	asrs	r2, r2, #1
 800393a:	4413      	add	r3, r2
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6892      	ldr	r2, [r2, #8]
 8003942:	4413      	add	r3, r2
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4608      	mov	r0, r1
 8003948:	4798      	blx	r3
    }
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d010      	beq.n	8003984 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d107      	bne.n	800397a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800397a:	2300      	movs	r3, #0
 800397c:	2b01      	cmp	r3, #1
 800397e:	d001      	beq.n	8003984 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003984:	2300      	movs	r3, #0
    }
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <_GLOBAL__sub_I_touchgfx_init>:
 8003992:	b580      	push	{r7, lr}
 8003994:	af00      	add	r7, sp, #0
 8003996:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800399a:	2001      	movs	r0, #1
 800399c:	f7ff fe74 	bl	8003688 <_Z41__static_initialization_and_destruction_0ii>
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <_GLOBAL__sub_D_touchgfx_init>:
 80039a2:	b580      	push	{r7, lr}
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7ff fe6c 	bl	8003688 <_Z41__static_initialization_and_destruction_0ii>
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3320      	adds	r3, #32
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	4798      	blx	r3
    }
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80039dc:	3301      	adds	r3, #1
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <__NVIC_EnableIRQ>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	db0b      	blt.n	8003a1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	4907      	ldr	r1, [pc, #28]	; (8003a2c <__NVIC_EnableIRQ+0x38>)
 8003a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2001      	movs	r0, #1
 8003a16:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	e000e100 	.word	0xe000e100

08003a30 <__NVIC_DisableIRQ>:
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	db12      	blt.n	8003a68 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	f003 021f 	and.w	r2, r3, #31
 8003a48:	490a      	ldr	r1, [pc, #40]	; (8003a74 <__NVIC_DisableIRQ+0x44>)
 8003a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2001      	movs	r0, #1
 8003a52:	fa00 f202 	lsl.w	r2, r0, r2
 8003a56:	3320      	adds	r3, #32
 8003a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a5c:	f3bf 8f4f 	dsb	sy
}
 8003a60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a62:	f3bf 8f6f 	isb	sy
}
 8003a66:	bf00      	nop
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000e100 	.word	0xe000e100

08003a78 <__NVIC_SetPriority>:
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	db0a      	blt.n	8003aa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	490c      	ldr	r1, [pc, #48]	; (8003ac4 <__NVIC_SetPriority+0x4c>)
 8003a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a96:	0112      	lsls	r2, r2, #4
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003aa0:	e00a      	b.n	8003ab8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	4908      	ldr	r1, [pc, #32]	; (8003ac8 <__NVIC_SetPriority+0x50>)
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	3b04      	subs	r3, #4
 8003ab0:	0112      	lsls	r2, r2, #4
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	761a      	strb	r2, [r3, #24]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000e100 	.word	0xe000e100
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8003acc:	b5b0      	push	{r4, r5, r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f012 fa37 	bl	8015f4a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003adc:	687d      	ldr	r5, [r7, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3360      	adds	r3, #96	; 0x60
 8003ae4:	681c      	ldr	r4, [r3, #0]
 8003ae6:	f015 f995 	bl	8018e14 <_ZN8touchgfx11Application11getInstanceEv>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4619      	mov	r1, r3
 8003aee:	4628      	mov	r0, r5
 8003af0:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3384      	adds	r3, #132	; 0x84
 8003afa:	681c      	ldr	r4, [r3, #0]
 8003afc:	2300      	movs	r3, #0
 8003afe:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003b00:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003b04:	47a0      	blx	r4
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	d0200000 	.word	0xd0200000

08003b14 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8003b1c:	2109      	movs	r1, #9
 8003b1e:	205a      	movs	r0, #90	; 0x5a
 8003b20:	f7ff ffaa 	bl	8003a78 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8003b24:	2109      	movs	r1, #9
 8003b26:	2058      	movs	r0, #88	; 0x58
 8003b28:	f7ff ffa6 	bl	8003a78 <__NVIC_SetPriority>
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003b3c:	205a      	movs	r0, #90	; 0x5a
 8003b3e:	f7ff ff59 	bl	80039f4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8003b42:	2058      	movs	r0, #88	; 0x58
 8003b44:	f7ff ff56 	bl	80039f4 <__NVIC_EnableIRQ>
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003b58:	205a      	movs	r0, #90	; 0x5a
 8003b5a:	f7ff ff69 	bl	8003a30 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8003b5e:	2058      	movs	r0, #88	; 0x58
 8003b60:	f7ff ff66 	bl	8003a30 <__NVIC_DisableIRQ>
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003b86:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8003b9a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003b9e:	881a      	ldrh	r2, [r3, #0]
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	50001000 	.word	0x50001000
 8003bc0:	24001594 	.word	0x24001594
 8003bc4:	24001596 	.word	0x24001596

08003bc8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f012 f9a0 	bl	8015f18 <_ZN8touchgfx3HAL10beginFrameEv>
 8003bd8:	4603      	mov	r3, r0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f012 f99f 	bl	8015f30 <_ZN8touchgfx3HAL8endFrameEv>

}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	50001084 	.word	0x50001084

08003c18 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8003c22:	4a06      	ldr	r2, [pc, #24]	; (8003c3c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	50001084 	.word	0x50001084
 8003c40:	50001000 	.word	0x50001000

08003c44 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f012 f929 	bl	8015eaa <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003c58:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf14      	ite	ne
 8003c64:	2301      	movne	r3, #1
 8003c66:	2300      	moveq	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d03c      	beq.n	8003ce8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003c76:	f3bf 8f4f 	dsb	sy
}
 8003c7a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003c7c:	4b1c      	ldr	r3, [pc, #112]	; (8003cf0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c82:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	0b5b      	lsrs	r3, r3, #13
 8003c88:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003c8c:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	08db      	lsrs	r3, r3, #3
 8003c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c96:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003ca0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003ca6:	4912      	ldr	r1, [pc, #72]	; (8003cf0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1e5a      	subs	r2, r3, #1
 8003cb2:	60fa      	str	r2, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf14      	ite	ne
 8003cb8:	2301      	movne	r3, #1
 8003cba:	2300      	moveq	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d000      	beq.n	8003cc4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 8003cc2:	e7e9      	b.n	8003c98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1e5a      	subs	r2, r3, #1
 8003cc8:	613a      	str	r2, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf14      	ite	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	2300      	moveq	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d000      	beq.n	8003cda <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8003cd8:	e7d9      	b.n	8003c8e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003cda:	f3bf 8f4f 	dsb	sy
}
 8003cde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ce0:	f3bf 8f6f 	isb	sy
}
 8003ce4:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003ce6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003ce8:	bf00      	nop
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	f012 fa3a 	bl	8016182 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8003d0e:	4603      	mov	r3, r0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003d20:	4b26      	ldr	r3, [pc, #152]	; (8003dbc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d03c      	beq.n	8003db0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003d36:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003d3e:	f3bf 8f4f 	dsb	sy
}
 8003d42:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003d44:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8003d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	0b5b      	lsrs	r3, r3, #13
 8003d50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003d54:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	08db      	lsrs	r3, r3, #3
 8003d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d5e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003d68:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003d6e:	4913      	ldr	r1, [pc, #76]	; (8003dbc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1e5a      	subs	r2, r3, #1
 8003d7a:	60fa      	str	r2, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf14      	ite	ne
 8003d80:	2301      	movne	r3, #1
 8003d82:	2300      	moveq	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d000      	beq.n	8003d8c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8003d8a:	e7e9      	b.n	8003d60 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1e5a      	subs	r2, r3, #1
 8003d90:	613a      	str	r2, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d000      	beq.n	8003da2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8003da0:	e7d9      	b.n	8003d56 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003da2:	f3bf 8f4f 	dsb	sy
}
 8003da6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003da8:	f3bf 8f6f 	isb	sy
}
 8003dac:	bf00      	nop
}
 8003dae:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d03c      	beq.n	8003e58 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003dde:	4b21      	ldr	r3, [pc, #132]	; (8003e64 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003de6:	f3bf 8f4f 	dsb	sy
}
 8003dea:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003dec:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003df2:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	0b5b      	lsrs	r3, r3, #13
 8003df8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003dfc:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	08db      	lsrs	r3, r3, #3
 8003e02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e06:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003e10:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003e16:	4913      	ldr	r1, [pc, #76]	; (8003e64 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1e5a      	subs	r2, r3, #1
 8003e22:	60fa      	str	r2, [r7, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d000      	beq.n	8003e34 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8003e32:	e7e9      	b.n	8003e08 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1e5a      	subs	r2, r3, #1
 8003e38:	613a      	str	r2, [r7, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bf14      	ite	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	2300      	moveq	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d000      	beq.n	8003e4a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8003e48:	e7d9      	b.n	8003dfe <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e4a:	f3bf 8f4f 	dsb	sy
}
 8003e4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e50:	f3bf 8f6f 	isb	sy
}
 8003e54:	bf00      	nop
}
 8003e56:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <HAL_LTDC_LineEventCallback+0x74>)
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	4a1a      	ldr	r2, [pc, #104]	; (8003ee0 <HAL_LTDC_LineEventCallback+0x78>)
 8003e76:	8812      	ldrh	r2, [r2, #0]
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	bf0c      	ite	eq
 8003e7c:	2301      	moveq	r3, #1
 8003e7e:	2300      	movne	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d017      	beq.n	8003eb6 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003e86:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <HAL_LTDC_LineEventCallback+0x7c>)
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f00b fa8b 	bl	800f3a8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003e92:	f7fe fb2f 	bl	80024f4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003e96:	4603      	mov	r3, r0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fd98 	bl	80039ce <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003e9e:	f7fe fa23 	bl	80022e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003ea2:	f7fe fb27 	bl	80024f4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f012 fe43 	bl	8016b34 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f7fd fef2 	bl	8001c98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003eb4:	e00e      	b.n	8003ed4 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_LTDC_LineEventCallback+0x78>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f00b fa73 	bl	800f3a8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f7fd ff04 	bl	8001cd0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003ec8:	f7fe fb14 	bl	80024f4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fd6f 	bl	80039b2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	50001000 	.word	0x50001000
 8003ee0:	24001594 	.word	0x24001594
 8003ee4:	24001596 	.word	0x24001596

08003ee8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003ef4:	887b      	ldrh	r3, [r7, #2]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d81e      	bhi.n	8003f38 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f11 	.word	0x08003f11
 8003f04:	08003f1b 	.word	0x08003f1b
 8003f08:	08003f25 	.word	0x08003f25
 8003f0c:	08003f2f 	.word	0x08003f2f
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003f10:	f003 f902 	bl	8007118 <_ZN17TypedTextDatabase8getFontsEv>
 8003f14:	4603      	mov	r3, r0
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	e00f      	b.n	8003f3a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003f1a:	f003 f8fd 	bl	8007118 <_ZN17TypedTextDatabase8getFontsEv>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	e00a      	b.n	8003f3a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003f24:	f003 f8f8 	bl	8007118 <_ZN17TypedTextDatabase8getFontsEv>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	e005      	b.n	8003f3a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::MEDIUM:
        // verdana_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003f2e:	f003 f8f3 	bl	8007118 <_ZN17TypedTextDatabase8getFontsEv>
 8003f32:	4603      	mov	r3, r0
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	e000      	b.n	8003f3a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 8003f38:	2300      	movs	r3, #0
    }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop

08003f44 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003f48:	4b02      	ldr	r3, [pc, #8]	; (8003f54 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	08029870 	.word	0x08029870

08003f58 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003f5c:	2301      	movs	r3, #1
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
    {
 8003f70:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
    }
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	08029c98 	.word	0x08029c98

08003f88 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
    }
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ffe9 	bl	8003f68 <_ZN8touchgfx4FontD1Ev>
 8003f96:	2110      	movs	r1, #16
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f023 fc30 	bl	80277fe <_ZdlPvj>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003fb4:	887b      	ldrh	r3, [r7, #2]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e010      	b.n	8003fe0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	681c      	ldr	r4, [r3, #0]
 8003fce:	f107 030f 	add.w	r3, r7, #15
 8003fd2:	f107 0210 	add.w	r2, r7, #16
 8003fd6:	8879      	ldrh	r1, [r7, #2]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	47a0      	blx	r4
 8003fdc:	6178      	str	r0, [r7, #20]
        return glyph;
 8003fde:	697b      	ldr	r3, [r7, #20]
    }
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd90      	pop	{r4, r7, pc}

08003fe8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	895b      	ldrh	r3, [r3, #10]
    }
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	899b      	ldrh	r3, [r3, #12]
    }
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	889b      	ldrh	r3, [r3, #4]
    }
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	889a      	ldrh	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	799b      	ldrb	r3, [r3, #6]
 8004040:	b29b      	uxth	r3, r3
 8004042:	4413      	add	r3, r2
 8004044:	b29b      	uxth	r3, r3
    }
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	79db      	ldrb	r3, [r3, #7]
 800405e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8004062:	b2db      	uxtb	r3, r3
    }
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	79db      	ldrb	r3, [r3, #7]
 800407c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004080:	b2db      	uxtb	r3, r3
    }
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	4a05      	ldr	r2, [pc, #20]	; (80040b0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ff61 	bl	8003f68 <_ZN8touchgfx4FontD1Ev>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	0802b1fc 	.word	0x0802b1fc

080040b4 <_ZN8touchgfx9ConstFontD0Ev>:
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ffe7 	bl	8004090 <_ZN8touchgfx9ConstFontD1Ev>
 80040c2:	2118      	movs	r1, #24
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f023 fb9a 	bl	80277fe <_ZdlPvj>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	4a05      	ldr	r2, [pc, #20]	; (80040f4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ffd3 	bl	8004090 <_ZN8touchgfx9ConstFontD1Ev>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	080298e4 	.word	0x080298e4

080040f8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ffe7 	bl	80040d4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8004106:	2128      	movs	r1, #40	; 0x28
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f023 fb78 	bl	80277fe <_ZdlPvj>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
    {
 8004120:	4a04      	ldr	r2, [pc, #16]	; (8004134 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	601a      	str	r2, [r3, #0]
    }
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	0802988c 	.word	0x0802988c

08004138 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
    }
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ffe9 	bl	8004118 <_ZN8touchgfx9TypedTextD1Ev>
 8004146:	2108      	movs	r1, #8
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f023 fb58 	bl	80277fe <_ZdlPvj>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004174:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004190:	e002      	b.n	8004198 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8004192:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
    }
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	2400aeec 	.word	0x2400aeec

080041a8 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80041b0:	4a07      	ldr	r2, [pc, #28]	; (80041d0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	605a      	str	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	721a      	strb	r2, [r3, #8]
    {
    }
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	080298c0 	.word	0x080298c0

080041d4 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
    {
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	601a      	str	r2, [r3, #0]
    }
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	080298c0 	.word	0x080298c0

080041f4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
    }
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff ffe9 	bl	80041d4 <_ZN8touchgfx10TransitionD1Ev>
 8004202:	210c      	movs	r1, #12
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f023 fafa 	bl	80277fe <_ZdlPvj>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    {
    }
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
    {
    }
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
    {
    }
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8004258:	f014 fddc 	bl	8018e14 <_ZN8touchgfx11Application11getInstanceEv>
 800425c:	4603      	mov	r3, r0
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	3230      	adds	r2, #48	; 0x30
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	4790      	blx	r2
    }
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	605a      	str	r2, [r3, #4]
    }
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4618      	mov	r0, r3
 8004298:	f014 fe26 	bl	8018ee8 <_ZN8touchgfx11ApplicationC1Ev>
 800429c:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80042b6:	6013      	str	r3, [r2, #0]
    }
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	080296ec 	.word	0x080296ec
 80042c8:	2400af38 	.word	0x2400af38

080042cc <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	601a      	str	r2, [r3, #0]
    }
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	721a      	strb	r2, [r3, #8]
    }
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	605a      	str	r2, [r3, #4]
    }
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ffac 	bl	800428c <_ZN8touchgfx14MVPApplicationC1Ev>
 8004334:	4a13      	ldr	r2, [pc, #76]	; (8004384 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f89f 	bl	8004484 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004356:	f7fe f8cd 	bl	80024f4 <_ZN8touchgfx3HAL11getInstanceEv>
 800435a:	4603      	mov	r3, r0
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	3208      	adds	r2, #8
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8004368:	2000      	movs	r0, #0
 800436a:	f002 fe5d 	bl	8007028 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800436e:	f7ff feff 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 8004372:	4603      	mov	r3, r0
 8004374:	4618      	mov	r0, r3
 8004376:	f01c f8fe 	bl	8020576 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	08029690 	.word	0x08029690

08004388 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff ffe9 	bl	8004388 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	3208      	adds	r2, #8
 80043c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	f107 0008 	add.w	r0, r7, #8
 80043f2:	f107 0318 	add.w	r3, r7, #24
 80043f6:	cb0c      	ldmia	r3, {r2, r3}
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	f000 f85f 	bl	80044bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	4619      	mov	r1, r3
 8004404:	4620      	mov	r0, r4
 8004406:	f7ff ffcb 	bl	80043a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800440a:	f107 0308 	add.w	r3, r7, #8
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff f982 	bl	8003718 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004420:	bf00      	nop
 8004422:	3724      	adds	r7, #36	; 0x24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd90      	pop	{r4, r7, pc}
 8004428:	0800442d 	.word	0x0800442d

0800442c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af02      	add	r7, sp, #8
 8004432:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004440:	461a      	mov	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	4b04      	ldr	r3, [pc, #16]	; (800445c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800444c:	4804      	ldr	r0, [pc, #16]	; (8004460 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800444e:	f000 f867 	bl	8004520 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	2400af2c 	.word	0x2400af2c
 8004460:	2400af28 	.word	0x2400af28

08004464 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	4a04      	ldr	r2, [pc, #16]	; (8004480 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	08029730 	.word	0x08029730

08004484 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff ffe8 	bl	8004464 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004494:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	60da      	str	r2, [r3, #12]
    }
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	080296d4 	.word	0x080296d4

080044bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	4639      	mov	r1, r7
 80044c8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ffc8 	bl	8004464 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80044d4:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3308      	adds	r3, #8
 80044e4:	463a      	mov	r2, r7
 80044e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044ea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	080296d4 	.word	0x080296d4

080044fc <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff fe4e 	bl	80041a8 <_ZN8touchgfx10TransitionC1Ev>
 800450c:	4a03      	ldr	r2, [pc, #12]	; (800451c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	0802989c 	.word	0x0802989c

08004520 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b08f      	sub	sp, #60	; 0x3c
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3320      	adds	r3, #32
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4610      	mov	r0, r2
 800453e:	4798      	blx	r3
 8004540:	4603      	mov	r3, r0
 8004542:	f240 5263 	movw	r2, #1379	; 0x563
 8004546:	4293      	cmp	r3, r2
 8004548:	d805      	bhi.n	8004556 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800454a:	4b7f      	ldr	r3, [pc, #508]	; (8004748 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800454c:	4a7f      	ldr	r2, [pc, #508]	; (800474c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800454e:	21a3      	movs	r1, #163	; 0xa3
 8004550:	487f      	ldr	r0, [pc, #508]	; (8004750 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004552:	f023 f983 	bl	802785c <__assert_func>
 8004556:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3320      	adds	r3, #32
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4610      	mov	r0, r2
 8004568:	4798      	blx	r3
 800456a:	4603      	mov	r3, r0
 800456c:	2b0f      	cmp	r3, #15
 800456e:	d805      	bhi.n	800457c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8004570:	4b78      	ldr	r3, [pc, #480]	; (8004754 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004572:	4a76      	ldr	r2, [pc, #472]	; (800474c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004574:	21a4      	movs	r1, #164	; 0xa4
 8004576:	4876      	ldr	r0, [pc, #472]	; (8004750 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004578:	f023 f970 	bl	802785c <__assert_func>
 800457c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3320      	adds	r3, #32
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4610      	mov	r0, r2
 800458e:	4798      	blx	r3
 8004590:	4603      	mov	r3, r0
 8004592:	2b0b      	cmp	r3, #11
 8004594:	d805      	bhi.n	80045a2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8004596:	4b70      	ldr	r3, [pc, #448]	; (8004758 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8004598:	4a6c      	ldr	r2, [pc, #432]	; (800474c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800459a:	21a5      	movs	r1, #165	; 0xa5
 800459c:	486c      	ldr	r0, [pc, #432]	; (8004750 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800459e:	f023 f95d 	bl	802785c <__assert_func>
 80045a2:	bf00      	nop
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80045b0:	f014 fc30 	bl	8018e14 <_ZN8touchgfx11Application11getInstanceEv>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f014 fc7a 	bl	8018eb0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4610      	mov	r0, r2
 80045d4:	4798      	blx	r3
    if (*currentTrans)
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4610      	mov	r0, r2
 80045ec:	4798      	blx	r3
    if (*currentScreen)
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4610      	mov	r0, r2
 8004606:	4798      	blx	r3
    if (*currentPresenter)
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3304      	adds	r3, #4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4610      	mov	r0, r2
 8004620:	4798      	blx	r3
    if (*currentScreen)
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4610      	mov	r0, r2
 8004638:	4798      	blx	r3
    if (*currentPresenter)
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4610      	mov	r0, r2
 8004652:	4798      	blx	r3
}
 8004654:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2100      	movs	r1, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f87d 	bl	800475c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004662:	4603      	mov	r3, r0
 8004664:	4619      	mov	r1, r3
 8004666:	200c      	movs	r0, #12
 8004668:	f7ff fd76 	bl	8004158 <_ZnwjPv>
 800466c:	4604      	mov	r4, r0
 800466e:	4620      	mov	r0, r4
 8004670:	f7ff ff44 	bl	80044fc <_ZN8touchgfx12NoTransitionC1Ev>
 8004674:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f000 f880 	bl	8004782 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004682:	4603      	mov	r3, r0
 8004684:	4619      	mov	r1, r3
 8004686:	f240 5064 	movw	r0, #1380	; 0x564
 800468a:	f7ff fd65 	bl	8004158 <_ZnwjPv>
 800468e:	4604      	mov	r4, r0
 8004690:	4620      	mov	r0, r4
 8004692:	f002 fead 	bl	80073f0 <_ZN11Screen1ViewC1Ev>
 8004696:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2100      	movs	r1, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f882 	bl	80047a8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4619      	mov	r1, r3
 80046a8:	2010      	movs	r0, #16
 80046aa:	f7ff fd55 	bl	8004158 <_ZnwjPv>
 80046ae:	4604      	mov	r4, r0
 80046b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046b2:	4620      	mov	r0, r4
 80046b4:	f002 fe44 	bl	8007340 <_ZN16Screen1PresenterC1ER11Screen1View>
 80046b8:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046be:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ca:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	3304      	adds	r3, #4
 80046d6:	e000      	b.n	80046da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 80046d8:	2300      	movs	r3, #0
 80046da:	4619      	mov	r1, r3
 80046dc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046de:	f7ff fdf5 	bl	80042cc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	3304      	adds	r3, #4
 80046e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fe0a 	bl	8004302 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f86b 	bl	80047ce <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004702:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69f8      	ldr	r0, [r7, #28]
 800470e:	4798      	blx	r3
    newPresenter->activate();
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69b8      	ldr	r0, [r7, #24]
 8004718:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800471a:	6979      	ldr	r1, [r7, #20]
 800471c:	69f8      	ldr	r0, [r7, #28]
 800471e:	f015 ff71 	bl	801a604 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3310      	adds	r3, #16
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	4798      	blx	r3
    newTransition->invalidate();
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6978      	ldr	r0, [r7, #20]
 8004738:	4798      	blx	r3
}
 800473a:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800473e:	4618      	mov	r0, r3
 8004740:	373c      	adds	r7, #60	; 0x3c
 8004742:	46bd      	mov	sp, r7
 8004744:	bd90      	pop	{r4, r7, pc}
 8004746:	bf00      	nop
 8004748:	08028d84 	.word	0x08028d84
 800474c:	08028e14 	.word	0x08028e14
 8004750:	08028f18 	.word	0x08028f18
 8004754:	08028f70 	.word	0x08028f70
 8004758:	08029014 	.word	0x08029014

0800475c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3324      	adds	r3, #36	; 0x24
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	887a      	ldrh	r2, [r7, #2]
 8004772:	4611      	mov	r1, r2
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
 8004778:	4603      	mov	r3, r0
    }
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3324      	adds	r3, #36	; 0x24
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	4611      	mov	r1, r2
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	4798      	blx	r3
 800479e:	4603      	mov	r3, r0
    }
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3324      	adds	r3, #36	; 0x24
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	887a      	ldrh	r2, [r7, #2]
 80047be:	4611      	mov	r1, r2
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4798      	blx	r3
 80047c4:	4603      	mov	r3, r0
    }
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <_ZN8touchgfx12NoTransitionD1Ev>:
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	4a05      	ldr	r2, [pc, #20]	; (800480c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fce9 	bl	80041d4 <_ZN8touchgfx10TransitionD1Ev>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	0802989c 	.word	0x0802989c

08004810 <_ZN8touchgfx12NoTransitionD0Ev>:
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ffe7 	bl	80047ec <_ZN8touchgfx12NoTransitionD1Ev>
 800481e:	210c      	movs	r1, #12
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f022 ffec 	bl	80277fe <_ZdlPvj>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
    }
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004860:	b580      	push	{r7, lr}
 8004862:	b08c      	sub	sp, #48	; 0x30
 8004864:	af08      	add	r7, sp, #32
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	4611      	mov	r1, r2
 800486c:	461a      	mov	r2, r3
 800486e:	460b      	mov	r3, r1
 8004870:	80fb      	strh	r3, [r7, #6]
 8004872:	4613      	mov	r3, r2
 8004874:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	88b9      	ldrh	r1, [r7, #4]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800487e:	9306      	str	r3, [sp, #24]
 8004880:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004882:	9305      	str	r3, [sp, #20]
 8004884:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800488e:	9303      	str	r3, [sp, #12]
 8004890:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004894:	9302      	str	r3, [sp, #8]
 8004896:	7f3b      	ldrb	r3, [r7, #28]
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	7e3b      	ldrb	r3, [r7, #24]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	460b      	mov	r3, r1
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	f015 fb2b 	bl	8019efc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80048a6:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b0:	619a      	str	r2, [r3, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b6:	61da      	str	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048bc:	621a      	str	r2, [r3, #32]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048c2:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	080298e4 	.word	0x080298e4

080048d4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	889b      	ldrh	r3, [r3, #4]
 80048e8:	0adb      	lsrs	r3, r3, #11
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4413      	add	r3, r2
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004906:	b480      	push	{r7}
 8004908:	b089      	sub	sp, #36	; 0x24
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	460b      	mov	r3, r1
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	7b1b      	ldrb	r3, [r3, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8004922:	2300      	movs	r3, #0
 8004924:	e030      	b.n	8004988 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	69da      	ldr	r2, [r3, #28]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	7b5b      	ldrb	r3, [r3, #13]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	b21b      	sxth	r3, r3
 8004936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800493a:	b219      	sxth	r1, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	7adb      	ldrb	r3, [r3, #11]
 8004940:	b21b      	sxth	r3, r3
 8004942:	430b      	orrs	r3, r1
 8004944:	b21b      	sxth	r3, r3
 8004946:	b29b      	uxth	r3, r3
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	7b1b      	ldrb	r3, [r3, #12]
 8004952:	837b      	strh	r3, [r7, #26]
 8004954:	8b7b      	ldrh	r3, [r7, #26]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d015      	beq.n	8004986 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	897a      	ldrh	r2, [r7, #10]
 8004960:	429a      	cmp	r2, r3
 8004962:	d103      	bne.n	800496c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800496a:	e00d      	b.n	8004988 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	897a      	ldrh	r2, [r7, #10]
 8004972:	429a      	cmp	r2, r3
 8004974:	d306      	bcc.n	8004984 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004976:	8b7b      	ldrh	r3, [r7, #26]
 8004978:	3b01      	subs	r3, #1
 800497a:	837b      	strh	r3, [r7, #26]
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	3304      	adds	r3, #4
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	e7e7      	b.n	8004954 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8004984:	bf00      	nop
        }
    }
    return 0;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3724      	adds	r7, #36	; 0x24
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
        : color(col)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	601a      	str	r2, [r3, #0]
    }
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	791b      	ldrb	r3, [r3, #4]
    }
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe f8e4 	bl	8002bac <_ZN8touchgfx4RectC1Ev>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	330c      	adds	r3, #12
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe f8df 	bl	8002bac <_ZN8touchgfx4RectC1Ev>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	615a      	str	r2, [r3, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	619a      	str	r2, [r3, #24]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	61da      	str	r2, [r3, #28]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	841a      	strh	r2, [r3, #32]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	845a      	strh	r2, [r3, #34]	; 0x22
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	0802b198 	.word	0x0802b198

08004a2c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
    {
 8004a34:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	601a      	str	r2, [r3, #0]
    }
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	0802b198 	.word	0x0802b198

08004a4c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
    }
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff ffe9 	bl	8004a2c <_ZN8touchgfx8DrawableD1Ev>
 8004a5a:	2128      	movs	r1, #40	; 0x28
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f022 fece 	bl	80277fe <_ZdlPvj>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8004a74:	2300      	movs	r3, #0
    }
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4603      	mov	r3, r0
 8004a92:	817b      	strh	r3, [r7, #10]
 8004a94:	460b      	mov	r3, r1
 8004a96:	813b      	strh	r3, [r7, #8]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8004a9c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004aa0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f844 	bl	8004b34 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8004aac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f898 	bl	8004bec <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004abc:	bf00      	nop
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	809a      	strh	r2, [r3, #4]
    }
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	887a      	ldrh	r2, [r7, #2]
 8004b26:	80da      	strh	r2, [r3, #6]
    }
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
 8004b40:	4613      	mov	r3, r2
 8004b42:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	332c      	adds	r3, #44	; 0x2c
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004b50:	4611      	mov	r1, r2
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
        setY(y);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3330      	adds	r3, #48	; 0x30
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004b62:	4611      	mov	r1, r2
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
    }
 8004b68:	bf00      	nop
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	887a      	ldrh	r2, [r7, #2]
 8004b80:	811a      	strh	r2, [r3, #8]
    }
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	887a      	ldrh	r2, [r7, #2]
 8004b9e:	815a      	strh	r2, [r3, #10]
    }
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
    {
    }
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
    {
    }
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
    {
    }
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3334      	adds	r3, #52	; 0x34
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	4798      	blx	r3
        setHeight(height);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3338      	adds	r3, #56	; 0x38
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4798      	blx	r3
    }
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>:
     *
     * @param  drawable The Drawable to copy the width and height from.
     *
     * @see setWidthHeight(int16_t,int16_t)
     */
    void setWidthHeight(const Drawable& drawable)
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
    {
        setWidthHeight(drawable.getWidth(), drawable.getHeight());
 8004c32:	6838      	ldr	r0, [r7, #0]
 8004c34:	f7ff ff46 	bl	8004ac4 <_ZNK8touchgfx8Drawable8getWidthEv>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	461c      	mov	r4, r3
 8004c3c:	6838      	ldr	r0, [r7, #0]
 8004c3e:	f7ff ff4e 	bl	8004ade <_ZNK8touchgfx8Drawable9getHeightEv>
 8004c42:	4603      	mov	r3, r0
 8004c44:	461a      	mov	r2, r3
 8004c46:	4621      	mov	r1, r4
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ffcf 	bl	8004bec <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd90      	pop	{r4, r7, pc}

08004c56 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
    {
    }
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
    {
    }
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @param  vis true if this Drawable should be visible. By default, drawables are visible
     *             unless this function has been called with false as argument.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setVisible(bool vis)
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	78fa      	ldrb	r2, [r7, #3]
 8004c90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	807b      	strh	r3, [r7, #2]
 8004d00:	4613      	mov	r3, r2
 8004d02:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3350      	adds	r3, #80	; 0x50
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	8879      	ldrh	r1, [r7, #2]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004d14:	b292      	uxth	r2, r2
 8004d16:	1a8a      	subs	r2, r1, r2
 8004d18:	b292      	uxth	r2, r2
 8004d1a:	b210      	sxth	r0, r2
 8004d1c:	8839      	ldrh	r1, [r7, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004d24:	b292      	uxth	r2, r2
 8004d26:	1a8a      	subs	r2, r1, r2
 8004d28:	b292      	uxth	r2, r2
 8004d2a:	b212      	sxth	r2, r2
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
    }
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d48:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d50:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d58:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff ffe1 	bl	8004d3a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	601a      	str	r2, [r3, #0]
    }
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff fe16 	bl	80049cc <_ZN8touchgfx8DrawableC1Ev>
 8004da0:	4a05      	ldr	r2, [pc, #20]	; (8004db8 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	0802a0ec 	.word	0x0802a0ec

08004dbc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
    {
 8004ddc:	4a06      	ldr	r2, [pc, #24]	; (8004df8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3304      	adds	r3, #4
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f8f4 	bl	8004fd4 <_ZN8touchgfx9ContainerD1Ev>
    }
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	0802b268 	.word	0x0802b268

08004dfc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
    }
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff ffe5 	bl	8004dd4 <_ZN8touchgfx6ScreenD1Ev>
 8004e0a:	213c      	movs	r1, #60	; 0x3c
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f022 fcf6 	bl	80277fe <_ZdlPvj>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
    {
    }
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
    {
    }
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
    {
    }
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
    {
    }
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70fb      	strb	r3, [r7, #3]
    {
    }
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f00f ff65 	bl	8014d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	817b      	strh	r3, [r7, #10]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff ff02 	bl	8004cc0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff ff08 	bl	8004cda <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e000      	b.n	8004ed6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	601a      	str	r2, [r3, #0]
        }
    }
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fd6a 	bl	80049cc <_ZN8touchgfx8DrawableC1Ev>
 8004ef8:	4a03      	ldr	r2, [pc, #12]	; (8004f08 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	08029c34 	.word	0x08029c34

08004f0c <_ZN8touchgfx6WidgetD1Ev>:
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	4a05      	ldr	r2, [pc, #20]	; (8004f2c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff fd85 	bl	8004a2c <_ZN8touchgfx8DrawableD1Ev>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	08029c34 	.word	0x08029c34

08004f30 <_ZN8touchgfx6WidgetD0Ev>:
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ffe7 	bl	8004f0c <_ZN8touchgfx6WidgetD1Ev>
 8004f3e:	2128      	movs	r1, #40	; 0x28
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f022 fc5c 	bl	80277fe <_ZdlPvj>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	2326      	movs	r3, #38	; 0x26
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2100      	movs	r1, #0
 8004f62:	f022 fd07 	bl	8027974 <memset>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ffbd 	bl	8004ee8 <_ZN8touchgfx6WidgetC1Ev>
 8004f6e:	4a09      	ldr	r2, [pc, #36]	; (8004f94 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	22ff      	movs	r2, #255	; 0xff
 8004f78:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3328      	adds	r3, #40	; 0x28
 8004f80:	2100      	movs	r1, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff fd06 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	0802acb4 	.word	0x0802acb4

08004f98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	4a05      	ldr	r2, [pc, #20]	; (8004ff4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fd21 	bl	8004a2c <_ZN8touchgfx8DrawableD1Ev>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	0802a0ec 	.word	0x0802a0ec

08004ff8 <_ZN8touchgfx9ContainerD0Ev>:
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ffe7 	bl	8004fd4 <_ZN8touchgfx9ContainerD1Ev>
 8005006:	212c      	movs	r1, #44	; 0x2c
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f022 fbf8 	bl	80277fe <_ZdlPvj>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff feb4 	bl	8004d90 <_ZN8touchgfx9ContainerC1Ev>
 8005028:	4a0b      	ldr	r2, [pc, #44]	; (8005058 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	22ff      	movs	r2, #255	; 0xff
 800503a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2101      	movs	r1, #1
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fe29 	bl	8004ca0 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	08029b9c 	.word	0x08029b9c

0800505c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3388      	adds	r3, #136	; 0x88
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	4798      	blx	r3
    }
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8005092:	4618      	mov	r0, r3
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
        alpha = newAlpha;
        handleAlphaUpdated();
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @param  callback The callback.
     *
     * @see executeAction
     */
    void setAction(GenericCallback<const AbstractButtonContainer&>& callback)
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00d      	beq.n	8005100 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	330c      	adds	r3, #12
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4610      	mov	r0, r2
 80050f4:	4798      	blx	r3
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4610      	mov	r0, r2
 8005118:	4798      	blx	r3
        }
    }
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
    {
    }
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
    {
    }
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	4a05      	ldr	r2, [pc, #20]	; (800516c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fed5 	bl	8004f0c <_ZN8touchgfx6WidgetD1Ev>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	0802acb4 	.word	0x0802acb4

08005170 <_ZN8touchgfx3BoxD0Ev>:
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff ffe7 	bl	800514c <_ZN8touchgfx3BoxD1Ev>
 800517e:	212c      	movs	r1, #44	; 0x2c
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f022 fb3c 	bl	80277fe <_ZdlPvj>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fed8 	bl	8004f50 <_ZN8touchgfx3BoxC1Ev>
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	332c      	adds	r3, #44	; 0x2c
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fbf1 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	0802adc0 	.word	0x0802adc0

080051c8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	887a      	ldrh	r2, [r7, #2]
 80051f4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff ff38 	bl	8005084 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8005214:	4603      	mov	r3, r0
 8005216:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8005218:	6838      	ldr	r0, [r7, #0]
 800521a:	f7ff fbca 	bl	80049b2 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	bf0c      	ite	eq
 8005224:	2301      	moveq	r3, #1
 8005226:	2300      	movne	r3, #0
 8005228:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800522a:	7bbb      	ldrb	r3, [r7, #14]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	f083 0301 	eor.w	r3, r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d108      	bne.n	800524e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 800523c:	7bbb      	ldrb	r3, [r7, #14]
 800523e:	f083 0301 	eor.w	r3, r3, #1
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00f      	beq.n	8005268 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00c      	beq.n	8005268 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	7bba      	ldrb	r2, [r7, #14]
 8005252:	4611      	mov	r1, r2
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff ff01 	bl	800505c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3314      	adds	r3, #20
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4610      	mov	r0, r2
 8005266:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800526e:	6838      	ldr	r0, [r7, #0]
 8005270:	f7ff fb9f 	bl	80049b2 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 800527e:	2300      	movs	r3, #0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d006      	beq.n	8005292 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3384      	adds	r3, #132	; 0x84
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4610      	mov	r0, r2
 8005290:	4798      	blx	r3
        }
    }
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	4a05      	ldr	r2, [pc, #20]	; (80052bc <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fe91 	bl	8004fd4 <_ZN8touchgfx9ContainerD1Ev>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	08029b9c 	.word	0x08029b9c

080052c0 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ffe7 	bl	800529c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 80052ce:	2134      	movs	r1, #52	; 0x34
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f022 fa94 	bl	80277fe <_ZdlPvj>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80052ec:	4a06      	ldr	r2, [pc, #24]	; (8005308 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	887a      	ldrh	r2, [r7, #2]
 80052f6:	809a      	strh	r2, [r3, #4]
    }
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	0802988c 	.word	0x0802988c

0800530c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4618      	mov	r0, r3
 8005318:	2326      	movs	r3, #38	; 0x26
 800531a:	461a      	mov	r2, r3
 800531c:	2100      	movs	r1, #0
 800531e:	f022 fb29 	bl	8027974 <memset>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff fddf 	bl	8004ee8 <_ZN8touchgfx6WidgetC1Ev>
 800532a:	4a14      	ldr	r2, [pc, #80]	; (800537c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3328      	adds	r3, #40	; 0x28
 8005334:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff ffd1 	bl	80052e0 <_ZN8touchgfx9TypedTextC1Et>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3330      	adds	r3, #48	; 0x30
 8005342:	2100      	movs	r1, #0
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fb25 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	869a      	strh	r2, [r3, #52]	; 0x34
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	22ff      	movs	r2, #255	; 0xff
 8005354:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	0802ac0c 	.word	0x0802ac0c

08005380 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	78fa      	ldrb	r2, [r7, #3]
 8005390:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	4a08      	ldr	r2, [pc, #32]	; (80053cc <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3328      	adds	r3, #40	; 0x28
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe feb0 	bl	8004118 <_ZN8touchgfx9TypedTextD1Ev>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff fda6 	bl	8004f0c <_ZN8touchgfx6WidgetD1Ev>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	0802ac0c 	.word	0x0802ac0c

080053d0 <_ZN8touchgfx8TextAreaD0Ev>:
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ffe1 	bl	80053a0 <_ZN8touchgfx8TextAreaD1Ev>
 80053de:	213c      	movs	r1, #60	; 0x3c
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f022 fa0c 	bl	80277fe <_ZdlPvj>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff ff86 	bl	800530c <_ZN8touchgfx8TextAreaC1Ev>
 8005400:	4a05      	ldr	r2, [pc, #20]	; (8005418 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	0802ad18 	.word	0x0802ad18

0800541c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	4a05      	ldr	r2, [pc, #20]	; (800543c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fcd1 	bl	8004dd4 <_ZN8touchgfx6ScreenD1Ev>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	08029ab8 	.word	0x08029ab8

08005440 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff ffe7 	bl	800541c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800544e:	2140      	movs	r1, #64	; 0x40
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f022 f9d4 	bl	80277fe <_ZdlPvj>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	4a2b      	ldr	r2, [pc, #172]	; (8005518 <_ZN15Screen1ViewBaseD1Ev+0xb8>)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8005474:	4618      	mov	r0, r3
 8005476:	f001 fa13 	bl	80068a0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8005480:	4618      	mov	r0, r3
 8005482:	f001 faa5 	bl	80069d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 800548c:	4618      	mov	r0, r3
 800548e:	f001 fa29 	bl	80068e4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8005498:	4618      	mov	r0, r3
 800549a:	f001 fa23 	bl	80068e4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 fa45 	bl	8006934 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fd8f 	bl	8004fd4 <_ZN8touchgfx9ContainerD1Ev>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff ff6f 	bl	80053a0 <_ZN8touchgfx8TextAreaD1Ev>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 fa55 	bl	8006978 <_ZN8touchgfx19ScrollableContainerD1Ev>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 fa2d 	bl	8006934 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 f9ff 	bl	80068e4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3398      	adds	r3, #152	; 0x98
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 f9fa 	bl	80068e4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	336c      	adds	r3, #108	; 0x6c
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fe29 	bl	800514c <_ZN8touchgfx3BoxD1Ev>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3340      	adds	r3, #64	; 0x40
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff fe24 	bl	800514c <_ZN8touchgfx3BoxD1Ev>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff ff88 	bl	800541c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	0802993c 	.word	0x0802993c

0800551c <_ZN15Screen1ViewBaseD0Ev>:
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff9b 	bl	8005460 <_ZN15Screen1ViewBaseD1Ev>
 800552a:	f240 5164 	movw	r1, #1380	; 0x564
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f022 f965 	bl	80277fe <_ZdlPvj>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8005540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005544:	b0d6      	sub	sp, #344	; 0x158
 8005546:	af02      	add	r7, sp, #8
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	6018      	str	r0, [r3, #0]
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f000 ff89 	bl	8006468 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8005556:	4aeb      	ldr	r2, [pc, #940]	; (8005904 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 8005558:	1d3b      	adds	r3, r7, #4
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	1d3b      	adds	r3, r7, #4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3340      	adds	r3, #64	; 0x40
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff fcf3 	bl	8004f50 <_ZN8touchgfx3BoxC1Ev>
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	336c      	adds	r3, #108	; 0x6c
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fced 	bl	8004f50 <_ZN8touchgfx3BoxC1Ev>
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3398      	adds	r3, #152	; 0x98
 800557c:	4618      	mov	r0, r3
 800557e:	f000 ffd3 	bl	8006528 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8005582:	1d3b      	adds	r3, r7, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800558a:	4618      	mov	r0, r3
 800558c:	f000 ffcc 	bl	8006528 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8005590:	1d3b      	adds	r3, r7, #4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fdf9 	bl	8005190 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80055a6:	4618      	mov	r0, r3
 80055a8:	f010 f94a 	bl	8015840 <_ZN8touchgfx19ScrollableContainerC1Ev>
 80055ac:	1d3b      	adds	r3, r7, #4
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff fea9 	bl	800530c <_ZN8touchgfx8TextAreaC1Ev>
 80055ba:	1d3b      	adds	r3, r7, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fbe4 	bl	8004d90 <_ZN8touchgfx9ContainerC1Ev>
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff fddd 	bl	8005190 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80055d6:	1d3b      	adds	r3, r7, #4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 ffa2 	bl	8006528 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 80055e4:	1d3b      	adds	r3, r7, #4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 ff9b 	bl	8006528 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f203 5314 	addw	r3, r3, #1300	; 0x514
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fef8 	bl	80053f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f203 5054 	addw	r0, r3, #1364	; 0x554
 8005608:	f107 0314 	add.w	r3, r7, #20
 800560c:	4abe      	ldr	r2, [pc, #760]	; (8005908 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f107 0314 	add.w	r3, r7, #20
 8005614:	2200      	movs	r2, #0
 8005616:	605a      	str	r2, [r3, #4]
 8005618:	f107 0314 	add.w	r3, r7, #20
 800561c:	1d39      	adds	r1, r7, #4
 800561e:	cb0c      	ldmia	r3, {r2, r3}
 8005620:	6809      	ldr	r1, [r1, #0]
 8005622:	f000 ffb9 	bl	8006598 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800562e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005638:	2200      	movs	r2, #0
 800563a:	2100      	movs	r1, #0
 800563c:	f7ff fa21 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005640:	1d3b      	adds	r3, r7, #4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005648:	2300      	movs	r3, #0
 800564a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 800564e:	2300      	movs	r3, #0
 8005650:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8005654:	2300      	movs	r3, #0
 8005656:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800565a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800565e:	041b      	lsls	r3, r3, #16
 8005660:	461a      	mov	r2, r3
 8005662:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	431a      	orrs	r2, r3
 800566a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800566e:	4313      	orrs	r3, r2
 8005670:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005674:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005678:	4611      	mov	r1, r2
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff f98a 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005684:	4619      	mov	r1, r3
 8005686:	4620      	mov	r0, r4
 8005688:	f7ff fc86 	bl	8004f98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    background.setPosition(0, 0, 480, 272);
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8005694:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800569e:	2200      	movs	r2, #0
 80056a0:	2100      	movs	r1, #0
 80056a2:	f7ff f9ee 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFromRGB(255, 163, 59));
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80056ae:	23ff      	movs	r3, #255	; 0xff
 80056b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80056b4:	23a3      	movs	r3, #163	; 0xa3
 80056b6:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 80056ba:	233b      	movs	r3, #59	; 0x3b
 80056bc:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80056c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80056c4:	041b      	lsls	r3, r3, #16
 80056c6:	461a      	mov	r2, r3
 80056c8:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	431a      	orrs	r2, r3
 80056d0:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80056da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056de:	4611      	mov	r1, r2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff f957 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 80056e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056ea:	4619      	mov	r1, r3
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7ff fc53 	bl	8004f98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    txButton.setBoxWithBorderPosition(0, 0, 69, 48);
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80056fa:	2330      	movs	r3, #48	; 0x30
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	2345      	movs	r3, #69	; 0x45
 8005700:	2200      	movs	r2, #0
 8005702:	2100      	movs	r1, #0
 8005704:	f000 ff68 	bl	80065d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    txButton.setBorderSize(5);
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3398      	adds	r3, #152	; 0x98
 800570e:	2105      	movs	r1, #5
 8005710:	4618      	mov	r0, r3
 8005712:	f000 ff81 	bl	8006618 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    txButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800571e:	2300      	movs	r3, #0
 8005720:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8005724:	2366      	movs	r3, #102	; 0x66
 8005726:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 800572a:	2399      	movs	r3, #153	; 0x99
 800572c:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 8005730:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8005734:	041b      	lsls	r3, r3, #16
 8005736:	461a      	mov	r2, r3
 8005738:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	431a      	orrs	r2, r3
 8005740:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8005744:	4313      	orrs	r3, r2
 8005746:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800574a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff f91f 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800575a:	461d      	mov	r5, r3
 800575c:	2300      	movs	r3, #0
 800575e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8005762:	2399      	movs	r3, #153	; 0x99
 8005764:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8005768:	23cc      	movs	r3, #204	; 0xcc
 800576a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 800576e:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	461a      	mov	r2, r3
 8005776:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	431a      	orrs	r2, r3
 800577e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005782:	4313      	orrs	r3, r2
 8005784:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005788:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800578c:	4611      	mov	r1, r2
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff f900 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005798:	461e      	mov	r6, r3
 800579a:	2300      	movs	r3, #0
 800579c:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 80057a0:	2333      	movs	r3, #51	; 0x33
 80057a2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80057a6:	2366      	movs	r3, #102	; 0x66
 80057a8:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 80057ac:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80057b0:	041b      	lsls	r3, r3, #16
 80057b2:	461a      	mov	r2, r3
 80057b4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	431a      	orrs	r2, r3
 80057bc:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80057c6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80057ca:	4611      	mov	r1, r2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff f8e1 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 80057d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057d6:	4698      	mov	r8, r3
 80057d8:	2333      	movs	r3, #51	; 0x33
 80057da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 80057de:	2366      	movs	r3, #102	; 0x66
 80057e0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80057e4:	2399      	movs	r3, #153	; 0x99
 80057e6:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
 80057ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80057ee:	041b      	lsls	r3, r3, #16
 80057f0:	461a      	mov	r2, r3
 80057f2:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	431a      	orrs	r2, r3
 80057fa:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80057fe:	4313      	orrs	r3, r2
 8005800:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005804:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff f8c2 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005810:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	4643      	mov	r3, r8
 8005818:	4632      	mov	r2, r6
 800581a:	4629      	mov	r1, r5
 800581c:	4620      	mov	r0, r4
 800581e:	f000 ff0d 	bl	800663c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    txButton.setText(TypedText(T___SINGLEUSE_C6V9));
 8005822:	1d3b      	adds	r3, r7, #4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800582a:	f107 031c 	add.w	r3, r7, #28
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fd55 	bl	80052e0 <_ZN8touchgfx9TypedTextC1Et>
 8005836:	f107 031c 	add.w	r3, r7, #28
 800583a:	4619      	mov	r1, r3
 800583c:	4620      	mov	r0, r4
 800583e:	f000 ff1a 	bl	8006676 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8005842:	f107 031c 	add.w	r3, r7, #28
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fc66 	bl	8004118 <_ZN8touchgfx9TypedTextD1Ev>
    txButton.setTextPosition(0, 11, 69, 48);
 800584c:	1d3b      	adds	r3, r7, #4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8005854:	2330      	movs	r3, #48	; 0x30
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	2345      	movs	r3, #69	; 0x45
 800585a:	220b      	movs	r2, #11
 800585c:	2100      	movs	r1, #0
 800585e:	f000 ff20 	bl	80066a2 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    txButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 8005862:	1d3b      	adds	r3, r7, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800586a:	23ff      	movs	r3, #255	; 0xff
 800586c:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8005870:	23ff      	movs	r3, #255	; 0xff
 8005872:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 8005876:	23ff      	movs	r3, #255	; 0xff
 8005878:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 800587c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	461a      	mov	r2, r3
 8005884:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	431a      	orrs	r2, r3
 800588c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8005890:	4313      	orrs	r3, r2
 8005892:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005896:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800589a:	4611      	mov	r1, r2
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff f879 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 80058a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058a6:	461d      	mov	r5, r3
 80058a8:	23ff      	movs	r3, #255	; 0xff
 80058aa:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
 80058ae:	23ff      	movs	r3, #255	; 0xff
 80058b0:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
 80058b4:	23ff      	movs	r3, #255	; 0xff
 80058b6:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80058ba:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 80058be:	041b      	lsls	r3, r3, #16
 80058c0:	461a      	mov	r2, r3
 80058c2:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	431a      	orrs	r2, r3
 80058ca:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80058d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff f85a 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 80058e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80058e4:	461a      	mov	r2, r3
 80058e6:	4629      	mov	r1, r5
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 fefa 	bl	80066e2 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    txButton.setPosition(23, 18, 69, 48);
 80058ee:	1d3b      	adds	r3, r7, #4
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80058f6:	2330      	movs	r3, #48	; 0x30
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	2345      	movs	r3, #69	; 0x45
 80058fc:	2212      	movs	r2, #18
 80058fe:	2117      	movs	r1, #23
 8005900:	e004      	b.n	800590c <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 8005902:	bf00      	nop
 8005904:	0802993c 	.word	0x0802993c
 8005908:	08006409 	.word	0x08006409
 800590c:	f7ff f8b9 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    txButton.setAction(flexButtonCallback);
 8005910:	1d3b      	adds	r3, r7, #4
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8005918:	1d3b      	adds	r3, r7, #4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f7ff fbc8 	bl	80050b8 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    rxButton.setBoxWithBorderPosition(0, 0, 69, 48);
 8005928:	1d3b      	adds	r3, r7, #4
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 8005930:	2330      	movs	r3, #48	; 0x30
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	2345      	movs	r3, #69	; 0x45
 8005936:	2200      	movs	r2, #0
 8005938:	2100      	movs	r1, #0
 800593a:	f000 fe4d 	bl	80065d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    rxButton.setBorderSize(5);
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005946:	2105      	movs	r1, #5
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fe65 	bl	8006618 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    rxButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800594e:	1d3b      	adds	r3, r7, #4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8005956:	2300      	movs	r3, #0
 8005958:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
 800595c:	2366      	movs	r3, #102	; 0x66
 800595e:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 8005962:	2399      	movs	r3, #153	; 0x99
 8005964:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
 8005968:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800596c:	041b      	lsls	r3, r3, #16
 800596e:	461a      	mov	r2, r3
 8005970:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	431a      	orrs	r2, r3
 8005978:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 800597c:	4313      	orrs	r3, r2
 800597e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005982:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005986:	4611      	mov	r1, r2
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff f803 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 800598e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005992:	461d      	mov	r5, r3
 8005994:	2300      	movs	r3, #0
 8005996:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800599a:	2399      	movs	r3, #153	; 0x99
 800599c:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 80059a0:	23cc      	movs	r3, #204	; 0xcc
 80059a2:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
 80059a6:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	461a      	mov	r2, r3
 80059ae:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	431a      	orrs	r2, r3
 80059b6:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80059c0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe ffe4 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 80059cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059d0:	461e      	mov	r6, r3
 80059d2:	2300      	movs	r3, #0
 80059d4:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 80059d8:	2333      	movs	r3, #51	; 0x33
 80059da:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 80059de:	2366      	movs	r3, #102	; 0x66
 80059e0:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 80059e4:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80059e8:	041b      	lsls	r3, r3, #16
 80059ea:	461a      	mov	r2, r3
 80059ec:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 80059f0:	021b      	lsls	r3, r3, #8
 80059f2:	431a      	orrs	r2, r3
 80059f4:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80059fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005a02:	4611      	mov	r1, r2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe ffc5 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a0e:	4698      	mov	r8, r3
 8005a10:	2333      	movs	r3, #51	; 0x33
 8005a12:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
 8005a16:	2366      	movs	r3, #102	; 0x66
 8005a18:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
 8005a1c:	2399      	movs	r3, #153	; 0x99
 8005a1e:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8005a22:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	431a      	orrs	r2, r3
 8005a32:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a3c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005a40:	4611      	mov	r1, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe ffa6 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005a48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	4643      	mov	r3, r8
 8005a50:	4632      	mov	r2, r6
 8005a52:	4629      	mov	r1, r5
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 fdf1 	bl	800663c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    rxButton.setText(TypedText(T___SINGLEUSE_NCFE));
 8005a5a:	1d3b      	adds	r3, r7, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8005a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a66:	2101      	movs	r1, #1
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff fc39 	bl	80052e0 <_ZN8touchgfx9TypedTextC1Et>
 8005a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a72:	4619      	mov	r1, r3
 8005a74:	4620      	mov	r0, r4
 8005a76:	f000 fdfe 	bl	8006676 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8005a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fb4a 	bl	8004118 <_ZN8touchgfx9TypedTextD1Ev>
    rxButton.setTextPosition(0, 11, 69, 48);
 8005a84:	1d3b      	adds	r3, r7, #4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 8005a8c:	2330      	movs	r3, #48	; 0x30
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	2345      	movs	r3, #69	; 0x45
 8005a92:	220b      	movs	r2, #11
 8005a94:	2100      	movs	r1, #0
 8005a96:	f000 fe04 	bl	80066a2 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    rxButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 8005a9a:	1d3b      	adds	r3, r7, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8005aa2:	23ff      	movs	r3, #255	; 0xff
 8005aa4:	f887 30f8 	strb.w	r3, [r7, #248]	; 0xf8
 8005aa8:	23ff      	movs	r3, #255	; 0xff
 8005aaa:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8005aae:	23ff      	movs	r3, #255	; 0xff
 8005ab0:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
 8005ab4:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8005ab8:	041b      	lsls	r3, r3, #16
 8005aba:	461a      	mov	r2, r3
 8005abc:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005ace:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe ff5d 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ade:	461d      	mov	r5, r3
 8005ae0:	23ff      	movs	r3, #255	; 0xff
 8005ae2:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 8005ae6:	23ff      	movs	r3, #255	; 0xff
 8005ae8:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 8005aec:	23ff      	movs	r3, #255	; 0xff
 8005aee:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
 8005af2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8005af6:	041b      	lsls	r3, r3, #16
 8005af8:	461a      	mov	r2, r3
 8005afa:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	431a      	orrs	r2, r3
 8005b02:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005b0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005b10:	4611      	mov	r1, r2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe ff3e 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4629      	mov	r1, r5
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fdde 	bl	80066e2 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    rxButton.setPosition(112, 18, 69, 48);
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 8005b2e:	2330      	movs	r3, #48	; 0x30
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	2345      	movs	r3, #69	; 0x45
 8005b34:	2212      	movs	r2, #18
 8005b36:	2170      	movs	r1, #112	; 0x70
 8005b38:	f7fe ffa3 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    rxButton.setAction(flexButtonCallback);
 8005b3c:	1d3b      	adds	r3, r7, #4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f503 72aa 	add.w	r2, r3, #340	; 0x154
 8005b44:	1d3b      	adds	r3, r7, #4
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4610      	mov	r0, r2
 8005b50:	f7ff fab2 	bl	80050b8 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    scrollBackgroundBox.setPosition(208, 0, 272, 272);
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f503 7004 	add.w	r0, r3, #528	; 0x210
 8005b5c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005b66:	2200      	movs	r2, #0
 8005b68:	21d0      	movs	r1, #208	; 0xd0
 8005b6a:	f7fe ff8a 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollBackgroundBox.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8005b6e:	1d3b      	adds	r3, r7, #4
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8005b76:	23ff      	movs	r3, #255	; 0xff
 8005b78:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
 8005b7c:	23ff      	movs	r3, #255	; 0xff
 8005b7e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8005b82:	23ff      	movs	r3, #255	; 0xff
 8005b84:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8005b88:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8005b8c:	041b      	lsls	r3, r3, #16
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	431a      	orrs	r2, r3
 8005b98:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005ba2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fef3 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005bae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f7ff f9ef 	bl	8004f98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    scrollBackgroundBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005bba:	1d3b      	adds	r3, r7, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8005bd4:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8005bd8:	041b      	lsls	r3, r3, #16
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	431a      	orrs	r2, r3
 8005be4:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005bee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe fecd 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4620      	mov	r0, r4
 8005c02:	f7ff fae1 	bl	80051c8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    scrollBackgroundBox.setBorderSize(5);
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c0e:	2105      	movs	r1, #5
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fae7 	bl	80051e4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    scrollableContainer.setPosition(219, 11, 250, 250);
 8005c16:	1d3b      	adds	r3, r7, #4
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f503 7011 	add.w	r0, r3, #580	; 0x244
 8005c1e:	23fa      	movs	r3, #250	; 0xfa
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	23fa      	movs	r3, #250	; 0xfa
 8005c24:	220b      	movs	r2, #11
 8005c26:	21db      	movs	r1, #219	; 0xdb
 8005c28:	f7fe ff2b 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005c2c:	1d3b      	adds	r3, r7, #4
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f503 7411 	add.w	r4, r3, #580	; 0x244
 8005c34:	2300      	movs	r3, #0
 8005c36:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 8005c46:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8005c4a:	041b      	lsls	r3, r3, #16
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	431a      	orrs	r2, r3
 8005c56:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005c60:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005c64:	4611      	mov	r1, r2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe fe94 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c70:	4619      	mov	r1, r3
 8005c72:	4620      	mov	r0, r4
 8005c74:	f010 f8f8 	bl	8015e68 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>

    feedbackTextArea.setXY(0, 0);
 8005c78:	1d3b      	adds	r3, r7, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005c80:	2200      	movs	r2, #0
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fe ff55 	bl	8004b34 <_ZN8touchgfx8Drawable5setXYEss>
    feedbackTextArea.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005c8a:	1d3b      	adds	r3, r7, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8005c92:	2300      	movs	r3, #0
 8005c94:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8005ca4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	461a      	mov	r2, r3
 8005cac:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005cb0:	021b      	lsls	r3, r3, #8
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005cbe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fe65 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8005cd4:	f107 0310 	add.w	r3, r7, #16
 8005cd8:	601a      	str	r2, [r3, #0]
        this->color = color;
 8005cda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cde:	f107 0210 	add.w	r2, r7, #16
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8005ce6:	bf00      	nop
    feedbackTextArea.setLinespacing(0);
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005cf0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8005cfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cfe:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005d02:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8005d04:	bf00      	nop
    feedbackTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X7DN));
 8005d06:	1d3b      	adds	r3, r7, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8005d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d12:	2102      	movs	r1, #2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fae3 	bl	80052e0 <_ZN8touchgfx9TypedTextC1Et>
 8005d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4620      	mov	r0, r4
 8005d22:	f011 fa62 	bl	80171ea <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fe f9f4 	bl	8004118 <_ZN8touchgfx9TypedTextD1Ev>
    scrollableContainer.add(feedbackTextArea);
 8005d30:	1d3b      	adds	r3, r7, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f503 7211 	add.w	r2, r3, #580	; 0x244
 8005d38:	1d3b      	adds	r3, r7, #4
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005d40:	4619      	mov	r1, r3
 8005d42:	4610      	mov	r0, r2
 8005d44:	f00f faa1 	bl	801528a <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    scrollableContainer.setScrollbarsPermanentlyVisible();
 8005d48:	1d3b      	adds	r3, r7, #4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005d50:	2101      	movs	r1, #1
 8005d52:	4618      	mov	r0, r3
 8005d54:	f010 f88d 	bl	8015e72 <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>

    txInfoContainer.setPosition(7, 77, 190, 184);
 8005d58:	1d3b      	adds	r3, r7, #4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8005d60:	23b8      	movs	r3, #184	; 0xb8
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	23be      	movs	r3, #190	; 0xbe
 8005d66:	224d      	movs	r2, #77	; 0x4d
 8005d68:	2107      	movs	r1, #7
 8005d6a:	f7fe fe8a 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>

    txInfoBackgroundBox.setPosition(0, 0, 190, 184);
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f503 705a 	add.w	r0, r3, #872	; 0x368
 8005d76:	23b8      	movs	r3, #184	; 0xb8
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	23be      	movs	r3, #190	; 0xbe
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2100      	movs	r1, #0
 8005d80:	f7fe fe7f 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoBackgroundBox.setColor(touchgfx::Color::getColorFromRGB(255, 201, 143));
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f503 745a 	add.w	r4, r3, #872	; 0x368
 8005d8c:	23ff      	movs	r3, #255	; 0xff
 8005d8e:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8005d92:	23c9      	movs	r3, #201	; 0xc9
 8005d94:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 8005d98:	238f      	movs	r3, #143	; 0x8f
 8005d9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8005d9e:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8005da2:	041b      	lsls	r3, r3, #16
 8005da4:	461a      	mov	r2, r3
 8005da6:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	431a      	orrs	r2, r3
 8005dae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005db8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fde8 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f7ff f8e4 	bl	8004f98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    txInfoBackgroundBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005dd0:	1d3b      	adds	r3, r7, #4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f503 745a 	add.w	r4, r3, #872	; 0x368
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8005dde:	2300      	movs	r3, #0
 8005de0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 8005dea:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8005dee:	041b      	lsls	r3, r3, #16
 8005df0:	461a      	mov	r2, r3
 8005df2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005e04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005e08:	4611      	mov	r1, r2
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fdc2 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e14:	4619      	mov	r1, r3
 8005e16:	4620      	mov	r0, r4
 8005e18:	f7ff f9d6 	bl	80051c8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    txInfoBackgroundBox.setBorderSize(5);
 8005e1c:	1d3b      	adds	r3, r7, #4
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8005e24:	2105      	movs	r1, #5
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff f9dc 	bl	80051e4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    txInfoContainer.add(txInfoBackgroundBox);
 8005e2c:	1d3b      	adds	r3, r7, #4
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8005e34:	1d3b      	adds	r3, r7, #4
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f00e ff90 	bl	8014d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    sendValButton.setBoxWithBorderPosition(0, 0, 158, 32);
 8005e44:	1d3b      	adds	r3, r7, #4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8005e4c:	2320      	movs	r3, #32
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	239e      	movs	r3, #158	; 0x9e
 8005e52:	2200      	movs	r2, #0
 8005e54:	2100      	movs	r1, #0
 8005e56:	f000 fbbf 	bl	80065d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    sendValButton.setBorderSize(5);
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8005e62:	2105      	movs	r1, #5
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fbd7 	bl	8006618 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    sendValButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8005e72:	2300      	movs	r3, #0
 8005e74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8005e78:	2366      	movs	r3, #102	; 0x66
 8005e7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005e7e:	2399      	movs	r3, #153	; 0x99
 8005e80:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8005e84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e88:	041b      	lsls	r3, r3, #16
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	431a      	orrs	r2, r3
 8005e94:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005e9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fe fd75 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005eaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eac:	461d      	mov	r5, r3
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
 8005eb4:	2399      	movs	r3, #153	; 0x99
 8005eb6:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
 8005eba:	23cc      	movs	r3, #204	; 0xcc
 8005ebc:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
 8005ec0:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005eda:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005ede:	4611      	mov	r1, r2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe fd57 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005ee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ee8:	461e      	mov	r6, r3
 8005eea:	2300      	movs	r3, #0
 8005eec:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
 8005ef0:	2333      	movs	r3, #51	; 0x33
 8005ef2:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
 8005ef6:	2366      	movs	r3, #102	; 0x66
 8005ef8:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
 8005efc:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	461a      	mov	r2, r3
 8005f04:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005f16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe fd39 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f24:	4698      	mov	r8, r3
 8005f26:	2333      	movs	r3, #51	; 0x33
 8005f28:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
 8005f2c:	2366      	movs	r3, #102	; 0x66
 8005f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8005f32:	2399      	movs	r3, #153	; 0x99
 8005f34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005f38:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8005f3c:	041b      	lsls	r3, r3, #16
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	431a      	orrs	r2, r3
 8005f48:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005f52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe fd1b 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	4643      	mov	r3, r8
 8005f64:	4632      	mov	r2, r6
 8005f66:	4629      	mov	r1, r5
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f000 fb67 	bl	800663c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    sendValButton.setText(TypedText(T___SINGLEUSE_N3IE));
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8005f76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005f7a:	2105      	movs	r1, #5
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff f9af 	bl	80052e0 <_ZN8touchgfx9TypedTextC1Et>
 8005f82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005f86:	4619      	mov	r1, r3
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fb74 	bl	8006676 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8005f8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe f8c0 	bl	8004118 <_ZN8touchgfx9TypedTextD1Ev>
    sendValButton.setTextPosition(0, 6, 158, 32);
 8005f98:	1d3b      	adds	r3, r7, #4
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8005fa0:	2320      	movs	r3, #32
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	239e      	movs	r3, #158	; 0x9e
 8005fa6:	2206      	movs	r2, #6
 8005fa8:	2100      	movs	r1, #0
 8005faa:	f000 fb7a 	bl	80066a2 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    sendValButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 8005fae:	1d3b      	adds	r3, r7, #4
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8005fb6:	23ff      	movs	r3, #255	; 0xff
 8005fb8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
 8005fbc:	23ff      	movs	r3, #255	; 0xff
 8005fbe:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
 8005fc2:	23ff      	movs	r3, #255	; 0xff
 8005fc4:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
 8005fc8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005fcc:	041b      	lsls	r3, r3, #16
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005fe2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fe fcd3 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8005fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff0:	461d      	mov	r5, r3
 8005ff2:	23ff      	movs	r3, #255	; 0xff
 8005ff4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8005ff8:	23ff      	movs	r3, #255	; 0xff
 8005ffa:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 8005ffe:	23ff      	movs	r3, #255	; 0xff
 8006000:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 8006004:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8006008:	041b      	lsls	r3, r3, #16
 800600a:	461a      	mov	r2, r3
 800600c:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	431a      	orrs	r2, r3
 8006014:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8006018:	4313      	orrs	r3, r2
 800601a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800601e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006022:	4611      	mov	r1, r2
 8006024:	4618      	mov	r0, r3
 8006026:	f7fe fcb5 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 800602a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800602c:	461a      	mov	r2, r3
 800602e:	4629      	mov	r1, r5
 8006030:	4620      	mov	r0, r4
 8006032:	f000 fb56 	bl	80066e2 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    sendValButton.setPosition(16, 68, 158, 32);
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 800603e:	2320      	movs	r3, #32
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	239e      	movs	r3, #158	; 0x9e
 8006044:	2244      	movs	r2, #68	; 0x44
 8006046:	2110      	movs	r1, #16
 8006048:	f7fe fd1b 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoContainer.add(sendValButton);
 800604c:	1d3b      	adds	r3, r7, #4
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8006054:	1d3b      	adds	r3, r7, #4
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f00e fe80 	bl	8014d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    newValButton.setBoxWithBorderPosition(0, 0, 69, 47);
 8006064:	1d3b      	adds	r3, r7, #4
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 800606c:	232f      	movs	r3, #47	; 0x2f
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2345      	movs	r3, #69	; 0x45
 8006072:	2200      	movs	r2, #0
 8006074:	2100      	movs	r1, #0
 8006076:	f000 faaf 	bl	80065d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    newValButton.setBorderSize(5);
 800607a:	1d3b      	adds	r3, r7, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8006082:	2105      	movs	r1, #5
 8006084:	4618      	mov	r0, r3
 8006086:	f000 fac7 	bl	8006618 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    newValButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800608a:	1d3b      	adds	r3, r7, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8006092:	2300      	movs	r3, #0
 8006094:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
 8006098:	2366      	movs	r3, #102	; 0x66
 800609a:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
 800609e:	2399      	movs	r3, #153	; 0x99
 80060a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80060a4:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	461a      	mov	r2, r3
 80060ac:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	431a      	orrs	r2, r3
 80060b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80060be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80060c2:	4611      	mov	r1, r2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fe fc65 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 80060ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060cc:	461d      	mov	r5, r3
 80060ce:	2300      	movs	r3, #0
 80060d0:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
 80060d4:	2399      	movs	r3, #153	; 0x99
 80060d6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 80060da:	23cc      	movs	r3, #204	; 0xcc
 80060dc:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
 80060e0:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 80060e4:	041b      	lsls	r3, r3, #16
 80060e6:	461a      	mov	r2, r3
 80060e8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	431a      	orrs	r2, r3
 80060f0:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80060fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80060fe:	4611      	mov	r1, r2
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe fc47 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8006106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006108:	461e      	mov	r6, r3
 800610a:	2300      	movs	r3, #0
 800610c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006110:	2333      	movs	r3, #51	; 0x33
 8006112:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8006116:	2366      	movs	r3, #102	; 0x66
 8006118:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
 800611c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006120:	041b      	lsls	r3, r3, #16
 8006122:	461a      	mov	r2, r3
 8006124:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	431a      	orrs	r2, r3
 800612c:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 8006130:	4313      	orrs	r3, r2
 8006132:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006136:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800613a:	4611      	mov	r1, r2
 800613c:	4618      	mov	r0, r3
 800613e:	f7fe fc29 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 8006142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006144:	4698      	mov	r8, r3
 8006146:	2333      	movs	r3, #51	; 0x33
 8006148:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 800614c:	2366      	movs	r3, #102	; 0x66
 800614e:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 8006152:	2399      	movs	r3, #153	; 0x99
 8006154:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
 8006158:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800615c:	041b      	lsls	r3, r3, #16
 800615e:	461a      	mov	r2, r3
 8006160:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	431a      	orrs	r2, r3
 8006168:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800616c:	4313      	orrs	r3, r2
 800616e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006172:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006176:	4611      	mov	r1, r2
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe fc0b 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 800617e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	4643      	mov	r3, r8
 8006184:	4632      	mov	r2, r6
 8006186:	4629      	mov	r1, r5
 8006188:	4620      	mov	r0, r4
 800618a:	f000 fa57 	bl	800663c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    newValButton.setText(TypedText(T___SINGLEUSE_TVNT));
 800618e:	1d3b      	adds	r3, r7, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8006196:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800619a:	2104      	movs	r1, #4
 800619c:	4618      	mov	r0, r3
 800619e:	f7ff f89f 	bl	80052e0 <_ZN8touchgfx9TypedTextC1Et>
 80061a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80061a6:	4619      	mov	r1, r3
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fa64 	bl	8006676 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 80061ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fd ffb0 	bl	8004118 <_ZN8touchgfx9TypedTextD1Ev>
    newValButton.setTextPosition(0, 6, 69, 47);
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 80061c0:	232f      	movs	r3, #47	; 0x2f
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	2345      	movs	r3, #69	; 0x45
 80061c6:	2206      	movs	r2, #6
 80061c8:	2100      	movs	r1, #0
 80061ca:	f000 fa6a 	bl	80066a2 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    newValButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 80061ce:	1d3b      	adds	r3, r7, #4
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 80061d6:	23ff      	movs	r3, #255	; 0xff
 80061d8:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
 80061dc:	23ff      	movs	r3, #255	; 0xff
 80061de:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
 80061e2:	23ff      	movs	r3, #255	; 0xff
 80061e4:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80061e8:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	461a      	mov	r2, r3
 80061f0:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	431a      	orrs	r2, r3
 80061f8:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006202:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe fbc3 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 800620e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006210:	461d      	mov	r5, r3
 8006212:	23ff      	movs	r3, #255	; 0xff
 8006214:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
 8006218:	23ff      	movs	r3, #255	; 0xff
 800621a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800621e:	23ff      	movs	r3, #255	; 0xff
 8006220:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 8006224:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	461a      	mov	r2, r3
 800622c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	431a      	orrs	r2, r3
 8006234:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8006238:	4313      	orrs	r3, r2
 800623a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800623e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe fba5 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 800624a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	4629      	mov	r1, r5
 8006254:	4620      	mov	r0, r4
 8006256:	f000 fa44 	bl	80066e2 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    newValButton.setPosition(16, 12, 69, 47);
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 8006262:	232f      	movs	r3, #47	; 0x2f
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	2345      	movs	r3, #69	; 0x45
 8006268:	220c      	movs	r2, #12
 800626a:	2110      	movs	r1, #16
 800626c:	f7fe fc09 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoContainer.add(newValButton);
 8006270:	1d3b      	adds	r3, r7, #4
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8006278:	1d3b      	adds	r3, r7, #4
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8006280:	4619      	mov	r1, r3
 8006282:	4610      	mov	r0, r2
 8006284:	f00e fd6e 	bl	8014d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    sendValTextArea.setPosition(95, 26, 79, 19);
 8006288:	1d3b      	adds	r3, r7, #4
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f203 5014 	addw	r0, r3, #1300	; 0x514
 8006290:	2313      	movs	r3, #19
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	234f      	movs	r3, #79	; 0x4f
 8006296:	221a      	movs	r2, #26
 8006298:	215f      	movs	r1, #95	; 0x5f
 800629a:	f7fe fbf2 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    sendValTextArea.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800629e:	1d3b      	adds	r3, r7, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f203 5414 	addw	r4, r3, #1300	; 0x514
 80062a6:	2300      	movs	r3, #0
 80062a8:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
 80062b2:	2300      	movs	r3, #0
 80062b4:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
 80062b8:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 80062bc:	041b      	lsls	r3, r3, #16
 80062be:	461a      	mov	r2, r3
 80062c0:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	431a      	orrs	r2, r3
 80062c8:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80062d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fe fb5b 	bl	8004994 <_ZN8touchgfx9colortypeC1Em>
 80062de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	601a      	str	r2, [r3, #0]
        this->color = color;
 80062f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80062f4:	f107 020c 	add.w	r2, r7, #12
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80062fc:	bf00      	nop
    sendValTextArea.setLinespacing(0);
 80062fe:	1d3b      	adds	r3, r7, #4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8006306:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800630a:	2300      	movs	r3, #0
 800630c:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
        linespace = space;
 8006310:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006314:	f8b7 214a 	ldrh.w	r2, [r7, #330]	; 0x14a
 8006318:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800631a:	bf00      	nop
    sendValTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NA10));
 800631c:	1d3b      	adds	r3, r7, #4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f203 5414 	addw	r4, r3, #1300	; 0x514
 8006324:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006328:	2103      	movs	r1, #3
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe ffd8 	bl	80052e0 <_ZN8touchgfx9TypedTextC1Et>
 8006330:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006334:	4619      	mov	r1, r3
 8006336:	4620      	mov	r0, r4
 8006338:	f010 ff57 	bl	80171ea <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800633c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006340:	4618      	mov	r0, r3
 8006342:	f7fd fee9 	bl	8004118 <_ZN8touchgfx9TypedTextD1Ev>
    txInfoContainer.add(sendValTextArea);
 8006346:	1d3b      	adds	r3, r7, #4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 800634e:	1d3b      	adds	r3, r7, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f00e fd03 	bl	8014d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 800635e:	1d3b      	adds	r3, r7, #4
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3340      	adds	r3, #64	; 0x40
 8006368:	4619      	mov	r1, r3
 800636a:	4610      	mov	r0, r2
 800636c:	f7fe fd8a 	bl	8004e84 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(background);
 8006370:	1d3b      	adds	r3, r7, #4
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	1d3b      	adds	r3, r7, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	336c      	adds	r3, #108	; 0x6c
 800637a:	4619      	mov	r1, r3
 800637c:	4610      	mov	r0, r2
 800637e:	f7fe fd81 	bl	8004e84 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(txButton);
 8006382:	1d3b      	adds	r3, r7, #4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	1d3b      	adds	r3, r7, #4
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3398      	adds	r3, #152	; 0x98
 800638c:	4619      	mov	r1, r3
 800638e:	4610      	mov	r0, r2
 8006390:	f7fe fd78 	bl	8004e84 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rxButton);
 8006394:	1d3b      	adds	r3, r7, #4
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	1d3b      	adds	r3, r7, #4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063a0:	4619      	mov	r1, r3
 80063a2:	4610      	mov	r0, r2
 80063a4:	f7fe fd6e 	bl	8004e84 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollBackgroundBox);
 80063a8:	1d3b      	adds	r3, r7, #4
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	1d3b      	adds	r3, r7, #4
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	f7fe fd64 	bl	8004e84 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollableContainer);
 80063bc:	1d3b      	adds	r3, r7, #4
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	1d3b      	adds	r3, r7, #4
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80063c8:	4619      	mov	r1, r3
 80063ca:	4610      	mov	r0, r2
 80063cc:	f7fe fd5a 	bl	8004e84 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(txInfoContainer);
 80063d0:	1d3b      	adds	r3, r7, #4
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	1d3b      	adds	r3, r7, #4
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f7fe fd50 	bl	8004e84 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80063e4:	1d3b      	adds	r3, r7, #4
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80063ee:	46bd      	mov	sp, r7
 80063f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080063f4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]

}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
    if (&src == &txButton)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3398      	adds	r3, #152	; 0x98
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d10d      	bne.n	8006438 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x30>
    {
        //showTxInfo
        //When txButton clicked show txInfoContainer
        //Show txInfoContainer
        txInfoContainer.setVisible(true);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8006422:	2101      	movs	r1, #1
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe fc2b 	bl	8004c80 <_ZN8touchgfx8Drawable10setVisibleEb>
        txInfoContainer.invalidate();
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8006430:	4618      	mov	r0, r3
 8006432:	f013 fcb9 	bl	8019da8 <_ZNK8touchgfx8Drawable10invalidateEv>
        //When rxButton clicked hide txInfoContainer
        //Hide txInfoContainer
        txInfoContainer.setVisible(false);
        txInfoContainer.invalidate();
    }
}
 8006436:	e012      	b.n	800645e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x56>
    else if (&src == &rxButton)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d10c      	bne.n	800645e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x56>
        txInfoContainer.setVisible(false);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 800644a:	2100      	movs	r1, #0
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe fc17 	bl	8004c80 <_ZN8touchgfx8Drawable10setVisibleEb>
        txInfoContainer.invalidate();
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8006458:	4618      	mov	r0, r3
 800645a:	f013 fca5 	bl	8019da8 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4618      	mov	r0, r3
 8006474:	f013 ff1a 	bl	801a2ac <_ZN8touchgfx6ScreenC1Ev>
 8006478:	4a05      	ldr	r2, [pc, #20]	; (8006490 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	08029ab8 	.word	0x08029ab8

08006494 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	4a05      	ldr	r2, [pc, #20]	; (80064b4 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe fef9 	bl	800529c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	08029aec 	.word	0x08029aec

080064b8 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff ffe7 	bl	8006494 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 80064c6:	2134      	movs	r1, #52	; 0x34
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f021 f998 	bl	80277fe <_ZdlPvj>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	4a08      	ldr	r2, [pc, #32]	; (8006504 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3334      	adds	r3, #52	; 0x34
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fa22 	bl	8006934 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff ffce 	bl	8006494 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	08029a20 	.word	0x08029a20

08006508 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff ffe1 	bl	80064d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8006516:	2178      	movs	r1, #120	; 0x78
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f021 f970 	bl	80277fe <_ZdlPvj>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
 */
template <class T>
class TextButtonStyle : public T
{
public:
    TextButtonStyle()
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
        : T()
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4618      	mov	r0, r3
 8006534:	f000 f900 	bl	8006738 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8006538:	4a0e      	ldr	r2, [pc, #56]	; (8006574 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x4c>)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3378      	adds	r3, #120	; 0x78
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe fee2 	bl	800530c <_ZN8touchgfx8TextAreaC1Ev>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	33b4      	adds	r3, #180	; 0xb4
 800654c:	4618      	mov	r0, r3
 800654e:	f7fb ff35 	bl	80023bc <_ZN8touchgfx9colortypeC1Ev>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	33b8      	adds	r3, #184	; 0xb8
 8006556:	4618      	mov	r0, r3
 8006558:	f7fb ff30 	bl	80023bc <_ZN8touchgfx9colortypeC1Ev>
    {
        T::add(text);
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3378      	adds	r3, #120	; 0x78
 8006562:	4619      	mov	r1, r3
 8006564:	4610      	mov	r0, r2
 8006566:	f00e fbfd 	bl	8014d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	08029988 	.word	0x08029988

08006578 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	4a04      	ldr	r2, [pc, #16]	; (8006594 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	08029b84 	.word	0x08029b84

08006598 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4639      	mov	r1, r7
 80065a4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff ffe4 	bl	8006578 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 80065b0:	4a08      	ldr	r2, [pc, #32]	; (80065d4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	605a      	str	r2, [r3, #4]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3308      	adds	r3, #8
 80065c0:	463a      	mov	r2, r7
 80065c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065c6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	08029970 	.word	0x08029970

080065d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80065d8:	b590      	push	{r4, r7, lr}
 80065da:	b087      	sub	sp, #28
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	4608      	mov	r0, r1
 80065e2:	4611      	mov	r1, r2
 80065e4:	461a      	mov	r2, r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	817b      	strh	r3, [r7, #10]
 80065ea:	460b      	mov	r3, r1
 80065ec:	813b      	strh	r3, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80065f8:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80065fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006600:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8006604:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	4623      	mov	r3, r4
 800660c:	f7fe fa39 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	bd90      	pop	{r4, r7, pc}

08006618 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3334      	adds	r3, #52	; 0x34
 8006628:	78fa      	ldrb	r2, [r7, #3]
 800662a:	b292      	uxth	r2, r2
 800662c:	4611      	mov	r1, r2
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe fdd8 	bl	80051e4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3388      	adds	r3, #136	; 0x88
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	4798      	blx	r3
    }
 800666e:	bf00      	nop
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>:
    /**
     * Sets a text.
     *
     * @param  t A TypedText to process.
     */
    void setText(TypedText t)
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
    {
        text.setTypedText(t);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3378      	adds	r3, #120	; 0x78
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f010 fdaf 	bl	80171ea <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        text.setWidthHeight(*this);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3378      	adds	r3, #120	; 0x78
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	4611      	mov	r1, r2
 8006694:	4618      	mov	r0, r3
 8006696:	f7fe fac7 	bl	8004c28 <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>
    }
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width of the text.
     * @param  height The height of the text.
     */
    void setTextPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80066a2:	b590      	push	{r4, r7, lr}
 80066a4:	b087      	sub	sp, #28
 80066a6:	af02      	add	r7, sp, #8
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	4608      	mov	r0, r1
 80066ac:	4611      	mov	r1, r2
 80066ae:	461a      	mov	r2, r3
 80066b0:	4603      	mov	r3, r0
 80066b2:	817b      	strh	r3, [r7, #10]
 80066b4:	460b      	mov	r3, r1
 80066b6:	813b      	strh	r3, [r7, #8]
 80066b8:	4613      	mov	r3, r2
 80066ba:	80fb      	strh	r3, [r7, #6]
    {
        text.setPosition(x, y, width, height);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80066c2:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80066c6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80066ca:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80066ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	4623      	mov	r3, r4
 80066d6:	f7fe f9d4 	bl	8004a82 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd90      	pop	{r4, r7, pc}

080066e2 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>:
     * Sets text colors.
     *
     * @param  newColorReleased The new color released.
     * @param  newColorPressed  The new color pressed.
     */
    void setTextColors(colortype newColorReleased, colortype newColorPressed)
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
    {
        colorReleased = newColorReleased;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        colorPressed = newColorPressed;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        handlePressedUpdated();
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3388      	adds	r3, #136	; 0x88
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	4798      	blx	r3
    }
 800670a:	bf00      	nop
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fc7a 	bl	8005018 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8006724:	4a03      	ldr	r2, [pc, #12]	; (8006734 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	08029aec 	.word	0x08029aec

08006738 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle()
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4618      	mov	r0, r3
 8006744:	2334      	movs	r3, #52	; 0x34
 8006746:	461a      	mov	r2, r3
 8006748:	2100      	movs	r1, #0
 800674a:	f021 f913 	bl	8027974 <memset>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff ffdf 	bl	8006714 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 8006756:	4a17      	ldr	r2, [pc, #92]	; (80067b4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x7c>)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3334      	adds	r3, #52	; 0x34
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fd15 	bl	8005190 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3368      	adds	r3, #104	; 0x68
 800676a:	4618      	mov	r0, r3
 800676c:	f7fb fe26 	bl	80023bc <_ZN8touchgfx9colortypeC1Ev>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	336c      	adds	r3, #108	; 0x6c
 8006774:	4618      	mov	r0, r3
 8006776:	f7fb fe21 	bl	80023bc <_ZN8touchgfx9colortypeC1Ev>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3370      	adds	r3, #112	; 0x70
 800677e:	4618      	mov	r0, r3
 8006780:	f7fb fe1c 	bl	80023bc <_ZN8touchgfx9colortypeC1Ev>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3374      	adds	r3, #116	; 0x74
 8006788:	4618      	mov	r0, r3
 800678a:	f7fb fe17 	bl	80023bc <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3334      	adds	r3, #52	; 0x34
 8006792:	2200      	movs	r2, #0
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe f9cc 	bl	8004b34 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3334      	adds	r3, #52	; 0x34
 80067a2:	4619      	mov	r1, r3
 80067a4:	4610      	mov	r0, r2
 80067a6:	f00e fadd 	bl	8014d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	08029a20 	.word	0x08029a20

080067b8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
    }
 80067c0:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	08029b84 	.word	0x08029b84

080067d8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
    }
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ffe9 	bl	80067b8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80067e6:	2104      	movs	r1, #4
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f021 f808 	bl	80277fe <_ZdlPvj>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 80067f8:	b590      	push	{r4, r7, lr}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe fc3b 	bl	8005084 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	336c      	adds	r3, #108	; 0x6c
 8006818:	e001      	b.n	800681e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3368      	adds	r3, #104	; 0x68
 800681e:	6819      	ldr	r1, [r3, #0]
 8006820:	4620      	mov	r0, r4
 8006822:	f7fe fbb9 	bl	8004f98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fc28 	bl	8005084 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3374      	adds	r3, #116	; 0x74
 800683e:	e001      	b.n	8006844 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3370      	adds	r3, #112	; 0x70
 8006844:	6819      	ldr	r1, [r3, #0]
 8006846:	4620      	mov	r0, r4
 8006848:	f7fe fcbe 	bl	80051c8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe fc67 	bl	8005122 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	bd90      	pop	{r4, r7, pc}

0800685c <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    TextArea text;           ///< The text
    colortype colorReleased; ///< The color released
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fc09 	bl	8005084 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	33b8      	adds	r3, #184	; 0xb8
 800687c:	e001      	b.n	8006882 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	33b4      	adds	r3, #180	; 0xb4
 8006882:	60fc      	str	r4, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800688e:	bf00      	nop
        T::handlePressedUpdated();
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff ffb0 	bl	80067f8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 8006898:	bf00      	nop
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	bd90      	pop	{r4, r7, pc}

080068a0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	4a05      	ldr	r2, [pc, #20]	; (80068c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff ff81 	bl	80067b8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	08029970 	.word	0x08029970

080068c4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff ffe7 	bl	80068a0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80068d2:	2110      	movs	r1, #16
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f020 ff92 	bl	80277fe <_ZdlPvj>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
class TextButtonStyle : public T
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	4a08      	ldr	r2, [pc, #32]	; (8006910 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev+0x2c>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3378      	adds	r3, #120	; 0x78
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe fd52 	bl	80053a0 <_ZN8touchgfx8TextAreaD1Ev>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff fdea 	bl	80064d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	08029988 	.word	0x08029988

08006914 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ffe1 	bl	80068e4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8006922:	21bc      	movs	r1, #188	; 0xbc
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f020 ff6a 	bl	80277fe <_ZdlPvj>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	4a05      	ldr	r2, [pc, #20]	; (8006954 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe fc01 	bl	800514c <_ZN8touchgfx3BoxD1Ev>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	0802adc0 	.word	0x0802adc0

08006958 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff ffe7 	bl	8006934 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006966:	2134      	movs	r1, #52	; 0x34
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f020 ff48 	bl	80277fe <_ZdlPvj>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <_ZN8touchgfx19ScrollableContainerD1Ev>:
 * @see Container
 *
 * @note The ScrollableContainer will consume all DragEvents in the area covered by the
 *       container.
 */
class ScrollableContainer : public Container
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <_ZN8touchgfx19ScrollableContainerD1Ev+0x34>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3364      	adds	r3, #100	; 0x64
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe fbde 	bl	800514c <_ZN8touchgfx3BoxD1Ev>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3338      	adds	r3, #56	; 0x38
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fbd9 	bl	800514c <_ZN8touchgfx3BoxD1Ev>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe fb19 	bl	8004fd4 <_ZN8touchgfx9ContainerD1Ev>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	0802a1dc 	.word	0x0802a1dc

080069b0 <_ZN8touchgfx19ScrollableContainerD0Ev>:
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff ffdd 	bl	8006978 <_ZN8touchgfx19ScrollableContainerD1Ev>
 80069be:	21bc      	movs	r1, #188	; 0xbc
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f020 ff1c 	bl	80277fe <_ZdlPvj>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	4a05      	ldr	r2, [pc, #20]	; (80069f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe fcdd 	bl	80053a0 <_ZN8touchgfx8TextAreaD1Ev>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	0802ad18 	.word	0x0802ad18

080069f4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff ffe7 	bl	80069d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006a02:	2140      	movs	r1, #64	; 0x40
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f020 fefa 	bl	80277fe <_ZdlPvj>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	68d2      	ldr	r2, [r2, #12]
 8006a26:	1052      	asrs	r2, r2, #1
 8006a28:	1898      	adds	r0, r3, r2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d102      	bne.n	8006a3c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	e00a      	b.n	8006a52 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	68d2      	ldr	r2, [r2, #12]
 8006a44:	1052      	asrs	r2, r2, #1
 8006a46:	4413      	add	r3, r2
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6892      	ldr	r2, [r2, #8]
 8006a4e:	4413      	add	r3, r2
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	4798      	blx	r3
    }
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d010      	beq.n	8006a90 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d107      	bne.n	8006a86 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8006a86:	2300      	movs	r3, #0
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d001      	beq.n	8006a90 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8006a90:	2300      	movs	r3, #0
    }
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 8006a9e:	b590      	push	{r4, r7, lr}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
    {
        text.setAlpha(T::getAlpha());
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe faf5 	bl	800509e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7fe fc61 	bl	8005380 <_ZN8touchgfx8TextArea8setAlphaEh>
        T::handleAlphaUpdated();
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 f804 	bl	8006ace <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>
    }
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd90      	pop	{r4, r7, pc}

08006ace <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 8006ace:	b590      	push	{r4, r7, lr}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe fadd 	bl	800509e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f7fe fa63 	bl	8004fb4 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe fb20 	bl	8005136 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd90      	pop	{r4, r7, pc}
	...

08006b00 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 0, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	4801      	ldr	r0, [pc, #4]	; (8006b0c <__tcf_0+0xc>)
 8006b06:	f7fd fae5 	bl	80040d4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	24001598 	.word	0x24001598

08006b10 <_Z23getFont_verdana_10_4bppv>:
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08c      	sub	sp, #48	; 0x30
 8006b14:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 0, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006b16:	4b1f      	ldr	r3, [pc, #124]	; (8006b94 <_Z23getFont_verdana_10_4bppv+0x84>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	f3bf 8f5b 	dmb	ish
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bf0c      	ite	eq
 8006b28:	2301      	moveq	r3, #1
 8006b2a:	2300      	movne	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d02c      	beq.n	8006b8c <_Z23getFont_verdana_10_4bppv+0x7c>
 8006b32:	4818      	ldr	r0, [pc, #96]	; (8006b94 <_Z23getFont_verdana_10_4bppv+0x84>)
 8006b34:	f020 fe65 	bl	8027802 <__cxa_guard_acquire>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bf14      	ite	ne
 8006b3e:	2301      	movne	r3, #1
 8006b40:	2300      	moveq	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d021      	beq.n	8006b8c <_Z23getFont_verdana_10_4bppv+0x7c>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b50:	2300      	movs	r3, #0
 8006b52:	9308      	str	r3, [sp, #32]
 8006b54:	233f      	movs	r3, #63	; 0x3f
 8006b56:	9307      	str	r3, [sp, #28]
 8006b58:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <_Z23getFont_verdana_10_4bppv+0x88>)
 8006b5a:	9306      	str	r3, [sp, #24]
 8006b5c:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <_Z23getFont_verdana_10_4bppv+0x8c>)
 8006b5e:	9305      	str	r3, [sp, #20]
 8006b60:	2300      	movs	r3, #0
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	2300      	movs	r3, #0
 8006b66:	9303      	str	r3, [sp, #12]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9302      	str	r3, [sp, #8]
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	2300      	movs	r3, #0
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	230a      	movs	r3, #10
 8006b76:	2201      	movs	r2, #1
 8006b78:	4909      	ldr	r1, [pc, #36]	; (8006ba0 <_Z23getFont_verdana_10_4bppv+0x90>)
 8006b7a:	480a      	ldr	r0, [pc, #40]	; (8006ba4 <_Z23getFont_verdana_10_4bppv+0x94>)
 8006b7c:	f7fd fe70 	bl	8004860 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006b80:	4804      	ldr	r0, [pc, #16]	; (8006b94 <_Z23getFont_verdana_10_4bppv+0x84>)
 8006b82:	f020 fe4a 	bl	802781a <__cxa_guard_release>
 8006b86:	4808      	ldr	r0, [pc, #32]	; (8006ba8 <_Z23getFont_verdana_10_4bppv+0x98>)
 8006b88:	f020 fe86 	bl	8027898 <atexit>
    return verdana_10_4bpp;
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	240015c0 	.word	0x240015c0
 8006b98:	0802c6d0 	.word	0x0802c6d0
 8006b9c:	0802c714 	.word	0x0802c714
 8006ba0:	900007ac 	.word	0x900007ac
 8006ba4:	24001598 	.word	0x24001598
 8006ba8:	08006b01 	.word	0x08006b01

08006bac <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_14_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_14_4bpp();

touchgfx::GeneratedFont& getFont_verdana_14_4bpp()
{
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 41, 14, 3, 4, 0, 1, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	4801      	ldr	r0, [pc, #4]	; (8006bb8 <__tcf_0+0xc>)
 8006bb2:	f7fd fa8f 	bl	80040d4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	240015c4 	.word	0x240015c4

08006bbc <_Z23getFont_verdana_14_4bppv>:
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08c      	sub	sp, #48	; 0x30
 8006bc0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 41, 14, 3, 4, 0, 1, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 8006bc2:	4b1f      	ldr	r3, [pc, #124]	; (8006c40 <_Z23getFont_verdana_14_4bppv+0x84>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f3bf 8f5b 	dmb	ish
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bf0c      	ite	eq
 8006bd4:	2301      	moveq	r3, #1
 8006bd6:	2300      	movne	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d02c      	beq.n	8006c38 <_Z23getFont_verdana_14_4bppv+0x7c>
 8006bde:	4818      	ldr	r0, [pc, #96]	; (8006c40 <_Z23getFont_verdana_14_4bppv+0x84>)
 8006be0:	f020 fe0f 	bl	8027802 <__cxa_guard_acquire>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bf14      	ite	ne
 8006bea:	2301      	movne	r3, #1
 8006bec:	2300      	moveq	r3, #0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d021      	beq.n	8006c38 <_Z23getFont_verdana_14_4bppv+0x7c>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9308      	str	r3, [sp, #32]
 8006c00:	233f      	movs	r3, #63	; 0x3f
 8006c02:	9307      	str	r3, [sp, #28]
 8006c04:	4b0f      	ldr	r3, [pc, #60]	; (8006c44 <_Z23getFont_verdana_14_4bppv+0x88>)
 8006c06:	9306      	str	r3, [sp, #24]
 8006c08:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <_Z23getFont_verdana_14_4bppv+0x8c>)
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	2301      	movs	r3, #1
 8006c12:	9303      	str	r3, [sp, #12]
 8006c14:	2300      	movs	r3, #0
 8006c16:	9302      	str	r3, [sp, #8]
 8006c18:	2304      	movs	r3, #4
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	230e      	movs	r3, #14
 8006c22:	2229      	movs	r2, #41	; 0x29
 8006c24:	4909      	ldr	r1, [pc, #36]	; (8006c4c <_Z23getFont_verdana_14_4bppv+0x90>)
 8006c26:	480a      	ldr	r0, [pc, #40]	; (8006c50 <_Z23getFont_verdana_14_4bppv+0x94>)
 8006c28:	f7fd fe1a 	bl	8004860 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006c2c:	4804      	ldr	r0, [pc, #16]	; (8006c40 <_Z23getFont_verdana_14_4bppv+0x84>)
 8006c2e:	f020 fdf4 	bl	802781a <__cxa_guard_release>
 8006c32:	4808      	ldr	r0, [pc, #32]	; (8006c54 <_Z23getFont_verdana_14_4bppv+0x98>)
 8006c34:	f020 fe30 	bl	8027898 <atexit>
    return verdana_14_4bpp;
 8006c38:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <_Z23getFont_verdana_14_4bppv+0x94>)
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	240015ec 	.word	0x240015ec
 8006c44:	0802c6d4 	.word	0x0802c6d4
 8006c48:	0802c718 	.word	0x0802c718
 8006c4c:	900007bc 	.word	0x900007bc
 8006c50:	240015c4 	.word	0x240015c4
 8006c54:	08006bad 	.word	0x08006bad

08006c58 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 20, 0, 4, 0, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	4801      	ldr	r0, [pc, #4]	; (8006c64 <__tcf_0+0xc>)
 8006c5e:	f7fd fa39 	bl	80040d4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	240015f0 	.word	0x240015f0

08006c68 <_Z23getFont_verdana_20_4bppv>:
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08c      	sub	sp, #48	; 0x30
 8006c6c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 20, 0, 4, 0, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8006c6e:	4b1f      	ldr	r3, [pc, #124]	; (8006cec <_Z23getFont_verdana_20_4bppv+0x84>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	f3bf 8f5b 	dmb	ish
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bf0c      	ite	eq
 8006c80:	2301      	moveq	r3, #1
 8006c82:	2300      	movne	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d02c      	beq.n	8006ce4 <_Z23getFont_verdana_20_4bppv+0x7c>
 8006c8a:	4818      	ldr	r0, [pc, #96]	; (8006cec <_Z23getFont_verdana_20_4bppv+0x84>)
 8006c8c:	f020 fdb9 	bl	8027802 <__cxa_guard_acquire>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bf14      	ite	ne
 8006c96:	2301      	movne	r3, #1
 8006c98:	2300      	moveq	r3, #0
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d021      	beq.n	8006ce4 <_Z23getFont_verdana_20_4bppv+0x7c>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9308      	str	r3, [sp, #32]
 8006cac:	233f      	movs	r3, #63	; 0x3f
 8006cae:	9307      	str	r3, [sp, #28]
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <_Z23getFont_verdana_20_4bppv+0x88>)
 8006cb2:	9306      	str	r3, [sp, #24]
 8006cb4:	4b0f      	ldr	r3, [pc, #60]	; (8006cf4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8006cb6:	9305      	str	r3, [sp, #20]
 8006cb8:	2301      	movs	r3, #1
 8006cba:	9304      	str	r3, [sp, #16]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	9303      	str	r3, [sp, #12]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	9302      	str	r3, [sp, #8]
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	2314      	movs	r3, #20
 8006cce:	2204      	movs	r2, #4
 8006cd0:	4909      	ldr	r1, [pc, #36]	; (8006cf8 <_Z23getFont_verdana_20_4bppv+0x90>)
 8006cd2:	480a      	ldr	r0, [pc, #40]	; (8006cfc <_Z23getFont_verdana_20_4bppv+0x94>)
 8006cd4:	f7fd fdc4 	bl	8004860 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006cd8:	4804      	ldr	r0, [pc, #16]	; (8006cec <_Z23getFont_verdana_20_4bppv+0x84>)
 8006cda:	f020 fd9e 	bl	802781a <__cxa_guard_release>
 8006cde:	4808      	ldr	r0, [pc, #32]	; (8006d00 <_Z23getFont_verdana_20_4bppv+0x98>)
 8006ce0:	f020 fdda 	bl	8027898 <atexit>
    return verdana_20_4bpp;
 8006ce4:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	24001618 	.word	0x24001618
 8006cf0:	0802c70c 	.word	0x0802c70c
 8006cf4:	0802c71c 	.word	0x0802c71c
 8006cf8:	900009fc 	.word	0x900009fc
 8006cfc:	240015f0 	.word	0x240015f0
 8006d00:	08006c59 	.word	0x08006c59

08006d04 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 0, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	4801      	ldr	r0, [pc, #4]	; (8006d10 <__tcf_0+0xc>)
 8006d0a:	f7fd f9e3 	bl	80040d4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	2400161c 	.word	0x2400161c

08006d14 <_Z23getFont_verdana_40_4bppv>:
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08c      	sub	sp, #48	; 0x30
 8006d18:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 0, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006d1a:	4b1f      	ldr	r3, [pc, #124]	; (8006d98 <_Z23getFont_verdana_40_4bppv+0x84>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	f3bf 8f5b 	dmb	ish
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bf0c      	ite	eq
 8006d2c:	2301      	moveq	r3, #1
 8006d2e:	2300      	movne	r3, #0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d02c      	beq.n	8006d90 <_Z23getFont_verdana_40_4bppv+0x7c>
 8006d36:	4818      	ldr	r0, [pc, #96]	; (8006d98 <_Z23getFont_verdana_40_4bppv+0x84>)
 8006d38:	f020 fd63 	bl	8027802 <__cxa_guard_acquire>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	bf14      	ite	ne
 8006d42:	2301      	movne	r3, #1
 8006d44:	2300      	moveq	r3, #0
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d021      	beq.n	8006d90 <_Z23getFont_verdana_40_4bppv+0x7c>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d50:	2300      	movs	r3, #0
 8006d52:	9309      	str	r3, [sp, #36]	; 0x24
 8006d54:	2300      	movs	r3, #0
 8006d56:	9308      	str	r3, [sp, #32]
 8006d58:	233f      	movs	r3, #63	; 0x3f
 8006d5a:	9307      	str	r3, [sp, #28]
 8006d5c:	4b0f      	ldr	r3, [pc, #60]	; (8006d9c <_Z23getFont_verdana_40_4bppv+0x88>)
 8006d5e:	9306      	str	r3, [sp, #24]
 8006d60:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8006d62:	9305      	str	r3, [sp, #20]
 8006d64:	2300      	movs	r3, #0
 8006d66:	9304      	str	r3, [sp, #16]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9302      	str	r3, [sp, #8]
 8006d70:	2304      	movs	r3, #4
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	2300      	movs	r3, #0
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	2328      	movs	r3, #40	; 0x28
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4909      	ldr	r1, [pc, #36]	; (8006da4 <_Z23getFont_verdana_40_4bppv+0x90>)
 8006d7e:	480a      	ldr	r0, [pc, #40]	; (8006da8 <_Z23getFont_verdana_40_4bppv+0x94>)
 8006d80:	f7fd fd6e 	bl	8004860 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006d84:	4804      	ldr	r0, [pc, #16]	; (8006d98 <_Z23getFont_verdana_40_4bppv+0x84>)
 8006d86:	f020 fd48 	bl	802781a <__cxa_guard_release>
 8006d8a:	4808      	ldr	r0, [pc, #32]	; (8006dac <_Z23getFont_verdana_40_4bppv+0x98>)
 8006d8c:	f020 fd84 	bl	8027898 <atexit>
    return verdana_40_4bpp;
 8006d90:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	24001644 	.word	0x24001644
 8006d9c:	0802c710 	.word	0x0802c710
 8006da0:	0802c720 	.word	0x0802c720
 8006da4:	90000a34 	.word	0x90000a34
 8006da8:	2400161c 	.word	0x2400161c
 8006dac:	08006d05 	.word	0x08006d05

08006db0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	460b      	mov	r3, r1
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8006dbe:	2300      	movs	r3, #0
    }
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8006dd4:	2300      	movs	r3, #0
    }
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8006dea:	2300      	movs	r3, #0
    }
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8006e06:	4a07      	ldr	r2, [pc, #28]	; (8006e24 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6013      	str	r3, [r2, #0]
        fonts = f;
 8006e0c:	4a06      	ldr	r2, [pc, #24]	; (8006e28 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8006e12:	4a06      	ldr	r2, [pc, #24]	; (8006e2c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8006e14:	88fb      	ldrh	r3, [r7, #6]
 8006e16:	8013      	strh	r3, [r2, #0]
    }
 8006e18:	bf00      	nop
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	2400af3c 	.word	0x2400af3c
 8006e28:	2400af44 	.word	0x2400af44
 8006e2c:	2400af40 	.word	0x2400af40

08006e30 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006e30:	b40e      	push	{r1, r2, r3}
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b085      	sub	sp, #20
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8006e3a:	f107 0320 	add.w	r3, r7, #32
 8006e3e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	69fa      	ldr	r2, [r7, #28]
 8006e44:	2100      	movs	r1, #0
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f012 fe8c 	bl	8019b64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8006e50:	89fb      	ldrh	r3, [r7, #14]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e5c:	b003      	add	sp, #12
 8006e5e:	4770      	bx	lr

08006e60 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006e60:	b40c      	push	{r2, r3}
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8006e6e:	f107 031c 	add.w	r3, r7, #28
 8006e72:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8006e74:	78f9      	ldrb	r1, [r7, #3]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f012 fe72 	bl	8019b64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8006e80:	4603      	mov	r3, r0
 8006e82:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8006e84:	89fb      	ldrh	r3, [r7, #14]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e90:	b002      	add	sp, #8
 8006e92:	4770      	bx	lr

08006e94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d016      	beq.n	8006ed6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3322      	adds	r3, #34	; 0x22
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	8adb      	ldrh	r3, [r3, #22]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d105      	bne.n	8006ec2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8006eb6:	4b43      	ldr	r3, [pc, #268]	; (8006fc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8006eb8:	4a43      	ldr	r2, [pc, #268]	; (8006fc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8006eba:	21c0      	movs	r1, #192	; 0xc0
 8006ebc:	4843      	ldr	r0, [pc, #268]	; (8006fcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006ebe:	f020 fccd 	bl	802785c <__assert_func>
            return buffer[pos];
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	8a9b      	ldrh	r3, [r3, #20]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e000      	b.n	8006ed8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d06a      	beq.n	8006fb2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f014 f933 	bl	801b148 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3322      	adds	r3, #34	; 0x22
 8006ee6:	623b      	str	r3, [r7, #32]
 8006ee8:	2301      	movs	r3, #1
 8006eea:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	8adb      	ldrh	r3, [r3, #22]
 8006ef0:	8bfa      	ldrh	r2, [r7, #30]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d305      	bcc.n	8006f02 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8006ef6:	4b36      	ldr	r3, [pc, #216]	; (8006fd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8006ef8:	4a36      	ldr	r2, [pc, #216]	; (8006fd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8006efa:	21c5      	movs	r1, #197	; 0xc5
 8006efc:	4833      	ldr	r0, [pc, #204]	; (8006fcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006efe:	f020 fcad 	bl	802785c <__assert_func>
            const uint16_t index = pos + offset;
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	8a9a      	ldrh	r2, [r3, #20]
 8006f06:	8bfb      	ldrh	r3, [r7, #30]
 8006f08:	4413      	add	r3, r2
 8006f0a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8006f0c:	8bbb      	ldrh	r3, [r7, #28]
 8006f0e:	2b09      	cmp	r3, #9
 8006f10:	d801      	bhi.n	8006f16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8006f12:	8bbb      	ldrh	r3, [r7, #28]
 8006f14:	e001      	b.n	8006f1a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8006f16:	8bbb      	ldrh	r3, [r7, #28]
 8006f18:	3b0a      	subs	r3, #10
 8006f1a:	6a3a      	ldr	r2, [r7, #32]
 8006f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f20:	f640 123f 	movw	r2, #2367	; 0x93f
 8006f24:	4293      	cmp	r3, r2
 8006f26:	bf0c      	ite	eq
 8006f28:	2301      	moveq	r3, #1
 8006f2a:	2300      	movne	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d03f      	beq.n	8006fb2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3322      	adds	r3, #34	; 0x22
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	3222      	adds	r2, #34	; 0x22
 8006f3a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	8ad2      	ldrh	r2, [r2, #22]
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	d105      	bne.n	8006f50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8006f44:	4b1f      	ldr	r3, [pc, #124]	; (8006fc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8006f46:	4a20      	ldr	r2, [pc, #128]	; (8006fc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8006f48:	21c0      	movs	r1, #192	; 0xc0
 8006f4a:	4820      	ldr	r0, [pc, #128]	; (8006fcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006f4c:	f020 fc86 	bl	802785c <__assert_func>
            return buffer[pos];
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	8a92      	ldrh	r2, [r2, #20]
 8006f54:	4611      	mov	r1, r2
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	8adb      	ldrh	r3, [r3, #22]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d806      	bhi.n	8006f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8006f6a:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8006f6c:	4a1b      	ldr	r2, [pc, #108]	; (8006fdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8006f6e:	f240 110d 	movw	r1, #269	; 0x10d
 8006f72:	4816      	ldr	r0, [pc, #88]	; (8006fcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006f74:	f020 fc72 	bl	802785c <__assert_func>
            const uint16_t index = pos + 1;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	8a9b      	ldrh	r3, [r3, #20]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8006f80:	89bb      	ldrh	r3, [r7, #12]
 8006f82:	2b09      	cmp	r3, #9
 8006f84:	d801      	bhi.n	8006f8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8006f86:	89bb      	ldrh	r3, [r7, #12]
 8006f88:	e000      	b.n	8006f8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	89f9      	ldrh	r1, [r7, #14]
 8006f90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8006f94:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3322      	adds	r3, #34	; 0x22
 8006f9a:	61bb      	str	r3, [r7, #24]
 8006f9c:	f640 133f 	movw	r3, #2367	; 0x93f
 8006fa0:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	8a9b      	ldrh	r3, [r3, #20]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	8afa      	ldrh	r2, [r7, #22]
 8006fac:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8006fb0:	bf00      	nop
        }
    }
    return getNextChar();
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f013 ffac 	bl	801af10 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006fb8:	4603      	mov	r3, r0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3728      	adds	r7, #40	; 0x28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	080290b8 	.word	0x080290b8
 8006fc8:	080290c4 	.word	0x080290c4
 8006fcc:	08029170 	.word	0x08029170
 8006fd0:	080291c8 	.word	0x080291c8
 8006fd4:	080291d8 	.word	0x080291d8
 8006fd8:	080292ac 	.word	0x080292ac
 8006fdc:	080292b8 	.word	0x080292b8

08006fe0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f013 ff49 	bl	801ae80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b088      	sub	sp, #32
 8006ffa:	af02      	add	r7, sp, #8
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	1d38      	adds	r0, r7, #4
 8007000:	e880 0006 	stmia.w	r0, {r1, r2}
 8007004:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8007006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800700a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800700c:	1d39      	adds	r1, r7, #4
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	9301      	str	r3, [sp, #4]
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f011 fac0 	bl	80185a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8007020:	bf00      	nop
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8007028:	b590      	push	{r4, r7, lr}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8007036:	88fb      	ldrh	r3, [r7, #6]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d127      	bne.n	800708c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	4a1e      	ldr	r2, [pc, #120]	; (80070b8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8007040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d016      	beq.n	8007076 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	4a1b      	ldr	r2, [pc, #108]	; (80070b8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800704c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007050:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	4413      	add	r3, r2
 800705a:	4a18      	ldr	r2, [pc, #96]	; (80070bc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800705c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	4413      	add	r3, r2
 8007066:	4a16      	ldr	r2, [pc, #88]	; (80070c0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8007068:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	4413      	add	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	e00a      	b.n	800708c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8007076:	4b11      	ldr	r3, [pc, #68]	; (80070bc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8007078:	4a12      	ldr	r2, [pc, #72]	; (80070c4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800707a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800707c:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800707e:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8007080:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	4a11      	ldr	r2, [pc, #68]	; (80070cc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8007086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800708a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00d      	beq.n	80070ae <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8007092:	4a0f      	ldr	r2, [pc, #60]	; (80070d0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8007094:	88fb      	ldrh	r3, [r7, #6]
 8007096:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8007098:	f000 f83e 	bl	8007118 <_ZN17TypedTextDatabase8getFontsEv>
 800709c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800709e:	f000 f833 	bl	8007108 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80070a2:	4603      	mov	r3, r0
 80070a4:	461a      	mov	r2, r3
 80070a6:	4621      	mov	r1, r4
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f7ff fea5 	bl	8006df8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}
 80070b6:	bf00      	nop
 80070b8:	24001648 	.word	0x24001648
 80070bc:	24001650 	.word	0x24001650
 80070c0:	24001654 	.word	0x24001654
 80070c4:	90000a5c 	.word	0x90000a5c
 80070c8:	90000a44 	.word	0x90000a44
 80070cc:	90000f54 	.word	0x90000f54
 80070d0:	2400164c 	.word	0x2400164c

080070d4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4b07      	ldr	r3, [pc, #28]	; (8007104 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80070e6:	6819      	ldr	r1, [r3, #0]
 80070e8:	887b      	ldrh	r3, [r7, #2]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	4413      	add	r3, r2
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	24001650 	.word	0x24001650
 8007104:	24001654 	.word	0x24001654

08007108 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800710c:	2306      	movs	r3, #6
}
 800710e:	4618      	mov	r0, r3
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800711e:	4618      	mov	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	24001658 	.word	0x24001658

0800712c <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_14_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d118      	bne.n	800716e <_Z41__static_initialization_and_destruction_0ii+0x42>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007142:	4293      	cmp	r3, r2
 8007144:	d113      	bne.n	800716e <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 8007146:	f7ff fd8f 	bl	8006c68 <_Z23getFont_verdana_20_4bppv>
 800714a:	4603      	mov	r3, r0
};
 800714c:	4a0a      	ldr	r2, [pc, #40]	; (8007178 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800714e:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8007150:	f7ff fde0 	bl	8006d14 <_Z23getFont_verdana_40_4bppv>
 8007154:	4603      	mov	r3, r0
};
 8007156:	4a08      	ldr	r2, [pc, #32]	; (8007178 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007158:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 800715a:	f7ff fcd9 	bl	8006b10 <_Z23getFont_verdana_10_4bppv>
 800715e:	4603      	mov	r3, r0
};
 8007160:	4a05      	ldr	r2, [pc, #20]	; (8007178 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007162:	6093      	str	r3, [r2, #8]
    &(getFont_verdana_14_4bpp())
 8007164:	f7ff fd2a 	bl	8006bbc <_Z23getFont_verdana_14_4bppv>
 8007168:	4603      	mov	r3, r0
};
 800716a:	4a03      	ldr	r2, [pc, #12]	; (8007178 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800716c:	60d3      	str	r3, [r2, #12]
} // namespace TypedTextDatabase
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	24001658 	.word	0x24001658

0800717c <_GLOBAL__sub_I_touchgfx_fonts>:
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
 8007180:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007184:	2001      	movs	r0, #1
 8007186:	f7ff ffd1 	bl	800712c <_Z41__static_initialization_and_destruction_0ii>
 800718a:	bd80      	pop	{r7, pc}

0800718c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fd f8be 	bl	8004320 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80071a4:	4a03      	ldr	r2, [pc, #12]	; (80071b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	601a      	str	r2, [r3, #0]
{

}
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	0802964c 	.word	0x0802964c

080071b8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]
{

}
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <_ZN5Model4tickEv>:

void Model::tick()
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]

}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
    {
    }
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
    {
    }
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
    {
 8007218:	4a04      	ldr	r2, [pc, #16]	; (800722c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	601a      	str	r2, [r3, #0]
    }
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	08029d24 	.word	0x08029d24

08007230 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
    }
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff ffe9 	bl	8007210 <_ZN8touchgfx9PresenterD1Ev>
 800723e:	2104      	movs	r1, #4
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f020 fadc 	bl	80277fe <_ZdlPvj>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
    {
 8007258:	4a04      	ldr	r2, [pc, #16]	; (800726c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
    }
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	08029d24 	.word	0x08029d24

08007270 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	4a06      	ldr	r2, [pc, #24]	; (8007294 <_ZN13ModelListenerC1Ev+0x24>)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	605a      	str	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4618      	mov	r0, r3
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	08029d14 	.word	0x08029d14

08007298 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	4a04      	ldr	r2, [pc, #16]	; (80072b4 <_ZN13ModelListenerD1Ev+0x1c>)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	08029d14 	.word	0x08029d14

080072b8 <_ZN13ModelListenerD0Ev>:
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff ffe9 	bl	8007298 <_ZN13ModelListenerD1Ev>
 80072c6:	2108      	movs	r1, #8
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f020 fa98 	bl	80277fe <_ZdlPvj>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	4a09      	ldr	r2, [pc, #36]	; (8007308 <_ZN16Screen1PresenterD1Ev+0x30>)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	4a09      	ldr	r2, [pc, #36]	; (800730c <_ZN16Screen1PresenterD1Ev+0x34>)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	605a      	str	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff ffd1 	bl	8007298 <_ZN13ModelListenerD1Ev>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff ff89 	bl	8007210 <_ZN8touchgfx9PresenterD1Ev>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	08029cec 	.word	0x08029cec
 800730c:	08029d04 	.word	0x08029d04

08007310 <_ZThn4_N16Screen1PresenterD1Ev>:
 8007310:	f1a0 0004 	sub.w	r0, r0, #4
 8007314:	e7e0      	b.n	80072d8 <_ZN16Screen1PresenterD1Ev>
 8007316:	bf00      	nop

08007318 <_ZN16Screen1PresenterD0Ev>:
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ffd9 	bl	80072d8 <_ZN16Screen1PresenterD1Ev>
 8007326:	2110      	movs	r1, #16
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f020 fa68 	bl	80277fe <_ZdlPvj>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <_ZThn4_N16Screen1PresenterD0Ev>:
 8007338:	f1a0 0004 	sub.w	r0, r0, #4
 800733c:	e7ec      	b.n	8007318 <_ZN16Screen1PresenterD0Ev>
	...

08007340 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
    : view(v)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff ff7f 	bl	8007250 <_ZN8touchgfx9PresenterC1Ev>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3304      	adds	r3, #4
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff ff8a 	bl	8007270 <_ZN13ModelListenerC1Ev>
 800735c:	4a06      	ldr	r2, [pc, #24]	; (8007378 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	4a06      	ldr	r2, [pc, #24]	; (800737c <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	605a      	str	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	60da      	str	r2, [r3, #12]
{

}
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	08029cec 	.word	0x08029cec
 800737c:	08029d04 	.word	0x08029d04

08007380 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]

}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]

}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	4a05      	ldr	r2, [pc, #20]	; (80073c8 <_ZN11Screen1ViewD1Ev+0x20>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe f851 	bl	8005460 <_ZN15Screen1ViewBaseD1Ev>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	08029d3c 	.word	0x08029d3c

080073cc <_ZN11Screen1ViewD0Ev>:
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff ffe7 	bl	80073a8 <_ZN11Screen1ViewD1Ev>
 80073da:	f240 5164 	movw	r1, #1380	; 0x564
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f020 fa0d 	bl	80277fe <_ZdlPvj>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
	...

080073f0 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe f8a0 	bl	8005540 <_ZN15Screen1ViewBaseC1Ev>
 8007400:	4a03      	ldr	r2, [pc, #12]	; (8007410 <_ZN11Screen1ViewC1Ev+0x20>)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
{

}
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	08029d3c 	.word	0x08029d3c

08007414 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe ffe8 	bl	80063f4 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4618      	mov	r0, r3
 8007438:	f7fd fd04 	bl	8004e44 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <__NVIC_SetPriority>:
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007454:	2b00      	cmp	r3, #0
 8007456:	db0a      	blt.n	800746e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	b2da      	uxtb	r2, r3
 800745c:	490c      	ldr	r1, [pc, #48]	; (8007490 <__NVIC_SetPriority+0x4c>)
 800745e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007462:	0112      	lsls	r2, r2, #4
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	440b      	add	r3, r1
 8007468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800746c:	e00a      	b.n	8007484 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	b2da      	uxtb	r2, r3
 8007472:	4908      	ldr	r1, [pc, #32]	; (8007494 <__NVIC_SetPriority+0x50>)
 8007474:	88fb      	ldrh	r3, [r7, #6]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	3b04      	subs	r3, #4
 800747c:	0112      	lsls	r2, r2, #4
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	440b      	add	r3, r1
 8007482:	761a      	strb	r2, [r3, #24]
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	e000e100 	.word	0xe000e100
 8007494:	e000ed00 	.word	0xe000ed00

08007498 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <SysTick_Handler+0x1c>)
 800749e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80074a0:	f002 fea6 	bl	800a1f0 <xTaskGetSchedulerState>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d001      	beq.n	80074ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80074aa:	f000 ffe5 	bl	8008478 <xPortSysTickHandler>
  }
}
 80074ae:	bf00      	nop
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	e000e010 	.word	0xe000e010

080074b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80074bc:	2100      	movs	r1, #0
 80074be:	f06f 0004 	mvn.w	r0, #4
 80074c2:	f7ff ffbf 	bl	8007444 <__NVIC_SetPriority>
#endif
}
 80074c6:	bf00      	nop
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d2:	f3ef 8305 	mrs	r3, IPSR
 80074d6:	603b      	str	r3, [r7, #0]
  return(result);
 80074d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80074de:	f06f 0305 	mvn.w	r3, #5
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	e00c      	b.n	8007500 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074e6:	4b0a      	ldr	r3, [pc, #40]	; (8007510 <osKernelInitialize+0x44>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d105      	bne.n	80074fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80074ee:	4b08      	ldr	r3, [pc, #32]	; (8007510 <osKernelInitialize+0x44>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	607b      	str	r3, [r7, #4]
 80074f8:	e002      	b.n	8007500 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80074fa:	f04f 33ff 	mov.w	r3, #4294967295
 80074fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007500:	687b      	ldr	r3, [r7, #4]
}
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	24001668 	.word	0x24001668

08007514 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800751a:	f3ef 8305 	mrs	r3, IPSR
 800751e:	603b      	str	r3, [r7, #0]
  return(result);
 8007520:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007526:	f06f 0305 	mvn.w	r3, #5
 800752a:	607b      	str	r3, [r7, #4]
 800752c:	e010      	b.n	8007550 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800752e:	4b0b      	ldr	r3, [pc, #44]	; (800755c <osKernelStart+0x48>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d109      	bne.n	800754a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007536:	f7ff ffbf 	bl	80074b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800753a:	4b08      	ldr	r3, [pc, #32]	; (800755c <osKernelStart+0x48>)
 800753c:	2202      	movs	r2, #2
 800753e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007540:	f002 fa0e 	bl	8009960 <vTaskStartScheduler>
      stat = osOK;
 8007544:	2300      	movs	r3, #0
 8007546:	607b      	str	r3, [r7, #4]
 8007548:	e002      	b.n	8007550 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800754a:	f04f 33ff 	mov.w	r3, #4294967295
 800754e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007550:	687b      	ldr	r3, [r7, #4]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	24001668 	.word	0x24001668

08007560 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b08e      	sub	sp, #56	; 0x38
 8007564:	af04      	add	r7, sp, #16
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800756c:	2300      	movs	r3, #0
 800756e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007570:	f3ef 8305 	mrs	r3, IPSR
 8007574:	617b      	str	r3, [r7, #20]
  return(result);
 8007576:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007578:	2b00      	cmp	r3, #0
 800757a:	d17e      	bne.n	800767a <osThreadNew+0x11a>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d07b      	beq.n	800767a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007582:	2380      	movs	r3, #128	; 0x80
 8007584:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007586:	2318      	movs	r3, #24
 8007588:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800758a:	2300      	movs	r3, #0
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800758e:	f04f 33ff 	mov.w	r3, #4294967295
 8007592:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d045      	beq.n	8007626 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <osThreadNew+0x48>
        name = attr->name;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <osThreadNew+0x6e>
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2b38      	cmp	r3, #56	; 0x38
 80075c0:	d805      	bhi.n	80075ce <osThreadNew+0x6e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <osThreadNew+0x72>
        return (NULL);
 80075ce:	2300      	movs	r3, #0
 80075d0:	e054      	b.n	800767c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	089b      	lsrs	r3, r3, #2
 80075e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00e      	beq.n	8007608 <osThreadNew+0xa8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	2b5b      	cmp	r3, #91	; 0x5b
 80075f0:	d90a      	bls.n	8007608 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d006      	beq.n	8007608 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <osThreadNew+0xa8>
        mem = 1;
 8007602:	2301      	movs	r3, #1
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	e010      	b.n	800762a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10c      	bne.n	800762a <osThreadNew+0xca>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d108      	bne.n	800762a <osThreadNew+0xca>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d104      	bne.n	800762a <osThreadNew+0xca>
          mem = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	e001      	b.n	800762a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d110      	bne.n	8007652 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007638:	9202      	str	r2, [sp, #8]
 800763a:	9301      	str	r3, [sp, #4]
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f001 ffb4 	bl	80095b4 <xTaskCreateStatic>
 800764c:	4603      	mov	r3, r0
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	e013      	b.n	800767a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d110      	bne.n	800767a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	b29a      	uxth	r2, r3
 800765c:	f107 0310 	add.w	r3, r7, #16
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f001 ffff 	bl	800966e <xTaskCreate>
 8007670:	4603      	mov	r3, r0
 8007672:	2b01      	cmp	r3, #1
 8007674:	d001      	beq.n	800767a <osThreadNew+0x11a>
            hTask = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800767a:	693b      	ldr	r3, [r7, #16]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3728      	adds	r7, #40	; 0x28
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800768c:	f3ef 8305 	mrs	r3, IPSR
 8007690:	60bb      	str	r3, [r7, #8]
  return(result);
 8007692:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <osDelay+0x1c>
    stat = osErrorISR;
 8007698:	f06f 0305 	mvn.w	r3, #5
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e007      	b.n	80076b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f002 f924 	bl	80098f8 <vTaskDelay>
    }
  }

  return (stat);
 80076b0:	68fb      	ldr	r3, [r7, #12]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b08a      	sub	sp, #40	; 0x28
 80076be:	af02      	add	r7, sp, #8
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ca:	f3ef 8305 	mrs	r3, IPSR
 80076ce:	613b      	str	r3, [r7, #16]
  return(result);
 80076d0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d175      	bne.n	80077c2 <osSemaphoreNew+0x108>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d072      	beq.n	80077c2 <osSemaphoreNew+0x108>
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d86e      	bhi.n	80077c2 <osSemaphoreNew+0x108>
    mem = -1;
 80076e4:	f04f 33ff 	mov.w	r3, #4294967295
 80076e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d015      	beq.n	800771c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <osSemaphoreNew+0x4c>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	2b4f      	cmp	r3, #79	; 0x4f
 80076fe:	d902      	bls.n	8007706 <osSemaphoreNew+0x4c>
        mem = 1;
 8007700:	2301      	movs	r3, #1
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	e00c      	b.n	8007720 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d108      	bne.n	8007720 <osSemaphoreNew+0x66>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d104      	bne.n	8007720 <osSemaphoreNew+0x66>
          mem = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	e001      	b.n	8007720 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007726:	d04c      	beq.n	80077c2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d128      	bne.n	8007780 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d10a      	bne.n	800774a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	2203      	movs	r2, #3
 800773a:	9200      	str	r2, [sp, #0]
 800773c:	2200      	movs	r2, #0
 800773e:	2100      	movs	r1, #0
 8007740:	2001      	movs	r0, #1
 8007742:	f000 ff91 	bl	8008668 <xQueueGenericCreateStatic>
 8007746:	61f8      	str	r0, [r7, #28]
 8007748:	e005      	b.n	8007756 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800774a:	2203      	movs	r2, #3
 800774c:	2100      	movs	r1, #0
 800774e:	2001      	movs	r0, #1
 8007750:	f001 f802 	bl	8008758 <xQueueGenericCreate>
 8007754:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d022      	beq.n	80077a2 <osSemaphoreNew+0xe8>
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d01f      	beq.n	80077a2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007762:	2300      	movs	r3, #0
 8007764:	2200      	movs	r2, #0
 8007766:	2100      	movs	r1, #0
 8007768:	69f8      	ldr	r0, [r7, #28]
 800776a:	f001 f8bd 	bl	80088e8 <xQueueGenericSend>
 800776e:	4603      	mov	r3, r0
 8007770:	2b01      	cmp	r3, #1
 8007772:	d016      	beq.n	80077a2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007774:	69f8      	ldr	r0, [r7, #28]
 8007776:	f001 fd49 	bl	800920c <vQueueDelete>
            hSemaphore = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	61fb      	str	r3, [r7, #28]
 800777e:	e010      	b.n	80077a2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d108      	bne.n	8007798 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	461a      	mov	r2, r3
 800778c:	68b9      	ldr	r1, [r7, #8]
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f001 f83f 	bl	8008812 <xQueueCreateCountingSemaphoreStatic>
 8007794:	61f8      	str	r0, [r7, #28]
 8007796:	e004      	b.n	80077a2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007798:	68b9      	ldr	r1, [r7, #8]
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f001 f870 	bl	8008880 <xQueueCreateCountingSemaphore>
 80077a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00c      	beq.n	80077c2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	e001      	b.n	80077ba <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80077ba:	6979      	ldr	r1, [r7, #20]
 80077bc:	69f8      	ldr	r0, [r7, #28]
 80077be:	f001 fe71 	bl	80094a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80077c2:	69fb      	ldr	r3, [r7, #28]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d103      	bne.n	80077ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80077e4:	f06f 0303 	mvn.w	r3, #3
 80077e8:	617b      	str	r3, [r7, #20]
 80077ea:	e039      	b.n	8007860 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ec:	f3ef 8305 	mrs	r3, IPSR
 80077f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80077f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d022      	beq.n	800783e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80077fe:	f06f 0303 	mvn.w	r3, #3
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	e02c      	b.n	8007860 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007806:	2300      	movs	r3, #0
 8007808:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	461a      	mov	r2, r3
 8007810:	2100      	movs	r1, #0
 8007812:	6938      	ldr	r0, [r7, #16]
 8007814:	f001 fc7a 	bl	800910c <xQueueReceiveFromISR>
 8007818:	4603      	mov	r3, r0
 800781a:	2b01      	cmp	r3, #1
 800781c:	d003      	beq.n	8007826 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800781e:	f06f 0302 	mvn.w	r3, #2
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	e01c      	b.n	8007860 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d019      	beq.n	8007860 <osSemaphoreAcquire+0x94>
 800782c:	4b0f      	ldr	r3, [pc, #60]	; (800786c <osSemaphoreAcquire+0xa0>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	e010      	b.n	8007860 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6938      	ldr	r0, [r7, #16]
 8007842:	f001 fb57 	bl	8008ef4 <xQueueSemaphoreTake>
 8007846:	4603      	mov	r3, r0
 8007848:	2b01      	cmp	r3, #1
 800784a:	d009      	beq.n	8007860 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007852:	f06f 0301 	mvn.w	r3, #1
 8007856:	617b      	str	r3, [r7, #20]
 8007858:	e002      	b.n	8007860 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800785a:	f06f 0302 	mvn.w	r3, #2
 800785e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007860:	697b      	ldr	r3, [r7, #20]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	e000ed04 	.word	0xe000ed04

08007870 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d103      	bne.n	800788e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007886:	f06f 0303 	mvn.w	r3, #3
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	e02c      	b.n	80078e8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800788e:	f3ef 8305 	mrs	r3, IPSR
 8007892:	60fb      	str	r3, [r7, #12]
  return(result);
 8007894:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01a      	beq.n	80078d0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800789e:	f107 0308 	add.w	r3, r7, #8
 80078a2:	4619      	mov	r1, r3
 80078a4:	6938      	ldr	r0, [r7, #16]
 80078a6:	f001 f9b8 	bl	8008c1a <xQueueGiveFromISR>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d003      	beq.n	80078b8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80078b0:	f06f 0302 	mvn.w	r3, #2
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	e017      	b.n	80078e8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d014      	beq.n	80078e8 <osSemaphoreRelease+0x78>
 80078be:	4b0d      	ldr	r3, [pc, #52]	; (80078f4 <osSemaphoreRelease+0x84>)
 80078c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	e00b      	b.n	80078e8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80078d0:	2300      	movs	r3, #0
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	6938      	ldr	r0, [r7, #16]
 80078d8:	f001 f806 	bl	80088e8 <xQueueGenericSend>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d002      	beq.n	80078e8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80078e2:	f06f 0302 	mvn.w	r3, #2
 80078e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80078e8:	697b      	ldr	r3, [r7, #20]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	e000ed04 	.word	0xe000ed04

080078f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08a      	sub	sp, #40	; 0x28
 80078fc:	af02      	add	r7, sp, #8
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007904:	2300      	movs	r3, #0
 8007906:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007908:	f3ef 8305 	mrs	r3, IPSR
 800790c:	613b      	str	r3, [r7, #16]
  return(result);
 800790e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007910:	2b00      	cmp	r3, #0
 8007912:	d15f      	bne.n	80079d4 <osMessageQueueNew+0xdc>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d05c      	beq.n	80079d4 <osMessageQueueNew+0xdc>
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d059      	beq.n	80079d4 <osMessageQueueNew+0xdc>
    mem = -1;
 8007920:	f04f 33ff 	mov.w	r3, #4294967295
 8007924:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d029      	beq.n	8007980 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d012      	beq.n	800795a <osMessageQueueNew+0x62>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	2b4f      	cmp	r3, #79	; 0x4f
 800793a:	d90e      	bls.n	800795a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68b9      	ldr	r1, [r7, #8]
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	429a      	cmp	r2, r3
 8007952:	d302      	bcc.n	800795a <osMessageQueueNew+0x62>
        mem = 1;
 8007954:	2301      	movs	r3, #1
 8007956:	61bb      	str	r3, [r7, #24]
 8007958:	e014      	b.n	8007984 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d110      	bne.n	8007984 <osMessageQueueNew+0x8c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10c      	bne.n	8007984 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800796e:	2b00      	cmp	r3, #0
 8007970:	d108      	bne.n	8007984 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <osMessageQueueNew+0x8c>
          mem = 0;
 800797a:	2300      	movs	r3, #0
 800797c:	61bb      	str	r3, [r7, #24]
 800797e:	e001      	b.n	8007984 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d10b      	bne.n	80079a2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691a      	ldr	r2, [r3, #16]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2100      	movs	r1, #0
 8007994:	9100      	str	r1, [sp, #0]
 8007996:	68b9      	ldr	r1, [r7, #8]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 fe65 	bl	8008668 <xQueueGenericCreateStatic>
 800799e:	61f8      	str	r0, [r7, #28]
 80079a0:	e008      	b.n	80079b4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d105      	bne.n	80079b4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80079a8:	2200      	movs	r2, #0
 80079aa:	68b9      	ldr	r1, [r7, #8]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fed3 	bl	8008758 <xQueueGenericCreate>
 80079b2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00c      	beq.n	80079d4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	e001      	b.n	80079cc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80079cc:	6979      	ldr	r1, [r7, #20]
 80079ce:	69f8      	ldr	r0, [r7, #28]
 80079d0:	f001 fd68 	bl	80094a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80079d4:	69fb      	ldr	r3, [r7, #28]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3720      	adds	r7, #32
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079f8:	f3ef 8305 	mrs	r3, IPSR
 80079fc:	617b      	str	r3, [r7, #20]
  return(result);
 80079fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d028      	beq.n	8007a56 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <osMessageQueuePut+0x36>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <osMessageQueuePut+0x36>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007a16:	f06f 0303 	mvn.w	r3, #3
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	e038      	b.n	8007a90 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007a22:	f107 0210 	add.w	r2, r7, #16
 8007a26:	2300      	movs	r3, #0
 8007a28:	68b9      	ldr	r1, [r7, #8]
 8007a2a:	69b8      	ldr	r0, [r7, #24]
 8007a2c:	f001 f85a 	bl	8008ae4 <xQueueGenericSendFromISR>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d003      	beq.n	8007a3e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007a36:	f06f 0302 	mvn.w	r3, #2
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	e028      	b.n	8007a90 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d025      	beq.n	8007a90 <osMessageQueuePut+0xb0>
 8007a44:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <osMessageQueuePut+0xbc>)
 8007a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	e01c      	b.n	8007a90 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <osMessageQueuePut+0x82>
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d103      	bne.n	8007a6a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007a62:	f06f 0303 	mvn.w	r3, #3
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	e012      	b.n	8007a90 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	69b8      	ldr	r0, [r7, #24]
 8007a72:	f000 ff39 	bl	80088e8 <xQueueGenericSend>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d009      	beq.n	8007a90 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007a82:	f06f 0301 	mvn.w	r3, #1
 8007a86:	61fb      	str	r3, [r7, #28]
 8007a88:	e002      	b.n	8007a90 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007a8a:	f06f 0302 	mvn.w	r3, #2
 8007a8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007a90:	69fb      	ldr	r3, [r7, #28]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3720      	adds	r7, #32
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab6:	f3ef 8305 	mrs	r3, IPSR
 8007aba:	617b      	str	r3, [r7, #20]
  return(result);
 8007abc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d028      	beq.n	8007b14 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <osMessageQueueGet+0x34>
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <osMessageQueueGet+0x34>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007ad4:	f06f 0303 	mvn.w	r3, #3
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	e037      	b.n	8007b4c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007adc:	2300      	movs	r3, #0
 8007ade:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007ae0:	f107 0310 	add.w	r3, r7, #16
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	69b8      	ldr	r0, [r7, #24]
 8007aea:	f001 fb0f 	bl	800910c <xQueueReceiveFromISR>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d003      	beq.n	8007afc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007af4:	f06f 0302 	mvn.w	r3, #2
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	e027      	b.n	8007b4c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d024      	beq.n	8007b4c <osMessageQueueGet+0xac>
 8007b02:	4b15      	ldr	r3, [pc, #84]	; (8007b58 <osMessageQueueGet+0xb8>)
 8007b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	e01b      	b.n	8007b4c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <osMessageQueueGet+0x80>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d103      	bne.n	8007b28 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007b20:	f06f 0303 	mvn.w	r3, #3
 8007b24:	61fb      	str	r3, [r7, #28]
 8007b26:	e011      	b.n	8007b4c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	69b8      	ldr	r0, [r7, #24]
 8007b2e:	f001 f901 	bl	8008d34 <xQueueReceive>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d009      	beq.n	8007b4c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007b3e:	f06f 0301 	mvn.w	r3, #1
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	e002      	b.n	8007b4c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007b46:	f06f 0302 	mvn.w	r3, #2
 8007b4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007b4c:	69fb      	ldr	r3, [r7, #28]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3720      	adds	r7, #32
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4a07      	ldr	r2, [pc, #28]	; (8007b88 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	4a06      	ldr	r2, [pc, #24]	; (8007b8c <vApplicationGetIdleTaskMemory+0x30>)
 8007b72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2280      	movs	r2, #128	; 0x80
 8007b78:	601a      	str	r2, [r3, #0]
}
 8007b7a:	bf00      	nop
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	2400166c 	.word	0x2400166c
 8007b8c:	240016c8 	.word	0x240016c8

08007b90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4a07      	ldr	r2, [pc, #28]	; (8007bbc <vApplicationGetTimerTaskMemory+0x2c>)
 8007ba0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	4a06      	ldr	r2, [pc, #24]	; (8007bc0 <vApplicationGetTimerTaskMemory+0x30>)
 8007ba6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bae:	601a      	str	r2, [r3, #0]
}
 8007bb0:	bf00      	nop
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	240018c8 	.word	0x240018c8
 8007bc0:	24001924 	.word	0x24001924

08007bc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	; 0x28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bd0:	f001 ff2c 	bl	8009a2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bd4:	4b5b      	ldr	r3, [pc, #364]	; (8007d44 <pvPortMalloc+0x180>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bdc:	f000 f920 	bl	8007e20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007be0:	4b59      	ldr	r3, [pc, #356]	; (8007d48 <pvPortMalloc+0x184>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4013      	ands	r3, r2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f040 8093 	bne.w	8007d14 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d01d      	beq.n	8007c30 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bf4:	2208      	movs	r2, #8
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d014      	beq.n	8007c30 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f023 0307 	bic.w	r3, r3, #7
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d06e      	beq.n	8007d14 <pvPortMalloc+0x150>
 8007c36:	4b45      	ldr	r3, [pc, #276]	; (8007d4c <pvPortMalloc+0x188>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d869      	bhi.n	8007d14 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c40:	4b43      	ldr	r3, [pc, #268]	; (8007d50 <pvPortMalloc+0x18c>)
 8007c42:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c44:	4b42      	ldr	r3, [pc, #264]	; (8007d50 <pvPortMalloc+0x18c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c4a:	e004      	b.n	8007c56 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d903      	bls.n	8007c68 <pvPortMalloc+0xa4>
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f1      	bne.n	8007c4c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c68:	4b36      	ldr	r3, [pc, #216]	; (8007d44 <pvPortMalloc+0x180>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d050      	beq.n	8007d14 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2208      	movs	r2, #8
 8007c78:	4413      	add	r3, r2
 8007c7a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	1ad2      	subs	r2, r2, r3
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d91f      	bls.n	8007cd4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4413      	add	r3, r2
 8007c9a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <pvPortMalloc+0xf8>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	613b      	str	r3, [r7, #16]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	1ad2      	subs	r2, r2, r3
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cce:	69b8      	ldr	r0, [r7, #24]
 8007cd0:	f000 f908 	bl	8007ee4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cd4:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <pvPortMalloc+0x188>)
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	4a1b      	ldr	r2, [pc, #108]	; (8007d4c <pvPortMalloc+0x188>)
 8007ce0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ce2:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <pvPortMalloc+0x188>)
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	4b1b      	ldr	r3, [pc, #108]	; (8007d54 <pvPortMalloc+0x190>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d203      	bcs.n	8007cf6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cee:	4b17      	ldr	r3, [pc, #92]	; (8007d4c <pvPortMalloc+0x188>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a18      	ldr	r2, [pc, #96]	; (8007d54 <pvPortMalloc+0x190>)
 8007cf4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <pvPortMalloc+0x184>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	2200      	movs	r2, #0
 8007d08:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d0a:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <pvPortMalloc+0x194>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	4a11      	ldr	r2, [pc, #68]	; (8007d58 <pvPortMalloc+0x194>)
 8007d12:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d14:	f001 fe98 	bl	8009a48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00a      	beq.n	8007d38 <pvPortMalloc+0x174>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60fb      	str	r3, [r7, #12]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <pvPortMalloc+0x172>
	return pvReturn;
 8007d38:	69fb      	ldr	r3, [r7, #28]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3728      	adds	r7, #40	; 0x28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	24009d2c 	.word	0x24009d2c
 8007d48:	24009d40 	.word	0x24009d40
 8007d4c:	24009d30 	.word	0x24009d30
 8007d50:	24009d24 	.word	0x24009d24
 8007d54:	24009d34 	.word	0x24009d34
 8007d58:	24009d38 	.word	0x24009d38

08007d5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d04d      	beq.n	8007e0a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d6e:	2308      	movs	r3, #8
 8007d70:	425b      	negs	r3, r3
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4413      	add	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	4b24      	ldr	r3, [pc, #144]	; (8007e14 <vPortFree+0xb8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4013      	ands	r3, r2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <vPortFree+0x44>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	60fb      	str	r3, [r7, #12]
}
 8007d9c:	bf00      	nop
 8007d9e:	e7fe      	b.n	8007d9e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <vPortFree+0x62>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	60bb      	str	r3, [r7, #8]
}
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	4b14      	ldr	r3, [pc, #80]	; (8007e14 <vPortFree+0xb8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01e      	beq.n	8007e0a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d11a      	bne.n	8007e0a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	4b0e      	ldr	r3, [pc, #56]	; (8007e14 <vPortFree+0xb8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	43db      	mvns	r3, r3
 8007dde:	401a      	ands	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007de4:	f001 fe22 	bl	8009a2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <vPortFree+0xbc>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4413      	add	r3, r2
 8007df2:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <vPortFree+0xbc>)
 8007df4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007df6:	6938      	ldr	r0, [r7, #16]
 8007df8:	f000 f874 	bl	8007ee4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dfc:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <vPortFree+0xc0>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3301      	adds	r3, #1
 8007e02:	4a06      	ldr	r2, [pc, #24]	; (8007e1c <vPortFree+0xc0>)
 8007e04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e06:	f001 fe1f 	bl	8009a48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e0a:	bf00      	nop
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	24009d40 	.word	0x24009d40
 8007e18:	24009d30 	.word	0x24009d30
 8007e1c:	24009d3c 	.word	0x24009d3c

08007e20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e2c:	4b27      	ldr	r3, [pc, #156]	; (8007ecc <prvHeapInit+0xac>)
 8007e2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00c      	beq.n	8007e54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3307      	adds	r3, #7
 8007e3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0307 	bic.w	r3, r3, #7
 8007e46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	4a1f      	ldr	r2, [pc, #124]	; (8007ecc <prvHeapInit+0xac>)
 8007e50:	4413      	add	r3, r2
 8007e52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e58:	4a1d      	ldr	r2, [pc, #116]	; (8007ed0 <prvHeapInit+0xb0>)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e5e:	4b1c      	ldr	r3, [pc, #112]	; (8007ed0 <prvHeapInit+0xb0>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	4413      	add	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	1a9b      	subs	r3, r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0307 	bic.w	r3, r3, #7
 8007e7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4a15      	ldr	r2, [pc, #84]	; (8007ed4 <prvHeapInit+0xb4>)
 8007e80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e82:	4b14      	ldr	r3, [pc, #80]	; (8007ed4 <prvHeapInit+0xb4>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2200      	movs	r2, #0
 8007e88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e8a:	4b12      	ldr	r3, [pc, #72]	; (8007ed4 <prvHeapInit+0xb4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	1ad2      	subs	r2, r2, r3
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ea0:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <prvHeapInit+0xb4>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	4a0a      	ldr	r2, [pc, #40]	; (8007ed8 <prvHeapInit+0xb8>)
 8007eae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	4a09      	ldr	r2, [pc, #36]	; (8007edc <prvHeapInit+0xbc>)
 8007eb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007eb8:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <prvHeapInit+0xc0>)
 8007eba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ebe:	601a      	str	r2, [r3, #0]
}
 8007ec0:	bf00      	nop
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	24001d24 	.word	0x24001d24
 8007ed0:	24009d24 	.word	0x24009d24
 8007ed4:	24009d2c 	.word	0x24009d2c
 8007ed8:	24009d34 	.word	0x24009d34
 8007edc:	24009d30 	.word	0x24009d30
 8007ee0:	24009d40 	.word	0x24009d40

08007ee4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007eec:	4b28      	ldr	r3, [pc, #160]	; (8007f90 <prvInsertBlockIntoFreeList+0xac>)
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	e002      	b.n	8007ef8 <prvInsertBlockIntoFreeList+0x14>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d8f7      	bhi.n	8007ef2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d108      	bne.n	8007f26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	441a      	add	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	441a      	add	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d118      	bne.n	8007f6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	4b15      	ldr	r3, [pc, #84]	; (8007f94 <prvInsertBlockIntoFreeList+0xb0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d00d      	beq.n	8007f62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	441a      	add	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	e008      	b.n	8007f74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f62:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <prvInsertBlockIntoFreeList+0xb0>)
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	e003      	b.n	8007f74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d002      	beq.n	8007f82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f82:	bf00      	nop
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	24009d24 	.word	0x24009d24
 8007f94:	24009d2c 	.word	0x24009d2c

08007f98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f103 0208 	add.w	r2, r3, #8
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f103 0208 	add.w	r2, r3, #8
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f103 0208 	add.w	r2, r3, #8
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	601a      	str	r2, [r3, #0]
}
 800802e:	bf00      	nop
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d103      	bne.n	800805a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	e00c      	b.n	8008074 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3308      	adds	r3, #8
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	e002      	b.n	8008068 <vListInsert+0x2e>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	429a      	cmp	r2, r3
 8008072:	d2f6      	bcs.n	8008062 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	683a      	ldr	r2, [r7, #0]
 800808e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	601a      	str	r2, [r3, #0]
}
 80080a0:	bf00      	nop
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	6892      	ldr	r2, [r2, #8]
 80080c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6852      	ldr	r2, [r2, #4]
 80080cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d103      	bne.n	80080e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	1e5a      	subs	r2, r3, #1
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3b04      	subs	r3, #4
 8008110:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3b04      	subs	r3, #4
 800811e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f023 0201 	bic.w	r2, r3, #1
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b04      	subs	r3, #4
 800812e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008130:	4a0c      	ldr	r2, [pc, #48]	; (8008164 <pxPortInitialiseStack+0x64>)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3b14      	subs	r3, #20
 800813a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3b04      	subs	r3, #4
 8008146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f06f 0202 	mvn.w	r2, #2
 800814e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3b20      	subs	r3, #32
 8008154:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008156:	68fb      	ldr	r3, [r7, #12]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	08008169 	.word	0x08008169

08008168 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008172:	4b12      	ldr	r3, [pc, #72]	; (80081bc <prvTaskExitError+0x54>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817a:	d00a      	beq.n	8008192 <prvTaskExitError+0x2a>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	60fb      	str	r3, [r7, #12]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <prvTaskExitError+0x28>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	60bb      	str	r3, [r7, #8]
}
 80081a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081a6:	bf00      	nop
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0fc      	beq.n	80081a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081ae:	bf00      	nop
 80081b0:	bf00      	nop
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	2400000c 	.word	0x2400000c

080081c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <pxCurrentTCBConst2>)
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	6808      	ldr	r0, [r1, #0]
 80081c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ca:	f380 8809 	msr	PSP, r0
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f04f 0000 	mov.w	r0, #0
 80081d6:	f380 8811 	msr	BASEPRI, r0
 80081da:	4770      	bx	lr
 80081dc:	f3af 8000 	nop.w

080081e0 <pxCurrentTCBConst2>:
 80081e0:	24009d4c 	.word	0x24009d4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop

080081e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081e8:	4808      	ldr	r0, [pc, #32]	; (800820c <prvPortStartFirstTask+0x24>)
 80081ea:	6800      	ldr	r0, [r0, #0]
 80081ec:	6800      	ldr	r0, [r0, #0]
 80081ee:	f380 8808 	msr	MSP, r0
 80081f2:	f04f 0000 	mov.w	r0, #0
 80081f6:	f380 8814 	msr	CONTROL, r0
 80081fa:	b662      	cpsie	i
 80081fc:	b661      	cpsie	f
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	df00      	svc	0
 8008208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800820a:	bf00      	nop
 800820c:	e000ed08 	.word	0xe000ed08

08008210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008216:	4b46      	ldr	r3, [pc, #280]	; (8008330 <xPortStartScheduler+0x120>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a46      	ldr	r2, [pc, #280]	; (8008334 <xPortStartScheduler+0x124>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d10a      	bne.n	8008236 <xPortStartScheduler+0x26>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	613b      	str	r3, [r7, #16]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008236:	4b3e      	ldr	r3, [pc, #248]	; (8008330 <xPortStartScheduler+0x120>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a3f      	ldr	r2, [pc, #252]	; (8008338 <xPortStartScheduler+0x128>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d10a      	bne.n	8008256 <xPortStartScheduler+0x46>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60fb      	str	r3, [r7, #12]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008256:	4b39      	ldr	r3, [pc, #228]	; (800833c <xPortStartScheduler+0x12c>)
 8008258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	22ff      	movs	r2, #255	; 0xff
 8008266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008278:	b2da      	uxtb	r2, r3
 800827a:	4b31      	ldr	r3, [pc, #196]	; (8008340 <xPortStartScheduler+0x130>)
 800827c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800827e:	4b31      	ldr	r3, [pc, #196]	; (8008344 <xPortStartScheduler+0x134>)
 8008280:	2207      	movs	r2, #7
 8008282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008284:	e009      	b.n	800829a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008286:	4b2f      	ldr	r3, [pc, #188]	; (8008344 <xPortStartScheduler+0x134>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3b01      	subs	r3, #1
 800828c:	4a2d      	ldr	r2, [pc, #180]	; (8008344 <xPortStartScheduler+0x134>)
 800828e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	b2db      	uxtb	r3, r3
 8008298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a2:	2b80      	cmp	r3, #128	; 0x80
 80082a4:	d0ef      	beq.n	8008286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082a6:	4b27      	ldr	r3, [pc, #156]	; (8008344 <xPortStartScheduler+0x134>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f1c3 0307 	rsb	r3, r3, #7
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d00a      	beq.n	80082c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	60bb      	str	r3, [r7, #8]
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082c8:	4b1e      	ldr	r3, [pc, #120]	; (8008344 <xPortStartScheduler+0x134>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	021b      	lsls	r3, r3, #8
 80082ce:	4a1d      	ldr	r2, [pc, #116]	; (8008344 <xPortStartScheduler+0x134>)
 80082d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082d2:	4b1c      	ldr	r3, [pc, #112]	; (8008344 <xPortStartScheduler+0x134>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082da:	4a1a      	ldr	r2, [pc, #104]	; (8008344 <xPortStartScheduler+0x134>)
 80082dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082e6:	4b18      	ldr	r3, [pc, #96]	; (8008348 <xPortStartScheduler+0x138>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a17      	ldr	r2, [pc, #92]	; (8008348 <xPortStartScheduler+0x138>)
 80082ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <xPortStartScheduler+0x138>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a14      	ldr	r2, [pc, #80]	; (8008348 <xPortStartScheduler+0x138>)
 80082f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082fe:	f000 f8dd 	bl	80084bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008302:	4b12      	ldr	r3, [pc, #72]	; (800834c <xPortStartScheduler+0x13c>)
 8008304:	2200      	movs	r2, #0
 8008306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008308:	f000 f8fc 	bl	8008504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800830c:	4b10      	ldr	r3, [pc, #64]	; (8008350 <xPortStartScheduler+0x140>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a0f      	ldr	r2, [pc, #60]	; (8008350 <xPortStartScheduler+0x140>)
 8008312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008318:	f7ff ff66 	bl	80081e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800831c:	f001 fcfc 	bl	8009d18 <vTaskSwitchContext>
	prvTaskExitError();
 8008320:	f7ff ff22 	bl	8008168 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	e000ed00 	.word	0xe000ed00
 8008334:	410fc271 	.word	0x410fc271
 8008338:	410fc270 	.word	0x410fc270
 800833c:	e000e400 	.word	0xe000e400
 8008340:	24009d44 	.word	0x24009d44
 8008344:	24009d48 	.word	0x24009d48
 8008348:	e000ed20 	.word	0xe000ed20
 800834c:	2400000c 	.word	0x2400000c
 8008350:	e000ef34 	.word	0xe000ef34

08008354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	607b      	str	r3, [r7, #4]
}
 800836c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <vPortEnterCritical+0x58>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	4a0d      	ldr	r2, [pc, #52]	; (80083ac <vPortEnterCritical+0x58>)
 8008376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008378:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <vPortEnterCritical+0x58>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d10f      	bne.n	80083a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008380:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <vPortEnterCritical+0x5c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	603b      	str	r3, [r7, #0]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <vPortEnterCritical+0x4a>
	}
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	2400000c 	.word	0x2400000c
 80083b0:	e000ed04 	.word	0xe000ed04

080083b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083ba:	4b12      	ldr	r3, [pc, #72]	; (8008404 <vPortExitCritical+0x50>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <vPortExitCritical+0x24>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	607b      	str	r3, [r7, #4]
}
 80083d4:	bf00      	nop
 80083d6:	e7fe      	b.n	80083d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083d8:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <vPortExitCritical+0x50>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3b01      	subs	r3, #1
 80083de:	4a09      	ldr	r2, [pc, #36]	; (8008404 <vPortExitCritical+0x50>)
 80083e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <vPortExitCritical+0x50>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d105      	bne.n	80083f6 <vPortExitCritical+0x42>
 80083ea:	2300      	movs	r3, #0
 80083ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	2400000c 	.word	0x2400000c
	...

08008410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008410:	f3ef 8009 	mrs	r0, PSP
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	4b15      	ldr	r3, [pc, #84]	; (8008470 <pxCurrentTCBConst>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	f01e 0f10 	tst.w	lr, #16
 8008420:	bf08      	it	eq
 8008422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	6010      	str	r0, [r2, #0]
 800842c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008434:	f380 8811 	msr	BASEPRI, r0
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f001 fc6a 	bl	8009d18 <vTaskSwitchContext>
 8008444:	f04f 0000 	mov.w	r0, #0
 8008448:	f380 8811 	msr	BASEPRI, r0
 800844c:	bc09      	pop	{r0, r3}
 800844e:	6819      	ldr	r1, [r3, #0]
 8008450:	6808      	ldr	r0, [r1, #0]
 8008452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008456:	f01e 0f10 	tst.w	lr, #16
 800845a:	bf08      	it	eq
 800845c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008460:	f380 8809 	msr	PSP, r0
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	f3af 8000 	nop.w

08008470 <pxCurrentTCBConst>:
 8008470:	24009d4c 	.word	0x24009d4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop

08008478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	607b      	str	r3, [r7, #4]
}
 8008490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008492:	f001 fb87 	bl	8009ba4 <xTaskIncrementTick>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800849c:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <xPortSysTickHandler+0x40>)
 800849e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	2300      	movs	r3, #0
 80084a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f383 8811 	msr	BASEPRI, r3
}
 80084ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084c0:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <vPortSetupTimerInterrupt+0x34>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <vPortSetupTimerInterrupt+0x38>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084cc:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <vPortSetupTimerInterrupt+0x3c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a0a      	ldr	r2, [pc, #40]	; (80084fc <vPortSetupTimerInterrupt+0x40>)
 80084d2:	fba2 2303 	umull	r2, r3, r2, r3
 80084d6:	099b      	lsrs	r3, r3, #6
 80084d8:	4a09      	ldr	r2, [pc, #36]	; (8008500 <vPortSetupTimerInterrupt+0x44>)
 80084da:	3b01      	subs	r3, #1
 80084dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084de:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <vPortSetupTimerInterrupt+0x34>)
 80084e0:	2207      	movs	r2, #7
 80084e2:	601a      	str	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	e000e010 	.word	0xe000e010
 80084f4:	e000e018 	.word	0xe000e018
 80084f8:	24000010 	.word	0x24000010
 80084fc:	10624dd3 	.word	0x10624dd3
 8008500:	e000e014 	.word	0xe000e014

08008504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008514 <vPortEnableVFP+0x10>
 8008508:	6801      	ldr	r1, [r0, #0]
 800850a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800850e:	6001      	str	r1, [r0, #0]
 8008510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008512:	bf00      	nop
 8008514:	e000ed88 	.word	0xe000ed88

08008518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800851e:	f3ef 8305 	mrs	r3, IPSR
 8008522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d914      	bls.n	8008554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800852a:	4a17      	ldr	r2, [pc, #92]	; (8008588 <vPortValidateInterruptPriority+0x70>)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008534:	4b15      	ldr	r3, [pc, #84]	; (800858c <vPortValidateInterruptPriority+0x74>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	7afa      	ldrb	r2, [r7, #11]
 800853a:	429a      	cmp	r2, r3
 800853c:	d20a      	bcs.n	8008554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	607b      	str	r3, [r7, #4]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008554:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <vPortValidateInterruptPriority+0x78>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800855c:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <vPortValidateInterruptPriority+0x7c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	429a      	cmp	r2, r3
 8008562:	d90a      	bls.n	800857a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	603b      	str	r3, [r7, #0]
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <vPortValidateInterruptPriority+0x60>
	}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	e000e3f0 	.word	0xe000e3f0
 800858c:	24009d44 	.word	0x24009d44
 8008590:	e000ed0c 	.word	0xe000ed0c
 8008594:	24009d48 	.word	0x24009d48

08008598 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <xQueueGenericReset+0x2a>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	60bb      	str	r3, [r7, #8]
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085c2:	f7ff fec7 	bl	8008354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ce:	68f9      	ldr	r1, [r7, #12]
 80085d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085d2:	fb01 f303 	mul.w	r3, r1, r3
 80085d6:	441a      	add	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f2:	3b01      	subs	r3, #1
 80085f4:	68f9      	ldr	r1, [r7, #12]
 80085f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
 80085fc:	441a      	add	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	22ff      	movs	r2, #255	; 0xff
 8008606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	22ff      	movs	r2, #255	; 0xff
 800860e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d114      	bne.n	8008642 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01a      	beq.n	8008656 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3310      	adds	r3, #16
 8008624:	4618      	mov	r0, r3
 8008626:	f001 fc25 	bl	8009e74 <xTaskRemoveFromEventList>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d012      	beq.n	8008656 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008630:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <xQueueGenericReset+0xcc>)
 8008632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	e009      	b.n	8008656 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3310      	adds	r3, #16
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff fca6 	bl	8007f98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3324      	adds	r3, #36	; 0x24
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff fca1 	bl	8007f98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008656:	f7ff fead 	bl	80083b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800865a:	2301      	movs	r3, #1
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	e000ed04 	.word	0xe000ed04

08008668 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08e      	sub	sp, #56	; 0x38
 800866c:	af02      	add	r7, sp, #8
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086aa:	bf00      	nop
 80086ac:	e7fe      	b.n	80086ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <xQueueGenericCreateStatic+0x52>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <xQueueGenericCreateStatic+0x56>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <xQueueGenericCreateStatic+0x58>
 80086be:	2300      	movs	r3, #0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	623b      	str	r3, [r7, #32]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d102      	bne.n	80086e6 <xQueueGenericCreateStatic+0x7e>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <xQueueGenericCreateStatic+0x82>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <xQueueGenericCreateStatic+0x84>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10a      	bne.n	8008706 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	61fb      	str	r3, [r7, #28]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008706:	2350      	movs	r3, #80	; 0x50
 8008708:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2b50      	cmp	r3, #80	; 0x50
 800870e:	d00a      	beq.n	8008726 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	61bb      	str	r3, [r7, #24]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008726:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00d      	beq.n	800874e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800873a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	4613      	mov	r3, r2
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 f83f 	bl	80087cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008750:	4618      	mov	r0, r3
 8008752:	3730      	adds	r7, #48	; 0x30
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08a      	sub	sp, #40	; 0x28
 800875c:	af02      	add	r7, sp, #8
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <xQueueGenericCreate+0x2a>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	613b      	str	r3, [r7, #16]
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	fb02 f303 	mul.w	r3, r2, r3
 800878a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	3350      	adds	r3, #80	; 0x50
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff fa17 	bl	8007bc4 <pvPortMalloc>
 8008796:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d011      	beq.n	80087c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	3350      	adds	r3, #80	; 0x50
 80087a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087b0:	79fa      	ldrb	r2, [r7, #7]
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	4613      	mov	r3, r2
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	68b9      	ldr	r1, [r7, #8]
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 f805 	bl	80087cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087c2:	69bb      	ldr	r3, [r7, #24]
	}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	e002      	b.n	80087ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087fa:	2101      	movs	r1, #1
 80087fc:	69b8      	ldr	r0, [r7, #24]
 80087fe:	f7ff fecb 	bl	8008598 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008812:	b580      	push	{r7, lr}
 8008814:	b08a      	sub	sp, #40	; 0x28
 8008816:	af02      	add	r7, sp, #8
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	61bb      	str	r3, [r7, #24]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	429a      	cmp	r2, r3
 8008840:	d90a      	bls.n	8008858 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	617b      	str	r3, [r7, #20]
}
 8008854:	bf00      	nop
 8008856:	e7fe      	b.n	8008856 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008858:	2302      	movs	r3, #2
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	2100      	movs	r1, #0
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7ff ff00 	bl	8008668 <xQueueGenericCreateStatic>
 8008868:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008876:	69fb      	ldr	r3, [r7, #28]
	}
 8008878:	4618      	mov	r0, r3
 800887a:	3720      	adds	r7, #32
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10a      	bne.n	80088a6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	613b      	str	r3, [r7, #16]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d90a      	bls.n	80088c4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	60fb      	str	r3, [r7, #12]
}
 80088c0:	bf00      	nop
 80088c2:	e7fe      	b.n	80088c2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80088c4:	2202      	movs	r2, #2
 80088c6:	2100      	movs	r1, #0
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff ff45 	bl	8008758 <xQueueGenericCreate>
 80088ce:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80088dc:	697b      	ldr	r3, [r7, #20]
	}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08e      	sub	sp, #56	; 0x38
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088f6:	2300      	movs	r3, #0
 80088f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10a      	bne.n	800891a <xQueueGenericSend+0x32>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d103      	bne.n	8008928 <xQueueGenericSend+0x40>
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <xQueueGenericSend+0x44>
 8008928:	2301      	movs	r3, #1
 800892a:	e000      	b.n	800892e <xQueueGenericSend+0x46>
 800892c:	2300      	movs	r3, #0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <xQueueGenericSend+0x60>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b02      	cmp	r3, #2
 800894c:	d103      	bne.n	8008956 <xQueueGenericSend+0x6e>
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <xQueueGenericSend+0x72>
 8008956:	2301      	movs	r3, #1
 8008958:	e000      	b.n	800895c <xQueueGenericSend+0x74>
 800895a:	2300      	movs	r3, #0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <xQueueGenericSend+0x8e>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	623b      	str	r3, [r7, #32]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008976:	f001 fc3b 	bl	800a1f0 <xTaskGetSchedulerState>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d102      	bne.n	8008986 <xQueueGenericSend+0x9e>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <xQueueGenericSend+0xa2>
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <xQueueGenericSend+0xa4>
 800898a:	2300      	movs	r3, #0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10a      	bne.n	80089a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	61fb      	str	r3, [r7, #28]
}
 80089a2:	bf00      	nop
 80089a4:	e7fe      	b.n	80089a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089a6:	f7ff fcd5 	bl	8008354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d302      	bcc.n	80089bc <xQueueGenericSend+0xd4>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d129      	bne.n	8008a10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	68b9      	ldr	r1, [r7, #8]
 80089c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089c2:	f000 fc5e 	bl	8009282 <prvCopyDataToQueue>
 80089c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d010      	beq.n	80089f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	3324      	adds	r3, #36	; 0x24
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 fa4d 	bl	8009e74 <xTaskRemoveFromEventList>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d013      	beq.n	8008a08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089e0:	4b3f      	ldr	r3, [pc, #252]	; (8008ae0 <xQueueGenericSend+0x1f8>)
 80089e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	e00a      	b.n	8008a08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d007      	beq.n	8008a08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089f8:	4b39      	ldr	r3, [pc, #228]	; (8008ae0 <xQueueGenericSend+0x1f8>)
 80089fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a08:	f7ff fcd4 	bl	80083b4 <vPortExitCritical>
				return pdPASS;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e063      	b.n	8008ad8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d103      	bne.n	8008a1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a16:	f7ff fccd 	bl	80083b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e05c      	b.n	8008ad8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d106      	bne.n	8008a32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a24:	f107 0314 	add.w	r3, r7, #20
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f001 fa87 	bl	8009f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a32:	f7ff fcbf 	bl	80083b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a36:	f000 fff9 	bl	8009a2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a3a:	f7ff fc8b 	bl	8008354 <vPortEnterCritical>
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a44:	b25b      	sxtb	r3, r3
 8008a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4a:	d103      	bne.n	8008a54 <xQueueGenericSend+0x16c>
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a5a:	b25b      	sxtb	r3, r3
 8008a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a60:	d103      	bne.n	8008a6a <xQueueGenericSend+0x182>
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a6a:	f7ff fca3 	bl	80083b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a6e:	1d3a      	adds	r2, r7, #4
 8008a70:	f107 0314 	add.w	r3, r7, #20
 8008a74:	4611      	mov	r1, r2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 fa76 	bl	8009f68 <xTaskCheckForTimeOut>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d124      	bne.n	8008acc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a84:	f000 fcf5 	bl	8009472 <prvIsQueueFull>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d018      	beq.n	8008ac0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	3310      	adds	r3, #16
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	4611      	mov	r1, r2
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 f99c 	bl	8009dd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a9e:	f000 fc80 	bl	80093a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008aa2:	f000 ffd1 	bl	8009a48 <xTaskResumeAll>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f47f af7c 	bne.w	80089a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008aae:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <xQueueGenericSend+0x1f8>)
 8008ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	e772      	b.n	80089a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ac2:	f000 fc6e 	bl	80093a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ac6:	f000 ffbf 	bl	8009a48 <xTaskResumeAll>
 8008aca:	e76c      	b.n	80089a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ace:	f000 fc68 	bl	80093a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ad2:	f000 ffb9 	bl	8009a48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ad6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3738      	adds	r7, #56	; 0x38
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	e000ed04 	.word	0xe000ed04

08008ae4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b090      	sub	sp, #64	; 0x40
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10a      	bne.n	8008b12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d103      	bne.n	8008b20 <xQueueGenericSendFromISR+0x3c>
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <xQueueGenericSendFromISR+0x40>
 8008b20:	2301      	movs	r3, #1
 8008b22:	e000      	b.n	8008b26 <xQueueGenericSendFromISR+0x42>
 8008b24:	2300      	movs	r3, #0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10a      	bne.n	8008b40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b3c:	bf00      	nop
 8008b3e:	e7fe      	b.n	8008b3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d103      	bne.n	8008b4e <xQueueGenericSendFromISR+0x6a>
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d101      	bne.n	8008b52 <xQueueGenericSendFromISR+0x6e>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <xQueueGenericSendFromISR+0x70>
 8008b52:	2300      	movs	r3, #0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	623b      	str	r3, [r7, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b6e:	f7ff fcd3 	bl	8008518 <vPortValidateInterruptPriority>
	__asm volatile
 8008b72:	f3ef 8211 	mrs	r2, BASEPRI
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	61fa      	str	r2, [r7, #28]
 8008b88:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d302      	bcc.n	8008ba0 <xQueueGenericSendFromISR+0xbc>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d12f      	bne.n	8008c00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bb6:	f000 fb64 	bl	8009282 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc2:	d112      	bne.n	8008bea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d016      	beq.n	8008bfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bce:	3324      	adds	r3, #36	; 0x24
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f001 f94f 	bl	8009e74 <xTaskRemoveFromEventList>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00e      	beq.n	8008bfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00b      	beq.n	8008bfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	e007      	b.n	8008bfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008bee:	3301      	adds	r3, #1
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	b25a      	sxtb	r2, r3
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008bfe:	e001      	b.n	8008c04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c00:	2300      	movs	r3, #0
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c06:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f383 8811 	msr	BASEPRI, r3
}
 8008c0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3740      	adds	r7, #64	; 0x40
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b08e      	sub	sp, #56	; 0x38
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10a      	bne.n	8008c44 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	623b      	str	r3, [r7, #32]
}
 8008c40:	bf00      	nop
 8008c42:	e7fe      	b.n	8008c42 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00a      	beq.n	8008c62 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	61fb      	str	r3, [r7, #28]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <xQueueGiveFromISR+0x58>
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <xQueueGiveFromISR+0x5c>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e000      	b.n	8008c78 <xQueueGiveFromISR+0x5e>
 8008c76:	2300      	movs	r3, #0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	61bb      	str	r3, [r7, #24]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c92:	f7ff fc41 	bl	8008518 <vPortValidateInterruptPriority>
	__asm volatile
 8008c96:	f3ef 8211 	mrs	r2, BASEPRI
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	617a      	str	r2, [r7, #20]
 8008cac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008cae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d22b      	bcs.n	8008d1a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cdc:	d112      	bne.n	8008d04 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d016      	beq.n	8008d14 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	3324      	adds	r3, #36	; 0x24
 8008cea:	4618      	mov	r0, r3
 8008cec:	f001 f8c2 	bl	8009e74 <xTaskRemoveFromEventList>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00e      	beq.n	8008d14 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00b      	beq.n	8008d14 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	e007      	b.n	8008d14 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d08:	3301      	adds	r3, #1
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	b25a      	sxtb	r2, r3
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d14:	2301      	movs	r3, #1
 8008d16:	637b      	str	r3, [r7, #52]	; 0x34
 8008d18:	e001      	b.n	8008d1e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d20:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f383 8811 	msr	BASEPRI, r3
}
 8008d28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3738      	adds	r7, #56	; 0x38
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08c      	sub	sp, #48	; 0x30
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d40:	2300      	movs	r3, #0
 8008d42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10a      	bne.n	8008d64 <xQueueReceive+0x30>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	623b      	str	r3, [r7, #32]
}
 8008d60:	bf00      	nop
 8008d62:	e7fe      	b.n	8008d62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d103      	bne.n	8008d72 <xQueueReceive+0x3e>
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <xQueueReceive+0x42>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <xQueueReceive+0x44>
 8008d76:	2300      	movs	r3, #0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <xQueueReceive+0x5e>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	61fb      	str	r3, [r7, #28]
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d92:	f001 fa2d 	bl	800a1f0 <xTaskGetSchedulerState>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d102      	bne.n	8008da2 <xQueueReceive+0x6e>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <xQueueReceive+0x72>
 8008da2:	2301      	movs	r3, #1
 8008da4:	e000      	b.n	8008da8 <xQueueReceive+0x74>
 8008da6:	2300      	movs	r3, #0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10a      	bne.n	8008dc2 <xQueueReceive+0x8e>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	61bb      	str	r3, [r7, #24]
}
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008dc2:	f7ff fac7 	bl	8008354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d01f      	beq.n	8008e12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008dd2:	68b9      	ldr	r1, [r7, #8]
 8008dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd6:	f000 fabe 	bl	8009356 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	1e5a      	subs	r2, r3, #1
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00f      	beq.n	8008e0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	3310      	adds	r3, #16
 8008dee:	4618      	mov	r0, r3
 8008df0:	f001 f840 	bl	8009e74 <xTaskRemoveFromEventList>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d007      	beq.n	8008e0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008dfa:	4b3d      	ldr	r3, [pc, #244]	; (8008ef0 <xQueueReceive+0x1bc>)
 8008dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e0a:	f7ff fad3 	bl	80083b4 <vPortExitCritical>
				return pdPASS;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e069      	b.n	8008ee6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d103      	bne.n	8008e20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e18:	f7ff facc 	bl	80083b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	e062      	b.n	8008ee6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e26:	f107 0310 	add.w	r3, r7, #16
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f001 f886 	bl	8009f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e30:	2301      	movs	r3, #1
 8008e32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e34:	f7ff fabe 	bl	80083b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e38:	f000 fdf8 	bl	8009a2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e3c:	f7ff fa8a 	bl	8008354 <vPortEnterCritical>
 8008e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e46:	b25b      	sxtb	r3, r3
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d103      	bne.n	8008e56 <xQueueReceive+0x122>
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e5c:	b25b      	sxtb	r3, r3
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e62:	d103      	bne.n	8008e6c <xQueueReceive+0x138>
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e6c:	f7ff faa2 	bl	80083b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e70:	1d3a      	adds	r2, r7, #4
 8008e72:	f107 0310 	add.w	r3, r7, #16
 8008e76:	4611      	mov	r1, r2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f001 f875 	bl	8009f68 <xTaskCheckForTimeOut>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d123      	bne.n	8008ecc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e86:	f000 fade 	bl	8009446 <prvIsQueueEmpty>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d017      	beq.n	8008ec0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	3324      	adds	r3, #36	; 0x24
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 ff9b 	bl	8009dd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ea0:	f000 fa7f 	bl	80093a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ea4:	f000 fdd0 	bl	8009a48 <xTaskResumeAll>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d189      	bne.n	8008dc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008eae:	4b10      	ldr	r3, [pc, #64]	; (8008ef0 <xQueueReceive+0x1bc>)
 8008eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	e780      	b.n	8008dc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ec2:	f000 fa6e 	bl	80093a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ec6:	f000 fdbf 	bl	8009a48 <xTaskResumeAll>
 8008eca:	e77a      	b.n	8008dc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ece:	f000 fa68 	bl	80093a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ed2:	f000 fdb9 	bl	8009a48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ed8:	f000 fab5 	bl	8009446 <prvIsQueueEmpty>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f43f af6f 	beq.w	8008dc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ee4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3730      	adds	r7, #48	; 0x30
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	e000ed04 	.word	0xe000ed04

08008ef4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08e      	sub	sp, #56	; 0x38
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008efe:	2300      	movs	r3, #0
 8008f00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10a      	bne.n	8008f26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	623b      	str	r3, [r7, #32]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	61fb      	str	r3, [r7, #28]
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f44:	f001 f954 	bl	800a1f0 <xTaskGetSchedulerState>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d102      	bne.n	8008f54 <xQueueSemaphoreTake+0x60>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <xQueueSemaphoreTake+0x64>
 8008f54:	2301      	movs	r3, #1
 8008f56:	e000      	b.n	8008f5a <xQueueSemaphoreTake+0x66>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10a      	bne.n	8008f74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	61bb      	str	r3, [r7, #24]
}
 8008f70:	bf00      	nop
 8008f72:	e7fe      	b.n	8008f72 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f74:	f7ff f9ee 	bl	8008354 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d024      	beq.n	8008fce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	1e5a      	subs	r2, r3, #1
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d104      	bne.n	8008f9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f94:	f001 faa2 	bl	800a4dc <pvTaskIncrementMutexHeldCount>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00f      	beq.n	8008fc6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	3310      	adds	r3, #16
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 ff62 	bl	8009e74 <xTaskRemoveFromEventList>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d007      	beq.n	8008fc6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008fb6:	4b54      	ldr	r3, [pc, #336]	; (8009108 <xQueueSemaphoreTake+0x214>)
 8008fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008fc6:	f7ff f9f5 	bl	80083b4 <vPortExitCritical>
				return pdPASS;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e097      	b.n	80090fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d111      	bne.n	8008ff8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	617b      	str	r3, [r7, #20]
}
 8008fec:	bf00      	nop
 8008fee:	e7fe      	b.n	8008fee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008ff0:	f7ff f9e0 	bl	80083b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e082      	b.n	80090fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d106      	bne.n	800900c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ffe:	f107 030c 	add.w	r3, r7, #12
 8009002:	4618      	mov	r0, r3
 8009004:	f000 ff9a 	bl	8009f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009008:	2301      	movs	r3, #1
 800900a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800900c:	f7ff f9d2 	bl	80083b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009010:	f000 fd0c 	bl	8009a2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009014:	f7ff f99e 	bl	8008354 <vPortEnterCritical>
 8009018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800901e:	b25b      	sxtb	r3, r3
 8009020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009024:	d103      	bne.n	800902e <xQueueSemaphoreTake+0x13a>
 8009026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800902e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009034:	b25b      	sxtb	r3, r3
 8009036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903a:	d103      	bne.n	8009044 <xQueueSemaphoreTake+0x150>
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009044:	f7ff f9b6 	bl	80083b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009048:	463a      	mov	r2, r7
 800904a:	f107 030c 	add.w	r3, r7, #12
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f000 ff89 	bl	8009f68 <xTaskCheckForTimeOut>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d132      	bne.n	80090c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800905c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800905e:	f000 f9f2 	bl	8009446 <prvIsQueueEmpty>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d026      	beq.n	80090b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d109      	bne.n	8009084 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009070:	f7ff f970 	bl	8008354 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	4618      	mov	r0, r3
 800907a:	f001 f8d7 	bl	800a22c <xTaskPriorityInherit>
 800907e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009080:	f7ff f998 	bl	80083b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	3324      	adds	r3, #36	; 0x24
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	4611      	mov	r1, r2
 800908c:	4618      	mov	r0, r3
 800908e:	f000 fea1 	bl	8009dd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009094:	f000 f985 	bl	80093a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009098:	f000 fcd6 	bl	8009a48 <xTaskResumeAll>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f47f af68 	bne.w	8008f74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80090a4:	4b18      	ldr	r3, [pc, #96]	; (8009108 <xQueueSemaphoreTake+0x214>)
 80090a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	e75e      	b.n	8008f74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80090b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090b8:	f000 f973 	bl	80093a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090bc:	f000 fcc4 	bl	8009a48 <xTaskResumeAll>
 80090c0:	e758      	b.n	8008f74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80090c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090c4:	f000 f96d 	bl	80093a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090c8:	f000 fcbe 	bl	8009a48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090ce:	f000 f9ba 	bl	8009446 <prvIsQueueEmpty>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f43f af4d 	beq.w	8008f74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00d      	beq.n	80090fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80090e0:	f7ff f938 	bl	8008354 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80090e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090e6:	f000 f8b4 	bl	8009252 <prvGetDisinheritPriorityAfterTimeout>
 80090ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80090ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090f2:	4618      	mov	r0, r3
 80090f4:	f001 f970 	bl	800a3d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80090f8:	f7ff f95c 	bl	80083b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3738      	adds	r7, #56	; 0x38
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08e      	sub	sp, #56	; 0x38
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	623b      	str	r3, [r7, #32]
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d103      	bne.n	8009146 <xQueueReceiveFromISR+0x3a>
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <xQueueReceiveFromISR+0x3e>
 8009146:	2301      	movs	r3, #1
 8009148:	e000      	b.n	800914c <xQueueReceiveFromISR+0x40>
 800914a:	2300      	movs	r3, #0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	61fb      	str	r3, [r7, #28]
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009166:	f7ff f9d7 	bl	8008518 <vPortValidateInterruptPriority>
	__asm volatile
 800916a:	f3ef 8211 	mrs	r2, BASEPRI
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	61ba      	str	r2, [r7, #24]
 8009180:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009182:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	2b00      	cmp	r3, #0
 8009190:	d02f      	beq.n	80091f2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800919c:	68b9      	ldr	r1, [r7, #8]
 800919e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091a0:	f000 f8d9 	bl	8009356 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	1e5a      	subs	r2, r3, #1
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80091ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b4:	d112      	bne.n	80091dc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d016      	beq.n	80091ec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	3310      	adds	r3, #16
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fe56 	bl	8009e74 <xTaskRemoveFromEventList>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00e      	beq.n	80091ec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	e007      	b.n	80091ec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80091dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091e0:	3301      	adds	r3, #1
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	b25a      	sxtb	r2, r3
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80091ec:	2301      	movs	r3, #1
 80091ee:	637b      	str	r3, [r7, #52]	; 0x34
 80091f0:	e001      	b.n	80091f6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	637b      	str	r3, [r7, #52]	; 0x34
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f383 8811 	msr	BASEPRI, r3
}
 8009200:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009204:	4618      	mov	r0, r3
 8009206:	3738      	adds	r7, #56	; 0x38
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10a      	bne.n	8009234 <vQueueDelete+0x28>
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	60bb      	str	r3, [r7, #8]
}
 8009230:	bf00      	nop
 8009232:	e7fe      	b.n	8009232 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f95f 	bl	80094f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009240:	2b00      	cmp	r3, #0
 8009242:	d102      	bne.n	800924a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f7fe fd89 	bl	8007d5c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800924a:	bf00      	nop
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009252:	b480      	push	{r7}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	d006      	beq.n	8009270 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	e001      	b.n	8009274 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009270:	2300      	movs	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009274:	68fb      	ldr	r3, [r7, #12]
	}
 8009276:	4618      	mov	r0, r3
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b086      	sub	sp, #24
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800928e:	2300      	movs	r3, #0
 8009290:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10d      	bne.n	80092bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d14d      	bne.n	8009344 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f001 f825 	bl	800a2fc <xTaskPriorityDisinherit>
 80092b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	609a      	str	r2, [r3, #8]
 80092ba:	e043      	b.n	8009344 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d119      	bne.n	80092f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6858      	ldr	r0, [r3, #4]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ca:	461a      	mov	r2, r3
 80092cc:	68b9      	ldr	r1, [r7, #8]
 80092ce:	f01e fb43 	bl	8027958 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092da:	441a      	add	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d32b      	bcc.n	8009344 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	605a      	str	r2, [r3, #4]
 80092f4:	e026      	b.n	8009344 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	68d8      	ldr	r0, [r3, #12]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fe:	461a      	mov	r2, r3
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	f01e fb29 	bl	8027958 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	68da      	ldr	r2, [r3, #12]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930e:	425b      	negs	r3, r3
 8009310:	441a      	add	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d207      	bcs.n	8009332 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	689a      	ldr	r2, [r3, #8]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	425b      	negs	r3, r3
 800932c:	441a      	add	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b02      	cmp	r3, #2
 8009336:	d105      	bne.n	8009344 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	3b01      	subs	r3, #1
 8009342:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800934c:	697b      	ldr	r3, [r7, #20]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d018      	beq.n	800939a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009370:	441a      	add	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68da      	ldr	r2, [r3, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	429a      	cmp	r2, r3
 8009380:	d303      	bcc.n	800938a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68d9      	ldr	r1, [r3, #12]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009392:	461a      	mov	r2, r3
 8009394:	6838      	ldr	r0, [r7, #0]
 8009396:	f01e fadf 	bl	8027958 <memcpy>
	}
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093aa:	f7fe ffd3 	bl	8008354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093b6:	e011      	b.n	80093dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d012      	beq.n	80093e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3324      	adds	r3, #36	; 0x24
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fd55 	bl	8009e74 <xTaskRemoveFromEventList>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093d0:	f000 fe2c 	bl	800a02c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	dce9      	bgt.n	80093b8 <prvUnlockQueue+0x16>
 80093e4:	e000      	b.n	80093e8 <prvUnlockQueue+0x46>
					break;
 80093e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	22ff      	movs	r2, #255	; 0xff
 80093ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80093f0:	f7fe ffe0 	bl	80083b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093f4:	f7fe ffae 	bl	8008354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009400:	e011      	b.n	8009426 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d012      	beq.n	8009430 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3310      	adds	r3, #16
 800940e:	4618      	mov	r0, r3
 8009410:	f000 fd30 	bl	8009e74 <xTaskRemoveFromEventList>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800941a:	f000 fe07 	bl	800a02c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	3b01      	subs	r3, #1
 8009422:	b2db      	uxtb	r3, r3
 8009424:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800942a:	2b00      	cmp	r3, #0
 800942c:	dce9      	bgt.n	8009402 <prvUnlockQueue+0x60>
 800942e:	e000      	b.n	8009432 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009430:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	22ff      	movs	r2, #255	; 0xff
 8009436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800943a:	f7fe ffbb 	bl	80083b4 <vPortExitCritical>
}
 800943e:	bf00      	nop
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800944e:	f7fe ff81 	bl	8008354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009456:	2b00      	cmp	r3, #0
 8009458:	d102      	bne.n	8009460 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800945a:	2301      	movs	r3, #1
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e001      	b.n	8009464 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009464:	f7fe ffa6 	bl	80083b4 <vPortExitCritical>

	return xReturn;
 8009468:	68fb      	ldr	r3, [r7, #12]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800947a:	f7fe ff6b 	bl	8008354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009486:	429a      	cmp	r2, r3
 8009488:	d102      	bne.n	8009490 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800948a:	2301      	movs	r3, #1
 800948c:	60fb      	str	r3, [r7, #12]
 800948e:	e001      	b.n	8009494 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009490:	2300      	movs	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009494:	f7fe ff8e 	bl	80083b4 <vPortExitCritical>

	return xReturn;
 8009498:	68fb      	ldr	r3, [r7, #12]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094ae:	2300      	movs	r3, #0
 80094b0:	60fb      	str	r3, [r7, #12]
 80094b2:	e014      	b.n	80094de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094b4:	4a0f      	ldr	r2, [pc, #60]	; (80094f4 <vQueueAddToRegistry+0x50>)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10b      	bne.n	80094d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80094c0:	490c      	ldr	r1, [pc, #48]	; (80094f4 <vQueueAddToRegistry+0x50>)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80094ca:	4a0a      	ldr	r2, [pc, #40]	; (80094f4 <vQueueAddToRegistry+0x50>)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	4413      	add	r3, r2
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094d6:	e006      	b.n	80094e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	60fb      	str	r3, [r7, #12]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b07      	cmp	r3, #7
 80094e2:	d9e7      	bls.n	80094b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	2400b420 	.word	0x2400b420

080094f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009500:	2300      	movs	r3, #0
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	e016      	b.n	8009534 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009506:	4a10      	ldr	r2, [pc, #64]	; (8009548 <vQueueUnregisterQueue+0x50>)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	4413      	add	r3, r2
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	429a      	cmp	r2, r3
 8009514:	d10b      	bne.n	800952e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009516:	4a0c      	ldr	r2, [pc, #48]	; (8009548 <vQueueUnregisterQueue+0x50>)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2100      	movs	r1, #0
 800951c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009520:	4a09      	ldr	r2, [pc, #36]	; (8009548 <vQueueUnregisterQueue+0x50>)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	4413      	add	r3, r2
 8009528:	2200      	movs	r2, #0
 800952a:	605a      	str	r2, [r3, #4]
				break;
 800952c:	e006      	b.n	800953c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3301      	adds	r3, #1
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b07      	cmp	r3, #7
 8009538:	d9e5      	bls.n	8009506 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800953a:	bf00      	nop
 800953c:	bf00      	nop
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	2400b420 	.word	0x2400b420

0800954c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800955c:	f7fe fefa 	bl	8008354 <vPortEnterCritical>
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009566:	b25b      	sxtb	r3, r3
 8009568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956c:	d103      	bne.n	8009576 <vQueueWaitForMessageRestricted+0x2a>
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800957c:	b25b      	sxtb	r3, r3
 800957e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009582:	d103      	bne.n	800958c <vQueueWaitForMessageRestricted+0x40>
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800958c:	f7fe ff12 	bl	80083b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009594:	2b00      	cmp	r3, #0
 8009596:	d106      	bne.n	80095a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	3324      	adds	r3, #36	; 0x24
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	68b9      	ldr	r1, [r7, #8]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 fc3b 	bl	8009e1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80095a6:	6978      	ldr	r0, [r7, #20]
 80095a8:	f7ff fefb 	bl	80093a2 <prvUnlockQueue>
	}
 80095ac:	bf00      	nop
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b08e      	sub	sp, #56	; 0x38
 80095b8:	af04      	add	r7, sp, #16
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10a      	bne.n	80095de <xTaskCreateStatic+0x2a>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	623b      	str	r3, [r7, #32]
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80095de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <xTaskCreateStatic+0x46>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	61fb      	str	r3, [r7, #28]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095fa:	235c      	movs	r3, #92	; 0x5c
 80095fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2b5c      	cmp	r3, #92	; 0x5c
 8009602:	d00a      	beq.n	800961a <xTaskCreateStatic+0x66>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	61bb      	str	r3, [r7, #24]
}
 8009616:	bf00      	nop
 8009618:	e7fe      	b.n	8009618 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800961a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961e:	2b00      	cmp	r3, #0
 8009620:	d01e      	beq.n	8009660 <xTaskCreateStatic+0xac>
 8009622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009624:	2b00      	cmp	r3, #0
 8009626:	d01b      	beq.n	8009660 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009630:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	2202      	movs	r2, #2
 8009636:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800963a:	2300      	movs	r3, #0
 800963c:	9303      	str	r3, [sp, #12]
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	9302      	str	r3, [sp, #8]
 8009642:	f107 0314 	add.w	r3, r7, #20
 8009646:	9301      	str	r3, [sp, #4]
 8009648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	68b9      	ldr	r1, [r7, #8]
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f000 f850 	bl	80096f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800965a:	f000 f8dd 	bl	8009818 <prvAddNewTaskToReadyList>
 800965e:	e001      	b.n	8009664 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009660:	2300      	movs	r3, #0
 8009662:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009664:	697b      	ldr	r3, [r7, #20]
	}
 8009666:	4618      	mov	r0, r3
 8009668:	3728      	adds	r7, #40	; 0x28
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800966e:	b580      	push	{r7, lr}
 8009670:	b08c      	sub	sp, #48	; 0x30
 8009672:	af04      	add	r7, sp, #16
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	60b9      	str	r1, [r7, #8]
 8009678:	603b      	str	r3, [r7, #0]
 800967a:	4613      	mov	r3, r2
 800967c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800967e:	88fb      	ldrh	r3, [r7, #6]
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fa9e 	bl	8007bc4 <pvPortMalloc>
 8009688:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00e      	beq.n	80096ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009690:	205c      	movs	r0, #92	; 0x5c
 8009692:	f7fe fa97 	bl	8007bc4 <pvPortMalloc>
 8009696:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	631a      	str	r2, [r3, #48]	; 0x30
 80096a4:	e005      	b.n	80096b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096a6:	6978      	ldr	r0, [r7, #20]
 80096a8:	f7fe fb58 	bl	8007d5c <vPortFree>
 80096ac:	e001      	b.n	80096b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d017      	beq.n	80096e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096c0:	88fa      	ldrh	r2, [r7, #6]
 80096c2:	2300      	movs	r3, #0
 80096c4:	9303      	str	r3, [sp, #12]
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	9302      	str	r3, [sp, #8]
 80096ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096cc:	9301      	str	r3, [sp, #4]
 80096ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	68b9      	ldr	r1, [r7, #8]
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 f80e 	bl	80096f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096dc:	69f8      	ldr	r0, [r7, #28]
 80096de:	f000 f89b 	bl	8009818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096e2:	2301      	movs	r3, #1
 80096e4:	61bb      	str	r3, [r7, #24]
 80096e6:	e002      	b.n	80096ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096e8:	f04f 33ff 	mov.w	r3, #4294967295
 80096ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096ee:	69bb      	ldr	r3, [r7, #24]
	}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3720      	adds	r7, #32
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
 8009704:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	461a      	mov	r2, r3
 8009710:	21a5      	movs	r1, #165	; 0xa5
 8009712:	f01e f92f 	bl	8027974 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800971a:	6879      	ldr	r1, [r7, #4]
 800971c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009720:	440b      	add	r3, r1
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	f023 0307 	bic.w	r3, r3, #7
 800972e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00a      	beq.n	8009750 <prvInitialiseNewTask+0x58>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	617b      	str	r3, [r7, #20]
}
 800974c:	bf00      	nop
 800974e:	e7fe      	b.n	800974e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d01f      	beq.n	8009796 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009756:	2300      	movs	r3, #0
 8009758:	61fb      	str	r3, [r7, #28]
 800975a:	e012      	b.n	8009782 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	4413      	add	r3, r2
 8009762:	7819      	ldrb	r1, [r3, #0]
 8009764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	4413      	add	r3, r2
 800976a:	3334      	adds	r3, #52	; 0x34
 800976c:	460a      	mov	r2, r1
 800976e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	4413      	add	r3, r2
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d006      	beq.n	800978a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	3301      	adds	r3, #1
 8009780:	61fb      	str	r3, [r7, #28]
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	2b0f      	cmp	r3, #15
 8009786:	d9e9      	bls.n	800975c <prvInitialiseNewTask+0x64>
 8009788:	e000      	b.n	800978c <prvInitialiseNewTask+0x94>
			{
				break;
 800978a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	2200      	movs	r2, #0
 8009790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009794:	e003      	b.n	800979e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	2b37      	cmp	r3, #55	; 0x37
 80097a2:	d901      	bls.n	80097a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097a4:	2337      	movs	r3, #55	; 0x37
 80097a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	2200      	movs	r2, #0
 80097b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097bc:	3304      	adds	r3, #4
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fe fc0a 	bl	8007fd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	3318      	adds	r3, #24
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fe fc05 	bl	8007fd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	2200      	movs	r2, #0
 80097e8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	68f9      	ldr	r1, [r7, #12]
 80097f6:	69b8      	ldr	r0, [r7, #24]
 80097f8:	f7fe fc82 	bl	8008100 <pxPortInitialiseStack>
 80097fc:	4602      	mov	r2, r0
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800980c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800980e:	bf00      	nop
 8009810:	3720      	adds	r7, #32
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
	...

08009818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009820:	f7fe fd98 	bl	8008354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009824:	4b2d      	ldr	r3, [pc, #180]	; (80098dc <prvAddNewTaskToReadyList+0xc4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3301      	adds	r3, #1
 800982a:	4a2c      	ldr	r2, [pc, #176]	; (80098dc <prvAddNewTaskToReadyList+0xc4>)
 800982c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800982e:	4b2c      	ldr	r3, [pc, #176]	; (80098e0 <prvAddNewTaskToReadyList+0xc8>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009836:	4a2a      	ldr	r2, [pc, #168]	; (80098e0 <prvAddNewTaskToReadyList+0xc8>)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800983c:	4b27      	ldr	r3, [pc, #156]	; (80098dc <prvAddNewTaskToReadyList+0xc4>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d110      	bne.n	8009866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009844:	f000 fc16 	bl	800a074 <prvInitialiseTaskLists>
 8009848:	e00d      	b.n	8009866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800984a:	4b26      	ldr	r3, [pc, #152]	; (80098e4 <prvAddNewTaskToReadyList+0xcc>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d109      	bne.n	8009866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009852:	4b23      	ldr	r3, [pc, #140]	; (80098e0 <prvAddNewTaskToReadyList+0xc8>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	429a      	cmp	r2, r3
 800985e:	d802      	bhi.n	8009866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009860:	4a1f      	ldr	r2, [pc, #124]	; (80098e0 <prvAddNewTaskToReadyList+0xc8>)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009866:	4b20      	ldr	r3, [pc, #128]	; (80098e8 <prvAddNewTaskToReadyList+0xd0>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3301      	adds	r3, #1
 800986c:	4a1e      	ldr	r2, [pc, #120]	; (80098e8 <prvAddNewTaskToReadyList+0xd0>)
 800986e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009870:	4b1d      	ldr	r3, [pc, #116]	; (80098e8 <prvAddNewTaskToReadyList+0xd0>)
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987c:	4b1b      	ldr	r3, [pc, #108]	; (80098ec <prvAddNewTaskToReadyList+0xd4>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d903      	bls.n	800988c <prvAddNewTaskToReadyList+0x74>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	4a18      	ldr	r2, [pc, #96]	; (80098ec <prvAddNewTaskToReadyList+0xd4>)
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4a15      	ldr	r2, [pc, #84]	; (80098f0 <prvAddNewTaskToReadyList+0xd8>)
 800989a:	441a      	add	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	3304      	adds	r3, #4
 80098a0:	4619      	mov	r1, r3
 80098a2:	4610      	mov	r0, r2
 80098a4:	f7fe fba5 	bl	8007ff2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098a8:	f7fe fd84 	bl	80083b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098ac:	4b0d      	ldr	r3, [pc, #52]	; (80098e4 <prvAddNewTaskToReadyList+0xcc>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00e      	beq.n	80098d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098b4:	4b0a      	ldr	r3, [pc, #40]	; (80098e0 <prvAddNewTaskToReadyList+0xc8>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098be:	429a      	cmp	r2, r3
 80098c0:	d207      	bcs.n	80098d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098c2:	4b0c      	ldr	r3, [pc, #48]	; (80098f4 <prvAddNewTaskToReadyList+0xdc>)
 80098c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	2400a220 	.word	0x2400a220
 80098e0:	24009d4c 	.word	0x24009d4c
 80098e4:	2400a22c 	.word	0x2400a22c
 80098e8:	2400a23c 	.word	0x2400a23c
 80098ec:	2400a228 	.word	0x2400a228
 80098f0:	24009d50 	.word	0x24009d50
 80098f4:	e000ed04 	.word	0xe000ed04

080098f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009900:	2300      	movs	r3, #0
 8009902:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d017      	beq.n	800993a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800990a:	4b13      	ldr	r3, [pc, #76]	; (8009958 <vTaskDelay+0x60>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <vTaskDelay+0x30>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	60bb      	str	r3, [r7, #8]
}
 8009924:	bf00      	nop
 8009926:	e7fe      	b.n	8009926 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009928:	f000 f880 	bl	8009a2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800992c:	2100      	movs	r1, #0
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fde8 	bl	800a504 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009934:	f000 f888 	bl	8009a48 <xTaskResumeAll>
 8009938:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d107      	bne.n	8009950 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009940:	4b06      	ldr	r3, [pc, #24]	; (800995c <vTaskDelay+0x64>)
 8009942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	2400a248 	.word	0x2400a248
 800995c:	e000ed04 	.word	0xe000ed04

08009960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08a      	sub	sp, #40	; 0x28
 8009964:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009966:	2300      	movs	r3, #0
 8009968:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800996a:	2300      	movs	r3, #0
 800996c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800996e:	463a      	mov	r2, r7
 8009970:	1d39      	adds	r1, r7, #4
 8009972:	f107 0308 	add.w	r3, r7, #8
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe f8f0 	bl	8007b5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	9202      	str	r2, [sp, #8]
 8009984:	9301      	str	r3, [sp, #4]
 8009986:	2300      	movs	r3, #0
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	2300      	movs	r3, #0
 800998c:	460a      	mov	r2, r1
 800998e:	4921      	ldr	r1, [pc, #132]	; (8009a14 <vTaskStartScheduler+0xb4>)
 8009990:	4821      	ldr	r0, [pc, #132]	; (8009a18 <vTaskStartScheduler+0xb8>)
 8009992:	f7ff fe0f 	bl	80095b4 <xTaskCreateStatic>
 8009996:	4603      	mov	r3, r0
 8009998:	4a20      	ldr	r2, [pc, #128]	; (8009a1c <vTaskStartScheduler+0xbc>)
 800999a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800999c:	4b1f      	ldr	r3, [pc, #124]	; (8009a1c <vTaskStartScheduler+0xbc>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099a4:	2301      	movs	r3, #1
 80099a6:	617b      	str	r3, [r7, #20]
 80099a8:	e001      	b.n	80099ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d102      	bne.n	80099ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099b4:	f000 fdfa 	bl	800a5ac <xTimerCreateTimerTask>
 80099b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d116      	bne.n	80099ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	613b      	str	r3, [r7, #16]
}
 80099d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099d4:	4b12      	ldr	r3, [pc, #72]	; (8009a20 <vTaskStartScheduler+0xc0>)
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099dc:	4b11      	ldr	r3, [pc, #68]	; (8009a24 <vTaskStartScheduler+0xc4>)
 80099de:	2201      	movs	r2, #1
 80099e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099e2:	4b11      	ldr	r3, [pc, #68]	; (8009a28 <vTaskStartScheduler+0xc8>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099e8:	f7fe fc12 	bl	8008210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099ec:	e00e      	b.n	8009a0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f4:	d10a      	bne.n	8009a0c <vTaskStartScheduler+0xac>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	60fb      	str	r3, [r7, #12]
}
 8009a08:	bf00      	nop
 8009a0a:	e7fe      	b.n	8009a0a <vTaskStartScheduler+0xaa>
}
 8009a0c:	bf00      	nop
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	0802936c 	.word	0x0802936c
 8009a18:	0800a045 	.word	0x0800a045
 8009a1c:	2400a244 	.word	0x2400a244
 8009a20:	2400a240 	.word	0x2400a240
 8009a24:	2400a22c 	.word	0x2400a22c
 8009a28:	2400a224 	.word	0x2400a224

08009a2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a30:	4b04      	ldr	r3, [pc, #16]	; (8009a44 <vTaskSuspendAll+0x18>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3301      	adds	r3, #1
 8009a36:	4a03      	ldr	r2, [pc, #12]	; (8009a44 <vTaskSuspendAll+0x18>)
 8009a38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a3a:	bf00      	nop
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	2400a248 	.word	0x2400a248

08009a48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a56:	4b42      	ldr	r3, [pc, #264]	; (8009b60 <xTaskResumeAll+0x118>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10a      	bne.n	8009a74 <xTaskResumeAll+0x2c>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	603b      	str	r3, [r7, #0]
}
 8009a70:	bf00      	nop
 8009a72:	e7fe      	b.n	8009a72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a74:	f7fe fc6e 	bl	8008354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a78:	4b39      	ldr	r3, [pc, #228]	; (8009b60 <xTaskResumeAll+0x118>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	4a38      	ldr	r2, [pc, #224]	; (8009b60 <xTaskResumeAll+0x118>)
 8009a80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a82:	4b37      	ldr	r3, [pc, #220]	; (8009b60 <xTaskResumeAll+0x118>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d162      	bne.n	8009b50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a8a:	4b36      	ldr	r3, [pc, #216]	; (8009b64 <xTaskResumeAll+0x11c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d05e      	beq.n	8009b50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a92:	e02f      	b.n	8009af4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a94:	4b34      	ldr	r3, [pc, #208]	; (8009b68 <xTaskResumeAll+0x120>)
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	3318      	adds	r3, #24
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fb03 	bl	80080ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fafe 	bl	80080ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab4:	4b2d      	ldr	r3, [pc, #180]	; (8009b6c <xTaskResumeAll+0x124>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d903      	bls.n	8009ac4 <xTaskResumeAll+0x7c>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac0:	4a2a      	ldr	r2, [pc, #168]	; (8009b6c <xTaskResumeAll+0x124>)
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4a27      	ldr	r2, [pc, #156]	; (8009b70 <xTaskResumeAll+0x128>)
 8009ad2:	441a      	add	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f7fe fa89 	bl	8007ff2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae4:	4b23      	ldr	r3, [pc, #140]	; (8009b74 <xTaskResumeAll+0x12c>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d302      	bcc.n	8009af4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009aee:	4b22      	ldr	r3, [pc, #136]	; (8009b78 <xTaskResumeAll+0x130>)
 8009af0:	2201      	movs	r2, #1
 8009af2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009af4:	4b1c      	ldr	r3, [pc, #112]	; (8009b68 <xTaskResumeAll+0x120>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1cb      	bne.n	8009a94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b02:	f000 fb55 	bl	800a1b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b06:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <xTaskResumeAll+0x134>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d010      	beq.n	8009b34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b12:	f000 f847 	bl	8009ba4 <xTaskIncrementTick>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d002      	beq.n	8009b22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b1c:	4b16      	ldr	r3, [pc, #88]	; (8009b78 <xTaskResumeAll+0x130>)
 8009b1e:	2201      	movs	r2, #1
 8009b20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1f1      	bne.n	8009b12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b2e:	4b13      	ldr	r3, [pc, #76]	; (8009b7c <xTaskResumeAll+0x134>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b34:	4b10      	ldr	r3, [pc, #64]	; (8009b78 <xTaskResumeAll+0x130>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d009      	beq.n	8009b50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b40:	4b0f      	ldr	r3, [pc, #60]	; (8009b80 <xTaskResumeAll+0x138>)
 8009b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b50:	f7fe fc30 	bl	80083b4 <vPortExitCritical>

	return xAlreadyYielded;
 8009b54:	68bb      	ldr	r3, [r7, #8]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	2400a248 	.word	0x2400a248
 8009b64:	2400a220 	.word	0x2400a220
 8009b68:	2400a1e0 	.word	0x2400a1e0
 8009b6c:	2400a228 	.word	0x2400a228
 8009b70:	24009d50 	.word	0x24009d50
 8009b74:	24009d4c 	.word	0x24009d4c
 8009b78:	2400a234 	.word	0x2400a234
 8009b7c:	2400a230 	.word	0x2400a230
 8009b80:	e000ed04 	.word	0xe000ed04

08009b84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b8a:	4b05      	ldr	r3, [pc, #20]	; (8009ba0 <xTaskGetTickCount+0x1c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b90:	687b      	ldr	r3, [r7, #4]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	2400a224 	.word	0x2400a224

08009ba4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009baa:	2300      	movs	r3, #0
 8009bac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bae:	4b4f      	ldr	r3, [pc, #316]	; (8009cec <xTaskIncrementTick+0x148>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f040 808f 	bne.w	8009cd6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bb8:	4b4d      	ldr	r3, [pc, #308]	; (8009cf0 <xTaskIncrementTick+0x14c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bc0:	4a4b      	ldr	r2, [pc, #300]	; (8009cf0 <xTaskIncrementTick+0x14c>)
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d120      	bne.n	8009c0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bcc:	4b49      	ldr	r3, [pc, #292]	; (8009cf4 <xTaskIncrementTick+0x150>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00a      	beq.n	8009bec <xTaskIncrementTick+0x48>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	603b      	str	r3, [r7, #0]
}
 8009be8:	bf00      	nop
 8009bea:	e7fe      	b.n	8009bea <xTaskIncrementTick+0x46>
 8009bec:	4b41      	ldr	r3, [pc, #260]	; (8009cf4 <xTaskIncrementTick+0x150>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	60fb      	str	r3, [r7, #12]
 8009bf2:	4b41      	ldr	r3, [pc, #260]	; (8009cf8 <xTaskIncrementTick+0x154>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a3f      	ldr	r2, [pc, #252]	; (8009cf4 <xTaskIncrementTick+0x150>)
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	4a3f      	ldr	r2, [pc, #252]	; (8009cf8 <xTaskIncrementTick+0x154>)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6013      	str	r3, [r2, #0]
 8009c00:	4b3e      	ldr	r3, [pc, #248]	; (8009cfc <xTaskIncrementTick+0x158>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3301      	adds	r3, #1
 8009c06:	4a3d      	ldr	r2, [pc, #244]	; (8009cfc <xTaskIncrementTick+0x158>)
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	f000 fad1 	bl	800a1b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c0e:	4b3c      	ldr	r3, [pc, #240]	; (8009d00 <xTaskIncrementTick+0x15c>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d349      	bcc.n	8009cac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c18:	4b36      	ldr	r3, [pc, #216]	; (8009cf4 <xTaskIncrementTick+0x150>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d104      	bne.n	8009c2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c22:	4b37      	ldr	r3, [pc, #220]	; (8009d00 <xTaskIncrementTick+0x15c>)
 8009c24:	f04f 32ff 	mov.w	r2, #4294967295
 8009c28:	601a      	str	r2, [r3, #0]
					break;
 8009c2a:	e03f      	b.n	8009cac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c2c:	4b31      	ldr	r3, [pc, #196]	; (8009cf4 <xTaskIncrementTick+0x150>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d203      	bcs.n	8009c4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c44:	4a2e      	ldr	r2, [pc, #184]	; (8009d00 <xTaskIncrementTick+0x15c>)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c4a:	e02f      	b.n	8009cac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fa2b 	bl	80080ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d004      	beq.n	8009c68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	3318      	adds	r3, #24
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe fa22 	bl	80080ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6c:	4b25      	ldr	r3, [pc, #148]	; (8009d04 <xTaskIncrementTick+0x160>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d903      	bls.n	8009c7c <xTaskIncrementTick+0xd8>
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c78:	4a22      	ldr	r2, [pc, #136]	; (8009d04 <xTaskIncrementTick+0x160>)
 8009c7a:	6013      	str	r3, [r2, #0]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c80:	4613      	mov	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4a1f      	ldr	r2, [pc, #124]	; (8009d08 <xTaskIncrementTick+0x164>)
 8009c8a:	441a      	add	r2, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	4619      	mov	r1, r3
 8009c92:	4610      	mov	r0, r2
 8009c94:	f7fe f9ad 	bl	8007ff2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9c:	4b1b      	ldr	r3, [pc, #108]	; (8009d0c <xTaskIncrementTick+0x168>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d3b8      	bcc.n	8009c18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009caa:	e7b5      	b.n	8009c18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cac:	4b17      	ldr	r3, [pc, #92]	; (8009d0c <xTaskIncrementTick+0x168>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb2:	4915      	ldr	r1, [pc, #84]	; (8009d08 <xTaskIncrementTick+0x164>)
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	440b      	add	r3, r1
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d901      	bls.n	8009cc8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009cc8:	4b11      	ldr	r3, [pc, #68]	; (8009d10 <xTaskIncrementTick+0x16c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d007      	beq.n	8009ce0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	617b      	str	r3, [r7, #20]
 8009cd4:	e004      	b.n	8009ce0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <xTaskIncrementTick+0x170>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	4a0d      	ldr	r2, [pc, #52]	; (8009d14 <xTaskIncrementTick+0x170>)
 8009cde:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ce0:	697b      	ldr	r3, [r7, #20]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	2400a248 	.word	0x2400a248
 8009cf0:	2400a224 	.word	0x2400a224
 8009cf4:	2400a1d8 	.word	0x2400a1d8
 8009cf8:	2400a1dc 	.word	0x2400a1dc
 8009cfc:	2400a238 	.word	0x2400a238
 8009d00:	2400a240 	.word	0x2400a240
 8009d04:	2400a228 	.word	0x2400a228
 8009d08:	24009d50 	.word	0x24009d50
 8009d0c:	24009d4c 	.word	0x24009d4c
 8009d10:	2400a234 	.word	0x2400a234
 8009d14:	2400a230 	.word	0x2400a230

08009d18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d1e:	4b28      	ldr	r3, [pc, #160]	; (8009dc0 <vTaskSwitchContext+0xa8>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d26:	4b27      	ldr	r3, [pc, #156]	; (8009dc4 <vTaskSwitchContext+0xac>)
 8009d28:	2201      	movs	r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d2c:	e041      	b.n	8009db2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009d2e:	4b25      	ldr	r3, [pc, #148]	; (8009dc4 <vTaskSwitchContext+0xac>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d34:	4b24      	ldr	r3, [pc, #144]	; (8009dc8 <vTaskSwitchContext+0xb0>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	60fb      	str	r3, [r7, #12]
 8009d3a:	e010      	b.n	8009d5e <vTaskSwitchContext+0x46>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10a      	bne.n	8009d58 <vTaskSwitchContext+0x40>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	607b      	str	r3, [r7, #4]
}
 8009d54:	bf00      	nop
 8009d56:	e7fe      	b.n	8009d56 <vTaskSwitchContext+0x3e>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	491b      	ldr	r1, [pc, #108]	; (8009dcc <vTaskSwitchContext+0xb4>)
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	440b      	add	r3, r1
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0e4      	beq.n	8009d3c <vTaskSwitchContext+0x24>
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	4613      	mov	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4a13      	ldr	r2, [pc, #76]	; (8009dcc <vTaskSwitchContext+0xb4>)
 8009d7e:	4413      	add	r3, r2
 8009d80:	60bb      	str	r3, [r7, #8]
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	605a      	str	r2, [r3, #4]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	3308      	adds	r3, #8
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d104      	bne.n	8009da2 <vTaskSwitchContext+0x8a>
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	605a      	str	r2, [r3, #4]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	4a09      	ldr	r2, [pc, #36]	; (8009dd0 <vTaskSwitchContext+0xb8>)
 8009daa:	6013      	str	r3, [r2, #0]
 8009dac:	4a06      	ldr	r2, [pc, #24]	; (8009dc8 <vTaskSwitchContext+0xb0>)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6013      	str	r3, [r2, #0]
}
 8009db2:	bf00      	nop
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	2400a248 	.word	0x2400a248
 8009dc4:	2400a234 	.word	0x2400a234
 8009dc8:	2400a228 	.word	0x2400a228
 8009dcc:	24009d50 	.word	0x24009d50
 8009dd0:	24009d4c 	.word	0x24009d4c

08009dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	60fb      	str	r3, [r7, #12]
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dfa:	4b07      	ldr	r3, [pc, #28]	; (8009e18 <vTaskPlaceOnEventList+0x44>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3318      	adds	r3, #24
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7fe f919 	bl	800803a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e08:	2101      	movs	r1, #1
 8009e0a:	6838      	ldr	r0, [r7, #0]
 8009e0c:	f000 fb7a 	bl	800a504 <prvAddCurrentTaskToDelayedList>
}
 8009e10:	bf00      	nop
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	24009d4c 	.word	0x24009d4c

08009e1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10a      	bne.n	8009e44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	617b      	str	r3, [r7, #20]
}
 8009e40:	bf00      	nop
 8009e42:	e7fe      	b.n	8009e42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e44:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3318      	adds	r3, #24
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7fe f8d0 	bl	8007ff2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e58:	f04f 33ff 	mov.w	r3, #4294967295
 8009e5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	68b8      	ldr	r0, [r7, #8]
 8009e62:	f000 fb4f 	bl	800a504 <prvAddCurrentTaskToDelayedList>
	}
 8009e66:	bf00      	nop
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	24009d4c 	.word	0x24009d4c

08009e74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10a      	bne.n	8009ea0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	60fb      	str	r3, [r7, #12]
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	3318      	adds	r3, #24
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fe f901 	bl	80080ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eaa:	4b1e      	ldr	r3, [pc, #120]	; (8009f24 <xTaskRemoveFromEventList+0xb0>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d11d      	bne.n	8009eee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe f8f8 	bl	80080ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec0:	4b19      	ldr	r3, [pc, #100]	; (8009f28 <xTaskRemoveFromEventList+0xb4>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d903      	bls.n	8009ed0 <xTaskRemoveFromEventList+0x5c>
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	4a16      	ldr	r2, [pc, #88]	; (8009f28 <xTaskRemoveFromEventList+0xb4>)
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4a13      	ldr	r2, [pc, #76]	; (8009f2c <xTaskRemoveFromEventList+0xb8>)
 8009ede:	441a      	add	r2, r3
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	f7fe f883 	bl	8007ff2 <vListInsertEnd>
 8009eec:	e005      	b.n	8009efa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	3318      	adds	r3, #24
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	480e      	ldr	r0, [pc, #56]	; (8009f30 <xTaskRemoveFromEventList+0xbc>)
 8009ef6:	f7fe f87c 	bl	8007ff2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efe:	4b0d      	ldr	r3, [pc, #52]	; (8009f34 <xTaskRemoveFromEventList+0xc0>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d905      	bls.n	8009f14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <xTaskRemoveFromEventList+0xc4>)
 8009f0e:	2201      	movs	r2, #1
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	e001      	b.n	8009f18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f18:	697b      	ldr	r3, [r7, #20]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	2400a248 	.word	0x2400a248
 8009f28:	2400a228 	.word	0x2400a228
 8009f2c:	24009d50 	.word	0x24009d50
 8009f30:	2400a1e0 	.word	0x2400a1e0
 8009f34:	24009d4c 	.word	0x24009d4c
 8009f38:	2400a234 	.word	0x2400a234

08009f3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f44:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <vTaskInternalSetTimeOutState+0x24>)
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f4c:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <vTaskInternalSetTimeOutState+0x28>)
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	605a      	str	r2, [r3, #4]
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	2400a238 	.word	0x2400a238
 8009f64:	2400a224 	.word	0x2400a224

08009f68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	613b      	str	r3, [r7, #16]
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	60fb      	str	r3, [r7, #12]
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009faa:	f7fe f9d3 	bl	8008354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fae:	4b1d      	ldr	r3, [pc, #116]	; (800a024 <xTaskCheckForTimeOut+0xbc>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	69ba      	ldr	r2, [r7, #24]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc6:	d102      	bne.n	8009fce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	61fb      	str	r3, [r7, #28]
 8009fcc:	e023      	b.n	800a016 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	4b15      	ldr	r3, [pc, #84]	; (800a028 <xTaskCheckForTimeOut+0xc0>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d007      	beq.n	8009fea <xTaskCheckForTimeOut+0x82>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	69ba      	ldr	r2, [r7, #24]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d302      	bcc.n	8009fea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	61fb      	str	r3, [r7, #28]
 8009fe8:	e015      	b.n	800a016 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d20b      	bcs.n	800a00c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	1ad2      	subs	r2, r2, r3
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff ff9b 	bl	8009f3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a006:	2300      	movs	r3, #0
 800a008:	61fb      	str	r3, [r7, #28]
 800a00a:	e004      	b.n	800a016 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a012:	2301      	movs	r3, #1
 800a014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a016:	f7fe f9cd 	bl	80083b4 <vPortExitCritical>

	return xReturn;
 800a01a:	69fb      	ldr	r3, [r7, #28]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3720      	adds	r7, #32
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	2400a224 	.word	0x2400a224
 800a028:	2400a238 	.word	0x2400a238

0800a02c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a030:	4b03      	ldr	r3, [pc, #12]	; (800a040 <vTaskMissedYield+0x14>)
 800a032:	2201      	movs	r2, #1
 800a034:	601a      	str	r2, [r3, #0]
}
 800a036:	bf00      	nop
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	2400a234 	.word	0x2400a234

0800a044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a04c:	f000 f852 	bl	800a0f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a050:	4b06      	ldr	r3, [pc, #24]	; (800a06c <prvIdleTask+0x28>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d9f9      	bls.n	800a04c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a058:	4b05      	ldr	r3, [pc, #20]	; (800a070 <prvIdleTask+0x2c>)
 800a05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a068:	e7f0      	b.n	800a04c <prvIdleTask+0x8>
 800a06a:	bf00      	nop
 800a06c:	24009d50 	.word	0x24009d50
 800a070:	e000ed04 	.word	0xe000ed04

0800a074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a07a:	2300      	movs	r3, #0
 800a07c:	607b      	str	r3, [r7, #4]
 800a07e:	e00c      	b.n	800a09a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	4613      	mov	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4a12      	ldr	r2, [pc, #72]	; (800a0d4 <prvInitialiseTaskLists+0x60>)
 800a08c:	4413      	add	r3, r2
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fd ff82 	bl	8007f98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3301      	adds	r3, #1
 800a098:	607b      	str	r3, [r7, #4]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b37      	cmp	r3, #55	; 0x37
 800a09e:	d9ef      	bls.n	800a080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0a0:	480d      	ldr	r0, [pc, #52]	; (800a0d8 <prvInitialiseTaskLists+0x64>)
 800a0a2:	f7fd ff79 	bl	8007f98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0a6:	480d      	ldr	r0, [pc, #52]	; (800a0dc <prvInitialiseTaskLists+0x68>)
 800a0a8:	f7fd ff76 	bl	8007f98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0ac:	480c      	ldr	r0, [pc, #48]	; (800a0e0 <prvInitialiseTaskLists+0x6c>)
 800a0ae:	f7fd ff73 	bl	8007f98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0b2:	480c      	ldr	r0, [pc, #48]	; (800a0e4 <prvInitialiseTaskLists+0x70>)
 800a0b4:	f7fd ff70 	bl	8007f98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0b8:	480b      	ldr	r0, [pc, #44]	; (800a0e8 <prvInitialiseTaskLists+0x74>)
 800a0ba:	f7fd ff6d 	bl	8007f98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0be:	4b0b      	ldr	r3, [pc, #44]	; (800a0ec <prvInitialiseTaskLists+0x78>)
 800a0c0:	4a05      	ldr	r2, [pc, #20]	; (800a0d8 <prvInitialiseTaskLists+0x64>)
 800a0c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0c4:	4b0a      	ldr	r3, [pc, #40]	; (800a0f0 <prvInitialiseTaskLists+0x7c>)
 800a0c6:	4a05      	ldr	r2, [pc, #20]	; (800a0dc <prvInitialiseTaskLists+0x68>)
 800a0c8:	601a      	str	r2, [r3, #0]
}
 800a0ca:	bf00      	nop
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	24009d50 	.word	0x24009d50
 800a0d8:	2400a1b0 	.word	0x2400a1b0
 800a0dc:	2400a1c4 	.word	0x2400a1c4
 800a0e0:	2400a1e0 	.word	0x2400a1e0
 800a0e4:	2400a1f4 	.word	0x2400a1f4
 800a0e8:	2400a20c 	.word	0x2400a20c
 800a0ec:	2400a1d8 	.word	0x2400a1d8
 800a0f0:	2400a1dc 	.word	0x2400a1dc

0800a0f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0fa:	e019      	b.n	800a130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0fc:	f7fe f92a 	bl	8008354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a100:	4b10      	ldr	r3, [pc, #64]	; (800a144 <prvCheckTasksWaitingTermination+0x50>)
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3304      	adds	r3, #4
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fd ffcd 	bl	80080ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a112:	4b0d      	ldr	r3, [pc, #52]	; (800a148 <prvCheckTasksWaitingTermination+0x54>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3b01      	subs	r3, #1
 800a118:	4a0b      	ldr	r2, [pc, #44]	; (800a148 <prvCheckTasksWaitingTermination+0x54>)
 800a11a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a11c:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <prvCheckTasksWaitingTermination+0x58>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3b01      	subs	r3, #1
 800a122:	4a0a      	ldr	r2, [pc, #40]	; (800a14c <prvCheckTasksWaitingTermination+0x58>)
 800a124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a126:	f7fe f945 	bl	80083b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f810 	bl	800a150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a130:	4b06      	ldr	r3, [pc, #24]	; (800a14c <prvCheckTasksWaitingTermination+0x58>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1e1      	bne.n	800a0fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a138:	bf00      	nop
 800a13a:	bf00      	nop
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	2400a1f4 	.word	0x2400a1f4
 800a148:	2400a220 	.word	0x2400a220
 800a14c:	2400a208 	.word	0x2400a208

0800a150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d108      	bne.n	800a174 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	4618      	mov	r0, r3
 800a168:	f7fd fdf8 	bl	8007d5c <vPortFree>
				vPortFree( pxTCB );
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7fd fdf5 	bl	8007d5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a172:	e018      	b.n	800a1a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d103      	bne.n	800a186 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7fd fdec 	bl	8007d5c <vPortFree>
	}
 800a184:	e00f      	b.n	800a1a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d00a      	beq.n	800a1a6 <prvDeleteTCB+0x56>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	60fb      	str	r3, [r7, #12]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <prvDeleteTCB+0x54>
	}
 800a1a6:	bf00      	nop
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
	...

0800a1b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <prvResetNextTaskUnblockTime+0x38>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d104      	bne.n	800a1ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1c0:	4b0a      	ldr	r3, [pc, #40]	; (800a1ec <prvResetNextTaskUnblockTime+0x3c>)
 800a1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1c8:	e008      	b.n	800a1dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ca:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <prvResetNextTaskUnblockTime+0x38>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	4a04      	ldr	r2, [pc, #16]	; (800a1ec <prvResetNextTaskUnblockTime+0x3c>)
 800a1da:	6013      	str	r3, [r2, #0]
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	2400a1d8 	.word	0x2400a1d8
 800a1ec:	2400a240 	.word	0x2400a240

0800a1f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <xTaskGetSchedulerState+0x34>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d102      	bne.n	800a204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1fe:	2301      	movs	r3, #1
 800a200:	607b      	str	r3, [r7, #4]
 800a202:	e008      	b.n	800a216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a204:	4b08      	ldr	r3, [pc, #32]	; (800a228 <xTaskGetSchedulerState+0x38>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d102      	bne.n	800a212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a20c:	2302      	movs	r3, #2
 800a20e:	607b      	str	r3, [r7, #4]
 800a210:	e001      	b.n	800a216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a212:	2300      	movs	r3, #0
 800a214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a216:	687b      	ldr	r3, [r7, #4]
	}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	2400a22c 	.word	0x2400a22c
 800a228:	2400a248 	.word	0x2400a248

0800a22c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a238:	2300      	movs	r3, #0
 800a23a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d051      	beq.n	800a2e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a246:	4b2a      	ldr	r3, [pc, #168]	; (800a2f0 <xTaskPriorityInherit+0xc4>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d241      	bcs.n	800a2d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	2b00      	cmp	r3, #0
 800a256:	db06      	blt.n	800a266 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a258:	4b25      	ldr	r3, [pc, #148]	; (800a2f0 <xTaskPriorityInherit+0xc4>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	6959      	ldr	r1, [r3, #20]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26e:	4613      	mov	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4a1f      	ldr	r2, [pc, #124]	; (800a2f4 <xTaskPriorityInherit+0xc8>)
 800a278:	4413      	add	r3, r2
 800a27a:	4299      	cmp	r1, r3
 800a27c:	d122      	bne.n	800a2c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	3304      	adds	r3, #4
 800a282:	4618      	mov	r0, r3
 800a284:	f7fd ff12 	bl	80080ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a288:	4b19      	ldr	r3, [pc, #100]	; (800a2f0 <xTaskPriorityInherit+0xc4>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a296:	4b18      	ldr	r3, [pc, #96]	; (800a2f8 <xTaskPriorityInherit+0xcc>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d903      	bls.n	800a2a6 <xTaskPriorityInherit+0x7a>
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a2:	4a15      	ldr	r2, [pc, #84]	; (800a2f8 <xTaskPriorityInherit+0xcc>)
 800a2a4:	6013      	str	r3, [r2, #0]
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4413      	add	r3, r2
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4a10      	ldr	r2, [pc, #64]	; (800a2f4 <xTaskPriorityInherit+0xc8>)
 800a2b4:	441a      	add	r2, r3
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	4610      	mov	r0, r2
 800a2be:	f7fd fe98 	bl	8007ff2 <vListInsertEnd>
 800a2c2:	e004      	b.n	800a2ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2c4:	4b0a      	ldr	r3, [pc, #40]	; (800a2f0 <xTaskPriorityInherit+0xc4>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
 800a2d2:	e008      	b.n	800a2e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2d8:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <xTaskPriorityInherit+0xc4>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d201      	bcs.n	800a2e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
	}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	24009d4c 	.word	0x24009d4c
 800a2f4:	24009d50 	.word	0x24009d50
 800a2f8:	2400a228 	.word	0x2400a228

0800a2fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a308:	2300      	movs	r3, #0
 800a30a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d056      	beq.n	800a3c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a312:	4b2e      	ldr	r3, [pc, #184]	; (800a3cc <xTaskPriorityDisinherit+0xd0>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d00a      	beq.n	800a332 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	60fb      	str	r3, [r7, #12]
}
 800a32e:	bf00      	nop
 800a330:	e7fe      	b.n	800a330 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10a      	bne.n	800a350 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	60bb      	str	r3, [r7, #8]
}
 800a34c:	bf00      	nop
 800a34e:	e7fe      	b.n	800a34e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a354:	1e5a      	subs	r2, r3, #1
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a362:	429a      	cmp	r2, r3
 800a364:	d02c      	beq.n	800a3c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d128      	bne.n	800a3c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	3304      	adds	r3, #4
 800a372:	4618      	mov	r0, r3
 800a374:	f7fd fe9a 	bl	80080ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a384:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a390:	4b0f      	ldr	r3, [pc, #60]	; (800a3d0 <xTaskPriorityDisinherit+0xd4>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	429a      	cmp	r2, r3
 800a396:	d903      	bls.n	800a3a0 <xTaskPriorityDisinherit+0xa4>
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39c:	4a0c      	ldr	r2, [pc, #48]	; (800a3d0 <xTaskPriorityDisinherit+0xd4>)
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4413      	add	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4a09      	ldr	r2, [pc, #36]	; (800a3d4 <xTaskPriorityDisinherit+0xd8>)
 800a3ae:	441a      	add	r2, r3
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	f7fd fe1b 	bl	8007ff2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3c0:	697b      	ldr	r3, [r7, #20]
	}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	24009d4c 	.word	0x24009d4c
 800a3d0:	2400a228 	.word	0x2400a228
 800a3d4:	24009d50 	.word	0x24009d50

0800a3d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d06a      	beq.n	800a4c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	60fb      	str	r3, [r7, #12]
}
 800a40a:	bf00      	nop
 800a40c:	e7fe      	b.n	800a40c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	429a      	cmp	r2, r3
 800a416:	d902      	bls.n	800a41e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	61fb      	str	r3, [r7, #28]
 800a41c:	e002      	b.n	800a424 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a422:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	69fa      	ldr	r2, [r7, #28]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d04b      	beq.n	800a4c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a432:	697a      	ldr	r2, [r7, #20]
 800a434:	429a      	cmp	r2, r3
 800a436:	d146      	bne.n	800a4c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a438:	4b25      	ldr	r3, [pc, #148]	; (800a4d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	69ba      	ldr	r2, [r7, #24]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d10a      	bne.n	800a458 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a446:	f383 8811 	msr	BASEPRI, r3
 800a44a:	f3bf 8f6f 	isb	sy
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	60bb      	str	r3, [r7, #8]
}
 800a454:	bf00      	nop
 800a456:	e7fe      	b.n	800a456 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	69fa      	ldr	r2, [r7, #28]
 800a462:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	db04      	blt.n	800a476 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	6959      	ldr	r1, [r3, #20]
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4a13      	ldr	r2, [pc, #76]	; (800a4d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a486:	4413      	add	r3, r2
 800a488:	4299      	cmp	r1, r3
 800a48a:	d11c      	bne.n	800a4c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	3304      	adds	r3, #4
 800a490:	4618      	mov	r0, r3
 800a492:	f7fd fe0b 	bl	80080ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49a:	4b0f      	ldr	r3, [pc, #60]	; (800a4d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d903      	bls.n	800a4aa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a6:	4a0c      	ldr	r2, [pc, #48]	; (800a4d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4a07      	ldr	r2, [pc, #28]	; (800a4d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a4b8:	441a      	add	r2, r3
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4619      	mov	r1, r3
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	f7fd fd96 	bl	8007ff2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4c6:	bf00      	nop
 800a4c8:	3720      	adds	r7, #32
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	24009d4c 	.word	0x24009d4c
 800a4d4:	24009d50 	.word	0x24009d50
 800a4d8:	2400a228 	.word	0x2400a228

0800a4dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a4dc:	b480      	push	{r7}
 800a4de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a4e0:	4b07      	ldr	r3, [pc, #28]	; (800a500 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d004      	beq.n	800a4f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4e8:	4b05      	ldr	r3, [pc, #20]	; (800a500 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4ee:	3201      	adds	r2, #1
 800a4f0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a4f2:	4b03      	ldr	r3, [pc, #12]	; (800a500 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
	}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	24009d4c 	.word	0x24009d4c

0800a504 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a50e:	4b21      	ldr	r3, [pc, #132]	; (800a594 <prvAddCurrentTaskToDelayedList+0x90>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a514:	4b20      	ldr	r3, [pc, #128]	; (800a598 <prvAddCurrentTaskToDelayedList+0x94>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3304      	adds	r3, #4
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fd fdc6 	bl	80080ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a526:	d10a      	bne.n	800a53e <prvAddCurrentTaskToDelayedList+0x3a>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d007      	beq.n	800a53e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a52e:	4b1a      	ldr	r3, [pc, #104]	; (800a598 <prvAddCurrentTaskToDelayedList+0x94>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3304      	adds	r3, #4
 800a534:	4619      	mov	r1, r3
 800a536:	4819      	ldr	r0, [pc, #100]	; (800a59c <prvAddCurrentTaskToDelayedList+0x98>)
 800a538:	f7fd fd5b 	bl	8007ff2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a53c:	e026      	b.n	800a58c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4413      	add	r3, r2
 800a544:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a546:	4b14      	ldr	r3, [pc, #80]	; (800a598 <prvAddCurrentTaskToDelayedList+0x94>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	429a      	cmp	r2, r3
 800a554:	d209      	bcs.n	800a56a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a556:	4b12      	ldr	r3, [pc, #72]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	4b0f      	ldr	r3, [pc, #60]	; (800a598 <prvAddCurrentTaskToDelayedList+0x94>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3304      	adds	r3, #4
 800a560:	4619      	mov	r1, r3
 800a562:	4610      	mov	r0, r2
 800a564:	f7fd fd69 	bl	800803a <vListInsert>
}
 800a568:	e010      	b.n	800a58c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a56a:	4b0e      	ldr	r3, [pc, #56]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	4b0a      	ldr	r3, [pc, #40]	; (800a598 <prvAddCurrentTaskToDelayedList+0x94>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3304      	adds	r3, #4
 800a574:	4619      	mov	r1, r3
 800a576:	4610      	mov	r0, r2
 800a578:	f7fd fd5f 	bl	800803a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a57c:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	429a      	cmp	r2, r3
 800a584:	d202      	bcs.n	800a58c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a586:	4a08      	ldr	r2, [pc, #32]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	6013      	str	r3, [r2, #0]
}
 800a58c:	bf00      	nop
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	2400a224 	.word	0x2400a224
 800a598:	24009d4c 	.word	0x24009d4c
 800a59c:	2400a20c 	.word	0x2400a20c
 800a5a0:	2400a1dc 	.word	0x2400a1dc
 800a5a4:	2400a1d8 	.word	0x2400a1d8
 800a5a8:	2400a240 	.word	0x2400a240

0800a5ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08a      	sub	sp, #40	; 0x28
 800a5b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5b6:	f000 fb07 	bl	800abc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5ba:	4b1c      	ldr	r3, [pc, #112]	; (800a62c <xTimerCreateTimerTask+0x80>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d021      	beq.n	800a606 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5ca:	1d3a      	adds	r2, r7, #4
 800a5cc:	f107 0108 	add.w	r1, r7, #8
 800a5d0:	f107 030c 	add.w	r3, r7, #12
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fd fadb 	bl	8007b90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5da:	6879      	ldr	r1, [r7, #4]
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	9202      	str	r2, [sp, #8]
 800a5e2:	9301      	str	r3, [sp, #4]
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	460a      	mov	r2, r1
 800a5ec:	4910      	ldr	r1, [pc, #64]	; (800a630 <xTimerCreateTimerTask+0x84>)
 800a5ee:	4811      	ldr	r0, [pc, #68]	; (800a634 <xTimerCreateTimerTask+0x88>)
 800a5f0:	f7fe ffe0 	bl	80095b4 <xTaskCreateStatic>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	4a10      	ldr	r2, [pc, #64]	; (800a638 <xTimerCreateTimerTask+0x8c>)
 800a5f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5fa:	4b0f      	ldr	r3, [pc, #60]	; (800a638 <xTimerCreateTimerTask+0x8c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a602:	2301      	movs	r3, #1
 800a604:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	613b      	str	r3, [r7, #16]
}
 800a61e:	bf00      	nop
 800a620:	e7fe      	b.n	800a620 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a622:	697b      	ldr	r3, [r7, #20]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	2400a27c 	.word	0x2400a27c
 800a630:	08029374 	.word	0x08029374
 800a634:	0800a771 	.word	0x0800a771
 800a638:	2400a280 	.word	0x2400a280

0800a63c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08a      	sub	sp, #40	; 0x28
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
 800a648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10a      	bne.n	800a66a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	623b      	str	r3, [r7, #32]
}
 800a666:	bf00      	nop
 800a668:	e7fe      	b.n	800a668 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a66a:	4b1a      	ldr	r3, [pc, #104]	; (800a6d4 <xTimerGenericCommand+0x98>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d02a      	beq.n	800a6c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b05      	cmp	r3, #5
 800a682:	dc18      	bgt.n	800a6b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a684:	f7ff fdb4 	bl	800a1f0 <xTaskGetSchedulerState>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b02      	cmp	r3, #2
 800a68c:	d109      	bne.n	800a6a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a68e:	4b11      	ldr	r3, [pc, #68]	; (800a6d4 <xTimerGenericCommand+0x98>)
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	f107 0110 	add.w	r1, r7, #16
 800a696:	2300      	movs	r3, #0
 800a698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a69a:	f7fe f925 	bl	80088e8 <xQueueGenericSend>
 800a69e:	6278      	str	r0, [r7, #36]	; 0x24
 800a6a0:	e012      	b.n	800a6c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6a2:	4b0c      	ldr	r3, [pc, #48]	; (800a6d4 <xTimerGenericCommand+0x98>)
 800a6a4:	6818      	ldr	r0, [r3, #0]
 800a6a6:	f107 0110 	add.w	r1, r7, #16
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f7fe f91b 	bl	80088e8 <xQueueGenericSend>
 800a6b2:	6278      	str	r0, [r7, #36]	; 0x24
 800a6b4:	e008      	b.n	800a6c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6b6:	4b07      	ldr	r3, [pc, #28]	; (800a6d4 <xTimerGenericCommand+0x98>)
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	f107 0110 	add.w	r1, r7, #16
 800a6be:	2300      	movs	r3, #0
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	f7fe fa0f 	bl	8008ae4 <xQueueGenericSendFromISR>
 800a6c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3728      	adds	r7, #40	; 0x28
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	2400a27c 	.word	0x2400a27c

0800a6d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af02      	add	r7, sp, #8
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6e2:	4b22      	ldr	r3, [pc, #136]	; (800a76c <prvProcessExpiredTimer+0x94>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fd fcdb 	bl	80080ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6fc:	f003 0304 	and.w	r3, r3, #4
 800a700:	2b00      	cmp	r3, #0
 800a702:	d022      	beq.n	800a74a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	699a      	ldr	r2, [r3, #24]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	18d1      	adds	r1, r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	6978      	ldr	r0, [r7, #20]
 800a712:	f000 f8d1 	bl	800a8b8 <prvInsertTimerInActiveList>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d01f      	beq.n	800a75c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a71c:	2300      	movs	r3, #0
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	2300      	movs	r3, #0
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	2100      	movs	r1, #0
 800a726:	6978      	ldr	r0, [r7, #20]
 800a728:	f7ff ff88 	bl	800a63c <xTimerGenericCommand>
 800a72c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d113      	bne.n	800a75c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	60fb      	str	r3, [r7, #12]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a750:	f023 0301 	bic.w	r3, r3, #1
 800a754:	b2da      	uxtb	r2, r3
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	6978      	ldr	r0, [r7, #20]
 800a762:	4798      	blx	r3
}
 800a764:	bf00      	nop
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	2400a274 	.word	0x2400a274

0800a770 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a778:	f107 0308 	add.w	r3, r7, #8
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 f857 	bl	800a830 <prvGetNextExpireTime>
 800a782:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	4619      	mov	r1, r3
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 f803 	bl	800a794 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a78e:	f000 f8d5 	bl	800a93c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a792:	e7f1      	b.n	800a778 <prvTimerTask+0x8>

0800a794 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a79e:	f7ff f945 	bl	8009a2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7a2:	f107 0308 	add.w	r3, r7, #8
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 f866 	bl	800a878 <prvSampleTimeNow>
 800a7ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d130      	bne.n	800a816 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10a      	bne.n	800a7d0 <prvProcessTimerOrBlockTask+0x3c>
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d806      	bhi.n	800a7d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7c2:	f7ff f941 	bl	8009a48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7c6:	68f9      	ldr	r1, [r7, #12]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7ff ff85 	bl	800a6d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7ce:	e024      	b.n	800a81a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d008      	beq.n	800a7e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7d6:	4b13      	ldr	r3, [pc, #76]	; (800a824 <prvProcessTimerOrBlockTask+0x90>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <prvProcessTimerOrBlockTask+0x50>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e000      	b.n	800a7e6 <prvProcessTimerOrBlockTask+0x52>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7e8:	4b0f      	ldr	r3, [pc, #60]	; (800a828 <prvProcessTimerOrBlockTask+0x94>)
 800a7ea:	6818      	ldr	r0, [r3, #0]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	f7fe fea9 	bl	800954c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a7fa:	f7ff f925 	bl	8009a48 <xTaskResumeAll>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10a      	bne.n	800a81a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a804:	4b09      	ldr	r3, [pc, #36]	; (800a82c <prvProcessTimerOrBlockTask+0x98>)
 800a806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	f3bf 8f6f 	isb	sy
}
 800a814:	e001      	b.n	800a81a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a816:	f7ff f917 	bl	8009a48 <xTaskResumeAll>
}
 800a81a:	bf00      	nop
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	2400a278 	.word	0x2400a278
 800a828:	2400a27c 	.word	0x2400a27c
 800a82c:	e000ed04 	.word	0xe000ed04

0800a830 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a838:	4b0e      	ldr	r3, [pc, #56]	; (800a874 <prvGetNextExpireTime+0x44>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <prvGetNextExpireTime+0x16>
 800a842:	2201      	movs	r2, #1
 800a844:	e000      	b.n	800a848 <prvGetNextExpireTime+0x18>
 800a846:	2200      	movs	r2, #0
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d105      	bne.n	800a860 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a854:	4b07      	ldr	r3, [pc, #28]	; (800a874 <prvGetNextExpireTime+0x44>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	60fb      	str	r3, [r7, #12]
 800a85e:	e001      	b.n	800a864 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a860:	2300      	movs	r3, #0
 800a862:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a864:	68fb      	ldr	r3, [r7, #12]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	2400a274 	.word	0x2400a274

0800a878 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a880:	f7ff f980 	bl	8009b84 <xTaskGetTickCount>
 800a884:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a886:	4b0b      	ldr	r3, [pc, #44]	; (800a8b4 <prvSampleTimeNow+0x3c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d205      	bcs.n	800a89c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a890:	f000 f936 	bl	800ab00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	e002      	b.n	800a8a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8a2:	4a04      	ldr	r2, [pc, #16]	; (800a8b4 <prvSampleTimeNow+0x3c>)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	2400a284 	.word	0x2400a284

0800a8b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d812      	bhi.n	800a904 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	1ad2      	subs	r2, r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d302      	bcc.n	800a8f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	617b      	str	r3, [r7, #20]
 800a8f0:	e01b      	b.n	800a92a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8f2:	4b10      	ldr	r3, [pc, #64]	; (800a934 <prvInsertTimerInActiveList+0x7c>)
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	f7fd fb9c 	bl	800803a <vListInsert>
 800a902:	e012      	b.n	800a92a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d206      	bcs.n	800a91a <prvInsertTimerInActiveList+0x62>
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	429a      	cmp	r2, r3
 800a912:	d302      	bcc.n	800a91a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a914:	2301      	movs	r3, #1
 800a916:	617b      	str	r3, [r7, #20]
 800a918:	e007      	b.n	800a92a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a91a:	4b07      	ldr	r3, [pc, #28]	; (800a938 <prvInsertTimerInActiveList+0x80>)
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3304      	adds	r3, #4
 800a922:	4619      	mov	r1, r3
 800a924:	4610      	mov	r0, r2
 800a926:	f7fd fb88 	bl	800803a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a92a:	697b      	ldr	r3, [r7, #20]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	2400a278 	.word	0x2400a278
 800a938:	2400a274 	.word	0x2400a274

0800a93c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08e      	sub	sp, #56	; 0x38
 800a940:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a942:	e0ca      	b.n	800aada <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	da18      	bge.n	800a97c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a94a:	1d3b      	adds	r3, r7, #4
 800a94c:	3304      	adds	r3, #4
 800a94e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10a      	bne.n	800a96c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	61fb      	str	r3, [r7, #28]
}
 800a968:	bf00      	nop
 800a96a:	e7fe      	b.n	800a96a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a972:	6850      	ldr	r0, [r2, #4]
 800a974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a976:	6892      	ldr	r2, [r2, #8]
 800a978:	4611      	mov	r1, r2
 800a97a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f2c0 80aa 	blt.w	800aad8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d004      	beq.n	800a99a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a992:	3304      	adds	r3, #4
 800a994:	4618      	mov	r0, r3
 800a996:	f7fd fb89 	bl	80080ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a99a:	463b      	mov	r3, r7
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff ff6b 	bl	800a878 <prvSampleTimeNow>
 800a9a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b09      	cmp	r3, #9
 800a9a8:	f200 8097 	bhi.w	800aada <prvProcessReceivedCommands+0x19e>
 800a9ac:	a201      	add	r2, pc, #4	; (adr r2, 800a9b4 <prvProcessReceivedCommands+0x78>)
 800a9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b2:	bf00      	nop
 800a9b4:	0800a9dd 	.word	0x0800a9dd
 800a9b8:	0800a9dd 	.word	0x0800a9dd
 800a9bc:	0800a9dd 	.word	0x0800a9dd
 800a9c0:	0800aa51 	.word	0x0800aa51
 800a9c4:	0800aa65 	.word	0x0800aa65
 800a9c8:	0800aaaf 	.word	0x0800aaaf
 800a9cc:	0800a9dd 	.word	0x0800a9dd
 800a9d0:	0800a9dd 	.word	0x0800a9dd
 800a9d4:	0800aa51 	.word	0x0800aa51
 800a9d8:	0800aa65 	.word	0x0800aa65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9e2:	f043 0301 	orr.w	r3, r3, #1
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	18d1      	adds	r1, r2, r3
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9fc:	f7ff ff5c 	bl	800a8b8 <prvInsertTimerInActiveList>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d069      	beq.n	800aada <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa14:	f003 0304 	and.w	r3, r3, #4
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d05e      	beq.n	800aada <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	441a      	add	r2, r3
 800aa24:	2300      	movs	r3, #0
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	2300      	movs	r3, #0
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa2e:	f7ff fe05 	bl	800a63c <xTimerGenericCommand>
 800aa32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d14f      	bne.n	800aada <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	61bb      	str	r3, [r7, #24]
}
 800aa4c:	bf00      	nop
 800aa4e:	e7fe      	b.n	800aa4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa56:	f023 0301 	bic.w	r3, r3, #1
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aa62:	e03a      	b.n	800aada <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa6a:	f043 0301 	orr.w	r3, r3, #1
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10a      	bne.n	800aa9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	617b      	str	r3, [r7, #20]
}
 800aa96:	bf00      	nop
 800aa98:	e7fe      	b.n	800aa98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	699a      	ldr	r2, [r3, #24]
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	18d1      	adds	r1, r2, r3
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaa8:	f7ff ff06 	bl	800a8b8 <prvInsertTimerInActiveList>
					break;
 800aaac:	e015      	b.n	800aada <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aab4:	f003 0302 	and.w	r3, r3, #2
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d103      	bne.n	800aac4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aabc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aabe:	f7fd f94d 	bl	8007d5c <vPortFree>
 800aac2:	e00a      	b.n	800aada <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaca:	f023 0301 	bic.w	r3, r3, #1
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aad6:	e000      	b.n	800aada <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aad8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aada:	4b08      	ldr	r3, [pc, #32]	; (800aafc <prvProcessReceivedCommands+0x1c0>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	1d39      	adds	r1, r7, #4
 800aae0:	2200      	movs	r2, #0
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe f926 	bl	8008d34 <xQueueReceive>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f47f af2a 	bne.w	800a944 <prvProcessReceivedCommands+0x8>
	}
}
 800aaf0:	bf00      	nop
 800aaf2:	bf00      	nop
 800aaf4:	3730      	adds	r7, #48	; 0x30
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	2400a27c 	.word	0x2400a27c

0800ab00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab06:	e048      	b.n	800ab9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab08:	4b2d      	ldr	r3, [pc, #180]	; (800abc0 <prvSwitchTimerLists+0xc0>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab12:	4b2b      	ldr	r3, [pc, #172]	; (800abc0 <prvSwitchTimerLists+0xc0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	3304      	adds	r3, #4
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7fd fac3 	bl	80080ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d02e      	beq.n	800ab9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	693a      	ldr	r2, [r7, #16]
 800ab42:	4413      	add	r3, r2
 800ab44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d90e      	bls.n	800ab6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab5a:	4b19      	ldr	r3, [pc, #100]	; (800abc0 <prvSwitchTimerLists+0xc0>)
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4619      	mov	r1, r3
 800ab64:	4610      	mov	r0, r2
 800ab66:	f7fd fa68 	bl	800803a <vListInsert>
 800ab6a:	e016      	b.n	800ab9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	2300      	movs	r3, #0
 800ab72:	693a      	ldr	r2, [r7, #16]
 800ab74:	2100      	movs	r1, #0
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f7ff fd60 	bl	800a63c <xTimerGenericCommand>
 800ab7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10a      	bne.n	800ab9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	603b      	str	r3, [r7, #0]
}
 800ab96:	bf00      	nop
 800ab98:	e7fe      	b.n	800ab98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <prvSwitchTimerLists+0xc0>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1b1      	bne.n	800ab08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aba4:	4b06      	ldr	r3, [pc, #24]	; (800abc0 <prvSwitchTimerLists+0xc0>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800abaa:	4b06      	ldr	r3, [pc, #24]	; (800abc4 <prvSwitchTimerLists+0xc4>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a04      	ldr	r2, [pc, #16]	; (800abc0 <prvSwitchTimerLists+0xc0>)
 800abb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800abb2:	4a04      	ldr	r2, [pc, #16]	; (800abc4 <prvSwitchTimerLists+0xc4>)
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	6013      	str	r3, [r2, #0]
}
 800abb8:	bf00      	nop
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	2400a274 	.word	0x2400a274
 800abc4:	2400a278 	.word	0x2400a278

0800abc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800abce:	f7fd fbc1 	bl	8008354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800abd2:	4b15      	ldr	r3, [pc, #84]	; (800ac28 <prvCheckForValidListAndQueue+0x60>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d120      	bne.n	800ac1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800abda:	4814      	ldr	r0, [pc, #80]	; (800ac2c <prvCheckForValidListAndQueue+0x64>)
 800abdc:	f7fd f9dc 	bl	8007f98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800abe0:	4813      	ldr	r0, [pc, #76]	; (800ac30 <prvCheckForValidListAndQueue+0x68>)
 800abe2:	f7fd f9d9 	bl	8007f98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800abe6:	4b13      	ldr	r3, [pc, #76]	; (800ac34 <prvCheckForValidListAndQueue+0x6c>)
 800abe8:	4a10      	ldr	r2, [pc, #64]	; (800ac2c <prvCheckForValidListAndQueue+0x64>)
 800abea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800abec:	4b12      	ldr	r3, [pc, #72]	; (800ac38 <prvCheckForValidListAndQueue+0x70>)
 800abee:	4a10      	ldr	r2, [pc, #64]	; (800ac30 <prvCheckForValidListAndQueue+0x68>)
 800abf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800abf2:	2300      	movs	r3, #0
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	4b11      	ldr	r3, [pc, #68]	; (800ac3c <prvCheckForValidListAndQueue+0x74>)
 800abf8:	4a11      	ldr	r2, [pc, #68]	; (800ac40 <prvCheckForValidListAndQueue+0x78>)
 800abfa:	2110      	movs	r1, #16
 800abfc:	200a      	movs	r0, #10
 800abfe:	f7fd fd33 	bl	8008668 <xQueueGenericCreateStatic>
 800ac02:	4603      	mov	r3, r0
 800ac04:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <prvCheckForValidListAndQueue+0x60>)
 800ac06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac08:	4b07      	ldr	r3, [pc, #28]	; (800ac28 <prvCheckForValidListAndQueue+0x60>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d005      	beq.n	800ac1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac10:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <prvCheckForValidListAndQueue+0x60>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	490b      	ldr	r1, [pc, #44]	; (800ac44 <prvCheckForValidListAndQueue+0x7c>)
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fe fc44 	bl	80094a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac1c:	f7fd fbca 	bl	80083b4 <vPortExitCritical>
}
 800ac20:	bf00      	nop
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	2400a27c 	.word	0x2400a27c
 800ac2c:	2400a24c 	.word	0x2400a24c
 800ac30:	2400a260 	.word	0x2400a260
 800ac34:	2400a274 	.word	0x2400a274
 800ac38:	2400a278 	.word	0x2400a278
 800ac3c:	2400a328 	.word	0x2400a328
 800ac40:	2400a288 	.word	0x2400a288
 800ac44:	0802937c 	.word	0x0802937c

0800ac48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ac4c:	4b3f      	ldr	r3, [pc, #252]	; (800ad4c <SystemInit+0x104>)
 800ac4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac52:	4a3e      	ldr	r2, [pc, #248]	; (800ad4c <SystemInit+0x104>)
 800ac54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800ac5c:	4b3b      	ldr	r3, [pc, #236]	; (800ad4c <SystemInit+0x104>)
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	4a3a      	ldr	r2, [pc, #232]	; (800ad4c <SystemInit+0x104>)
 800ac62:	f043 0310 	orr.w	r3, r3, #16
 800ac66:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800ac68:	4b39      	ldr	r3, [pc, #228]	; (800ad50 <SystemInit+0x108>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 030f 	and.w	r3, r3, #15
 800ac70:	2b06      	cmp	r3, #6
 800ac72:	d807      	bhi.n	800ac84 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800ac74:	4b36      	ldr	r3, [pc, #216]	; (800ad50 <SystemInit+0x108>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f023 030f 	bic.w	r3, r3, #15
 800ac7c:	4a34      	ldr	r2, [pc, #208]	; (800ad50 <SystemInit+0x108>)
 800ac7e:	f043 0307 	orr.w	r3, r3, #7
 800ac82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800ac84:	4b33      	ldr	r3, [pc, #204]	; (800ad54 <SystemInit+0x10c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a32      	ldr	r2, [pc, #200]	; (800ad54 <SystemInit+0x10c>)
 800ac8a:	f043 0301 	orr.w	r3, r3, #1
 800ac8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ac90:	4b30      	ldr	r3, [pc, #192]	; (800ad54 <SystemInit+0x10c>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800ac96:	4b2f      	ldr	r3, [pc, #188]	; (800ad54 <SystemInit+0x10c>)
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	492e      	ldr	r1, [pc, #184]	; (800ad54 <SystemInit+0x10c>)
 800ac9c:	4b2e      	ldr	r3, [pc, #184]	; (800ad58 <SystemInit+0x110>)
 800ac9e:	4013      	ands	r3, r2
 800aca0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800aca2:	4b2b      	ldr	r3, [pc, #172]	; (800ad50 <SystemInit+0x108>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d007      	beq.n	800acbe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800acae:	4b28      	ldr	r3, [pc, #160]	; (800ad50 <SystemInit+0x108>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f023 030f 	bic.w	r3, r3, #15
 800acb6:	4a26      	ldr	r2, [pc, #152]	; (800ad50 <SystemInit+0x108>)
 800acb8:	f043 0307 	orr.w	r3, r3, #7
 800acbc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800acbe:	4b25      	ldr	r3, [pc, #148]	; (800ad54 <SystemInit+0x10c>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800acc4:	4b23      	ldr	r3, [pc, #140]	; (800ad54 <SystemInit+0x10c>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800acca:	4b22      	ldr	r3, [pc, #136]	; (800ad54 <SystemInit+0x10c>)
 800accc:	2200      	movs	r2, #0
 800acce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800acd0:	4b20      	ldr	r3, [pc, #128]	; (800ad54 <SystemInit+0x10c>)
 800acd2:	4a22      	ldr	r2, [pc, #136]	; (800ad5c <SystemInit+0x114>)
 800acd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800acd6:	4b1f      	ldr	r3, [pc, #124]	; (800ad54 <SystemInit+0x10c>)
 800acd8:	4a21      	ldr	r2, [pc, #132]	; (800ad60 <SystemInit+0x118>)
 800acda:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800acdc:	4b1d      	ldr	r3, [pc, #116]	; (800ad54 <SystemInit+0x10c>)
 800acde:	4a21      	ldr	r2, [pc, #132]	; (800ad64 <SystemInit+0x11c>)
 800ace0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800ace2:	4b1c      	ldr	r3, [pc, #112]	; (800ad54 <SystemInit+0x10c>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800ace8:	4b1a      	ldr	r3, [pc, #104]	; (800ad54 <SystemInit+0x10c>)
 800acea:	4a1e      	ldr	r2, [pc, #120]	; (800ad64 <SystemInit+0x11c>)
 800acec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800acee:	4b19      	ldr	r3, [pc, #100]	; (800ad54 <SystemInit+0x10c>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800acf4:	4b17      	ldr	r3, [pc, #92]	; (800ad54 <SystemInit+0x10c>)
 800acf6:	4a1b      	ldr	r2, [pc, #108]	; (800ad64 <SystemInit+0x11c>)
 800acf8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800acfa:	4b16      	ldr	r3, [pc, #88]	; (800ad54 <SystemInit+0x10c>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ad00:	4b14      	ldr	r3, [pc, #80]	; (800ad54 <SystemInit+0x10c>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a13      	ldr	r2, [pc, #76]	; (800ad54 <SystemInit+0x10c>)
 800ad06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ad0c:	4b11      	ldr	r3, [pc, #68]	; (800ad54 <SystemInit+0x10c>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800ad12:	4b15      	ldr	r3, [pc, #84]	; (800ad68 <SystemInit+0x120>)
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	4a14      	ldr	r2, [pc, #80]	; (800ad68 <SystemInit+0x120>)
 800ad18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad1c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800ad1e:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <SystemInit+0x124>)
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	4b13      	ldr	r3, [pc, #76]	; (800ad70 <SystemInit+0x128>)
 800ad24:	4013      	ands	r3, r2
 800ad26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad2a:	d202      	bcs.n	800ad32 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800ad2c:	4b11      	ldr	r3, [pc, #68]	; (800ad74 <SystemInit+0x12c>)
 800ad2e:	2201      	movs	r2, #1
 800ad30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800ad32:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <SystemInit+0x130>)
 800ad34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800ad38:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800ad3a:	4b04      	ldr	r3, [pc, #16]	; (800ad4c <SystemInit+0x104>)
 800ad3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad40:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800ad42:	bf00      	nop
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	e000ed00 	.word	0xe000ed00
 800ad50:	52002000 	.word	0x52002000
 800ad54:	58024400 	.word	0x58024400
 800ad58:	eaf6ed7f 	.word	0xeaf6ed7f
 800ad5c:	02020200 	.word	0x02020200
 800ad60:	01ff0000 	.word	0x01ff0000
 800ad64:	01010280 	.word	0x01010280
 800ad68:	580000c0 	.word	0x580000c0
 800ad6c:	5c001000 	.word	0x5c001000
 800ad70:	ffff0000 	.word	0xffff0000
 800ad74:	51008108 	.word	0x51008108
 800ad78:	52004000 	.word	0x52004000

0800ad7c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d103      	bne.n	800ad94 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800ad8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	e02c      	b.n	800adee <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	891a      	ldrh	r2, [r3, #8]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68da      	ldr	r2, [r3, #12]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	691a      	ldr	r2, [r3, #16]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	695a      	ldr	r2, [r3, #20]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a0c      	ldr	r2, [pc, #48]	; (800adf8 <FT5336_RegisterBusIO+0x7c>)
 800adc8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a0b      	ldr	r2, [pc, #44]	; (800adfc <FT5336_RegisterBusIO+0x80>)
 800adce:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d004      	beq.n	800ade8 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4798      	blx	r3
 800ade4:	60f8      	str	r0, [r7, #12]
 800ade6:	e002      	b.n	800adee <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800ade8:	f04f 33ff 	mov.w	r3, #4294967295
 800adec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800adee:	68fb      	ldr	r3, [r7, #12]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	0800b203 	.word	0x0800b203
 800adfc:	0800b237 	.word	0x0800b237

0800ae00 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	2201      	movs	r2, #1
 800ae14:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	2205      	movs	r2, #5
 800ae1a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ae22:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	f44f 7288 	mov.w	r2, #272	; 0x110
 800ae2a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	370c      	adds	r7, #12
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b084      	sub	sp, #16
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10d      	bne.n	800ae6c <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f98e 	bl	800b178 <FT5336_DisableIT>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	4413      	add	r3, r2
 800ae62:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800ae72:	f04f 33ff 	mov.w	r3, #4294967295
 800ae76:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ae78:	68fb      	ldr	r3, [r7, #12]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b085      	sub	sp, #20
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d103      	bne.n	800aea0 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800aea0:	68fb      	ldr	r3, [r7, #12]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f103 0218 	add.w	r2, r3, #24
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	4619      	mov	r1, r3
 800aec6:	4610      	mov	r0, r2
 800aec8:	f000 fa2c 	bl	800b324 <ft5336_radian_value>
 800aecc:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f103 0218 	add.w	r2, r3, #24
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f000 fa32 	bl	800b346 <ft5336_offset_left_right>
 800aee2:	4602      	mov	r2, r0
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	4413      	add	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f103 0218 	add.w	r2, r3, #24
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	4619      	mov	r1, r3
 800aef8:	4610      	mov	r0, r2
 800aefa:	f000 fa35 	bl	800b368 <ft5336_offset_up_down>
 800aefe:	4602      	mov	r2, r0
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	4413      	add	r3, r2
 800af04:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f103 0218 	add.w	r2, r3, #24
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	b2db      	uxtb	r3, r3
 800af12:	4619      	mov	r1, r3
 800af14:	4610      	mov	r0, r2
 800af16:	f000 fa38 	bl	800b38a <ft5336_disatnce_left_right>
 800af1a:	4602      	mov	r2, r0
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4413      	add	r3, r2
 800af20:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f103 0218 	add.w	r2, r3, #24
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	4619      	mov	r1, r3
 800af30:	4610      	mov	r0, r2
 800af32:	f000 fa3b 	bl	800b3ac <ft5336_distance_up_down>
 800af36:	4602      	mov	r2, r0
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4413      	add	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f103 0218 	add.w	r2, r3, #24
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	4619      	mov	r1, r3
 800af4c:	4610      	mov	r0, r2
 800af4e:	f000 fa3e 	bl	800b3ce <ft5336_distance_zoom>
 800af52:	4602      	mov	r2, r0
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	4413      	add	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800af60:	f04f 33ff 	mov.w	r3, #4294967295
 800af64:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800af66:	68fb      	ldr	r3, [r7, #12]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3318      	adds	r3, #24
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	4618      	mov	r0, r3
 800af82:	f000 fa46 	bl	800b412 <ft5336_chip_id>
 800af86:	4603      	mov	r3, r0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f90f 	bl	800b1c2 <FT5336_DetectTouch>
 800afa4:	4603      	mov	r3, r0
 800afa6:	461a      	mov	r2, r3
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f103 0018 	add.w	r0, r3, #24
 800afb2:	f107 0208 	add.w	r2, r7, #8
 800afb6:	2304      	movs	r3, #4
 800afb8:	2103      	movs	r1, #3
 800afba:	f000 f956 	bl	800b26a <ft5336_read_reg>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d003      	beq.n	800afcc <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800afc4:	f04f 33ff 	mov.w	r3, #4294967295
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	e00f      	b.n	800afec <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800afcc:	7a3b      	ldrb	r3, [r7, #8]
 800afce:	021b      	lsls	r3, r3, #8
 800afd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800afd4:	7a7a      	ldrb	r2, [r7, #9]
 800afd6:	431a      	orrs	r2, r3
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800afdc:	7abb      	ldrb	r3, [r7, #10]
 800afde:	021b      	lsls	r3, r3, #8
 800afe0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800afe4:	7afa      	ldrb	r2, [r7, #11]
 800afe6:	431a      	orrs	r2, r3
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800afec:	68fb      	ldr	r3, [r7, #12]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b08c      	sub	sp, #48	; 0x30
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f8dc 	bl	800b1c2 <FT5336_DetectTouch>
 800b00a:	4603      	mov	r3, r0
 800b00c:	461a      	mov	r2, r3
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f103 0018 	add.w	r0, r3, #24
 800b018:	f107 0208 	add.w	r2, r7, #8
 800b01c:	231e      	movs	r3, #30
 800b01e:	2103      	movs	r1, #3
 800b020:	f000 f923 	bl	800b26a <ft5336_read_reg>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800b02a:	f04f 33ff 	mov.w	r3, #4294967295
 800b02e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b030:	e07e      	b.n	800b130 <FT5336_GetMultiTouchState+0x13a>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800b032:	2300      	movs	r3, #0
 800b034:	62bb      	str	r3, [r7, #40]	; 0x28
 800b036:	e078      	b.n	800b12a <FT5336_GetMultiTouchState+0x134>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800b038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b03a:	4613      	mov	r3, r2
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	4413      	add	r3, r2
 800b040:	005b      	lsls	r3, r3, #1
 800b042:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b046:	4413      	add	r3, r2
 800b048:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b04c:	021b      	lsls	r3, r3, #8
 800b04e:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800b052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b054:	4613      	mov	r3, r2
 800b056:	005b      	lsls	r3, r3, #1
 800b058:	4413      	add	r3, r2
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	3301      	adds	r3, #1
 800b05e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b062:	4413      	add	r3, r2
 800b064:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b068:	ea41 0203 	orr.w	r2, r1, r3
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	440b      	add	r3, r1
 800b074:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800b076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b078:	4613      	mov	r3, r2
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	4413      	add	r3, r2
 800b07e:	005b      	lsls	r3, r3, #1
 800b080:	3302      	adds	r3, #2
 800b082:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b086:	4413      	add	r3, r2
 800b088:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b08c:	021b      	lsls	r3, r3, #8
 800b08e:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800b092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b094:	4613      	mov	r3, r2
 800b096:	005b      	lsls	r3, r3, #1
 800b098:	4413      	add	r3, r2
 800b09a:	005b      	lsls	r3, r3, #1
 800b09c:	3303      	adds	r3, #3
 800b09e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b0a8:	4319      	orrs	r1, r3
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ae:	3206      	adds	r2, #6
 800b0b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800b0b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	005b      	lsls	r3, r3, #1
 800b0ba:	4413      	add	r3, r2
 800b0bc:	005b      	lsls	r3, r3, #1
 800b0be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b0c2:	4413      	add	r3, r2
 800b0c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b0c8:	099b      	lsrs	r3, r3, #6
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0d2:	3210      	adds	r2, #16
 800b0d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800b0d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0da:	4613      	mov	r3, r2
 800b0dc:	005b      	lsls	r3, r3, #1
 800b0de:	4413      	add	r3, r2
 800b0e0:	005b      	lsls	r3, r3, #1
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f4:	330a      	adds	r3, #10
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800b0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0fe:	4613      	mov	r3, r2
 800b100:	005b      	lsls	r3, r3, #1
 800b102:	4413      	add	r3, r2
 800b104:	005b      	lsls	r3, r3, #1
 800b106:	3305      	adds	r3, #5
 800b108:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b10c:	4413      	add	r3, r2
 800b10e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b112:	091b      	lsrs	r3, r3, #4
 800b114:	b2db      	uxtb	r3, r3
 800b116:	4619      	mov	r1, r3
 800b118:	683a      	ldr	r2, [r7, #0]
 800b11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11c:	3314      	adds	r3, #20
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	3301      	adds	r3, #1
 800b128:	62bb      	str	r3, [r7, #40]	; 0x28
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	2b04      	cmp	r3, #4
 800b12e:	d983      	bls.n	800b038 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800b130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b132:	4618      	mov	r0, r3
 800b134:	3730      	adds	r7, #48	; 0x30
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b082      	sub	sp, #8
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3318      	adds	r3, #24
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f000 f8bb 	bl	800b2c6 <ft5336_gest_id>
 800b150:	4603      	mov	r3, r0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3318      	adds	r3, #24
 800b166:	2101      	movs	r1, #1
 800b168:	4618      	mov	r0, r3
 800b16a:	f000 f941 	bl	800b3f0 <ft5336_g_mode>
 800b16e:	4603      	mov	r3, r0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	3318      	adds	r3, #24
 800b184:	2100      	movs	r1, #0
 800b186:	4618      	mov	r0, r3
 800b188:	f000 f932 	bl	800b3f0 <ft5336_g_mode>
 800b18c:	4603      	mov	r3, r0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800b196:	b480      	push	{r7}
 800b198:	b083      	sub	sp, #12
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	370c      	adds	r7, #12
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b084      	sub	sp, #16
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	3318      	adds	r3, #24
 800b1ce:	f107 020b 	add.w	r2, r7, #11
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 f886 	bl	800b2e6 <ft5336_td_status>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d003      	beq.n	800b1e8 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800b1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e4:	60fb      	str	r3, [r7, #12]
 800b1e6:	e007      	b.n	800b1f8 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800b1e8:	7afb      	ldrb	r3, [r7, #11]
 800b1ea:	2b05      	cmp	r3, #5
 800b1ec:	d902      	bls.n	800b1f4 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	e001      	b.n	800b1f8 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800b1f4:	7afb      	ldrb	r3, [r7, #11]
 800b1f6:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800b202:	b590      	push	{r4, r7, lr}
 800b204:	b087      	sub	sp, #28
 800b206:	af00      	add	r7, sp, #0
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	461a      	mov	r2, r3
 800b20e:	460b      	mov	r3, r1
 800b210:	72fb      	strb	r3, [r7, #11]
 800b212:	4613      	mov	r3, r2
 800b214:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	691c      	ldr	r4, [r3, #16]
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	8918      	ldrh	r0, [r3, #8]
 800b222:	7afb      	ldrb	r3, [r7, #11]
 800b224:	b299      	uxth	r1, r3
 800b226:	893b      	ldrh	r3, [r7, #8]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	47a0      	blx	r4
 800b22c:	4603      	mov	r3, r0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	371c      	adds	r7, #28
 800b232:	46bd      	mov	sp, r7
 800b234:	bd90      	pop	{r4, r7, pc}

0800b236 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800b236:	b590      	push	{r4, r7, lr}
 800b238:	b087      	sub	sp, #28
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	60f8      	str	r0, [r7, #12]
 800b23e:	607a      	str	r2, [r7, #4]
 800b240:	461a      	mov	r2, r3
 800b242:	460b      	mov	r3, r1
 800b244:	72fb      	strb	r3, [r7, #11]
 800b246:	4613      	mov	r3, r2
 800b248:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	68dc      	ldr	r4, [r3, #12]
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	8918      	ldrh	r0, [r3, #8]
 800b256:	7afb      	ldrb	r3, [r7, #11]
 800b258:	b299      	uxth	r1, r3
 800b25a:	893b      	ldrh	r3, [r7, #8]
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	47a0      	blx	r4
 800b260:	4603      	mov	r3, r0
}
 800b262:	4618      	mov	r0, r3
 800b264:	371c      	adds	r7, #28
 800b266:	46bd      	mov	sp, r7
 800b268:	bd90      	pop	{r4, r7, pc}

0800b26a <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800b26a:	b590      	push	{r4, r7, lr}
 800b26c:	b085      	sub	sp, #20
 800b26e:	af00      	add	r7, sp, #0
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	461a      	mov	r2, r3
 800b276:	460b      	mov	r3, r1
 800b278:	72fb      	strb	r3, [r7, #11]
 800b27a:	4613      	mov	r3, r2
 800b27c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	685c      	ldr	r4, [r3, #4]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6898      	ldr	r0, [r3, #8]
 800b286:	893b      	ldrh	r3, [r7, #8]
 800b288:	7af9      	ldrb	r1, [r7, #11]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	47a0      	blx	r4
 800b28e:	4603      	mov	r3, r0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	bd90      	pop	{r4, r7, pc}

0800b298 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800b298:	b590      	push	{r4, r7, lr}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	607a      	str	r2, [r7, #4]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	72fb      	strb	r3, [r7, #11]
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681c      	ldr	r4, [r3, #0]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6898      	ldr	r0, [r3, #8]
 800b2b4:	893b      	ldrh	r3, [r7, #8]
 800b2b6:	7af9      	ldrb	r1, [r7, #11]
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	47a0      	blx	r4
 800b2bc:	4603      	mov	r3, r0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd90      	pop	{r4, r7, pc}

0800b2c6 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b082      	sub	sp, #8
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	683a      	ldr	r2, [r7, #0]
 800b2d4:	2101      	movs	r1, #1
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7ff ffc7 	bl	800b26a <ft5336_read_reg>
 800b2dc:	4603      	mov	r3, r0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	2102      	movs	r1, #2
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7ff ffb7 	bl	800b26a <ft5336_read_reg>
 800b2fc:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10a      	bne.n	800b31a <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	f003 030f 	and.w	r3, r3, #15
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	781a      	ldrb	r2, [r3, #0]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800b31a:	68fb      	ldr	r3, [r7, #12]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800b330:	1cfa      	adds	r2, r7, #3
 800b332:	2301      	movs	r3, #1
 800b334:	2191      	movs	r1, #145	; 0x91
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7ff ffae 	bl	800b298 <ft5336_write_reg>
 800b33c:	4603      	mov	r3, r0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	460b      	mov	r3, r1
 800b350:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800b352:	1cfa      	adds	r2, r7, #3
 800b354:	2301      	movs	r3, #1
 800b356:	2192      	movs	r1, #146	; 0x92
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff ff9d 	bl	800b298 <ft5336_write_reg>
 800b35e:	4603      	mov	r3, r0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800b374:	1cfa      	adds	r2, r7, #3
 800b376:	2301      	movs	r3, #1
 800b378:	2193      	movs	r1, #147	; 0x93
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff ff8c 	bl	800b298 <ft5336_write_reg>
 800b380:	4603      	mov	r3, r0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b082      	sub	sp, #8
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	460b      	mov	r3, r1
 800b394:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800b396:	1cfa      	adds	r2, r7, #3
 800b398:	2301      	movs	r3, #1
 800b39a:	2194      	movs	r1, #148	; 0x94
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7ff ff7b 	bl	800b298 <ft5336_write_reg>
 800b3a2:	4603      	mov	r3, r0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800b3b8:	1cfa      	adds	r2, r7, #3
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	2195      	movs	r1, #149	; 0x95
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff ff6a 	bl	800b298 <ft5336_write_reg>
 800b3c4:	4603      	mov	r3, r0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800b3da:	1cfa      	adds	r2, r7, #3
 800b3dc:	2301      	movs	r3, #1
 800b3de:	2196      	movs	r1, #150	; 0x96
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f7ff ff59 	bl	800b298 <ft5336_write_reg>
 800b3e6:	4603      	mov	r3, r0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800b3fc:	1cfa      	adds	r2, r7, #3
 800b3fe:	2301      	movs	r3, #1
 800b400:	21a4      	movs	r1, #164	; 0xa4
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7ff ff48 	bl	800b298 <ft5336_write_reg>
 800b408:	4603      	mov	r3, r0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b084      	sub	sp, #16
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800b41c:	2301      	movs	r3, #1
 800b41e:	683a      	ldr	r2, [r7, #0]
 800b420:	21a8      	movs	r1, #168	; 0xa8
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff ff21 	bl	800b26a <ft5336_read_reg>
 800b428:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d107      	bne.n	800b440 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	781a      	ldrb	r2, [r3, #0]
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	781a      	ldrb	r2, [r3, #0]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800b440:	68fb      	ldr	r3, [r7, #12]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b083      	sub	sp, #12
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b458:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b460:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b468:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b472:	fbb2 f2f3 	udiv	r2, r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b482:	fbb2 f2f3 	udiv	r2, r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b090      	sub	sp, #64	; 0x40
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b4a4:	78fb      	ldrb	r3, [r7, #3]
 800b4a6:	2b03      	cmp	r3, #3
 800b4a8:	d102      	bne.n	800b4b0 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800b4aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b4ae:	e001      	b.n	800b4b4 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800b4b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800b4b6:	23b7      	movs	r3, #183	; 0xb7
 800b4b8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800b4d6:	78fb      	ldrb	r3, [r7, #3]
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f860 	bl	800b5a0 <MT25TL01G_WriteEnable>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b4e6:	f06f 0301 	mvn.w	r3, #1
 800b4ea:	e019      	b.n	800b520 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b4ec:	f107 0308 	add.w	r3, r7, #8
 800b4f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f004 fd14 	bl	800ff24 <HAL_QSPI_Command>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d002      	beq.n	800b508 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b502:	f06f 0301 	mvn.w	r3, #1
 800b506:	e00b      	b.n	800b520 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800b508:	78fb      	ldrb	r3, [r7, #3]
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f80b 	bl	800b528 <MT25TL01G_AutoPollingMemReady>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b518:	f06f 0301 	mvn.w	r3, #1
 800b51c:	e000      	b.n	800b520 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3740      	adds	r7, #64	; 0x40
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b096      	sub	sp, #88	; 0x58
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	460b      	mov	r3, r1
 800b532:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b534:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b538:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800b53a:	2305      	movs	r3, #5
 800b53c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b53e:	2300      	movs	r3, #0
 800b540:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b542:	2300      	movs	r3, #0
 800b544:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800b546:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b54a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 800b54c:	2302      	movs	r3, #2
 800b54e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b550:	2300      	movs	r3, #0
 800b552:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b554:	2300      	movs	r3, #0
 800b556:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b558:	2300      	movs	r3, #0
 800b55a:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800b560:	2300      	movs	r3, #0
 800b562:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800b564:	2310      	movs	r3, #16
 800b566:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800b568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b56c:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800b56e:	f240 1301 	movw	r3, #257	; 0x101
 800b572:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800b574:	2302      	movs	r3, #2
 800b576:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b578:	f107 0208 	add.w	r2, r7, #8
 800b57c:	f107 0120 	add.w	r1, r7, #32
 800b580:	f241 3388 	movw	r3, #5000	; 0x1388
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f004 fe5a 	bl	801023e <HAL_QSPI_AutoPolling>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800b590:	f06f 0304 	mvn.w	r3, #4
 800b594:	e000      	b.n	800b598 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800b596:	2300      	movs	r3, #0

}
 800b598:	4618      	mov	r0, r3
 800b59a:	3758      	adds	r7, #88	; 0x58
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b096      	sub	sp, #88	; 0x58
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b5ac:	78fb      	ldrb	r3, [r7, #3]
 800b5ae:	2b03      	cmp	r3, #3
 800b5b0:	d102      	bne.n	800b5b8 <MT25TL01G_WriteEnable+0x18>
 800b5b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b5b6:	e001      	b.n	800b5bc <MT25TL01G_WriteEnable+0x1c>
 800b5b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5bc:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800b5be:	2306      	movs	r3, #6
 800b5c0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b5de:	f107 0320 	add.w	r3, r7, #32
 800b5e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f004 fc9b 	bl	800ff24 <HAL_QSPI_Command>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d002      	beq.n	800b5fa <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b5f4:	f06f 0301 	mvn.w	r3, #1
 800b5f8:	e029      	b.n	800b64e <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800b5fa:	f240 2302 	movw	r3, #514	; 0x202
 800b5fe:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800b600:	f240 2302 	movw	r3, #514	; 0x202
 800b604:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800b606:	2300      	movs	r3, #0
 800b608:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800b60a:	2302      	movs	r3, #2
 800b60c:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800b60e:	2310      	movs	r3, #16
 800b610:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800b612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b616:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800b618:	2305      	movs	r3, #5
 800b61a:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800b61c:	78fb      	ldrb	r3, [r7, #3]
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d102      	bne.n	800b628 <MT25TL01G_WriteEnable+0x88>
 800b622:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b626:	e001      	b.n	800b62c <MT25TL01G_WriteEnable+0x8c>
 800b628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b62c:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b62e:	f107 0208 	add.w	r2, r7, #8
 800b632:	f107 0120 	add.w	r1, r7, #32
 800b636:	f241 3388 	movw	r3, #5000	; 0x1388
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f004 fdff 	bl	801023e <HAL_QSPI_AutoPolling>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d002      	beq.n	800b64c <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800b646:	f06f 0304 	mvn.w	r3, #4
 800b64a:	e000      	b.n	800b64e <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3758      	adds	r7, #88	; 0x58
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b090      	sub	sp, #64	; 0x40
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b65e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b662:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800b664:	2335      	movs	r3, #53	; 0x35
 800b666:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b668:	2300      	movs	r3, #0
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b66c:	2300      	movs	r3, #0
 800b66e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b670:	2300      	movs	r3, #0
 800b672:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b678:	2300      	movs	r3, #0
 800b67a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b67c:	2300      	movs	r3, #0
 800b67e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b680:	2300      	movs	r3, #0
 800b682:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b684:	f107 0308 	add.w	r3, r7, #8
 800b688:	f241 3288 	movw	r2, #5000	; 0x1388
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f004 fc48 	bl	800ff24 <HAL_QSPI_Command>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d002      	beq.n	800b6a0 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b69a:	f06f 0301 	mvn.w	r3, #1
 800b69e:	e000      	b.n	800b6a2 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3740      	adds	r7, #64	; 0x40
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b090      	sub	sp, #64	; 0x40
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b6b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6b6:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800b6b8:	23f5      	movs	r3, #245	; 0xf5
 800b6ba:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b6d8:	f107 0308 	add.w	r3, r7, #8
 800b6dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f004 fc1e 	bl	800ff24 <HAL_QSPI_Command>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b6ee:	f06f 0301 	mvn.w	r3, #1
 800b6f2:	e000      	b.n	800b6f6 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3740      	adds	r7, #64	; 0x40
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b092      	sub	sp, #72	; 0x48
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	460b      	mov	r3, r1
 800b70a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800b70c:	78fb      	ldrb	r3, [r7, #3]
 800b70e:	2b03      	cmp	r3, #3
 800b710:	d83a      	bhi.n	800b788 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800b712:	a201      	add	r2, pc, #4	; (adr r2, 800b718 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800b714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b718:	0800b729 	.word	0x0800b729
 800b71c:	0800b741 	.word	0x0800b741
 800b720:	0800b759 	.word	0x0800b759
 800b724:	0800b771 	.word	0x0800b771
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b72c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800b72e:	230e      	movs	r3, #14
 800b730:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800b732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b736:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800b738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b73c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b73e:	e023      	b.n	800b788 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b740:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b744:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800b746:	233d      	movs	r3, #61	; 0x3d
 800b748:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800b74a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b74e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800b750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b754:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b756:	e017      	b.n	800b788 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b75c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800b75e:	23ee      	movs	r3, #238	; 0xee
 800b760:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b762:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b766:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b768:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b76c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b76e:	e00b      	b.n	800b788 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b770:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b774:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800b776:	23ed      	movs	r3, #237	; 0xed
 800b778:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b77a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b77e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b780:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b784:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b786:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800b788:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b78c:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b78e:	2300      	movs	r3, #0
 800b790:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800b792:	2308      	movs	r3, #8
 800b794:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800b796:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b79a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800b79c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7a0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800b7ae:	f107 0208 	add.w	r2, r7, #8
 800b7b2:	f107 0310 	add.w	r3, r7, #16
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f004 fdb7 	bl	801032c <HAL_QSPI_MemoryMapped>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800b7c4:	f06f 0305 	mvn.w	r3, #5
 800b7c8:	e000      	b.n	800b7cc <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3748      	adds	r7, #72	; 0x48
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b092      	sub	sp, #72	; 0x48
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800b7e0:	78fb      	ldrb	r3, [r7, #3]
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d83a      	bhi.n	800b85c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800b7e6:	a201      	add	r2, pc, #4	; (adr r2, 800b7ec <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800b7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ec:	0800b7fd 	.word	0x0800b7fd
 800b7f0:	0800b815 	.word	0x0800b815
 800b7f4:	0800b82d 	.word	0x0800b82d
 800b7f8:	0800b845 	.word	0x0800b845
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b7fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b800:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800b802:	230c      	movs	r3, #12
 800b804:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800b806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b80a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800b80c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b810:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800b812:	e023      	b.n	800b85c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b814:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b818:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800b81a:	23bc      	movs	r3, #188	; 0xbc
 800b81c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800b81e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b822:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800b824:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b828:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b82a:	e017      	b.n	800b85c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b82c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b830:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800b832:	23ec      	movs	r3, #236	; 0xec
 800b834:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b836:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b83a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b83c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b840:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b842:	e00b      	b.n	800b85c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b844:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b848:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800b84a:	23eb      	movs	r3, #235	; 0xeb
 800b84c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b84e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b852:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b854:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b858:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b85a:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800b85c:	2308      	movs	r3, #8
 800b85e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800b860:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b864:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b866:	2300      	movs	r3, #0
 800b868:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b86a:	2300      	movs	r3, #0
 800b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b86e:	2300      	movs	r3, #0
 800b870:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b872:	2300      	movs	r3, #0
 800b874:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800b876:	2300      	movs	r3, #0
 800b878:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800b87e:	f107 0208 	add.w	r2, r7, #8
 800b882:	f107 0310 	add.w	r3, r7, #16
 800b886:	4619      	mov	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f004 fd4f 	bl	801032c <HAL_QSPI_MemoryMapped>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800b894:	f06f 0305 	mvn.w	r3, #5
 800b898:	e000      	b.n	800b89c <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3748      	adds	r7, #72	; 0x48
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b090      	sub	sp, #64	; 0x40
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b8b0:	78fb      	ldrb	r3, [r7, #3]
 800b8b2:	2b03      	cmp	r3, #3
 800b8b4:	d102      	bne.n	800b8bc <MT25TL01G_ResetEnable+0x18>
 800b8b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b8ba:	e001      	b.n	800b8c0 <MT25TL01G_ResetEnable+0x1c>
 800b8bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8c0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800b8c2:	2366      	movs	r3, #102	; 0x66
 800b8c4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b8e2:	f107 0308 	add.w	r3, r7, #8
 800b8e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f004 fb19 	bl	800ff24 <HAL_QSPI_Command>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b8f8:	f06f 0301 	mvn.w	r3, #1
 800b8fc:	e000      	b.n	800b900 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3740      	adds	r7, #64	; 0x40
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b090      	sub	sp, #64	; 0x40
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	460b      	mov	r3, r1
 800b912:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	2b03      	cmp	r3, #3
 800b918:	d102      	bne.n	800b920 <MT25TL01G_ResetMemory+0x18>
 800b91a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b91e:	e001      	b.n	800b924 <MT25TL01G_ResetMemory+0x1c>
 800b920:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b924:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800b926:	2399      	movs	r3, #153	; 0x99
 800b928:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b92a:	2300      	movs	r3, #0
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b92e:	2300      	movs	r3, #0
 800b930:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b932:	2300      	movs	r3, #0
 800b934:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b93a:	2300      	movs	r3, #0
 800b93c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b93e:	2300      	movs	r3, #0
 800b940:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b942:	2300      	movs	r3, #0
 800b944:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b946:	f107 0308 	add.w	r3, r7, #8
 800b94a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f004 fae7 	bl	800ff24 <HAL_QSPI_Command>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b95c:	f06f 0301 	mvn.w	r3, #1
 800b960:	e000      	b.n	800b964 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3740      	adds	r7, #64	; 0x40
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800b976:	f04f 33ff 	mov.w	r3, #4294967295
 800b97a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4619      	mov	r1, r3
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f832 	bl	800b9ec <MT48LC4M32B2_ClockEnable>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d128      	bne.n	800b9e0 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800b98e:	2001      	movs	r0, #1
 800b990:	f000 f8e2 	bl	800bb58 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f84a 	bl	800ba34 <MT48LC4M32B2_Precharge>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d11c      	bne.n	800b9e0 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	6819      	ldr	r1, [r3, #0]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f897 	bl	800bae4 <MT48LC4M32B2_RefreshMode>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d111      	bne.n	800b9e0 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f85c 	bl	800ba7c <MT48LC4M32B2_ModeRegConfig>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10a      	bne.n	800b9e0 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f8ad 	bl	800bb30 <MT48LC4M32B2_RefreshRate>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d101      	bne.n	800b9e0 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
	...

0800b9ec <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800b9f6:	4b0e      	ldr	r3, [pc, #56]	; (800ba30 <MT48LC4M32B2_ClockEnable+0x44>)
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800b9fc:	4a0c      	ldr	r2, [pc, #48]	; (800ba30 <MT48LC4M32B2_ClockEnable+0x44>)
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800ba02:	4b0b      	ldr	r3, [pc, #44]	; (800ba30 <MT48LC4M32B2_ClockEnable+0x44>)
 800ba04:	2201      	movs	r2, #1
 800ba06:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800ba08:	4b09      	ldr	r3, [pc, #36]	; (800ba30 <MT48LC4M32B2_ClockEnable+0x44>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800ba0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba12:	4907      	ldr	r1, [pc, #28]	; (800ba30 <MT48LC4M32B2_ClockEnable+0x44>)
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f007 fb57 	bl	80130c8 <HAL_SDRAM_SendCommand>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800ba20:	f04f 33ff 	mov.w	r3, #4294967295
 800ba24:	e000      	b.n	800ba28 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800ba26:	2300      	movs	r3, #0
  }
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	2400a378 	.word	0x2400a378

0800ba34 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800ba3e:	4b0e      	ldr	r3, [pc, #56]	; (800ba78 <MT48LC4M32B2_Precharge+0x44>)
 800ba40:	2202      	movs	r2, #2
 800ba42:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800ba44:	4a0c      	ldr	r2, [pc, #48]	; (800ba78 <MT48LC4M32B2_Precharge+0x44>)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800ba4a:	4b0b      	ldr	r3, [pc, #44]	; (800ba78 <MT48LC4M32B2_Precharge+0x44>)
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800ba50:	4b09      	ldr	r3, [pc, #36]	; (800ba78 <MT48LC4M32B2_Precharge+0x44>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800ba56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba5a:	4907      	ldr	r1, [pc, #28]	; (800ba78 <MT48LC4M32B2_Precharge+0x44>)
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f007 fb33 	bl	80130c8 <HAL_SDRAM_SendCommand>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800ba68:	f04f 33ff 	mov.w	r3, #4294967295
 800ba6c:	e000      	b.n	800ba70 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800ba6e:	2300      	movs	r3, #0
  }
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	2400a378 	.word	0x2400a378

0800ba7c <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800ba8e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800ba94:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800ba9a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800baa0:	4313      	orrs	r3, r2
 800baa2:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800baa4:	4b0e      	ldr	r3, [pc, #56]	; (800bae0 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800baa6:	2204      	movs	r2, #4
 800baa8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a0c      	ldr	r2, [pc, #48]	; (800bae0 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800bab0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800bab2:	4b0b      	ldr	r3, [pc, #44]	; (800bae0 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800bab4:	2201      	movs	r2, #1
 800bab6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800bab8:	4a09      	ldr	r2, [pc, #36]	; (800bae0 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800babe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bac2:	4907      	ldr	r1, [pc, #28]	; (800bae0 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f007 faff 	bl	80130c8 <HAL_SDRAM_SendCommand>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800bad0:	f04f 33ff 	mov.w	r3, #4294967295
 800bad4:	e000      	b.n	800bad8 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800bad6:	2300      	movs	r3, #0
  }
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	2400a378 	.word	0x2400a378

0800bae4 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800baf0:	4a0e      	ldr	r2, [pc, #56]	; (800bb2c <MT48LC4M32B2_RefreshMode+0x48>)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800baf6:	4a0d      	ldr	r2, [pc, #52]	; (800bb2c <MT48LC4M32B2_RefreshMode+0x48>)
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800bafc:	4b0b      	ldr	r3, [pc, #44]	; (800bb2c <MT48LC4M32B2_RefreshMode+0x48>)
 800bafe:	2208      	movs	r2, #8
 800bb00:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800bb02:	4b0a      	ldr	r3, [pc, #40]	; (800bb2c <MT48LC4M32B2_RefreshMode+0x48>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800bb08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb0c:	4907      	ldr	r1, [pc, #28]	; (800bb2c <MT48LC4M32B2_RefreshMode+0x48>)
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f007 fada 	bl	80130c8 <HAL_SDRAM_SendCommand>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d002      	beq.n	800bb20 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800bb1a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb1e:	e000      	b.n	800bb22 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800bb20:	2300      	movs	r3, #0
  }
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	2400a378 	.word	0x2400a378

0800bb30 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f007 faf8 	bl	8013132 <HAL_SDRAM_ProgramRefreshRate>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800bb48:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4c:	e000      	b.n	800bb50 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800bb4e:	2300      	movs	r3, #0
  }
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800bb60:	f001 fcfc 	bl	800d55c <HAL_GetTick>
 800bb64:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800bb66:	bf00      	nop
 800bb68:	f001 fcf8 	bl	800d55c <HAL_GetTick>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d8f7      	bhi.n	800bb68 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
	...

0800bb84 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800bb8e:	4b16      	ldr	r3, [pc, #88]	; (800bbe8 <BSP_I2C4_Init+0x64>)
 800bb90:	4a16      	ldr	r2, [pc, #88]	; (800bbec <BSP_I2C4_Init+0x68>)
 800bb92:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800bb94:	4b16      	ldr	r3, [pc, #88]	; (800bbf0 <BSP_I2C4_Init+0x6c>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d11f      	bne.n	800bbdc <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800bb9c:	4b14      	ldr	r3, [pc, #80]	; (800bbf0 <BSP_I2C4_Init+0x6c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	3301      	adds	r3, #1
 800bba2:	4a13      	ldr	r2, [pc, #76]	; (800bbf0 <BSP_I2C4_Init+0x6c>)
 800bba4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800bba6:	4810      	ldr	r0, [pc, #64]	; (800bbe8 <BSP_I2C4_Init+0x64>)
 800bba8:	f002 fee0 	bl	800e96c <HAL_I2C_GetState>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d114      	bne.n	800bbdc <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800bbb2:	480d      	ldr	r0, [pc, #52]	; (800bbe8 <BSP_I2C4_Init+0x64>)
 800bbb4:	f000 fb60 	bl	800c278 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800bbb8:	f005 fe74 	bl	80118a4 <HAL_RCC_GetPCLK2Freq>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	490d      	ldr	r1, [pc, #52]	; (800bbf4 <BSP_I2C4_Init+0x70>)
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 f8e3 	bl	800bd8c <I2C_GetTiming>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4807      	ldr	r0, [pc, #28]	; (800bbe8 <BSP_I2C4_Init+0x64>)
 800bbcc:	f000 f838 	bl	800bc40 <MX_I2C4_Init>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d002      	beq.n	800bbdc <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800bbd6:	f06f 0307 	mvn.w	r3, #7
 800bbda:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800bbdc:	687b      	ldr	r3, [r7, #4]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	2400b460 	.word	0x2400b460
 800bbec:	58001c00 	.word	0x58001c00
 800bbf0:	2400a388 	.word	0x2400a388
 800bbf4:	000186a0 	.word	0x000186a0

0800bbf8 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800bc02:	4b0d      	ldr	r3, [pc, #52]	; (800bc38 <BSP_I2C4_DeInit+0x40>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3b01      	subs	r3, #1
 800bc08:	4a0b      	ldr	r2, [pc, #44]	; (800bc38 <BSP_I2C4_DeInit+0x40>)
 800bc0a:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800bc0c:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <BSP_I2C4_DeInit+0x40>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10b      	bne.n	800bc2c <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800bc14:	4809      	ldr	r0, [pc, #36]	; (800bc3c <BSP_I2C4_DeInit+0x44>)
 800bc16:	f000 fb9b 	bl	800c350 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800bc1a:	4808      	ldr	r0, [pc, #32]	; (800bc3c <BSP_I2C4_DeInit+0x44>)
 800bc1c:	f002 fc34 	bl	800e488 <HAL_I2C_DeInit>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d002      	beq.n	800bc2c <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800bc26:	f06f 0307 	mvn.w	r3, #7
 800bc2a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800bc2c:	687b      	ldr	r3, [r7, #4]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	2400a388 	.word	0x2400a388
 800bc3c:	2400b460 	.word	0x2400b460

0800bc40 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f002 fb72 	bl	800e368 <HAL_I2C_Init>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d002      	beq.n	800bc90 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	73fb      	strb	r3, [r7, #15]
 800bc8e:	e014      	b.n	800bcba <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800bc94:	68b9      	ldr	r1, [r7, #8]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f003 f928 	bl	800eeec <HAL_I2CEx_ConfigAnalogFilter>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d002      	beq.n	800bca8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	73fb      	strb	r3, [r7, #15]
 800bca6:	e008      	b.n	800bcba <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800bca8:	2100      	movs	r1, #0
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f003 f969 	bl	800ef82 <HAL_I2CEx_ConfigDigitalFilter>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800bcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b088      	sub	sp, #32
 800bcc8:	af02      	add	r7, sp, #8
 800bcca:	60ba      	str	r2, [r7, #8]
 800bccc:	461a      	mov	r2, r3
 800bcce:	4603      	mov	r3, r0
 800bcd0:	81fb      	strh	r3, [r7, #14]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	81bb      	strh	r3, [r7, #12]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800bcda:	89b9      	ldrh	r1, [r7, #12]
 800bcdc:	89f8      	ldrh	r0, [r7, #14]
 800bcde:	88fb      	ldrh	r3, [r7, #6]
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	2201      	movs	r2, #1
 800bce6:	f000 fb57 	bl	800c398 <I2C4_WriteReg>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d102      	bne.n	800bcf6 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	617b      	str	r3, [r7, #20]
 800bcf4:	e00c      	b.n	800bd10 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bcf6:	4809      	ldr	r0, [pc, #36]	; (800bd1c <BSP_I2C4_WriteReg+0x58>)
 800bcf8:	f002 fe46 	bl	800e988 <HAL_I2C_GetError>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	d103      	bne.n	800bd0a <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800bd02:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800bd06:	617b      	str	r3, [r7, #20]
 800bd08:	e002      	b.n	800bd10 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bd0a:	f06f 0303 	mvn.w	r3, #3
 800bd0e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800bd10:	697b      	ldr	r3, [r7, #20]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	2400b460 	.word	0x2400b460

0800bd20 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b088      	sub	sp, #32
 800bd24:	af02      	add	r7, sp, #8
 800bd26:	60ba      	str	r2, [r7, #8]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	81fb      	strh	r3, [r7, #14]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	81bb      	strh	r3, [r7, #12]
 800bd32:	4613      	mov	r3, r2
 800bd34:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800bd36:	89b9      	ldrh	r1, [r7, #12]
 800bd38:	89f8      	ldrh	r0, [r7, #14]
 800bd3a:	88fb      	ldrh	r3, [r7, #6]
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f000 fb4f 	bl	800c3e4 <I2C4_ReadReg>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d102      	bne.n	800bd52 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	e00c      	b.n	800bd6c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bd52:	4809      	ldr	r0, [pc, #36]	; (800bd78 <BSP_I2C4_ReadReg+0x58>)
 800bd54:	f002 fe18 	bl	800e988 <HAL_I2C_GetError>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	d103      	bne.n	800bd66 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800bd5e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800bd62:	617b      	str	r3, [r7, #20]
 800bd64:	e002      	b.n	800bd6c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bd66:	f06f 0303 	mvn.w	r3, #3
 800bd6a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800bd6c:	697b      	ldr	r3, [r7, #20]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	2400b460 	.word	0x2400b460

0800bd7c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800bd80:	f001 fbec 	bl	800d55c <HAL_GetTick>
 800bd84:	4603      	mov	r3, r0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b086      	sub	sp, #24
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800bd96:	2300      	movs	r3, #0
 800bd98:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d06b      	beq.n	800be78 <I2C_GetTiming+0xec>
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d068      	beq.n	800be78 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800bda6:	2300      	movs	r3, #0
 800bda8:	613b      	str	r3, [r7, #16]
 800bdaa:	e060      	b.n	800be6e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800bdac:	4a35      	ldr	r2, [pc, #212]	; (800be84 <I2C_GetTiming+0xf8>)
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	212c      	movs	r1, #44	; 0x2c
 800bdb2:	fb01 f303 	mul.w	r3, r1, r3
 800bdb6:	4413      	add	r3, r2
 800bdb8:	3304      	adds	r3, #4
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	683a      	ldr	r2, [r7, #0]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d352      	bcc.n	800be68 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800bdc2:	4a30      	ldr	r2, [pc, #192]	; (800be84 <I2C_GetTiming+0xf8>)
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	212c      	movs	r1, #44	; 0x2c
 800bdc8:	fb01 f303 	mul.w	r3, r1, r3
 800bdcc:	4413      	add	r3, r2
 800bdce:	3308      	adds	r3, #8
 800bdd0:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d847      	bhi.n	800be68 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800bdd8:	6939      	ldr	r1, [r7, #16]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f856 	bl	800be8c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800bde0:	6939      	ldr	r1, [r7, #16]
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f940 	bl	800c068 <I2C_Compute_SCLL_SCLH>
 800bde8:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2b7f      	cmp	r3, #127	; 0x7f
 800bdee:	d842      	bhi.n	800be76 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800bdf0:	4925      	ldr	r1, [pc, #148]	; (800be88 <I2C_GetTiming+0xfc>)
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	4413      	add	r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	440b      	add	r3, r1
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800be02:	4821      	ldr	r0, [pc, #132]	; (800be88 <I2C_GetTiming+0xfc>)
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	4613      	mov	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	4403      	add	r3, r0
 800be10:	3304      	adds	r3, #4
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	051b      	lsls	r3, r3, #20
 800be16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800be1a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800be1c:	481a      	ldr	r0, [pc, #104]	; (800be88 <I2C_GetTiming+0xfc>)
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	4613      	mov	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4413      	add	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4403      	add	r3, r0
 800be2a:	3308      	adds	r3, #8
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	041b      	lsls	r3, r3, #16
 800be30:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800be34:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800be36:	4814      	ldr	r0, [pc, #80]	; (800be88 <I2C_GetTiming+0xfc>)
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	4613      	mov	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4413      	add	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4403      	add	r3, r0
 800be44:	330c      	adds	r3, #12
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	021b      	lsls	r3, r3, #8
 800be4a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800be4c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800be4e:	480e      	ldr	r0, [pc, #56]	; (800be88 <I2C_GetTiming+0xfc>)
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	4613      	mov	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4413      	add	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4403      	add	r3, r0
 800be5c:	3310      	adds	r3, #16
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800be62:	430b      	orrs	r3, r1
 800be64:	617b      	str	r3, [r7, #20]
        }
        break;
 800be66:	e006      	b.n	800be76 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	3301      	adds	r3, #1
 800be6c:	613b      	str	r3, [r7, #16]
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	2b02      	cmp	r3, #2
 800be72:	d99b      	bls.n	800bdac <I2C_GetTiming+0x20>
 800be74:	e000      	b.n	800be78 <I2C_GetTiming+0xec>
        break;
 800be76:	bf00      	nop
      }
    }
  }

  return ret;
 800be78:	697b      	ldr	r3, [r7, #20]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3718      	adds	r7, #24
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	08029d78 	.word	0x08029d78
 800be88:	2400a38c 	.word	0x2400a38c

0800be8c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b08f      	sub	sp, #60	; 0x3c
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800be96:	2310      	movs	r3, #16
 800be98:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	085a      	lsrs	r2, r3, #1
 800be9e:	4b6e      	ldr	r3, [pc, #440]	; (800c058 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800bea0:	4413      	add	r3, r2
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bea8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800beaa:	2332      	movs	r3, #50	; 0x32
 800beac:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800beae:	f44f 7382 	mov.w	r3, #260	; 0x104
 800beb2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800beb4:	4a69      	ldr	r2, [pc, #420]	; (800c05c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	212c      	movs	r1, #44	; 0x2c
 800beba:	fb01 f303 	mul.w	r3, r1, r3
 800bebe:	4413      	add	r3, r2
 800bec0:	3324      	adds	r3, #36	; 0x24
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4618      	mov	r0, r3
 800bec6:	4a65      	ldr	r2, [pc, #404]	; (800c05c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	212c      	movs	r1, #44	; 0x2c
 800becc:	fb01 f303 	mul.w	r3, r1, r3
 800bed0:	4413      	add	r3, r2
 800bed2:	330c      	adds	r3, #12
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800bed8:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800beda:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800bedc:	495f      	ldr	r1, [pc, #380]	; (800c05c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	202c      	movs	r0, #44	; 0x2c
 800bee2:	fb00 f303 	mul.w	r3, r0, r3
 800bee6:	440b      	add	r3, r1
 800bee8:	3328      	adds	r3, #40	; 0x28
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3303      	adds	r3, #3
 800beee:	69f9      	ldr	r1, [r7, #28]
 800bef0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800bef8:	4a58      	ldr	r2, [pc, #352]	; (800c05c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	212c      	movs	r1, #44	; 0x2c
 800befe:	fb01 f303 	mul.w	r3, r1, r3
 800bf02:	4413      	add	r3, r2
 800bf04:	3310      	adds	r3, #16
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	4a54      	ldr	r2, [pc, #336]	; (800c05c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	212c      	movs	r1, #44	; 0x2c
 800bf10:	fb01 f303 	mul.w	r3, r1, r3
 800bf14:	4413      	add	r3, r2
 800bf16:	3320      	adds	r3, #32
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800bf1c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800bf1e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800bf20:	494e      	ldr	r1, [pc, #312]	; (800c05c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	202c      	movs	r0, #44	; 0x2c
 800bf26:	fb00 f303 	mul.w	r3, r0, r3
 800bf2a:	440b      	add	r3, r1
 800bf2c:	3328      	adds	r3, #40	; 0x28
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	3304      	adds	r3, #4
 800bf32:	69f9      	ldr	r1, [r7, #28]
 800bf34:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800bf38:	1ad3      	subs	r3, r2, r3
 800bf3a:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800bf3c:	4a47      	ldr	r2, [pc, #284]	; (800c05c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	212c      	movs	r1, #44	; 0x2c
 800bf42:	fb01 f303 	mul.w	r3, r1, r3
 800bf46:	4413      	add	r3, r2
 800bf48:	3320      	adds	r3, #32
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	4a43      	ldr	r2, [pc, #268]	; (800c05c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	212c      	movs	r1, #44	; 0x2c
 800bf54:	fb01 f303 	mul.w	r3, r1, r3
 800bf58:	4413      	add	r3, r2
 800bf5a:	3314      	adds	r3, #20
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4403      	add	r3, r0
 800bf60:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dc01      	bgt.n	800bf6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800bf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	dc01      	bgt.n	800bf76 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800bf76:	2300      	movs	r3, #0
 800bf78:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf7a:	e062      	b.n	800c042 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf80:	e059      	b.n	800c036 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	3301      	adds	r3, #1
 800bf86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf88:	3201      	adds	r2, #1
 800bf8a:	fb02 f203 	mul.w	r2, r2, r3
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	fb02 f303 	mul.w	r3, r2, r3
 800bf94:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d348      	bcc.n	800c030 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	623b      	str	r3, [r7, #32]
 800bfa2:	e042      	b.n	800c02a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	6a3a      	ldr	r2, [r7, #32]
 800bfaa:	fb02 f203 	mul.w	r2, r2, r3
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	fb02 f303 	mul.w	r3, r2, r3
 800bfb4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d332      	bcc.n	800c024 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800bfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d82e      	bhi.n	800c024 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800bfc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d02a      	beq.n	800c024 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bfce:	4b24      	ldr	r3, [pc, #144]	; (800c060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4924      	ldr	r1, [pc, #144]	; (800c064 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	440b      	add	r3, r1
 800bfde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfe0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bfe2:	4b1f      	ldr	r3, [pc, #124]	; (800c060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	491f      	ldr	r1, [pc, #124]	; (800c064 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800bfe8:	4613      	mov	r3, r2
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	440b      	add	r3, r1
 800bff2:	3304      	adds	r3, #4
 800bff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bff8:	4b19      	ldr	r3, [pc, #100]	; (800c060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	4919      	ldr	r1, [pc, #100]	; (800c064 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800bffe:	4613      	mov	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4413      	add	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	440b      	add	r3, r1
 800c008:	3308      	adds	r3, #8
 800c00a:	6a3a      	ldr	r2, [r7, #32]
 800c00c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800c00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c010:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800c012:	4b13      	ldr	r3, [pc, #76]	; (800c060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	3301      	adds	r3, #1
 800c018:	4a11      	ldr	r2, [pc, #68]	; (800c060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800c01a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800c01c:	4b10      	ldr	r3, [pc, #64]	; (800c060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b7f      	cmp	r3, #127	; 0x7f
 800c022:	d812      	bhi.n	800c04a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800c024:	6a3b      	ldr	r3, [r7, #32]
 800c026:	3301      	adds	r3, #1
 800c028:	623b      	str	r3, [r7, #32]
 800c02a:	6a3b      	ldr	r3, [r7, #32]
 800c02c:	2b0f      	cmp	r3, #15
 800c02e:	d9b9      	bls.n	800bfa4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c032:	3301      	adds	r3, #1
 800c034:	627b      	str	r3, [r7, #36]	; 0x24
 800c036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c038:	2b0f      	cmp	r3, #15
 800c03a:	d9a2      	bls.n	800bf82 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	3301      	adds	r3, #1
 800c040:	62bb      	str	r3, [r7, #40]	; 0x28
 800c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c044:	2b0f      	cmp	r3, #15
 800c046:	d999      	bls.n	800bf7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800c048:	e000      	b.n	800c04c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800c04a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800c04c:	373c      	adds	r7, #60	; 0x3c
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	3b9aca00 	.word	0x3b9aca00
 800c05c:	08029d78 	.word	0x08029d78
 800c060:	2400ad8c 	.word	0x2400ad8c
 800c064:	2400a38c 	.word	0x2400a38c

0800c068 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800c068:	b480      	push	{r7}
 800c06a:	b093      	sub	sp, #76	; 0x4c
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800c072:	f04f 33ff 	mov.w	r3, #4294967295
 800c076:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	085a      	lsrs	r2, r3, #1
 800c07c:	4b7a      	ldr	r3, [pc, #488]	; (800c268 <I2C_Compute_SCLL_SCLH+0x200>)
 800c07e:	4413      	add	r3, r2
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	fbb3 f3f2 	udiv	r3, r3, r2
 800c086:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800c088:	4a78      	ldr	r2, [pc, #480]	; (800c26c <I2C_Compute_SCLL_SCLH+0x204>)
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	212c      	movs	r1, #44	; 0x2c
 800c08e:	fb01 f303 	mul.w	r3, r1, r3
 800c092:	4413      	add	r3, r2
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	085a      	lsrs	r2, r3, #1
 800c098:	4b73      	ldr	r3, [pc, #460]	; (800c268 <I2C_Compute_SCLL_SCLH+0x200>)
 800c09a:	4413      	add	r3, r2
 800c09c:	4973      	ldr	r1, [pc, #460]	; (800c26c <I2C_Compute_SCLL_SCLH+0x204>)
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	202c      	movs	r0, #44	; 0x2c
 800c0a2:	fb00 f202 	mul.w	r2, r0, r2
 800c0a6:	440a      	add	r2, r1
 800c0a8:	6812      	ldr	r2, [r2, #0]
 800c0aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0ae:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800c0b0:	2332      	movs	r3, #50	; 0x32
 800c0b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800c0b4:	4a6d      	ldr	r2, [pc, #436]	; (800c26c <I2C_Compute_SCLL_SCLH+0x204>)
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	212c      	movs	r1, #44	; 0x2c
 800c0ba:	fb01 f303 	mul.w	r3, r1, r3
 800c0be:	4413      	add	r3, r2
 800c0c0:	3328      	adds	r3, #40	; 0x28
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c6:	fb02 f303 	mul.w	r3, r2, r3
 800c0ca:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800c0cc:	4a67      	ldr	r2, [pc, #412]	; (800c26c <I2C_Compute_SCLL_SCLH+0x204>)
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	212c      	movs	r1, #44	; 0x2c
 800c0d2:	fb01 f303 	mul.w	r3, r1, r3
 800c0d6:	4413      	add	r3, r2
 800c0d8:	3304      	adds	r3, #4
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a62      	ldr	r2, [pc, #392]	; (800c268 <I2C_Compute_SCLL_SCLH+0x200>)
 800c0de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0e2:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800c0e4:	4a61      	ldr	r2, [pc, #388]	; (800c26c <I2C_Compute_SCLL_SCLH+0x204>)
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	212c      	movs	r1, #44	; 0x2c
 800c0ea:	fb01 f303 	mul.w	r3, r1, r3
 800c0ee:	4413      	add	r3, r2
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a5c      	ldr	r2, [pc, #368]	; (800c268 <I2C_Compute_SCLL_SCLH+0x200>)
 800c0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0fa:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800c0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fe:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800c100:	2300      	movs	r3, #0
 800c102:	637b      	str	r3, [r7, #52]	; 0x34
 800c104:	e0a3      	b.n	800c24e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800c106:	495a      	ldr	r1, [pc, #360]	; (800c270 <I2C_Compute_SCLL_SCLH+0x208>)
 800c108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c10a:	4613      	mov	r3, r2
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	4413      	add	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	440b      	add	r3, r1
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	1c5a      	adds	r2, r3, #1
 800c118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11a:	fb02 f303 	mul.w	r3, r2, r3
 800c11e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800c120:	2300      	movs	r3, #0
 800c122:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c124:	e08c      	b.n	800c240 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800c126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c128:	6a3b      	ldr	r3, [r7, #32]
 800c12a:	441a      	add	r2, r3
 800c12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c12e:	3301      	adds	r3, #1
 800c130:	6979      	ldr	r1, [r7, #20]
 800c132:	fb01 f103 	mul.w	r1, r1, r3
 800c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	440b      	add	r3, r1
 800c13c:	4413      	add	r3, r2
 800c13e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800c140:	4a4a      	ldr	r2, [pc, #296]	; (800c26c <I2C_Compute_SCLL_SCLH+0x204>)
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	212c      	movs	r1, #44	; 0x2c
 800c146:	fb01 f303 	mul.w	r3, r1, r3
 800c14a:	4413      	add	r3, r2
 800c14c:	3318      	adds	r3, #24
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	693a      	ldr	r2, [r7, #16]
 800c152:	429a      	cmp	r2, r3
 800c154:	d971      	bls.n	800c23a <I2C_Compute_SCLL_SCLH+0x1d2>
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15a:	1ad2      	subs	r2, r2, r3
 800c15c:	6a3b      	ldr	r3, [r7, #32]
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	089b      	lsrs	r3, r3, #2
 800c162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c164:	429a      	cmp	r2, r3
 800c166:	d268      	bcs.n	800c23a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800c168:	2300      	movs	r3, #0
 800c16a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c16c:	e062      	b.n	800c234 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800c16e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	441a      	add	r2, r3
 800c174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c176:	3301      	adds	r3, #1
 800c178:	6979      	ldr	r1, [r7, #20]
 800c17a:	fb01 f103 	mul.w	r1, r1, r3
 800c17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c180:	005b      	lsls	r3, r3, #1
 800c182:	440b      	add	r3, r1
 800c184:	4413      	add	r3, r2
 800c186:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	441a      	add	r2, r3
 800c18e:	4937      	ldr	r1, [pc, #220]	; (800c26c <I2C_Compute_SCLL_SCLH+0x204>)
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	202c      	movs	r0, #44	; 0x2c
 800c194:	fb00 f303 	mul.w	r3, r0, r3
 800c198:	440b      	add	r3, r1
 800c19a:	3320      	adds	r3, #32
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	441a      	add	r2, r3
 800c1a0:	4932      	ldr	r1, [pc, #200]	; (800c26c <I2C_Compute_SCLL_SCLH+0x204>)
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	202c      	movs	r0, #44	; 0x2c
 800c1a6:	fb00 f303 	mul.w	r3, r0, r3
 800c1aa:	440b      	add	r3, r1
 800c1ac:	3324      	adds	r3, #36	; 0x24
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d338      	bcc.n	800c22e <I2C_Compute_SCLL_SCLH+0x1c6>
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d834      	bhi.n	800c22e <I2C_Compute_SCLL_SCLH+0x1c6>
 800c1c4:	4a29      	ldr	r2, [pc, #164]	; (800c26c <I2C_Compute_SCLL_SCLH+0x204>)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	212c      	movs	r1, #44	; 0x2c
 800c1ca:	fb01 f303 	mul.w	r3, r1, r3
 800c1ce:	4413      	add	r3, r2
 800c1d0:	331c      	adds	r3, #28
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d329      	bcc.n	800c22e <I2C_Compute_SCLL_SCLH+0x1c6>
 800c1da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d225      	bcs.n	800c22e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	da02      	bge.n	800c1f6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	425b      	negs	r3, r3
 800c1f4:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d917      	bls.n	800c22e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800c1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c200:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800c202:	491b      	ldr	r1, [pc, #108]	; (800c270 <I2C_Compute_SCLL_SCLH+0x208>)
 800c204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c206:	4613      	mov	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	440b      	add	r3, r1
 800c210:	3310      	adds	r3, #16
 800c212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c214:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800c216:	4916      	ldr	r1, [pc, #88]	; (800c270 <I2C_Compute_SCLL_SCLH+0x208>)
 800c218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c21a:	4613      	mov	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	4413      	add	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	440b      	add	r3, r1
 800c224:	330c      	adds	r3, #12
 800c226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c228:	601a      	str	r2, [r3, #0]
              ret = count;
 800c22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800c22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c230:	3301      	adds	r3, #1
 800c232:	63bb      	str	r3, [r7, #56]	; 0x38
 800c234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c236:	2bff      	cmp	r3, #255	; 0xff
 800c238:	d999      	bls.n	800c16e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800c23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c23c:	3301      	adds	r3, #1
 800c23e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c242:	2bff      	cmp	r3, #255	; 0xff
 800c244:	f67f af6f 	bls.w	800c126 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800c248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c24a:	3301      	adds	r3, #1
 800c24c:	637b      	str	r3, [r7, #52]	; 0x34
 800c24e:	4b09      	ldr	r3, [pc, #36]	; (800c274 <I2C_Compute_SCLL_SCLH+0x20c>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c254:	429a      	cmp	r2, r3
 800c256:	f4ff af56 	bcc.w	800c106 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800c25a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	374c      	adds	r7, #76	; 0x4c
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	3b9aca00 	.word	0x3b9aca00
 800c26c:	08029d78 	.word	0x08029d78
 800c270:	2400a38c 	.word	0x2400a38c
 800c274:	2400ad8c 	.word	0x2400ad8c

0800c278 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b08a      	sub	sp, #40	; 0x28
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800c280:	4b31      	ldr	r3, [pc, #196]	; (800c348 <I2C4_MspInit+0xd0>)
 800c282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c286:	4a30      	ldr	r2, [pc, #192]	; (800c348 <I2C4_MspInit+0xd0>)
 800c288:	f043 0308 	orr.w	r3, r3, #8
 800c28c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c290:	4b2d      	ldr	r3, [pc, #180]	; (800c348 <I2C4_MspInit+0xd0>)
 800c292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c296:	f003 0308 	and.w	r3, r3, #8
 800c29a:	613b      	str	r3, [r7, #16]
 800c29c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800c29e:	4b2a      	ldr	r3, [pc, #168]	; (800c348 <I2C4_MspInit+0xd0>)
 800c2a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2a4:	4a28      	ldr	r2, [pc, #160]	; (800c348 <I2C4_MspInit+0xd0>)
 800c2a6:	f043 0308 	orr.w	r3, r3, #8
 800c2aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2ae:	4b26      	ldr	r3, [pc, #152]	; (800c348 <I2C4_MspInit+0xd0>)
 800c2b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2b4:	f003 0308 	and.w	r3, r3, #8
 800c2b8:	60fb      	str	r3, [r7, #12]
 800c2ba:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800c2bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2c0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800c2c2:	2312      	movs	r3, #18
 800c2c4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800c2ce:	2304      	movs	r3, #4
 800c2d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800c2d2:	f107 0314 	add.w	r3, r7, #20
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	481c      	ldr	r0, [pc, #112]	; (800c34c <I2C4_MspInit+0xd4>)
 800c2da:	f001 fd43 	bl	800dd64 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800c2de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c2e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800c2e4:	2312      	movs	r3, #18
 800c2e6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800c2f0:	2304      	movs	r3, #4
 800c2f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800c2f4:	f107 0314 	add.w	r3, r7, #20
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4814      	ldr	r0, [pc, #80]	; (800c34c <I2C4_MspInit+0xd4>)
 800c2fc:	f001 fd32 	bl	800dd64 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800c300:	4b11      	ldr	r3, [pc, #68]	; (800c348 <I2C4_MspInit+0xd0>)
 800c302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c306:	4a10      	ldr	r2, [pc, #64]	; (800c348 <I2C4_MspInit+0xd0>)
 800c308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c30c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c310:	4b0d      	ldr	r3, [pc, #52]	; (800c348 <I2C4_MspInit+0xd0>)
 800c312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c31a:	60bb      	str	r3, [r7, #8]
 800c31c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800c31e:	4b0a      	ldr	r3, [pc, #40]	; (800c348 <I2C4_MspInit+0xd0>)
 800c320:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c324:	4a08      	ldr	r2, [pc, #32]	; (800c348 <I2C4_MspInit+0xd0>)
 800c326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c32a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800c32e:	4b06      	ldr	r3, [pc, #24]	; (800c348 <I2C4_MspInit+0xd0>)
 800c330:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c334:	4a04      	ldr	r2, [pc, #16]	; (800c348 <I2C4_MspInit+0xd0>)
 800c336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c33a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800c33e:	bf00      	nop
 800c340:	3728      	adds	r7, #40	; 0x28
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	58024400 	.word	0x58024400
 800c34c:	58020c00 	.word	0x58020c00

0800c350 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b088      	sub	sp, #32
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800c358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c35c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	4619      	mov	r1, r3
 800c362:	480b      	ldr	r0, [pc, #44]	; (800c390 <I2C4_MspDeInit+0x40>)
 800c364:	f001 feae 	bl	800e0c4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800c368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c36c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	4619      	mov	r1, r3
 800c372:	4807      	ldr	r0, [pc, #28]	; (800c390 <I2C4_MspDeInit+0x40>)
 800c374:	f001 fea6 	bl	800e0c4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800c378:	4b06      	ldr	r3, [pc, #24]	; (800c394 <I2C4_MspDeInit+0x44>)
 800c37a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c37e:	4a05      	ldr	r2, [pc, #20]	; (800c394 <I2C4_MspDeInit+0x44>)
 800c380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c384:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800c388:	bf00      	nop
 800c38a:	3720      	adds	r7, #32
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	58020c00 	.word	0x58020c00
 800c394:	58024400 	.word	0x58024400

0800c398 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b088      	sub	sp, #32
 800c39c:	af04      	add	r7, sp, #16
 800c39e:	607b      	str	r3, [r7, #4]
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	81fb      	strh	r3, [r7, #14]
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	81bb      	strh	r3, [r7, #12]
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800c3ac:	8978      	ldrh	r0, [r7, #10]
 800c3ae:	89ba      	ldrh	r2, [r7, #12]
 800c3b0:	89f9      	ldrh	r1, [r7, #14]
 800c3b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c3b6:	9302      	str	r3, [sp, #8]
 800c3b8:	8b3b      	ldrh	r3, [r7, #24]
 800c3ba:	9301      	str	r3, [sp, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	4807      	ldr	r0, [pc, #28]	; (800c3e0 <I2C4_WriteReg+0x48>)
 800c3c4:	f002 f8a4 	bl	800e510 <HAL_I2C_Mem_Write>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e001      	b.n	800c3d6 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800c3d2:	f06f 0307 	mvn.w	r3, #7
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	2400b460 	.word	0x2400b460

0800c3e4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b088      	sub	sp, #32
 800c3e8:	af04      	add	r7, sp, #16
 800c3ea:	607b      	str	r3, [r7, #4]
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	81fb      	strh	r3, [r7, #14]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	81bb      	strh	r3, [r7, #12]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800c3f8:	8978      	ldrh	r0, [r7, #10]
 800c3fa:	89ba      	ldrh	r2, [r7, #12]
 800c3fc:	89f9      	ldrh	r1, [r7, #14]
 800c3fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c402:	9302      	str	r3, [sp, #8]
 800c404:	8b3b      	ldrh	r3, [r7, #24]
 800c406:	9301      	str	r3, [sp, #4]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	4603      	mov	r3, r0
 800c40e:	4807      	ldr	r0, [pc, #28]	; (800c42c <I2C4_ReadReg+0x48>)
 800c410:	f002 f992 	bl	800e738 <HAL_I2C_Mem_Read>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d101      	bne.n	800c41e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800c41a:	2300      	movs	r3, #0
 800c41c:	e001      	b.n	800c422 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800c41e:	f06f 0307 	mvn.w	r3, #7
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	2400b460 	.word	0x2400b460

0800c430 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b090      	sub	sp, #64	; 0x40
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c43a:	2300      	movs	r3, #0
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d003      	beq.n	800c44c <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c444:	f06f 0301 	mvn.w	r3, #1
 800c448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c44a:	e090      	b.n	800c56e <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800c44c:	494a      	ldr	r1, [pc, #296]	; (800c578 <BSP_QSPI_Init+0x148>)
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	4613      	mov	r3, r2
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	4413      	add	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	440b      	add	r3, r1
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f040 8086 	bne.w	800c56e <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800c462:	4846      	ldr	r0, [pc, #280]	; (800c57c <BSP_QSPI_Init+0x14c>)
 800c464:	f000 f99c 	bl	800c7a0 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800c468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d17f      	bne.n	800c56e <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800c46e:	f107 031c 	add.w	r3, r7, #28
 800c472:	4618      	mov	r0, r3
 800c474:	f7fe ffe9 	bl	800b44a <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	785b      	ldrb	r3, [r3, #1]
 800c47c:	461a      	mov	r2, r3
 800c47e:	4b40      	ldr	r3, [pc, #256]	; (800c580 <BSP_QSPI_Init+0x150>)
 800c480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c484:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800c486:	2340      	movs	r3, #64	; 0x40
 800c488:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c490:	fa93 f3a3 	rbit	r3, r3
 800c494:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c498:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800c49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d101      	bne.n	800c4a4 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800c4a0:	2320      	movs	r3, #32
 800c4a2:	e003      	b.n	800c4ac <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	fab3 f383 	clz	r3, r3
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	785b      	ldrb	r3, [r3, #1]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <BSP_QSPI_Init+0x8c>
 800c4b8:	2310      	movs	r3, #16
 800c4ba:	e000      	b.n	800c4be <BSP_QSPI_Init+0x8e>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800c4c0:	f107 030c 	add.w	r3, r7, #12
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	482d      	ldr	r0, [pc, #180]	; (800c57c <BSP_QSPI_Init+0x14c>)
 800c4c8:	f000 f85c 	bl	800c584 <MX_QSPI_Init>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800c4d2:	f06f 0303 	mvn.w	r3, #3
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4d8:	e049      	b.n	800c56e <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 faa8 	bl	800ca30 <QSPI_ResetMemory>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c4e6:	f06f 0304 	mvn.w	r3, #4
 800c4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ec:	e03f      	b.n	800c56e <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c4ee:	4922      	ldr	r1, [pc, #136]	; (800c578 <BSP_QSPI_Init+0x148>)
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	005b      	lsls	r3, r3, #1
 800c4f6:	4413      	add	r3, r2
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	440b      	add	r3, r1
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	4619      	mov	r1, r3
 800c502:	481e      	ldr	r0, [pc, #120]	; (800c57c <BSP_QSPI_Init+0x14c>)
 800c504:	f7ff f810 	bl	800b528 <MT25TL01G_AutoPollingMemReady>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d003      	beq.n	800c516 <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c50e:	f06f 0304 	mvn.w	r3, #4
 800c512:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c514:	e02b      	b.n	800c56e <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c516:	4918      	ldr	r1, [pc, #96]	; (800c578 <BSP_QSPI_Init+0x148>)
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	4613      	mov	r3, r2
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	440b      	add	r3, r1
 800c524:	3301      	adds	r3, #1
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	4619      	mov	r1, r3
 800c52a:	4814      	ldr	r0, [pc, #80]	; (800c57c <BSP_QSPI_Init+0x14c>)
 800c52c:	f7fe ffb4 	bl	800b498 <MT25TL01G_Enter4BytesAddressMode>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d003      	beq.n	800c53e <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c536:	f06f 0304 	mvn.w	r3, #4
 800c53a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c53c:	e017      	b.n	800c56e <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fae2 	bl	800cb08 <QSPI_DummyCyclesCfg>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d003      	beq.n	800c552 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c54a:	f06f 0304 	mvn.w	r3, #4
 800c54e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c550:	e00d      	b.n	800c56e <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	7819      	ldrb	r1, [r3, #0]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	785b      	ldrb	r3, [r3, #1]
 800c55a:	461a      	mov	r2, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f89d 	bl	800c69c <BSP_QSPI_ConfigFlash>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d002      	beq.n	800c56e <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800c568:	f06f 0304 	mvn.w	r3, #4
 800c56c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c570:	4618      	mov	r0, r3
 800c572:	3740      	adds	r7, #64	; 0x40
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	2400b4ac 	.word	0x2400b4ac
 800c57c:	2400b388 	.word	0x2400b388
 800c580:	08029dfc 	.word	0x08029dfc

0800c584 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a13      	ldr	r2, [pc, #76]	; (800c5e0 <MX_QSPI_Init+0x5c>)
 800c592:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	685a      	ldr	r2, [r3, #4]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	689a      	ldr	r2, [r3, #8]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c5b8:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	68da      	ldr	r2, [r3, #12]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f003 fa7a 	bl	800fac8 <HAL_QSPI_Init>
 800c5d4:	4603      	mov	r3, r0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	52005000 	.word	0x52005000

0800c5e4 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d003      	beq.n	800c5fe <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c5f6:	f06f 0301 	mvn.w	r3, #1
 800c5fa:	60fb      	str	r3, [r7, #12]
 800c5fc:	e045      	b.n	800c68a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800c5fe:	4925      	ldr	r1, [pc, #148]	; (800c694 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	4613      	mov	r3, r2
 800c604:	005b      	lsls	r3, r3, #1
 800c606:	4413      	add	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	440b      	add	r3, r1
 800c60c:	3302      	adds	r3, #2
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d11d      	bne.n	800c650 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c614:	491f      	ldr	r1, [pc, #124]	; (800c694 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	4613      	mov	r3, r2
 800c61a:	005b      	lsls	r3, r3, #1
 800c61c:	4413      	add	r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	440b      	add	r3, r1
 800c622:	3301      	adds	r3, #1
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	4619      	mov	r1, r3
 800c628:	481b      	ldr	r0, [pc, #108]	; (800c698 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800c62a:	f7ff f8d3 	bl	800b7d4 <MT25TL01G_EnableMemoryMappedModeSTR>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d003      	beq.n	800c63c <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c634:	f06f 0304 	mvn.w	r3, #4
 800c638:	60fb      	str	r3, [r7, #12]
 800c63a:	e026      	b.n	800c68a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800c63c:	4915      	ldr	r1, [pc, #84]	; (800c694 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	4613      	mov	r3, r2
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	4413      	add	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	440b      	add	r3, r1
 800c64a:	2202      	movs	r2, #2
 800c64c:	701a      	strb	r2, [r3, #0]
 800c64e:	e01c      	b.n	800c68a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c650:	4910      	ldr	r1, [pc, #64]	; (800c694 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	4613      	mov	r3, r2
 800c656:	005b      	lsls	r3, r3, #1
 800c658:	4413      	add	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	440b      	add	r3, r1
 800c65e:	3301      	adds	r3, #1
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	4619      	mov	r1, r3
 800c664:	480c      	ldr	r0, [pc, #48]	; (800c698 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800c666:	f7ff f84b 	bl	800b700 <MT25TL01G_EnableMemoryMappedModeDTR>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d003      	beq.n	800c678 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c670:	f06f 0304 	mvn.w	r3, #4
 800c674:	60fb      	str	r3, [r7, #12]
 800c676:	e008      	b.n	800c68a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800c678:	4906      	ldr	r1, [pc, #24]	; (800c694 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	4613      	mov	r3, r2
 800c67e:	005b      	lsls	r3, r3, #1
 800c680:	4413      	add	r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	440b      	add	r3, r1
 800c686:	2202      	movs	r2, #2
 800c688:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c68a:	68fb      	ldr	r3, [r7, #12]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3710      	adds	r7, #16
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	2400b4ac 	.word	0x2400b4ac
 800c698:	2400b388 	.word	0x2400b388

0800c69c <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	70fb      	strb	r3, [r7, #3]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d003      	beq.n	800c6be <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c6b6:	f06f 0301 	mvn.w	r3, #1
 800c6ba:	60fb      	str	r3, [r7, #12]
 800c6bc:	e067      	b.n	800c78e <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800c6be:	4936      	ldr	r1, [pc, #216]	; (800c798 <BSP_QSPI_ConfigFlash+0xfc>)
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	4413      	add	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	440b      	add	r3, r1
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d103      	bne.n	800c6da <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800c6d2:	f06f 0319 	mvn.w	r3, #25
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	e059      	b.n	800c78e <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800c6da:	78bb      	ldrb	r3, [r7, #2]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d101      	bne.n	800c6e4 <BSP_QSPI_ConfigFlash+0x48>
 800c6e0:	2310      	movs	r3, #16
 800c6e2:	e000      	b.n	800c6e6 <BSP_QSPI_ConfigFlash+0x4a>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	4a2d      	ldr	r2, [pc, #180]	; (800c79c <BSP_QSPI_ConfigFlash+0x100>)
 800c6e8:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800c6ea:	482c      	ldr	r0, [pc, #176]	; (800c79c <BSP_QSPI_ConfigFlash+0x100>)
 800c6ec:	f003 f9ec 	bl	800fac8 <HAL_QSPI_Init>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d003      	beq.n	800c6fe <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800c6f6:	f06f 0303 	mvn.w	r3, #3
 800c6fa:	60fb      	str	r3, [r7, #12]
 800c6fc:	e047      	b.n	800c78e <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800c6fe:	4926      	ldr	r1, [pc, #152]	; (800c798 <BSP_QSPI_ConfigFlash+0xfc>)
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	4613      	mov	r3, r2
 800c704:	005b      	lsls	r3, r3, #1
 800c706:	4413      	add	r3, r2
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	440b      	add	r3, r1
 800c70c:	3301      	adds	r3, #1
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b03      	cmp	r3, #3
 800c712:	d10c      	bne.n	800c72e <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800c714:	78fb      	ldrb	r3, [r7, #3]
 800c716:	2b03      	cmp	r3, #3
 800c718:	d016      	beq.n	800c748 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800c71a:	4820      	ldr	r0, [pc, #128]	; (800c79c <BSP_QSPI_ConfigFlash+0x100>)
 800c71c:	f7fe ffc5 	bl	800b6aa <MT25TL01G_ExitQPIMode>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d010      	beq.n	800c748 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800c726:	f06f 0304 	mvn.w	r3, #4
 800c72a:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800c72c:	e00c      	b.n	800c748 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800c72e:	78fb      	ldrb	r3, [r7, #3]
 800c730:	2b03      	cmp	r3, #3
 800c732:	d10b      	bne.n	800c74c <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800c734:	4819      	ldr	r0, [pc, #100]	; (800c79c <BSP_QSPI_ConfigFlash+0x100>)
 800c736:	f7fe ff8e 	bl	800b656 <MT25TL01G_EnterQPIMode>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d005      	beq.n	800c74c <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800c740:	f06f 0304 	mvn.w	r3, #4
 800c744:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800c746:	e001      	b.n	800c74c <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800c748:	bf00      	nop
 800c74a:	e000      	b.n	800c74e <BSP_QSPI_ConfigFlash+0xb2>
          break;
 800c74c:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d11c      	bne.n	800c78e <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800c754:	4910      	ldr	r1, [pc, #64]	; (800c798 <BSP_QSPI_ConfigFlash+0xfc>)
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	4613      	mov	r3, r2
 800c75a:	005b      	lsls	r3, r3, #1
 800c75c:	4413      	add	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	440b      	add	r3, r1
 800c762:	2201      	movs	r2, #1
 800c764:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800c766:	490c      	ldr	r1, [pc, #48]	; (800c798 <BSP_QSPI_ConfigFlash+0xfc>)
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	4613      	mov	r3, r2
 800c76c:	005b      	lsls	r3, r3, #1
 800c76e:	4413      	add	r3, r2
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	440b      	add	r3, r1
 800c774:	3301      	adds	r3, #1
 800c776:	78fa      	ldrb	r2, [r7, #3]
 800c778:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800c77a:	4907      	ldr	r1, [pc, #28]	; (800c798 <BSP_QSPI_ConfigFlash+0xfc>)
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	4613      	mov	r3, r2
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	4413      	add	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	440b      	add	r3, r1
 800c788:	3302      	adds	r3, #2
 800c78a:	78ba      	ldrb	r2, [r7, #2]
 800c78c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c78e:	68fb      	ldr	r3, [r7, #12]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	2400b4ac 	.word	0x2400b4ac
 800c79c:	2400b388 	.word	0x2400b388

0800c7a0 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b094      	sub	sp, #80	; 0x50
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800c7a8:	4b9c      	ldr	r3, [pc, #624]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c7aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c7ae:	4a9b      	ldr	r2, [pc, #620]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c7b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c7b4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c7b8:	4b98      	ldr	r3, [pc, #608]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c7ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c7be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800c7c6:	4b95      	ldr	r3, [pc, #596]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ca:	4a94      	ldr	r2, [pc, #592]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c7cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c7d0:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800c7d2:	4b92      	ldr	r3, [pc, #584]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c7d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7d6:	4a91      	ldr	r2, [pc, #580]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c7d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7dc:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800c7de:	4b8f      	ldr	r3, [pc, #572]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c7e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7e4:	4a8d      	ldr	r2, [pc, #564]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c7e6:	f043 0320 	orr.w	r3, r3, #32
 800c7ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c7ee:	4b8b      	ldr	r3, [pc, #556]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c7f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7f4:	f003 0320 	and.w	r3, r3, #32
 800c7f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800c7fc:	4b87      	ldr	r3, [pc, #540]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c7fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c802:	4a86      	ldr	r2, [pc, #536]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c80c:	4b83      	ldr	r3, [pc, #524]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c80e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c816:	633b      	str	r3, [r7, #48]	; 0x30
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800c81a:	4b80      	ldr	r3, [pc, #512]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c81c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c820:	4a7e      	ldr	r2, [pc, #504]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c822:	f043 0308 	orr.w	r3, r3, #8
 800c826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c82a:	4b7c      	ldr	r3, [pc, #496]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c82c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c830:	f003 0308 	and.w	r3, r3, #8
 800c834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800c838:	4b78      	ldr	r3, [pc, #480]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c83a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c83e:	4a77      	ldr	r2, [pc, #476]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c840:	f043 0320 	orr.w	r3, r3, #32
 800c844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c848:	4b74      	ldr	r3, [pc, #464]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c84a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c84e:	f003 0320 	and.w	r3, r3, #32
 800c852:	62bb      	str	r3, [r7, #40]	; 0x28
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800c856:	4b71      	ldr	r3, [pc, #452]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c85c:	4a6f      	ldr	r2, [pc, #444]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c85e:	f043 0320 	orr.w	r3, r3, #32
 800c862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c866:	4b6d      	ldr	r3, [pc, #436]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c86c:	f003 0320 	and.w	r3, r3, #32
 800c870:	627b      	str	r3, [r7, #36]	; 0x24
 800c872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800c874:	4b69      	ldr	r3, [pc, #420]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c87a:	4a68      	ldr	r2, [pc, #416]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c87c:	f043 0320 	orr.w	r3, r3, #32
 800c880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c884:	4b65      	ldr	r3, [pc, #404]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c88a:	f003 0320 	and.w	r3, r3, #32
 800c88e:	623b      	str	r3, [r7, #32]
 800c890:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800c892:	4b62      	ldr	r3, [pc, #392]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c898:	4a60      	ldr	r2, [pc, #384]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c89e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c8a2:	4b5e      	ldr	r3, [pc, #376]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c8a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ac:	61fb      	str	r3, [r7, #28]
 800c8ae:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800c8b0:	4b5a      	ldr	r3, [pc, #360]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c8b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8b6:	4a59      	ldr	r2, [pc, #356]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c8b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c8c0:	4b56      	ldr	r3, [pc, #344]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c8c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ca:	61bb      	str	r3, [r7, #24]
 800c8cc:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800c8ce:	4b53      	ldr	r3, [pc, #332]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c8d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8d4:	4a51      	ldr	r2, [pc, #324]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c8de:	4b4f      	ldr	r3, [pc, #316]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c8e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8e8:	617b      	str	r3, [r7, #20]
 800c8ea:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800c8ec:	4b4b      	ldr	r3, [pc, #300]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c8ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8f2:	4a4a      	ldr	r2, [pc, #296]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c8fc:	4b47      	ldr	r3, [pc, #284]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c8fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c906:	613b      	str	r3, [r7, #16]
 800c908:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800c90a:	4b44      	ldr	r3, [pc, #272]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c90c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c910:	4a42      	ldr	r2, [pc, #264]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c91a:	4b40      	ldr	r3, [pc, #256]	; (800ca1c <QSPI_MspInit+0x27c>)
 800c91c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c924:	60fb      	str	r3, [r7, #12]
 800c926:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800c928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c92c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c92e:	2302      	movs	r3, #2
 800c930:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800c932:	2303      	movs	r3, #3
 800c934:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c936:	2300      	movs	r3, #0
 800c938:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c93a:	2309      	movs	r3, #9
 800c93c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800c93e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c942:	4619      	mov	r1, r3
 800c944:	4836      	ldr	r0, [pc, #216]	; (800ca20 <QSPI_MspInit+0x280>)
 800c946:	f001 fa0d 	bl	800dd64 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800c94a:	2340      	movs	r3, #64	; 0x40
 800c94c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c94e:	2301      	movs	r3, #1
 800c950:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800c952:	230a      	movs	r3, #10
 800c954:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800c956:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c95a:	4619      	mov	r1, r3
 800c95c:	4831      	ldr	r0, [pc, #196]	; (800ca24 <QSPI_MspInit+0x284>)
 800c95e:	f001 fa01 	bl	800dd64 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800c962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c966:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c968:	2300      	movs	r3, #0
 800c96a:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c96c:	2309      	movs	r3, #9
 800c96e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800c970:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c974:	4619      	mov	r1, r3
 800c976:	482c      	ldr	r0, [pc, #176]	; (800ca28 <QSPI_MspInit+0x288>)
 800c978:	f001 f9f4 	bl	800dd64 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800c97c:	2304      	movs	r3, #4
 800c97e:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c980:	2309      	movs	r3, #9
 800c982:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800c984:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c988:	4619      	mov	r1, r3
 800c98a:	4828      	ldr	r0, [pc, #160]	; (800ca2c <QSPI_MspInit+0x28c>)
 800c98c:	f001 f9ea 	bl	800dd64 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800c990:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c994:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800c996:	230a      	movs	r3, #10
 800c998:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800c99a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c99e:	4619      	mov	r1, r3
 800c9a0:	481f      	ldr	r0, [pc, #124]	; (800ca20 <QSPI_MspInit+0x280>)
 800c9a2:	f001 f9df 	bl	800dd64 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800c9a6:	2308      	movs	r3, #8
 800c9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c9aa:	2309      	movs	r3, #9
 800c9ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800c9ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	481d      	ldr	r0, [pc, #116]	; (800ca2c <QSPI_MspInit+0x28c>)
 800c9b6:	f001 f9d5 	bl	800dd64 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800c9ba:	2380      	movs	r3, #128	; 0x80
 800c9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c9be:	2309      	movs	r3, #9
 800c9c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800c9c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	4815      	ldr	r0, [pc, #84]	; (800ca20 <QSPI_MspInit+0x280>)
 800c9ca:	f001 f9cb 	bl	800dd64 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800c9ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800c9d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4812      	ldr	r0, [pc, #72]	; (800ca24 <QSPI_MspInit+0x284>)
 800c9dc:	f001 f9c2 	bl	800dd64 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800c9e0:	2340      	movs	r3, #64	; 0x40
 800c9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800c9e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	480d      	ldr	r0, [pc, #52]	; (800ca20 <QSPI_MspInit+0x280>)
 800c9ec:	f001 f9ba 	bl	800dd64 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800c9f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800c9f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	4809      	ldr	r0, [pc, #36]	; (800ca24 <QSPI_MspInit+0x284>)
 800c9fe:	f001 f9b1 	bl	800dd64 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800ca02:	2200      	movs	r2, #0
 800ca04:	210f      	movs	r1, #15
 800ca06:	205c      	movs	r0, #92	; 0x5c
 800ca08:	f000 fe9c 	bl	800d744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800ca0c:	205c      	movs	r0, #92	; 0x5c
 800ca0e:	f000 feb3 	bl	800d778 <HAL_NVIC_EnableIRQ>
}
 800ca12:	bf00      	nop
 800ca14:	3750      	adds	r7, #80	; 0x50
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	58024400 	.word	0x58024400
 800ca20:	58021400 	.word	0x58021400
 800ca24:	58021800 	.word	0x58021800
 800ca28:	58020c00 	.word	0x58020c00
 800ca2c:	58021c00 	.word	0x58021c00

0800ca30 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800ca3c:	2103      	movs	r1, #3
 800ca3e:	4830      	ldr	r0, [pc, #192]	; (800cb00 <QSPI_ResetMemory+0xd0>)
 800ca40:	f7fe ff30 	bl	800b8a4 <MT25TL01G_ResetEnable>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d003      	beq.n	800ca52 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800ca4a:	f06f 0304 	mvn.w	r3, #4
 800ca4e:	60fb      	str	r3, [r7, #12]
 800ca50:	e051      	b.n	800caf6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800ca52:	2103      	movs	r1, #3
 800ca54:	482a      	ldr	r0, [pc, #168]	; (800cb00 <QSPI_ResetMemory+0xd0>)
 800ca56:	f7fe ff57 	bl	800b908 <MT25TL01G_ResetMemory>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d003      	beq.n	800ca68 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ca60:	f06f 0304 	mvn.w	r3, #4
 800ca64:	60fb      	str	r3, [r7, #12]
 800ca66:	e046      	b.n	800caf6 <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ca68:	4926      	ldr	r1, [pc, #152]	; (800cb04 <QSPI_ResetMemory+0xd4>)
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	005b      	lsls	r3, r3, #1
 800ca70:	4413      	add	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	440b      	add	r3, r1
 800ca76:	3301      	adds	r3, #1
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	4820      	ldr	r0, [pc, #128]	; (800cb00 <QSPI_ResetMemory+0xd0>)
 800ca7e:	f7fe fd53 	bl	800b528 <MT25TL01G_AutoPollingMemReady>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d003      	beq.n	800ca90 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ca88:	f06f 0304 	mvn.w	r3, #4
 800ca8c:	60fb      	str	r3, [r7, #12]
 800ca8e:	e032      	b.n	800caf6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800ca90:	2100      	movs	r1, #0
 800ca92:	481b      	ldr	r0, [pc, #108]	; (800cb00 <QSPI_ResetMemory+0xd0>)
 800ca94:	f7fe ff06 	bl	800b8a4 <MT25TL01G_ResetEnable>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d003      	beq.n	800caa6 <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ca9e:	f06f 0304 	mvn.w	r3, #4
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	e027      	b.n	800caf6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800caa6:	2100      	movs	r1, #0
 800caa8:	4815      	ldr	r0, [pc, #84]	; (800cb00 <QSPI_ResetMemory+0xd0>)
 800caaa:	f7fe ff2d 	bl	800b908 <MT25TL01G_ResetMemory>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d003      	beq.n	800cabc <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800cab4:	f06f 0304 	mvn.w	r3, #4
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	e01c      	b.n	800caf6 <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800cabc:	4911      	ldr	r1, [pc, #68]	; (800cb04 <QSPI_ResetMemory+0xd4>)
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	4613      	mov	r3, r2
 800cac2:	005b      	lsls	r3, r3, #1
 800cac4:	4413      	add	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	440b      	add	r3, r1
 800caca:	2201      	movs	r2, #1
 800cacc:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800cace:	490d      	ldr	r1, [pc, #52]	; (800cb04 <QSPI_ResetMemory+0xd4>)
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	4613      	mov	r3, r2
 800cad4:	005b      	lsls	r3, r3, #1
 800cad6:	4413      	add	r3, r2
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	440b      	add	r3, r1
 800cadc:	3301      	adds	r3, #1
 800cade:	2200      	movs	r2, #0
 800cae0:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800cae2:	4908      	ldr	r1, [pc, #32]	; (800cb04 <QSPI_ResetMemory+0xd4>)
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	4613      	mov	r3, r2
 800cae8:	005b      	lsls	r3, r3, #1
 800caea:	4413      	add	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	440b      	add	r3, r1
 800caf0:	3302      	adds	r3, #2
 800caf2:	2200      	movs	r2, #0
 800caf4:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 800caf6:	68fb      	ldr	r3, [r7, #12]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	2400b388 	.word	0x2400b388
 800cb04:	2400b4ac 	.word	0x2400b4ac

0800cb08 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b092      	sub	sp, #72	; 0x48
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800cb10:	2300      	movs	r3, #0
 800cb12:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800cb18:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cb1c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800cb1e:	2385      	movs	r3, #133	; 0x85
 800cb20:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800cb22:	2300      	movs	r3, #0
 800cb24:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800cb26:	2300      	movs	r3, #0
 800cb28:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800cb2a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800cb2e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800cb30:	2300      	movs	r3, #0
 800cb32:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 800cb34:	2302      	movs	r3, #2
 800cb36:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800cb40:	2300      	movs	r3, #0
 800cb42:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cb44:	f107 030c 	add.w	r3, r7, #12
 800cb48:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	482b      	ldr	r0, [pc, #172]	; (800cbfc <QSPI_DummyCyclesCfg+0xf4>)
 800cb50:	f003 f9e8 	bl	800ff24 <HAL_QSPI_Command>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d002      	beq.n	800cb60 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800cb5a:	f06f 0304 	mvn.w	r3, #4
 800cb5e:	e048      	b.n	800cbf2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cb60:	f107 030a 	add.w	r3, r7, #10
 800cb64:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb68:	4619      	mov	r1, r3
 800cb6a:	4824      	ldr	r0, [pc, #144]	; (800cbfc <QSPI_DummyCyclesCfg+0xf4>)
 800cb6c:	f003 faca 	bl	8010104 <HAL_QSPI_Receive>
 800cb70:	4603      	mov	r3, r0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d002      	beq.n	800cb7c <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800cb76:	f06f 0304 	mvn.w	r3, #4
 800cb7a:	e03a      	b.n	800cbf2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800cb7c:	4920      	ldr	r1, [pc, #128]	; (800cc00 <QSPI_DummyCyclesCfg+0xf8>)
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	4613      	mov	r3, r2
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	4413      	add	r3, r2
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	440b      	add	r3, r1
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	4619      	mov	r1, r3
 800cb90:	481a      	ldr	r0, [pc, #104]	; (800cbfc <QSPI_DummyCyclesCfg+0xf4>)
 800cb92:	f7fe fd05 	bl	800b5a0 <MT25TL01G_WriteEnable>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800cb9c:	f06f 0304 	mvn.w	r3, #4
 800cba0:	e027      	b.n	800cbf2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800cba2:	2381      	movs	r3, #129	; 0x81
 800cba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800cba6:	897a      	ldrh	r2, [r7, #10]
 800cba8:	f640 730f 	movw	r3, #3855	; 0xf0f
 800cbac:	4013      	ands	r3, r2
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	4b14      	ldr	r3, [pc, #80]	; (800cc04 <QSPI_DummyCyclesCfg+0xfc>)
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cbb8:	f107 030c 	add.w	r3, r7, #12
 800cbbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	480e      	ldr	r0, [pc, #56]	; (800cbfc <QSPI_DummyCyclesCfg+0xf4>)
 800cbc4:	f003 f9ae 	bl	800ff24 <HAL_QSPI_Command>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d002      	beq.n	800cbd4 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800cbce:	f06f 0304 	mvn.w	r3, #4
 800cbd2:	e00e      	b.n	800cbf2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800cbd4:	f107 030a 	add.w	r3, r7, #10
 800cbd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4807      	ldr	r0, [pc, #28]	; (800cbfc <QSPI_DummyCyclesCfg+0xf4>)
 800cbe0:	f003 f9fe 	bl	800ffe0 <HAL_QSPI_Transmit>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d002      	beq.n	800cbf0 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800cbea:	f06f 0304 	mvn.w	r3, #4
 800cbee:	e000      	b.n	800cbf2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800cbf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3748      	adds	r7, #72	; 0x48
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	2400b388 	.word	0x2400b388
 800cc00:	2400b4ac 	.word	0x2400b4ac
 800cc04:	ffff8080 	.word	0xffff8080

0800cc08 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800cc10:	2300      	movs	r3, #0
 800cc12:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800cc1a:	f06f 0301 	mvn.w	r3, #1
 800cc1e:	60fb      	str	r3, [r7, #12]
 800cc20:	e044      	b.n	800ccac <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2234      	movs	r2, #52	; 0x34
 800cc26:	fb02 f303 	mul.w	r3, r2, r3
 800cc2a:	4a23      	ldr	r2, [pc, #140]	; (800ccb8 <BSP_SDRAM_Init+0xb0>)
 800cc2c:	4413      	add	r3, r2
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 f8b8 	bl	800cda4 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2234      	movs	r2, #52	; 0x34
 800cc38:	fb02 f303 	mul.w	r3, r2, r3
 800cc3c:	4a1e      	ldr	r2, [pc, #120]	; (800ccb8 <BSP_SDRAM_Init+0xb0>)
 800cc3e:	4413      	add	r3, r2
 800cc40:	2210      	movs	r2, #16
 800cc42:	2104      	movs	r1, #4
 800cc44:	4618      	mov	r0, r3
 800cc46:	f000 f861 	bl	800cd0c <MX_SDRAM_BANK2_Init>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d003      	beq.n	800cc58 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800cc50:	f04f 33ff 	mov.w	r3, #4294967295
 800cc54:	60fb      	str	r3, [r7, #12]
 800cc56:	e029      	b.n	800ccac <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800cc58:	4b18      	ldr	r3, [pc, #96]	; (800ccbc <BSP_SDRAM_Init+0xb4>)
 800cc5a:	2208      	movs	r2, #8
 800cc5c:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800cc5e:	4b17      	ldr	r3, [pc, #92]	; (800ccbc <BSP_SDRAM_Init+0xb4>)
 800cc60:	2203      	movs	r2, #3
 800cc62:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800cc64:	4b15      	ldr	r3, [pc, #84]	; (800ccbc <BSP_SDRAM_Init+0xb4>)
 800cc66:	f240 6203 	movw	r2, #1539	; 0x603
 800cc6a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 800cc6c:	4b13      	ldr	r3, [pc, #76]	; (800ccbc <BSP_SDRAM_Init+0xb4>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800cc72:	4b12      	ldr	r3, [pc, #72]	; (800ccbc <BSP_SDRAM_Init+0xb4>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800cc78:	4b10      	ldr	r3, [pc, #64]	; (800ccbc <BSP_SDRAM_Init+0xb4>)
 800cc7a:	2230      	movs	r2, #48	; 0x30
 800cc7c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800cc7e:	4b0f      	ldr	r3, [pc, #60]	; (800ccbc <BSP_SDRAM_Init+0xb4>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800cc84:	4b0d      	ldr	r3, [pc, #52]	; (800ccbc <BSP_SDRAM_Init+0xb4>)
 800cc86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc8a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2234      	movs	r2, #52	; 0x34
 800cc90:	fb02 f303 	mul.w	r3, r2, r3
 800cc94:	4a08      	ldr	r2, [pc, #32]	; (800ccb8 <BSP_SDRAM_Init+0xb0>)
 800cc96:	4413      	add	r3, r2
 800cc98:	4908      	ldr	r1, [pc, #32]	; (800ccbc <BSP_SDRAM_Init+0xb4>)
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fe fe66 	bl	800b96c <MT48LC4M32B2_Init>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d002      	beq.n	800ccac <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800cca6:	f06f 0304 	mvn.w	r3, #4
 800ccaa:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800ccac:	68fb      	ldr	r3, [r7, #12]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	2400b4b8 	.word	0x2400b4b8
 800ccbc:	2400ad90 	.word	0x2400ad90

0800ccc0 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d003      	beq.n	800ccda <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800ccd2:	f06f 0301 	mvn.w	r3, #1
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	e011      	b.n	800ccfe <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2234      	movs	r2, #52	; 0x34
 800ccde:	fb02 f303 	mul.w	r3, r2, r3
 800cce2:	4a09      	ldr	r2, [pc, #36]	; (800cd08 <BSP_SDRAM_DeInit+0x48>)
 800cce4:	4413      	add	r3, r2
 800cce6:	4618      	mov	r0, r3
 800cce8:	f006 f9d2 	bl	8013090 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2234      	movs	r2, #52	; 0x34
 800ccf0:	fb02 f303 	mul.w	r3, r2, r3
 800ccf4:	4a04      	ldr	r2, [pc, #16]	; (800cd08 <BSP_SDRAM_DeInit+0x48>)
 800ccf6:	4413      	add	r3, r2
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 f951 	bl	800cfa0 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	2400b4b8 	.word	0x2400b4b8

0800cd0c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b08c      	sub	sp, #48	; 0x30
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800cd18:	4b20      	ldr	r3, [pc, #128]	; (800cd9c <MX_SDRAM_BANK2_Init+0x90>)
 800cd1a:	4a21      	ldr	r2, [pc, #132]	; (800cda0 <MX_SDRAM_BANK2_Init+0x94>)
 800cd1c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2201      	movs	r2, #1
 800cd22:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	68ba      	ldr	r2, [r7, #8]
 800cd2e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800cd36:	4b19      	ldr	r3, [pc, #100]	; (800cd9c <MX_SDRAM_BANK2_Init+0x90>)
 800cd38:	2240      	movs	r2, #64	; 0x40
 800cd3a:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800cd42:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2200      	movs	r2, #0
 800cd48:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd50:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cd58:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800cd60:	2302      	movs	r3, #2
 800cd62:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800cd64:	2307      	movs	r3, #7
 800cd66:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 800cd68:	2304      	movs	r3, #4
 800cd6a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800cd6c:	2307      	movs	r3, #7
 800cd6e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800cd70:	2302      	movs	r3, #2
 800cd72:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 800cd74:	2302      	movs	r3, #2
 800cd76:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 800cd78:	2302      	movs	r3, #2
 800cd7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800cd7c:	f107 0314 	add.w	r3, r7, #20
 800cd80:	4619      	mov	r1, r3
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f006 f948 	bl	8013018 <HAL_SDRAM_Init>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e000      	b.n	800cd94 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3730      	adds	r7, #48	; 0x30
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	2400b4b8 	.word	0x2400b4b8
 800cda0:	52004140 	.word	0x52004140

0800cda4 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b08e      	sub	sp, #56	; 0x38
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800cdac:	4b73      	ldr	r3, [pc, #460]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800cdae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cdb2:	4a72      	ldr	r2, [pc, #456]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800cdb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cdb8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800cdbc:	4b6f      	ldr	r3, [pc, #444]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800cdbe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cdc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cdc6:	623b      	str	r3, [r7, #32]
 800cdc8:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800cdca:	4b6c      	ldr	r3, [pc, #432]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800cdcc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cdd0:	4a6a      	ldr	r2, [pc, #424]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800cdd2:	f043 0301 	orr.w	r3, r3, #1
 800cdd6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800cdda:	4b68      	ldr	r3, [pc, #416]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800cddc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cde0:	f003 0301 	and.w	r3, r3, #1
 800cde4:	61fb      	str	r3, [r7, #28]
 800cde6:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cde8:	4b64      	ldr	r3, [pc, #400]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800cdea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cdee:	4a63      	ldr	r2, [pc, #396]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800cdf0:	f043 0308 	orr.w	r3, r3, #8
 800cdf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cdf8:	4b60      	ldr	r3, [pc, #384]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800cdfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cdfe:	f003 0308 	and.w	r3, r3, #8
 800ce02:	61bb      	str	r3, [r7, #24]
 800ce04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ce06:	4b5d      	ldr	r3, [pc, #372]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce0c:	4a5b      	ldr	r2, [pc, #364]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce0e:	f043 0310 	orr.w	r3, r3, #16
 800ce12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ce16:	4b59      	ldr	r3, [pc, #356]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce1c:	f003 0310 	and.w	r3, r3, #16
 800ce20:	617b      	str	r3, [r7, #20]
 800ce22:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800ce24:	4b55      	ldr	r3, [pc, #340]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce2a:	4a54      	ldr	r2, [pc, #336]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce2c:	f043 0320 	orr.w	r3, r3, #32
 800ce30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ce34:	4b51      	ldr	r3, [pc, #324]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce3a:	f003 0320 	and.w	r3, r3, #32
 800ce3e:	613b      	str	r3, [r7, #16]
 800ce40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ce42:	4b4e      	ldr	r3, [pc, #312]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce48:	4a4c      	ldr	r2, [pc, #304]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ce52:	4b4a      	ldr	r3, [pc, #296]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce5c:	60fb      	str	r3, [r7, #12]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ce60:	4b46      	ldr	r3, [pc, #280]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce66:	4a45      	ldr	r2, [pc, #276]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ce70:	4b42      	ldr	r3, [pc, #264]	; (800cf7c <SDRAM_MspInit+0x1d8>)
 800ce72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce7a:	60bb      	str	r3, [r7, #8]
 800ce7c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ce7e:	2302      	movs	r3, #2
 800ce80:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800ce82:	2301      	movs	r3, #1
 800ce84:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce86:	2303      	movs	r3, #3
 800ce88:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800ce8a:	230c      	movs	r3, #12
 800ce8c:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800ce8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800ce92:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800ce94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce98:	4619      	mov	r1, r3
 800ce9a:	4839      	ldr	r0, [pc, #228]	; (800cf80 <SDRAM_MspInit+0x1dc>)
 800ce9c:	f000 ff62 	bl	800dd64 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800cea0:	f64f 7383 	movw	r3, #65411	; 0xff83
 800cea4:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800cea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4835      	ldr	r0, [pc, #212]	; (800cf84 <SDRAM_MspInit+0x1e0>)
 800ceae:	f000 ff59 	bl	800dd64 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800ceb2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800ceb6:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800ceb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cebc:	4619      	mov	r1, r3
 800cebe:	4832      	ldr	r0, [pc, #200]	; (800cf88 <SDRAM_MspInit+0x1e4>)
 800cec0:	f000 ff50 	bl	800dd64 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800cec4:	f248 1333 	movw	r3, #33075	; 0x8133
 800cec8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800ceca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cece:	4619      	mov	r1, r3
 800ced0:	482e      	ldr	r0, [pc, #184]	; (800cf8c <SDRAM_MspInit+0x1e8>)
 800ced2:	f000 ff47 	bl	800dd64 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800ced6:	23e0      	movs	r3, #224	; 0xe0
 800ced8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800ceda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cede:	4619      	mov	r1, r3
 800cee0:	482b      	ldr	r0, [pc, #172]	; (800cf90 <SDRAM_MspInit+0x1ec>)
 800cee2:	f000 ff3f 	bl	800dd64 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800cee6:	4b2b      	ldr	r3, [pc, #172]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cee8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ceec:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800ceee:	4b29      	ldr	r3, [pc, #164]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cef4:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800cef6:	4b27      	ldr	r3, [pc, #156]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cef8:	2280      	movs	r2, #128	; 0x80
 800cefa:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800cefc:	4b25      	ldr	r3, [pc, #148]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800cf02:	4b24      	ldr	r3, [pc, #144]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf04:	f240 2202 	movw	r2, #514	; 0x202
 800cf08:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800cf0a:	4b22      	ldr	r3, [pc, #136]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf0c:	f640 0208 	movw	r2, #2056	; 0x808
 800cf10:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800cf12:	4b20      	ldr	r3, [pc, #128]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf14:	2220      	movs	r2, #32
 800cf16:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800cf18:	4b1e      	ldr	r3, [pc, #120]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf1a:	2280      	movs	r2, #128	; 0x80
 800cf1c:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800cf1e:	4b1d      	ldr	r3, [pc, #116]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cf24:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800cf26:	4b1b      	ldr	r3, [pc, #108]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800cf2c:	4b19      	ldr	r3, [pc, #100]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800cf32:	4b18      	ldr	r3, [pc, #96]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf34:	2280      	movs	r2, #128	; 0x80
 800cf36:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800cf38:	4b16      	ldr	r3, [pc, #88]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800cf3e:	4b15      	ldr	r3, [pc, #84]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf40:	2200      	movs	r2, #0
 800cf42:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800cf44:	4b13      	ldr	r3, [pc, #76]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf46:	4a14      	ldr	r2, [pc, #80]	; (800cf98 <SDRAM_MspInit+0x1f4>)
 800cf48:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800cf4a:	4b14      	ldr	r3, [pc, #80]	; (800cf9c <SDRAM_MspInit+0x1f8>)
 800cf4c:	4a11      	ldr	r2, [pc, #68]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf4e:	631a      	str	r2, [r3, #48]	; 0x30
 800cf50:	4b10      	ldr	r3, [pc, #64]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf52:	4a12      	ldr	r2, [pc, #72]	; (800cf9c <SDRAM_MspInit+0x1f8>)
 800cf54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800cf56:	480f      	ldr	r0, [pc, #60]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf58:	f002 fc44 	bl	800f7e4 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800cf5c:	480d      	ldr	r0, [pc, #52]	; (800cf94 <SDRAM_MspInit+0x1f0>)
 800cf5e:	f002 fbf5 	bl	800f74c <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800cf62:	2200      	movs	r2, #0
 800cf64:	210f      	movs	r1, #15
 800cf66:	207a      	movs	r0, #122	; 0x7a
 800cf68:	f000 fbec 	bl	800d744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800cf6c:	207a      	movs	r0, #122	; 0x7a
 800cf6e:	f000 fc03 	bl	800d778 <HAL_NVIC_EnableIRQ>
}
 800cf72:	bf00      	nop
 800cf74:	3738      	adds	r7, #56	; 0x38
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	58024400 	.word	0x58024400
 800cf80:	58020c00 	.word	0x58020c00
 800cf84:	58021000 	.word	0x58021000
 800cf88:	58021400 	.word	0x58021400
 800cf8c:	58021800 	.word	0x58021800
 800cf90:	58021c00 	.word	0x58021c00
 800cf94:	2400adb0 	.word	0x2400adb0
 800cf98:	52000040 	.word	0x52000040
 800cf9c:	2400b4b8 	.word	0x2400b4b8

0800cfa0 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800cfa8:	207a      	movs	r0, #122	; 0x7a
 800cfaa:	f000 fbf3 	bl	800d794 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800cfae:	4b05      	ldr	r3, [pc, #20]	; (800cfc4 <SDRAM_MspDeInit+0x24>)
 800cfb0:	4a05      	ldr	r2, [pc, #20]	; (800cfc8 <SDRAM_MspDeInit+0x28>)
 800cfb2:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800cfb4:	4803      	ldr	r0, [pc, #12]	; (800cfc4 <SDRAM_MspDeInit+0x24>)
 800cfb6:	f002 fc15 	bl	800f7e4 <HAL_MDMA_DeInit>
}
 800cfba:	bf00      	nop
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	2400ae1c 	.word	0x2400ae1c
 800cfc8:	52000040 	.word	0x52000040

0800cfcc <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b088      	sub	sp, #32
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d11c      	bne.n	800d01a <BSP_TS_Init+0x4e>
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d018      	beq.n	800d01a <BSP_TS_Init+0x4e>
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800cff0:	d813      	bhi.n	800d01a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00f      	beq.n	800d01a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800d002:	d80a      	bhi.n	800d01a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	68da      	ldr	r2, [r3, #12]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	6819      	ldr	r1, [r3, #0]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	428b      	cmp	r3, r1
 800d012:	bf28      	it	cs
 800d014:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800d016:	429a      	cmp	r2, r3
 800d018:	d903      	bls.n	800d022 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800d01a:	f06f 0301 	mvn.w	r3, #1
 800d01e:	61fb      	str	r3, [r7, #28]
 800d020:	e085      	b.n	800d12e <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 f9e6 	bl	800d3f4 <FT5336_Probe>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d003      	beq.n	800d036 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800d02e:	f04f 33ff 	mov.w	r3, #4294967295
 800d032:	61fb      	str	r3, [r7, #28]
 800d034:	e07b      	b.n	800d12e <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	6819      	ldr	r1, [r3, #0]
 800d03a:	483f      	ldr	r0, [pc, #252]	; (800d138 <BSP_TS_Init+0x16c>)
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	4613      	mov	r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4413      	add	r3, r2
 800d044:	00db      	lsls	r3, r3, #3
 800d046:	4403      	add	r3, r0
 800d048:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	6859      	ldr	r1, [r3, #4]
 800d04e:	483a      	ldr	r0, [pc, #232]	; (800d138 <BSP_TS_Init+0x16c>)
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	4613      	mov	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	4413      	add	r3, r2
 800d058:	00db      	lsls	r3, r3, #3
 800d05a:	4403      	add	r3, r0
 800d05c:	3304      	adds	r3, #4
 800d05e:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	6899      	ldr	r1, [r3, #8]
 800d064:	4834      	ldr	r0, [pc, #208]	; (800d138 <BSP_TS_Init+0x16c>)
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	4613      	mov	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4413      	add	r3, r2
 800d06e:	00db      	lsls	r3, r3, #3
 800d070:	4403      	add	r3, r0
 800d072:	3308      	adds	r3, #8
 800d074:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	68d9      	ldr	r1, [r3, #12]
 800d07a:	482f      	ldr	r0, [pc, #188]	; (800d138 <BSP_TS_Init+0x16c>)
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	4613      	mov	r3, r2
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	4413      	add	r3, r2
 800d084:	00db      	lsls	r3, r3, #3
 800d086:	4403      	add	r3, r0
 800d088:	330c      	adds	r3, #12
 800d08a:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800d08c:	4b2b      	ldr	r3, [pc, #172]	; (800d13c <BSP_TS_Init+0x170>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	69db      	ldr	r3, [r3, #28]
 800d092:	492b      	ldr	r1, [pc, #172]	; (800d140 <BSP_TS_Init+0x174>)
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d09a:	f107 010c 	add.w	r1, r7, #12
 800d09e:	4610      	mov	r0, r2
 800d0a0:	4798      	blx	r3
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	da03      	bge.n	800d0b0 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d0a8:	f06f 0304 	mvn.w	r3, #4
 800d0ac:	61fb      	str	r3, [r7, #28]
 800d0ae:	e03e      	b.n	800d12e <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800d0b0:	6939      	ldr	r1, [r7, #16]
 800d0b2:	4821      	ldr	r0, [pc, #132]	; (800d138 <BSP_TS_Init+0x16c>)
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4413      	add	r3, r2
 800d0bc:	00db      	lsls	r3, r3, #3
 800d0be:	4403      	add	r3, r0
 800d0c0:	3310      	adds	r3, #16
 800d0c2:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800d0c4:	6979      	ldr	r1, [r7, #20]
 800d0c6:	481c      	ldr	r0, [pc, #112]	; (800d138 <BSP_TS_Init+0x16c>)
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	4413      	add	r3, r2
 800d0d0:	00db      	lsls	r3, r3, #3
 800d0d2:	4403      	add	r3, r0
 800d0d4:	3314      	adds	r3, #20
 800d0d6:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800d0d8:	2300      	movs	r3, #0
 800d0da:	61bb      	str	r3, [r7, #24]
 800d0dc:	e024      	b.n	800d128 <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	1c59      	adds	r1, r3, #1
 800d0ea:	4813      	ldr	r0, [pc, #76]	; (800d138 <BSP_TS_Init+0x16c>)
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	4413      	add	r3, r2
 800d0f4:	005b      	lsls	r3, r3, #1
 800d0f6:	69ba      	ldr	r2, [r7, #24]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	3306      	adds	r3, #6
 800d0fc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	685a      	ldr	r2, [r3, #4]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	4413      	add	r3, r2
 800d10a:	1c59      	adds	r1, r3, #1
 800d10c:	480a      	ldr	r0, [pc, #40]	; (800d138 <BSP_TS_Init+0x16c>)
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	4613      	mov	r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	4413      	add	r3, r2
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	69ba      	ldr	r2, [r7, #24]
 800d11a:	4413      	add	r3, r2
 800d11c:	3308      	adds	r3, #8
 800d11e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	3301      	adds	r3, #1
 800d126:	61bb      	str	r3, [r7, #24]
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d9d7      	bls.n	800d0de <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 800d12e:	69fb      	ldr	r3, [r7, #28]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3720      	adds	r7, #32
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	2400ae90 	.word	0x2400ae90
 800d13c:	2400ae88 	.word	0x2400ae88
 800d140:	2400ae8c 	.word	0x2400ae8c

0800d144 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b08a      	sub	sp, #40	; 0x28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800d14e:	2300      	movs	r3, #0
 800d150:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d003      	beq.n	800d160 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800d158:	f06f 0301 	mvn.w	r3, #1
 800d15c:	627b      	str	r3, [r7, #36]	; 0x24
 800d15e:	e13e      	b.n	800d3de <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800d160:	4ba1      	ldr	r3, [pc, #644]	; (800d3e8 <BSP_TS_GetState+0x2a4>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	49a1      	ldr	r1, [pc, #644]	; (800d3ec <BSP_TS_GetState+0x2a8>)
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d16e:	f107 0108 	add.w	r1, r7, #8
 800d172:	4610      	mov	r0, r2
 800d174:	4798      	blx	r3
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	da03      	bge.n	800d184 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800d17c:	f06f 0304 	mvn.w	r3, #4
 800d180:	627b      	str	r3, [r7, #36]	; 0x24
 800d182:	e12c      	b.n	800d3de <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	2b00      	cmp	r3, #0
 800d188:	f000 8110 	beq.w	800d3ac <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800d194:	4996      	ldr	r1, [pc, #600]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	4613      	mov	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4413      	add	r3, r2
 800d19e:	00db      	lsls	r3, r3, #3
 800d1a0:	440b      	add	r3, r1
 800d1a2:	3308      	adds	r3, #8
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 0308 	and.w	r3, r3, #8
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d003      	beq.n	800d1b6 <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800d1b6:	498e      	ldr	r1, [pc, #568]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4413      	add	r3, r2
 800d1c0:	00db      	lsls	r3, r3, #3
 800d1c2:	440b      	add	r3, r1
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f003 0302 	and.w	r3, r3, #2
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00c      	beq.n	800d1ea <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800d1d0:	4987      	ldr	r1, [pc, #540]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	00db      	lsls	r3, r3, #3
 800d1dc:	440b      	add	r3, r1
 800d1de:	3310      	adds	r3, #16
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800d1ea:	4981      	ldr	r1, [pc, #516]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	4413      	add	r3, r2
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	440b      	add	r3, r1
 800d1f8:	3308      	adds	r3, #8
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 0304 	and.w	r3, r3, #4
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00b      	beq.n	800d21c <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800d204:	497a      	ldr	r1, [pc, #488]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	4613      	mov	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	00db      	lsls	r3, r3, #3
 800d210:	440b      	add	r3, r1
 800d212:	3314      	adds	r3, #20
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800d21c:	4974      	ldr	r1, [pc, #464]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	4613      	mov	r3, r2
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	4413      	add	r3, r2
 800d226:	00db      	lsls	r3, r3, #3
 800d228:	440b      	add	r3, r1
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6a3a      	ldr	r2, [r7, #32]
 800d22e:	fb02 f103 	mul.w	r1, r2, r3
 800d232:	486f      	ldr	r0, [pc, #444]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	4613      	mov	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	00db      	lsls	r3, r3, #3
 800d23e:	4403      	add	r3, r0
 800d240:	3310      	adds	r3, #16
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	fbb1 f2f3 	udiv	r2, r1, r3
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800d24c:	4968      	ldr	r1, [pc, #416]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	4613      	mov	r3, r2
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	4413      	add	r3, r2
 800d256:	00db      	lsls	r3, r3, #3
 800d258:	440b      	add	r3, r1
 800d25a:	3304      	adds	r3, #4
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	69fa      	ldr	r2, [r7, #28]
 800d260:	fb02 f103 	mul.w	r1, r2, r3
 800d264:	4862      	ldr	r0, [pc, #392]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	4613      	mov	r3, r2
 800d26a:	009b      	lsls	r3, r3, #2
 800d26c:	4413      	add	r3, r2
 800d26e:	00db      	lsls	r3, r3, #3
 800d270:	4403      	add	r3, r0
 800d272:	3314      	adds	r3, #20
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	fbb1 f2f3 	udiv	r2, r1, r3
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	6859      	ldr	r1, [r3, #4]
 800d288:	4859      	ldr	r0, [pc, #356]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	4613      	mov	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4413      	add	r3, r2
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	4403      	add	r3, r0
 800d296:	3318      	adds	r3, #24
 800d298:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800d29a:	4299      	cmp	r1, r3
 800d29c:	d90c      	bls.n	800d2b8 <BSP_TS_GetState+0x174>
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	6859      	ldr	r1, [r3, #4]
 800d2a2:	4853      	ldr	r0, [pc, #332]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4413      	add	r3, r2
 800d2ac:	00db      	lsls	r3, r3, #3
 800d2ae:	4403      	add	r3, r0
 800d2b0:	3318      	adds	r3, #24
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	1acb      	subs	r3, r1, r3
 800d2b6:	e00b      	b.n	800d2d0 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800d2b8:	494d      	ldr	r1, [pc, #308]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	4613      	mov	r3, r2
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	4413      	add	r3, r2
 800d2c2:	00db      	lsls	r3, r3, #3
 800d2c4:	440b      	add	r3, r1
 800d2c6:	3318      	adds	r3, #24
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800d2ce:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800d2d0:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	6899      	ldr	r1, [r3, #8]
 800d2d6:	4846      	ldr	r0, [pc, #280]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	4613      	mov	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	00db      	lsls	r3, r3, #3
 800d2e2:	4403      	add	r3, r0
 800d2e4:	3320      	adds	r3, #32
 800d2e6:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800d2e8:	4299      	cmp	r1, r3
 800d2ea:	d90c      	bls.n	800d306 <BSP_TS_GetState+0x1c2>
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	6899      	ldr	r1, [r3, #8]
 800d2f0:	483f      	ldr	r0, [pc, #252]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	4413      	add	r3, r2
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	4403      	add	r3, r0
 800d2fe:	3320      	adds	r3, #32
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	1acb      	subs	r3, r1, r3
 800d304:	e00b      	b.n	800d31e <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800d306:	493a      	ldr	r1, [pc, #232]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	4613      	mov	r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4413      	add	r3, r2
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	440b      	add	r3, r1
 800d314:	3320      	adds	r3, #32
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800d31c:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800d31e:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800d320:	4933      	ldr	r1, [pc, #204]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	4613      	mov	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4413      	add	r3, r2
 800d32a:	00db      	lsls	r3, r3, #3
 800d32c:	440b      	add	r3, r1
 800d32e:	330c      	adds	r3, #12
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	69ba      	ldr	r2, [r7, #24]
 800d334:	429a      	cmp	r2, r3
 800d336:	d80b      	bhi.n	800d350 <BSP_TS_GetState+0x20c>
 800d338:	492d      	ldr	r1, [pc, #180]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	4613      	mov	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4413      	add	r3, r2
 800d342:	00db      	lsls	r3, r3, #3
 800d344:	440b      	add	r3, r1
 800d346:	330c      	adds	r3, #12
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	697a      	ldr	r2, [r7, #20]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d916      	bls.n	800d37e <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	6859      	ldr	r1, [r3, #4]
 800d354:	4826      	ldr	r0, [pc, #152]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	4613      	mov	r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	4413      	add	r3, r2
 800d35e:	00db      	lsls	r3, r3, #3
 800d360:	4403      	add	r3, r0
 800d362:	3318      	adds	r3, #24
 800d364:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	6899      	ldr	r1, [r3, #8]
 800d36a:	4821      	ldr	r0, [pc, #132]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	4613      	mov	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	4413      	add	r3, r2
 800d374:	00db      	lsls	r3, r3, #3
 800d376:	4403      	add	r3, r0
 800d378:	3320      	adds	r3, #32
 800d37a:	6019      	str	r1, [r3, #0]
 800d37c:	e02f      	b.n	800d3de <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800d37e:	491c      	ldr	r1, [pc, #112]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	4613      	mov	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	00db      	lsls	r3, r3, #3
 800d38a:	440b      	add	r3, r1
 800d38c:	3318      	adds	r3, #24
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800d394:	4916      	ldr	r1, [pc, #88]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	4613      	mov	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	4413      	add	r3, r2
 800d39e:	00db      	lsls	r3, r3, #3
 800d3a0:	440b      	add	r3, r1
 800d3a2:	3320      	adds	r3, #32
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	609a      	str	r2, [r3, #8]
 800d3aa:	e018      	b.n	800d3de <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800d3b2:	490f      	ldr	r1, [pc, #60]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	4413      	add	r3, r2
 800d3bc:	00db      	lsls	r3, r3, #3
 800d3be:	440b      	add	r3, r1
 800d3c0:	3318      	adds	r3, #24
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800d3c8:	4909      	ldr	r1, [pc, #36]	; (800d3f0 <BSP_TS_GetState+0x2ac>)
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	4413      	add	r3, r2
 800d3d2:	00db      	lsls	r3, r3, #3
 800d3d4:	440b      	add	r3, r1
 800d3d6:	3320      	adds	r3, #32
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 800d3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3728      	adds	r7, #40	; 0x28
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	2400ae88 	.word	0x2400ae88
 800d3ec:	2400ae8c 	.word	0x2400ae8c
 800d3f0:	2400ae90 	.word	0x2400ae90

0800d3f4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b08a      	sub	sp, #40	; 0x28
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800d404:	2370      	movs	r3, #112	; 0x70
 800d406:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800d408:	4b23      	ldr	r3, [pc, #140]	; (800d498 <FT5336_Probe+0xa4>)
 800d40a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800d40c:	4b23      	ldr	r3, [pc, #140]	; (800d49c <FT5336_Probe+0xa8>)
 800d40e:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800d410:	4b23      	ldr	r3, [pc, #140]	; (800d4a0 <FT5336_Probe+0xac>)
 800d412:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800d414:	4b23      	ldr	r3, [pc, #140]	; (800d4a4 <FT5336_Probe+0xb0>)
 800d416:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800d418:	4b23      	ldr	r3, [pc, #140]	; (800d4a8 <FT5336_Probe+0xb4>)
 800d41a:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800d41c:	f107 030c 	add.w	r3, r7, #12
 800d420:	4619      	mov	r1, r3
 800d422:	4822      	ldr	r0, [pc, #136]	; (800d4ac <FT5336_Probe+0xb8>)
 800d424:	f7fd fcaa 	bl	800ad7c <FT5336_RegisterBusIO>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d003      	beq.n	800d436 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800d42e:	f06f 0307 	mvn.w	r3, #7
 800d432:	627b      	str	r3, [r7, #36]	; 0x24
 800d434:	e02a      	b.n	800d48c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800d436:	f107 0308 	add.w	r3, r7, #8
 800d43a:	4619      	mov	r1, r3
 800d43c:	481b      	ldr	r0, [pc, #108]	; (800d4ac <FT5336_Probe+0xb8>)
 800d43e:	f7fd fd97 	bl	800af70 <FT5336_ReadID>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d003      	beq.n	800d450 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800d448:	f06f 0304 	mvn.w	r3, #4
 800d44c:	627b      	str	r3, [r7, #36]	; 0x24
 800d44e:	e01d      	b.n	800d48c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	2b51      	cmp	r3, #81	; 0x51
 800d454:	d003      	beq.n	800d45e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800d456:	f06f 0306 	mvn.w	r3, #6
 800d45a:	627b      	str	r3, [r7, #36]	; 0x24
 800d45c:	e016      	b.n	800d48c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800d45e:	4a14      	ldr	r2, [pc, #80]	; (800d4b0 <FT5336_Probe+0xbc>)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4912      	ldr	r1, [pc, #72]	; (800d4ac <FT5336_Probe+0xb8>)
 800d464:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800d468:	4b12      	ldr	r3, [pc, #72]	; (800d4b4 <FT5336_Probe+0xc0>)
 800d46a:	4a13      	ldr	r2, [pc, #76]	; (800d4b8 <FT5336_Probe+0xc4>)
 800d46c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800d46e:	4b11      	ldr	r3, [pc, #68]	; (800d4b4 <FT5336_Probe+0xc0>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	490e      	ldr	r1, [pc, #56]	; (800d4b0 <FT5336_Probe+0xbc>)
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d47c:	4610      	mov	r0, r2
 800d47e:	4798      	blx	r3
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d002      	beq.n	800d48c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800d486:	f06f 0304 	mvn.w	r3, #4
 800d48a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3728      	adds	r7, #40	; 0x28
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	0800bb85 	.word	0x0800bb85
 800d49c:	0800bbf9 	.word	0x0800bbf9
 800d4a0:	0800bd21 	.word	0x0800bd21
 800d4a4:	0800bcc5 	.word	0x0800bcc5
 800d4a8:	0800bd7d 	.word	0x0800bd7d
 800d4ac:	2400aeb8 	.word	0x2400aeb8
 800d4b0:	2400ae8c 	.word	0x2400ae8c
 800d4b4:	2400ae88 	.word	0x2400ae88
 800d4b8:	24000018 	.word	0x24000018

0800d4bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d4c2:	2003      	movs	r0, #3
 800d4c4:	f000 f933 	bl	800d72e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d4c8:	f004 f82c 	bl	8011524 <HAL_RCC_GetSysClockFreq>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	4b15      	ldr	r3, [pc, #84]	; (800d524 <HAL_Init+0x68>)
 800d4d0:	699b      	ldr	r3, [r3, #24]
 800d4d2:	0a1b      	lsrs	r3, r3, #8
 800d4d4:	f003 030f 	and.w	r3, r3, #15
 800d4d8:	4913      	ldr	r1, [pc, #76]	; (800d528 <HAL_Init+0x6c>)
 800d4da:	5ccb      	ldrb	r3, [r1, r3]
 800d4dc:	f003 031f 	and.w	r3, r3, #31
 800d4e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d4e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d4e6:	4b0f      	ldr	r3, [pc, #60]	; (800d524 <HAL_Init+0x68>)
 800d4e8:	699b      	ldr	r3, [r3, #24]
 800d4ea:	f003 030f 	and.w	r3, r3, #15
 800d4ee:	4a0e      	ldr	r2, [pc, #56]	; (800d528 <HAL_Init+0x6c>)
 800d4f0:	5cd3      	ldrb	r3, [r2, r3]
 800d4f2:	f003 031f 	and.w	r3, r3, #31
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4fc:	4a0b      	ldr	r2, [pc, #44]	; (800d52c <HAL_Init+0x70>)
 800d4fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d500:	4a0b      	ldr	r2, [pc, #44]	; (800d530 <HAL_Init+0x74>)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d506:	200f      	movs	r0, #15
 800d508:	f7f4 f9c0 	bl	800188c <HAL_InitTick>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d001      	beq.n	800d516 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800d512:	2301      	movs	r3, #1
 800d514:	e002      	b.n	800d51c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800d516:	f7f3 fde5 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	58024400 	.word	0x58024400
 800d528:	08029d68 	.word	0x08029d68
 800d52c:	24000014 	.word	0x24000014
 800d530:	24000010 	.word	0x24000010

0800d534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d534:	b480      	push	{r7}
 800d536:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800d538:	4b06      	ldr	r3, [pc, #24]	; (800d554 <HAL_IncTick+0x20>)
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	461a      	mov	r2, r3
 800d53e:	4b06      	ldr	r3, [pc, #24]	; (800d558 <HAL_IncTick+0x24>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4413      	add	r3, r2
 800d544:	4a04      	ldr	r2, [pc, #16]	; (800d558 <HAL_IncTick+0x24>)
 800d546:	6013      	str	r3, [r2, #0]
}
 800d548:	bf00      	nop
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	2400004c 	.word	0x2400004c
 800d558:	2400b4ec 	.word	0x2400b4ec

0800d55c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d55c:	b480      	push	{r7}
 800d55e:	af00      	add	r7, sp, #0
  return uwTick;
 800d560:	4b03      	ldr	r3, [pc, #12]	; (800d570 <HAL_GetTick+0x14>)
 800d562:	681b      	ldr	r3, [r3, #0]
}
 800d564:	4618      	mov	r0, r3
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	2400b4ec 	.word	0x2400b4ec

0800d574 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800d574:	b480      	push	{r7}
 800d576:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800d578:	4b03      	ldr	r3, [pc, #12]	; (800d588 <HAL_GetREVID+0x14>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	0c1b      	lsrs	r3, r3, #16
}
 800d57e:	4618      	mov	r0, r3
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr
 800d588:	5c001000 	.word	0x5c001000

0800d58c <__NVIC_SetPriorityGrouping>:
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f003 0307 	and.w	r3, r3, #7
 800d59a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d59c:	4b0b      	ldr	r3, [pc, #44]	; (800d5cc <__NVIC_SetPriorityGrouping+0x40>)
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d5a8:	4013      	ands	r3, r2
 800d5aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800d5b4:	4b06      	ldr	r3, [pc, #24]	; (800d5d0 <__NVIC_SetPriorityGrouping+0x44>)
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d5ba:	4a04      	ldr	r2, [pc, #16]	; (800d5cc <__NVIC_SetPriorityGrouping+0x40>)
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	60d3      	str	r3, [r2, #12]
}
 800d5c0:	bf00      	nop
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr
 800d5cc:	e000ed00 	.word	0xe000ed00
 800d5d0:	05fa0000 	.word	0x05fa0000

0800d5d4 <__NVIC_GetPriorityGrouping>:
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d5d8:	4b04      	ldr	r3, [pc, #16]	; (800d5ec <__NVIC_GetPriorityGrouping+0x18>)
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	0a1b      	lsrs	r3, r3, #8
 800d5de:	f003 0307 	and.w	r3, r3, #7
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr
 800d5ec:	e000ed00 	.word	0xe000ed00

0800d5f0 <__NVIC_EnableIRQ>:
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d5fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	db0b      	blt.n	800d61a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d602:	88fb      	ldrh	r3, [r7, #6]
 800d604:	f003 021f 	and.w	r2, r3, #31
 800d608:	4907      	ldr	r1, [pc, #28]	; (800d628 <__NVIC_EnableIRQ+0x38>)
 800d60a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d60e:	095b      	lsrs	r3, r3, #5
 800d610:	2001      	movs	r0, #1
 800d612:	fa00 f202 	lsl.w	r2, r0, r2
 800d616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d61a:	bf00      	nop
 800d61c:	370c      	adds	r7, #12
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	e000e100 	.word	0xe000e100

0800d62c <__NVIC_DisableIRQ>:
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	4603      	mov	r3, r0
 800d634:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	db12      	blt.n	800d664 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d63e:	88fb      	ldrh	r3, [r7, #6]
 800d640:	f003 021f 	and.w	r2, r3, #31
 800d644:	490a      	ldr	r1, [pc, #40]	; (800d670 <__NVIC_DisableIRQ+0x44>)
 800d646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d64a:	095b      	lsrs	r3, r3, #5
 800d64c:	2001      	movs	r0, #1
 800d64e:	fa00 f202 	lsl.w	r2, r0, r2
 800d652:	3320      	adds	r3, #32
 800d654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d658:	f3bf 8f4f 	dsb	sy
}
 800d65c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d65e:	f3bf 8f6f 	isb	sy
}
 800d662:	bf00      	nop
}
 800d664:	bf00      	nop
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr
 800d670:	e000e100 	.word	0xe000e100

0800d674 <__NVIC_SetPriority>:
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	4603      	mov	r3, r0
 800d67c:	6039      	str	r1, [r7, #0]
 800d67e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d684:	2b00      	cmp	r3, #0
 800d686:	db0a      	blt.n	800d69e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	490c      	ldr	r1, [pc, #48]	; (800d6c0 <__NVIC_SetPriority+0x4c>)
 800d68e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d692:	0112      	lsls	r2, r2, #4
 800d694:	b2d2      	uxtb	r2, r2
 800d696:	440b      	add	r3, r1
 800d698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d69c:	e00a      	b.n	800d6b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	b2da      	uxtb	r2, r3
 800d6a2:	4908      	ldr	r1, [pc, #32]	; (800d6c4 <__NVIC_SetPriority+0x50>)
 800d6a4:	88fb      	ldrh	r3, [r7, #6]
 800d6a6:	f003 030f 	and.w	r3, r3, #15
 800d6aa:	3b04      	subs	r3, #4
 800d6ac:	0112      	lsls	r2, r2, #4
 800d6ae:	b2d2      	uxtb	r2, r2
 800d6b0:	440b      	add	r3, r1
 800d6b2:	761a      	strb	r2, [r3, #24]
}
 800d6b4:	bf00      	nop
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr
 800d6c0:	e000e100 	.word	0xe000e100
 800d6c4:	e000ed00 	.word	0xe000ed00

0800d6c8 <NVIC_EncodePriority>:
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b089      	sub	sp, #36	; 0x24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f003 0307 	and.w	r3, r3, #7
 800d6da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	f1c3 0307 	rsb	r3, r3, #7
 800d6e2:	2b04      	cmp	r3, #4
 800d6e4:	bf28      	it	cs
 800d6e6:	2304      	movcs	r3, #4
 800d6e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	3304      	adds	r3, #4
 800d6ee:	2b06      	cmp	r3, #6
 800d6f0:	d902      	bls.n	800d6f8 <NVIC_EncodePriority+0x30>
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	3b03      	subs	r3, #3
 800d6f6:	e000      	b.n	800d6fa <NVIC_EncodePriority+0x32>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	fa02 f303 	lsl.w	r3, r2, r3
 800d706:	43da      	mvns	r2, r3
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	401a      	ands	r2, r3
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d710:	f04f 31ff 	mov.w	r1, #4294967295
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	fa01 f303 	lsl.w	r3, r1, r3
 800d71a:	43d9      	mvns	r1, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d720:	4313      	orrs	r3, r2
}
 800d722:	4618      	mov	r0, r3
 800d724:	3724      	adds	r7, #36	; 0x24
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr

0800d72e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b082      	sub	sp, #8
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7ff ff28 	bl	800d58c <__NVIC_SetPriorityGrouping>
}
 800d73c:	bf00      	nop
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	4603      	mov	r3, r0
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
 800d750:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d752:	f7ff ff3f 	bl	800d5d4 <__NVIC_GetPriorityGrouping>
 800d756:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	68b9      	ldr	r1, [r7, #8]
 800d75c:	6978      	ldr	r0, [r7, #20]
 800d75e:	f7ff ffb3 	bl	800d6c8 <NVIC_EncodePriority>
 800d762:	4602      	mov	r2, r0
 800d764:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d768:	4611      	mov	r1, r2
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7ff ff82 	bl	800d674 <__NVIC_SetPriority>
}
 800d770:	bf00      	nop
 800d772:	3718      	adds	r7, #24
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	4603      	mov	r3, r0
 800d780:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d786:	4618      	mov	r0, r3
 800d788:	f7ff ff32 	bl	800d5f0 <__NVIC_EnableIRQ>
}
 800d78c:	bf00      	nop
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	4603      	mov	r3, r0
 800d79c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800d79e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7ff ff42 	bl	800d62c <__NVIC_DisableIRQ>
}
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800d7b4:	f3bf 8f5f 	dmb	sy
}
 800d7b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800d7ba:	4b07      	ldr	r3, [pc, #28]	; (800d7d8 <HAL_MPU_Disable+0x28>)
 800d7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7be:	4a06      	ldr	r2, [pc, #24]	; (800d7d8 <HAL_MPU_Disable+0x28>)
 800d7c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7c4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800d7c6:	4b05      	ldr	r3, [pc, #20]	; (800d7dc <HAL_MPU_Disable+0x2c>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	605a      	str	r2, [r3, #4]
}
 800d7cc:	bf00      	nop
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	e000ed00 	.word	0xe000ed00
 800d7dc:	e000ed90 	.word	0xe000ed90

0800d7e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800d7e8:	4a0b      	ldr	r2, [pc, #44]	; (800d818 <HAL_MPU_Enable+0x38>)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f043 0301 	orr.w	r3, r3, #1
 800d7f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800d7f2:	4b0a      	ldr	r3, [pc, #40]	; (800d81c <HAL_MPU_Enable+0x3c>)
 800d7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f6:	4a09      	ldr	r2, [pc, #36]	; (800d81c <HAL_MPU_Enable+0x3c>)
 800d7f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7fc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800d7fe:	f3bf 8f4f 	dsb	sy
}
 800d802:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d804:	f3bf 8f6f 	isb	sy
}
 800d808:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800d80a:	bf00      	nop
 800d80c:	370c      	adds	r7, #12
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	e000ed90 	.word	0xe000ed90
 800d81c:	e000ed00 	.word	0xe000ed00

0800d820 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	785a      	ldrb	r2, [r3, #1]
 800d82c:	4b1d      	ldr	r3, [pc, #116]	; (800d8a4 <HAL_MPU_ConfigRegion+0x84>)
 800d82e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d029      	beq.n	800d88c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800d838:	4a1a      	ldr	r2, [pc, #104]	; (800d8a4 <HAL_MPU_ConfigRegion+0x84>)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	7b1b      	ldrb	r3, [r3, #12]
 800d844:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	7adb      	ldrb	r3, [r3, #11]
 800d84a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d84c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	7a9b      	ldrb	r3, [r3, #10]
 800d852:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d854:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	7b5b      	ldrb	r3, [r3, #13]
 800d85a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800d85c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	7b9b      	ldrb	r3, [r3, #14]
 800d862:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800d864:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	7bdb      	ldrb	r3, [r3, #15]
 800d86a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800d86c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	7a5b      	ldrb	r3, [r3, #9]
 800d872:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800d874:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	7a1b      	ldrb	r3, [r3, #8]
 800d87a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800d87c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	7812      	ldrb	r2, [r2, #0]
 800d882:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d884:	4a07      	ldr	r2, [pc, #28]	; (800d8a4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d886:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d888:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800d88a:	e005      	b.n	800d898 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800d88c:	4b05      	ldr	r3, [pc, #20]	; (800d8a4 <HAL_MPU_ConfigRegion+0x84>)
 800d88e:	2200      	movs	r2, #0
 800d890:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800d892:	4b04      	ldr	r3, [pc, #16]	; (800d8a4 <HAL_MPU_ConfigRegion+0x84>)
 800d894:	2200      	movs	r2, #0
 800d896:	611a      	str	r2, [r3, #16]
}
 800d898:	bf00      	nop
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	e000ed90 	.word	0xe000ed90

0800d8a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d101      	bne.n	800d8ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e054      	b.n	800d964 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	7f5b      	ldrb	r3, [r3, #29]
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d105      	bne.n	800d8d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7f3 fc28 	bl	8001120 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2202      	movs	r2, #2
 800d8d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	791b      	ldrb	r3, [r3, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10c      	bne.n	800d8f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a22      	ldr	r2, [pc, #136]	; (800d96c <HAL_CRC_Init+0xc4>)
 800d8e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	689a      	ldr	r2, [r3, #8]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f022 0218 	bic.w	r2, r2, #24
 800d8f4:	609a      	str	r2, [r3, #8]
 800d8f6:	e00c      	b.n	800d912 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6899      	ldr	r1, [r3, #8]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	461a      	mov	r2, r3
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f834 	bl	800d970 <HAL_CRCEx_Polynomial_Set>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d001      	beq.n	800d912 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800d90e:	2301      	movs	r3, #1
 800d910:	e028      	b.n	800d964 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	795b      	ldrb	r3, [r3, #5]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d105      	bne.n	800d926 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f04f 32ff 	mov.w	r2, #4294967295
 800d922:	611a      	str	r2, [r3, #16]
 800d924:	e004      	b.n	800d930 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	6912      	ldr	r2, [r2, #16]
 800d92e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	695a      	ldr	r2, [r3, #20]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	430a      	orrs	r2, r1
 800d944:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	699a      	ldr	r2, [r3, #24]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	430a      	orrs	r2, r1
 800d95a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	04c11db7 	.word	0x04c11db7

0800d970 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800d970:	b480      	push	{r7}
 800d972:	b087      	sub	sp, #28
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d97c:	2300      	movs	r3, #0
 800d97e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800d980:	231f      	movs	r3, #31
 800d982:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d984:	bf00      	nop
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	1e5a      	subs	r2, r3, #1
 800d98a:	613a      	str	r2, [r7, #16]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d009      	beq.n	800d9a4 <HAL_CRCEx_Polynomial_Set+0x34>
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	f003 031f 	and.w	r3, r3, #31
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	fa22 f303 	lsr.w	r3, r2, r3
 800d99c:	f003 0301 	and.w	r3, r3, #1
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d0f0      	beq.n	800d986 <HAL_CRCEx_Polynomial_Set+0x16>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b18      	cmp	r3, #24
 800d9a8:	d846      	bhi.n	800da38 <HAL_CRCEx_Polynomial_Set+0xc8>
 800d9aa:	a201      	add	r2, pc, #4	; (adr r2, 800d9b0 <HAL_CRCEx_Polynomial_Set+0x40>)
 800d9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b0:	0800da3f 	.word	0x0800da3f
 800d9b4:	0800da39 	.word	0x0800da39
 800d9b8:	0800da39 	.word	0x0800da39
 800d9bc:	0800da39 	.word	0x0800da39
 800d9c0:	0800da39 	.word	0x0800da39
 800d9c4:	0800da39 	.word	0x0800da39
 800d9c8:	0800da39 	.word	0x0800da39
 800d9cc:	0800da39 	.word	0x0800da39
 800d9d0:	0800da2d 	.word	0x0800da2d
 800d9d4:	0800da39 	.word	0x0800da39
 800d9d8:	0800da39 	.word	0x0800da39
 800d9dc:	0800da39 	.word	0x0800da39
 800d9e0:	0800da39 	.word	0x0800da39
 800d9e4:	0800da39 	.word	0x0800da39
 800d9e8:	0800da39 	.word	0x0800da39
 800d9ec:	0800da39 	.word	0x0800da39
 800d9f0:	0800da21 	.word	0x0800da21
 800d9f4:	0800da39 	.word	0x0800da39
 800d9f8:	0800da39 	.word	0x0800da39
 800d9fc:	0800da39 	.word	0x0800da39
 800da00:	0800da39 	.word	0x0800da39
 800da04:	0800da39 	.word	0x0800da39
 800da08:	0800da39 	.word	0x0800da39
 800da0c:	0800da39 	.word	0x0800da39
 800da10:	0800da15 	.word	0x0800da15
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	2b06      	cmp	r3, #6
 800da18:	d913      	bls.n	800da42 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800da1a:	2301      	movs	r3, #1
 800da1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800da1e:	e010      	b.n	800da42 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	2b07      	cmp	r3, #7
 800da24:	d90f      	bls.n	800da46 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800da26:	2301      	movs	r3, #1
 800da28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800da2a:	e00c      	b.n	800da46 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	2b0f      	cmp	r3, #15
 800da30:	d90b      	bls.n	800da4a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800da36:	e008      	b.n	800da4a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800da38:	2301      	movs	r3, #1
 800da3a:	75fb      	strb	r3, [r7, #23]
      break;
 800da3c:	e006      	b.n	800da4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800da3e:	bf00      	nop
 800da40:	e004      	b.n	800da4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800da42:	bf00      	nop
 800da44:	e002      	b.n	800da4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800da46:	bf00      	nop
 800da48:	e000      	b.n	800da4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800da4a:	bf00      	nop
  }
  if (status == HAL_OK)
 800da4c:	7dfb      	ldrb	r3, [r7, #23]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d10d      	bne.n	800da6e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	f023 0118 	bic.w	r1, r3, #24
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	430a      	orrs	r2, r1
 800da6c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800da6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da70:	4618      	mov	r0, r3
 800da72:	371c      	adds	r7, #28
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800da8a:	2301      	movs	r3, #1
 800da8c:	e04f      	b.n	800db2e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800da94:	b2db      	uxtb	r3, r3
 800da96:	2b00      	cmp	r3, #0
 800da98:	d106      	bne.n	800daa8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f7f3 fb5e 	bl	8001164 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2202      	movs	r2, #2
 800daac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	4b20      	ldr	r3, [pc, #128]	; (800db38 <HAL_DMA2D_Init+0xbc>)
 800dab8:	4013      	ands	r3, r2
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	6851      	ldr	r1, [r2, #4]
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	69d2      	ldr	r2, [r2, #28]
 800dac2:	4311      	orrs	r1, r2
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	6812      	ldr	r2, [r2, #0]
 800dac8:	430b      	orrs	r3, r1
 800daca:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dad2:	4b1a      	ldr	r3, [pc, #104]	; (800db3c <HAL_DMA2D_Init+0xc0>)
 800dad4:	4013      	ands	r3, r2
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	6891      	ldr	r1, [r2, #8]
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	6992      	ldr	r2, [r2, #24]
 800dade:	4311      	orrs	r1, r2
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	6812      	ldr	r2, [r2, #0]
 800dae4:	430b      	orrs	r3, r1
 800dae6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800daee:	4b14      	ldr	r3, [pc, #80]	; (800db40 <HAL_DMA2D_Init+0xc4>)
 800daf0:	4013      	ands	r3, r2
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	68d1      	ldr	r1, [r2, #12]
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	6812      	ldr	r2, [r2, #0]
 800dafa:	430b      	orrs	r3, r1
 800dafc:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db04:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	691b      	ldr	r3, [r3, #16]
 800db0c:	051a      	lsls	r2, r3, #20
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	695b      	ldr	r3, [r3, #20]
 800db12:	055b      	lsls	r3, r3, #21
 800db14:	431a      	orrs	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	430a      	orrs	r2, r1
 800db1c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3708      	adds	r7, #8
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	fff8ffbf 	.word	0xfff8ffbf
 800db3c:	fffffef8 	.word	0xfffffef8
 800db40:	ffff0000 	.word	0xffff0000

0800db44 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f003 0301 	and.w	r3, r3, #1
 800db62:	2b00      	cmp	r3, #0
 800db64:	d026      	beq.n	800dbb4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d021      	beq.n	800dbb4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800db7e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db84:	f043 0201 	orr.w	r2, r3, #1
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2201      	movs	r2, #1
 800db92:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2204      	movs	r2, #4
 800db98:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d003      	beq.n	800dbb4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f003 0320 	and.w	r3, r3, #32
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d026      	beq.n	800dc0c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d021      	beq.n	800dc0c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dbd6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2220      	movs	r2, #32
 800dbde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbe4:	f043 0202 	orr.w	r2, r3, #2
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2204      	movs	r2, #4
 800dbf0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d003      	beq.n	800dc0c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f003 0308 	and.w	r3, r3, #8
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d026      	beq.n	800dc64 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d021      	beq.n	800dc64 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dc2e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2208      	movs	r2, #8
 800dc36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc3c:	f043 0204 	orr.w	r2, r3, #4
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2204      	movs	r2, #4
 800dc48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d003      	beq.n	800dc64 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f003 0304 	and.w	r3, r3, #4
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d013      	beq.n	800dc96 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00e      	beq.n	800dc96 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc86:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2204      	movs	r2, #4
 800dc8e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 f853 	bl	800dd3c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f003 0302 	and.w	r3, r3, #2
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d024      	beq.n	800dcea <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d01f      	beq.n	800dcea <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800dcb8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2202      	movs	r2, #2
 800dcc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2201      	movs	r2, #1
 800dcce:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d003      	beq.n	800dcea <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a1b      	ldr	r3, [r3, #32]
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f003 0310 	and.w	r3, r3, #16
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d01f      	beq.n	800dd34 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d01a      	beq.n	800dd34 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dd0c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2210      	movs	r2, #16
 800dd14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2201      	movs	r2, #1
 800dd22:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 f80e 	bl	800dd50 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800dd34:	bf00      	nop
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b083      	sub	sp, #12
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800dd44:	bf00      	nop
 800dd46:	370c      	adds	r7, #12
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800dd58:	bf00      	nop
 800dd5a:	370c      	adds	r7, #12
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b089      	sub	sp, #36	; 0x24
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800dd72:	4b89      	ldr	r3, [pc, #548]	; (800df98 <HAL_GPIO_Init+0x234>)
 800dd74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800dd76:	e194      	b.n	800e0a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	2101      	movs	r1, #1
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	fa01 f303 	lsl.w	r3, r1, r3
 800dd84:	4013      	ands	r3, r2
 800dd86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	f000 8186 	beq.w	800e09c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	f003 0303 	and.w	r3, r3, #3
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d005      	beq.n	800dda8 <HAL_GPIO_Init+0x44>
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	f003 0303 	and.w	r3, r3, #3
 800dda4:	2b02      	cmp	r3, #2
 800dda6:	d130      	bne.n	800de0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	005b      	lsls	r3, r3, #1
 800ddb2:	2203      	movs	r2, #3
 800ddb4:	fa02 f303 	lsl.w	r3, r2, r3
 800ddb8:	43db      	mvns	r3, r3
 800ddba:	69ba      	ldr	r2, [r7, #24]
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	68da      	ldr	r2, [r3, #12]
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	005b      	lsls	r3, r3, #1
 800ddc8:	fa02 f303 	lsl.w	r3, r2, r3
 800ddcc:	69ba      	ldr	r2, [r7, #24]
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	69ba      	ldr	r2, [r7, #24]
 800ddd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ddde:	2201      	movs	r2, #1
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	fa02 f303 	lsl.w	r3, r2, r3
 800dde6:	43db      	mvns	r3, r3
 800dde8:	69ba      	ldr	r2, [r7, #24]
 800ddea:	4013      	ands	r3, r2
 800ddec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	091b      	lsrs	r3, r3, #4
 800ddf4:	f003 0201 	and.w	r2, r3, #1
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	fa02 f303 	lsl.w	r3, r2, r3
 800ddfe:	69ba      	ldr	r2, [r7, #24]
 800de00:	4313      	orrs	r3, r2
 800de02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	69ba      	ldr	r2, [r7, #24]
 800de08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	f003 0303 	and.w	r3, r3, #3
 800de12:	2b03      	cmp	r3, #3
 800de14:	d017      	beq.n	800de46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	005b      	lsls	r3, r3, #1
 800de20:	2203      	movs	r2, #3
 800de22:	fa02 f303 	lsl.w	r3, r2, r3
 800de26:	43db      	mvns	r3, r3
 800de28:	69ba      	ldr	r2, [r7, #24]
 800de2a:	4013      	ands	r3, r2
 800de2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	689a      	ldr	r2, [r3, #8]
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	005b      	lsls	r3, r3, #1
 800de36:	fa02 f303 	lsl.w	r3, r2, r3
 800de3a:	69ba      	ldr	r2, [r7, #24]
 800de3c:	4313      	orrs	r3, r2
 800de3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	69ba      	ldr	r2, [r7, #24]
 800de44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	f003 0303 	and.w	r3, r3, #3
 800de4e:	2b02      	cmp	r3, #2
 800de50:	d123      	bne.n	800de9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	08da      	lsrs	r2, r3, #3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	3208      	adds	r2, #8
 800de5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	f003 0307 	and.w	r3, r3, #7
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	220f      	movs	r2, #15
 800de6a:	fa02 f303 	lsl.w	r3, r2, r3
 800de6e:	43db      	mvns	r3, r3
 800de70:	69ba      	ldr	r2, [r7, #24]
 800de72:	4013      	ands	r3, r2
 800de74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	691a      	ldr	r2, [r3, #16]
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	f003 0307 	and.w	r3, r3, #7
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	fa02 f303 	lsl.w	r3, r2, r3
 800de86:	69ba      	ldr	r2, [r7, #24]
 800de88:	4313      	orrs	r3, r2
 800de8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	08da      	lsrs	r2, r3, #3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	3208      	adds	r2, #8
 800de94:	69b9      	ldr	r1, [r7, #24]
 800de96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	2203      	movs	r2, #3
 800dea6:	fa02 f303 	lsl.w	r3, r2, r3
 800deaa:	43db      	mvns	r3, r3
 800deac:	69ba      	ldr	r2, [r7, #24]
 800deae:	4013      	ands	r3, r2
 800deb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	f003 0203 	and.w	r2, r3, #3
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	005b      	lsls	r3, r3, #1
 800debe:	fa02 f303 	lsl.w	r3, r2, r3
 800dec2:	69ba      	ldr	r2, [r7, #24]
 800dec4:	4313      	orrs	r3, r2
 800dec6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	69ba      	ldr	r2, [r7, #24]
 800decc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f000 80e0 	beq.w	800e09c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dedc:	4b2f      	ldr	r3, [pc, #188]	; (800df9c <HAL_GPIO_Init+0x238>)
 800dede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dee2:	4a2e      	ldr	r2, [pc, #184]	; (800df9c <HAL_GPIO_Init+0x238>)
 800dee4:	f043 0302 	orr.w	r3, r3, #2
 800dee8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800deec:	4b2b      	ldr	r3, [pc, #172]	; (800df9c <HAL_GPIO_Init+0x238>)
 800deee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800def2:	f003 0302 	and.w	r3, r3, #2
 800def6:	60fb      	str	r3, [r7, #12]
 800def8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800defa:	4a29      	ldr	r2, [pc, #164]	; (800dfa0 <HAL_GPIO_Init+0x23c>)
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	089b      	lsrs	r3, r3, #2
 800df00:	3302      	adds	r3, #2
 800df02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	f003 0303 	and.w	r3, r3, #3
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	220f      	movs	r2, #15
 800df12:	fa02 f303 	lsl.w	r3, r2, r3
 800df16:	43db      	mvns	r3, r3
 800df18:	69ba      	ldr	r2, [r7, #24]
 800df1a:	4013      	ands	r3, r2
 800df1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	4a20      	ldr	r2, [pc, #128]	; (800dfa4 <HAL_GPIO_Init+0x240>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d052      	beq.n	800dfcc <HAL_GPIO_Init+0x268>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4a1f      	ldr	r2, [pc, #124]	; (800dfa8 <HAL_GPIO_Init+0x244>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d031      	beq.n	800df92 <HAL_GPIO_Init+0x22e>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4a1e      	ldr	r2, [pc, #120]	; (800dfac <HAL_GPIO_Init+0x248>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d02b      	beq.n	800df8e <HAL_GPIO_Init+0x22a>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	4a1d      	ldr	r2, [pc, #116]	; (800dfb0 <HAL_GPIO_Init+0x24c>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d025      	beq.n	800df8a <HAL_GPIO_Init+0x226>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4a1c      	ldr	r2, [pc, #112]	; (800dfb4 <HAL_GPIO_Init+0x250>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d01f      	beq.n	800df86 <HAL_GPIO_Init+0x222>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4a1b      	ldr	r2, [pc, #108]	; (800dfb8 <HAL_GPIO_Init+0x254>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d019      	beq.n	800df82 <HAL_GPIO_Init+0x21e>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4a1a      	ldr	r2, [pc, #104]	; (800dfbc <HAL_GPIO_Init+0x258>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d013      	beq.n	800df7e <HAL_GPIO_Init+0x21a>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	4a19      	ldr	r2, [pc, #100]	; (800dfc0 <HAL_GPIO_Init+0x25c>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d00d      	beq.n	800df7a <HAL_GPIO_Init+0x216>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	4a18      	ldr	r2, [pc, #96]	; (800dfc4 <HAL_GPIO_Init+0x260>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d007      	beq.n	800df76 <HAL_GPIO_Init+0x212>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4a17      	ldr	r2, [pc, #92]	; (800dfc8 <HAL_GPIO_Init+0x264>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d101      	bne.n	800df72 <HAL_GPIO_Init+0x20e>
 800df6e:	2309      	movs	r3, #9
 800df70:	e02d      	b.n	800dfce <HAL_GPIO_Init+0x26a>
 800df72:	230a      	movs	r3, #10
 800df74:	e02b      	b.n	800dfce <HAL_GPIO_Init+0x26a>
 800df76:	2308      	movs	r3, #8
 800df78:	e029      	b.n	800dfce <HAL_GPIO_Init+0x26a>
 800df7a:	2307      	movs	r3, #7
 800df7c:	e027      	b.n	800dfce <HAL_GPIO_Init+0x26a>
 800df7e:	2306      	movs	r3, #6
 800df80:	e025      	b.n	800dfce <HAL_GPIO_Init+0x26a>
 800df82:	2305      	movs	r3, #5
 800df84:	e023      	b.n	800dfce <HAL_GPIO_Init+0x26a>
 800df86:	2304      	movs	r3, #4
 800df88:	e021      	b.n	800dfce <HAL_GPIO_Init+0x26a>
 800df8a:	2303      	movs	r3, #3
 800df8c:	e01f      	b.n	800dfce <HAL_GPIO_Init+0x26a>
 800df8e:	2302      	movs	r3, #2
 800df90:	e01d      	b.n	800dfce <HAL_GPIO_Init+0x26a>
 800df92:	2301      	movs	r3, #1
 800df94:	e01b      	b.n	800dfce <HAL_GPIO_Init+0x26a>
 800df96:	bf00      	nop
 800df98:	58000080 	.word	0x58000080
 800df9c:	58024400 	.word	0x58024400
 800dfa0:	58000400 	.word	0x58000400
 800dfa4:	58020000 	.word	0x58020000
 800dfa8:	58020400 	.word	0x58020400
 800dfac:	58020800 	.word	0x58020800
 800dfb0:	58020c00 	.word	0x58020c00
 800dfb4:	58021000 	.word	0x58021000
 800dfb8:	58021400 	.word	0x58021400
 800dfbc:	58021800 	.word	0x58021800
 800dfc0:	58021c00 	.word	0x58021c00
 800dfc4:	58022000 	.word	0x58022000
 800dfc8:	58022400 	.word	0x58022400
 800dfcc:	2300      	movs	r3, #0
 800dfce:	69fa      	ldr	r2, [r7, #28]
 800dfd0:	f002 0203 	and.w	r2, r2, #3
 800dfd4:	0092      	lsls	r2, r2, #2
 800dfd6:	4093      	lsls	r3, r2
 800dfd8:	69ba      	ldr	r2, [r7, #24]
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800dfde:	4938      	ldr	r1, [pc, #224]	; (800e0c0 <HAL_GPIO_Init+0x35c>)
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	089b      	lsrs	r3, r3, #2
 800dfe4:	3302      	adds	r3, #2
 800dfe6:	69ba      	ldr	r2, [r7, #24]
 800dfe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800dfec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	43db      	mvns	r3, r3
 800dff8:	69ba      	ldr	r2, [r7, #24]
 800dffa:	4013      	ands	r3, r2
 800dffc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e006:	2b00      	cmp	r3, #0
 800e008:	d003      	beq.n	800e012 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800e00a:	69ba      	ldr	r2, [r7, #24]
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	4313      	orrs	r3, r2
 800e010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e01a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	43db      	mvns	r3, r3
 800e026:	69ba      	ldr	r2, [r7, #24]
 800e028:	4013      	ands	r3, r2
 800e02a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e034:	2b00      	cmp	r3, #0
 800e036:	d003      	beq.n	800e040 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800e038:	69ba      	ldr	r2, [r7, #24]
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	4313      	orrs	r3, r2
 800e03e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	43db      	mvns	r3, r3
 800e052:	69ba      	ldr	r2, [r7, #24]
 800e054:	4013      	ands	r3, r2
 800e056:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e060:	2b00      	cmp	r3, #0
 800e062:	d003      	beq.n	800e06c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800e064:	69ba      	ldr	r2, [r7, #24]
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	4313      	orrs	r3, r2
 800e06a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	69ba      	ldr	r2, [r7, #24]
 800e070:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	43db      	mvns	r3, r3
 800e07c:	69ba      	ldr	r2, [r7, #24]
 800e07e:	4013      	ands	r3, r2
 800e080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d003      	beq.n	800e096 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800e08e:	69ba      	ldr	r2, [r7, #24]
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	4313      	orrs	r3, r2
 800e094:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	69ba      	ldr	r2, [r7, #24]
 800e09a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f47f ae63 	bne.w	800dd78 <HAL_GPIO_Init+0x14>
  }
}
 800e0b2:	bf00      	nop
 800e0b4:	bf00      	nop
 800e0b6:	3724      	adds	r7, #36	; 0x24
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr
 800e0c0:	58000400 	.word	0x58000400

0800e0c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b087      	sub	sp, #28
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e0d2:	4b75      	ldr	r3, [pc, #468]	; (800e2a8 <HAL_GPIO_DeInit+0x1e4>)
 800e0d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800e0d6:	e0d9      	b.n	800e28c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800e0d8:	2201      	movs	r2, #1
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800e0e0:	683a      	ldr	r2, [r7, #0]
 800e0e2:	4013      	ands	r3, r2
 800e0e4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f000 80cc 	beq.w	800e286 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800e0ee:	4a6f      	ldr	r2, [pc, #444]	; (800e2ac <HAL_GPIO_DeInit+0x1e8>)
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	089b      	lsrs	r3, r3, #2
 800e0f4:	3302      	adds	r3, #2
 800e0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0fa:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	f003 0303 	and.w	r3, r3, #3
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	220f      	movs	r2, #15
 800e106:	fa02 f303 	lsl.w	r3, r2, r3
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	4013      	ands	r3, r2
 800e10e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	4a67      	ldr	r2, [pc, #412]	; (800e2b0 <HAL_GPIO_DeInit+0x1ec>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d037      	beq.n	800e188 <HAL_GPIO_DeInit+0xc4>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	4a66      	ldr	r2, [pc, #408]	; (800e2b4 <HAL_GPIO_DeInit+0x1f0>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d031      	beq.n	800e184 <HAL_GPIO_DeInit+0xc0>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4a65      	ldr	r2, [pc, #404]	; (800e2b8 <HAL_GPIO_DeInit+0x1f4>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d02b      	beq.n	800e180 <HAL_GPIO_DeInit+0xbc>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4a64      	ldr	r2, [pc, #400]	; (800e2bc <HAL_GPIO_DeInit+0x1f8>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d025      	beq.n	800e17c <HAL_GPIO_DeInit+0xb8>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	4a63      	ldr	r2, [pc, #396]	; (800e2c0 <HAL_GPIO_DeInit+0x1fc>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d01f      	beq.n	800e178 <HAL_GPIO_DeInit+0xb4>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4a62      	ldr	r2, [pc, #392]	; (800e2c4 <HAL_GPIO_DeInit+0x200>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d019      	beq.n	800e174 <HAL_GPIO_DeInit+0xb0>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4a61      	ldr	r2, [pc, #388]	; (800e2c8 <HAL_GPIO_DeInit+0x204>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d013      	beq.n	800e170 <HAL_GPIO_DeInit+0xac>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	4a60      	ldr	r2, [pc, #384]	; (800e2cc <HAL_GPIO_DeInit+0x208>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d00d      	beq.n	800e16c <HAL_GPIO_DeInit+0xa8>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	4a5f      	ldr	r2, [pc, #380]	; (800e2d0 <HAL_GPIO_DeInit+0x20c>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d007      	beq.n	800e168 <HAL_GPIO_DeInit+0xa4>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	4a5e      	ldr	r2, [pc, #376]	; (800e2d4 <HAL_GPIO_DeInit+0x210>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d101      	bne.n	800e164 <HAL_GPIO_DeInit+0xa0>
 800e160:	2309      	movs	r3, #9
 800e162:	e012      	b.n	800e18a <HAL_GPIO_DeInit+0xc6>
 800e164:	230a      	movs	r3, #10
 800e166:	e010      	b.n	800e18a <HAL_GPIO_DeInit+0xc6>
 800e168:	2308      	movs	r3, #8
 800e16a:	e00e      	b.n	800e18a <HAL_GPIO_DeInit+0xc6>
 800e16c:	2307      	movs	r3, #7
 800e16e:	e00c      	b.n	800e18a <HAL_GPIO_DeInit+0xc6>
 800e170:	2306      	movs	r3, #6
 800e172:	e00a      	b.n	800e18a <HAL_GPIO_DeInit+0xc6>
 800e174:	2305      	movs	r3, #5
 800e176:	e008      	b.n	800e18a <HAL_GPIO_DeInit+0xc6>
 800e178:	2304      	movs	r3, #4
 800e17a:	e006      	b.n	800e18a <HAL_GPIO_DeInit+0xc6>
 800e17c:	2303      	movs	r3, #3
 800e17e:	e004      	b.n	800e18a <HAL_GPIO_DeInit+0xc6>
 800e180:	2302      	movs	r3, #2
 800e182:	e002      	b.n	800e18a <HAL_GPIO_DeInit+0xc6>
 800e184:	2301      	movs	r3, #1
 800e186:	e000      	b.n	800e18a <HAL_GPIO_DeInit+0xc6>
 800e188:	2300      	movs	r3, #0
 800e18a:	697a      	ldr	r2, [r7, #20]
 800e18c:	f002 0203 	and.w	r2, r2, #3
 800e190:	0092      	lsls	r2, r2, #2
 800e192:	4093      	lsls	r3, r2
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	429a      	cmp	r2, r3
 800e198:	d136      	bne.n	800e208 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	43db      	mvns	r3, r3
 800e1a2:	401a      	ands	r2, r3
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	685a      	ldr	r2, [r3, #4]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	43db      	mvns	r3, r3
 800e1b0:	401a      	ands	r2, r3
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800e1b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e1ba:	685a      	ldr	r2, [r3, #4]
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	43db      	mvns	r3, r3
 800e1c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800e1c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	43db      	mvns	r3, r3
 800e1d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e1d6:	4013      	ands	r3, r2
 800e1d8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	f003 0303 	and.w	r3, r3, #3
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	220f      	movs	r2, #15
 800e1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800e1ea:	4a30      	ldr	r2, [pc, #192]	; (800e2ac <HAL_GPIO_DeInit+0x1e8>)
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	089b      	lsrs	r3, r3, #2
 800e1f0:	3302      	adds	r3, #2
 800e1f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	43da      	mvns	r2, r3
 800e1fa:	482c      	ldr	r0, [pc, #176]	; (800e2ac <HAL_GPIO_DeInit+0x1e8>)
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	089b      	lsrs	r3, r3, #2
 800e200:	400a      	ands	r2, r1
 800e202:	3302      	adds	r3, #2
 800e204:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	005b      	lsls	r3, r3, #1
 800e210:	2103      	movs	r1, #3
 800e212:	fa01 f303 	lsl.w	r3, r1, r3
 800e216:	431a      	orrs	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	08da      	lsrs	r2, r3, #3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	3208      	adds	r2, #8
 800e224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	f003 0307 	and.w	r3, r3, #7
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	220f      	movs	r2, #15
 800e232:	fa02 f303 	lsl.w	r3, r2, r3
 800e236:	43db      	mvns	r3, r3
 800e238:	697a      	ldr	r2, [r7, #20]
 800e23a:	08d2      	lsrs	r2, r2, #3
 800e23c:	4019      	ands	r1, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	3208      	adds	r2, #8
 800e242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	68da      	ldr	r2, [r3, #12]
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	2103      	movs	r1, #3
 800e250:	fa01 f303 	lsl.w	r3, r1, r3
 800e254:	43db      	mvns	r3, r3
 800e256:	401a      	ands	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	685a      	ldr	r2, [r3, #4]
 800e260:	2101      	movs	r1, #1
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	fa01 f303 	lsl.w	r3, r1, r3
 800e268:	43db      	mvns	r3, r3
 800e26a:	401a      	ands	r2, r3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	689a      	ldr	r2, [r3, #8]
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	005b      	lsls	r3, r3, #1
 800e278:	2103      	movs	r1, #3
 800e27a:	fa01 f303 	lsl.w	r3, r1, r3
 800e27e:	43db      	mvns	r3, r3
 800e280:	401a      	ands	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	609a      	str	r2, [r3, #8]
    }

    position++;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	3301      	adds	r3, #1
 800e28a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800e28c:	683a      	ldr	r2, [r7, #0]
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	fa22 f303 	lsr.w	r3, r2, r3
 800e294:	2b00      	cmp	r3, #0
 800e296:	f47f af1f 	bne.w	800e0d8 <HAL_GPIO_DeInit+0x14>
  }
}
 800e29a:	bf00      	nop
 800e29c:	bf00      	nop
 800e29e:	371c      	adds	r7, #28
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr
 800e2a8:	58000080 	.word	0x58000080
 800e2ac:	58000400 	.word	0x58000400
 800e2b0:	58020000 	.word	0x58020000
 800e2b4:	58020400 	.word	0x58020400
 800e2b8:	58020800 	.word	0x58020800
 800e2bc:	58020c00 	.word	0x58020c00
 800e2c0:	58021000 	.word	0x58021000
 800e2c4:	58021400 	.word	0x58021400
 800e2c8:	58021800 	.word	0x58021800
 800e2cc:	58021c00 	.word	0x58021c00
 800e2d0:	58022000 	.word	0x58022000
 800e2d4:	58022400 	.word	0x58022400

0800e2d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	807b      	strh	r3, [r7, #2]
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e2e8:	787b      	ldrb	r3, [r7, #1]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d003      	beq.n	800e2f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e2ee:	887a      	ldrh	r2, [r7, #2]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e2f4:	e003      	b.n	800e2fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e2f6:	887b      	ldrh	r3, [r7, #2]
 800e2f8:	041a      	lsls	r2, r3, #16
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	619a      	str	r2, [r3, #24]
}
 800e2fe:	bf00      	nop
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr
	...

0800e30c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800e314:	4a08      	ldr	r2, [pc, #32]	; (800e338 <HAL_HSEM_FastTake+0x2c>)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	3320      	adds	r3, #32
 800e31a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e31e:	4a07      	ldr	r2, [pc, #28]	; (800e33c <HAL_HSEM_FastTake+0x30>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d101      	bne.n	800e328 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800e324:	2300      	movs	r3, #0
 800e326:	e000      	b.n	800e32a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800e328:	2301      	movs	r3, #1
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	370c      	adds	r7, #12
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr
 800e336:	bf00      	nop
 800e338:	58026400 	.word	0x58026400
 800e33c:	80000300 	.word	0x80000300

0800e340 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800e340:	b480      	push	{r7}
 800e342:	b083      	sub	sp, #12
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800e34a:	4906      	ldr	r1, [pc, #24]	; (800e364 <HAL_HSEM_Release+0x24>)
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800e358:	bf00      	nop
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr
 800e364:	58026400 	.word	0x58026400

0800e368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d101      	bne.n	800e37a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e376:	2301      	movs	r3, #1
 800e378:	e07f      	b.n	800e47a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e380:	b2db      	uxtb	r3, r3
 800e382:	2b00      	cmp	r3, #0
 800e384:	d106      	bne.n	800e394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2200      	movs	r2, #0
 800e38a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 f8a9 	bl	800e4e6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2224      	movs	r2, #36	; 0x24
 800e398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f022 0201 	bic.w	r2, r2, #1
 800e3aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	685a      	ldr	r2, [r3, #4]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e3b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	689a      	ldr	r2, [r3, #8]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e3c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d107      	bne.n	800e3e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	689a      	ldr	r2, [r3, #8]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e3de:	609a      	str	r2, [r3, #8]
 800e3e0:	e006      	b.n	800e3f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	689a      	ldr	r2, [r3, #8]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800e3ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	2b02      	cmp	r3, #2
 800e3f6:	d104      	bne.n	800e402 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e400:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	6859      	ldr	r1, [r3, #4]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	4b1d      	ldr	r3, [pc, #116]	; (800e484 <HAL_I2C_Init+0x11c>)
 800e40e:	430b      	orrs	r3, r1
 800e410:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	68da      	ldr	r2, [r3, #12]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e420:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	691a      	ldr	r2, [r3, #16]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	695b      	ldr	r3, [r3, #20]
 800e42a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	699b      	ldr	r3, [r3, #24]
 800e432:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	430a      	orrs	r2, r1
 800e43a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	69d9      	ldr	r1, [r3, #28]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6a1a      	ldr	r2, [r3, #32]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	430a      	orrs	r2, r1
 800e44a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f042 0201 	orr.w	r2, r2, #1
 800e45a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2200      	movs	r2, #0
 800e460:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2220      	movs	r2, #32
 800e466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2200      	movs	r2, #0
 800e46e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800e478:	2300      	movs	r3, #0
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	02008000 	.word	0x02008000

0800e488 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d101      	bne.n	800e49a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800e496:	2301      	movs	r3, #1
 800e498:	e021      	b.n	800e4de <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2224      	movs	r2, #36	; 0x24
 800e49e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f022 0201 	bic.w	r2, r2, #1
 800e4b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f821 	bl	800e4fa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800e4e6:	b480      	push	{r7}
 800e4e8:	b083      	sub	sp, #12
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800e4ee:	bf00      	nop
 800e4f0:	370c      	adds	r7, #12
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr

0800e4fa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800e4fa:	b480      	push	{r7}
 800e4fc:	b083      	sub	sp, #12
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800e502:	bf00      	nop
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
	...

0800e510 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b088      	sub	sp, #32
 800e514:	af02      	add	r7, sp, #8
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	4608      	mov	r0, r1
 800e51a:	4611      	mov	r1, r2
 800e51c:	461a      	mov	r2, r3
 800e51e:	4603      	mov	r3, r0
 800e520:	817b      	strh	r3, [r7, #10]
 800e522:	460b      	mov	r3, r1
 800e524:	813b      	strh	r3, [r7, #8]
 800e526:	4613      	mov	r3, r2
 800e528:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e530:	b2db      	uxtb	r3, r3
 800e532:	2b20      	cmp	r3, #32
 800e534:	f040 80f9 	bne.w	800e72a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e538:	6a3b      	ldr	r3, [r7, #32]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d002      	beq.n	800e544 <HAL_I2C_Mem_Write+0x34>
 800e53e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e540:	2b00      	cmp	r3, #0
 800e542:	d105      	bne.n	800e550 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e54a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e54c:	2301      	movs	r3, #1
 800e54e:	e0ed      	b.n	800e72c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e556:	2b01      	cmp	r3, #1
 800e558:	d101      	bne.n	800e55e <HAL_I2C_Mem_Write+0x4e>
 800e55a:	2302      	movs	r3, #2
 800e55c:	e0e6      	b.n	800e72c <HAL_I2C_Mem_Write+0x21c>
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2201      	movs	r2, #1
 800e562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e566:	f7fe fff9 	bl	800d55c <HAL_GetTick>
 800e56a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	9300      	str	r3, [sp, #0]
 800e570:	2319      	movs	r3, #25
 800e572:	2201      	movs	r2, #1
 800e574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f000 fadd 	bl	800eb38 <I2C_WaitOnFlagUntilTimeout>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d001      	beq.n	800e588 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e584:	2301      	movs	r3, #1
 800e586:	e0d1      	b.n	800e72c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2221      	movs	r2, #33	; 0x21
 800e58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2240      	movs	r2, #64	; 0x40
 800e594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2200      	movs	r2, #0
 800e59c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6a3a      	ldr	r2, [r7, #32]
 800e5a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e5a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e5b0:	88f8      	ldrh	r0, [r7, #6]
 800e5b2:	893a      	ldrh	r2, [r7, #8]
 800e5b4:	8979      	ldrh	r1, [r7, #10]
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	9301      	str	r3, [sp, #4]
 800e5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5bc:	9300      	str	r3, [sp, #0]
 800e5be:	4603      	mov	r3, r0
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f000 f9ed 	bl	800e9a0 <I2C_RequestMemoryWrite>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d005      	beq.n	800e5d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e0a9      	b.n	800e72c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	2bff      	cmp	r3, #255	; 0xff
 800e5e0:	d90e      	bls.n	800e600 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	22ff      	movs	r2, #255	; 0xff
 800e5e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5ec:	b2da      	uxtb	r2, r3
 800e5ee:	8979      	ldrh	r1, [r7, #10]
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f000 fc45 	bl	800ee88 <I2C_TransferConfig>
 800e5fe:	e00f      	b.n	800e620 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e604:	b29a      	uxth	r2, r3
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e60e:	b2da      	uxtb	r2, r3
 800e610:	8979      	ldrh	r1, [r7, #10]
 800e612:	2300      	movs	r3, #0
 800e614:	9300      	str	r3, [sp, #0]
 800e616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e61a:	68f8      	ldr	r0, [r7, #12]
 800e61c:	f000 fc34 	bl	800ee88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e620:	697a      	ldr	r2, [r7, #20]
 800e622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f000 fac7 	bl	800ebb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e62a:	4603      	mov	r3, r0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d001      	beq.n	800e634 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e630:	2301      	movs	r3, #1
 800e632:	e07b      	b.n	800e72c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e638:	781a      	ldrb	r2, [r3, #0]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e644:	1c5a      	adds	r2, r3, #1
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e64e:	b29b      	uxth	r3, r3
 800e650:	3b01      	subs	r3, #1
 800e652:	b29a      	uxth	r2, r3
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e65c:	3b01      	subs	r3, #1
 800e65e:	b29a      	uxth	r2, r3
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e668:	b29b      	uxth	r3, r3
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d034      	beq.n	800e6d8 <HAL_I2C_Mem_Write+0x1c8>
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e672:	2b00      	cmp	r3, #0
 800e674:	d130      	bne.n	800e6d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	2200      	movs	r2, #0
 800e67e:	2180      	movs	r1, #128	; 0x80
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f000 fa59 	bl	800eb38 <I2C_WaitOnFlagUntilTimeout>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d001      	beq.n	800e690 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e68c:	2301      	movs	r3, #1
 800e68e:	e04d      	b.n	800e72c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e694:	b29b      	uxth	r3, r3
 800e696:	2bff      	cmp	r3, #255	; 0xff
 800e698:	d90e      	bls.n	800e6b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	22ff      	movs	r2, #255	; 0xff
 800e69e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6a4:	b2da      	uxtb	r2, r3
 800e6a6:	8979      	ldrh	r1, [r7, #10]
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	9300      	str	r3, [sp, #0]
 800e6ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f000 fbe9 	bl	800ee88 <I2C_TransferConfig>
 800e6b6:	e00f      	b.n	800e6d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6c6:	b2da      	uxtb	r2, r3
 800e6c8:	8979      	ldrh	r1, [r7, #10]
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f000 fbd8 	bl	800ee88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d19e      	bne.n	800e620 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e6e2:	697a      	ldr	r2, [r7, #20]
 800e6e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f000 faa6 	bl	800ec38 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d001      	beq.n	800e6f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	e01a      	b.n	800e72c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2220      	movs	r2, #32
 800e6fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	6859      	ldr	r1, [r3, #4]
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	4b0a      	ldr	r3, [pc, #40]	; (800e734 <HAL_I2C_Mem_Write+0x224>)
 800e70a:	400b      	ands	r3, r1
 800e70c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2220      	movs	r2, #32
 800e712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2200      	movs	r2, #0
 800e722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e726:	2300      	movs	r3, #0
 800e728:	e000      	b.n	800e72c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e72a:	2302      	movs	r3, #2
  }
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3718      	adds	r7, #24
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	fe00e800 	.word	0xfe00e800

0800e738 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b088      	sub	sp, #32
 800e73c:	af02      	add	r7, sp, #8
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	4608      	mov	r0, r1
 800e742:	4611      	mov	r1, r2
 800e744:	461a      	mov	r2, r3
 800e746:	4603      	mov	r3, r0
 800e748:	817b      	strh	r3, [r7, #10]
 800e74a:	460b      	mov	r3, r1
 800e74c:	813b      	strh	r3, [r7, #8]
 800e74e:	4613      	mov	r3, r2
 800e750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b20      	cmp	r3, #32
 800e75c:	f040 80fd 	bne.w	800e95a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e760:	6a3b      	ldr	r3, [r7, #32]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d002      	beq.n	800e76c <HAL_I2C_Mem_Read+0x34>
 800e766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d105      	bne.n	800e778 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e772:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e774:	2301      	movs	r3, #1
 800e776:	e0f1      	b.n	800e95c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d101      	bne.n	800e786 <HAL_I2C_Mem_Read+0x4e>
 800e782:	2302      	movs	r3, #2
 800e784:	e0ea      	b.n	800e95c <HAL_I2C_Mem_Read+0x224>
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2201      	movs	r2, #1
 800e78a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e78e:	f7fe fee5 	bl	800d55c <HAL_GetTick>
 800e792:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	2319      	movs	r3, #25
 800e79a:	2201      	movs	r2, #1
 800e79c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	f000 f9c9 	bl	800eb38 <I2C_WaitOnFlagUntilTimeout>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d001      	beq.n	800e7b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	e0d5      	b.n	800e95c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2222      	movs	r2, #34	; 0x22
 800e7b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2240      	movs	r2, #64	; 0x40
 800e7bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6a3a      	ldr	r2, [r7, #32]
 800e7ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e7d8:	88f8      	ldrh	r0, [r7, #6]
 800e7da:	893a      	ldrh	r2, [r7, #8]
 800e7dc:	8979      	ldrh	r1, [r7, #10]
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	9301      	str	r3, [sp, #4]
 800e7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f000 f92d 	bl	800ea48 <I2C_RequestMemoryRead>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d005      	beq.n	800e800 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e0ad      	b.n	800e95c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e804:	b29b      	uxth	r3, r3
 800e806:	2bff      	cmp	r3, #255	; 0xff
 800e808:	d90e      	bls.n	800e828 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	22ff      	movs	r2, #255	; 0xff
 800e80e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e814:	b2da      	uxtb	r2, r3
 800e816:	8979      	ldrh	r1, [r7, #10]
 800e818:	4b52      	ldr	r3, [pc, #328]	; (800e964 <HAL_I2C_Mem_Read+0x22c>)
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f000 fb31 	bl	800ee88 <I2C_TransferConfig>
 800e826:	e00f      	b.n	800e848 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e82c:	b29a      	uxth	r2, r3
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e836:	b2da      	uxtb	r2, r3
 800e838:	8979      	ldrh	r1, [r7, #10]
 800e83a:	4b4a      	ldr	r3, [pc, #296]	; (800e964 <HAL_I2C_Mem_Read+0x22c>)
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e842:	68f8      	ldr	r0, [r7, #12]
 800e844:	f000 fb20 	bl	800ee88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	2200      	movs	r2, #0
 800e850:	2104      	movs	r1, #4
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	f000 f970 	bl	800eb38 <I2C_WaitOnFlagUntilTimeout>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e85e:	2301      	movs	r3, #1
 800e860:	e07c      	b.n	800e95c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e86c:	b2d2      	uxtb	r2, r2
 800e86e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e874:	1c5a      	adds	r2, r3, #1
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e87e:	3b01      	subs	r3, #1
 800e880:	b29a      	uxth	r2, r3
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	3b01      	subs	r3, #1
 800e88e:	b29a      	uxth	r2, r3
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e898:	b29b      	uxth	r3, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d034      	beq.n	800e908 <HAL_I2C_Mem_Read+0x1d0>
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d130      	bne.n	800e908 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	9300      	str	r3, [sp, #0]
 800e8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	2180      	movs	r1, #128	; 0x80
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	f000 f941 	bl	800eb38 <I2C_WaitOnFlagUntilTimeout>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d001      	beq.n	800e8c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	e04d      	b.n	800e95c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	2bff      	cmp	r3, #255	; 0xff
 800e8c8:	d90e      	bls.n	800e8e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	22ff      	movs	r2, #255	; 0xff
 800e8ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8d4:	b2da      	uxtb	r2, r3
 800e8d6:	8979      	ldrh	r1, [r7, #10]
 800e8d8:	2300      	movs	r3, #0
 800e8da:	9300      	str	r3, [sp, #0]
 800e8dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	f000 fad1 	bl	800ee88 <I2C_TransferConfig>
 800e8e6:	e00f      	b.n	800e908 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8f6:	b2da      	uxtb	r2, r3
 800e8f8:	8979      	ldrh	r1, [r7, #10]
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	9300      	str	r3, [sp, #0]
 800e8fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e902:	68f8      	ldr	r0, [r7, #12]
 800e904:	f000 fac0 	bl	800ee88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d19a      	bne.n	800e848 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e912:	697a      	ldr	r2, [r7, #20]
 800e914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e916:	68f8      	ldr	r0, [r7, #12]
 800e918:	f000 f98e 	bl	800ec38 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e91c:	4603      	mov	r3, r0
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d001      	beq.n	800e926 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e922:	2301      	movs	r3, #1
 800e924:	e01a      	b.n	800e95c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	2220      	movs	r2, #32
 800e92c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	6859      	ldr	r1, [r3, #4]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	4b0b      	ldr	r3, [pc, #44]	; (800e968 <HAL_I2C_Mem_Read+0x230>)
 800e93a:	400b      	ands	r3, r1
 800e93c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2220      	movs	r2, #32
 800e942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2200      	movs	r2, #0
 800e94a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	e000      	b.n	800e95c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e95a:	2302      	movs	r3, #2
  }
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3718      	adds	r7, #24
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	80002400 	.word	0x80002400
 800e968:	fe00e800 	.word	0xfe00e800

0800e96c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e97a:	b2db      	uxtb	r3, r3
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr

0800e988 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e988:	b480      	push	{r7}
 800e98a:	b083      	sub	sp, #12
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e994:	4618      	mov	r0, r3
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b086      	sub	sp, #24
 800e9a4:	af02      	add	r7, sp, #8
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	4608      	mov	r0, r1
 800e9aa:	4611      	mov	r1, r2
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	817b      	strh	r3, [r7, #10]
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	813b      	strh	r3, [r7, #8]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e9ba:	88fb      	ldrh	r3, [r7, #6]
 800e9bc:	b2da      	uxtb	r2, r3
 800e9be:	8979      	ldrh	r1, [r7, #10]
 800e9c0:	4b20      	ldr	r3, [pc, #128]	; (800ea44 <I2C_RequestMemoryWrite+0xa4>)
 800e9c2:	9300      	str	r3, [sp, #0]
 800e9c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	f000 fa5d 	bl	800ee88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e9ce:	69fa      	ldr	r2, [r7, #28]
 800e9d0:	69b9      	ldr	r1, [r7, #24]
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f000 f8f0 	bl	800ebb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d001      	beq.n	800e9e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	e02c      	b.n	800ea3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e9e2:	88fb      	ldrh	r3, [r7, #6]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d105      	bne.n	800e9f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e9e8:	893b      	ldrh	r3, [r7, #8]
 800e9ea:	b2da      	uxtb	r2, r3
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	629a      	str	r2, [r3, #40]	; 0x28
 800e9f2:	e015      	b.n	800ea20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e9f4:	893b      	ldrh	r3, [r7, #8]
 800e9f6:	0a1b      	lsrs	r3, r3, #8
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	b2da      	uxtb	r2, r3
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ea02:	69fa      	ldr	r2, [r7, #28]
 800ea04:	69b9      	ldr	r1, [r7, #24]
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f000 f8d6 	bl	800ebb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ea12:	2301      	movs	r3, #1
 800ea14:	e012      	b.n	800ea3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ea16:	893b      	ldrh	r3, [r7, #8]
 800ea18:	b2da      	uxtb	r2, r3
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	2200      	movs	r2, #0
 800ea28:	2180      	movs	r1, #128	; 0x80
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f000 f884 	bl	800eb38 <I2C_WaitOnFlagUntilTimeout>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d001      	beq.n	800ea3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ea36:	2301      	movs	r3, #1
 800ea38:	e000      	b.n	800ea3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ea3a:	2300      	movs	r3, #0
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	80002000 	.word	0x80002000

0800ea48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b086      	sub	sp, #24
 800ea4c:	af02      	add	r7, sp, #8
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	4608      	mov	r0, r1
 800ea52:	4611      	mov	r1, r2
 800ea54:	461a      	mov	r2, r3
 800ea56:	4603      	mov	r3, r0
 800ea58:	817b      	strh	r3, [r7, #10]
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	813b      	strh	r3, [r7, #8]
 800ea5e:	4613      	mov	r3, r2
 800ea60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ea62:	88fb      	ldrh	r3, [r7, #6]
 800ea64:	b2da      	uxtb	r2, r3
 800ea66:	8979      	ldrh	r1, [r7, #10]
 800ea68:	4b20      	ldr	r3, [pc, #128]	; (800eaec <I2C_RequestMemoryRead+0xa4>)
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	68f8      	ldr	r0, [r7, #12]
 800ea70:	f000 fa0a 	bl	800ee88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ea74:	69fa      	ldr	r2, [r7, #28]
 800ea76:	69b9      	ldr	r1, [r7, #24]
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	f000 f89d 	bl	800ebb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d001      	beq.n	800ea88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ea84:	2301      	movs	r3, #1
 800ea86:	e02c      	b.n	800eae2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ea88:	88fb      	ldrh	r3, [r7, #6]
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d105      	bne.n	800ea9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ea8e:	893b      	ldrh	r3, [r7, #8]
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	629a      	str	r2, [r3, #40]	; 0x28
 800ea98:	e015      	b.n	800eac6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ea9a:	893b      	ldrh	r3, [r7, #8]
 800ea9c:	0a1b      	lsrs	r3, r3, #8
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	b2da      	uxtb	r2, r3
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800eaa8:	69fa      	ldr	r2, [r7, #28]
 800eaaa:	69b9      	ldr	r1, [r7, #24]
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	f000 f883 	bl	800ebb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d001      	beq.n	800eabc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800eab8:	2301      	movs	r3, #1
 800eaba:	e012      	b.n	800eae2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800eabc:	893b      	ldrh	r3, [r7, #8]
 800eabe:	b2da      	uxtb	r2, r3
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	9300      	str	r3, [sp, #0]
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	2200      	movs	r2, #0
 800eace:	2140      	movs	r1, #64	; 0x40
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f000 f831 	bl	800eb38 <I2C_WaitOnFlagUntilTimeout>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800eadc:	2301      	movs	r3, #1
 800eade:	e000      	b.n	800eae2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	80002000 	.word	0x80002000

0800eaf0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	699b      	ldr	r3, [r3, #24]
 800eafe:	f003 0302 	and.w	r3, r3, #2
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	d103      	bne.n	800eb0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	699b      	ldr	r3, [r3, #24]
 800eb14:	f003 0301 	and.w	r3, r3, #1
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d007      	beq.n	800eb2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	699a      	ldr	r2, [r3, #24]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f042 0201 	orr.w	r2, r2, #1
 800eb2a:	619a      	str	r2, [r3, #24]
  }
}
 800eb2c:	bf00      	nop
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr

0800eb38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	603b      	str	r3, [r7, #0]
 800eb44:	4613      	mov	r3, r2
 800eb46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eb48:	e022      	b.n	800eb90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb50:	d01e      	beq.n	800eb90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb52:	f7fe fd03 	bl	800d55c <HAL_GetTick>
 800eb56:	4602      	mov	r2, r0
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	1ad3      	subs	r3, r2, r3
 800eb5c:	683a      	ldr	r2, [r7, #0]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d302      	bcc.n	800eb68 <I2C_WaitOnFlagUntilTimeout+0x30>
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d113      	bne.n	800eb90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb6c:	f043 0220 	orr.w	r2, r3, #32
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2220      	movs	r2, #32
 800eb78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e00f      	b.n	800ebb0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	699a      	ldr	r2, [r3, #24]
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	4013      	ands	r3, r2
 800eb9a:	68ba      	ldr	r2, [r7, #8]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	bf0c      	ite	eq
 800eba0:	2301      	moveq	r3, #1
 800eba2:	2300      	movne	r3, #0
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	461a      	mov	r2, r3
 800eba8:	79fb      	ldrb	r3, [r7, #7]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d0cd      	beq.n	800eb4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ebae:	2300      	movs	r3, #0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ebc4:	e02c      	b.n	800ec20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	68b9      	ldr	r1, [r7, #8]
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f000 f870 	bl	800ecb0 <I2C_IsErrorOccurred>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d001      	beq.n	800ebda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	e02a      	b.n	800ec30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe0:	d01e      	beq.n	800ec20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebe2:	f7fe fcbb 	bl	800d55c <HAL_GetTick>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	1ad3      	subs	r3, r2, r3
 800ebec:	68ba      	ldr	r2, [r7, #8]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d302      	bcc.n	800ebf8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d113      	bne.n	800ec20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebfc:	f043 0220 	orr.w	r2, r3, #32
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2220      	movs	r2, #32
 800ec08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2200      	movs	r2, #0
 800ec18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e007      	b.n	800ec30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	699b      	ldr	r3, [r3, #24]
 800ec26:	f003 0302 	and.w	r3, r3, #2
 800ec2a:	2b02      	cmp	r3, #2
 800ec2c:	d1cb      	bne.n	800ebc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ec2e:	2300      	movs	r3, #0
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ec44:	e028      	b.n	800ec98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	68b9      	ldr	r1, [r7, #8]
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f000 f830 	bl	800ecb0 <I2C_IsErrorOccurred>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d001      	beq.n	800ec5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ec56:	2301      	movs	r3, #1
 800ec58:	e026      	b.n	800eca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec5a:	f7fe fc7f 	bl	800d55c <HAL_GetTick>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	68ba      	ldr	r2, [r7, #8]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d302      	bcc.n	800ec70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d113      	bne.n	800ec98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec74:	f043 0220 	orr.w	r2, r3, #32
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2220      	movs	r2, #32
 800ec80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ec94:	2301      	movs	r3, #1
 800ec96:	e007      	b.n	800eca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	699b      	ldr	r3, [r3, #24]
 800ec9e:	f003 0320 	and.w	r3, r3, #32
 800eca2:	2b20      	cmp	r3, #32
 800eca4:	d1cf      	bne.n	800ec46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800eca6:	2300      	movs	r3, #0
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3710      	adds	r7, #16
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b08a      	sub	sp, #40	; 0x28
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	699b      	ldr	r3, [r3, #24]
 800ecc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ecca:	2300      	movs	r3, #0
 800eccc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	f003 0310 	and.w	r3, r3, #16
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d075      	beq.n	800edc8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	2210      	movs	r2, #16
 800ece2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ece4:	e056      	b.n	800ed94 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecec:	d052      	beq.n	800ed94 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ecee:	f7fe fc35 	bl	800d55c <HAL_GetTick>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	1ad3      	subs	r3, r2, r3
 800ecf8:	68ba      	ldr	r2, [r7, #8]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d302      	bcc.n	800ed04 <I2C_IsErrorOccurred+0x54>
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d147      	bne.n	800ed94 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	699b      	ldr	r3, [r3, #24]
 800ed1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed26:	d12e      	bne.n	800ed86 <I2C_IsErrorOccurred+0xd6>
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed2e:	d02a      	beq.n	800ed86 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800ed30:	7cfb      	ldrb	r3, [r7, #19]
 800ed32:	2b20      	cmp	r3, #32
 800ed34:	d027      	beq.n	800ed86 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	685a      	ldr	r2, [r3, #4]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ed44:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ed46:	f7fe fc09 	bl	800d55c <HAL_GetTick>
 800ed4a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ed4c:	e01b      	b.n	800ed86 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ed4e:	f7fe fc05 	bl	800d55c <HAL_GetTick>
 800ed52:	4602      	mov	r2, r0
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	1ad3      	subs	r3, r2, r3
 800ed58:	2b19      	cmp	r3, #25
 800ed5a:	d914      	bls.n	800ed86 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed60:	f043 0220 	orr.w	r2, r3, #32
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2220      	movs	r2, #32
 800ed6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800ed80:	2301      	movs	r3, #1
 800ed82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	699b      	ldr	r3, [r3, #24]
 800ed8c:	f003 0320 	and.w	r3, r3, #32
 800ed90:	2b20      	cmp	r3, #32
 800ed92:	d1dc      	bne.n	800ed4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	699b      	ldr	r3, [r3, #24]
 800ed9a:	f003 0320 	and.w	r3, r3, #32
 800ed9e:	2b20      	cmp	r3, #32
 800eda0:	d003      	beq.n	800edaa <I2C_IsErrorOccurred+0xfa>
 800eda2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d09d      	beq.n	800ece6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800edaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d103      	bne.n	800edba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	2220      	movs	r2, #32
 800edb8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800edba:	6a3b      	ldr	r3, [r7, #32]
 800edbc:	f043 0304 	orr.w	r3, r3, #4
 800edc0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	699b      	ldr	r3, [r3, #24]
 800edce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00b      	beq.n	800edf2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800edda:	6a3b      	ldr	r3, [r7, #32]
 800eddc:	f043 0301 	orr.w	r3, r3, #1
 800ede0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800edea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800edec:	2301      	movs	r3, #1
 800edee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d00b      	beq.n	800ee14 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800edfc:	6a3b      	ldr	r3, [r7, #32]
 800edfe:	f043 0308 	orr.w	r3, r3, #8
 800ee02:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ee0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ee0e:	2301      	movs	r3, #1
 800ee10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00b      	beq.n	800ee36 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ee1e:	6a3b      	ldr	r3, [r7, #32]
 800ee20:	f043 0302 	orr.w	r3, r3, #2
 800ee24:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ee30:	2301      	movs	r3, #1
 800ee32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800ee36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d01c      	beq.n	800ee78 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ee3e:	68f8      	ldr	r0, [r7, #12]
 800ee40:	f7ff fe56 	bl	800eaf0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	6859      	ldr	r1, [r3, #4]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	4b0d      	ldr	r3, [pc, #52]	; (800ee84 <I2C_IsErrorOccurred+0x1d4>)
 800ee50:	400b      	ands	r3, r1
 800ee52:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee58:	6a3b      	ldr	r3, [r7, #32]
 800ee5a:	431a      	orrs	r2, r3
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2220      	movs	r2, #32
 800ee64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2200      	movs	r2, #0
 800ee74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ee78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3728      	adds	r7, #40	; 0x28
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	fe00e800 	.word	0xfe00e800

0800ee88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b087      	sub	sp, #28
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	60f8      	str	r0, [r7, #12]
 800ee90:	607b      	str	r3, [r7, #4]
 800ee92:	460b      	mov	r3, r1
 800ee94:	817b      	strh	r3, [r7, #10]
 800ee96:	4613      	mov	r3, r2
 800ee98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee9a:	897b      	ldrh	r3, [r7, #10]
 800ee9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eea0:	7a7b      	ldrb	r3, [r7, #9]
 800eea2:	041b      	lsls	r3, r3, #16
 800eea4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eea8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eeae:	6a3b      	ldr	r3, [r7, #32]
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eeb6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	6a3b      	ldr	r3, [r7, #32]
 800eec0:	0d5b      	lsrs	r3, r3, #21
 800eec2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800eec6:	4b08      	ldr	r3, [pc, #32]	; (800eee8 <I2C_TransferConfig+0x60>)
 800eec8:	430b      	orrs	r3, r1
 800eeca:	43db      	mvns	r3, r3
 800eecc:	ea02 0103 	and.w	r1, r2, r3
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	697a      	ldr	r2, [r7, #20]
 800eed6:	430a      	orrs	r2, r1
 800eed8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800eeda:	bf00      	nop
 800eedc:	371c      	adds	r7, #28
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	03ff63ff 	.word	0x03ff63ff

0800eeec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	2b20      	cmp	r3, #32
 800ef00:	d138      	bne.n	800ef74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d101      	bne.n	800ef10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ef0c:	2302      	movs	r3, #2
 800ef0e:	e032      	b.n	800ef76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2201      	movs	r2, #1
 800ef14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2224      	movs	r2, #36	; 0x24
 800ef1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f022 0201 	bic.w	r2, r2, #1
 800ef2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ef3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	6819      	ldr	r1, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	683a      	ldr	r2, [r7, #0]
 800ef4c:	430a      	orrs	r2, r1
 800ef4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f042 0201 	orr.w	r2, r2, #1
 800ef5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2220      	movs	r2, #32
 800ef64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ef70:	2300      	movs	r3, #0
 800ef72:	e000      	b.n	800ef76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ef74:	2302      	movs	r3, #2
  }
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	370c      	adds	r7, #12
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr

0800ef82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ef82:	b480      	push	{r7}
 800ef84:	b085      	sub	sp, #20
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
 800ef8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	2b20      	cmp	r3, #32
 800ef96:	d139      	bne.n	800f00c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d101      	bne.n	800efa6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800efa2:	2302      	movs	r3, #2
 800efa4:	e033      	b.n	800f00e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2201      	movs	r2, #1
 800efaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2224      	movs	r2, #36	; 0x24
 800efb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f022 0201 	bic.w	r2, r2, #1
 800efc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800efd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	021b      	lsls	r3, r3, #8
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	4313      	orrs	r3, r2
 800efde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f042 0201 	orr.w	r2, r2, #1
 800eff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2220      	movs	r2, #32
 800effc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f008:	2300      	movs	r3, #0
 800f00a:	e000      	b.n	800f00e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f00c:	2302      	movs	r3, #2
  }
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3714      	adds	r7, #20
 800f012:	46bd      	mov	sp, r7
 800f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f018:	4770      	bx	lr
	...

0800f01c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d101      	bne.n	800f02e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800f02a:	2301      	movs	r3, #1
 800f02c:	e0bf      	b.n	800f1ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b00      	cmp	r3, #0
 800f038:	d106      	bne.n	800f048 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7f2 f8b6 	bl	80011b4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2202      	movs	r2, #2
 800f04c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	699a      	ldr	r2, [r3, #24]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800f05e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	6999      	ldr	r1, [r3, #24]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	685a      	ldr	r2, [r3, #4]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	689b      	ldr	r3, [r3, #8]
 800f06e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f074:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	691b      	ldr	r3, [r3, #16]
 800f07a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	430a      	orrs	r2, r1
 800f082:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	6899      	ldr	r1, [r3, #8]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	4b4a      	ldr	r3, [pc, #296]	; (800f1b8 <HAL_LTDC_Init+0x19c>)
 800f090:	400b      	ands	r3, r1
 800f092:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	695b      	ldr	r3, [r3, #20]
 800f098:	041b      	lsls	r3, r3, #16
 800f09a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6899      	ldr	r1, [r3, #8]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	699a      	ldr	r2, [r3, #24]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	431a      	orrs	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	430a      	orrs	r2, r1
 800f0b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	68d9      	ldr	r1, [r3, #12]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	4b3e      	ldr	r3, [pc, #248]	; (800f1b8 <HAL_LTDC_Init+0x19c>)
 800f0be:	400b      	ands	r3, r1
 800f0c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	69db      	ldr	r3, [r3, #28]
 800f0c6:	041b      	lsls	r3, r3, #16
 800f0c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	68d9      	ldr	r1, [r3, #12]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6a1a      	ldr	r2, [r3, #32]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	431a      	orrs	r2, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	430a      	orrs	r2, r1
 800f0de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	6919      	ldr	r1, [r3, #16]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	4b33      	ldr	r3, [pc, #204]	; (800f1b8 <HAL_LTDC_Init+0x19c>)
 800f0ec:	400b      	ands	r3, r1
 800f0ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f4:	041b      	lsls	r3, r3, #16
 800f0f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	6919      	ldr	r1, [r3, #16]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	431a      	orrs	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	430a      	orrs	r2, r1
 800f10c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	6959      	ldr	r1, [r3, #20]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	4b27      	ldr	r3, [pc, #156]	; (800f1b8 <HAL_LTDC_Init+0x19c>)
 800f11a:	400b      	ands	r3, r1
 800f11c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f122:	041b      	lsls	r3, r3, #16
 800f124:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	6959      	ldr	r1, [r3, #20]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	431a      	orrs	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	430a      	orrs	r2, r1
 800f13a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f142:	021b      	lsls	r3, r3, #8
 800f144:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f14c:	041b      	lsls	r3, r3, #16
 800f14e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800f15e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f166:	68ba      	ldr	r2, [r7, #8]
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	4313      	orrs	r3, r2
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800f172:	431a      	orrs	r2, r3
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	430a      	orrs	r2, r1
 800f17a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f042 0206 	orr.w	r2, r2, #6
 800f18a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	699a      	ldr	r2, [r3, #24]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f042 0201 	orr.w	r2, r2, #1
 800f19a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800f1ac:	2300      	movs	r3, #0
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	f000f800 	.word	0xf000f800

0800f1bc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1d2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f003 0304 	and.w	r3, r3, #4
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d023      	beq.n	800f226 <HAL_LTDC_IRQHandler+0x6a>
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	f003 0304 	and.w	r3, r3, #4
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d01e      	beq.n	800f226 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f022 0204 	bic.w	r2, r2, #4
 800f1f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2204      	movs	r2, #4
 800f1fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f206:	f043 0201 	orr.w	r2, r3, #1
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2204      	movs	r2, #4
 800f214:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 f86f 	bl	800f304 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f003 0302 	and.w	r3, r3, #2
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d023      	beq.n	800f278 <HAL_LTDC_IRQHandler+0xbc>
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	f003 0302 	and.w	r3, r3, #2
 800f236:	2b00      	cmp	r3, #0
 800f238:	d01e      	beq.n	800f278 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f022 0202 	bic.w	r2, r2, #2
 800f248:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2202      	movs	r2, #2
 800f250:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f258:	f043 0202 	orr.w	r2, r3, #2
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2204      	movs	r2, #4
 800f266:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 f846 	bl	800f304 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f003 0301 	and.w	r3, r3, #1
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d01b      	beq.n	800f2ba <HAL_LTDC_IRQHandler+0xfe>
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	f003 0301 	and.w	r3, r3, #1
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d016      	beq.n	800f2ba <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f022 0201 	bic.w	r2, r2, #1
 800f29a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f7f4 fdd7 	bl	8003e68 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f003 0308 	and.w	r3, r3, #8
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d01b      	beq.n	800f2fc <HAL_LTDC_IRQHandler+0x140>
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	f003 0308 	and.w	r3, r3, #8
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d016      	beq.n	800f2fc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f022 0208 	bic.w	r2, r2, #8
 800f2dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2208      	movs	r2, #8
 800f2e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f000 f80e 	bl	800f318 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800f2fc:	bf00      	nop
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800f30c:	bf00      	nop
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr

0800f318 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800f320:	bf00      	nop
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800f32c:	b5b0      	push	{r4, r5, r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d101      	bne.n	800f346 <HAL_LTDC_ConfigLayer+0x1a>
 800f342:	2302      	movs	r3, #2
 800f344:	e02c      	b.n	800f3a0 <HAL_LTDC_ConfigLayer+0x74>
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2201      	movs	r2, #1
 800f34a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2202      	movs	r2, #2
 800f352:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2134      	movs	r1, #52	; 0x34
 800f35c:	fb01 f303 	mul.w	r3, r1, r3
 800f360:	4413      	add	r3, r2
 800f362:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	4614      	mov	r4, r2
 800f36a:	461d      	mov	r5, r3
 800f36c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f36e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f378:	682b      	ldr	r3, [r5, #0]
 800f37a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	68b9      	ldr	r1, [r7, #8]
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f000 f849 	bl	800f418 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2201      	movs	r2, #1
 800f38c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2201      	movs	r2, #1
 800f392:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2200      	movs	r2, #0
 800f39a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bdb0      	pop	{r4, r5, r7, pc}

0800f3a8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d101      	bne.n	800f3c0 <HAL_LTDC_ProgramLineEvent+0x18>
 800f3bc:	2302      	movs	r3, #2
 800f3be:	e023      	b.n	800f408 <HAL_LTDC_ProgramLineEvent+0x60>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2202      	movs	r2, #2
 800f3cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f022 0201 	bic.w	r2, r2, #1
 800f3de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800f3e0:	4a0c      	ldr	r2, [pc, #48]	; (800f414 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f042 0201 	orr.w	r2, r2, #1
 800f3f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2201      	movs	r2, #1
 800f3fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2200      	movs	r2, #0
 800f402:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr
 800f414:	50001000 	.word	0x50001000

0800f418 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800f418:	b480      	push	{r7}
 800f41a:	b089      	sub	sp, #36	; 0x24
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	685a      	ldr	r2, [r3, #4]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	0c1b      	lsrs	r3, r3, #16
 800f430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f434:	4413      	add	r3, r2
 800f436:	041b      	lsls	r3, r3, #16
 800f438:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	461a      	mov	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	01db      	lsls	r3, r3, #7
 800f444:	4413      	add	r3, r2
 800f446:	3384      	adds	r3, #132	; 0x84
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	68fa      	ldr	r2, [r7, #12]
 800f44c:	6812      	ldr	r2, [r2, #0]
 800f44e:	4611      	mov	r1, r2
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	01d2      	lsls	r2, r2, #7
 800f454:	440a      	add	r2, r1
 800f456:	3284      	adds	r2, #132	; 0x84
 800f458:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f45c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	0c1b      	lsrs	r3, r3, #16
 800f46a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f46e:	4413      	add	r3, r2
 800f470:	1c5a      	adds	r2, r3, #1
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	4619      	mov	r1, r3
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	01db      	lsls	r3, r3, #7
 800f47c:	440b      	add	r3, r1
 800f47e:	3384      	adds	r3, #132	; 0x84
 800f480:	4619      	mov	r1, r3
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	4313      	orrs	r3, r2
 800f486:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	68da      	ldr	r2, [r3, #12]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f496:	4413      	add	r3, r2
 800f498:	041b      	lsls	r3, r3, #16
 800f49a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	01db      	lsls	r3, r3, #7
 800f4a6:	4413      	add	r3, r2
 800f4a8:	3384      	adds	r3, #132	; 0x84
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	6812      	ldr	r2, [r2, #0]
 800f4b0:	4611      	mov	r1, r2
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	01d2      	lsls	r2, r2, #7
 800f4b6:	440a      	add	r2, r1
 800f4b8:	3284      	adds	r2, #132	; 0x84
 800f4ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f4be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	689a      	ldr	r2, [r3, #8]
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f4ce:	4413      	add	r3, r2
 800f4d0:	1c5a      	adds	r2, r3, #1
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	01db      	lsls	r3, r3, #7
 800f4dc:	440b      	add	r3, r1
 800f4de:	3384      	adds	r3, #132	; 0x84
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	01db      	lsls	r3, r3, #7
 800f4f2:	4413      	add	r3, r2
 800f4f4:	3384      	adds	r3, #132	; 0x84
 800f4f6:	691b      	ldr	r3, [r3, #16]
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	6812      	ldr	r2, [r2, #0]
 800f4fc:	4611      	mov	r1, r2
 800f4fe:	687a      	ldr	r2, [r7, #4]
 800f500:	01d2      	lsls	r2, r2, #7
 800f502:	440a      	add	r2, r1
 800f504:	3284      	adds	r2, #132	; 0x84
 800f506:	f023 0307 	bic.w	r3, r3, #7
 800f50a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	461a      	mov	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	01db      	lsls	r3, r3, #7
 800f516:	4413      	add	r3, r2
 800f518:	3384      	adds	r3, #132	; 0x84
 800f51a:	461a      	mov	r2, r3
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f528:	021b      	lsls	r3, r3, #8
 800f52a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f532:	041b      	lsls	r3, r3, #16
 800f534:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	061b      	lsls	r3, r3, #24
 800f53c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	461a      	mov	r2, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	01db      	lsls	r3, r3, #7
 800f548:	4413      	add	r3, r2
 800f54a:	3384      	adds	r3, #132	; 0x84
 800f54c:	699b      	ldr	r3, [r3, #24]
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	461a      	mov	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	01db      	lsls	r3, r3, #7
 800f558:	4413      	add	r3, r2
 800f55a:	3384      	adds	r3, #132	; 0x84
 800f55c:	461a      	mov	r2, r3
 800f55e:	2300      	movs	r3, #0
 800f560:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f568:	461a      	mov	r2, r3
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	431a      	orrs	r2, r3
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	431a      	orrs	r2, r3
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4619      	mov	r1, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	01db      	lsls	r3, r3, #7
 800f57c:	440b      	add	r3, r1
 800f57e:	3384      	adds	r3, #132	; 0x84
 800f580:	4619      	mov	r1, r3
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	4313      	orrs	r3, r2
 800f586:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	461a      	mov	r2, r3
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	01db      	lsls	r3, r3, #7
 800f592:	4413      	add	r3, r2
 800f594:	3384      	adds	r3, #132	; 0x84
 800f596:	695b      	ldr	r3, [r3, #20]
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	6812      	ldr	r2, [r2, #0]
 800f59c:	4611      	mov	r1, r2
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	01d2      	lsls	r2, r2, #7
 800f5a2:	440a      	add	r2, r1
 800f5a4:	3284      	adds	r2, #132	; 0x84
 800f5a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f5aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	01db      	lsls	r3, r3, #7
 800f5b6:	4413      	add	r3, r2
 800f5b8:	3384      	adds	r3, #132	; 0x84
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	695b      	ldr	r3, [r3, #20]
 800f5c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	01db      	lsls	r3, r3, #7
 800f5cc:	4413      	add	r3, r2
 800f5ce:	3384      	adds	r3, #132	; 0x84
 800f5d0:	69da      	ldr	r2, [r3, #28]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	01db      	lsls	r3, r3, #7
 800f5dc:	440b      	add	r3, r1
 800f5de:	3384      	adds	r3, #132	; 0x84
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	4b58      	ldr	r3, [pc, #352]	; (800f744 <LTDC_SetConfig+0x32c>)
 800f5e4:	4013      	ands	r3, r2
 800f5e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	69da      	ldr	r2, [r3, #28]
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	6a1b      	ldr	r3, [r3, #32]
 800f5f0:	68f9      	ldr	r1, [r7, #12]
 800f5f2:	6809      	ldr	r1, [r1, #0]
 800f5f4:	4608      	mov	r0, r1
 800f5f6:	6879      	ldr	r1, [r7, #4]
 800f5f8:	01c9      	lsls	r1, r1, #7
 800f5fa:	4401      	add	r1, r0
 800f5fc:	3184      	adds	r1, #132	; 0x84
 800f5fe:	4313      	orrs	r3, r2
 800f600:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	461a      	mov	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	01db      	lsls	r3, r3, #7
 800f60c:	4413      	add	r3, r2
 800f60e:	3384      	adds	r3, #132	; 0x84
 800f610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	461a      	mov	r2, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	01db      	lsls	r3, r3, #7
 800f61c:	4413      	add	r3, r2
 800f61e:	3384      	adds	r3, #132	; 0x84
 800f620:	461a      	mov	r2, r3
 800f622:	2300      	movs	r3, #0
 800f624:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	461a      	mov	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	01db      	lsls	r3, r3, #7
 800f630:	4413      	add	r3, r2
 800f632:	3384      	adds	r3, #132	; 0x84
 800f634:	461a      	mov	r2, r3
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f63a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	691b      	ldr	r3, [r3, #16]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d102      	bne.n	800f64a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800f644:	2304      	movs	r3, #4
 800f646:	61fb      	str	r3, [r7, #28]
 800f648:	e01b      	b.n	800f682 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	691b      	ldr	r3, [r3, #16]
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d102      	bne.n	800f658 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800f652:	2303      	movs	r3, #3
 800f654:	61fb      	str	r3, [r7, #28]
 800f656:	e014      	b.n	800f682 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	691b      	ldr	r3, [r3, #16]
 800f65c:	2b04      	cmp	r3, #4
 800f65e:	d00b      	beq.n	800f678 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800f664:	2b02      	cmp	r3, #2
 800f666:	d007      	beq.n	800f678 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800f66c:	2b03      	cmp	r3, #3
 800f66e:	d003      	beq.n	800f678 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800f674:	2b07      	cmp	r3, #7
 800f676:	d102      	bne.n	800f67e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800f678:	2302      	movs	r3, #2
 800f67a:	61fb      	str	r3, [r7, #28]
 800f67c:	e001      	b.n	800f682 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800f67e:	2301      	movs	r3, #1
 800f680:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	461a      	mov	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	01db      	lsls	r3, r3, #7
 800f68c:	4413      	add	r3, r2
 800f68e:	3384      	adds	r3, #132	; 0x84
 800f690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f692:	68fa      	ldr	r2, [r7, #12]
 800f694:	6812      	ldr	r2, [r2, #0]
 800f696:	4611      	mov	r1, r2
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	01d2      	lsls	r2, r2, #7
 800f69c:	440a      	add	r2, r1
 800f69e:	3284      	adds	r2, #132	; 0x84
 800f6a0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800f6a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6aa:	69fa      	ldr	r2, [r7, #28]
 800f6ac:	fb02 f303 	mul.w	r3, r2, r3
 800f6b0:	041a      	lsls	r2, r3, #16
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	6859      	ldr	r1, [r3, #4]
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	1acb      	subs	r3, r1, r3
 800f6bc:	69f9      	ldr	r1, [r7, #28]
 800f6be:	fb01 f303 	mul.w	r3, r1, r3
 800f6c2:	3307      	adds	r3, #7
 800f6c4:	68f9      	ldr	r1, [r7, #12]
 800f6c6:	6809      	ldr	r1, [r1, #0]
 800f6c8:	4608      	mov	r0, r1
 800f6ca:	6879      	ldr	r1, [r7, #4]
 800f6cc:	01c9      	lsls	r1, r1, #7
 800f6ce:	4401      	add	r1, r0
 800f6d0:	3184      	adds	r1, #132	; 0x84
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	01db      	lsls	r3, r3, #7
 800f6e0:	4413      	add	r3, r2
 800f6e2:	3384      	adds	r3, #132	; 0x84
 800f6e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	01db      	lsls	r3, r3, #7
 800f6f0:	440b      	add	r3, r1
 800f6f2:	3384      	adds	r3, #132	; 0x84
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	4b14      	ldr	r3, [pc, #80]	; (800f748 <LTDC_SetConfig+0x330>)
 800f6f8:	4013      	ands	r3, r2
 800f6fa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	461a      	mov	r2, r3
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	01db      	lsls	r3, r3, #7
 800f706:	4413      	add	r3, r2
 800f708:	3384      	adds	r3, #132	; 0x84
 800f70a:	461a      	mov	r2, r3
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f710:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	461a      	mov	r2, r3
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	01db      	lsls	r3, r3, #7
 800f71c:	4413      	add	r3, r2
 800f71e:	3384      	adds	r3, #132	; 0x84
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	6812      	ldr	r2, [r2, #0]
 800f726:	4611      	mov	r1, r2
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	01d2      	lsls	r2, r2, #7
 800f72c:	440a      	add	r2, r1
 800f72e:	3284      	adds	r2, #132	; 0x84
 800f730:	f043 0301 	orr.w	r3, r3, #1
 800f734:	6013      	str	r3, [r2, #0]
}
 800f736:	bf00      	nop
 800f738:	3724      	adds	r7, #36	; 0x24
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop
 800f744:	fffff8f8 	.word	0xfffff8f8
 800f748:	fffff800 	.word	0xfffff800

0800f74c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f754:	f7fd ff02 	bl	800d55c <HAL_GetTick>
 800f758:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d101      	bne.n	800f764 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800f760:	2301      	movs	r3, #1
 800f762:	e03b      	b.n	800f7dc <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2202      	movs	r2, #2
 800f770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	68da      	ldr	r2, [r3, #12]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f022 0201 	bic.w	r2, r2, #1
 800f782:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f784:	e00f      	b.n	800f7a6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800f786:	f7fd fee9 	bl	800d55c <HAL_GetTick>
 800f78a:	4602      	mov	r2, r0
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	1ad3      	subs	r3, r2, r3
 800f790:	2b05      	cmp	r3, #5
 800f792:	d908      	bls.n	800f7a6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2240      	movs	r2, #64	; 0x40
 800f798:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2203      	movs	r2, #3
 800f79e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	e01a      	b.n	800f7dc <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	f003 0301 	and.w	r3, r3, #1
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d1e8      	bne.n	800f786 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 f894 	bl	800f8e2 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b083      	sub	sp, #12
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d101      	bne.n	800f7f6 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e048      	b.n	800f888 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	68da      	ldr	r2, [r3, #12]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f022 0201 	bic.w	r2, r2, #1
 800f804:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	2200      	movs	r2, #0
 800f80c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	2200      	movs	r2, #0
 800f814:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2200      	movs	r2, #0
 800f81c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	2200      	movs	r2, #0
 800f824:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2200      	movs	r2, #0
 800f82c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2200      	movs	r2, #0
 800f834:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2200      	movs	r2, #0
 800f83c:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	2200      	movs	r2, #0
 800f844:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2200      	movs	r2, #0
 800f84c:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2200      	movs	r2, #0
 800f854:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	221f      	movs	r2, #31
 800f85c:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2200      	movs	r2, #0
 800f862:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2200      	movs	r2, #0
 800f874:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2200      	movs	r2, #0
 800f882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f886:	2300      	movs	r3, #0
}
 800f888:	4618      	mov	r0, r3
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d101      	bne.n	800f8a6 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	e017      	b.n	800f8d6 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d004      	beq.n	800f8bc <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2280      	movs	r2, #128	; 0x80
 800f8b6:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	e00c      	b.n	800f8d6 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2204      	movs	r2, #4
 800f8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	68da      	ldr	r2, [r3, #12]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f022 0201 	bic.w	r2, r2, #1
 800f8d2:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800f8d4:	2300      	movs	r3, #0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	370c      	adds	r7, #12
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr

0800f8e2 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f8e2:	b480      	push	{r7}
 800f8e4:	b085      	sub	sp, #20
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	68d9      	ldr	r1, [r3, #12]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	691a      	ldr	r2, [r3, #16]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	430a      	orrs	r2, r1
 800f8f8:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	695a      	ldr	r2, [r3, #20]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	699b      	ldr	r3, [r3, #24]
 800f902:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f908:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f914:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f91a:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f920:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f926:	3b01      	subs	r3, #1
 800f928:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800f92a:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f936:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f938:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f942:	d107      	bne.n	800f954 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	691a      	ldr	r2, [r3, #16]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800f952:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2200      	movs	r2, #0
 800f95a:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f960:	2b00      	cmp	r3, #0
 800f962:	da11      	bge.n	800f988 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	695a      	ldr	r2, [r3, #20]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f972:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f978:	425b      	negs	r3, r3
 800f97a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	68fa      	ldr	r2, [r7, #12]
 800f982:	b292      	uxth	r2, r2
 800f984:	621a      	str	r2, [r3, #32]
 800f986:	e006      	b.n	800f996 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f98c:	461a      	mov	r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	b292      	uxth	r2, r2
 800f994:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	da15      	bge.n	800f9ca <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	695a      	ldr	r2, [r3, #20]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800f9ac:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b2:	425b      	negs	r3, r3
 800f9b4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	6a19      	ldr	r1, [r3, #32]
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	041a      	lsls	r2, r3, #16
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	430a      	orrs	r2, r1
 800f9c6:	621a      	str	r2, [r3, #32]
 800f9c8:	e009      	b.n	800f9de <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	6a19      	ldr	r1, [r3, #32]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9d4:	041a      	lsls	r2, r3, #16
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	430a      	orrs	r2, r1
 800f9dc:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9e6:	d006      	beq.n	800f9f6 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	685a      	ldr	r2, [r3, #4]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	b2d2      	uxtb	r2, r2
 800f9f2:	629a      	str	r2, [r3, #40]	; 0x28
 800f9f4:	e003      	b.n	800f9fe <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2200      	movs	r2, #0
 800fa04:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fa06:	bf00      	nop
 800fa08:	3714      	adds	r7, #20
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa10:	4770      	bx	lr
	...

0800fa14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800fa1c:	4b29      	ldr	r3, [pc, #164]	; (800fac4 <HAL_PWREx_ConfigSupply+0xb0>)
 800fa1e:	68db      	ldr	r3, [r3, #12]
 800fa20:	f003 0307 	and.w	r3, r3, #7
 800fa24:	2b06      	cmp	r3, #6
 800fa26:	d00a      	beq.n	800fa3e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800fa28:	4b26      	ldr	r3, [pc, #152]	; (800fac4 <HAL_PWREx_ConfigSupply+0xb0>)
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d001      	beq.n	800fa3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800fa36:	2301      	movs	r3, #1
 800fa38:	e040      	b.n	800fabc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	e03e      	b.n	800fabc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800fa3e:	4b21      	ldr	r3, [pc, #132]	; (800fac4 <HAL_PWREx_ConfigSupply+0xb0>)
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800fa46:	491f      	ldr	r1, [pc, #124]	; (800fac4 <HAL_PWREx_ConfigSupply+0xb0>)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4313      	orrs	r3, r2
 800fa4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800fa4e:	f7fd fd85 	bl	800d55c <HAL_GetTick>
 800fa52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800fa54:	e009      	b.n	800fa6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800fa56:	f7fd fd81 	bl	800d55c <HAL_GetTick>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fa64:	d901      	bls.n	800fa6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800fa66:	2301      	movs	r3, #1
 800fa68:	e028      	b.n	800fabc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800fa6a:	4b16      	ldr	r3, [pc, #88]	; (800fac4 <HAL_PWREx_ConfigSupply+0xb0>)
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fa72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa76:	d1ee      	bne.n	800fa56 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2b1e      	cmp	r3, #30
 800fa7c:	d008      	beq.n	800fa90 <HAL_PWREx_ConfigSupply+0x7c>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2b2e      	cmp	r3, #46	; 0x2e
 800fa82:	d005      	beq.n	800fa90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2b1d      	cmp	r3, #29
 800fa88:	d002      	beq.n	800fa90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2b2d      	cmp	r3, #45	; 0x2d
 800fa8e:	d114      	bne.n	800faba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800fa90:	f7fd fd64 	bl	800d55c <HAL_GetTick>
 800fa94:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800fa96:	e009      	b.n	800faac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800fa98:	f7fd fd60 	bl	800d55c <HAL_GetTick>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	1ad3      	subs	r3, r2, r3
 800faa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800faa6:	d901      	bls.n	800faac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800faa8:	2301      	movs	r3, #1
 800faaa:	e007      	b.n	800fabc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800faac:	4b05      	ldr	r3, [pc, #20]	; (800fac4 <HAL_PWREx_ConfigSupply+0xb0>)
 800faae:	68db      	ldr	r3, [r3, #12]
 800fab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fab8:	d1ee      	bne.n	800fa98 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3710      	adds	r7, #16
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	58024800 	.word	0x58024800

0800fac8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af02      	add	r7, sp, #8
 800face:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800fad0:	f7fd fd44 	bl	800d55c <HAL_GetTick>
 800fad4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d101      	bne.n	800fae0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800fadc:	2301      	movs	r3, #1
 800fade:	e05f      	b.n	800fba0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d107      	bne.n	800fafc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7f1 fc53 	bl	8001398 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800faf2:	f241 3188 	movw	r1, #5000	; 0x1388
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f000 fcca 	bl	8010490 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	689b      	ldr	r3, [r3, #8]
 800fb0a:	3b01      	subs	r3, #1
 800fb0c:	021a      	lsls	r2, r3, #8
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	430a      	orrs	r2, r1
 800fb14:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	2120      	movs	r1, #32
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 fcf5 	bl	8010512 <QSPI_WaitFlagStateUntilTimeout>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800fb2c:	7afb      	ldrb	r3, [r7, #11]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d135      	bne.n	800fb9e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	4b1b      	ldr	r3, [pc, #108]	; (800fba8 <HAL_QSPI_Init+0xe0>)
 800fb3a:	4013      	ands	r3, r2
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	6852      	ldr	r2, [r2, #4]
 800fb40:	0611      	lsls	r1, r2, #24
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	68d2      	ldr	r2, [r2, #12]
 800fb46:	4311      	orrs	r1, r2
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	69d2      	ldr	r2, [r2, #28]
 800fb4c:	4311      	orrs	r1, r2
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	6a12      	ldr	r2, [r2, #32]
 800fb52:	4311      	orrs	r1, r2
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	6812      	ldr	r2, [r2, #0]
 800fb58:	430b      	orrs	r3, r1
 800fb5a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	685a      	ldr	r2, [r3, #4]
 800fb62:	4b12      	ldr	r3, [pc, #72]	; (800fbac <HAL_QSPI_Init+0xe4>)
 800fb64:	4013      	ands	r3, r2
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	6912      	ldr	r2, [r2, #16]
 800fb6a:	0411      	lsls	r1, r2, #16
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	6952      	ldr	r2, [r2, #20]
 800fb70:	4311      	orrs	r1, r2
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	6992      	ldr	r2, [r2, #24]
 800fb76:	4311      	orrs	r1, r2
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	6812      	ldr	r2, [r2, #0]
 800fb7c:	430b      	orrs	r3, r1
 800fb7e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f042 0201 	orr.w	r2, r2, #1
 800fb8e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2200      	movs	r2, #0
 800fb94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2201      	movs	r2, #1
 800fb9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800fb9e:	7afb      	ldrb	r3, [r7, #11]
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3710      	adds	r7, #16
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	00ffff2f 	.word	0x00ffff2f
 800fbac:	ffe0f8fe 	.word	0xffe0f8fe

0800fbb0 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b086      	sub	sp, #24
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	689b      	ldr	r3, [r3, #8]
 800fbbe:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	f003 0304 	and.w	r3, r3, #4
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d064      	beq.n	800fc9c <HAL_QSPI_IRQHandler+0xec>
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d05f      	beq.n	800fc9c <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	3320      	adds	r3, #32
 800fbe2:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	2b12      	cmp	r3, #18
 800fbee:	d125      	bne.n	800fc3c <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800fbf0:	e01c      	b.n	800fc2c <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00f      	beq.n	800fc1a <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbfe:	781a      	ldrb	r2, [r3, #0]
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc08:	1c5a      	adds	r2, r3, #1
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc12:	1e5a      	subs	r2, r3, #1
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	62da      	str	r2, [r3, #44]	; 0x2c
 800fc18:	e008      	b.n	800fc2c <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fc28:	601a      	str	r2, [r3, #0]
          break;
 800fc2a:	e033      	b.n	800fc94 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	689b      	ldr	r3, [r3, #8]
 800fc32:	f003 0304 	and.w	r3, r3, #4
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1db      	bne.n	800fbf2 <HAL_QSPI_IRQHandler+0x42>
 800fc3a:	e02b      	b.n	800fc94 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	2b22      	cmp	r3, #34	; 0x22
 800fc46:	d125      	bne.n	800fc94 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800fc48:	e01d      	b.n	800fc86 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d010      	beq.n	800fc74 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	7812      	ldrb	r2, [r2, #0]
 800fc5a:	b2d2      	uxtb	r2, r2
 800fc5c:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc6c:	1e5a      	subs	r2, r3, #1
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	639a      	str	r2, [r3, #56]	; 0x38
 800fc72:	e008      	b.n	800fc86 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fc82:	601a      	str	r2, [r3, #0]
          break;
 800fc84:	e006      	b.n	800fc94 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	689b      	ldr	r3, [r3, #8]
 800fc8c:	f003 0304 	and.w	r3, r3, #4
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d1da      	bne.n	800fc4a <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 fbdd 	bl	8010454 <HAL_QSPI_FifoThresholdCallback>
 800fc9a:	e13c      	b.n	800ff16 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	f003 0302 	and.w	r3, r3, #2
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	f000 80b0 	beq.w	800fe08 <HAL_QSPI_IRQHandler+0x258>
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	f000 80aa 	beq.w	800fe08 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	2202      	movs	r2, #2
 800fcba:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800fcca:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	2b12      	cmp	r3, #18
 800fcd6:	d120      	bne.n	800fd1a <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f003 0304 	and.w	r3, r3, #4
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d011      	beq.n	800fd0a <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f022 0204 	bic.w	r2, r2, #4
 800fcf4:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	68da      	ldr	r2, [r3, #12]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f022 0201 	bic.w	r2, r2, #1
 800fd08:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 fb94 	bl	8010440 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fd18:	e0fa      	b.n	800ff10 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	2b22      	cmp	r3, #34	; 0x22
 800fd24:	d143      	bne.n	800fdae <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f003 0304 	and.w	r3, r3, #4
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d012      	beq.n	800fd5a <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	f022 0204 	bic.w	r2, r2, #4
 800fd42:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	68da      	ldr	r2, [r3, #12]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f022 0201 	bic.w	r2, r2, #1
 800fd56:	60da      	str	r2, [r3, #12]
 800fd58:	e021      	b.n	800fd9e <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3320      	adds	r3, #32
 800fd60:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800fd62:	e013      	b.n	800fd8c <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d017      	beq.n	800fd9c <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd70:	68fa      	ldr	r2, [r7, #12]
 800fd72:	7812      	ldrb	r2, [r2, #0]
 800fd74:	b2d2      	uxtb	r2, r2
 800fd76:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd7c:	1c5a      	adds	r2, r3, #1
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd86:	1e5a      	subs	r2, r3, #1
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	689b      	ldr	r3, [r3, #8]
 800fd92:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d1e4      	bne.n	800fd64 <HAL_QSPI_IRQHandler+0x1b4>
 800fd9a:	e000      	b.n	800fd9e <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800fd9c:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2201      	movs	r2, #1
 800fda2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 fb40 	bl	801042c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fdac:	e0b0      	b.n	800ff10 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fdb4:	b2db      	uxtb	r3, r3
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	d107      	bne.n	800fdca <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 fb28 	bl	8010418 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fdc8:	e0a2      	b.n	800ff10 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	2b08      	cmp	r3, #8
 800fdd4:	f040 809c 	bne.w	800ff10 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	695a      	ldr	r2, [r3, #20]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800fde6:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2201      	movs	r2, #1
 800fdec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d103      	bne.n	800fe00 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 fb03 	bl	8010404 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fdfe:	e087      	b.n	800ff10 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 faf5 	bl	80103f0 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fe06:	e083      	b.n	800ff10 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	f003 0308 	and.w	r3, r3, #8
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d01f      	beq.n	800fe52 <HAL_QSPI_IRQHandler+0x2a2>
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d01a      	beq.n	800fe52 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2208      	movs	r2, #8
 800fe22:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d00b      	beq.n	800fe4a <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800fe40:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2201      	movs	r2, #1
 800fe46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 fb0c 	bl	8010468 <HAL_QSPI_StatusMatchCallback>
 800fe50:	e061      	b.n	800ff16 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	f003 0301 	and.w	r3, r3, #1
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d047      	beq.n	800feec <HAL_QSPI_IRQHandler+0x33c>
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d042      	beq.n	800feec <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800fe7c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe82:	f043 0202 	orr.w	r2, r3, #2
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f003 0304 	and.w	r3, r3, #4
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d021      	beq.n	800fedc <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f022 0204 	bic.w	r2, r2, #4
 800fea6:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feac:	4a1c      	ldr	r2, [pc, #112]	; (800ff20 <HAL_QSPI_IRQHandler+0x370>)
 800feae:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7ff fced 	bl	800f894 <HAL_MDMA_Abort_IT>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	d029      	beq.n	800ff14 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fec4:	f043 0204 	orr.w	r2, r3, #4
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2201      	movs	r2, #1
 800fed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 fa8b 	bl	80103f0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800feda:	e01b      	b.n	800ff14 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2201      	movs	r2, #1
 800fee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 fa83 	bl	80103f0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800feea:	e013      	b.n	800ff14 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	f003 0310 	and.w	r3, r3, #16
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d00f      	beq.n	800ff16 <HAL_QSPI_IRQHandler+0x366>
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d00a      	beq.n	800ff16 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2210      	movs	r2, #16
 800ff06:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f000 fab7 	bl	801047c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800ff0e:	e002      	b.n	800ff16 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ff10:	bf00      	nop
 800ff12:	e000      	b.n	800ff16 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ff14:	bf00      	nop
}
 800ff16:	bf00      	nop
 800ff18:	3718      	adds	r7, #24
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	080104ad 	.word	0x080104ad

0800ff24 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b088      	sub	sp, #32
 800ff28:	af02      	add	r7, sp, #8
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ff30:	f7fd fb14 	bl	800d55c <HAL_GetTick>
 800ff34:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d101      	bne.n	800ff46 <HAL_QSPI_Command+0x22>
 800ff42:	2302      	movs	r3, #2
 800ff44:	e048      	b.n	800ffd8 <HAL_QSPI_Command+0xb4>
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2201      	movs	r2, #1
 800ff4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d137      	bne.n	800ffca <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	2202      	movs	r2, #2
 800ff64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	9300      	str	r3, [sp, #0]
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	2120      	movs	r1, #32
 800ff72:	68f8      	ldr	r0, [r7, #12]
 800ff74:	f000 facd 	bl	8010512 <QSPI_WaitFlagStateUntilTimeout>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800ff7c:	7dfb      	ldrb	r3, [r7, #23]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d125      	bne.n	800ffce <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ff82:	2200      	movs	r2, #0
 800ff84:	68b9      	ldr	r1, [r7, #8]
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f000 fafa 	bl	8010580 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d115      	bne.n	800ffc0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	2102      	movs	r1, #2
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	f000 fab7 	bl	8010512 <QSPI_WaitFlagStateUntilTimeout>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800ffa8:	7dfb      	ldrb	r3, [r7, #23]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d10f      	bne.n	800ffce <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	2202      	movs	r2, #2
 800ffb4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2201      	movs	r2, #1
 800ffba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffbe:	e006      	b.n	800ffce <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffc8:	e001      	b.n	800ffce <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800ffca:	2302      	movs	r3, #2
 800ffcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ffd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3718      	adds	r7, #24
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b08a      	sub	sp, #40	; 0x28
 800ffe4:	af02      	add	r7, sp, #8
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ffec:	2300      	movs	r3, #0
 800ffee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800fff0:	f7fd fab4 	bl	800d55c <HAL_GetTick>
 800fff4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	3320      	adds	r3, #32
 800fffc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010004:	b2db      	uxtb	r3, r3
 8010006:	2b01      	cmp	r3, #1
 8010008:	d101      	bne.n	801000e <HAL_QSPI_Transmit+0x2e>
 801000a:	2302      	movs	r3, #2
 801000c:	e076      	b.n	80100fc <HAL_QSPI_Transmit+0x11c>
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2201      	movs	r2, #1
 8010012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801001c:	b2db      	uxtb	r3, r3
 801001e:	2b01      	cmp	r3, #1
 8010020:	d165      	bne.n	80100ee <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2200      	movs	r2, #0
 8010026:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d056      	beq.n	80100dc <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2212      	movs	r2, #18
 8010032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	691b      	ldr	r3, [r3, #16]
 801003c:	1c5a      	adds	r2, r3, #1
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	691b      	ldr	r3, [r3, #16]
 8010048:	1c5a      	adds	r2, r3, #1
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	68ba      	ldr	r2, [r7, #8]
 8010052:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	695a      	ldr	r2, [r3, #20]
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8010062:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8010064:	e01b      	b.n	801009e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	2201      	movs	r2, #1
 801006e:	2104      	movs	r1, #4
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	f000 fa4e 	bl	8010512 <QSPI_WaitFlagStateUntilTimeout>
 8010076:	4603      	mov	r3, r0
 8010078:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801007a:	7ffb      	ldrb	r3, [r7, #31]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d113      	bne.n	80100a8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010084:	781a      	ldrb	r2, [r3, #0]
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008e:	1c5a      	adds	r2, r3, #1
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010098:	1e5a      	subs	r2, r3, #1
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d1df      	bne.n	8010066 <HAL_QSPI_Transmit+0x86>
 80100a6:	e000      	b.n	80100aa <HAL_QSPI_Transmit+0xca>
          break;
 80100a8:	bf00      	nop
      }

      if (status == HAL_OK)
 80100aa:	7ffb      	ldrb	r3, [r7, #31]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d110      	bne.n	80100d2 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	69bb      	ldr	r3, [r7, #24]
 80100b6:	2201      	movs	r2, #1
 80100b8:	2102      	movs	r1, #2
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f000 fa29 	bl	8010512 <QSPI_WaitFlagStateUntilTimeout>
 80100c0:	4603      	mov	r3, r0
 80100c2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80100c4:	7ffb      	ldrb	r3, [r7, #31]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d103      	bne.n	80100d2 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2202      	movs	r2, #2
 80100d0:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2201      	movs	r2, #1
 80100d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80100da:	e00a      	b.n	80100f2 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100e0:	f043 0208 	orr.w	r2, r3, #8
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80100e8:	2301      	movs	r3, #1
 80100ea:	77fb      	strb	r3, [r7, #31]
 80100ec:	e001      	b.n	80100f2 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80100ee:	2302      	movs	r3, #2
 80100f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	2200      	movs	r2, #0
 80100f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80100fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3720      	adds	r7, #32
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b08a      	sub	sp, #40	; 0x28
 8010108:	af02      	add	r7, sp, #8
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010110:	2300      	movs	r3, #0
 8010112:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8010114:	f7fd fa22 	bl	800d55c <HAL_GetTick>
 8010118:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	699b      	ldr	r3, [r3, #24]
 8010120:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	3320      	adds	r3, #32
 8010128:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010130:	b2db      	uxtb	r3, r3
 8010132:	2b01      	cmp	r3, #1
 8010134:	d101      	bne.n	801013a <HAL_QSPI_Receive+0x36>
 8010136:	2302      	movs	r3, #2
 8010138:	e07d      	b.n	8010236 <HAL_QSPI_Receive+0x132>
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2201      	movs	r2, #1
 801013e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010148:	b2db      	uxtb	r3, r3
 801014a:	2b01      	cmp	r3, #1
 801014c:	d16c      	bne.n	8010228 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2200      	movs	r2, #0
 8010152:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d05d      	beq.n	8010216 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2222      	movs	r2, #34	; 0x22
 801015e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	691b      	ldr	r3, [r3, #16]
 8010168:	1c5a      	adds	r2, r3, #1
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	691b      	ldr	r3, [r3, #16]
 8010174:	1c5a      	adds	r2, r3, #1
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	695b      	ldr	r3, [r3, #20]
 8010186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010192:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	697a      	ldr	r2, [r7, #20]
 801019a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 801019c:	e01c      	b.n	80101d8 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	9300      	str	r3, [sp, #0]
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	2201      	movs	r2, #1
 80101a6:	2106      	movs	r1, #6
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f000 f9b2 	bl	8010512 <QSPI_WaitFlagStateUntilTimeout>
 80101ae:	4603      	mov	r3, r0
 80101b0:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80101b2:	7ffb      	ldrb	r3, [r7, #31]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d114      	bne.n	80101e2 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101bc:	693a      	ldr	r2, [r7, #16]
 80101be:	7812      	ldrb	r2, [r2, #0]
 80101c0:	b2d2      	uxtb	r2, r2
 80101c2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101c8:	1c5a      	adds	r2, r3, #1
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101d2:	1e5a      	subs	r2, r3, #1
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d1de      	bne.n	801019e <HAL_QSPI_Receive+0x9a>
 80101e0:	e000      	b.n	80101e4 <HAL_QSPI_Receive+0xe0>
          break;
 80101e2:	bf00      	nop
      }

      if (status == HAL_OK)
 80101e4:	7ffb      	ldrb	r3, [r7, #31]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d110      	bne.n	801020c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	9300      	str	r3, [sp, #0]
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	2201      	movs	r2, #1
 80101f2:	2102      	movs	r1, #2
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f000 f98c 	bl	8010512 <QSPI_WaitFlagStateUntilTimeout>
 80101fa:	4603      	mov	r3, r0
 80101fc:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80101fe:	7ffb      	ldrb	r3, [r7, #31]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d103      	bne.n	801020c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2202      	movs	r2, #2
 801020a:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2201      	movs	r2, #1
 8010210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010214:	e00a      	b.n	801022c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801021a:	f043 0208 	orr.w	r2, r3, #8
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8010222:	2301      	movs	r3, #1
 8010224:	77fb      	strb	r3, [r7, #31]
 8010226:	e001      	b.n	801022c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8010228:	2302      	movs	r3, #2
 801022a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2200      	movs	r2, #0
 8010230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8010234:	7ffb      	ldrb	r3, [r7, #31]
}
 8010236:	4618      	mov	r0, r3
 8010238:	3720      	adds	r7, #32
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}

0801023e <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 801023e:	b580      	push	{r7, lr}
 8010240:	b088      	sub	sp, #32
 8010242:	af02      	add	r7, sp, #8
 8010244:	60f8      	str	r0, [r7, #12]
 8010246:	60b9      	str	r1, [r7, #8]
 8010248:	607a      	str	r2, [r7, #4]
 801024a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801024c:	f7fd f986 	bl	800d55c <HAL_GetTick>
 8010250:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b01      	cmp	r3, #1
 801025c:	d101      	bne.n	8010262 <HAL_QSPI_AutoPolling+0x24>
 801025e:	2302      	movs	r3, #2
 8010260:	e060      	b.n	8010324 <HAL_QSPI_AutoPolling+0xe6>
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2201      	movs	r2, #1
 8010266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010270:	b2db      	uxtb	r3, r3
 8010272:	2b01      	cmp	r3, #1
 8010274:	d14f      	bne.n	8010316 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2200      	movs	r2, #0
 801027a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2242      	movs	r2, #66	; 0x42
 8010280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	2200      	movs	r2, #0
 801028c:	2120      	movs	r1, #32
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f000 f93f 	bl	8010512 <QSPI_WaitFlagStateUntilTimeout>
 8010294:	4603      	mov	r3, r0
 8010296:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8010298:	7dfb      	ldrb	r3, [r7, #23]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d13d      	bne.n	801031a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	6812      	ldr	r2, [r2, #0]
 80102a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	6852      	ldr	r2, [r2, #4]
 80102b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	687a      	ldr	r2, [r7, #4]
 80102b8:	6892      	ldr	r2, [r2, #8]
 80102ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	691b      	ldr	r3, [r3, #16]
 80102ca:	431a      	orrs	r2, r3
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80102d4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	68da      	ldr	r2, [r3, #12]
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80102de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80102e2:	68b9      	ldr	r1, [r7, #8]
 80102e4:	68f8      	ldr	r0, [r7, #12]
 80102e6:	f000 f94b 	bl	8010580 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	9300      	str	r3, [sp, #0]
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	2201      	movs	r2, #1
 80102f2:	2108      	movs	r1, #8
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f000 f90c 	bl	8010512 <QSPI_WaitFlagStateUntilTimeout>
 80102fa:	4603      	mov	r3, r0
 80102fc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80102fe:	7dfb      	ldrb	r3, [r7, #23]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d10a      	bne.n	801031a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2208      	movs	r2, #8
 801030a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2201      	movs	r2, #1
 8010310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010314:	e001      	b.n	801031a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8010316:	2302      	movs	r3, #2
 8010318:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2200      	movs	r2, #0
 801031e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8010322:	7dfb      	ldrb	r3, [r7, #23]
}
 8010324:	4618      	mov	r0, r3
 8010326:	3718      	adds	r7, #24
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b088      	sub	sp, #32
 8010330:	af02      	add	r7, sp, #8
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	60b9      	str	r1, [r7, #8]
 8010336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010338:	f7fd f910 	bl	800d55c <HAL_GetTick>
 801033c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010344:	b2db      	uxtb	r3, r3
 8010346:	2b01      	cmp	r3, #1
 8010348:	d101      	bne.n	801034e <HAL_QSPI_MemoryMapped+0x22>
 801034a:	2302      	movs	r3, #2
 801034c:	e04c      	b.n	80103e8 <HAL_QSPI_MemoryMapped+0xbc>
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2201      	movs	r2, #1
 8010352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801035c:	b2db      	uxtb	r3, r3
 801035e:	2b01      	cmp	r3, #1
 8010360:	d13b      	bne.n	80103da <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	2200      	movs	r2, #0
 8010366:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2282      	movs	r2, #130	; 0x82
 801036c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	2200      	movs	r2, #0
 801037a:	2120      	movs	r1, #32
 801037c:	68f8      	ldr	r0, [r7, #12]
 801037e:	f000 f8c8 	bl	8010512 <QSPI_WaitFlagStateUntilTimeout>
 8010382:	4603      	mov	r3, r0
 8010384:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8010386:	7dfb      	ldrb	r3, [r7, #23]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d128      	bne.n	80103de <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f023 0108 	bic.w	r1, r3, #8
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	685a      	ldr	r2, [r3, #4]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	430a      	orrs	r2, r1
 80103a0:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	2b08      	cmp	r3, #8
 80103a8:	d110      	bne.n	80103cc <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	6812      	ldr	r2, [r2, #0]
 80103b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2210      	movs	r2, #16
 80103ba:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80103ca:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80103cc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80103d0:	68b9      	ldr	r1, [r7, #8]
 80103d2:	68f8      	ldr	r0, [r7, #12]
 80103d4:	f000 f8d4 	bl	8010580 <QSPI_Config>
 80103d8:	e001      	b.n	80103de <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80103da:	2302      	movs	r3, #2
 80103dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2200      	movs	r2, #0
 80103e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80103e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3718      	adds	r7, #24
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80103f8:	bf00      	nop
 80103fa:	370c      	adds	r7, #12
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr

08010404 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 801040c:	bf00      	nop
 801040e:	370c      	adds	r7, #12
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr

08010418 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8010418:	b480      	push	{r7}
 801041a:	b083      	sub	sp, #12
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8010420:	bf00      	nop
 8010422:	370c      	adds	r7, #12
 8010424:	46bd      	mov	sp, r7
 8010426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042a:	4770      	bx	lr

0801042c <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 801042c:	b480      	push	{r7}
 801042e:	b083      	sub	sp, #12
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8010434:	bf00      	nop
 8010436:	370c      	adds	r7, #12
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr

08010440 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8010440:	b480      	push	{r7}
 8010442:	b083      	sub	sp, #12
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8010448:	bf00      	nop
 801044a:	370c      	adds	r7, #12
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr

08010454 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8010454:	b480      	push	{r7}
 8010456:	b083      	sub	sp, #12
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 801045c:	bf00      	nop
 801045e:	370c      	adds	r7, #12
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr

08010468 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8010470:	bf00      	nop
 8010472:	370c      	adds	r7, #12
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 801047c:	b480      	push	{r7}
 801047e:	b083      	sub	sp, #12
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8010484:	bf00      	nop
 8010486:	370c      	adds	r7, #12
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr

08010490 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8010490:	b480      	push	{r7}
 8010492:	b083      	sub	sp, #12
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	683a      	ldr	r2, [r7, #0]
 801049e:	649a      	str	r2, [r3, #72]	; 0x48
}
 80104a0:	bf00      	nop
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr

080104ac <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104b8:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2200      	movs	r2, #0
 80104be:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2200      	movs	r2, #0
 80104c4:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	2b08      	cmp	r3, #8
 80104d0:	d114      	bne.n	80104fc <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	2202      	movs	r2, #2
 80104d8:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80104e8:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	f042 0202 	orr.w	r2, r2, #2
 80104f8:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80104fa:	e006      	b.n	801050a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2201      	movs	r2, #1
 8010500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8010504:	68f8      	ldr	r0, [r7, #12]
 8010506:	f7ff ff73 	bl	80103f0 <HAL_QSPI_ErrorCallback>
}
 801050a:	bf00      	nop
 801050c:	3710      	adds	r7, #16
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}

08010512 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010512:	b580      	push	{r7, lr}
 8010514:	b084      	sub	sp, #16
 8010516:	af00      	add	r7, sp, #0
 8010518:	60f8      	str	r0, [r7, #12]
 801051a:	60b9      	str	r1, [r7, #8]
 801051c:	603b      	str	r3, [r7, #0]
 801051e:	4613      	mov	r3, r2
 8010520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8010522:	e01a      	b.n	801055a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010524:	69bb      	ldr	r3, [r7, #24]
 8010526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801052a:	d016      	beq.n	801055a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801052c:	f7fd f816 	bl	800d55c <HAL_GetTick>
 8010530:	4602      	mov	r2, r0
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	1ad3      	subs	r3, r2, r3
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	429a      	cmp	r2, r3
 801053a:	d302      	bcc.n	8010542 <QSPI_WaitFlagStateUntilTimeout+0x30>
 801053c:	69bb      	ldr	r3, [r7, #24]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d10b      	bne.n	801055a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	2204      	movs	r2, #4
 8010546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801054e:	f043 0201 	orr.w	r2, r3, #1
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8010556:	2301      	movs	r3, #1
 8010558:	e00e      	b.n	8010578 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	689a      	ldr	r2, [r3, #8]
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	4013      	ands	r3, r2
 8010564:	2b00      	cmp	r3, #0
 8010566:	bf14      	ite	ne
 8010568:	2301      	movne	r3, #1
 801056a:	2300      	moveq	r3, #0
 801056c:	b2db      	uxtb	r3, r3
 801056e:	461a      	mov	r2, r3
 8010570:	79fb      	ldrb	r3, [r7, #7]
 8010572:	429a      	cmp	r2, r3
 8010574:	d1d6      	bne.n	8010524 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010576:	2300      	movs	r3, #0
}
 8010578:	4618      	mov	r0, r3
 801057a:	3710      	adds	r7, #16
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8010580:	b480      	push	{r7}
 8010582:	b085      	sub	sp, #20
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010590:	2b00      	cmp	r3, #0
 8010592:	d009      	beq.n	80105a8 <QSPI_Config+0x28>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801059a:	d005      	beq.n	80105a8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	3a01      	subs	r2, #1
 80105a6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	699b      	ldr	r3, [r3, #24]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f000 80b9 	beq.w	8010724 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	6a1b      	ldr	r3, [r3, #32]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d05f      	beq.n	801067a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	68ba      	ldr	r2, [r7, #8]
 80105c0:	6892      	ldr	r2, [r2, #8]
 80105c2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	69db      	ldr	r3, [r3, #28]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d031      	beq.n	8010630 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105d4:	431a      	orrs	r2, r3
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105da:	431a      	orrs	r2, r3
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e0:	431a      	orrs	r2, r3
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	695b      	ldr	r3, [r3, #20]
 80105e6:	049b      	lsls	r3, r3, #18
 80105e8:	431a      	orrs	r2, r3
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	691b      	ldr	r3, [r3, #16]
 80105ee:	431a      	orrs	r2, r3
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	6a1b      	ldr	r3, [r3, #32]
 80105f4:	431a      	orrs	r2, r3
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	431a      	orrs	r2, r3
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	69db      	ldr	r3, [r3, #28]
 8010600:	431a      	orrs	r2, r3
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	699b      	ldr	r3, [r3, #24]
 8010606:	431a      	orrs	r2, r3
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	ea42 0103 	orr.w	r1, r2, r3
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	687a      	ldr	r2, [r7, #4]
 8010616:	430a      	orrs	r2, r1
 8010618:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010620:	f000 812e 	beq.w	8010880 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	68ba      	ldr	r2, [r7, #8]
 801062a:	6852      	ldr	r2, [r2, #4]
 801062c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 801062e:	e127      	b.n	8010880 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010638:	431a      	orrs	r2, r3
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801063e:	431a      	orrs	r2, r3
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010644:	431a      	orrs	r2, r3
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	695b      	ldr	r3, [r3, #20]
 801064a:	049b      	lsls	r3, r3, #18
 801064c:	431a      	orrs	r2, r3
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	691b      	ldr	r3, [r3, #16]
 8010652:	431a      	orrs	r2, r3
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	6a1b      	ldr	r3, [r3, #32]
 8010658:	431a      	orrs	r2, r3
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	69db      	ldr	r3, [r3, #28]
 801065e:	431a      	orrs	r2, r3
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	699b      	ldr	r3, [r3, #24]
 8010664:	431a      	orrs	r2, r3
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	ea42 0103 	orr.w	r1, r2, r3
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	430a      	orrs	r2, r1
 8010676:	615a      	str	r2, [r3, #20]
}
 8010678:	e102      	b.n	8010880 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	69db      	ldr	r3, [r3, #28]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d02e      	beq.n	80106e0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801068a:	431a      	orrs	r2, r3
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010690:	431a      	orrs	r2, r3
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010696:	431a      	orrs	r2, r3
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	695b      	ldr	r3, [r3, #20]
 801069c:	049b      	lsls	r3, r3, #18
 801069e:	431a      	orrs	r2, r3
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	6a1b      	ldr	r3, [r3, #32]
 80106a4:	431a      	orrs	r2, r3
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	431a      	orrs	r2, r3
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	69db      	ldr	r3, [r3, #28]
 80106b0:	431a      	orrs	r2, r3
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	699b      	ldr	r3, [r3, #24]
 80106b6:	431a      	orrs	r2, r3
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	ea42 0103 	orr.w	r1, r2, r3
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	430a      	orrs	r2, r1
 80106c8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80106d0:	f000 80d6 	beq.w	8010880 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68ba      	ldr	r2, [r7, #8]
 80106da:	6852      	ldr	r2, [r2, #4]
 80106dc:	619a      	str	r2, [r3, #24]
}
 80106de:	e0cf      	b.n	8010880 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106e8:	431a      	orrs	r2, r3
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ee:	431a      	orrs	r2, r3
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f4:	431a      	orrs	r2, r3
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	695b      	ldr	r3, [r3, #20]
 80106fa:	049b      	lsls	r3, r3, #18
 80106fc:	431a      	orrs	r2, r3
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	6a1b      	ldr	r3, [r3, #32]
 8010702:	431a      	orrs	r2, r3
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	69db      	ldr	r3, [r3, #28]
 8010708:	431a      	orrs	r2, r3
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	699b      	ldr	r3, [r3, #24]
 801070e:	431a      	orrs	r2, r3
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	ea42 0103 	orr.w	r1, r2, r3
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	430a      	orrs	r2, r1
 8010720:	615a      	str	r2, [r3, #20]
}
 8010722:	e0ad      	b.n	8010880 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	6a1b      	ldr	r3, [r3, #32]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d058      	beq.n	80107de <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	68ba      	ldr	r2, [r7, #8]
 8010732:	6892      	ldr	r2, [r2, #8]
 8010734:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	69db      	ldr	r3, [r3, #28]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d02d      	beq.n	801079a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010746:	431a      	orrs	r2, r3
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801074c:	431a      	orrs	r2, r3
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010752:	431a      	orrs	r2, r3
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	695b      	ldr	r3, [r3, #20]
 8010758:	049b      	lsls	r3, r3, #18
 801075a:	431a      	orrs	r2, r3
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	431a      	orrs	r2, r3
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	6a1b      	ldr	r3, [r3, #32]
 8010766:	431a      	orrs	r2, r3
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	431a      	orrs	r2, r3
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	69db      	ldr	r3, [r3, #28]
 8010772:	431a      	orrs	r2, r3
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	699b      	ldr	r3, [r3, #24]
 8010778:	ea42 0103 	orr.w	r1, r2, r3
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	687a      	ldr	r2, [r7, #4]
 8010782:	430a      	orrs	r2, r1
 8010784:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801078c:	d078      	beq.n	8010880 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	68ba      	ldr	r2, [r7, #8]
 8010794:	6852      	ldr	r2, [r2, #4]
 8010796:	619a      	str	r2, [r3, #24]
}
 8010798:	e072      	b.n	8010880 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107a2:	431a      	orrs	r2, r3
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107a8:	431a      	orrs	r2, r3
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ae:	431a      	orrs	r2, r3
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	695b      	ldr	r3, [r3, #20]
 80107b4:	049b      	lsls	r3, r3, #18
 80107b6:	431a      	orrs	r2, r3
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	691b      	ldr	r3, [r3, #16]
 80107bc:	431a      	orrs	r2, r3
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	6a1b      	ldr	r3, [r3, #32]
 80107c2:	431a      	orrs	r2, r3
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	69db      	ldr	r3, [r3, #28]
 80107c8:	431a      	orrs	r2, r3
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	699b      	ldr	r3, [r3, #24]
 80107ce:	ea42 0103 	orr.w	r1, r2, r3
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	687a      	ldr	r2, [r7, #4]
 80107d8:	430a      	orrs	r2, r1
 80107da:	615a      	str	r2, [r3, #20]
}
 80107dc:	e050      	b.n	8010880 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	69db      	ldr	r3, [r3, #28]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d02a      	beq.n	801083c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ee:	431a      	orrs	r2, r3
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107f4:	431a      	orrs	r2, r3
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107fa:	431a      	orrs	r2, r3
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	695b      	ldr	r3, [r3, #20]
 8010800:	049b      	lsls	r3, r3, #18
 8010802:	431a      	orrs	r2, r3
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	6a1b      	ldr	r3, [r3, #32]
 8010808:	431a      	orrs	r2, r3
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	431a      	orrs	r2, r3
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	69db      	ldr	r3, [r3, #28]
 8010814:	431a      	orrs	r2, r3
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	699b      	ldr	r3, [r3, #24]
 801081a:	ea42 0103 	orr.w	r1, r2, r3
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	430a      	orrs	r2, r1
 8010826:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801082e:	d027      	beq.n	8010880 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	6852      	ldr	r2, [r2, #4]
 8010838:	619a      	str	r2, [r3, #24]
}
 801083a:	e021      	b.n	8010880 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010840:	2b00      	cmp	r3, #0
 8010842:	d01d      	beq.n	8010880 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801084c:	431a      	orrs	r2, r3
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010852:	431a      	orrs	r2, r3
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010858:	431a      	orrs	r2, r3
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	695b      	ldr	r3, [r3, #20]
 801085e:	049b      	lsls	r3, r3, #18
 8010860:	431a      	orrs	r2, r3
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	6a1b      	ldr	r3, [r3, #32]
 8010866:	431a      	orrs	r2, r3
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	69db      	ldr	r3, [r3, #28]
 801086c:	431a      	orrs	r2, r3
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	699b      	ldr	r3, [r3, #24]
 8010872:	ea42 0103 	orr.w	r1, r2, r3
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	430a      	orrs	r2, r1
 801087e:	615a      	str	r2, [r3, #20]
}
 8010880:	bf00      	nop
 8010882:	3714      	adds	r7, #20
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b08c      	sub	sp, #48	; 0x30
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d102      	bne.n	80108a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801089a:	2301      	movs	r3, #1
 801089c:	f000 bc1c 	b.w	80110d8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	f003 0301 	and.w	r3, r3, #1
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	f000 8087 	beq.w	80109bc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80108ae:	4b9e      	ldr	r3, [pc, #632]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 80108b0:	691b      	ldr	r3, [r3, #16]
 80108b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80108b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80108b8:	4b9b      	ldr	r3, [pc, #620]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 80108ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108bc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80108be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c0:	2b10      	cmp	r3, #16
 80108c2:	d007      	beq.n	80108d4 <HAL_RCC_OscConfig+0x48>
 80108c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c6:	2b18      	cmp	r3, #24
 80108c8:	d110      	bne.n	80108ec <HAL_RCC_OscConfig+0x60>
 80108ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108cc:	f003 0303 	and.w	r3, r3, #3
 80108d0:	2b02      	cmp	r3, #2
 80108d2:	d10b      	bne.n	80108ec <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80108d4:	4b94      	ldr	r3, [pc, #592]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d06c      	beq.n	80109ba <HAL_RCC_OscConfig+0x12e>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d168      	bne.n	80109ba <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80108e8:	2301      	movs	r3, #1
 80108ea:	e3f5      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108f4:	d106      	bne.n	8010904 <HAL_RCC_OscConfig+0x78>
 80108f6:	4b8c      	ldr	r3, [pc, #560]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	4a8b      	ldr	r2, [pc, #556]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 80108fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010900:	6013      	str	r3, [r2, #0]
 8010902:	e02e      	b.n	8010962 <HAL_RCC_OscConfig+0xd6>
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d10c      	bne.n	8010926 <HAL_RCC_OscConfig+0x9a>
 801090c:	4b86      	ldr	r3, [pc, #536]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a85      	ldr	r2, [pc, #532]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010916:	6013      	str	r3, [r2, #0]
 8010918:	4b83      	ldr	r3, [pc, #524]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	4a82      	ldr	r2, [pc, #520]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 801091e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010922:	6013      	str	r3, [r2, #0]
 8010924:	e01d      	b.n	8010962 <HAL_RCC_OscConfig+0xd6>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801092e:	d10c      	bne.n	801094a <HAL_RCC_OscConfig+0xbe>
 8010930:	4b7d      	ldr	r3, [pc, #500]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	4a7c      	ldr	r2, [pc, #496]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801093a:	6013      	str	r3, [r2, #0]
 801093c:	4b7a      	ldr	r3, [pc, #488]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a79      	ldr	r2, [pc, #484]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010946:	6013      	str	r3, [r2, #0]
 8010948:	e00b      	b.n	8010962 <HAL_RCC_OscConfig+0xd6>
 801094a:	4b77      	ldr	r3, [pc, #476]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4a76      	ldr	r2, [pc, #472]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010954:	6013      	str	r3, [r2, #0]
 8010956:	4b74      	ldr	r3, [pc, #464]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	4a73      	ldr	r2, [pc, #460]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 801095c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010960:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d013      	beq.n	8010992 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801096a:	f7fc fdf7 	bl	800d55c <HAL_GetTick>
 801096e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010970:	e008      	b.n	8010984 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010972:	f7fc fdf3 	bl	800d55c <HAL_GetTick>
 8010976:	4602      	mov	r2, r0
 8010978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097a:	1ad3      	subs	r3, r2, r3
 801097c:	2b64      	cmp	r3, #100	; 0x64
 801097e:	d901      	bls.n	8010984 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8010980:	2303      	movs	r3, #3
 8010982:	e3a9      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010984:	4b68      	ldr	r3, [pc, #416]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801098c:	2b00      	cmp	r3, #0
 801098e:	d0f0      	beq.n	8010972 <HAL_RCC_OscConfig+0xe6>
 8010990:	e014      	b.n	80109bc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010992:	f7fc fde3 	bl	800d55c <HAL_GetTick>
 8010996:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010998:	e008      	b.n	80109ac <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801099a:	f7fc fddf 	bl	800d55c <HAL_GetTick>
 801099e:	4602      	mov	r2, r0
 80109a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	2b64      	cmp	r3, #100	; 0x64
 80109a6:	d901      	bls.n	80109ac <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80109a8:	2303      	movs	r3, #3
 80109aa:	e395      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80109ac:	4b5e      	ldr	r3, [pc, #376]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1f0      	bne.n	801099a <HAL_RCC_OscConfig+0x10e>
 80109b8:	e000      	b.n	80109bc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80109ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	f003 0302 	and.w	r3, r3, #2
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f000 80ca 	beq.w	8010b5e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80109ca:	4b57      	ldr	r3, [pc, #348]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 80109cc:	691b      	ldr	r3, [r3, #16]
 80109ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80109d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80109d4:	4b54      	ldr	r3, [pc, #336]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 80109d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109d8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80109da:	6a3b      	ldr	r3, [r7, #32]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d007      	beq.n	80109f0 <HAL_RCC_OscConfig+0x164>
 80109e0:	6a3b      	ldr	r3, [r7, #32]
 80109e2:	2b18      	cmp	r3, #24
 80109e4:	d156      	bne.n	8010a94 <HAL_RCC_OscConfig+0x208>
 80109e6:	69fb      	ldr	r3, [r7, #28]
 80109e8:	f003 0303 	and.w	r3, r3, #3
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d151      	bne.n	8010a94 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80109f0:	4b4d      	ldr	r3, [pc, #308]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f003 0304 	and.w	r3, r3, #4
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d005      	beq.n	8010a08 <HAL_RCC_OscConfig+0x17c>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d101      	bne.n	8010a08 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8010a04:	2301      	movs	r3, #1
 8010a06:	e367      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010a08:	4b47      	ldr	r3, [pc, #284]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	f023 0219 	bic.w	r2, r3, #25
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	68db      	ldr	r3, [r3, #12]
 8010a14:	4944      	ldr	r1, [pc, #272]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010a16:	4313      	orrs	r3, r2
 8010a18:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010a1a:	f7fc fd9f 	bl	800d55c <HAL_GetTick>
 8010a1e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010a20:	e008      	b.n	8010a34 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010a22:	f7fc fd9b 	bl	800d55c <HAL_GetTick>
 8010a26:	4602      	mov	r2, r0
 8010a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2a:	1ad3      	subs	r3, r2, r3
 8010a2c:	2b02      	cmp	r3, #2
 8010a2e:	d901      	bls.n	8010a34 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8010a30:	2303      	movs	r3, #3
 8010a32:	e351      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010a34:	4b3c      	ldr	r3, [pc, #240]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	f003 0304 	and.w	r3, r3, #4
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d0f0      	beq.n	8010a22 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010a40:	f7fc fd98 	bl	800d574 <HAL_GetREVID>
 8010a44:	4603      	mov	r3, r0
 8010a46:	f241 0203 	movw	r2, #4099	; 0x1003
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	d817      	bhi.n	8010a7e <HAL_RCC_OscConfig+0x1f2>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	691b      	ldr	r3, [r3, #16]
 8010a52:	2b40      	cmp	r3, #64	; 0x40
 8010a54:	d108      	bne.n	8010a68 <HAL_RCC_OscConfig+0x1dc>
 8010a56:	4b34      	ldr	r3, [pc, #208]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010a58:	685b      	ldr	r3, [r3, #4]
 8010a5a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8010a5e:	4a32      	ldr	r2, [pc, #200]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010a64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010a66:	e07a      	b.n	8010b5e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010a68:	4b2f      	ldr	r3, [pc, #188]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	691b      	ldr	r3, [r3, #16]
 8010a74:	031b      	lsls	r3, r3, #12
 8010a76:	492c      	ldr	r1, [pc, #176]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010a78:	4313      	orrs	r3, r2
 8010a7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010a7c:	e06f      	b.n	8010b5e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010a7e:	4b2a      	ldr	r3, [pc, #168]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	691b      	ldr	r3, [r3, #16]
 8010a8a:	061b      	lsls	r3, r3, #24
 8010a8c:	4926      	ldr	r1, [pc, #152]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010a8e:	4313      	orrs	r3, r2
 8010a90:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010a92:	e064      	b.n	8010b5e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d047      	beq.n	8010b2c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010a9c:	4b22      	ldr	r3, [pc, #136]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f023 0219 	bic.w	r2, r3, #25
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	491f      	ldr	r1, [pc, #124]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010aae:	f7fc fd55 	bl	800d55c <HAL_GetTick>
 8010ab2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010ab4:	e008      	b.n	8010ac8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010ab6:	f7fc fd51 	bl	800d55c <HAL_GetTick>
 8010aba:	4602      	mov	r2, r0
 8010abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abe:	1ad3      	subs	r3, r2, r3
 8010ac0:	2b02      	cmp	r3, #2
 8010ac2:	d901      	bls.n	8010ac8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8010ac4:	2303      	movs	r3, #3
 8010ac6:	e307      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010ac8:	4b17      	ldr	r3, [pc, #92]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f003 0304 	and.w	r3, r3, #4
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d0f0      	beq.n	8010ab6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010ad4:	f7fc fd4e 	bl	800d574 <HAL_GetREVID>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	f241 0203 	movw	r2, #4099	; 0x1003
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d817      	bhi.n	8010b12 <HAL_RCC_OscConfig+0x286>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	691b      	ldr	r3, [r3, #16]
 8010ae6:	2b40      	cmp	r3, #64	; 0x40
 8010ae8:	d108      	bne.n	8010afc <HAL_RCC_OscConfig+0x270>
 8010aea:	4b0f      	ldr	r3, [pc, #60]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8010af2:	4a0d      	ldr	r2, [pc, #52]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010af8:	6053      	str	r3, [r2, #4]
 8010afa:	e030      	b.n	8010b5e <HAL_RCC_OscConfig+0x2d2>
 8010afc:	4b0a      	ldr	r3, [pc, #40]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	691b      	ldr	r3, [r3, #16]
 8010b08:	031b      	lsls	r3, r3, #12
 8010b0a:	4907      	ldr	r1, [pc, #28]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010b0c:	4313      	orrs	r3, r2
 8010b0e:	604b      	str	r3, [r1, #4]
 8010b10:	e025      	b.n	8010b5e <HAL_RCC_OscConfig+0x2d2>
 8010b12:	4b05      	ldr	r3, [pc, #20]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	691b      	ldr	r3, [r3, #16]
 8010b1e:	061b      	lsls	r3, r3, #24
 8010b20:	4901      	ldr	r1, [pc, #4]	; (8010b28 <HAL_RCC_OscConfig+0x29c>)
 8010b22:	4313      	orrs	r3, r2
 8010b24:	604b      	str	r3, [r1, #4]
 8010b26:	e01a      	b.n	8010b5e <HAL_RCC_OscConfig+0x2d2>
 8010b28:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010b2c:	4b9e      	ldr	r3, [pc, #632]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a9d      	ldr	r2, [pc, #628]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010b32:	f023 0301 	bic.w	r3, r3, #1
 8010b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010b38:	f7fc fd10 	bl	800d55c <HAL_GetTick>
 8010b3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010b3e:	e008      	b.n	8010b52 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010b40:	f7fc fd0c 	bl	800d55c <HAL_GetTick>
 8010b44:	4602      	mov	r2, r0
 8010b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b48:	1ad3      	subs	r3, r2, r3
 8010b4a:	2b02      	cmp	r3, #2
 8010b4c:	d901      	bls.n	8010b52 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8010b4e:	2303      	movs	r3, #3
 8010b50:	e2c2      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010b52:	4b95      	ldr	r3, [pc, #596]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f003 0304 	and.w	r3, r3, #4
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d1f0      	bne.n	8010b40 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f003 0310 	and.w	r3, r3, #16
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	f000 80a9 	beq.w	8010cbe <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010b6c:	4b8e      	ldr	r3, [pc, #568]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010b6e:	691b      	ldr	r3, [r3, #16]
 8010b70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b74:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010b76:	4b8c      	ldr	r3, [pc, #560]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b7a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010b7c:	69bb      	ldr	r3, [r7, #24]
 8010b7e:	2b08      	cmp	r3, #8
 8010b80:	d007      	beq.n	8010b92 <HAL_RCC_OscConfig+0x306>
 8010b82:	69bb      	ldr	r3, [r7, #24]
 8010b84:	2b18      	cmp	r3, #24
 8010b86:	d13a      	bne.n	8010bfe <HAL_RCC_OscConfig+0x372>
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	f003 0303 	and.w	r3, r3, #3
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d135      	bne.n	8010bfe <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010b92:	4b85      	ldr	r3, [pc, #532]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d005      	beq.n	8010baa <HAL_RCC_OscConfig+0x31e>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	69db      	ldr	r3, [r3, #28]
 8010ba2:	2b80      	cmp	r3, #128	; 0x80
 8010ba4:	d001      	beq.n	8010baa <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	e296      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010baa:	f7fc fce3 	bl	800d574 <HAL_GetREVID>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d817      	bhi.n	8010be8 <HAL_RCC_OscConfig+0x35c>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6a1b      	ldr	r3, [r3, #32]
 8010bbc:	2b20      	cmp	r3, #32
 8010bbe:	d108      	bne.n	8010bd2 <HAL_RCC_OscConfig+0x346>
 8010bc0:	4b79      	ldr	r3, [pc, #484]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010bc2:	685b      	ldr	r3, [r3, #4]
 8010bc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8010bc8:	4a77      	ldr	r2, [pc, #476]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010bca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010bce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010bd0:	e075      	b.n	8010cbe <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010bd2:	4b75      	ldr	r3, [pc, #468]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010bd4:	685b      	ldr	r3, [r3, #4]
 8010bd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6a1b      	ldr	r3, [r3, #32]
 8010bde:	069b      	lsls	r3, r3, #26
 8010be0:	4971      	ldr	r1, [pc, #452]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010be2:	4313      	orrs	r3, r2
 8010be4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010be6:	e06a      	b.n	8010cbe <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010be8:	4b6f      	ldr	r3, [pc, #444]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6a1b      	ldr	r3, [r3, #32]
 8010bf4:	061b      	lsls	r3, r3, #24
 8010bf6:	496c      	ldr	r1, [pc, #432]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010bfc:	e05f      	b.n	8010cbe <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	69db      	ldr	r3, [r3, #28]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d042      	beq.n	8010c8c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8010c06:	4b68      	ldr	r3, [pc, #416]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	4a67      	ldr	r2, [pc, #412]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c12:	f7fc fca3 	bl	800d55c <HAL_GetTick>
 8010c16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010c18:	e008      	b.n	8010c2c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8010c1a:	f7fc fc9f 	bl	800d55c <HAL_GetTick>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	1ad3      	subs	r3, r2, r3
 8010c24:	2b02      	cmp	r3, #2
 8010c26:	d901      	bls.n	8010c2c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8010c28:	2303      	movs	r3, #3
 8010c2a:	e255      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010c2c:	4b5e      	ldr	r3, [pc, #376]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d0f0      	beq.n	8010c1a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010c38:	f7fc fc9c 	bl	800d574 <HAL_GetREVID>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d817      	bhi.n	8010c76 <HAL_RCC_OscConfig+0x3ea>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6a1b      	ldr	r3, [r3, #32]
 8010c4a:	2b20      	cmp	r3, #32
 8010c4c:	d108      	bne.n	8010c60 <HAL_RCC_OscConfig+0x3d4>
 8010c4e:	4b56      	ldr	r3, [pc, #344]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8010c56:	4a54      	ldr	r2, [pc, #336]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010c58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010c5c:	6053      	str	r3, [r2, #4]
 8010c5e:	e02e      	b.n	8010cbe <HAL_RCC_OscConfig+0x432>
 8010c60:	4b51      	ldr	r3, [pc, #324]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6a1b      	ldr	r3, [r3, #32]
 8010c6c:	069b      	lsls	r3, r3, #26
 8010c6e:	494e      	ldr	r1, [pc, #312]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010c70:	4313      	orrs	r3, r2
 8010c72:	604b      	str	r3, [r1, #4]
 8010c74:	e023      	b.n	8010cbe <HAL_RCC_OscConfig+0x432>
 8010c76:	4b4c      	ldr	r3, [pc, #304]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6a1b      	ldr	r3, [r3, #32]
 8010c82:	061b      	lsls	r3, r3, #24
 8010c84:	4948      	ldr	r1, [pc, #288]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010c86:	4313      	orrs	r3, r2
 8010c88:	60cb      	str	r3, [r1, #12]
 8010c8a:	e018      	b.n	8010cbe <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010c8c:	4b46      	ldr	r3, [pc, #280]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a45      	ldr	r2, [pc, #276]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c98:	f7fc fc60 	bl	800d55c <HAL_GetTick>
 8010c9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010c9e:	e008      	b.n	8010cb2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8010ca0:	f7fc fc5c 	bl	800d55c <HAL_GetTick>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca8:	1ad3      	subs	r3, r2, r3
 8010caa:	2b02      	cmp	r3, #2
 8010cac:	d901      	bls.n	8010cb2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8010cae:	2303      	movs	r3, #3
 8010cb0:	e212      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010cb2:	4b3d      	ldr	r3, [pc, #244]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1f0      	bne.n	8010ca0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f003 0308 	and.w	r3, r3, #8
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d036      	beq.n	8010d38 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	695b      	ldr	r3, [r3, #20]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d019      	beq.n	8010d06 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010cd2:	4b35      	ldr	r3, [pc, #212]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cd6:	4a34      	ldr	r2, [pc, #208]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010cd8:	f043 0301 	orr.w	r3, r3, #1
 8010cdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010cde:	f7fc fc3d 	bl	800d55c <HAL_GetTick>
 8010ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010ce4:	e008      	b.n	8010cf8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010ce6:	f7fc fc39 	bl	800d55c <HAL_GetTick>
 8010cea:	4602      	mov	r2, r0
 8010cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cee:	1ad3      	subs	r3, r2, r3
 8010cf0:	2b02      	cmp	r3, #2
 8010cf2:	d901      	bls.n	8010cf8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8010cf4:	2303      	movs	r3, #3
 8010cf6:	e1ef      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010cf8:	4b2b      	ldr	r3, [pc, #172]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cfc:	f003 0302 	and.w	r3, r3, #2
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d0f0      	beq.n	8010ce6 <HAL_RCC_OscConfig+0x45a>
 8010d04:	e018      	b.n	8010d38 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010d06:	4b28      	ldr	r3, [pc, #160]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d0a:	4a27      	ldr	r2, [pc, #156]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010d0c:	f023 0301 	bic.w	r3, r3, #1
 8010d10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010d12:	f7fc fc23 	bl	800d55c <HAL_GetTick>
 8010d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010d18:	e008      	b.n	8010d2c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010d1a:	f7fc fc1f 	bl	800d55c <HAL_GetTick>
 8010d1e:	4602      	mov	r2, r0
 8010d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	2b02      	cmp	r3, #2
 8010d26:	d901      	bls.n	8010d2c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8010d28:	2303      	movs	r3, #3
 8010d2a:	e1d5      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010d2c:	4b1e      	ldr	r3, [pc, #120]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d30:	f003 0302 	and.w	r3, r3, #2
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d1f0      	bne.n	8010d1a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f003 0320 	and.w	r3, r3, #32
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d039      	beq.n	8010db8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	699b      	ldr	r3, [r3, #24]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d019      	beq.n	8010d80 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010d4c:	4b16      	ldr	r3, [pc, #88]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4a15      	ldr	r2, [pc, #84]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010d52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010d56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010d58:	f7fc fc00 	bl	800d55c <HAL_GetTick>
 8010d5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010d5e:	e008      	b.n	8010d72 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010d60:	f7fc fbfc 	bl	800d55c <HAL_GetTick>
 8010d64:	4602      	mov	r2, r0
 8010d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d68:	1ad3      	subs	r3, r2, r3
 8010d6a:	2b02      	cmp	r3, #2
 8010d6c:	d901      	bls.n	8010d72 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8010d6e:	2303      	movs	r3, #3
 8010d70:	e1b2      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010d72:	4b0d      	ldr	r3, [pc, #52]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d0f0      	beq.n	8010d60 <HAL_RCC_OscConfig+0x4d4>
 8010d7e:	e01b      	b.n	8010db8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010d80:	4b09      	ldr	r3, [pc, #36]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	4a08      	ldr	r2, [pc, #32]	; (8010da8 <HAL_RCC_OscConfig+0x51c>)
 8010d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010d8c:	f7fc fbe6 	bl	800d55c <HAL_GetTick>
 8010d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010d92:	e00b      	b.n	8010dac <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010d94:	f7fc fbe2 	bl	800d55c <HAL_GetTick>
 8010d98:	4602      	mov	r2, r0
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9c:	1ad3      	subs	r3, r2, r3
 8010d9e:	2b02      	cmp	r3, #2
 8010da0:	d904      	bls.n	8010dac <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8010da2:	2303      	movs	r3, #3
 8010da4:	e198      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
 8010da6:	bf00      	nop
 8010da8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010dac:	4ba3      	ldr	r3, [pc, #652]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d1ed      	bne.n	8010d94 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f003 0304 	and.w	r3, r3, #4
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	f000 8081 	beq.w	8010ec8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010dc6:	4b9e      	ldr	r3, [pc, #632]	; (8011040 <HAL_RCC_OscConfig+0x7b4>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	4a9d      	ldr	r2, [pc, #628]	; (8011040 <HAL_RCC_OscConfig+0x7b4>)
 8010dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010dd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010dd2:	f7fc fbc3 	bl	800d55c <HAL_GetTick>
 8010dd6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010dd8:	e008      	b.n	8010dec <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8010dda:	f7fc fbbf 	bl	800d55c <HAL_GetTick>
 8010dde:	4602      	mov	r2, r0
 8010de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de2:	1ad3      	subs	r3, r2, r3
 8010de4:	2b64      	cmp	r3, #100	; 0x64
 8010de6:	d901      	bls.n	8010dec <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8010de8:	2303      	movs	r3, #3
 8010dea:	e175      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010dec:	4b94      	ldr	r3, [pc, #592]	; (8011040 <HAL_RCC_OscConfig+0x7b4>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d0f0      	beq.n	8010dda <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	689b      	ldr	r3, [r3, #8]
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d106      	bne.n	8010e0e <HAL_RCC_OscConfig+0x582>
 8010e00:	4b8e      	ldr	r3, [pc, #568]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e04:	4a8d      	ldr	r2, [pc, #564]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e06:	f043 0301 	orr.w	r3, r3, #1
 8010e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8010e0c:	e02d      	b.n	8010e6a <HAL_RCC_OscConfig+0x5de>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d10c      	bne.n	8010e30 <HAL_RCC_OscConfig+0x5a4>
 8010e16:	4b89      	ldr	r3, [pc, #548]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e1a:	4a88      	ldr	r2, [pc, #544]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e1c:	f023 0301 	bic.w	r3, r3, #1
 8010e20:	6713      	str	r3, [r2, #112]	; 0x70
 8010e22:	4b86      	ldr	r3, [pc, #536]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e26:	4a85      	ldr	r2, [pc, #532]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e28:	f023 0304 	bic.w	r3, r3, #4
 8010e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8010e2e:	e01c      	b.n	8010e6a <HAL_RCC_OscConfig+0x5de>
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	2b05      	cmp	r3, #5
 8010e36:	d10c      	bne.n	8010e52 <HAL_RCC_OscConfig+0x5c6>
 8010e38:	4b80      	ldr	r3, [pc, #512]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e3c:	4a7f      	ldr	r2, [pc, #508]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e3e:	f043 0304 	orr.w	r3, r3, #4
 8010e42:	6713      	str	r3, [r2, #112]	; 0x70
 8010e44:	4b7d      	ldr	r3, [pc, #500]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e48:	4a7c      	ldr	r2, [pc, #496]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e4a:	f043 0301 	orr.w	r3, r3, #1
 8010e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8010e50:	e00b      	b.n	8010e6a <HAL_RCC_OscConfig+0x5de>
 8010e52:	4b7a      	ldr	r3, [pc, #488]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e56:	4a79      	ldr	r2, [pc, #484]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e58:	f023 0301 	bic.w	r3, r3, #1
 8010e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8010e5e:	4b77      	ldr	r3, [pc, #476]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e62:	4a76      	ldr	r2, [pc, #472]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e64:	f023 0304 	bic.w	r3, r3, #4
 8010e68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	689b      	ldr	r3, [r3, #8]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d015      	beq.n	8010e9e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010e72:	f7fc fb73 	bl	800d55c <HAL_GetTick>
 8010e76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010e78:	e00a      	b.n	8010e90 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010e7a:	f7fc fb6f 	bl	800d55c <HAL_GetTick>
 8010e7e:	4602      	mov	r2, r0
 8010e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e82:	1ad3      	subs	r3, r2, r3
 8010e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	d901      	bls.n	8010e90 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8010e8c:	2303      	movs	r3, #3
 8010e8e:	e123      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010e90:	4b6a      	ldr	r3, [pc, #424]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e94:	f003 0302 	and.w	r3, r3, #2
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d0ee      	beq.n	8010e7a <HAL_RCC_OscConfig+0x5ee>
 8010e9c:	e014      	b.n	8010ec8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010e9e:	f7fc fb5d 	bl	800d55c <HAL_GetTick>
 8010ea2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010ea4:	e00a      	b.n	8010ebc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010ea6:	f7fc fb59 	bl	800d55c <HAL_GetTick>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	d901      	bls.n	8010ebc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8010eb8:	2303      	movs	r3, #3
 8010eba:	e10d      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010ebc:	4b5f      	ldr	r3, [pc, #380]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ec0:	f003 0302 	and.w	r3, r3, #2
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d1ee      	bne.n	8010ea6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f000 8102 	beq.w	80110d6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8010ed2:	4b5a      	ldr	r3, [pc, #360]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010ed4:	691b      	ldr	r3, [r3, #16]
 8010ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010eda:	2b18      	cmp	r3, #24
 8010edc:	f000 80bd 	beq.w	801105a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee4:	2b02      	cmp	r3, #2
 8010ee6:	f040 8095 	bne.w	8011014 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010eea:	4b54      	ldr	r3, [pc, #336]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	4a53      	ldr	r2, [pc, #332]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010ef0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ef6:	f7fc fb31 	bl	800d55c <HAL_GetTick>
 8010efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010efc:	e008      	b.n	8010f10 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010efe:	f7fc fb2d 	bl	800d55c <HAL_GetTick>
 8010f02:	4602      	mov	r2, r0
 8010f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f06:	1ad3      	subs	r3, r2, r3
 8010f08:	2b02      	cmp	r3, #2
 8010f0a:	d901      	bls.n	8010f10 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8010f0c:	2303      	movs	r3, #3
 8010f0e:	e0e3      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010f10:	4b4a      	ldr	r3, [pc, #296]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d1f0      	bne.n	8010efe <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010f1c:	4b47      	ldr	r3, [pc, #284]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f20:	4b48      	ldr	r3, [pc, #288]	; (8011044 <HAL_RCC_OscConfig+0x7b8>)
 8010f22:	4013      	ands	r3, r2
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8010f28:	687a      	ldr	r2, [r7, #4]
 8010f2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010f2c:	0112      	lsls	r2, r2, #4
 8010f2e:	430a      	orrs	r2, r1
 8010f30:	4942      	ldr	r1, [pc, #264]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010f32:	4313      	orrs	r3, r2
 8010f34:	628b      	str	r3, [r1, #40]	; 0x28
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f3a:	3b01      	subs	r3, #1
 8010f3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f44:	3b01      	subs	r3, #1
 8010f46:	025b      	lsls	r3, r3, #9
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	431a      	orrs	r2, r3
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f50:	3b01      	subs	r3, #1
 8010f52:	041b      	lsls	r3, r3, #16
 8010f54:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010f58:	431a      	orrs	r2, r3
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f5e:	3b01      	subs	r3, #1
 8010f60:	061b      	lsls	r3, r3, #24
 8010f62:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010f66:	4935      	ldr	r1, [pc, #212]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010f68:	4313      	orrs	r3, r2
 8010f6a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8010f6c:	4b33      	ldr	r3, [pc, #204]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f70:	4a32      	ldr	r2, [pc, #200]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010f72:	f023 0301 	bic.w	r3, r3, #1
 8010f76:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010f78:	4b30      	ldr	r3, [pc, #192]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f7c:	4b32      	ldr	r3, [pc, #200]	; (8011048 <HAL_RCC_OscConfig+0x7bc>)
 8010f7e:	4013      	ands	r3, r2
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010f84:	00d2      	lsls	r2, r2, #3
 8010f86:	492d      	ldr	r1, [pc, #180]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010f8c:	4b2b      	ldr	r3, [pc, #172]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f90:	f023 020c 	bic.w	r2, r3, #12
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f98:	4928      	ldr	r1, [pc, #160]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010f9e:	4b27      	ldr	r3, [pc, #156]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fa2:	f023 0202 	bic.w	r2, r3, #2
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010faa:	4924      	ldr	r1, [pc, #144]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fac:	4313      	orrs	r3, r2
 8010fae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8010fb0:	4b22      	ldr	r3, [pc, #136]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fb4:	4a21      	ldr	r2, [pc, #132]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010fba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010fbc:	4b1f      	ldr	r3, [pc, #124]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc0:	4a1e      	ldr	r2, [pc, #120]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010fc8:	4b1c      	ldr	r3, [pc, #112]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fcc:	4a1b      	ldr	r2, [pc, #108]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8010fd4:	4b19      	ldr	r3, [pc, #100]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fd8:	4a18      	ldr	r2, [pc, #96]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fda:	f043 0301 	orr.w	r3, r3, #1
 8010fde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010fe0:	4b16      	ldr	r3, [pc, #88]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4a15      	ldr	r2, [pc, #84]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8010fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fec:	f7fc fab6 	bl	800d55c <HAL_GetTick>
 8010ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010ff2:	e008      	b.n	8011006 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010ff4:	f7fc fab2 	bl	800d55c <HAL_GetTick>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffc:	1ad3      	subs	r3, r2, r3
 8010ffe:	2b02      	cmp	r3, #2
 8011000:	d901      	bls.n	8011006 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8011002:	2303      	movs	r3, #3
 8011004:	e068      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011006:	4b0d      	ldr	r3, [pc, #52]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801100e:	2b00      	cmp	r3, #0
 8011010:	d0f0      	beq.n	8010ff4 <HAL_RCC_OscConfig+0x768>
 8011012:	e060      	b.n	80110d6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011014:	4b09      	ldr	r3, [pc, #36]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4a08      	ldr	r2, [pc, #32]	; (801103c <HAL_RCC_OscConfig+0x7b0>)
 801101a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801101e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011020:	f7fc fa9c 	bl	800d55c <HAL_GetTick>
 8011024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011026:	e011      	b.n	801104c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011028:	f7fc fa98 	bl	800d55c <HAL_GetTick>
 801102c:	4602      	mov	r2, r0
 801102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011030:	1ad3      	subs	r3, r2, r3
 8011032:	2b02      	cmp	r3, #2
 8011034:	d90a      	bls.n	801104c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8011036:	2303      	movs	r3, #3
 8011038:	e04e      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
 801103a:	bf00      	nop
 801103c:	58024400 	.word	0x58024400
 8011040:	58024800 	.word	0x58024800
 8011044:	fffffc0c 	.word	0xfffffc0c
 8011048:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801104c:	4b24      	ldr	r3, [pc, #144]	; (80110e0 <HAL_RCC_OscConfig+0x854>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011054:	2b00      	cmp	r3, #0
 8011056:	d1e7      	bne.n	8011028 <HAL_RCC_OscConfig+0x79c>
 8011058:	e03d      	b.n	80110d6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801105a:	4b21      	ldr	r3, [pc, #132]	; (80110e0 <HAL_RCC_OscConfig+0x854>)
 801105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801105e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8011060:	4b1f      	ldr	r3, [pc, #124]	; (80110e0 <HAL_RCC_OscConfig+0x854>)
 8011062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011064:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801106a:	2b01      	cmp	r3, #1
 801106c:	d031      	beq.n	80110d2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	f003 0203 	and.w	r2, r3, #3
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011078:	429a      	cmp	r2, r3
 801107a:	d12a      	bne.n	80110d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	091b      	lsrs	r3, r3, #4
 8011080:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011088:	429a      	cmp	r2, r3
 801108a:	d122      	bne.n	80110d2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011096:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011098:	429a      	cmp	r2, r3
 801109a:	d11a      	bne.n	80110d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	0a5b      	lsrs	r3, r3, #9
 80110a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110a8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d111      	bne.n	80110d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	0c1b      	lsrs	r3, r3, #16
 80110b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80110bc:	429a      	cmp	r2, r3
 80110be:	d108      	bne.n	80110d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	0e1b      	lsrs	r3, r3, #24
 80110c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d001      	beq.n	80110d6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80110d2:	2301      	movs	r3, #1
 80110d4:	e000      	b.n	80110d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80110d6:	2300      	movs	r3, #0
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3730      	adds	r7, #48	; 0x30
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	58024400 	.word	0x58024400

080110e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b086      	sub	sp, #24
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d101      	bne.n	80110f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80110f4:	2301      	movs	r3, #1
 80110f6:	e19c      	b.n	8011432 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80110f8:	4b8a      	ldr	r3, [pc, #552]	; (8011324 <HAL_RCC_ClockConfig+0x240>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	f003 030f 	and.w	r3, r3, #15
 8011100:	683a      	ldr	r2, [r7, #0]
 8011102:	429a      	cmp	r2, r3
 8011104:	d910      	bls.n	8011128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011106:	4b87      	ldr	r3, [pc, #540]	; (8011324 <HAL_RCC_ClockConfig+0x240>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	f023 020f 	bic.w	r2, r3, #15
 801110e:	4985      	ldr	r1, [pc, #532]	; (8011324 <HAL_RCC_ClockConfig+0x240>)
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	4313      	orrs	r3, r2
 8011114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011116:	4b83      	ldr	r3, [pc, #524]	; (8011324 <HAL_RCC_ClockConfig+0x240>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f003 030f 	and.w	r3, r3, #15
 801111e:	683a      	ldr	r2, [r7, #0]
 8011120:	429a      	cmp	r2, r3
 8011122:	d001      	beq.n	8011128 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011124:	2301      	movs	r3, #1
 8011126:	e184      	b.n	8011432 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f003 0304 	and.w	r3, r3, #4
 8011130:	2b00      	cmp	r3, #0
 8011132:	d010      	beq.n	8011156 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	691a      	ldr	r2, [r3, #16]
 8011138:	4b7b      	ldr	r3, [pc, #492]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 801113a:	699b      	ldr	r3, [r3, #24]
 801113c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011140:	429a      	cmp	r2, r3
 8011142:	d908      	bls.n	8011156 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011144:	4b78      	ldr	r3, [pc, #480]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011146:	699b      	ldr	r3, [r3, #24]
 8011148:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	691b      	ldr	r3, [r3, #16]
 8011150:	4975      	ldr	r1, [pc, #468]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011152:	4313      	orrs	r3, r2
 8011154:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	f003 0308 	and.w	r3, r3, #8
 801115e:	2b00      	cmp	r3, #0
 8011160:	d010      	beq.n	8011184 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	695a      	ldr	r2, [r3, #20]
 8011166:	4b70      	ldr	r3, [pc, #448]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011168:	69db      	ldr	r3, [r3, #28]
 801116a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801116e:	429a      	cmp	r2, r3
 8011170:	d908      	bls.n	8011184 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011172:	4b6d      	ldr	r3, [pc, #436]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011174:	69db      	ldr	r3, [r3, #28]
 8011176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	695b      	ldr	r3, [r3, #20]
 801117e:	496a      	ldr	r1, [pc, #424]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011180:	4313      	orrs	r3, r2
 8011182:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	f003 0310 	and.w	r3, r3, #16
 801118c:	2b00      	cmp	r3, #0
 801118e:	d010      	beq.n	80111b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	699a      	ldr	r2, [r3, #24]
 8011194:	4b64      	ldr	r3, [pc, #400]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011196:	69db      	ldr	r3, [r3, #28]
 8011198:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801119c:	429a      	cmp	r2, r3
 801119e:	d908      	bls.n	80111b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80111a0:	4b61      	ldr	r3, [pc, #388]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 80111a2:	69db      	ldr	r3, [r3, #28]
 80111a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	699b      	ldr	r3, [r3, #24]
 80111ac:	495e      	ldr	r1, [pc, #376]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 80111ae:	4313      	orrs	r3, r2
 80111b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f003 0320 	and.w	r3, r3, #32
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d010      	beq.n	80111e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	69da      	ldr	r2, [r3, #28]
 80111c2:	4b59      	ldr	r3, [pc, #356]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 80111c4:	6a1b      	ldr	r3, [r3, #32]
 80111c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d908      	bls.n	80111e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80111ce:	4b56      	ldr	r3, [pc, #344]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 80111d0:	6a1b      	ldr	r3, [r3, #32]
 80111d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	69db      	ldr	r3, [r3, #28]
 80111da:	4953      	ldr	r1, [pc, #332]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 80111dc:	4313      	orrs	r3, r2
 80111de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	f003 0302 	and.w	r3, r3, #2
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d010      	beq.n	801120e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	68da      	ldr	r2, [r3, #12]
 80111f0:	4b4d      	ldr	r3, [pc, #308]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 80111f2:	699b      	ldr	r3, [r3, #24]
 80111f4:	f003 030f 	and.w	r3, r3, #15
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d908      	bls.n	801120e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80111fc:	4b4a      	ldr	r3, [pc, #296]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 80111fe:	699b      	ldr	r3, [r3, #24]
 8011200:	f023 020f 	bic.w	r2, r3, #15
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	4947      	ldr	r1, [pc, #284]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 801120a:	4313      	orrs	r3, r2
 801120c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	f003 0301 	and.w	r3, r3, #1
 8011216:	2b00      	cmp	r3, #0
 8011218:	d055      	beq.n	80112c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801121a:	4b43      	ldr	r3, [pc, #268]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 801121c:	699b      	ldr	r3, [r3, #24]
 801121e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	689b      	ldr	r3, [r3, #8]
 8011226:	4940      	ldr	r1, [pc, #256]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011228:	4313      	orrs	r3, r2
 801122a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	2b02      	cmp	r3, #2
 8011232:	d107      	bne.n	8011244 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011234:	4b3c      	ldr	r3, [pc, #240]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801123c:	2b00      	cmp	r3, #0
 801123e:	d121      	bne.n	8011284 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8011240:	2301      	movs	r3, #1
 8011242:	e0f6      	b.n	8011432 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	2b03      	cmp	r3, #3
 801124a:	d107      	bne.n	801125c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801124c:	4b36      	ldr	r3, [pc, #216]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011254:	2b00      	cmp	r3, #0
 8011256:	d115      	bne.n	8011284 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8011258:	2301      	movs	r3, #1
 801125a:	e0ea      	b.n	8011432 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	2b01      	cmp	r3, #1
 8011262:	d107      	bne.n	8011274 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011264:	4b30      	ldr	r3, [pc, #192]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801126c:	2b00      	cmp	r3, #0
 801126e:	d109      	bne.n	8011284 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8011270:	2301      	movs	r3, #1
 8011272:	e0de      	b.n	8011432 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011274:	4b2c      	ldr	r3, [pc, #176]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f003 0304 	and.w	r3, r3, #4
 801127c:	2b00      	cmp	r3, #0
 801127e:	d101      	bne.n	8011284 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8011280:	2301      	movs	r3, #1
 8011282:	e0d6      	b.n	8011432 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011284:	4b28      	ldr	r3, [pc, #160]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011286:	691b      	ldr	r3, [r3, #16]
 8011288:	f023 0207 	bic.w	r2, r3, #7
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	4925      	ldr	r1, [pc, #148]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 8011292:	4313      	orrs	r3, r2
 8011294:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011296:	f7fc f961 	bl	800d55c <HAL_GetTick>
 801129a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801129c:	e00a      	b.n	80112b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801129e:	f7fc f95d 	bl	800d55c <HAL_GetTick>
 80112a2:	4602      	mov	r2, r0
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80112ac:	4293      	cmp	r3, r2
 80112ae:	d901      	bls.n	80112b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80112b0:	2303      	movs	r3, #3
 80112b2:	e0be      	b.n	8011432 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80112b4:	4b1c      	ldr	r3, [pc, #112]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 80112b6:	691b      	ldr	r3, [r3, #16]
 80112b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	685b      	ldr	r3, [r3, #4]
 80112c0:	00db      	lsls	r3, r3, #3
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d1eb      	bne.n	801129e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f003 0302 	and.w	r3, r3, #2
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d010      	beq.n	80112f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	68da      	ldr	r2, [r3, #12]
 80112d6:	4b14      	ldr	r3, [pc, #80]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 80112d8:	699b      	ldr	r3, [r3, #24]
 80112da:	f003 030f 	and.w	r3, r3, #15
 80112de:	429a      	cmp	r2, r3
 80112e0:	d208      	bcs.n	80112f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80112e2:	4b11      	ldr	r3, [pc, #68]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 80112e4:	699b      	ldr	r3, [r3, #24]
 80112e6:	f023 020f 	bic.w	r2, r3, #15
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	490e      	ldr	r1, [pc, #56]	; (8011328 <HAL_RCC_ClockConfig+0x244>)
 80112f0:	4313      	orrs	r3, r2
 80112f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80112f4:	4b0b      	ldr	r3, [pc, #44]	; (8011324 <HAL_RCC_ClockConfig+0x240>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f003 030f 	and.w	r3, r3, #15
 80112fc:	683a      	ldr	r2, [r7, #0]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d214      	bcs.n	801132c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011302:	4b08      	ldr	r3, [pc, #32]	; (8011324 <HAL_RCC_ClockConfig+0x240>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f023 020f 	bic.w	r2, r3, #15
 801130a:	4906      	ldr	r1, [pc, #24]	; (8011324 <HAL_RCC_ClockConfig+0x240>)
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	4313      	orrs	r3, r2
 8011310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011312:	4b04      	ldr	r3, [pc, #16]	; (8011324 <HAL_RCC_ClockConfig+0x240>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f003 030f 	and.w	r3, r3, #15
 801131a:	683a      	ldr	r2, [r7, #0]
 801131c:	429a      	cmp	r2, r3
 801131e:	d005      	beq.n	801132c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011320:	2301      	movs	r3, #1
 8011322:	e086      	b.n	8011432 <HAL_RCC_ClockConfig+0x34e>
 8011324:	52002000 	.word	0x52002000
 8011328:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f003 0304 	and.w	r3, r3, #4
 8011334:	2b00      	cmp	r3, #0
 8011336:	d010      	beq.n	801135a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	691a      	ldr	r2, [r3, #16]
 801133c:	4b3f      	ldr	r3, [pc, #252]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 801133e:	699b      	ldr	r3, [r3, #24]
 8011340:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011344:	429a      	cmp	r2, r3
 8011346:	d208      	bcs.n	801135a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011348:	4b3c      	ldr	r3, [pc, #240]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 801134a:	699b      	ldr	r3, [r3, #24]
 801134c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	691b      	ldr	r3, [r3, #16]
 8011354:	4939      	ldr	r1, [pc, #228]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 8011356:	4313      	orrs	r3, r2
 8011358:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f003 0308 	and.w	r3, r3, #8
 8011362:	2b00      	cmp	r3, #0
 8011364:	d010      	beq.n	8011388 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	695a      	ldr	r2, [r3, #20]
 801136a:	4b34      	ldr	r3, [pc, #208]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 801136c:	69db      	ldr	r3, [r3, #28]
 801136e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011372:	429a      	cmp	r2, r3
 8011374:	d208      	bcs.n	8011388 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011376:	4b31      	ldr	r3, [pc, #196]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 8011378:	69db      	ldr	r3, [r3, #28]
 801137a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	695b      	ldr	r3, [r3, #20]
 8011382:	492e      	ldr	r1, [pc, #184]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 8011384:	4313      	orrs	r3, r2
 8011386:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f003 0310 	and.w	r3, r3, #16
 8011390:	2b00      	cmp	r3, #0
 8011392:	d010      	beq.n	80113b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	699a      	ldr	r2, [r3, #24]
 8011398:	4b28      	ldr	r3, [pc, #160]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 801139a:	69db      	ldr	r3, [r3, #28]
 801139c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d208      	bcs.n	80113b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80113a4:	4b25      	ldr	r3, [pc, #148]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 80113a6:	69db      	ldr	r3, [r3, #28]
 80113a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	699b      	ldr	r3, [r3, #24]
 80113b0:	4922      	ldr	r1, [pc, #136]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 80113b2:	4313      	orrs	r3, r2
 80113b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f003 0320 	and.w	r3, r3, #32
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d010      	beq.n	80113e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	69da      	ldr	r2, [r3, #28]
 80113c6:	4b1d      	ldr	r3, [pc, #116]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 80113c8:	6a1b      	ldr	r3, [r3, #32]
 80113ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d208      	bcs.n	80113e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80113d2:	4b1a      	ldr	r3, [pc, #104]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 80113d4:	6a1b      	ldr	r3, [r3, #32]
 80113d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	69db      	ldr	r3, [r3, #28]
 80113de:	4917      	ldr	r1, [pc, #92]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 80113e0:	4313      	orrs	r3, r2
 80113e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80113e4:	f000 f89e 	bl	8011524 <HAL_RCC_GetSysClockFreq>
 80113e8:	4602      	mov	r2, r0
 80113ea:	4b14      	ldr	r3, [pc, #80]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 80113ec:	699b      	ldr	r3, [r3, #24]
 80113ee:	0a1b      	lsrs	r3, r3, #8
 80113f0:	f003 030f 	and.w	r3, r3, #15
 80113f4:	4912      	ldr	r1, [pc, #72]	; (8011440 <HAL_RCC_ClockConfig+0x35c>)
 80113f6:	5ccb      	ldrb	r3, [r1, r3]
 80113f8:	f003 031f 	and.w	r3, r3, #31
 80113fc:	fa22 f303 	lsr.w	r3, r2, r3
 8011400:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011402:	4b0e      	ldr	r3, [pc, #56]	; (801143c <HAL_RCC_ClockConfig+0x358>)
 8011404:	699b      	ldr	r3, [r3, #24]
 8011406:	f003 030f 	and.w	r3, r3, #15
 801140a:	4a0d      	ldr	r2, [pc, #52]	; (8011440 <HAL_RCC_ClockConfig+0x35c>)
 801140c:	5cd3      	ldrb	r3, [r2, r3]
 801140e:	f003 031f 	and.w	r3, r3, #31
 8011412:	693a      	ldr	r2, [r7, #16]
 8011414:	fa22 f303 	lsr.w	r3, r2, r3
 8011418:	4a0a      	ldr	r2, [pc, #40]	; (8011444 <HAL_RCC_ClockConfig+0x360>)
 801141a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801141c:	4a0a      	ldr	r2, [pc, #40]	; (8011448 <HAL_RCC_ClockConfig+0x364>)
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8011422:	4b0a      	ldr	r3, [pc, #40]	; (801144c <HAL_RCC_ClockConfig+0x368>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	4618      	mov	r0, r3
 8011428:	f7f0 fa30 	bl	800188c <HAL_InitTick>
 801142c:	4603      	mov	r3, r0
 801142e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011430:	7bfb      	ldrb	r3, [r7, #15]
}
 8011432:	4618      	mov	r0, r3
 8011434:	3718      	adds	r7, #24
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
 801143a:	bf00      	nop
 801143c:	58024400 	.word	0x58024400
 8011440:	08029d68 	.word	0x08029d68
 8011444:	24000014 	.word	0x24000014
 8011448:	24000010 	.word	0x24000010
 801144c:	24000048 	.word	0x24000048

08011450 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b08c      	sub	sp, #48	; 0x30
 8011454:	af00      	add	r7, sp, #0
 8011456:	60f8      	str	r0, [r7, #12]
 8011458:	60b9      	str	r1, [r7, #8]
 801145a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d12a      	bne.n	80114b8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8011462:	4b2d      	ldr	r3, [pc, #180]	; (8011518 <HAL_RCC_MCOConfig+0xc8>)
 8011464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011468:	4a2b      	ldr	r2, [pc, #172]	; (8011518 <HAL_RCC_MCOConfig+0xc8>)
 801146a:	f043 0301 	orr.w	r3, r3, #1
 801146e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011472:	4b29      	ldr	r3, [pc, #164]	; (8011518 <HAL_RCC_MCOConfig+0xc8>)
 8011474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011478:	f003 0301 	and.w	r3, r3, #1
 801147c:	61bb      	str	r3, [r7, #24]
 801147e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8011480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011486:	2302      	movs	r3, #2
 8011488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801148a:	2303      	movs	r3, #3
 801148c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801148e:	2300      	movs	r3, #0
 8011490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8011492:	2300      	movs	r3, #0
 8011494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8011496:	f107 031c 	add.w	r3, r7, #28
 801149a:	4619      	mov	r1, r3
 801149c:	481f      	ldr	r0, [pc, #124]	; (801151c <HAL_RCC_MCOConfig+0xcc>)
 801149e:	f7fc fc61 	bl	800dd64 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80114a2:	4b1d      	ldr	r3, [pc, #116]	; (8011518 <HAL_RCC_MCOConfig+0xc8>)
 80114a4:	691b      	ldr	r3, [r3, #16]
 80114a6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80114aa:	68b9      	ldr	r1, [r7, #8]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	430b      	orrs	r3, r1
 80114b0:	4919      	ldr	r1, [pc, #100]	; (8011518 <HAL_RCC_MCOConfig+0xc8>)
 80114b2:	4313      	orrs	r3, r2
 80114b4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80114b6:	e02a      	b.n	801150e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80114b8:	4b17      	ldr	r3, [pc, #92]	; (8011518 <HAL_RCC_MCOConfig+0xc8>)
 80114ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114be:	4a16      	ldr	r2, [pc, #88]	; (8011518 <HAL_RCC_MCOConfig+0xc8>)
 80114c0:	f043 0304 	orr.w	r3, r3, #4
 80114c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80114c8:	4b13      	ldr	r3, [pc, #76]	; (8011518 <HAL_RCC_MCOConfig+0xc8>)
 80114ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114ce:	f003 0304 	and.w	r3, r3, #4
 80114d2:	617b      	str	r3, [r7, #20]
 80114d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80114d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114dc:	2302      	movs	r3, #2
 80114de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80114e0:	2303      	movs	r3, #3
 80114e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114e4:	2300      	movs	r3, #0
 80114e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80114e8:	2300      	movs	r3, #0
 80114ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80114ec:	f107 031c 	add.w	r3, r7, #28
 80114f0:	4619      	mov	r1, r3
 80114f2:	480b      	ldr	r0, [pc, #44]	; (8011520 <HAL_RCC_MCOConfig+0xd0>)
 80114f4:	f7fc fc36 	bl	800dd64 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80114f8:	4b07      	ldr	r3, [pc, #28]	; (8011518 <HAL_RCC_MCOConfig+0xc8>)
 80114fa:	691b      	ldr	r3, [r3, #16]
 80114fc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	01d9      	lsls	r1, r3, #7
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	430b      	orrs	r3, r1
 8011508:	4903      	ldr	r1, [pc, #12]	; (8011518 <HAL_RCC_MCOConfig+0xc8>)
 801150a:	4313      	orrs	r3, r2
 801150c:	610b      	str	r3, [r1, #16]
}
 801150e:	bf00      	nop
 8011510:	3730      	adds	r7, #48	; 0x30
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	58024400 	.word	0x58024400
 801151c:	58020000 	.word	0x58020000
 8011520:	58020800 	.word	0x58020800

08011524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011524:	b480      	push	{r7}
 8011526:	b089      	sub	sp, #36	; 0x24
 8011528:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801152a:	4bb3      	ldr	r3, [pc, #716]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801152c:	691b      	ldr	r3, [r3, #16]
 801152e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011532:	2b18      	cmp	r3, #24
 8011534:	f200 8155 	bhi.w	80117e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8011538:	a201      	add	r2, pc, #4	; (adr r2, 8011540 <HAL_RCC_GetSysClockFreq+0x1c>)
 801153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801153e:	bf00      	nop
 8011540:	080115a5 	.word	0x080115a5
 8011544:	080117e3 	.word	0x080117e3
 8011548:	080117e3 	.word	0x080117e3
 801154c:	080117e3 	.word	0x080117e3
 8011550:	080117e3 	.word	0x080117e3
 8011554:	080117e3 	.word	0x080117e3
 8011558:	080117e3 	.word	0x080117e3
 801155c:	080117e3 	.word	0x080117e3
 8011560:	080115cb 	.word	0x080115cb
 8011564:	080117e3 	.word	0x080117e3
 8011568:	080117e3 	.word	0x080117e3
 801156c:	080117e3 	.word	0x080117e3
 8011570:	080117e3 	.word	0x080117e3
 8011574:	080117e3 	.word	0x080117e3
 8011578:	080117e3 	.word	0x080117e3
 801157c:	080117e3 	.word	0x080117e3
 8011580:	080115d1 	.word	0x080115d1
 8011584:	080117e3 	.word	0x080117e3
 8011588:	080117e3 	.word	0x080117e3
 801158c:	080117e3 	.word	0x080117e3
 8011590:	080117e3 	.word	0x080117e3
 8011594:	080117e3 	.word	0x080117e3
 8011598:	080117e3 	.word	0x080117e3
 801159c:	080117e3 	.word	0x080117e3
 80115a0:	080115d7 	.word	0x080115d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115a4:	4b94      	ldr	r3, [pc, #592]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f003 0320 	and.w	r3, r3, #32
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d009      	beq.n	80115c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80115b0:	4b91      	ldr	r3, [pc, #580]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	08db      	lsrs	r3, r3, #3
 80115b6:	f003 0303 	and.w	r3, r3, #3
 80115ba:	4a90      	ldr	r2, [pc, #576]	; (80117fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80115bc:	fa22 f303 	lsr.w	r3, r2, r3
 80115c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80115c2:	e111      	b.n	80117e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80115c4:	4b8d      	ldr	r3, [pc, #564]	; (80117fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80115c6:	61bb      	str	r3, [r7, #24]
    break;
 80115c8:	e10e      	b.n	80117e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80115ca:	4b8d      	ldr	r3, [pc, #564]	; (8011800 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80115cc:	61bb      	str	r3, [r7, #24]
    break;
 80115ce:	e10b      	b.n	80117e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80115d0:	4b8c      	ldr	r3, [pc, #560]	; (8011804 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80115d2:	61bb      	str	r3, [r7, #24]
    break;
 80115d4:	e108      	b.n	80117e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80115d6:	4b88      	ldr	r3, [pc, #544]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80115d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115da:	f003 0303 	and.w	r3, r3, #3
 80115de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80115e0:	4b85      	ldr	r3, [pc, #532]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80115e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115e4:	091b      	lsrs	r3, r3, #4
 80115e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80115ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80115ec:	4b82      	ldr	r3, [pc, #520]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80115ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f0:	f003 0301 	and.w	r3, r3, #1
 80115f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80115f6:	4b80      	ldr	r3, [pc, #512]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80115f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115fa:	08db      	lsrs	r3, r3, #3
 80115fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011600:	68fa      	ldr	r2, [r7, #12]
 8011602:	fb02 f303 	mul.w	r3, r2, r3
 8011606:	ee07 3a90 	vmov	s15, r3
 801160a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801160e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	2b00      	cmp	r3, #0
 8011616:	f000 80e1 	beq.w	80117dc <HAL_RCC_GetSysClockFreq+0x2b8>
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	2b02      	cmp	r3, #2
 801161e:	f000 8083 	beq.w	8011728 <HAL_RCC_GetSysClockFreq+0x204>
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	2b02      	cmp	r3, #2
 8011626:	f200 80a1 	bhi.w	801176c <HAL_RCC_GetSysClockFreq+0x248>
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d003      	beq.n	8011638 <HAL_RCC_GetSysClockFreq+0x114>
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	2b01      	cmp	r3, #1
 8011634:	d056      	beq.n	80116e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8011636:	e099      	b.n	801176c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011638:	4b6f      	ldr	r3, [pc, #444]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f003 0320 	and.w	r3, r3, #32
 8011640:	2b00      	cmp	r3, #0
 8011642:	d02d      	beq.n	80116a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011644:	4b6c      	ldr	r3, [pc, #432]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	08db      	lsrs	r3, r3, #3
 801164a:	f003 0303 	and.w	r3, r3, #3
 801164e:	4a6b      	ldr	r2, [pc, #428]	; (80117fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011650:	fa22 f303 	lsr.w	r3, r2, r3
 8011654:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	ee07 3a90 	vmov	s15, r3
 801165c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	ee07 3a90 	vmov	s15, r3
 8011666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801166a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801166e:	4b62      	ldr	r3, [pc, #392]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011676:	ee07 3a90 	vmov	s15, r3
 801167a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801167e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011682:	eddf 5a61 	vldr	s11, [pc, #388]	; 8011808 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801168a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801168e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011696:	ee67 7a27 	vmul.f32	s15, s14, s15
 801169a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 801169e:	e087      	b.n	80117b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	ee07 3a90 	vmov	s15, r3
 80116a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 801180c <HAL_RCC_GetSysClockFreq+0x2e8>
 80116ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80116b2:	4b51      	ldr	r3, [pc, #324]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80116b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116ba:	ee07 3a90 	vmov	s15, r3
 80116be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80116c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80116c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8011808 <HAL_RCC_GetSysClockFreq+0x2e4>
 80116ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80116ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80116d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80116d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80116e2:	e065      	b.n	80117b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80116e4:	693b      	ldr	r3, [r7, #16]
 80116e6:	ee07 3a90 	vmov	s15, r3
 80116ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8011810 <HAL_RCC_GetSysClockFreq+0x2ec>
 80116f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80116f6:	4b40      	ldr	r3, [pc, #256]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80116f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116fe:	ee07 3a90 	vmov	s15, r3
 8011702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011706:	ed97 6a02 	vldr	s12, [r7, #8]
 801170a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8011808 <HAL_RCC_GetSysClockFreq+0x2e4>
 801170e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801171a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801171e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011726:	e043      	b.n	80117b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	ee07 3a90 	vmov	s15, r3
 801172e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011732:	eddf 6a38 	vldr	s13, [pc, #224]	; 8011814 <HAL_RCC_GetSysClockFreq+0x2f0>
 8011736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801173a:	4b2f      	ldr	r3, [pc, #188]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801173e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011742:	ee07 3a90 	vmov	s15, r3
 8011746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801174a:	ed97 6a02 	vldr	s12, [r7, #8]
 801174e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8011808 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801175a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801175e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801176a:	e021      	b.n	80117b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	ee07 3a90 	vmov	s15, r3
 8011772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011776:	eddf 6a26 	vldr	s13, [pc, #152]	; 8011810 <HAL_RCC_GetSysClockFreq+0x2ec>
 801177a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801177e:	4b1e      	ldr	r3, [pc, #120]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011786:	ee07 3a90 	vmov	s15, r3
 801178a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801178e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011792:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8011808 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801179a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801179e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80117a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80117a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80117ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80117b0:	4b11      	ldr	r3, [pc, #68]	; (80117f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80117b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117b4:	0a5b      	lsrs	r3, r3, #9
 80117b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117ba:	3301      	adds	r3, #1
 80117bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	ee07 3a90 	vmov	s15, r3
 80117c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80117c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80117cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80117d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80117d4:	ee17 3a90 	vmov	r3, s15
 80117d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80117da:	e005      	b.n	80117e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80117dc:	2300      	movs	r3, #0
 80117de:	61bb      	str	r3, [r7, #24]
    break;
 80117e0:	e002      	b.n	80117e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80117e2:	4b07      	ldr	r3, [pc, #28]	; (8011800 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80117e4:	61bb      	str	r3, [r7, #24]
    break;
 80117e6:	bf00      	nop
  }

  return sysclockfreq;
 80117e8:	69bb      	ldr	r3, [r7, #24]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3724      	adds	r7, #36	; 0x24
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr
 80117f6:	bf00      	nop
 80117f8:	58024400 	.word	0x58024400
 80117fc:	03d09000 	.word	0x03d09000
 8011800:	003d0900 	.word	0x003d0900
 8011804:	017d7840 	.word	0x017d7840
 8011808:	46000000 	.word	0x46000000
 801180c:	4c742400 	.word	0x4c742400
 8011810:	4a742400 	.word	0x4a742400
 8011814:	4bbebc20 	.word	0x4bbebc20

08011818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801181e:	f7ff fe81 	bl	8011524 <HAL_RCC_GetSysClockFreq>
 8011822:	4602      	mov	r2, r0
 8011824:	4b10      	ldr	r3, [pc, #64]	; (8011868 <HAL_RCC_GetHCLKFreq+0x50>)
 8011826:	699b      	ldr	r3, [r3, #24]
 8011828:	0a1b      	lsrs	r3, r3, #8
 801182a:	f003 030f 	and.w	r3, r3, #15
 801182e:	490f      	ldr	r1, [pc, #60]	; (801186c <HAL_RCC_GetHCLKFreq+0x54>)
 8011830:	5ccb      	ldrb	r3, [r1, r3]
 8011832:	f003 031f 	and.w	r3, r3, #31
 8011836:	fa22 f303 	lsr.w	r3, r2, r3
 801183a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801183c:	4b0a      	ldr	r3, [pc, #40]	; (8011868 <HAL_RCC_GetHCLKFreq+0x50>)
 801183e:	699b      	ldr	r3, [r3, #24]
 8011840:	f003 030f 	and.w	r3, r3, #15
 8011844:	4a09      	ldr	r2, [pc, #36]	; (801186c <HAL_RCC_GetHCLKFreq+0x54>)
 8011846:	5cd3      	ldrb	r3, [r2, r3]
 8011848:	f003 031f 	and.w	r3, r3, #31
 801184c:	687a      	ldr	r2, [r7, #4]
 801184e:	fa22 f303 	lsr.w	r3, r2, r3
 8011852:	4a07      	ldr	r2, [pc, #28]	; (8011870 <HAL_RCC_GetHCLKFreq+0x58>)
 8011854:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011856:	4a07      	ldr	r2, [pc, #28]	; (8011874 <HAL_RCC_GetHCLKFreq+0x5c>)
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801185c:	4b04      	ldr	r3, [pc, #16]	; (8011870 <HAL_RCC_GetHCLKFreq+0x58>)
 801185e:	681b      	ldr	r3, [r3, #0]
}
 8011860:	4618      	mov	r0, r3
 8011862:	3708      	adds	r7, #8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	58024400 	.word	0x58024400
 801186c:	08029d68 	.word	0x08029d68
 8011870:	24000014 	.word	0x24000014
 8011874:	24000010 	.word	0x24000010

08011878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801187c:	f7ff ffcc 	bl	8011818 <HAL_RCC_GetHCLKFreq>
 8011880:	4602      	mov	r2, r0
 8011882:	4b06      	ldr	r3, [pc, #24]	; (801189c <HAL_RCC_GetPCLK1Freq+0x24>)
 8011884:	69db      	ldr	r3, [r3, #28]
 8011886:	091b      	lsrs	r3, r3, #4
 8011888:	f003 0307 	and.w	r3, r3, #7
 801188c:	4904      	ldr	r1, [pc, #16]	; (80118a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 801188e:	5ccb      	ldrb	r3, [r1, r3]
 8011890:	f003 031f 	and.w	r3, r3, #31
 8011894:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011898:	4618      	mov	r0, r3
 801189a:	bd80      	pop	{r7, pc}
 801189c:	58024400 	.word	0x58024400
 80118a0:	08029d68 	.word	0x08029d68

080118a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80118a8:	f7ff ffb6 	bl	8011818 <HAL_RCC_GetHCLKFreq>
 80118ac:	4602      	mov	r2, r0
 80118ae:	4b06      	ldr	r3, [pc, #24]	; (80118c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80118b0:	69db      	ldr	r3, [r3, #28]
 80118b2:	0a1b      	lsrs	r3, r3, #8
 80118b4:	f003 0307 	and.w	r3, r3, #7
 80118b8:	4904      	ldr	r1, [pc, #16]	; (80118cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80118ba:	5ccb      	ldrb	r3, [r1, r3]
 80118bc:	f003 031f 	and.w	r3, r3, #31
 80118c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	58024400 	.word	0x58024400
 80118cc:	08029d68 	.word	0x08029d68

080118d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b083      	sub	sp, #12
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	223f      	movs	r2, #63	; 0x3f
 80118de:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80118e0:	4b1a      	ldr	r3, [pc, #104]	; (801194c <HAL_RCC_GetClockConfig+0x7c>)
 80118e2:	691b      	ldr	r3, [r3, #16]
 80118e4:	f003 0207 	and.w	r2, r3, #7
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80118ec:	4b17      	ldr	r3, [pc, #92]	; (801194c <HAL_RCC_GetClockConfig+0x7c>)
 80118ee:	699b      	ldr	r3, [r3, #24]
 80118f0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80118f8:	4b14      	ldr	r3, [pc, #80]	; (801194c <HAL_RCC_GetClockConfig+0x7c>)
 80118fa:	699b      	ldr	r3, [r3, #24]
 80118fc:	f003 020f 	and.w	r2, r3, #15
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8011904:	4b11      	ldr	r3, [pc, #68]	; (801194c <HAL_RCC_GetClockConfig+0x7c>)
 8011906:	699b      	ldr	r3, [r3, #24]
 8011908:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8011910:	4b0e      	ldr	r3, [pc, #56]	; (801194c <HAL_RCC_GetClockConfig+0x7c>)
 8011912:	69db      	ldr	r3, [r3, #28]
 8011914:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801191c:	4b0b      	ldr	r3, [pc, #44]	; (801194c <HAL_RCC_GetClockConfig+0x7c>)
 801191e:	69db      	ldr	r3, [r3, #28]
 8011920:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8011928:	4b08      	ldr	r3, [pc, #32]	; (801194c <HAL_RCC_GetClockConfig+0x7c>)
 801192a:	6a1b      	ldr	r3, [r3, #32]
 801192c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011934:	4b06      	ldr	r3, [pc, #24]	; (8011950 <HAL_RCC_GetClockConfig+0x80>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f003 020f 	and.w	r2, r3, #15
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	601a      	str	r2, [r3, #0]
}
 8011940:	bf00      	nop
 8011942:	370c      	adds	r7, #12
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr
 801194c:	58024400 	.word	0x58024400
 8011950:	52002000 	.word	0x52002000

08011954 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b086      	sub	sp, #24
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801195c:	2300      	movs	r3, #0
 801195e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011960:	2300      	movs	r3, #0
 8011962:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801196c:	2b00      	cmp	r3, #0
 801196e:	d03f      	beq.n	80119f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011974:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011978:	d02a      	beq.n	80119d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801197a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801197e:	d824      	bhi.n	80119ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011984:	d018      	beq.n	80119b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801198a:	d81e      	bhi.n	80119ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 801198c:	2b00      	cmp	r3, #0
 801198e:	d003      	beq.n	8011998 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8011990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011994:	d007      	beq.n	80119a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8011996:	e018      	b.n	80119ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011998:	4bab      	ldr	r3, [pc, #684]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801199c:	4aaa      	ldr	r2, [pc, #680]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801199e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80119a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80119a4:	e015      	b.n	80119d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	3304      	adds	r3, #4
 80119aa:	2102      	movs	r1, #2
 80119ac:	4618      	mov	r0, r3
 80119ae:	f001 f9cf 	bl	8012d50 <RCCEx_PLL2_Config>
 80119b2:	4603      	mov	r3, r0
 80119b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80119b6:	e00c      	b.n	80119d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	3324      	adds	r3, #36	; 0x24
 80119bc:	2102      	movs	r1, #2
 80119be:	4618      	mov	r0, r3
 80119c0:	f001 fa78 	bl	8012eb4 <RCCEx_PLL3_Config>
 80119c4:	4603      	mov	r3, r0
 80119c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80119c8:	e003      	b.n	80119d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80119ca:	2301      	movs	r3, #1
 80119cc:	75fb      	strb	r3, [r7, #23]
      break;
 80119ce:	e000      	b.n	80119d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80119d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80119d2:	7dfb      	ldrb	r3, [r7, #23]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d109      	bne.n	80119ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80119d8:	4b9b      	ldr	r3, [pc, #620]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80119da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80119e4:	4998      	ldr	r1, [pc, #608]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80119e6:	4313      	orrs	r3, r2
 80119e8:	650b      	str	r3, [r1, #80]	; 0x50
 80119ea:	e001      	b.n	80119f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119ec:	7dfb      	ldrb	r3, [r7, #23]
 80119ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d03d      	beq.n	8011a78 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a00:	2b04      	cmp	r3, #4
 8011a02:	d826      	bhi.n	8011a52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8011a04:	a201      	add	r2, pc, #4	; (adr r2, 8011a0c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8011a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a0a:	bf00      	nop
 8011a0c:	08011a21 	.word	0x08011a21
 8011a10:	08011a2f 	.word	0x08011a2f
 8011a14:	08011a41 	.word	0x08011a41
 8011a18:	08011a59 	.word	0x08011a59
 8011a1c:	08011a59 	.word	0x08011a59
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011a20:	4b89      	ldr	r3, [pc, #548]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a24:	4a88      	ldr	r2, [pc, #544]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011a2c:	e015      	b.n	8011a5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	3304      	adds	r3, #4
 8011a32:	2100      	movs	r1, #0
 8011a34:	4618      	mov	r0, r3
 8011a36:	f001 f98b 	bl	8012d50 <RCCEx_PLL2_Config>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011a3e:	e00c      	b.n	8011a5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	3324      	adds	r3, #36	; 0x24
 8011a44:	2100      	movs	r1, #0
 8011a46:	4618      	mov	r0, r3
 8011a48:	f001 fa34 	bl	8012eb4 <RCCEx_PLL3_Config>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011a50:	e003      	b.n	8011a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011a52:	2301      	movs	r3, #1
 8011a54:	75fb      	strb	r3, [r7, #23]
      break;
 8011a56:	e000      	b.n	8011a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8011a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011a5a:	7dfb      	ldrb	r3, [r7, #23]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d109      	bne.n	8011a74 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011a60:	4b79      	ldr	r3, [pc, #484]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a64:	f023 0207 	bic.w	r2, r3, #7
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a6c:	4976      	ldr	r1, [pc, #472]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011a6e:	4313      	orrs	r3, r2
 8011a70:	650b      	str	r3, [r1, #80]	; 0x50
 8011a72:	e001      	b.n	8011a78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a74:	7dfb      	ldrb	r3, [r7, #23]
 8011a76:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d042      	beq.n	8011b0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a8c:	d02b      	beq.n	8011ae6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8011a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a92:	d825      	bhi.n	8011ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011a94:	2bc0      	cmp	r3, #192	; 0xc0
 8011a96:	d028      	beq.n	8011aea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8011a98:	2bc0      	cmp	r3, #192	; 0xc0
 8011a9a:	d821      	bhi.n	8011ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011a9c:	2b80      	cmp	r3, #128	; 0x80
 8011a9e:	d016      	beq.n	8011ace <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8011aa0:	2b80      	cmp	r3, #128	; 0x80
 8011aa2:	d81d      	bhi.n	8011ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d002      	beq.n	8011aae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8011aa8:	2b40      	cmp	r3, #64	; 0x40
 8011aaa:	d007      	beq.n	8011abc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8011aac:	e018      	b.n	8011ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011aae:	4b66      	ldr	r3, [pc, #408]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab2:	4a65      	ldr	r2, [pc, #404]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011aba:	e017      	b.n	8011aec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	3304      	adds	r3, #4
 8011ac0:	2100      	movs	r1, #0
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f001 f944 	bl	8012d50 <RCCEx_PLL2_Config>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011acc:	e00e      	b.n	8011aec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	3324      	adds	r3, #36	; 0x24
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f001 f9ed 	bl	8012eb4 <RCCEx_PLL3_Config>
 8011ada:	4603      	mov	r3, r0
 8011adc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011ade:	e005      	b.n	8011aec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8011ae4:	e002      	b.n	8011aec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8011ae6:	bf00      	nop
 8011ae8:	e000      	b.n	8011aec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8011aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011aec:	7dfb      	ldrb	r3, [r7, #23]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d109      	bne.n	8011b06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8011af2:	4b55      	ldr	r3, [pc, #340]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011af6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011afe:	4952      	ldr	r1, [pc, #328]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011b00:	4313      	orrs	r3, r2
 8011b02:	650b      	str	r3, [r1, #80]	; 0x50
 8011b04:	e001      	b.n	8011b0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b06:	7dfb      	ldrb	r3, [r7, #23]
 8011b08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d049      	beq.n	8011baa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011b20:	d030      	beq.n	8011b84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8011b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011b26:	d82a      	bhi.n	8011b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8011b28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011b2c:	d02c      	beq.n	8011b88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8011b2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011b32:	d824      	bhi.n	8011b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8011b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011b38:	d018      	beq.n	8011b6c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8011b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011b3e:	d81e      	bhi.n	8011b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d003      	beq.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8011b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011b48:	d007      	beq.n	8011b5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011b4a:	e018      	b.n	8011b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011b4c:	4b3e      	ldr	r3, [pc, #248]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b50:	4a3d      	ldr	r2, [pc, #244]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011b58:	e017      	b.n	8011b8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	3304      	adds	r3, #4
 8011b5e:	2100      	movs	r1, #0
 8011b60:	4618      	mov	r0, r3
 8011b62:	f001 f8f5 	bl	8012d50 <RCCEx_PLL2_Config>
 8011b66:	4603      	mov	r3, r0
 8011b68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8011b6a:	e00e      	b.n	8011b8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	3324      	adds	r3, #36	; 0x24
 8011b70:	2100      	movs	r1, #0
 8011b72:	4618      	mov	r0, r3
 8011b74:	f001 f99e 	bl	8012eb4 <RCCEx_PLL3_Config>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011b7c:	e005      	b.n	8011b8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8011b7e:	2301      	movs	r3, #1
 8011b80:	75fb      	strb	r3, [r7, #23]
      break;
 8011b82:	e002      	b.n	8011b8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011b84:	bf00      	nop
 8011b86:	e000      	b.n	8011b8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b8a:	7dfb      	ldrb	r3, [r7, #23]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10a      	bne.n	8011ba6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011b90:	4b2d      	ldr	r3, [pc, #180]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011b9e:	492a      	ldr	r1, [pc, #168]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011ba0:	4313      	orrs	r3, r2
 8011ba2:	658b      	str	r3, [r1, #88]	; 0x58
 8011ba4:	e001      	b.n	8011baa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ba6:	7dfb      	ldrb	r3, [r7, #23]
 8011ba8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d04c      	beq.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011bc0:	d030      	beq.n	8011c24 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8011bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011bc6:	d82a      	bhi.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011bc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011bcc:	d02c      	beq.n	8011c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8011bce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011bd2:	d824      	bhi.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011bd8:	d018      	beq.n	8011c0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8011bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011bde:	d81e      	bhi.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d003      	beq.n	8011bec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011be8:	d007      	beq.n	8011bfa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011bea:	e018      	b.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011bec:	4b16      	ldr	r3, [pc, #88]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bf0:	4a15      	ldr	r2, [pc, #84]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011bf8:	e017      	b.n	8011c2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	2100      	movs	r1, #0
 8011c00:	4618      	mov	r0, r3
 8011c02:	f001 f8a5 	bl	8012d50 <RCCEx_PLL2_Config>
 8011c06:	4603      	mov	r3, r0
 8011c08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8011c0a:	e00e      	b.n	8011c2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	3324      	adds	r3, #36	; 0x24
 8011c10:	2100      	movs	r1, #0
 8011c12:	4618      	mov	r0, r3
 8011c14:	f001 f94e 	bl	8012eb4 <RCCEx_PLL3_Config>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011c1c:	e005      	b.n	8011c2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8011c1e:	2301      	movs	r3, #1
 8011c20:	75fb      	strb	r3, [r7, #23]
      break;
 8011c22:	e002      	b.n	8011c2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8011c24:	bf00      	nop
 8011c26:	e000      	b.n	8011c2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8011c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011c2a:	7dfb      	ldrb	r3, [r7, #23]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d10d      	bne.n	8011c4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8011c30:	4b05      	ldr	r3, [pc, #20]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011c3e:	4902      	ldr	r1, [pc, #8]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011c40:	4313      	orrs	r3, r2
 8011c42:	658b      	str	r3, [r1, #88]	; 0x58
 8011c44:	e004      	b.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8011c46:	bf00      	nop
 8011c48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c4c:	7dfb      	ldrb	r3, [r7, #23]
 8011c4e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d032      	beq.n	8011cc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c60:	2b30      	cmp	r3, #48	; 0x30
 8011c62:	d01c      	beq.n	8011c9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8011c64:	2b30      	cmp	r3, #48	; 0x30
 8011c66:	d817      	bhi.n	8011c98 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8011c68:	2b20      	cmp	r3, #32
 8011c6a:	d00c      	beq.n	8011c86 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8011c6c:	2b20      	cmp	r3, #32
 8011c6e:	d813      	bhi.n	8011c98 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d016      	beq.n	8011ca2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8011c74:	2b10      	cmp	r3, #16
 8011c76:	d10f      	bne.n	8011c98 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011c78:	4baf      	ldr	r3, [pc, #700]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c7c:	4aae      	ldr	r2, [pc, #696]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011c84:	e00e      	b.n	8011ca4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	3304      	adds	r3, #4
 8011c8a:	2102      	movs	r1, #2
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f001 f85f 	bl	8012d50 <RCCEx_PLL2_Config>
 8011c92:	4603      	mov	r3, r0
 8011c94:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011c96:	e005      	b.n	8011ca4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011c98:	2301      	movs	r3, #1
 8011c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8011c9c:	e002      	b.n	8011ca4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8011c9e:	bf00      	nop
 8011ca0:	e000      	b.n	8011ca4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8011ca2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011ca4:	7dfb      	ldrb	r3, [r7, #23]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d109      	bne.n	8011cbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8011caa:	4ba3      	ldr	r3, [pc, #652]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cb6:	49a0      	ldr	r1, [pc, #640]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011cb8:	4313      	orrs	r3, r2
 8011cba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011cbc:	e001      	b.n	8011cc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011cbe:	7dfb      	ldrb	r3, [r7, #23]
 8011cc0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d047      	beq.n	8011d5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011cd6:	d030      	beq.n	8011d3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8011cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011cdc:	d82a      	bhi.n	8011d34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8011cde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011ce2:	d02c      	beq.n	8011d3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8011ce4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011ce8:	d824      	bhi.n	8011d34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8011cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011cee:	d018      	beq.n	8011d22 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8011cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011cf4:	d81e      	bhi.n	8011d34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d003      	beq.n	8011d02 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8011cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011cfe:	d007      	beq.n	8011d10 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8011d00:	e018      	b.n	8011d34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011d02:	4b8d      	ldr	r3, [pc, #564]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d06:	4a8c      	ldr	r2, [pc, #560]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011d0e:	e017      	b.n	8011d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	3304      	adds	r3, #4
 8011d14:	2100      	movs	r1, #0
 8011d16:	4618      	mov	r0, r3
 8011d18:	f001 f81a 	bl	8012d50 <RCCEx_PLL2_Config>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011d20:	e00e      	b.n	8011d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	3324      	adds	r3, #36	; 0x24
 8011d26:	2100      	movs	r1, #0
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f001 f8c3 	bl	8012eb4 <RCCEx_PLL3_Config>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011d32:	e005      	b.n	8011d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011d34:	2301      	movs	r3, #1
 8011d36:	75fb      	strb	r3, [r7, #23]
      break;
 8011d38:	e002      	b.n	8011d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8011d3a:	bf00      	nop
 8011d3c:	e000      	b.n	8011d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8011d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011d40:	7dfb      	ldrb	r3, [r7, #23]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d109      	bne.n	8011d5a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8011d46:	4b7c      	ldr	r3, [pc, #496]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d4a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d52:	4979      	ldr	r1, [pc, #484]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011d54:	4313      	orrs	r3, r2
 8011d56:	650b      	str	r3, [r1, #80]	; 0x50
 8011d58:	e001      	b.n	8011d5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d5a:	7dfb      	ldrb	r3, [r7, #23]
 8011d5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d049      	beq.n	8011dfe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011d72:	d02e      	beq.n	8011dd2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8011d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011d78:	d828      	bhi.n	8011dcc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8011d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011d7e:	d02a      	beq.n	8011dd6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8011d80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011d84:	d822      	bhi.n	8011dcc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8011d86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011d8a:	d026      	beq.n	8011dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8011d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011d90:	d81c      	bhi.n	8011dcc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8011d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011d96:	d010      	beq.n	8011dba <HAL_RCCEx_PeriphCLKConfig+0x466>
 8011d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011d9c:	d816      	bhi.n	8011dcc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d01d      	beq.n	8011dde <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8011da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011da6:	d111      	bne.n	8011dcc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	3304      	adds	r3, #4
 8011dac:	2101      	movs	r1, #1
 8011dae:	4618      	mov	r0, r3
 8011db0:	f000 ffce 	bl	8012d50 <RCCEx_PLL2_Config>
 8011db4:	4603      	mov	r3, r0
 8011db6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011db8:	e012      	b.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	3324      	adds	r3, #36	; 0x24
 8011dbe:	2101      	movs	r1, #1
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f001 f877 	bl	8012eb4 <RCCEx_PLL3_Config>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011dca:	e009      	b.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	75fb      	strb	r3, [r7, #23]
      break;
 8011dd0:	e006      	b.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8011dd2:	bf00      	nop
 8011dd4:	e004      	b.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8011dd6:	bf00      	nop
 8011dd8:	e002      	b.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8011dda:	bf00      	nop
 8011ddc:	e000      	b.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8011dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011de0:	7dfb      	ldrb	r3, [r7, #23]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d109      	bne.n	8011dfa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011de6:	4b54      	ldr	r3, [pc, #336]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011dea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011df2:	4951      	ldr	r1, [pc, #324]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011df4:	4313      	orrs	r3, r2
 8011df6:	650b      	str	r3, [r1, #80]	; 0x50
 8011df8:	e001      	b.n	8011dfe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011dfa:	7dfb      	ldrb	r3, [r7, #23]
 8011dfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d04b      	beq.n	8011ea2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011e14:	d02e      	beq.n	8011e74 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8011e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011e1a:	d828      	bhi.n	8011e6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8011e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e20:	d02a      	beq.n	8011e78 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8011e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e26:	d822      	bhi.n	8011e6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8011e28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011e2c:	d026      	beq.n	8011e7c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8011e2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011e32:	d81c      	bhi.n	8011e6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8011e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e38:	d010      	beq.n	8011e5c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8011e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e3e:	d816      	bhi.n	8011e6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d01d      	beq.n	8011e80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8011e44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011e48:	d111      	bne.n	8011e6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	3304      	adds	r3, #4
 8011e4e:	2101      	movs	r1, #1
 8011e50:	4618      	mov	r0, r3
 8011e52:	f000 ff7d 	bl	8012d50 <RCCEx_PLL2_Config>
 8011e56:	4603      	mov	r3, r0
 8011e58:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011e5a:	e012      	b.n	8011e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	3324      	adds	r3, #36	; 0x24
 8011e60:	2101      	movs	r1, #1
 8011e62:	4618      	mov	r0, r3
 8011e64:	f001 f826 	bl	8012eb4 <RCCEx_PLL3_Config>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011e6c:	e009      	b.n	8011e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8011e6e:	2301      	movs	r3, #1
 8011e70:	75fb      	strb	r3, [r7, #23]
      break;
 8011e72:	e006      	b.n	8011e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8011e74:	bf00      	nop
 8011e76:	e004      	b.n	8011e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8011e78:	bf00      	nop
 8011e7a:	e002      	b.n	8011e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8011e7c:	bf00      	nop
 8011e7e:	e000      	b.n	8011e82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8011e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011e82:	7dfb      	ldrb	r3, [r7, #23]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d10a      	bne.n	8011e9e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8011e88:	4b2b      	ldr	r3, [pc, #172]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e8c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011e96:	4928      	ldr	r1, [pc, #160]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011e98:	4313      	orrs	r3, r2
 8011e9a:	658b      	str	r3, [r1, #88]	; 0x58
 8011e9c:	e001      	b.n	8011ea2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ea0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d02f      	beq.n	8011f0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011eb6:	d00e      	beq.n	8011ed6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8011eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ebc:	d814      	bhi.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d015      	beq.n	8011eee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8011ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011ec6:	d10f      	bne.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011ec8:	4b1b      	ldr	r3, [pc, #108]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ecc:	4a1a      	ldr	r2, [pc, #104]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011ed4:	e00c      	b.n	8011ef0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	3304      	adds	r3, #4
 8011eda:	2101      	movs	r1, #1
 8011edc:	4618      	mov	r0, r3
 8011ede:	f000 ff37 	bl	8012d50 <RCCEx_PLL2_Config>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011ee6:	e003      	b.n	8011ef0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011ee8:	2301      	movs	r3, #1
 8011eea:	75fb      	strb	r3, [r7, #23]
      break;
 8011eec:	e000      	b.n	8011ef0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8011eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011ef0:	7dfb      	ldrb	r3, [r7, #23]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d109      	bne.n	8011f0a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011ef6:	4b10      	ldr	r3, [pc, #64]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011efa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f02:	490d      	ldr	r1, [pc, #52]	; (8011f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011f04:	4313      	orrs	r3, r2
 8011f06:	650b      	str	r3, [r1, #80]	; 0x50
 8011f08:	e001      	b.n	8011f0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f0a:	7dfb      	ldrb	r3, [r7, #23]
 8011f0c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d033      	beq.n	8011f82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f1e:	2b03      	cmp	r3, #3
 8011f20:	d81c      	bhi.n	8011f5c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8011f22:	a201      	add	r2, pc, #4	; (adr r2, 8011f28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8011f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f28:	08011f63 	.word	0x08011f63
 8011f2c:	08011f3d 	.word	0x08011f3d
 8011f30:	08011f4b 	.word	0x08011f4b
 8011f34:	08011f63 	.word	0x08011f63
 8011f38:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011f3c:	4bb8      	ldr	r3, [pc, #736]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f40:	4ab7      	ldr	r2, [pc, #732]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011f48:	e00c      	b.n	8011f64 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	3304      	adds	r3, #4
 8011f4e:	2102      	movs	r1, #2
 8011f50:	4618      	mov	r0, r3
 8011f52:	f000 fefd 	bl	8012d50 <RCCEx_PLL2_Config>
 8011f56:	4603      	mov	r3, r0
 8011f58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011f5a:	e003      	b.n	8011f64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8011f60:	e000      	b.n	8011f64 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8011f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011f64:	7dfb      	ldrb	r3, [r7, #23]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d109      	bne.n	8011f7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8011f6a:	4bad      	ldr	r3, [pc, #692]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f6e:	f023 0203 	bic.w	r2, r3, #3
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f76:	49aa      	ldr	r1, [pc, #680]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011f78:	4313      	orrs	r3, r2
 8011f7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011f7c:	e001      	b.n	8011f82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f7e:	7dfb      	ldrb	r3, [r7, #23]
 8011f80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	f000 8086 	beq.w	801209c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011f90:	4ba4      	ldr	r3, [pc, #656]	; (8012224 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	4aa3      	ldr	r2, [pc, #652]	; (8012224 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8011f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011f9c:	f7fb fade 	bl	800d55c <HAL_GetTick>
 8011fa0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011fa2:	e009      	b.n	8011fb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011fa4:	f7fb fada 	bl	800d55c <HAL_GetTick>
 8011fa8:	4602      	mov	r2, r0
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	1ad3      	subs	r3, r2, r3
 8011fae:	2b64      	cmp	r3, #100	; 0x64
 8011fb0:	d902      	bls.n	8011fb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8011fb2:	2303      	movs	r3, #3
 8011fb4:	75fb      	strb	r3, [r7, #23]
        break;
 8011fb6:	e005      	b.n	8011fc4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011fb8:	4b9a      	ldr	r3, [pc, #616]	; (8012224 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d0ef      	beq.n	8011fa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8011fc4:	7dfb      	ldrb	r3, [r7, #23]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d166      	bne.n	8012098 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011fca:	4b95      	ldr	r3, [pc, #596]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011fd4:	4053      	eors	r3, r2
 8011fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d013      	beq.n	8012006 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011fde:	4b90      	ldr	r3, [pc, #576]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011fe6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011fe8:	4b8d      	ldr	r3, [pc, #564]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fec:	4a8c      	ldr	r2, [pc, #560]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011ff2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011ff4:	4b8a      	ldr	r3, [pc, #552]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ff8:	4a89      	ldr	r2, [pc, #548]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011ffe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012000:	4a87      	ldr	r2, [pc, #540]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801200c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012010:	d115      	bne.n	801203e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012012:	f7fb faa3 	bl	800d55c <HAL_GetTick>
 8012016:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012018:	e00b      	b.n	8012032 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801201a:	f7fb fa9f 	bl	800d55c <HAL_GetTick>
 801201e:	4602      	mov	r2, r0
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	1ad3      	subs	r3, r2, r3
 8012024:	f241 3288 	movw	r2, #5000	; 0x1388
 8012028:	4293      	cmp	r3, r2
 801202a:	d902      	bls.n	8012032 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 801202c:	2303      	movs	r3, #3
 801202e:	75fb      	strb	r3, [r7, #23]
            break;
 8012030:	e005      	b.n	801203e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012032:	4b7b      	ldr	r3, [pc, #492]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8012034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012036:	f003 0302 	and.w	r3, r3, #2
 801203a:	2b00      	cmp	r3, #0
 801203c:	d0ed      	beq.n	801201a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 801203e:	7dfb      	ldrb	r3, [r7, #23]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d126      	bne.n	8012092 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801204e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012052:	d10d      	bne.n	8012070 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8012054:	4b72      	ldr	r3, [pc, #456]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8012056:	691b      	ldr	r3, [r3, #16]
 8012058:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012062:	0919      	lsrs	r1, r3, #4
 8012064:	4b70      	ldr	r3, [pc, #448]	; (8012228 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8012066:	400b      	ands	r3, r1
 8012068:	496d      	ldr	r1, [pc, #436]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801206a:	4313      	orrs	r3, r2
 801206c:	610b      	str	r3, [r1, #16]
 801206e:	e005      	b.n	801207c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8012070:	4b6b      	ldr	r3, [pc, #428]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8012072:	691b      	ldr	r3, [r3, #16]
 8012074:	4a6a      	ldr	r2, [pc, #424]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8012076:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801207a:	6113      	str	r3, [r2, #16]
 801207c:	4b68      	ldr	r3, [pc, #416]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801207e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801208a:	4965      	ldr	r1, [pc, #404]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801208c:	4313      	orrs	r3, r2
 801208e:	670b      	str	r3, [r1, #112]	; 0x70
 8012090:	e004      	b.n	801209c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012092:	7dfb      	ldrb	r3, [r7, #23]
 8012094:	75bb      	strb	r3, [r7, #22]
 8012096:	e001      	b.n	801209c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012098:	7dfb      	ldrb	r3, [r7, #23]
 801209a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	f003 0301 	and.w	r3, r3, #1
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d07e      	beq.n	80121a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120ac:	2b28      	cmp	r3, #40	; 0x28
 80120ae:	d867      	bhi.n	8012180 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80120b0:	a201      	add	r2, pc, #4	; (adr r2, 80120b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80120b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120b6:	bf00      	nop
 80120b8:	08012187 	.word	0x08012187
 80120bc:	08012181 	.word	0x08012181
 80120c0:	08012181 	.word	0x08012181
 80120c4:	08012181 	.word	0x08012181
 80120c8:	08012181 	.word	0x08012181
 80120cc:	08012181 	.word	0x08012181
 80120d0:	08012181 	.word	0x08012181
 80120d4:	08012181 	.word	0x08012181
 80120d8:	0801215d 	.word	0x0801215d
 80120dc:	08012181 	.word	0x08012181
 80120e0:	08012181 	.word	0x08012181
 80120e4:	08012181 	.word	0x08012181
 80120e8:	08012181 	.word	0x08012181
 80120ec:	08012181 	.word	0x08012181
 80120f0:	08012181 	.word	0x08012181
 80120f4:	08012181 	.word	0x08012181
 80120f8:	0801216f 	.word	0x0801216f
 80120fc:	08012181 	.word	0x08012181
 8012100:	08012181 	.word	0x08012181
 8012104:	08012181 	.word	0x08012181
 8012108:	08012181 	.word	0x08012181
 801210c:	08012181 	.word	0x08012181
 8012110:	08012181 	.word	0x08012181
 8012114:	08012181 	.word	0x08012181
 8012118:	08012187 	.word	0x08012187
 801211c:	08012181 	.word	0x08012181
 8012120:	08012181 	.word	0x08012181
 8012124:	08012181 	.word	0x08012181
 8012128:	08012181 	.word	0x08012181
 801212c:	08012181 	.word	0x08012181
 8012130:	08012181 	.word	0x08012181
 8012134:	08012181 	.word	0x08012181
 8012138:	08012187 	.word	0x08012187
 801213c:	08012181 	.word	0x08012181
 8012140:	08012181 	.word	0x08012181
 8012144:	08012181 	.word	0x08012181
 8012148:	08012181 	.word	0x08012181
 801214c:	08012181 	.word	0x08012181
 8012150:	08012181 	.word	0x08012181
 8012154:	08012181 	.word	0x08012181
 8012158:	08012187 	.word	0x08012187
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	3304      	adds	r3, #4
 8012160:	2101      	movs	r1, #1
 8012162:	4618      	mov	r0, r3
 8012164:	f000 fdf4 	bl	8012d50 <RCCEx_PLL2_Config>
 8012168:	4603      	mov	r3, r0
 801216a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801216c:	e00c      	b.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	3324      	adds	r3, #36	; 0x24
 8012172:	2101      	movs	r1, #1
 8012174:	4618      	mov	r0, r3
 8012176:	f000 fe9d 	bl	8012eb4 <RCCEx_PLL3_Config>
 801217a:	4603      	mov	r3, r0
 801217c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801217e:	e003      	b.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012180:	2301      	movs	r3, #1
 8012182:	75fb      	strb	r3, [r7, #23]
      break;
 8012184:	e000      	b.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8012186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012188:	7dfb      	ldrb	r3, [r7, #23]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d109      	bne.n	80121a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801218e:	4b24      	ldr	r3, [pc, #144]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8012190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012192:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801219a:	4921      	ldr	r1, [pc, #132]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801219c:	4313      	orrs	r3, r2
 801219e:	654b      	str	r3, [r1, #84]	; 0x54
 80121a0:	e001      	b.n	80121a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80121a2:	7dfb      	ldrb	r3, [r7, #23]
 80121a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	f003 0302 	and.w	r3, r3, #2
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d03e      	beq.n	8012230 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121b6:	2b05      	cmp	r3, #5
 80121b8:	d820      	bhi.n	80121fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80121ba:	a201      	add	r2, pc, #4	; (adr r2, 80121c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80121bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121c0:	08012203 	.word	0x08012203
 80121c4:	080121d9 	.word	0x080121d9
 80121c8:	080121eb 	.word	0x080121eb
 80121cc:	08012203 	.word	0x08012203
 80121d0:	08012203 	.word	0x08012203
 80121d4:	08012203 	.word	0x08012203
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	3304      	adds	r3, #4
 80121dc:	2101      	movs	r1, #1
 80121de:	4618      	mov	r0, r3
 80121e0:	f000 fdb6 	bl	8012d50 <RCCEx_PLL2_Config>
 80121e4:	4603      	mov	r3, r0
 80121e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80121e8:	e00c      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	3324      	adds	r3, #36	; 0x24
 80121ee:	2101      	movs	r1, #1
 80121f0:	4618      	mov	r0, r3
 80121f2:	f000 fe5f 	bl	8012eb4 <RCCEx_PLL3_Config>
 80121f6:	4603      	mov	r3, r0
 80121f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80121fa:	e003      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80121fc:	2301      	movs	r3, #1
 80121fe:	75fb      	strb	r3, [r7, #23]
      break;
 8012200:	e000      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8012202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012204:	7dfb      	ldrb	r3, [r7, #23]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d110      	bne.n	801222c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801220a:	4b05      	ldr	r3, [pc, #20]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801220e:	f023 0207 	bic.w	r2, r3, #7
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012216:	4902      	ldr	r1, [pc, #8]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8012218:	4313      	orrs	r3, r2
 801221a:	654b      	str	r3, [r1, #84]	; 0x54
 801221c:	e008      	b.n	8012230 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 801221e:	bf00      	nop
 8012220:	58024400 	.word	0x58024400
 8012224:	58024800 	.word	0x58024800
 8012228:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 801222c:	7dfb      	ldrb	r3, [r7, #23]
 801222e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f003 0304 	and.w	r3, r3, #4
 8012238:	2b00      	cmp	r3, #0
 801223a:	d039      	beq.n	80122b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012242:	2b05      	cmp	r3, #5
 8012244:	d820      	bhi.n	8012288 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8012246:	a201      	add	r2, pc, #4	; (adr r2, 801224c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8012248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801224c:	0801228f 	.word	0x0801228f
 8012250:	08012265 	.word	0x08012265
 8012254:	08012277 	.word	0x08012277
 8012258:	0801228f 	.word	0x0801228f
 801225c:	0801228f 	.word	0x0801228f
 8012260:	0801228f 	.word	0x0801228f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	3304      	adds	r3, #4
 8012268:	2101      	movs	r1, #1
 801226a:	4618      	mov	r0, r3
 801226c:	f000 fd70 	bl	8012d50 <RCCEx_PLL2_Config>
 8012270:	4603      	mov	r3, r0
 8012272:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8012274:	e00c      	b.n	8012290 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	3324      	adds	r3, #36	; 0x24
 801227a:	2101      	movs	r1, #1
 801227c:	4618      	mov	r0, r3
 801227e:	f000 fe19 	bl	8012eb4 <RCCEx_PLL3_Config>
 8012282:	4603      	mov	r3, r0
 8012284:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8012286:	e003      	b.n	8012290 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012288:	2301      	movs	r3, #1
 801228a:	75fb      	strb	r3, [r7, #23]
      break;
 801228c:	e000      	b.n	8012290 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 801228e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012290:	7dfb      	ldrb	r3, [r7, #23]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d10a      	bne.n	80122ac <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012296:	4bb7      	ldr	r3, [pc, #732]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8012298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801229a:	f023 0207 	bic.w	r2, r3, #7
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122a4:	49b3      	ldr	r1, [pc, #716]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80122a6:	4313      	orrs	r3, r2
 80122a8:	658b      	str	r3, [r1, #88]	; 0x58
 80122aa:	e001      	b.n	80122b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122ac:	7dfb      	ldrb	r3, [r7, #23]
 80122ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	f003 0320 	and.w	r3, r3, #32
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d04b      	beq.n	8012354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80122c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80122c6:	d02e      	beq.n	8012326 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80122c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80122cc:	d828      	bhi.n	8012320 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80122ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122d2:	d02a      	beq.n	801232a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80122d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122d8:	d822      	bhi.n	8012320 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80122da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80122de:	d026      	beq.n	801232e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80122e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80122e4:	d81c      	bhi.n	8012320 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80122e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80122ea:	d010      	beq.n	801230e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80122ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80122f0:	d816      	bhi.n	8012320 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d01d      	beq.n	8012332 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80122f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80122fa:	d111      	bne.n	8012320 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	3304      	adds	r3, #4
 8012300:	2100      	movs	r1, #0
 8012302:	4618      	mov	r0, r3
 8012304:	f000 fd24 	bl	8012d50 <RCCEx_PLL2_Config>
 8012308:	4603      	mov	r3, r0
 801230a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801230c:	e012      	b.n	8012334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	3324      	adds	r3, #36	; 0x24
 8012312:	2102      	movs	r1, #2
 8012314:	4618      	mov	r0, r3
 8012316:	f000 fdcd 	bl	8012eb4 <RCCEx_PLL3_Config>
 801231a:	4603      	mov	r3, r0
 801231c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801231e:	e009      	b.n	8012334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012320:	2301      	movs	r3, #1
 8012322:	75fb      	strb	r3, [r7, #23]
      break;
 8012324:	e006      	b.n	8012334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8012326:	bf00      	nop
 8012328:	e004      	b.n	8012334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 801232a:	bf00      	nop
 801232c:	e002      	b.n	8012334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 801232e:	bf00      	nop
 8012330:	e000      	b.n	8012334 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8012332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012334:	7dfb      	ldrb	r3, [r7, #23]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d10a      	bne.n	8012350 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801233a:	4b8e      	ldr	r3, [pc, #568]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 801233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801233e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012348:	498a      	ldr	r1, [pc, #552]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 801234a:	4313      	orrs	r3, r2
 801234c:	654b      	str	r3, [r1, #84]	; 0x54
 801234e:	e001      	b.n	8012354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012350:	7dfb      	ldrb	r3, [r7, #23]
 8012352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801235c:	2b00      	cmp	r3, #0
 801235e:	d04b      	beq.n	80123f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801236a:	d02e      	beq.n	80123ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
 801236c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8012370:	d828      	bhi.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8012372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012376:	d02a      	beq.n	80123ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8012378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801237c:	d822      	bhi.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 801237e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012382:	d026      	beq.n	80123d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8012384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012388:	d81c      	bhi.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 801238a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801238e:	d010      	beq.n	80123b2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8012390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012394:	d816      	bhi.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8012396:	2b00      	cmp	r3, #0
 8012398:	d01d      	beq.n	80123d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 801239a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801239e:	d111      	bne.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	3304      	adds	r3, #4
 80123a4:	2100      	movs	r1, #0
 80123a6:	4618      	mov	r0, r3
 80123a8:	f000 fcd2 	bl	8012d50 <RCCEx_PLL2_Config>
 80123ac:	4603      	mov	r3, r0
 80123ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80123b0:	e012      	b.n	80123d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	3324      	adds	r3, #36	; 0x24
 80123b6:	2102      	movs	r1, #2
 80123b8:	4618      	mov	r0, r3
 80123ba:	f000 fd7b 	bl	8012eb4 <RCCEx_PLL3_Config>
 80123be:	4603      	mov	r3, r0
 80123c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80123c2:	e009      	b.n	80123d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80123c4:	2301      	movs	r3, #1
 80123c6:	75fb      	strb	r3, [r7, #23]
      break;
 80123c8:	e006      	b.n	80123d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80123ca:	bf00      	nop
 80123cc:	e004      	b.n	80123d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80123ce:	bf00      	nop
 80123d0:	e002      	b.n	80123d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80123d2:	bf00      	nop
 80123d4:	e000      	b.n	80123d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80123d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80123d8:	7dfb      	ldrb	r3, [r7, #23]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d10a      	bne.n	80123f4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80123de:	4b65      	ldr	r3, [pc, #404]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80123e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80123ec:	4961      	ldr	r1, [pc, #388]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80123ee:	4313      	orrs	r3, r2
 80123f0:	658b      	str	r3, [r1, #88]	; 0x58
 80123f2:	e001      	b.n	80123f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123f4:	7dfb      	ldrb	r3, [r7, #23]
 80123f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012400:	2b00      	cmp	r3, #0
 8012402:	d04b      	beq.n	801249c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801240a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801240e:	d02e      	beq.n	801246e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8012410:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8012414:	d828      	bhi.n	8012468 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8012416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801241a:	d02a      	beq.n	8012472 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 801241c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012420:	d822      	bhi.n	8012468 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8012422:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8012426:	d026      	beq.n	8012476 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8012428:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801242c:	d81c      	bhi.n	8012468 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 801242e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012432:	d010      	beq.n	8012456 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8012434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012438:	d816      	bhi.n	8012468 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 801243a:	2b00      	cmp	r3, #0
 801243c:	d01d      	beq.n	801247a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 801243e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012442:	d111      	bne.n	8012468 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	3304      	adds	r3, #4
 8012448:	2100      	movs	r1, #0
 801244a:	4618      	mov	r0, r3
 801244c:	f000 fc80 	bl	8012d50 <RCCEx_PLL2_Config>
 8012450:	4603      	mov	r3, r0
 8012452:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8012454:	e012      	b.n	801247c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	3324      	adds	r3, #36	; 0x24
 801245a:	2102      	movs	r1, #2
 801245c:	4618      	mov	r0, r3
 801245e:	f000 fd29 	bl	8012eb4 <RCCEx_PLL3_Config>
 8012462:	4603      	mov	r3, r0
 8012464:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8012466:	e009      	b.n	801247c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012468:	2301      	movs	r3, #1
 801246a:	75fb      	strb	r3, [r7, #23]
      break;
 801246c:	e006      	b.n	801247c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 801246e:	bf00      	nop
 8012470:	e004      	b.n	801247c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8012472:	bf00      	nop
 8012474:	e002      	b.n	801247c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8012476:	bf00      	nop
 8012478:	e000      	b.n	801247c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 801247a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801247c:	7dfb      	ldrb	r3, [r7, #23]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d10a      	bne.n	8012498 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012482:	4b3c      	ldr	r3, [pc, #240]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8012484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012490:	4938      	ldr	r1, [pc, #224]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8012492:	4313      	orrs	r3, r2
 8012494:	658b      	str	r3, [r1, #88]	; 0x58
 8012496:	e001      	b.n	801249c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012498:	7dfb      	ldrb	r3, [r7, #23]
 801249a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	f003 0308 	and.w	r3, r3, #8
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d01a      	beq.n	80124de <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80124b2:	d10a      	bne.n	80124ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	3324      	adds	r3, #36	; 0x24
 80124b8:	2102      	movs	r1, #2
 80124ba:	4618      	mov	r0, r3
 80124bc:	f000 fcfa 	bl	8012eb4 <RCCEx_PLL3_Config>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d001      	beq.n	80124ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80124c6:	2301      	movs	r3, #1
 80124c8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80124ca:	4b2a      	ldr	r3, [pc, #168]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80124cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124d8:	4926      	ldr	r1, [pc, #152]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80124da:	4313      	orrs	r3, r2
 80124dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	f003 0310 	and.w	r3, r3, #16
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d01a      	beq.n	8012520 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80124f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124f4:	d10a      	bne.n	801250c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	3324      	adds	r3, #36	; 0x24
 80124fa:	2102      	movs	r1, #2
 80124fc:	4618      	mov	r0, r3
 80124fe:	f000 fcd9 	bl	8012eb4 <RCCEx_PLL3_Config>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d001      	beq.n	801250c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8012508:	2301      	movs	r3, #1
 801250a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801250c:	4b19      	ldr	r3, [pc, #100]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 801250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801251a:	4916      	ldr	r1, [pc, #88]	; (8012574 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 801251c:	4313      	orrs	r3, r2
 801251e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012528:	2b00      	cmp	r3, #0
 801252a:	d036      	beq.n	801259a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012536:	d01f      	beq.n	8012578 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8012538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801253c:	d817      	bhi.n	801256e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 801253e:	2b00      	cmp	r3, #0
 8012540:	d003      	beq.n	801254a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8012542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012546:	d009      	beq.n	801255c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8012548:	e011      	b.n	801256e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	3304      	adds	r3, #4
 801254e:	2100      	movs	r1, #0
 8012550:	4618      	mov	r0, r3
 8012552:	f000 fbfd 	bl	8012d50 <RCCEx_PLL2_Config>
 8012556:	4603      	mov	r3, r0
 8012558:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801255a:	e00e      	b.n	801257a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	3324      	adds	r3, #36	; 0x24
 8012560:	2102      	movs	r1, #2
 8012562:	4618      	mov	r0, r3
 8012564:	f000 fca6 	bl	8012eb4 <RCCEx_PLL3_Config>
 8012568:	4603      	mov	r3, r0
 801256a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801256c:	e005      	b.n	801257a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801256e:	2301      	movs	r3, #1
 8012570:	75fb      	strb	r3, [r7, #23]
      break;
 8012572:	e002      	b.n	801257a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8012574:	58024400 	.word	0x58024400
      break;
 8012578:	bf00      	nop
    }

    if(ret == HAL_OK)
 801257a:	7dfb      	ldrb	r3, [r7, #23]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d10a      	bne.n	8012596 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012580:	4b93      	ldr	r3, [pc, #588]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801258e:	4990      	ldr	r1, [pc, #576]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012590:	4313      	orrs	r3, r2
 8012592:	658b      	str	r3, [r1, #88]	; 0x58
 8012594:	e001      	b.n	801259a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012596:	7dfb      	ldrb	r3, [r7, #23]
 8012598:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d033      	beq.n	801260e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80125b0:	d01c      	beq.n	80125ec <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80125b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80125b6:	d816      	bhi.n	80125e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80125b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80125bc:	d003      	beq.n	80125c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80125be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80125c2:	d007      	beq.n	80125d4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80125c4:	e00f      	b.n	80125e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80125c6:	4b82      	ldr	r3, [pc, #520]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80125c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125ca:	4a81      	ldr	r2, [pc, #516]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80125cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80125d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80125d2:	e00c      	b.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	3324      	adds	r3, #36	; 0x24
 80125d8:	2101      	movs	r1, #1
 80125da:	4618      	mov	r0, r3
 80125dc:	f000 fc6a 	bl	8012eb4 <RCCEx_PLL3_Config>
 80125e0:	4603      	mov	r3, r0
 80125e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80125e4:	e003      	b.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80125e6:	2301      	movs	r3, #1
 80125e8:	75fb      	strb	r3, [r7, #23]
      break;
 80125ea:	e000      	b.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80125ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80125ee:	7dfb      	ldrb	r3, [r7, #23]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d10a      	bne.n	801260a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80125f4:	4b76      	ldr	r3, [pc, #472]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80125f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012602:	4973      	ldr	r1, [pc, #460]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012604:	4313      	orrs	r3, r2
 8012606:	654b      	str	r3, [r1, #84]	; 0x54
 8012608:	e001      	b.n	801260e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801260a:	7dfb      	ldrb	r3, [r7, #23]
 801260c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012616:	2b00      	cmp	r3, #0
 8012618:	d029      	beq.n	801266e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801261e:	2b00      	cmp	r3, #0
 8012620:	d003      	beq.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8012622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012626:	d007      	beq.n	8012638 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8012628:	e00f      	b.n	801264a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801262a:	4b69      	ldr	r3, [pc, #420]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801262e:	4a68      	ldr	r2, [pc, #416]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8012636:	e00b      	b.n	8012650 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	3304      	adds	r3, #4
 801263c:	2102      	movs	r1, #2
 801263e:	4618      	mov	r0, r3
 8012640:	f000 fb86 	bl	8012d50 <RCCEx_PLL2_Config>
 8012644:	4603      	mov	r3, r0
 8012646:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8012648:	e002      	b.n	8012650 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 801264a:	2301      	movs	r3, #1
 801264c:	75fb      	strb	r3, [r7, #23]
      break;
 801264e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012650:	7dfb      	ldrb	r3, [r7, #23]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d109      	bne.n	801266a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012656:	4b5e      	ldr	r3, [pc, #376]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801265a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012662:	495b      	ldr	r1, [pc, #364]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012664:	4313      	orrs	r3, r2
 8012666:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012668:	e001      	b.n	801266e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801266a:	7dfb      	ldrb	r3, [r7, #23]
 801266c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012676:	2b00      	cmp	r3, #0
 8012678:	d00a      	beq.n	8012690 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	3324      	adds	r3, #36	; 0x24
 801267e:	2102      	movs	r1, #2
 8012680:	4618      	mov	r0, r3
 8012682:	f000 fc17 	bl	8012eb4 <RCCEx_PLL3_Config>
 8012686:	4603      	mov	r3, r0
 8012688:	2b00      	cmp	r3, #0
 801268a:	d001      	beq.n	8012690 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 801268c:	2301      	movs	r3, #1
 801268e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012698:	2b00      	cmp	r3, #0
 801269a:	d030      	beq.n	80126fe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80126a4:	d017      	beq.n	80126d6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80126a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80126aa:	d811      	bhi.n	80126d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80126ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126b0:	d013      	beq.n	80126da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80126b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126b6:	d80b      	bhi.n	80126d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d010      	beq.n	80126de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80126bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80126c0:	d106      	bne.n	80126d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126c2:	4b43      	ldr	r3, [pc, #268]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80126c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c6:	4a42      	ldr	r2, [pc, #264]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80126c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80126cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80126ce:	e007      	b.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80126d0:	2301      	movs	r3, #1
 80126d2:	75fb      	strb	r3, [r7, #23]
      break;
 80126d4:	e004      	b.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80126d6:	bf00      	nop
 80126d8:	e002      	b.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80126da:	bf00      	nop
 80126dc:	e000      	b.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80126de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80126e0:	7dfb      	ldrb	r3, [r7, #23]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d109      	bne.n	80126fa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80126e6:	4b3a      	ldr	r3, [pc, #232]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80126e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126f2:	4937      	ldr	r1, [pc, #220]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80126f4:	4313      	orrs	r3, r2
 80126f6:	654b      	str	r3, [r1, #84]	; 0x54
 80126f8:	e001      	b.n	80126fe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126fa:	7dfb      	ldrb	r3, [r7, #23]
 80126fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012706:	2b00      	cmp	r3, #0
 8012708:	d008      	beq.n	801271c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801270a:	4b31      	ldr	r3, [pc, #196]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801270c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801270e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012716:	492e      	ldr	r1, [pc, #184]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012718:	4313      	orrs	r3, r2
 801271a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012724:	2b00      	cmp	r3, #0
 8012726:	d009      	beq.n	801273c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8012728:	4b29      	ldr	r3, [pc, #164]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801272a:	691b      	ldr	r3, [r3, #16]
 801272c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012736:	4926      	ldr	r1, [pc, #152]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012738:	4313      	orrs	r3, r2
 801273a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012744:	2b00      	cmp	r3, #0
 8012746:	d008      	beq.n	801275a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012748:	4b21      	ldr	r3, [pc, #132]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801274a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801274c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012754:	491e      	ldr	r1, [pc, #120]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012756:	4313      	orrs	r3, r2
 8012758:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012762:	2b00      	cmp	r3, #0
 8012764:	d00d      	beq.n	8012782 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012766:	4b1a      	ldr	r3, [pc, #104]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012768:	691b      	ldr	r3, [r3, #16]
 801276a:	4a19      	ldr	r2, [pc, #100]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801276c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012770:	6113      	str	r3, [r2, #16]
 8012772:	4b17      	ldr	r3, [pc, #92]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012774:	691a      	ldr	r2, [r3, #16]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801277c:	4914      	ldr	r1, [pc, #80]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801277e:	4313      	orrs	r3, r2
 8012780:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	da08      	bge.n	801279c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801278a:	4b11      	ldr	r3, [pc, #68]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801278e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012796:	490e      	ldr	r1, [pc, #56]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012798:	4313      	orrs	r3, r2
 801279a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d009      	beq.n	80127bc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80127a8:	4b09      	ldr	r3, [pc, #36]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80127aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80127b6:	4906      	ldr	r1, [pc, #24]	; (80127d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80127b8:	4313      	orrs	r3, r2
 80127ba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80127bc:	7dbb      	ldrb	r3, [r7, #22]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d101      	bne.n	80127c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80127c2:	2300      	movs	r3, #0
 80127c4:	e000      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80127c6:	2301      	movs	r3, #1
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3718      	adds	r7, #24
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	58024400 	.word	0x58024400

080127d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80127d8:	f7ff f81e 	bl	8011818 <HAL_RCC_GetHCLKFreq>
 80127dc:	4602      	mov	r2, r0
 80127de:	4b06      	ldr	r3, [pc, #24]	; (80127f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80127e0:	6a1b      	ldr	r3, [r3, #32]
 80127e2:	091b      	lsrs	r3, r3, #4
 80127e4:	f003 0307 	and.w	r3, r3, #7
 80127e8:	4904      	ldr	r1, [pc, #16]	; (80127fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80127ea:	5ccb      	ldrb	r3, [r1, r3]
 80127ec:	f003 031f 	and.w	r3, r3, #31
 80127f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	bd80      	pop	{r7, pc}
 80127f8:	58024400 	.word	0x58024400
 80127fc:	08029d68 	.word	0x08029d68

08012800 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8012800:	b480      	push	{r7}
 8012802:	b089      	sub	sp, #36	; 0x24
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012808:	4ba1      	ldr	r3, [pc, #644]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801280c:	f003 0303 	and.w	r3, r3, #3
 8012810:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8012812:	4b9f      	ldr	r3, [pc, #636]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012816:	0b1b      	lsrs	r3, r3, #12
 8012818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801281c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801281e:	4b9c      	ldr	r3, [pc, #624]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012822:	091b      	lsrs	r3, r3, #4
 8012824:	f003 0301 	and.w	r3, r3, #1
 8012828:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801282a:	4b99      	ldr	r3, [pc, #612]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801282e:	08db      	lsrs	r3, r3, #3
 8012830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012834:	693a      	ldr	r2, [r7, #16]
 8012836:	fb02 f303 	mul.w	r3, r2, r3
 801283a:	ee07 3a90 	vmov	s15, r3
 801283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012842:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	2b00      	cmp	r3, #0
 801284a:	f000 8111 	beq.w	8012a70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	2b02      	cmp	r3, #2
 8012852:	f000 8083 	beq.w	801295c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8012856:	69bb      	ldr	r3, [r7, #24]
 8012858:	2b02      	cmp	r3, #2
 801285a:	f200 80a1 	bhi.w	80129a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801285e:	69bb      	ldr	r3, [r7, #24]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d003      	beq.n	801286c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8012864:	69bb      	ldr	r3, [r7, #24]
 8012866:	2b01      	cmp	r3, #1
 8012868:	d056      	beq.n	8012918 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801286a:	e099      	b.n	80129a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801286c:	4b88      	ldr	r3, [pc, #544]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	f003 0320 	and.w	r3, r3, #32
 8012874:	2b00      	cmp	r3, #0
 8012876:	d02d      	beq.n	80128d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012878:	4b85      	ldr	r3, [pc, #532]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	08db      	lsrs	r3, r3, #3
 801287e:	f003 0303 	and.w	r3, r3, #3
 8012882:	4a84      	ldr	r2, [pc, #528]	; (8012a94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8012884:	fa22 f303 	lsr.w	r3, r2, r3
 8012888:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	ee07 3a90 	vmov	s15, r3
 8012890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012894:	697b      	ldr	r3, [r7, #20]
 8012896:	ee07 3a90 	vmov	s15, r3
 801289a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801289e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80128a2:	4b7b      	ldr	r3, [pc, #492]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80128a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128aa:	ee07 3a90 	vmov	s15, r3
 80128ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80128b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80128b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80128ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80128be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80128c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80128c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80128ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80128d2:	e087      	b.n	80129e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	ee07 3a90 	vmov	s15, r3
 80128da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012a9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80128e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80128e6:	4b6a      	ldr	r3, [pc, #424]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80128e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128ee:	ee07 3a90 	vmov	s15, r3
 80128f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80128f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80128fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80128fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801290a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012916:	e065      	b.n	80129e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	ee07 3a90 	vmov	s15, r3
 801291e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012922:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801292a:	4b59      	ldr	r3, [pc, #356]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012932:	ee07 3a90 	vmov	s15, r3
 8012936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801293a:	ed97 6a03 	vldr	s12, [r7, #12]
 801293e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801294a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801294e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801295a:	e043      	b.n	80129e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	ee07 3a90 	vmov	s15, r3
 8012962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012966:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801296a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801296e:	4b48      	ldr	r3, [pc, #288]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012976:	ee07 3a90 	vmov	s15, r3
 801297a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801297e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012982:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801298a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801298e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012996:	ee67 7a27 	vmul.f32	s15, s14, s15
 801299a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801299e:	e021      	b.n	80129e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	ee07 3a90 	vmov	s15, r3
 80129a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80129ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129b2:	4b37      	ldr	r3, [pc, #220]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80129b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129ba:	ee07 3a90 	vmov	s15, r3
 80129be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80129c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80129ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80129ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80129d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80129e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80129e4:	4b2a      	ldr	r3, [pc, #168]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80129e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129e8:	0a5b      	lsrs	r3, r3, #9
 80129ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129ee:	ee07 3a90 	vmov	s15, r3
 80129f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80129fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80129fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8012a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012a0a:	ee17 2a90 	vmov	r2, s15
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8012a12:	4b1f      	ldr	r3, [pc, #124]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a16:	0c1b      	lsrs	r3, r3, #16
 8012a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a1c:	ee07 3a90 	vmov	s15, r3
 8012a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8012a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012a38:	ee17 2a90 	vmov	r2, s15
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8012a40:	4b13      	ldr	r3, [pc, #76]	; (8012a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a44:	0e1b      	lsrs	r3, r3, #24
 8012a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a4a:	ee07 3a90 	vmov	s15, r3
 8012a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8012a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012a66:	ee17 2a90 	vmov	r2, s15
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8012a6e:	e008      	b.n	8012a82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2200      	movs	r2, #0
 8012a74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	609a      	str	r2, [r3, #8]
}
 8012a82:	bf00      	nop
 8012a84:	3724      	adds	r7, #36	; 0x24
 8012a86:	46bd      	mov	sp, r7
 8012a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8c:	4770      	bx	lr
 8012a8e:	bf00      	nop
 8012a90:	58024400 	.word	0x58024400
 8012a94:	03d09000 	.word	0x03d09000
 8012a98:	46000000 	.word	0x46000000
 8012a9c:	4c742400 	.word	0x4c742400
 8012aa0:	4a742400 	.word	0x4a742400
 8012aa4:	4bbebc20 	.word	0x4bbebc20

08012aa8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b089      	sub	sp, #36	; 0x24
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012ab0:	4ba1      	ldr	r3, [pc, #644]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ab4:	f003 0303 	and.w	r3, r3, #3
 8012ab8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8012aba:	4b9f      	ldr	r3, [pc, #636]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012abe:	0d1b      	lsrs	r3, r3, #20
 8012ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ac4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8012ac6:	4b9c      	ldr	r3, [pc, #624]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aca:	0a1b      	lsrs	r3, r3, #8
 8012acc:	f003 0301 	and.w	r3, r3, #1
 8012ad0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8012ad2:	4b99      	ldr	r3, [pc, #612]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ad6:	08db      	lsrs	r3, r3, #3
 8012ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012adc:	693a      	ldr	r2, [r7, #16]
 8012ade:	fb02 f303 	mul.w	r3, r2, r3
 8012ae2:	ee07 3a90 	vmov	s15, r3
 8012ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012aea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8012aee:	697b      	ldr	r3, [r7, #20]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	f000 8111 	beq.w	8012d18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	2b02      	cmp	r3, #2
 8012afa:	f000 8083 	beq.w	8012c04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8012afe:	69bb      	ldr	r3, [r7, #24]
 8012b00:	2b02      	cmp	r3, #2
 8012b02:	f200 80a1 	bhi.w	8012c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8012b06:	69bb      	ldr	r3, [r7, #24]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d003      	beq.n	8012b14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8012b0c:	69bb      	ldr	r3, [r7, #24]
 8012b0e:	2b01      	cmp	r3, #1
 8012b10:	d056      	beq.n	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8012b12:	e099      	b.n	8012c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012b14:	4b88      	ldr	r3, [pc, #544]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	f003 0320 	and.w	r3, r3, #32
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d02d      	beq.n	8012b7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012b20:	4b85      	ldr	r3, [pc, #532]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	08db      	lsrs	r3, r3, #3
 8012b26:	f003 0303 	and.w	r3, r3, #3
 8012b2a:	4a84      	ldr	r2, [pc, #528]	; (8012d3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8012b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8012b30:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	ee07 3a90 	vmov	s15, r3
 8012b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	ee07 3a90 	vmov	s15, r3
 8012b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012b4a:	4b7b      	ldr	r3, [pc, #492]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b52:	ee07 3a90 	vmov	s15, r3
 8012b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8012b5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8012b7a:	e087      	b.n	8012c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	ee07 3a90 	vmov	s15, r3
 8012b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012d44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8012b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012b8e:	4b6a      	ldr	r3, [pc, #424]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b96:	ee07 3a90 	vmov	s15, r3
 8012b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012ba2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012bbe:	e065      	b.n	8012c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	ee07 3a90 	vmov	s15, r3
 8012bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012bca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012bd2:	4b59      	ldr	r3, [pc, #356]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bda:	ee07 3a90 	vmov	s15, r3
 8012bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8012be6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012c02:	e043      	b.n	8012c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	ee07 3a90 	vmov	s15, r3
 8012c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8012c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c16:	4b48      	ldr	r3, [pc, #288]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c1e:	ee07 3a90 	vmov	s15, r3
 8012c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8012c2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012c46:	e021      	b.n	8012c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	ee07 3a90 	vmov	s15, r3
 8012c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c5a:	4b37      	ldr	r3, [pc, #220]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c62:	ee07 3a90 	vmov	s15, r3
 8012c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8012c6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012c8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8012c8c:	4b2a      	ldr	r3, [pc, #168]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c90:	0a5b      	lsrs	r3, r3, #9
 8012c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c96:	ee07 3a90 	vmov	s15, r3
 8012c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8012caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012cb2:	ee17 2a90 	vmov	r2, s15
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8012cba:	4b1f      	ldr	r3, [pc, #124]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cbe:	0c1b      	lsrs	r3, r3, #16
 8012cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cc4:	ee07 3a90 	vmov	s15, r3
 8012cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8012cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ce0:	ee17 2a90 	vmov	r2, s15
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8012ce8:	4b13      	ldr	r3, [pc, #76]	; (8012d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cec:	0e1b      	lsrs	r3, r3, #24
 8012cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cf2:	ee07 3a90 	vmov	s15, r3
 8012cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8012d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012d0e:	ee17 2a90 	vmov	r2, s15
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8012d16:	e008      	b.n	8012d2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2200      	movs	r2, #0
 8012d22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2200      	movs	r2, #0
 8012d28:	609a      	str	r2, [r3, #8]
}
 8012d2a:	bf00      	nop
 8012d2c:	3724      	adds	r7, #36	; 0x24
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d34:	4770      	bx	lr
 8012d36:	bf00      	nop
 8012d38:	58024400 	.word	0x58024400
 8012d3c:	03d09000 	.word	0x03d09000
 8012d40:	46000000 	.word	0x46000000
 8012d44:	4c742400 	.word	0x4c742400
 8012d48:	4a742400 	.word	0x4a742400
 8012d4c:	4bbebc20 	.word	0x4bbebc20

08012d50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b084      	sub	sp, #16
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012d5e:	4b53      	ldr	r3, [pc, #332]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d62:	f003 0303 	and.w	r3, r3, #3
 8012d66:	2b03      	cmp	r3, #3
 8012d68:	d101      	bne.n	8012d6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	e099      	b.n	8012ea2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012d6e:	4b4f      	ldr	r3, [pc, #316]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	4a4e      	ldr	r2, [pc, #312]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012d74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012d7a:	f7fa fbef 	bl	800d55c <HAL_GetTick>
 8012d7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012d80:	e008      	b.n	8012d94 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012d82:	f7fa fbeb 	bl	800d55c <HAL_GetTick>
 8012d86:	4602      	mov	r2, r0
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	2b02      	cmp	r3, #2
 8012d8e:	d901      	bls.n	8012d94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012d90:	2303      	movs	r3, #3
 8012d92:	e086      	b.n	8012ea2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012d94:	4b45      	ldr	r3, [pc, #276]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d1f0      	bne.n	8012d82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012da0:	4b42      	ldr	r3, [pc, #264]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012da4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	031b      	lsls	r3, r3, #12
 8012dae:	493f      	ldr	r1, [pc, #252]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012db0:	4313      	orrs	r3, r2
 8012db2:	628b      	str	r3, [r1, #40]	; 0x28
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	3b01      	subs	r3, #1
 8012dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	689b      	ldr	r3, [r3, #8]
 8012dc2:	3b01      	subs	r3, #1
 8012dc4:	025b      	lsls	r3, r3, #9
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	431a      	orrs	r2, r3
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	68db      	ldr	r3, [r3, #12]
 8012dce:	3b01      	subs	r3, #1
 8012dd0:	041b      	lsls	r3, r3, #16
 8012dd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012dd6:	431a      	orrs	r2, r3
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	691b      	ldr	r3, [r3, #16]
 8012ddc:	3b01      	subs	r3, #1
 8012dde:	061b      	lsls	r3, r3, #24
 8012de0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012de4:	4931      	ldr	r1, [pc, #196]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012de6:	4313      	orrs	r3, r2
 8012de8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012dea:	4b30      	ldr	r3, [pc, #192]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	695b      	ldr	r3, [r3, #20]
 8012df6:	492d      	ldr	r1, [pc, #180]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012dfc:	4b2b      	ldr	r3, [pc, #172]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e00:	f023 0220 	bic.w	r2, r3, #32
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	699b      	ldr	r3, [r3, #24]
 8012e08:	4928      	ldr	r1, [pc, #160]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e0a:	4313      	orrs	r3, r2
 8012e0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012e0e:	4b27      	ldr	r3, [pc, #156]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e12:	4a26      	ldr	r2, [pc, #152]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e14:	f023 0310 	bic.w	r3, r3, #16
 8012e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012e1a:	4b24      	ldr	r3, [pc, #144]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012e1e:	4b24      	ldr	r3, [pc, #144]	; (8012eb0 <RCCEx_PLL2_Config+0x160>)
 8012e20:	4013      	ands	r3, r2
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	69d2      	ldr	r2, [r2, #28]
 8012e26:	00d2      	lsls	r2, r2, #3
 8012e28:	4920      	ldr	r1, [pc, #128]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e2a:	4313      	orrs	r3, r2
 8012e2c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012e2e:	4b1f      	ldr	r3, [pc, #124]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e32:	4a1e      	ldr	r2, [pc, #120]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e34:	f043 0310 	orr.w	r3, r3, #16
 8012e38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d106      	bne.n	8012e4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012e40:	4b1a      	ldr	r3, [pc, #104]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e44:	4a19      	ldr	r2, [pc, #100]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012e4c:	e00f      	b.n	8012e6e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	d106      	bne.n	8012e62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012e54:	4b15      	ldr	r3, [pc, #84]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e58:	4a14      	ldr	r2, [pc, #80]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012e60:	e005      	b.n	8012e6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012e62:	4b12      	ldr	r3, [pc, #72]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e66:	4a11      	ldr	r2, [pc, #68]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012e6e:	4b0f      	ldr	r3, [pc, #60]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	4a0e      	ldr	r2, [pc, #56]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012e7a:	f7fa fb6f 	bl	800d55c <HAL_GetTick>
 8012e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012e80:	e008      	b.n	8012e94 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012e82:	f7fa fb6b 	bl	800d55c <HAL_GetTick>
 8012e86:	4602      	mov	r2, r0
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	1ad3      	subs	r3, r2, r3
 8012e8c:	2b02      	cmp	r3, #2
 8012e8e:	d901      	bls.n	8012e94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012e90:	2303      	movs	r3, #3
 8012e92:	e006      	b.n	8012ea2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012e94:	4b05      	ldr	r3, [pc, #20]	; (8012eac <RCCEx_PLL2_Config+0x15c>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d0f0      	beq.n	8012e82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8012ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3710      	adds	r7, #16
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	58024400 	.word	0x58024400
 8012eb0:	ffff0007 	.word	0xffff0007

08012eb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b084      	sub	sp, #16
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012ec2:	4b53      	ldr	r3, [pc, #332]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ec6:	f003 0303 	and.w	r3, r3, #3
 8012eca:	2b03      	cmp	r3, #3
 8012ecc:	d101      	bne.n	8012ed2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8012ece:	2301      	movs	r3, #1
 8012ed0:	e099      	b.n	8013006 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012ed2:	4b4f      	ldr	r3, [pc, #316]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	4a4e      	ldr	r2, [pc, #312]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012ede:	f7fa fb3d 	bl	800d55c <HAL_GetTick>
 8012ee2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012ee4:	e008      	b.n	8012ef8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012ee6:	f7fa fb39 	bl	800d55c <HAL_GetTick>
 8012eea:	4602      	mov	r2, r0
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	1ad3      	subs	r3, r2, r3
 8012ef0:	2b02      	cmp	r3, #2
 8012ef2:	d901      	bls.n	8012ef8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012ef4:	2303      	movs	r3, #3
 8012ef6:	e086      	b.n	8013006 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012ef8:	4b45      	ldr	r3, [pc, #276]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d1f0      	bne.n	8012ee6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012f04:	4b42      	ldr	r3, [pc, #264]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f08:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	051b      	lsls	r3, r3, #20
 8012f12:	493f      	ldr	r1, [pc, #252]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f14:	4313      	orrs	r3, r2
 8012f16:	628b      	str	r3, [r1, #40]	; 0x28
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	3b01      	subs	r3, #1
 8012f1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	689b      	ldr	r3, [r3, #8]
 8012f26:	3b01      	subs	r3, #1
 8012f28:	025b      	lsls	r3, r3, #9
 8012f2a:	b29b      	uxth	r3, r3
 8012f2c:	431a      	orrs	r2, r3
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	68db      	ldr	r3, [r3, #12]
 8012f32:	3b01      	subs	r3, #1
 8012f34:	041b      	lsls	r3, r3, #16
 8012f36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012f3a:	431a      	orrs	r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	691b      	ldr	r3, [r3, #16]
 8012f40:	3b01      	subs	r3, #1
 8012f42:	061b      	lsls	r3, r3, #24
 8012f44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012f48:	4931      	ldr	r1, [pc, #196]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f4a:	4313      	orrs	r3, r2
 8012f4c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012f4e:	4b30      	ldr	r3, [pc, #192]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	695b      	ldr	r3, [r3, #20]
 8012f5a:	492d      	ldr	r1, [pc, #180]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f5c:	4313      	orrs	r3, r2
 8012f5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012f60:	4b2b      	ldr	r3, [pc, #172]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	699b      	ldr	r3, [r3, #24]
 8012f6c:	4928      	ldr	r1, [pc, #160]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f6e:	4313      	orrs	r3, r2
 8012f70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012f72:	4b27      	ldr	r3, [pc, #156]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f76:	4a26      	ldr	r2, [pc, #152]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012f7e:	4b24      	ldr	r3, [pc, #144]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f82:	4b24      	ldr	r3, [pc, #144]	; (8013014 <RCCEx_PLL3_Config+0x160>)
 8012f84:	4013      	ands	r3, r2
 8012f86:	687a      	ldr	r2, [r7, #4]
 8012f88:	69d2      	ldr	r2, [r2, #28]
 8012f8a:	00d2      	lsls	r2, r2, #3
 8012f8c:	4920      	ldr	r1, [pc, #128]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f8e:	4313      	orrs	r3, r2
 8012f90:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8012f92:	4b1f      	ldr	r3, [pc, #124]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f96:	4a1e      	ldr	r2, [pc, #120]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d106      	bne.n	8012fb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012fa4:	4b1a      	ldr	r3, [pc, #104]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fa8:	4a19      	ldr	r2, [pc, #100]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012faa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012fae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012fb0:	e00f      	b.n	8012fd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d106      	bne.n	8012fc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012fb8:	4b15      	ldr	r3, [pc, #84]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fbc:	4a14      	ldr	r2, [pc, #80]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012fbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012fc4:	e005      	b.n	8012fd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012fc6:	4b12      	ldr	r3, [pc, #72]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fca:	4a11      	ldr	r2, [pc, #68]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8012fd2:	4b0f      	ldr	r3, [pc, #60]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	4a0e      	ldr	r2, [pc, #56]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012fde:	f7fa fabd 	bl	800d55c <HAL_GetTick>
 8012fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012fe4:	e008      	b.n	8012ff8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012fe6:	f7fa fab9 	bl	800d55c <HAL_GetTick>
 8012fea:	4602      	mov	r2, r0
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	1ad3      	subs	r3, r2, r3
 8012ff0:	2b02      	cmp	r3, #2
 8012ff2:	d901      	bls.n	8012ff8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012ff4:	2303      	movs	r3, #3
 8012ff6:	e006      	b.n	8013006 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012ff8:	4b05      	ldr	r3, [pc, #20]	; (8013010 <RCCEx_PLL3_Config+0x15c>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013000:	2b00      	cmp	r3, #0
 8013002:	d0f0      	beq.n	8012fe6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8013004:	7bfb      	ldrb	r3, [r7, #15]
}
 8013006:	4618      	mov	r0, r3
 8013008:	3710      	adds	r7, #16
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
 801300e:	bf00      	nop
 8013010:	58024400 	.word	0x58024400
 8013014:	ffff0007 	.word	0xffff0007

08013018 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d101      	bne.n	801302c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8013028:	2301      	movs	r3, #1
 801302a:	e02b      	b.n	8013084 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013032:	b2db      	uxtb	r3, r3
 8013034:	2b00      	cmp	r3, #0
 8013036:	d106      	bne.n	8013046 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2200      	movs	r2, #0
 801303c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7ee fbd5 	bl	80017f0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2202      	movs	r2, #2
 801304a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681a      	ldr	r2, [r3, #0]
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	3304      	adds	r3, #4
 8013056:	4619      	mov	r1, r3
 8013058:	4610      	mov	r0, r2
 801305a:	f001 fc69 	bl	8014930 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6818      	ldr	r0, [r3, #0]
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	685b      	ldr	r3, [r3, #4]
 8013066:	461a      	mov	r2, r3
 8013068:	6839      	ldr	r1, [r7, #0]
 801306a:	f001 fcbd 	bl	80149e8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 801306e:	4b07      	ldr	r3, [pc, #28]	; (801308c <HAL_SDRAM_Init+0x74>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	4a06      	ldr	r2, [pc, #24]	; (801308c <HAL_SDRAM_Init+0x74>)
 8013074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013078:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2201      	movs	r2, #1
 801307e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013082:	2300      	movs	r3, #0
}
 8013084:	4618      	mov	r0, r3
 8013086:	3708      	adds	r7, #8
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}
 801308c:	52004000 	.word	0x52004000

08013090 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f7ee fbed 	bl	8001878 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681a      	ldr	r2, [r3, #0]
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	4619      	mov	r1, r3
 80130a8:	4610      	mov	r0, r2
 80130aa:	f001 fd07 	bl	8014abc <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2200      	movs	r2, #0
 80130b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2200      	movs	r2, #0
 80130ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 80130be:	2300      	movs	r3, #0
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b086      	sub	sp, #24
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	60b9      	str	r1, [r7, #8]
 80130d2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80130da:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80130dc:	7dfb      	ldrb	r3, [r7, #23]
 80130de:	2b02      	cmp	r3, #2
 80130e0:	d101      	bne.n	80130e6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80130e2:	2302      	movs	r3, #2
 80130e4:	e021      	b.n	801312a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80130e6:	7dfb      	ldrb	r3, [r7, #23]
 80130e8:	2b01      	cmp	r3, #1
 80130ea:	d002      	beq.n	80130f2 <HAL_SDRAM_SendCommand+0x2a>
 80130ec:	7dfb      	ldrb	r3, [r7, #23]
 80130ee:	2b05      	cmp	r3, #5
 80130f0:	d118      	bne.n	8013124 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	2202      	movs	r2, #2
 80130f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	687a      	ldr	r2, [r7, #4]
 8013100:	68b9      	ldr	r1, [r7, #8]
 8013102:	4618      	mov	r0, r3
 8013104:	f001 fcfc 	bl	8014b00 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	2b02      	cmp	r3, #2
 801310e:	d104      	bne.n	801311a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	2205      	movs	r2, #5
 8013114:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013118:	e006      	b.n	8013128 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2201      	movs	r2, #1
 801311e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8013122:	e001      	b.n	8013128 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8013124:	2301      	movs	r3, #1
 8013126:	e000      	b.n	801312a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8013128:	2300      	movs	r3, #0
}
 801312a:	4618      	mov	r0, r3
 801312c:	3718      	adds	r7, #24
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}

08013132 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8013132:	b580      	push	{r7, lr}
 8013134:	b082      	sub	sp, #8
 8013136:	af00      	add	r7, sp, #0
 8013138:	6078      	str	r0, [r7, #4]
 801313a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013142:	b2db      	uxtb	r3, r3
 8013144:	2b02      	cmp	r3, #2
 8013146:	d101      	bne.n	801314c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8013148:	2302      	movs	r3, #2
 801314a:	e016      	b.n	801317a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013152:	b2db      	uxtb	r3, r3
 8013154:	2b01      	cmp	r3, #1
 8013156:	d10f      	bne.n	8013178 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2202      	movs	r2, #2
 801315c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	6839      	ldr	r1, [r7, #0]
 8013166:	4618      	mov	r0, r3
 8013168:	f001 fcee 	bl	8014b48 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2201      	movs	r2, #1
 8013170:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8013174:	2300      	movs	r3, #0
 8013176:	e000      	b.n	801317a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8013178:	2301      	movs	r3, #1
}
 801317a:	4618      	mov	r0, r3
 801317c:	3708      	adds	r7, #8
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}

08013182 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013182:	b580      	push	{r7, lr}
 8013184:	b082      	sub	sp, #8
 8013186:	af00      	add	r7, sp, #0
 8013188:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d101      	bne.n	8013194 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013190:	2301      	movs	r3, #1
 8013192:	e049      	b.n	8013228 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801319a:	b2db      	uxtb	r3, r3
 801319c:	2b00      	cmp	r3, #0
 801319e:	d106      	bne.n	80131ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2200      	movs	r2, #0
 80131a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f000 f841 	bl	8013230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	2202      	movs	r2, #2
 80131b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681a      	ldr	r2, [r3, #0]
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	3304      	adds	r3, #4
 80131be:	4619      	mov	r1, r3
 80131c0:	4610      	mov	r0, r2
 80131c2:	f000 f9ff 	bl	80135c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2201      	movs	r2, #1
 80131ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2201      	movs	r2, #1
 80131d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2201      	movs	r2, #1
 80131da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2201      	movs	r2, #1
 80131e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2201      	movs	r2, #1
 80131ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2201      	movs	r2, #1
 80131f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2201      	movs	r2, #1
 80131fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2201      	movs	r2, #1
 8013202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2201      	movs	r2, #1
 801320a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2201      	movs	r2, #1
 8013212:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2201      	movs	r2, #1
 801321a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2201      	movs	r2, #1
 8013222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013226:	2300      	movs	r3, #0
}
 8013228:	4618      	mov	r0, r3
 801322a:	3708      	adds	r7, #8
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}

08013230 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8013230:	b480      	push	{r7}
 8013232:	b083      	sub	sp, #12
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013238:	bf00      	nop
 801323a:	370c      	adds	r7, #12
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr

08013244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013244:	b480      	push	{r7}
 8013246:	b085      	sub	sp, #20
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013252:	b2db      	uxtb	r3, r3
 8013254:	2b01      	cmp	r3, #1
 8013256:	d001      	beq.n	801325c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013258:	2301      	movs	r3, #1
 801325a:	e054      	b.n	8013306 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2202      	movs	r2, #2
 8013260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	68da      	ldr	r2, [r3, #12]
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f042 0201 	orr.w	r2, r2, #1
 8013272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	4a26      	ldr	r2, [pc, #152]	; (8013314 <HAL_TIM_Base_Start_IT+0xd0>)
 801327a:	4293      	cmp	r3, r2
 801327c:	d022      	beq.n	80132c4 <HAL_TIM_Base_Start_IT+0x80>
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013286:	d01d      	beq.n	80132c4 <HAL_TIM_Base_Start_IT+0x80>
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	4a22      	ldr	r2, [pc, #136]	; (8013318 <HAL_TIM_Base_Start_IT+0xd4>)
 801328e:	4293      	cmp	r3, r2
 8013290:	d018      	beq.n	80132c4 <HAL_TIM_Base_Start_IT+0x80>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	4a21      	ldr	r2, [pc, #132]	; (801331c <HAL_TIM_Base_Start_IT+0xd8>)
 8013298:	4293      	cmp	r3, r2
 801329a:	d013      	beq.n	80132c4 <HAL_TIM_Base_Start_IT+0x80>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	4a1f      	ldr	r2, [pc, #124]	; (8013320 <HAL_TIM_Base_Start_IT+0xdc>)
 80132a2:	4293      	cmp	r3, r2
 80132a4:	d00e      	beq.n	80132c4 <HAL_TIM_Base_Start_IT+0x80>
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	4a1e      	ldr	r2, [pc, #120]	; (8013324 <HAL_TIM_Base_Start_IT+0xe0>)
 80132ac:	4293      	cmp	r3, r2
 80132ae:	d009      	beq.n	80132c4 <HAL_TIM_Base_Start_IT+0x80>
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	4a1c      	ldr	r2, [pc, #112]	; (8013328 <HAL_TIM_Base_Start_IT+0xe4>)
 80132b6:	4293      	cmp	r3, r2
 80132b8:	d004      	beq.n	80132c4 <HAL_TIM_Base_Start_IT+0x80>
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	4a1b      	ldr	r2, [pc, #108]	; (801332c <HAL_TIM_Base_Start_IT+0xe8>)
 80132c0:	4293      	cmp	r3, r2
 80132c2:	d115      	bne.n	80132f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	689a      	ldr	r2, [r3, #8]
 80132ca:	4b19      	ldr	r3, [pc, #100]	; (8013330 <HAL_TIM_Base_Start_IT+0xec>)
 80132cc:	4013      	ands	r3, r2
 80132ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	2b06      	cmp	r3, #6
 80132d4:	d015      	beq.n	8013302 <HAL_TIM_Base_Start_IT+0xbe>
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132dc:	d011      	beq.n	8013302 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	f042 0201 	orr.w	r2, r2, #1
 80132ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80132ee:	e008      	b.n	8013302 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	f042 0201 	orr.w	r2, r2, #1
 80132fe:	601a      	str	r2, [r3, #0]
 8013300:	e000      	b.n	8013304 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013304:	2300      	movs	r3, #0
}
 8013306:	4618      	mov	r0, r3
 8013308:	3714      	adds	r7, #20
 801330a:	46bd      	mov	sp, r7
 801330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013310:	4770      	bx	lr
 8013312:	bf00      	nop
 8013314:	40010000 	.word	0x40010000
 8013318:	40000400 	.word	0x40000400
 801331c:	40000800 	.word	0x40000800
 8013320:	40000c00 	.word	0x40000c00
 8013324:	40010400 	.word	0x40010400
 8013328:	40001800 	.word	0x40001800
 801332c:	40014000 	.word	0x40014000
 8013330:	00010007 	.word	0x00010007

08013334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	691b      	ldr	r3, [r3, #16]
 8013342:	f003 0302 	and.w	r3, r3, #2
 8013346:	2b02      	cmp	r3, #2
 8013348:	d122      	bne.n	8013390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	68db      	ldr	r3, [r3, #12]
 8013350:	f003 0302 	and.w	r3, r3, #2
 8013354:	2b02      	cmp	r3, #2
 8013356:	d11b      	bne.n	8013390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	f06f 0202 	mvn.w	r2, #2
 8013360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2201      	movs	r2, #1
 8013366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	699b      	ldr	r3, [r3, #24]
 801336e:	f003 0303 	and.w	r3, r3, #3
 8013372:	2b00      	cmp	r3, #0
 8013374:	d003      	beq.n	801337e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f000 f905 	bl	8013586 <HAL_TIM_IC_CaptureCallback>
 801337c:	e005      	b.n	801338a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f000 f8f7 	bl	8013572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f000 f908 	bl	801359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	2200      	movs	r2, #0
 801338e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	691b      	ldr	r3, [r3, #16]
 8013396:	f003 0304 	and.w	r3, r3, #4
 801339a:	2b04      	cmp	r3, #4
 801339c:	d122      	bne.n	80133e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	68db      	ldr	r3, [r3, #12]
 80133a4:	f003 0304 	and.w	r3, r3, #4
 80133a8:	2b04      	cmp	r3, #4
 80133aa:	d11b      	bne.n	80133e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	f06f 0204 	mvn.w	r2, #4
 80133b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2202      	movs	r2, #2
 80133ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	699b      	ldr	r3, [r3, #24]
 80133c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d003      	beq.n	80133d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f000 f8db 	bl	8013586 <HAL_TIM_IC_CaptureCallback>
 80133d0:	e005      	b.n	80133de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f000 f8cd 	bl	8013572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f000 f8de 	bl	801359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2200      	movs	r2, #0
 80133e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	691b      	ldr	r3, [r3, #16]
 80133ea:	f003 0308 	and.w	r3, r3, #8
 80133ee:	2b08      	cmp	r3, #8
 80133f0:	d122      	bne.n	8013438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	68db      	ldr	r3, [r3, #12]
 80133f8:	f003 0308 	and.w	r3, r3, #8
 80133fc:	2b08      	cmp	r3, #8
 80133fe:	d11b      	bne.n	8013438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	f06f 0208 	mvn.w	r2, #8
 8013408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	2204      	movs	r2, #4
 801340e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	69db      	ldr	r3, [r3, #28]
 8013416:	f003 0303 	and.w	r3, r3, #3
 801341a:	2b00      	cmp	r3, #0
 801341c:	d003      	beq.n	8013426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f000 f8b1 	bl	8013586 <HAL_TIM_IC_CaptureCallback>
 8013424:	e005      	b.n	8013432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f000 f8a3 	bl	8013572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f000 f8b4 	bl	801359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2200      	movs	r2, #0
 8013436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	691b      	ldr	r3, [r3, #16]
 801343e:	f003 0310 	and.w	r3, r3, #16
 8013442:	2b10      	cmp	r3, #16
 8013444:	d122      	bne.n	801348c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	f003 0310 	and.w	r3, r3, #16
 8013450:	2b10      	cmp	r3, #16
 8013452:	d11b      	bne.n	801348c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	f06f 0210 	mvn.w	r2, #16
 801345c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	2208      	movs	r2, #8
 8013462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	69db      	ldr	r3, [r3, #28]
 801346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801346e:	2b00      	cmp	r3, #0
 8013470:	d003      	beq.n	801347a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f000 f887 	bl	8013586 <HAL_TIM_IC_CaptureCallback>
 8013478:	e005      	b.n	8013486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 f879 	bl	8013572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f000 f88a 	bl	801359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	2200      	movs	r2, #0
 801348a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	691b      	ldr	r3, [r3, #16]
 8013492:	f003 0301 	and.w	r3, r3, #1
 8013496:	2b01      	cmp	r3, #1
 8013498:	d10e      	bne.n	80134b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	68db      	ldr	r3, [r3, #12]
 80134a0:	f003 0301 	and.w	r3, r3, #1
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d107      	bne.n	80134b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f06f 0201 	mvn.w	r2, #1
 80134b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	f7ed fd56 	bl	8000f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	691b      	ldr	r3, [r3, #16]
 80134be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134c2:	2b80      	cmp	r3, #128	; 0x80
 80134c4:	d10e      	bne.n	80134e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	68db      	ldr	r3, [r3, #12]
 80134cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134d0:	2b80      	cmp	r3, #128	; 0x80
 80134d2:	d107      	bne.n	80134e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80134dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f000 f914 	bl	801370c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	691b      	ldr	r3, [r3, #16]
 80134ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134f2:	d10e      	bne.n	8013512 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	68db      	ldr	r3, [r3, #12]
 80134fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134fe:	2b80      	cmp	r3, #128	; 0x80
 8013500:	d107      	bne.n	8013512 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801350a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f000 f907 	bl	8013720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	691b      	ldr	r3, [r3, #16]
 8013518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801351c:	2b40      	cmp	r3, #64	; 0x40
 801351e:	d10e      	bne.n	801353e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	68db      	ldr	r3, [r3, #12]
 8013526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801352a:	2b40      	cmp	r3, #64	; 0x40
 801352c:	d107      	bne.n	801353e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f000 f838 	bl	80135ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	691b      	ldr	r3, [r3, #16]
 8013544:	f003 0320 	and.w	r3, r3, #32
 8013548:	2b20      	cmp	r3, #32
 801354a:	d10e      	bne.n	801356a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	68db      	ldr	r3, [r3, #12]
 8013552:	f003 0320 	and.w	r3, r3, #32
 8013556:	2b20      	cmp	r3, #32
 8013558:	d107      	bne.n	801356a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	f06f 0220 	mvn.w	r2, #32
 8013562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f000 f8c7 	bl	80136f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801356a:	bf00      	nop
 801356c:	3708      	adds	r7, #8
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}

08013572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013572:	b480      	push	{r7}
 8013574:	b083      	sub	sp, #12
 8013576:	af00      	add	r7, sp, #0
 8013578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801357a:	bf00      	nop
 801357c:	370c      	adds	r7, #12
 801357e:	46bd      	mov	sp, r7
 8013580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013584:	4770      	bx	lr

08013586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013586:	b480      	push	{r7}
 8013588:	b083      	sub	sp, #12
 801358a:	af00      	add	r7, sp, #0
 801358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801358e:	bf00      	nop
 8013590:	370c      	adds	r7, #12
 8013592:	46bd      	mov	sp, r7
 8013594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013598:	4770      	bx	lr

0801359a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801359a:	b480      	push	{r7}
 801359c:	b083      	sub	sp, #12
 801359e:	af00      	add	r7, sp, #0
 80135a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80135a2:	bf00      	nop
 80135a4:	370c      	adds	r7, #12
 80135a6:	46bd      	mov	sp, r7
 80135a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ac:	4770      	bx	lr

080135ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80135ae:	b480      	push	{r7}
 80135b0:	b083      	sub	sp, #12
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80135b6:	bf00      	nop
 80135b8:	370c      	adds	r7, #12
 80135ba:	46bd      	mov	sp, r7
 80135bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c0:	4770      	bx	lr
	...

080135c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80135c4:	b480      	push	{r7}
 80135c6:	b085      	sub	sp, #20
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	4a40      	ldr	r2, [pc, #256]	; (80136d8 <TIM_Base_SetConfig+0x114>)
 80135d8:	4293      	cmp	r3, r2
 80135da:	d013      	beq.n	8013604 <TIM_Base_SetConfig+0x40>
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80135e2:	d00f      	beq.n	8013604 <TIM_Base_SetConfig+0x40>
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	4a3d      	ldr	r2, [pc, #244]	; (80136dc <TIM_Base_SetConfig+0x118>)
 80135e8:	4293      	cmp	r3, r2
 80135ea:	d00b      	beq.n	8013604 <TIM_Base_SetConfig+0x40>
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	4a3c      	ldr	r2, [pc, #240]	; (80136e0 <TIM_Base_SetConfig+0x11c>)
 80135f0:	4293      	cmp	r3, r2
 80135f2:	d007      	beq.n	8013604 <TIM_Base_SetConfig+0x40>
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	4a3b      	ldr	r2, [pc, #236]	; (80136e4 <TIM_Base_SetConfig+0x120>)
 80135f8:	4293      	cmp	r3, r2
 80135fa:	d003      	beq.n	8013604 <TIM_Base_SetConfig+0x40>
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	4a3a      	ldr	r2, [pc, #232]	; (80136e8 <TIM_Base_SetConfig+0x124>)
 8013600:	4293      	cmp	r3, r2
 8013602:	d108      	bne.n	8013616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801360a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	685b      	ldr	r3, [r3, #4]
 8013610:	68fa      	ldr	r2, [r7, #12]
 8013612:	4313      	orrs	r3, r2
 8013614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	4a2f      	ldr	r2, [pc, #188]	; (80136d8 <TIM_Base_SetConfig+0x114>)
 801361a:	4293      	cmp	r3, r2
 801361c:	d01f      	beq.n	801365e <TIM_Base_SetConfig+0x9a>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013624:	d01b      	beq.n	801365e <TIM_Base_SetConfig+0x9a>
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4a2c      	ldr	r2, [pc, #176]	; (80136dc <TIM_Base_SetConfig+0x118>)
 801362a:	4293      	cmp	r3, r2
 801362c:	d017      	beq.n	801365e <TIM_Base_SetConfig+0x9a>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	4a2b      	ldr	r2, [pc, #172]	; (80136e0 <TIM_Base_SetConfig+0x11c>)
 8013632:	4293      	cmp	r3, r2
 8013634:	d013      	beq.n	801365e <TIM_Base_SetConfig+0x9a>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	4a2a      	ldr	r2, [pc, #168]	; (80136e4 <TIM_Base_SetConfig+0x120>)
 801363a:	4293      	cmp	r3, r2
 801363c:	d00f      	beq.n	801365e <TIM_Base_SetConfig+0x9a>
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	4a29      	ldr	r2, [pc, #164]	; (80136e8 <TIM_Base_SetConfig+0x124>)
 8013642:	4293      	cmp	r3, r2
 8013644:	d00b      	beq.n	801365e <TIM_Base_SetConfig+0x9a>
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	4a28      	ldr	r2, [pc, #160]	; (80136ec <TIM_Base_SetConfig+0x128>)
 801364a:	4293      	cmp	r3, r2
 801364c:	d007      	beq.n	801365e <TIM_Base_SetConfig+0x9a>
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	4a27      	ldr	r2, [pc, #156]	; (80136f0 <TIM_Base_SetConfig+0x12c>)
 8013652:	4293      	cmp	r3, r2
 8013654:	d003      	beq.n	801365e <TIM_Base_SetConfig+0x9a>
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	4a26      	ldr	r2, [pc, #152]	; (80136f4 <TIM_Base_SetConfig+0x130>)
 801365a:	4293      	cmp	r3, r2
 801365c:	d108      	bne.n	8013670 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	68db      	ldr	r3, [r3, #12]
 801366a:	68fa      	ldr	r2, [r7, #12]
 801366c:	4313      	orrs	r3, r2
 801366e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	695b      	ldr	r3, [r3, #20]
 801367a:	4313      	orrs	r3, r2
 801367c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	68fa      	ldr	r2, [r7, #12]
 8013682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	689a      	ldr	r2, [r3, #8]
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	681a      	ldr	r2, [r3, #0]
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	4a10      	ldr	r2, [pc, #64]	; (80136d8 <TIM_Base_SetConfig+0x114>)
 8013698:	4293      	cmp	r3, r2
 801369a:	d00f      	beq.n	80136bc <TIM_Base_SetConfig+0xf8>
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	4a12      	ldr	r2, [pc, #72]	; (80136e8 <TIM_Base_SetConfig+0x124>)
 80136a0:	4293      	cmp	r3, r2
 80136a2:	d00b      	beq.n	80136bc <TIM_Base_SetConfig+0xf8>
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	4a11      	ldr	r2, [pc, #68]	; (80136ec <TIM_Base_SetConfig+0x128>)
 80136a8:	4293      	cmp	r3, r2
 80136aa:	d007      	beq.n	80136bc <TIM_Base_SetConfig+0xf8>
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	4a10      	ldr	r2, [pc, #64]	; (80136f0 <TIM_Base_SetConfig+0x12c>)
 80136b0:	4293      	cmp	r3, r2
 80136b2:	d003      	beq.n	80136bc <TIM_Base_SetConfig+0xf8>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	4a0f      	ldr	r2, [pc, #60]	; (80136f4 <TIM_Base_SetConfig+0x130>)
 80136b8:	4293      	cmp	r3, r2
 80136ba:	d103      	bne.n	80136c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	691a      	ldr	r2, [r3, #16]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2201      	movs	r2, #1
 80136c8:	615a      	str	r2, [r3, #20]
}
 80136ca:	bf00      	nop
 80136cc:	3714      	adds	r7, #20
 80136ce:	46bd      	mov	sp, r7
 80136d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d4:	4770      	bx	lr
 80136d6:	bf00      	nop
 80136d8:	40010000 	.word	0x40010000
 80136dc:	40000400 	.word	0x40000400
 80136e0:	40000800 	.word	0x40000800
 80136e4:	40000c00 	.word	0x40000c00
 80136e8:	40010400 	.word	0x40010400
 80136ec:	40014000 	.word	0x40014000
 80136f0:	40014400 	.word	0x40014400
 80136f4:	40014800 	.word	0x40014800

080136f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80136f8:	b480      	push	{r7}
 80136fa:	b083      	sub	sp, #12
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013700:	bf00      	nop
 8013702:	370c      	adds	r7, #12
 8013704:	46bd      	mov	sp, r7
 8013706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370a:	4770      	bx	lr

0801370c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801370c:	b480      	push	{r7}
 801370e:	b083      	sub	sp, #12
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013714:	bf00      	nop
 8013716:	370c      	adds	r7, #12
 8013718:	46bd      	mov	sp, r7
 801371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371e:	4770      	bx	lr

08013720 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013720:	b480      	push	{r7}
 8013722:	b083      	sub	sp, #12
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013728:	bf00      	nop
 801372a:	370c      	adds	r7, #12
 801372c:	46bd      	mov	sp, r7
 801372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013732:	4770      	bx	lr

08013734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d101      	bne.n	8013746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013742:	2301      	movs	r3, #1
 8013744:	e042      	b.n	80137cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801374c:	2b00      	cmp	r3, #0
 801374e:	d106      	bne.n	801375e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2200      	movs	r2, #0
 8013754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f7ed ff2b 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2224      	movs	r2, #36	; 0x24
 8013762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	681a      	ldr	r2, [r3, #0]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	f022 0201 	bic.w	r2, r2, #1
 8013774:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f000 f8c2 	bl	8013900 <UART_SetConfig>
 801377c:	4603      	mov	r3, r0
 801377e:	2b01      	cmp	r3, #1
 8013780:	d101      	bne.n	8013786 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8013782:	2301      	movs	r3, #1
 8013784:	e022      	b.n	80137cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801378a:	2b00      	cmp	r3, #0
 801378c:	d002      	beq.n	8013794 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f000 fe16 	bl	80143c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	685a      	ldr	r2, [r3, #4]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80137a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	689a      	ldr	r2, [r3, #8]
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80137b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	f042 0201 	orr.w	r2, r2, #1
 80137c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f000 fe9d 	bl	8014504 <UART_CheckIdleState>
 80137ca:	4603      	mov	r3, r0
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b08a      	sub	sp, #40	; 0x28
 80137d8:	af02      	add	r7, sp, #8
 80137da:	60f8      	str	r0, [r7, #12]
 80137dc:	60b9      	str	r1, [r7, #8]
 80137de:	603b      	str	r3, [r7, #0]
 80137e0:	4613      	mov	r3, r2
 80137e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80137ea:	2b20      	cmp	r3, #32
 80137ec:	f040 8083 	bne.w	80138f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d002      	beq.n	80137fc <HAL_UART_Transmit+0x28>
 80137f6:	88fb      	ldrh	r3, [r7, #6]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d101      	bne.n	8013800 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80137fc:	2301      	movs	r3, #1
 80137fe:	e07b      	b.n	80138f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013806:	2b01      	cmp	r3, #1
 8013808:	d101      	bne.n	801380e <HAL_UART_Transmit+0x3a>
 801380a:	2302      	movs	r3, #2
 801380c:	e074      	b.n	80138f8 <HAL_UART_Transmit+0x124>
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	2201      	movs	r2, #1
 8013812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2200      	movs	r2, #0
 801381a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2221      	movs	r2, #33	; 0x21
 8013822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013826:	f7f9 fe99 	bl	800d55c <HAL_GetTick>
 801382a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	88fa      	ldrh	r2, [r7, #6]
 8013830:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	88fa      	ldrh	r2, [r7, #6]
 8013838:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	689b      	ldr	r3, [r3, #8]
 8013840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013844:	d108      	bne.n	8013858 <HAL_UART_Transmit+0x84>
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	691b      	ldr	r3, [r3, #16]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d104      	bne.n	8013858 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801384e:	2300      	movs	r3, #0
 8013850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	61bb      	str	r3, [r7, #24]
 8013856:	e003      	b.n	8013860 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801385c:	2300      	movs	r3, #0
 801385e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2200      	movs	r2, #0
 8013864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8013868:	e02c      	b.n	80138c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	9300      	str	r3, [sp, #0]
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	2200      	movs	r2, #0
 8013872:	2180      	movs	r1, #128	; 0x80
 8013874:	68f8      	ldr	r0, [r7, #12]
 8013876:	f000 fe90 	bl	801459a <UART_WaitOnFlagUntilTimeout>
 801387a:	4603      	mov	r3, r0
 801387c:	2b00      	cmp	r3, #0
 801387e:	d001      	beq.n	8013884 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8013880:	2303      	movs	r3, #3
 8013882:	e039      	b.n	80138f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d10b      	bne.n	80138a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801388a:	69bb      	ldr	r3, [r7, #24]
 801388c:	881b      	ldrh	r3, [r3, #0]
 801388e:	461a      	mov	r2, r3
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013898:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	3302      	adds	r3, #2
 801389e:	61bb      	str	r3, [r7, #24]
 80138a0:	e007      	b.n	80138b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80138a2:	69fb      	ldr	r3, [r7, #28]
 80138a4:	781a      	ldrb	r2, [r3, #0]
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	3301      	adds	r3, #1
 80138b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80138b8:	b29b      	uxth	r3, r3
 80138ba:	3b01      	subs	r3, #1
 80138bc:	b29a      	uxth	r2, r3
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80138ca:	b29b      	uxth	r3, r3
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d1cc      	bne.n	801386a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	2200      	movs	r2, #0
 80138d8:	2140      	movs	r1, #64	; 0x40
 80138da:	68f8      	ldr	r0, [r7, #12]
 80138dc:	f000 fe5d 	bl	801459a <UART_WaitOnFlagUntilTimeout>
 80138e0:	4603      	mov	r3, r0
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d001      	beq.n	80138ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80138e6:	2303      	movs	r3, #3
 80138e8:	e006      	b.n	80138f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	2220      	movs	r2, #32
 80138ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80138f2:	2300      	movs	r3, #0
 80138f4:	e000      	b.n	80138f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80138f6:	2302      	movs	r3, #2
  }
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3720      	adds	r7, #32
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013900:	b5b0      	push	{r4, r5, r7, lr}
 8013902:	b08e      	sub	sp, #56	; 0x38
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013908:	2300      	movs	r3, #0
 801390a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	689a      	ldr	r2, [r3, #8]
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	691b      	ldr	r3, [r3, #16]
 8013916:	431a      	orrs	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	695b      	ldr	r3, [r3, #20]
 801391c:	431a      	orrs	r2, r3
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	69db      	ldr	r3, [r3, #28]
 8013922:	4313      	orrs	r3, r2
 8013924:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	681a      	ldr	r2, [r3, #0]
 801392c:	4bbf      	ldr	r3, [pc, #764]	; (8013c2c <UART_SetConfig+0x32c>)
 801392e:	4013      	ands	r3, r2
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	6812      	ldr	r2, [r2, #0]
 8013934:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013936:	430b      	orrs	r3, r1
 8013938:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	685b      	ldr	r3, [r3, #4]
 8013940:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	68da      	ldr	r2, [r3, #12]
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	430a      	orrs	r2, r1
 801394e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	699b      	ldr	r3, [r3, #24]
 8013954:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	4ab5      	ldr	r2, [pc, #724]	; (8013c30 <UART_SetConfig+0x330>)
 801395c:	4293      	cmp	r3, r2
 801395e:	d004      	beq.n	801396a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6a1b      	ldr	r3, [r3, #32]
 8013964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013966:	4313      	orrs	r3, r2
 8013968:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	689a      	ldr	r2, [r3, #8]
 8013970:	4bb0      	ldr	r3, [pc, #704]	; (8013c34 <UART_SetConfig+0x334>)
 8013972:	4013      	ands	r3, r2
 8013974:	687a      	ldr	r2, [r7, #4]
 8013976:	6812      	ldr	r2, [r2, #0]
 8013978:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801397a:	430b      	orrs	r3, r1
 801397c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013984:	f023 010f 	bic.w	r1, r3, #15
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	430a      	orrs	r2, r1
 8013992:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	4aa7      	ldr	r2, [pc, #668]	; (8013c38 <UART_SetConfig+0x338>)
 801399a:	4293      	cmp	r3, r2
 801399c:	d176      	bne.n	8013a8c <UART_SetConfig+0x18c>
 801399e:	4ba7      	ldr	r3, [pc, #668]	; (8013c3c <UART_SetConfig+0x33c>)
 80139a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80139a6:	2b28      	cmp	r3, #40	; 0x28
 80139a8:	d86c      	bhi.n	8013a84 <UART_SetConfig+0x184>
 80139aa:	a201      	add	r2, pc, #4	; (adr r2, 80139b0 <UART_SetConfig+0xb0>)
 80139ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139b0:	08013a55 	.word	0x08013a55
 80139b4:	08013a85 	.word	0x08013a85
 80139b8:	08013a85 	.word	0x08013a85
 80139bc:	08013a85 	.word	0x08013a85
 80139c0:	08013a85 	.word	0x08013a85
 80139c4:	08013a85 	.word	0x08013a85
 80139c8:	08013a85 	.word	0x08013a85
 80139cc:	08013a85 	.word	0x08013a85
 80139d0:	08013a5d 	.word	0x08013a5d
 80139d4:	08013a85 	.word	0x08013a85
 80139d8:	08013a85 	.word	0x08013a85
 80139dc:	08013a85 	.word	0x08013a85
 80139e0:	08013a85 	.word	0x08013a85
 80139e4:	08013a85 	.word	0x08013a85
 80139e8:	08013a85 	.word	0x08013a85
 80139ec:	08013a85 	.word	0x08013a85
 80139f0:	08013a65 	.word	0x08013a65
 80139f4:	08013a85 	.word	0x08013a85
 80139f8:	08013a85 	.word	0x08013a85
 80139fc:	08013a85 	.word	0x08013a85
 8013a00:	08013a85 	.word	0x08013a85
 8013a04:	08013a85 	.word	0x08013a85
 8013a08:	08013a85 	.word	0x08013a85
 8013a0c:	08013a85 	.word	0x08013a85
 8013a10:	08013a6d 	.word	0x08013a6d
 8013a14:	08013a85 	.word	0x08013a85
 8013a18:	08013a85 	.word	0x08013a85
 8013a1c:	08013a85 	.word	0x08013a85
 8013a20:	08013a85 	.word	0x08013a85
 8013a24:	08013a85 	.word	0x08013a85
 8013a28:	08013a85 	.word	0x08013a85
 8013a2c:	08013a85 	.word	0x08013a85
 8013a30:	08013a75 	.word	0x08013a75
 8013a34:	08013a85 	.word	0x08013a85
 8013a38:	08013a85 	.word	0x08013a85
 8013a3c:	08013a85 	.word	0x08013a85
 8013a40:	08013a85 	.word	0x08013a85
 8013a44:	08013a85 	.word	0x08013a85
 8013a48:	08013a85 	.word	0x08013a85
 8013a4c:	08013a85 	.word	0x08013a85
 8013a50:	08013a7d 	.word	0x08013a7d
 8013a54:	2301      	movs	r3, #1
 8013a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013a5a:	e222      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013a5c:	2304      	movs	r3, #4
 8013a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013a62:	e21e      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013a64:	2308      	movs	r3, #8
 8013a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013a6a:	e21a      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013a6c:	2310      	movs	r3, #16
 8013a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013a72:	e216      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013a74:	2320      	movs	r3, #32
 8013a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013a7a:	e212      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013a7c:	2340      	movs	r3, #64	; 0x40
 8013a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013a82:	e20e      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013a84:	2380      	movs	r3, #128	; 0x80
 8013a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013a8a:	e20a      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	4a6b      	ldr	r2, [pc, #428]	; (8013c40 <UART_SetConfig+0x340>)
 8013a92:	4293      	cmp	r3, r2
 8013a94:	d130      	bne.n	8013af8 <UART_SetConfig+0x1f8>
 8013a96:	4b69      	ldr	r3, [pc, #420]	; (8013c3c <UART_SetConfig+0x33c>)
 8013a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a9a:	f003 0307 	and.w	r3, r3, #7
 8013a9e:	2b05      	cmp	r3, #5
 8013aa0:	d826      	bhi.n	8013af0 <UART_SetConfig+0x1f0>
 8013aa2:	a201      	add	r2, pc, #4	; (adr r2, 8013aa8 <UART_SetConfig+0x1a8>)
 8013aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013aa8:	08013ac1 	.word	0x08013ac1
 8013aac:	08013ac9 	.word	0x08013ac9
 8013ab0:	08013ad1 	.word	0x08013ad1
 8013ab4:	08013ad9 	.word	0x08013ad9
 8013ab8:	08013ae1 	.word	0x08013ae1
 8013abc:	08013ae9 	.word	0x08013ae9
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013ac6:	e1ec      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013ac8:	2304      	movs	r3, #4
 8013aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013ace:	e1e8      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013ad0:	2308      	movs	r3, #8
 8013ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013ad6:	e1e4      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013ad8:	2310      	movs	r3, #16
 8013ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013ade:	e1e0      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013ae0:	2320      	movs	r3, #32
 8013ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013ae6:	e1dc      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013ae8:	2340      	movs	r3, #64	; 0x40
 8013aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013aee:	e1d8      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013af0:	2380      	movs	r3, #128	; 0x80
 8013af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013af6:	e1d4      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	4a51      	ldr	r2, [pc, #324]	; (8013c44 <UART_SetConfig+0x344>)
 8013afe:	4293      	cmp	r3, r2
 8013b00:	d130      	bne.n	8013b64 <UART_SetConfig+0x264>
 8013b02:	4b4e      	ldr	r3, [pc, #312]	; (8013c3c <UART_SetConfig+0x33c>)
 8013b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b06:	f003 0307 	and.w	r3, r3, #7
 8013b0a:	2b05      	cmp	r3, #5
 8013b0c:	d826      	bhi.n	8013b5c <UART_SetConfig+0x25c>
 8013b0e:	a201      	add	r2, pc, #4	; (adr r2, 8013b14 <UART_SetConfig+0x214>)
 8013b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b14:	08013b2d 	.word	0x08013b2d
 8013b18:	08013b35 	.word	0x08013b35
 8013b1c:	08013b3d 	.word	0x08013b3d
 8013b20:	08013b45 	.word	0x08013b45
 8013b24:	08013b4d 	.word	0x08013b4d
 8013b28:	08013b55 	.word	0x08013b55
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013b32:	e1b6      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013b34:	2304      	movs	r3, #4
 8013b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013b3a:	e1b2      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013b3c:	2308      	movs	r3, #8
 8013b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013b42:	e1ae      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013b44:	2310      	movs	r3, #16
 8013b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013b4a:	e1aa      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013b4c:	2320      	movs	r3, #32
 8013b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013b52:	e1a6      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013b54:	2340      	movs	r3, #64	; 0x40
 8013b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013b5a:	e1a2      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013b5c:	2380      	movs	r3, #128	; 0x80
 8013b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013b62:	e19e      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	4a37      	ldr	r2, [pc, #220]	; (8013c48 <UART_SetConfig+0x348>)
 8013b6a:	4293      	cmp	r3, r2
 8013b6c:	d130      	bne.n	8013bd0 <UART_SetConfig+0x2d0>
 8013b6e:	4b33      	ldr	r3, [pc, #204]	; (8013c3c <UART_SetConfig+0x33c>)
 8013b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b72:	f003 0307 	and.w	r3, r3, #7
 8013b76:	2b05      	cmp	r3, #5
 8013b78:	d826      	bhi.n	8013bc8 <UART_SetConfig+0x2c8>
 8013b7a:	a201      	add	r2, pc, #4	; (adr r2, 8013b80 <UART_SetConfig+0x280>)
 8013b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b80:	08013b99 	.word	0x08013b99
 8013b84:	08013ba1 	.word	0x08013ba1
 8013b88:	08013ba9 	.word	0x08013ba9
 8013b8c:	08013bb1 	.word	0x08013bb1
 8013b90:	08013bb9 	.word	0x08013bb9
 8013b94:	08013bc1 	.word	0x08013bc1
 8013b98:	2300      	movs	r3, #0
 8013b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013b9e:	e180      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013ba0:	2304      	movs	r3, #4
 8013ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013ba6:	e17c      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013ba8:	2308      	movs	r3, #8
 8013baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013bae:	e178      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013bb0:	2310      	movs	r3, #16
 8013bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013bb6:	e174      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013bb8:	2320      	movs	r3, #32
 8013bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013bbe:	e170      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013bc0:	2340      	movs	r3, #64	; 0x40
 8013bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013bc6:	e16c      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013bc8:	2380      	movs	r3, #128	; 0x80
 8013bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013bce:	e168      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	4a1d      	ldr	r2, [pc, #116]	; (8013c4c <UART_SetConfig+0x34c>)
 8013bd6:	4293      	cmp	r3, r2
 8013bd8:	d142      	bne.n	8013c60 <UART_SetConfig+0x360>
 8013bda:	4b18      	ldr	r3, [pc, #96]	; (8013c3c <UART_SetConfig+0x33c>)
 8013bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bde:	f003 0307 	and.w	r3, r3, #7
 8013be2:	2b05      	cmp	r3, #5
 8013be4:	d838      	bhi.n	8013c58 <UART_SetConfig+0x358>
 8013be6:	a201      	add	r2, pc, #4	; (adr r2, 8013bec <UART_SetConfig+0x2ec>)
 8013be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bec:	08013c05 	.word	0x08013c05
 8013bf0:	08013c0d 	.word	0x08013c0d
 8013bf4:	08013c15 	.word	0x08013c15
 8013bf8:	08013c1d 	.word	0x08013c1d
 8013bfc:	08013c25 	.word	0x08013c25
 8013c00:	08013c51 	.word	0x08013c51
 8013c04:	2300      	movs	r3, #0
 8013c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013c0a:	e14a      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013c0c:	2304      	movs	r3, #4
 8013c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013c12:	e146      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013c14:	2308      	movs	r3, #8
 8013c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013c1a:	e142      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013c1c:	2310      	movs	r3, #16
 8013c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013c22:	e13e      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013c24:	2320      	movs	r3, #32
 8013c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013c2a:	e13a      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013c2c:	cfff69f3 	.word	0xcfff69f3
 8013c30:	58000c00 	.word	0x58000c00
 8013c34:	11fff4ff 	.word	0x11fff4ff
 8013c38:	40011000 	.word	0x40011000
 8013c3c:	58024400 	.word	0x58024400
 8013c40:	40004400 	.word	0x40004400
 8013c44:	40004800 	.word	0x40004800
 8013c48:	40004c00 	.word	0x40004c00
 8013c4c:	40005000 	.word	0x40005000
 8013c50:	2340      	movs	r3, #64	; 0x40
 8013c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013c56:	e124      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013c58:	2380      	movs	r3, #128	; 0x80
 8013c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013c5e:	e120      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4acc      	ldr	r2, [pc, #816]	; (8013f98 <UART_SetConfig+0x698>)
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d176      	bne.n	8013d58 <UART_SetConfig+0x458>
 8013c6a:	4bcc      	ldr	r3, [pc, #816]	; (8013f9c <UART_SetConfig+0x69c>)
 8013c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013c72:	2b28      	cmp	r3, #40	; 0x28
 8013c74:	d86c      	bhi.n	8013d50 <UART_SetConfig+0x450>
 8013c76:	a201      	add	r2, pc, #4	; (adr r2, 8013c7c <UART_SetConfig+0x37c>)
 8013c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c7c:	08013d21 	.word	0x08013d21
 8013c80:	08013d51 	.word	0x08013d51
 8013c84:	08013d51 	.word	0x08013d51
 8013c88:	08013d51 	.word	0x08013d51
 8013c8c:	08013d51 	.word	0x08013d51
 8013c90:	08013d51 	.word	0x08013d51
 8013c94:	08013d51 	.word	0x08013d51
 8013c98:	08013d51 	.word	0x08013d51
 8013c9c:	08013d29 	.word	0x08013d29
 8013ca0:	08013d51 	.word	0x08013d51
 8013ca4:	08013d51 	.word	0x08013d51
 8013ca8:	08013d51 	.word	0x08013d51
 8013cac:	08013d51 	.word	0x08013d51
 8013cb0:	08013d51 	.word	0x08013d51
 8013cb4:	08013d51 	.word	0x08013d51
 8013cb8:	08013d51 	.word	0x08013d51
 8013cbc:	08013d31 	.word	0x08013d31
 8013cc0:	08013d51 	.word	0x08013d51
 8013cc4:	08013d51 	.word	0x08013d51
 8013cc8:	08013d51 	.word	0x08013d51
 8013ccc:	08013d51 	.word	0x08013d51
 8013cd0:	08013d51 	.word	0x08013d51
 8013cd4:	08013d51 	.word	0x08013d51
 8013cd8:	08013d51 	.word	0x08013d51
 8013cdc:	08013d39 	.word	0x08013d39
 8013ce0:	08013d51 	.word	0x08013d51
 8013ce4:	08013d51 	.word	0x08013d51
 8013ce8:	08013d51 	.word	0x08013d51
 8013cec:	08013d51 	.word	0x08013d51
 8013cf0:	08013d51 	.word	0x08013d51
 8013cf4:	08013d51 	.word	0x08013d51
 8013cf8:	08013d51 	.word	0x08013d51
 8013cfc:	08013d41 	.word	0x08013d41
 8013d00:	08013d51 	.word	0x08013d51
 8013d04:	08013d51 	.word	0x08013d51
 8013d08:	08013d51 	.word	0x08013d51
 8013d0c:	08013d51 	.word	0x08013d51
 8013d10:	08013d51 	.word	0x08013d51
 8013d14:	08013d51 	.word	0x08013d51
 8013d18:	08013d51 	.word	0x08013d51
 8013d1c:	08013d49 	.word	0x08013d49
 8013d20:	2301      	movs	r3, #1
 8013d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013d26:	e0bc      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013d28:	2304      	movs	r3, #4
 8013d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013d2e:	e0b8      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013d30:	2308      	movs	r3, #8
 8013d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013d36:	e0b4      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013d38:	2310      	movs	r3, #16
 8013d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013d3e:	e0b0      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013d40:	2320      	movs	r3, #32
 8013d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013d46:	e0ac      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013d48:	2340      	movs	r3, #64	; 0x40
 8013d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013d4e:	e0a8      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013d50:	2380      	movs	r3, #128	; 0x80
 8013d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013d56:	e0a4      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	4a90      	ldr	r2, [pc, #576]	; (8013fa0 <UART_SetConfig+0x6a0>)
 8013d5e:	4293      	cmp	r3, r2
 8013d60:	d130      	bne.n	8013dc4 <UART_SetConfig+0x4c4>
 8013d62:	4b8e      	ldr	r3, [pc, #568]	; (8013f9c <UART_SetConfig+0x69c>)
 8013d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d66:	f003 0307 	and.w	r3, r3, #7
 8013d6a:	2b05      	cmp	r3, #5
 8013d6c:	d826      	bhi.n	8013dbc <UART_SetConfig+0x4bc>
 8013d6e:	a201      	add	r2, pc, #4	; (adr r2, 8013d74 <UART_SetConfig+0x474>)
 8013d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d74:	08013d8d 	.word	0x08013d8d
 8013d78:	08013d95 	.word	0x08013d95
 8013d7c:	08013d9d 	.word	0x08013d9d
 8013d80:	08013da5 	.word	0x08013da5
 8013d84:	08013dad 	.word	0x08013dad
 8013d88:	08013db5 	.word	0x08013db5
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013d92:	e086      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013d94:	2304      	movs	r3, #4
 8013d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013d9a:	e082      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013d9c:	2308      	movs	r3, #8
 8013d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013da2:	e07e      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013da4:	2310      	movs	r3, #16
 8013da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013daa:	e07a      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013dac:	2320      	movs	r3, #32
 8013dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013db2:	e076      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013db4:	2340      	movs	r3, #64	; 0x40
 8013db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013dba:	e072      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013dbc:	2380      	movs	r3, #128	; 0x80
 8013dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013dc2:	e06e      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	4a76      	ldr	r2, [pc, #472]	; (8013fa4 <UART_SetConfig+0x6a4>)
 8013dca:	4293      	cmp	r3, r2
 8013dcc:	d130      	bne.n	8013e30 <UART_SetConfig+0x530>
 8013dce:	4b73      	ldr	r3, [pc, #460]	; (8013f9c <UART_SetConfig+0x69c>)
 8013dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dd2:	f003 0307 	and.w	r3, r3, #7
 8013dd6:	2b05      	cmp	r3, #5
 8013dd8:	d826      	bhi.n	8013e28 <UART_SetConfig+0x528>
 8013dda:	a201      	add	r2, pc, #4	; (adr r2, 8013de0 <UART_SetConfig+0x4e0>)
 8013ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013de0:	08013df9 	.word	0x08013df9
 8013de4:	08013e01 	.word	0x08013e01
 8013de8:	08013e09 	.word	0x08013e09
 8013dec:	08013e11 	.word	0x08013e11
 8013df0:	08013e19 	.word	0x08013e19
 8013df4:	08013e21 	.word	0x08013e21
 8013df8:	2300      	movs	r3, #0
 8013dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013dfe:	e050      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e00:	2304      	movs	r3, #4
 8013e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e06:	e04c      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e08:	2308      	movs	r3, #8
 8013e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e0e:	e048      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e10:	2310      	movs	r3, #16
 8013e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e16:	e044      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e18:	2320      	movs	r3, #32
 8013e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e1e:	e040      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e20:	2340      	movs	r3, #64	; 0x40
 8013e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e26:	e03c      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e28:	2380      	movs	r3, #128	; 0x80
 8013e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e2e:	e038      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	4a5c      	ldr	r2, [pc, #368]	; (8013fa8 <UART_SetConfig+0x6a8>)
 8013e36:	4293      	cmp	r3, r2
 8013e38:	d130      	bne.n	8013e9c <UART_SetConfig+0x59c>
 8013e3a:	4b58      	ldr	r3, [pc, #352]	; (8013f9c <UART_SetConfig+0x69c>)
 8013e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e3e:	f003 0307 	and.w	r3, r3, #7
 8013e42:	2b05      	cmp	r3, #5
 8013e44:	d826      	bhi.n	8013e94 <UART_SetConfig+0x594>
 8013e46:	a201      	add	r2, pc, #4	; (adr r2, 8013e4c <UART_SetConfig+0x54c>)
 8013e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e4c:	08013e65 	.word	0x08013e65
 8013e50:	08013e6d 	.word	0x08013e6d
 8013e54:	08013e75 	.word	0x08013e75
 8013e58:	08013e7d 	.word	0x08013e7d
 8013e5c:	08013e85 	.word	0x08013e85
 8013e60:	08013e8d 	.word	0x08013e8d
 8013e64:	2302      	movs	r3, #2
 8013e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e6a:	e01a      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e6c:	2304      	movs	r3, #4
 8013e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e72:	e016      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e74:	2308      	movs	r3, #8
 8013e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e7a:	e012      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e7c:	2310      	movs	r3, #16
 8013e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e82:	e00e      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e84:	2320      	movs	r3, #32
 8013e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e8a:	e00a      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e8c:	2340      	movs	r3, #64	; 0x40
 8013e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e92:	e006      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e94:	2380      	movs	r3, #128	; 0x80
 8013e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e9a:	e002      	b.n	8013ea2 <UART_SetConfig+0x5a2>
 8013e9c:	2380      	movs	r3, #128	; 0x80
 8013e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	4a40      	ldr	r2, [pc, #256]	; (8013fa8 <UART_SetConfig+0x6a8>)
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	f040 80ef 	bne.w	801408c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013eb2:	2b20      	cmp	r3, #32
 8013eb4:	dc46      	bgt.n	8013f44 <UART_SetConfig+0x644>
 8013eb6:	2b02      	cmp	r3, #2
 8013eb8:	f2c0 8081 	blt.w	8013fbe <UART_SetConfig+0x6be>
 8013ebc:	3b02      	subs	r3, #2
 8013ebe:	2b1e      	cmp	r3, #30
 8013ec0:	d87d      	bhi.n	8013fbe <UART_SetConfig+0x6be>
 8013ec2:	a201      	add	r2, pc, #4	; (adr r2, 8013ec8 <UART_SetConfig+0x5c8>)
 8013ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ec8:	08013f4b 	.word	0x08013f4b
 8013ecc:	08013fbf 	.word	0x08013fbf
 8013ed0:	08013f53 	.word	0x08013f53
 8013ed4:	08013fbf 	.word	0x08013fbf
 8013ed8:	08013fbf 	.word	0x08013fbf
 8013edc:	08013fbf 	.word	0x08013fbf
 8013ee0:	08013f63 	.word	0x08013f63
 8013ee4:	08013fbf 	.word	0x08013fbf
 8013ee8:	08013fbf 	.word	0x08013fbf
 8013eec:	08013fbf 	.word	0x08013fbf
 8013ef0:	08013fbf 	.word	0x08013fbf
 8013ef4:	08013fbf 	.word	0x08013fbf
 8013ef8:	08013fbf 	.word	0x08013fbf
 8013efc:	08013fbf 	.word	0x08013fbf
 8013f00:	08013f73 	.word	0x08013f73
 8013f04:	08013fbf 	.word	0x08013fbf
 8013f08:	08013fbf 	.word	0x08013fbf
 8013f0c:	08013fbf 	.word	0x08013fbf
 8013f10:	08013fbf 	.word	0x08013fbf
 8013f14:	08013fbf 	.word	0x08013fbf
 8013f18:	08013fbf 	.word	0x08013fbf
 8013f1c:	08013fbf 	.word	0x08013fbf
 8013f20:	08013fbf 	.word	0x08013fbf
 8013f24:	08013fbf 	.word	0x08013fbf
 8013f28:	08013fbf 	.word	0x08013fbf
 8013f2c:	08013fbf 	.word	0x08013fbf
 8013f30:	08013fbf 	.word	0x08013fbf
 8013f34:	08013fbf 	.word	0x08013fbf
 8013f38:	08013fbf 	.word	0x08013fbf
 8013f3c:	08013fbf 	.word	0x08013fbf
 8013f40:	08013fb1 	.word	0x08013fb1
 8013f44:	2b40      	cmp	r3, #64	; 0x40
 8013f46:	d036      	beq.n	8013fb6 <UART_SetConfig+0x6b6>
 8013f48:	e039      	b.n	8013fbe <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013f4a:	f7fe fc43 	bl	80127d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8013f4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8013f50:	e03b      	b.n	8013fca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013f52:	f107 0314 	add.w	r3, r7, #20
 8013f56:	4618      	mov	r0, r3
 8013f58:	f7fe fc52 	bl	8012800 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013f5c:	69bb      	ldr	r3, [r7, #24]
 8013f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8013f60:	e033      	b.n	8013fca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013f62:	f107 0308 	add.w	r3, r7, #8
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7fe fd9e 	bl	8012aa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8013f70:	e02b      	b.n	8013fca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013f72:	4b0a      	ldr	r3, [pc, #40]	; (8013f9c <UART_SetConfig+0x69c>)
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	f003 0320 	and.w	r3, r3, #32
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d009      	beq.n	8013f92 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013f7e:	4b07      	ldr	r3, [pc, #28]	; (8013f9c <UART_SetConfig+0x69c>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	08db      	lsrs	r3, r3, #3
 8013f84:	f003 0303 	and.w	r3, r3, #3
 8013f88:	4a08      	ldr	r2, [pc, #32]	; (8013fac <UART_SetConfig+0x6ac>)
 8013f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8013f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013f90:	e01b      	b.n	8013fca <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8013f92:	4b06      	ldr	r3, [pc, #24]	; (8013fac <UART_SetConfig+0x6ac>)
 8013f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8013f96:	e018      	b.n	8013fca <UART_SetConfig+0x6ca>
 8013f98:	40011400 	.word	0x40011400
 8013f9c:	58024400 	.word	0x58024400
 8013fa0:	40007800 	.word	0x40007800
 8013fa4:	40007c00 	.word	0x40007c00
 8013fa8:	58000c00 	.word	0x58000c00
 8013fac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013fb0:	4bc4      	ldr	r3, [pc, #784]	; (80142c4 <UART_SetConfig+0x9c4>)
 8013fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8013fb4:	e009      	b.n	8013fca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013fba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8013fbc:	e005      	b.n	8013fca <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8013fc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	f000 81da 	beq.w	8014386 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd6:	4abc      	ldr	r2, [pc, #752]	; (80142c8 <UART_SetConfig+0x9c8>)
 8013fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013fdc:	461a      	mov	r2, r3
 8013fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013fe4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	685a      	ldr	r2, [r3, #4]
 8013fea:	4613      	mov	r3, r2
 8013fec:	005b      	lsls	r3, r3, #1
 8013fee:	4413      	add	r3, r2
 8013ff0:	6a3a      	ldr	r2, [r7, #32]
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d305      	bcc.n	8014002 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013ffc:	6a3a      	ldr	r2, [r7, #32]
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d903      	bls.n	801400a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8014002:	2301      	movs	r3, #1
 8014004:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8014008:	e1bd      	b.n	8014386 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801400c:	4618      	mov	r0, r3
 801400e:	f04f 0100 	mov.w	r1, #0
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014016:	4aac      	ldr	r2, [pc, #688]	; (80142c8 <UART_SetConfig+0x9c8>)
 8014018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801401c:	b29a      	uxth	r2, r3
 801401e:	f04f 0300 	mov.w	r3, #0
 8014022:	f7ec f9b5 	bl	8000390 <__aeabi_uldivmod>
 8014026:	4602      	mov	r2, r0
 8014028:	460b      	mov	r3, r1
 801402a:	4610      	mov	r0, r2
 801402c:	4619      	mov	r1, r3
 801402e:	f04f 0200 	mov.w	r2, #0
 8014032:	f04f 0300 	mov.w	r3, #0
 8014036:	020b      	lsls	r3, r1, #8
 8014038:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801403c:	0202      	lsls	r2, r0, #8
 801403e:	6879      	ldr	r1, [r7, #4]
 8014040:	6849      	ldr	r1, [r1, #4]
 8014042:	0849      	lsrs	r1, r1, #1
 8014044:	4608      	mov	r0, r1
 8014046:	f04f 0100 	mov.w	r1, #0
 801404a:	1814      	adds	r4, r2, r0
 801404c:	eb43 0501 	adc.w	r5, r3, r1
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	685b      	ldr	r3, [r3, #4]
 8014054:	461a      	mov	r2, r3
 8014056:	f04f 0300 	mov.w	r3, #0
 801405a:	4620      	mov	r0, r4
 801405c:	4629      	mov	r1, r5
 801405e:	f7ec f997 	bl	8000390 <__aeabi_uldivmod>
 8014062:	4602      	mov	r2, r0
 8014064:	460b      	mov	r3, r1
 8014066:	4613      	mov	r3, r2
 8014068:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801406c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014070:	d308      	bcc.n	8014084 <UART_SetConfig+0x784>
 8014072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014078:	d204      	bcs.n	8014084 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014080:	60da      	str	r2, [r3, #12]
 8014082:	e180      	b.n	8014386 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8014084:	2301      	movs	r3, #1
 8014086:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801408a:	e17c      	b.n	8014386 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	69db      	ldr	r3, [r3, #28]
 8014090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014094:	f040 80be 	bne.w	8014214 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8014098:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801409c:	2b20      	cmp	r3, #32
 801409e:	dc49      	bgt.n	8014134 <UART_SetConfig+0x834>
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	db7c      	blt.n	801419e <UART_SetConfig+0x89e>
 80140a4:	2b20      	cmp	r3, #32
 80140a6:	d87a      	bhi.n	801419e <UART_SetConfig+0x89e>
 80140a8:	a201      	add	r2, pc, #4	; (adr r2, 80140b0 <UART_SetConfig+0x7b0>)
 80140aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140ae:	bf00      	nop
 80140b0:	0801413b 	.word	0x0801413b
 80140b4:	08014143 	.word	0x08014143
 80140b8:	0801419f 	.word	0x0801419f
 80140bc:	0801419f 	.word	0x0801419f
 80140c0:	0801414b 	.word	0x0801414b
 80140c4:	0801419f 	.word	0x0801419f
 80140c8:	0801419f 	.word	0x0801419f
 80140cc:	0801419f 	.word	0x0801419f
 80140d0:	0801415b 	.word	0x0801415b
 80140d4:	0801419f 	.word	0x0801419f
 80140d8:	0801419f 	.word	0x0801419f
 80140dc:	0801419f 	.word	0x0801419f
 80140e0:	0801419f 	.word	0x0801419f
 80140e4:	0801419f 	.word	0x0801419f
 80140e8:	0801419f 	.word	0x0801419f
 80140ec:	0801419f 	.word	0x0801419f
 80140f0:	0801416b 	.word	0x0801416b
 80140f4:	0801419f 	.word	0x0801419f
 80140f8:	0801419f 	.word	0x0801419f
 80140fc:	0801419f 	.word	0x0801419f
 8014100:	0801419f 	.word	0x0801419f
 8014104:	0801419f 	.word	0x0801419f
 8014108:	0801419f 	.word	0x0801419f
 801410c:	0801419f 	.word	0x0801419f
 8014110:	0801419f 	.word	0x0801419f
 8014114:	0801419f 	.word	0x0801419f
 8014118:	0801419f 	.word	0x0801419f
 801411c:	0801419f 	.word	0x0801419f
 8014120:	0801419f 	.word	0x0801419f
 8014124:	0801419f 	.word	0x0801419f
 8014128:	0801419f 	.word	0x0801419f
 801412c:	0801419f 	.word	0x0801419f
 8014130:	08014191 	.word	0x08014191
 8014134:	2b40      	cmp	r3, #64	; 0x40
 8014136:	d02e      	beq.n	8014196 <UART_SetConfig+0x896>
 8014138:	e031      	b.n	801419e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801413a:	f7fd fb9d 	bl	8011878 <HAL_RCC_GetPCLK1Freq>
 801413e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8014140:	e033      	b.n	80141aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014142:	f7fd fbaf 	bl	80118a4 <HAL_RCC_GetPCLK2Freq>
 8014146:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8014148:	e02f      	b.n	80141aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801414a:	f107 0314 	add.w	r3, r7, #20
 801414e:	4618      	mov	r0, r3
 8014150:	f7fe fb56 	bl	8012800 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014154:	69bb      	ldr	r3, [r7, #24]
 8014156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8014158:	e027      	b.n	80141aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801415a:	f107 0308 	add.w	r3, r7, #8
 801415e:	4618      	mov	r0, r3
 8014160:	f7fe fca2 	bl	8012aa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8014168:	e01f      	b.n	80141aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801416a:	4b58      	ldr	r3, [pc, #352]	; (80142cc <UART_SetConfig+0x9cc>)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	f003 0320 	and.w	r3, r3, #32
 8014172:	2b00      	cmp	r3, #0
 8014174:	d009      	beq.n	801418a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014176:	4b55      	ldr	r3, [pc, #340]	; (80142cc <UART_SetConfig+0x9cc>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	08db      	lsrs	r3, r3, #3
 801417c:	f003 0303 	and.w	r3, r3, #3
 8014180:	4a53      	ldr	r2, [pc, #332]	; (80142d0 <UART_SetConfig+0x9d0>)
 8014182:	fa22 f303 	lsr.w	r3, r2, r3
 8014186:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014188:	e00f      	b.n	80141aa <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 801418a:	4b51      	ldr	r3, [pc, #324]	; (80142d0 <UART_SetConfig+0x9d0>)
 801418c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801418e:	e00c      	b.n	80141aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014190:	4b4c      	ldr	r3, [pc, #304]	; (80142c4 <UART_SetConfig+0x9c4>)
 8014192:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8014194:	e009      	b.n	80141aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801419a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801419c:	e005      	b.n	80141aa <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 801419e:	2300      	movs	r3, #0
 80141a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80141a2:	2301      	movs	r3, #1
 80141a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80141a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80141aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	f000 80ea 	beq.w	8014386 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141b6:	4a44      	ldr	r2, [pc, #272]	; (80142c8 <UART_SetConfig+0x9c8>)
 80141b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141bc:	461a      	mov	r2, r3
 80141be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80141c4:	005a      	lsls	r2, r3, #1
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	085b      	lsrs	r3, r3, #1
 80141cc:	441a      	add	r2, r3
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	685b      	ldr	r3, [r3, #4]
 80141d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80141d6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80141d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141da:	2b0f      	cmp	r3, #15
 80141dc:	d916      	bls.n	801420c <UART_SetConfig+0x90c>
 80141de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80141e4:	d212      	bcs.n	801420c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80141e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e8:	b29b      	uxth	r3, r3
 80141ea:	f023 030f 	bic.w	r3, r3, #15
 80141ee:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80141f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f2:	085b      	lsrs	r3, r3, #1
 80141f4:	b29b      	uxth	r3, r3
 80141f6:	f003 0307 	and.w	r3, r3, #7
 80141fa:	b29a      	uxth	r2, r3
 80141fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80141fe:	4313      	orrs	r3, r2
 8014200:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014208:	60da      	str	r2, [r3, #12]
 801420a:	e0bc      	b.n	8014386 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 801420c:	2301      	movs	r3, #1
 801420e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8014212:	e0b8      	b.n	8014386 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014218:	2b20      	cmp	r3, #32
 801421a:	dc4b      	bgt.n	80142b4 <UART_SetConfig+0x9b4>
 801421c:	2b00      	cmp	r3, #0
 801421e:	f2c0 8087 	blt.w	8014330 <UART_SetConfig+0xa30>
 8014222:	2b20      	cmp	r3, #32
 8014224:	f200 8084 	bhi.w	8014330 <UART_SetConfig+0xa30>
 8014228:	a201      	add	r2, pc, #4	; (adr r2, 8014230 <UART_SetConfig+0x930>)
 801422a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801422e:	bf00      	nop
 8014230:	080142bb 	.word	0x080142bb
 8014234:	080142d5 	.word	0x080142d5
 8014238:	08014331 	.word	0x08014331
 801423c:	08014331 	.word	0x08014331
 8014240:	080142dd 	.word	0x080142dd
 8014244:	08014331 	.word	0x08014331
 8014248:	08014331 	.word	0x08014331
 801424c:	08014331 	.word	0x08014331
 8014250:	080142ed 	.word	0x080142ed
 8014254:	08014331 	.word	0x08014331
 8014258:	08014331 	.word	0x08014331
 801425c:	08014331 	.word	0x08014331
 8014260:	08014331 	.word	0x08014331
 8014264:	08014331 	.word	0x08014331
 8014268:	08014331 	.word	0x08014331
 801426c:	08014331 	.word	0x08014331
 8014270:	080142fd 	.word	0x080142fd
 8014274:	08014331 	.word	0x08014331
 8014278:	08014331 	.word	0x08014331
 801427c:	08014331 	.word	0x08014331
 8014280:	08014331 	.word	0x08014331
 8014284:	08014331 	.word	0x08014331
 8014288:	08014331 	.word	0x08014331
 801428c:	08014331 	.word	0x08014331
 8014290:	08014331 	.word	0x08014331
 8014294:	08014331 	.word	0x08014331
 8014298:	08014331 	.word	0x08014331
 801429c:	08014331 	.word	0x08014331
 80142a0:	08014331 	.word	0x08014331
 80142a4:	08014331 	.word	0x08014331
 80142a8:	08014331 	.word	0x08014331
 80142ac:	08014331 	.word	0x08014331
 80142b0:	08014323 	.word	0x08014323
 80142b4:	2b40      	cmp	r3, #64	; 0x40
 80142b6:	d037      	beq.n	8014328 <UART_SetConfig+0xa28>
 80142b8:	e03a      	b.n	8014330 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80142ba:	f7fd fadd 	bl	8011878 <HAL_RCC_GetPCLK1Freq>
 80142be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80142c0:	e03c      	b.n	801433c <UART_SetConfig+0xa3c>
 80142c2:	bf00      	nop
 80142c4:	003d0900 	.word	0x003d0900
 80142c8:	08029e04 	.word	0x08029e04
 80142cc:	58024400 	.word	0x58024400
 80142d0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80142d4:	f7fd fae6 	bl	80118a4 <HAL_RCC_GetPCLK2Freq>
 80142d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80142da:	e02f      	b.n	801433c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80142dc:	f107 0314 	add.w	r3, r7, #20
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7fe fa8d 	bl	8012800 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80142e6:	69bb      	ldr	r3, [r7, #24]
 80142e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80142ea:	e027      	b.n	801433c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80142ec:	f107 0308 	add.w	r3, r7, #8
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7fe fbd9 	bl	8012aa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80142fa:	e01f      	b.n	801433c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80142fc:	4b2c      	ldr	r3, [pc, #176]	; (80143b0 <UART_SetConfig+0xab0>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	f003 0320 	and.w	r3, r3, #32
 8014304:	2b00      	cmp	r3, #0
 8014306:	d009      	beq.n	801431c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014308:	4b29      	ldr	r3, [pc, #164]	; (80143b0 <UART_SetConfig+0xab0>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	08db      	lsrs	r3, r3, #3
 801430e:	f003 0303 	and.w	r3, r3, #3
 8014312:	4a28      	ldr	r2, [pc, #160]	; (80143b4 <UART_SetConfig+0xab4>)
 8014314:	fa22 f303 	lsr.w	r3, r2, r3
 8014318:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801431a:	e00f      	b.n	801433c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 801431c:	4b25      	ldr	r3, [pc, #148]	; (80143b4 <UART_SetConfig+0xab4>)
 801431e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8014320:	e00c      	b.n	801433c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014322:	4b25      	ldr	r3, [pc, #148]	; (80143b8 <UART_SetConfig+0xab8>)
 8014324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8014326:	e009      	b.n	801433c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801432c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801432e:	e005      	b.n	801433c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8014330:	2300      	movs	r3, #0
 8014332:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8014334:	2301      	movs	r3, #1
 8014336:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801433a:	bf00      	nop
    }

    if (pclk != 0U)
 801433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433e:	2b00      	cmp	r3, #0
 8014340:	d021      	beq.n	8014386 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014346:	4a1d      	ldr	r2, [pc, #116]	; (80143bc <UART_SetConfig+0xabc>)
 8014348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801434c:	461a      	mov	r2, r3
 801434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014350:	fbb3 f2f2 	udiv	r2, r3, r2
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	085b      	lsrs	r3, r3, #1
 801435a:	441a      	add	r2, r3
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	685b      	ldr	r3, [r3, #4]
 8014360:	fbb2 f3f3 	udiv	r3, r2, r3
 8014364:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014368:	2b0f      	cmp	r3, #15
 801436a:	d909      	bls.n	8014380 <UART_SetConfig+0xa80>
 801436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014372:	d205      	bcs.n	8014380 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014376:	b29a      	uxth	r2, r3
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	60da      	str	r2, [r3, #12]
 801437e:	e002      	b.n	8014386 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8014380:	2301      	movs	r3, #1
 8014382:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2201      	movs	r2, #1
 801438a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2201      	movs	r2, #1
 8014392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2200      	movs	r2, #0
 801439a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	2200      	movs	r2, #0
 80143a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80143a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3738      	adds	r7, #56	; 0x38
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bdb0      	pop	{r4, r5, r7, pc}
 80143ae:	bf00      	nop
 80143b0:	58024400 	.word	0x58024400
 80143b4:	03d09000 	.word	0x03d09000
 80143b8:	003d0900 	.word	0x003d0900
 80143bc:	08029e04 	.word	0x08029e04

080143c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80143c0:	b480      	push	{r7}
 80143c2:	b083      	sub	sp, #12
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143cc:	f003 0301 	and.w	r3, r3, #1
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d00a      	beq.n	80143ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	430a      	orrs	r2, r1
 80143e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143ee:	f003 0302 	and.w	r3, r3, #2
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d00a      	beq.n	801440c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	685b      	ldr	r3, [r3, #4]
 80143fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	430a      	orrs	r2, r1
 801440a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014410:	f003 0304 	and.w	r3, r3, #4
 8014414:	2b00      	cmp	r3, #0
 8014416:	d00a      	beq.n	801442e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	430a      	orrs	r2, r1
 801442c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014432:	f003 0308 	and.w	r3, r3, #8
 8014436:	2b00      	cmp	r3, #0
 8014438:	d00a      	beq.n	8014450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	430a      	orrs	r2, r1
 801444e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014454:	f003 0310 	and.w	r3, r3, #16
 8014458:	2b00      	cmp	r3, #0
 801445a:	d00a      	beq.n	8014472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	689b      	ldr	r3, [r3, #8]
 8014462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	430a      	orrs	r2, r1
 8014470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014476:	f003 0320 	and.w	r3, r3, #32
 801447a:	2b00      	cmp	r3, #0
 801447c:	d00a      	beq.n	8014494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	689b      	ldr	r3, [r3, #8]
 8014484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	430a      	orrs	r2, r1
 8014492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801449c:	2b00      	cmp	r3, #0
 801449e:	d01a      	beq.n	80144d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	430a      	orrs	r2, r1
 80144b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80144be:	d10a      	bne.n	80144d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	685b      	ldr	r3, [r3, #4]
 80144c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	430a      	orrs	r2, r1
 80144d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d00a      	beq.n	80144f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	430a      	orrs	r2, r1
 80144f6:	605a      	str	r2, [r3, #4]
  }
}
 80144f8:	bf00      	nop
 80144fa:	370c      	adds	r7, #12
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr

08014504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b086      	sub	sp, #24
 8014508:	af02      	add	r7, sp, #8
 801450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2200      	movs	r2, #0
 8014510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014514:	f7f9 f822 	bl	800d55c <HAL_GetTick>
 8014518:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	f003 0308 	and.w	r3, r3, #8
 8014524:	2b08      	cmp	r3, #8
 8014526:	d10e      	bne.n	8014546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801452c:	9300      	str	r3, [sp, #0]
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	2200      	movs	r2, #0
 8014532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f000 f82f 	bl	801459a <UART_WaitOnFlagUntilTimeout>
 801453c:	4603      	mov	r3, r0
 801453e:	2b00      	cmp	r3, #0
 8014540:	d001      	beq.n	8014546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014542:	2303      	movs	r3, #3
 8014544:	e025      	b.n	8014592 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	f003 0304 	and.w	r3, r3, #4
 8014550:	2b04      	cmp	r3, #4
 8014552:	d10e      	bne.n	8014572 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014558:	9300      	str	r3, [sp, #0]
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	2200      	movs	r2, #0
 801455e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 f819 	bl	801459a <UART_WaitOnFlagUntilTimeout>
 8014568:	4603      	mov	r3, r0
 801456a:	2b00      	cmp	r3, #0
 801456c:	d001      	beq.n	8014572 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801456e:	2303      	movs	r3, #3
 8014570:	e00f      	b.n	8014592 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	2220      	movs	r2, #32
 8014576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2220      	movs	r2, #32
 801457e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2200      	movs	r2, #0
 8014586:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2200      	movs	r2, #0
 801458c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014590:	2300      	movs	r3, #0
}
 8014592:	4618      	mov	r0, r3
 8014594:	3710      	adds	r7, #16
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}

0801459a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801459a:	b580      	push	{r7, lr}
 801459c:	b09c      	sub	sp, #112	; 0x70
 801459e:	af00      	add	r7, sp, #0
 80145a0:	60f8      	str	r0, [r7, #12]
 80145a2:	60b9      	str	r1, [r7, #8]
 80145a4:	603b      	str	r3, [r7, #0]
 80145a6:	4613      	mov	r3, r2
 80145a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80145aa:	e0a9      	b.n	8014700 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80145ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80145ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145b2:	f000 80a5 	beq.w	8014700 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80145b6:	f7f8 ffd1 	bl	800d55c <HAL_GetTick>
 80145ba:	4602      	mov	r2, r0
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	1ad3      	subs	r3, r2, r3
 80145c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d302      	bcc.n	80145cc <UART_WaitOnFlagUntilTimeout+0x32>
 80145c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d140      	bne.n	801464e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145d4:	e853 3f00 	ldrex	r3, [r3]
 80145d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80145da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80145dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80145e0:	667b      	str	r3, [r7, #100]	; 0x64
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	461a      	mov	r2, r3
 80145e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80145ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80145ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80145f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80145f2:	e841 2300 	strex	r3, r2, [r1]
 80145f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80145f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d1e6      	bne.n	80145cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	3308      	adds	r3, #8
 8014604:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014608:	e853 3f00 	ldrex	r3, [r3]
 801460c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014610:	f023 0301 	bic.w	r3, r3, #1
 8014614:	663b      	str	r3, [r7, #96]	; 0x60
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	3308      	adds	r3, #8
 801461c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801461e:	64ba      	str	r2, [r7, #72]	; 0x48
 8014620:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014626:	e841 2300 	strex	r3, r2, [r1]
 801462a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801462c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801462e:	2b00      	cmp	r3, #0
 8014630:	d1e5      	bne.n	80145fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	2220      	movs	r2, #32
 8014636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	2220      	movs	r2, #32
 801463e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	2200      	movs	r2, #0
 8014646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801464a:	2303      	movs	r3, #3
 801464c:	e069      	b.n	8014722 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f003 0304 	and.w	r3, r3, #4
 8014658:	2b00      	cmp	r3, #0
 801465a:	d051      	beq.n	8014700 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	69db      	ldr	r3, [r3, #28]
 8014662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801466a:	d149      	bne.n	8014700 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014674:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801467e:	e853 3f00 	ldrex	r3, [r3]
 8014682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801468a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	461a      	mov	r2, r3
 8014692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014694:	637b      	str	r3, [r7, #52]	; 0x34
 8014696:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801469a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801469c:	e841 2300 	strex	r3, r2, [r1]
 80146a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80146a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d1e6      	bne.n	8014676 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	3308      	adds	r3, #8
 80146ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	e853 3f00 	ldrex	r3, [r3]
 80146b6:	613b      	str	r3, [r7, #16]
   return(result);
 80146b8:	693b      	ldr	r3, [r7, #16]
 80146ba:	f023 0301 	bic.w	r3, r3, #1
 80146be:	66bb      	str	r3, [r7, #104]	; 0x68
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	3308      	adds	r3, #8
 80146c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80146c8:	623a      	str	r2, [r7, #32]
 80146ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146cc:	69f9      	ldr	r1, [r7, #28]
 80146ce:	6a3a      	ldr	r2, [r7, #32]
 80146d0:	e841 2300 	strex	r3, r2, [r1]
 80146d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80146d6:	69bb      	ldr	r3, [r7, #24]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d1e5      	bne.n	80146a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	2220      	movs	r2, #32
 80146e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	2220      	movs	r2, #32
 80146e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2220      	movs	r2, #32
 80146f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	2200      	movs	r2, #0
 80146f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80146fc:	2303      	movs	r3, #3
 80146fe:	e010      	b.n	8014722 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	69da      	ldr	r2, [r3, #28]
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	4013      	ands	r3, r2
 801470a:	68ba      	ldr	r2, [r7, #8]
 801470c:	429a      	cmp	r2, r3
 801470e:	bf0c      	ite	eq
 8014710:	2301      	moveq	r3, #1
 8014712:	2300      	movne	r3, #0
 8014714:	b2db      	uxtb	r3, r3
 8014716:	461a      	mov	r2, r3
 8014718:	79fb      	ldrb	r3, [r7, #7]
 801471a:	429a      	cmp	r2, r3
 801471c:	f43f af46 	beq.w	80145ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014720:	2300      	movs	r3, #0
}
 8014722:	4618      	mov	r0, r3
 8014724:	3770      	adds	r7, #112	; 0x70
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}

0801472a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801472a:	b480      	push	{r7}
 801472c:	b085      	sub	sp, #20
 801472e:	af00      	add	r7, sp, #0
 8014730:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014738:	2b01      	cmp	r3, #1
 801473a:	d101      	bne.n	8014740 <HAL_UARTEx_DisableFifoMode+0x16>
 801473c:	2302      	movs	r3, #2
 801473e:	e027      	b.n	8014790 <HAL_UARTEx_DisableFifoMode+0x66>
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	2201      	movs	r2, #1
 8014744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2224      	movs	r2, #36	; 0x24
 801474c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	681a      	ldr	r2, [r3, #0]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	f022 0201 	bic.w	r2, r2, #1
 8014766:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801476e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	2200      	movs	r2, #0
 8014774:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	68fa      	ldr	r2, [r7, #12]
 801477c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2220      	movs	r2, #32
 8014782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	2200      	movs	r2, #0
 801478a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801478e:	2300      	movs	r3, #0
}
 8014790:	4618      	mov	r0, r3
 8014792:	3714      	adds	r7, #20
 8014794:	46bd      	mov	sp, r7
 8014796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479a:	4770      	bx	lr

0801479c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b084      	sub	sp, #16
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
 80147a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80147ac:	2b01      	cmp	r3, #1
 80147ae:	d101      	bne.n	80147b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80147b0:	2302      	movs	r3, #2
 80147b2:	e02d      	b.n	8014810 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2201      	movs	r2, #1
 80147b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	2224      	movs	r2, #36	; 0x24
 80147c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	681a      	ldr	r2, [r3, #0]
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	f022 0201 	bic.w	r2, r2, #1
 80147da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	689b      	ldr	r3, [r3, #8]
 80147e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	683a      	ldr	r2, [r7, #0]
 80147ec:	430a      	orrs	r2, r1
 80147ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f000 f84f 	bl	8014894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	68fa      	ldr	r2, [r7, #12]
 80147fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2220      	movs	r2, #32
 8014802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2200      	movs	r2, #0
 801480a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801480e:	2300      	movs	r3, #0
}
 8014810:	4618      	mov	r0, r3
 8014812:	3710      	adds	r7, #16
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b084      	sub	sp, #16
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
 8014820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014828:	2b01      	cmp	r3, #1
 801482a:	d101      	bne.n	8014830 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801482c:	2302      	movs	r3, #2
 801482e:	e02d      	b.n	801488c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2201      	movs	r2, #1
 8014834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2224      	movs	r2, #36	; 0x24
 801483c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	681a      	ldr	r2, [r3, #0]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	f022 0201 	bic.w	r2, r2, #1
 8014856:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	689b      	ldr	r3, [r3, #8]
 801485e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	683a      	ldr	r2, [r7, #0]
 8014868:	430a      	orrs	r2, r1
 801486a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f000 f811 	bl	8014894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	68fa      	ldr	r2, [r7, #12]
 8014878:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2220      	movs	r2, #32
 801487e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2200      	movs	r2, #0
 8014886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801488a:	2300      	movs	r3, #0
}
 801488c:	4618      	mov	r0, r3
 801488e:	3710      	adds	r7, #16
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}

08014894 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014894:	b480      	push	{r7}
 8014896:	b085      	sub	sp, #20
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d108      	bne.n	80148b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2201      	movs	r2, #1
 80148a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2201      	movs	r2, #1
 80148b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80148b4:	e031      	b.n	801491a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80148b6:	2310      	movs	r3, #16
 80148b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80148ba:	2310      	movs	r3, #16
 80148bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	689b      	ldr	r3, [r3, #8]
 80148c4:	0e5b      	lsrs	r3, r3, #25
 80148c6:	b2db      	uxtb	r3, r3
 80148c8:	f003 0307 	and.w	r3, r3, #7
 80148cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	689b      	ldr	r3, [r3, #8]
 80148d4:	0f5b      	lsrs	r3, r3, #29
 80148d6:	b2db      	uxtb	r3, r3
 80148d8:	f003 0307 	and.w	r3, r3, #7
 80148dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80148de:	7bbb      	ldrb	r3, [r7, #14]
 80148e0:	7b3a      	ldrb	r2, [r7, #12]
 80148e2:	4911      	ldr	r1, [pc, #68]	; (8014928 <UARTEx_SetNbDataToProcess+0x94>)
 80148e4:	5c8a      	ldrb	r2, [r1, r2]
 80148e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80148ea:	7b3a      	ldrb	r2, [r7, #12]
 80148ec:	490f      	ldr	r1, [pc, #60]	; (801492c <UARTEx_SetNbDataToProcess+0x98>)
 80148ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80148f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80148f4:	b29a      	uxth	r2, r3
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80148fc:	7bfb      	ldrb	r3, [r7, #15]
 80148fe:	7b7a      	ldrb	r2, [r7, #13]
 8014900:	4909      	ldr	r1, [pc, #36]	; (8014928 <UARTEx_SetNbDataToProcess+0x94>)
 8014902:	5c8a      	ldrb	r2, [r1, r2]
 8014904:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014908:	7b7a      	ldrb	r2, [r7, #13]
 801490a:	4908      	ldr	r1, [pc, #32]	; (801492c <UARTEx_SetNbDataToProcess+0x98>)
 801490c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801490e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014912:	b29a      	uxth	r2, r3
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801491a:	bf00      	nop
 801491c:	3714      	adds	r7, #20
 801491e:	46bd      	mov	sp, r7
 8014920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014924:	4770      	bx	lr
 8014926:	bf00      	nop
 8014928:	08029e1c 	.word	0x08029e1c
 801492c:	08029e24 	.word	0x08029e24

08014930 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8014930:	b480      	push	{r7}
 8014932:	b083      	sub	sp, #12
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
 8014938:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d121      	bne.n	8014986 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	681a      	ldr	r2, [r3, #0]
 8014946:	4b27      	ldr	r3, [pc, #156]	; (80149e4 <FMC_SDRAM_Init+0xb4>)
 8014948:	4013      	ands	r3, r2
 801494a:	683a      	ldr	r2, [r7, #0]
 801494c:	6851      	ldr	r1, [r2, #4]
 801494e:	683a      	ldr	r2, [r7, #0]
 8014950:	6892      	ldr	r2, [r2, #8]
 8014952:	4311      	orrs	r1, r2
 8014954:	683a      	ldr	r2, [r7, #0]
 8014956:	68d2      	ldr	r2, [r2, #12]
 8014958:	4311      	orrs	r1, r2
 801495a:	683a      	ldr	r2, [r7, #0]
 801495c:	6912      	ldr	r2, [r2, #16]
 801495e:	4311      	orrs	r1, r2
 8014960:	683a      	ldr	r2, [r7, #0]
 8014962:	6952      	ldr	r2, [r2, #20]
 8014964:	4311      	orrs	r1, r2
 8014966:	683a      	ldr	r2, [r7, #0]
 8014968:	6992      	ldr	r2, [r2, #24]
 801496a:	4311      	orrs	r1, r2
 801496c:	683a      	ldr	r2, [r7, #0]
 801496e:	69d2      	ldr	r2, [r2, #28]
 8014970:	4311      	orrs	r1, r2
 8014972:	683a      	ldr	r2, [r7, #0]
 8014974:	6a12      	ldr	r2, [r2, #32]
 8014976:	4311      	orrs	r1, r2
 8014978:	683a      	ldr	r2, [r7, #0]
 801497a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801497c:	430a      	orrs	r2, r1
 801497e:	431a      	orrs	r2, r3
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	601a      	str	r2, [r3, #0]
 8014984:	e026      	b.n	80149d4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	69d9      	ldr	r1, [r3, #28]
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	6a1b      	ldr	r3, [r3, #32]
 8014996:	4319      	orrs	r1, r3
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801499c:	430b      	orrs	r3, r1
 801499e:	431a      	orrs	r2, r3
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	685a      	ldr	r2, [r3, #4]
 80149a8:	4b0e      	ldr	r3, [pc, #56]	; (80149e4 <FMC_SDRAM_Init+0xb4>)
 80149aa:	4013      	ands	r3, r2
 80149ac:	683a      	ldr	r2, [r7, #0]
 80149ae:	6851      	ldr	r1, [r2, #4]
 80149b0:	683a      	ldr	r2, [r7, #0]
 80149b2:	6892      	ldr	r2, [r2, #8]
 80149b4:	4311      	orrs	r1, r2
 80149b6:	683a      	ldr	r2, [r7, #0]
 80149b8:	68d2      	ldr	r2, [r2, #12]
 80149ba:	4311      	orrs	r1, r2
 80149bc:	683a      	ldr	r2, [r7, #0]
 80149be:	6912      	ldr	r2, [r2, #16]
 80149c0:	4311      	orrs	r1, r2
 80149c2:	683a      	ldr	r2, [r7, #0]
 80149c4:	6952      	ldr	r2, [r2, #20]
 80149c6:	4311      	orrs	r1, r2
 80149c8:	683a      	ldr	r2, [r7, #0]
 80149ca:	6992      	ldr	r2, [r2, #24]
 80149cc:	430a      	orrs	r2, r1
 80149ce:	431a      	orrs	r2, r3
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80149d4:	2300      	movs	r3, #0
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	370c      	adds	r7, #12
 80149da:	46bd      	mov	sp, r7
 80149dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e0:	4770      	bx	lr
 80149e2:	bf00      	nop
 80149e4:	ffff8000 	.word	0xffff8000

080149e8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80149e8:	b480      	push	{r7}
 80149ea:	b085      	sub	sp, #20
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	60f8      	str	r0, [r7, #12]
 80149f0:	60b9      	str	r1, [r7, #8]
 80149f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d128      	bne.n	8014a4c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	689b      	ldr	r3, [r3, #8]
 80149fe:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	1e59      	subs	r1, r3, #1
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	685b      	ldr	r3, [r3, #4]
 8014a0c:	3b01      	subs	r3, #1
 8014a0e:	011b      	lsls	r3, r3, #4
 8014a10:	4319      	orrs	r1, r3
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	689b      	ldr	r3, [r3, #8]
 8014a16:	3b01      	subs	r3, #1
 8014a18:	021b      	lsls	r3, r3, #8
 8014a1a:	4319      	orrs	r1, r3
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	68db      	ldr	r3, [r3, #12]
 8014a20:	3b01      	subs	r3, #1
 8014a22:	031b      	lsls	r3, r3, #12
 8014a24:	4319      	orrs	r1, r3
 8014a26:	68bb      	ldr	r3, [r7, #8]
 8014a28:	691b      	ldr	r3, [r3, #16]
 8014a2a:	3b01      	subs	r3, #1
 8014a2c:	041b      	lsls	r3, r3, #16
 8014a2e:	4319      	orrs	r1, r3
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	695b      	ldr	r3, [r3, #20]
 8014a34:	3b01      	subs	r3, #1
 8014a36:	051b      	lsls	r3, r3, #20
 8014a38:	4319      	orrs	r1, r3
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	699b      	ldr	r3, [r3, #24]
 8014a3e:	3b01      	subs	r3, #1
 8014a40:	061b      	lsls	r3, r3, #24
 8014a42:	430b      	orrs	r3, r1
 8014a44:	431a      	orrs	r2, r3
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	609a      	str	r2, [r3, #8]
 8014a4a:	e02d      	b.n	8014aa8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	689a      	ldr	r2, [r3, #8]
 8014a50:	4b19      	ldr	r3, [pc, #100]	; (8014ab8 <FMC_SDRAM_Timing_Init+0xd0>)
 8014a52:	4013      	ands	r3, r2
 8014a54:	68ba      	ldr	r2, [r7, #8]
 8014a56:	68d2      	ldr	r2, [r2, #12]
 8014a58:	3a01      	subs	r2, #1
 8014a5a:	0311      	lsls	r1, r2, #12
 8014a5c:	68ba      	ldr	r2, [r7, #8]
 8014a5e:	6952      	ldr	r2, [r2, #20]
 8014a60:	3a01      	subs	r2, #1
 8014a62:	0512      	lsls	r2, r2, #20
 8014a64:	430a      	orrs	r2, r1
 8014a66:	431a      	orrs	r2, r3
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	68db      	ldr	r3, [r3, #12]
 8014a70:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	1e59      	subs	r1, r3, #1
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	685b      	ldr	r3, [r3, #4]
 8014a7e:	3b01      	subs	r3, #1
 8014a80:	011b      	lsls	r3, r3, #4
 8014a82:	4319      	orrs	r1, r3
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	689b      	ldr	r3, [r3, #8]
 8014a88:	3b01      	subs	r3, #1
 8014a8a:	021b      	lsls	r3, r3, #8
 8014a8c:	4319      	orrs	r1, r3
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	691b      	ldr	r3, [r3, #16]
 8014a92:	3b01      	subs	r3, #1
 8014a94:	041b      	lsls	r3, r3, #16
 8014a96:	4319      	orrs	r1, r3
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	699b      	ldr	r3, [r3, #24]
 8014a9c:	3b01      	subs	r3, #1
 8014a9e:	061b      	lsls	r3, r3, #24
 8014aa0:	430b      	orrs	r3, r1
 8014aa2:	431a      	orrs	r2, r3
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8014aa8:	2300      	movs	r3, #0
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3714      	adds	r7, #20
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab4:	4770      	bx	lr
 8014ab6:	bf00      	nop
 8014ab8:	ff0f0fff 	.word	0xff0f0fff

08014abc <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8014abc:	b480      	push	{r7}
 8014abe:	b083      	sub	sp, #12
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
 8014ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	683a      	ldr	r2, [r7, #0]
 8014aca:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8014ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	683a      	ldr	r2, [r7, #0]
 8014ad6:	3202      	adds	r2, #2
 8014ad8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8014adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	2200      	movs	r2, #0
 8014aea:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2200      	movs	r2, #0
 8014af0:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8014af2:	2300      	movs	r3, #0
}
 8014af4:	4618      	mov	r0, r3
 8014af6:	370c      	adds	r7, #12
 8014af8:	46bd      	mov	sp, r7
 8014afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afe:	4770      	bx	lr

08014b00 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8014b00:	b480      	push	{r7}
 8014b02:	b085      	sub	sp, #20
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	60f8      	str	r0, [r7, #12]
 8014b08:	60b9      	str	r1, [r7, #8]
 8014b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	691a      	ldr	r2, [r3, #16]
 8014b10:	4b0c      	ldr	r3, [pc, #48]	; (8014b44 <FMC_SDRAM_SendCommand+0x44>)
 8014b12:	4013      	ands	r3, r2
 8014b14:	68ba      	ldr	r2, [r7, #8]
 8014b16:	6811      	ldr	r1, [r2, #0]
 8014b18:	68ba      	ldr	r2, [r7, #8]
 8014b1a:	6852      	ldr	r2, [r2, #4]
 8014b1c:	4311      	orrs	r1, r2
 8014b1e:	68ba      	ldr	r2, [r7, #8]
 8014b20:	6892      	ldr	r2, [r2, #8]
 8014b22:	3a01      	subs	r2, #1
 8014b24:	0152      	lsls	r2, r2, #5
 8014b26:	4311      	orrs	r1, r2
 8014b28:	68ba      	ldr	r2, [r7, #8]
 8014b2a:	68d2      	ldr	r2, [r2, #12]
 8014b2c:	0252      	lsls	r2, r2, #9
 8014b2e:	430a      	orrs	r2, r1
 8014b30:	431a      	orrs	r2, r3
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8014b36:	2300      	movs	r3, #0
}
 8014b38:	4618      	mov	r0, r3
 8014b3a:	3714      	adds	r7, #20
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b42:	4770      	bx	lr
 8014b44:	ffc00000 	.word	0xffc00000

08014b48 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8014b48:	b480      	push	{r7}
 8014b4a:	b083      	sub	sp, #12
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
 8014b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	695a      	ldr	r2, [r3, #20]
 8014b56:	4b07      	ldr	r3, [pc, #28]	; (8014b74 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8014b58:	4013      	ands	r3, r2
 8014b5a:	683a      	ldr	r2, [r7, #0]
 8014b5c:	0052      	lsls	r2, r2, #1
 8014b5e:	431a      	orrs	r2, r3
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8014b64:	2300      	movs	r3, #0
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	370c      	adds	r7, #12
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b70:	4770      	bx	lr
 8014b72:	bf00      	nop
 8014b74:	ffffc001 	.word	0xffffc001

08014b78 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014b78:	8880      	ldrh	r0, [r0, #4]
 8014b7a:	4770      	bx	lr

08014b7c <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	8083      	strh	r3, [r0, #4]
 8014b80:	4770      	bx	lr
	...

08014b84 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b86:	6803      	ldr	r3, [r0, #0]
 8014b88:	460e      	mov	r6, r1
 8014b8a:	2100      	movs	r1, #0
 8014b8c:	4605      	mov	r5, r0
 8014b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b90:	4798      	blx	r3
 8014b92:	4604      	mov	r4, r0
 8014b94:	682b      	ldr	r3, [r5, #0]
 8014b96:	4628      	mov	r0, r5
 8014b98:	1b34      	subs	r4, r6, r4
 8014b9a:	6a1b      	ldr	r3, [r3, #32]
 8014b9c:	b2a4      	uxth	r4, r4
 8014b9e:	4798      	blx	r3
 8014ba0:	88ab      	ldrh	r3, [r5, #4]
 8014ba2:	fbb4 f4f0 	udiv	r4, r4, r0
 8014ba6:	42a3      	cmp	r3, r4
 8014ba8:	d805      	bhi.n	8014bb6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8014baa:	4b0e      	ldr	r3, [pc, #56]	; (8014be4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8014bac:	211e      	movs	r1, #30
 8014bae:	4a0e      	ldr	r2, [pc, #56]	; (8014be8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014bb0:	480e      	ldr	r0, [pc, #56]	; (8014bec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8014bb2:	f012 fe53 	bl	802785c <__assert_func>
 8014bb6:	682b      	ldr	r3, [r5, #0]
 8014bb8:	2100      	movs	r1, #0
 8014bba:	4628      	mov	r0, r5
 8014bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bbe:	4798      	blx	r3
 8014bc0:	682b      	ldr	r3, [r5, #0]
 8014bc2:	4607      	mov	r7, r0
 8014bc4:	4628      	mov	r0, r5
 8014bc6:	6a1b      	ldr	r3, [r3, #32]
 8014bc8:	4798      	blx	r3
 8014bca:	1bf3      	subs	r3, r6, r7
 8014bcc:	b29b      	uxth	r3, r3
 8014bce:	fbb3 f2f0 	udiv	r2, r3, r0
 8014bd2:	fb02 3010 	mls	r0, r2, r0, r3
 8014bd6:	b118      	cbz	r0, 8014be0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8014bd8:	4b05      	ldr	r3, [pc, #20]	; (8014bf0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8014bda:	211f      	movs	r1, #31
 8014bdc:	4a02      	ldr	r2, [pc, #8]	; (8014be8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014bde:	e7e7      	b.n	8014bb0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8014be0:	4620      	mov	r0, r4
 8014be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014be4:	08029e2c 	.word	0x08029e2c
 8014be8:	08029f9a 	.word	0x08029f9a
 8014bec:	08029e41 	.word	0x08029e41
 8014bf0:	08029e6f 	.word	0x08029e6f

08014bf4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014bf4:	b538      	push	{r3, r4, r5, lr}
 8014bf6:	6803      	ldr	r3, [r0, #0]
 8014bf8:	460d      	mov	r5, r1
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	6a1b      	ldr	r3, [r3, #32]
 8014bfe:	4798      	blx	r3
 8014c00:	4285      	cmp	r5, r0
 8014c02:	d905      	bls.n	8014c10 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8014c04:	4b0c      	ldr	r3, [pc, #48]	; (8014c38 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8014c06:	2130      	movs	r1, #48	; 0x30
 8014c08:	4a0c      	ldr	r2, [pc, #48]	; (8014c3c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014c0a:	480d      	ldr	r0, [pc, #52]	; (8014c40 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8014c0c:	f012 fe26 	bl	802785c <__assert_func>
 8014c10:	6823      	ldr	r3, [r4, #0]
 8014c12:	4620      	mov	r0, r4
 8014c14:	88a5      	ldrh	r5, [r4, #4]
 8014c16:	69db      	ldr	r3, [r3, #28]
 8014c18:	4798      	blx	r3
 8014c1a:	4285      	cmp	r5, r0
 8014c1c:	d303      	bcc.n	8014c26 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8014c1e:	4b09      	ldr	r3, [pc, #36]	; (8014c44 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8014c20:	2131      	movs	r1, #49	; 0x31
 8014c22:	4a06      	ldr	r2, [pc, #24]	; (8014c3c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014c24:	e7f1      	b.n	8014c0a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8014c26:	6823      	ldr	r3, [r4, #0]
 8014c28:	4620      	mov	r0, r4
 8014c2a:	88a1      	ldrh	r1, [r4, #4]
 8014c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c2e:	4798      	blx	r3
 8014c30:	88a3      	ldrh	r3, [r4, #4]
 8014c32:	3301      	adds	r3, #1
 8014c34:	80a3      	strh	r3, [r4, #4]
 8014c36:	bd38      	pop	{r3, r4, r5, pc}
 8014c38:	08029ee9 	.word	0x08029ee9
 8014c3c:	08029fdd 	.word	0x08029fdd
 8014c40:	08029e41 	.word	0x08029e41
 8014c44:	08029f00 	.word	0x08029f00

08014c48 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014c48:	b570      	push	{r4, r5, r6, lr}
 8014c4a:	6803      	ldr	r3, [r0, #0]
 8014c4c:	4616      	mov	r6, r2
 8014c4e:	4604      	mov	r4, r0
 8014c50:	460d      	mov	r5, r1
 8014c52:	6a1b      	ldr	r3, [r3, #32]
 8014c54:	4798      	blx	r3
 8014c56:	4286      	cmp	r6, r0
 8014c58:	d905      	bls.n	8014c66 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8014c5a:	4b06      	ldr	r3, [pc, #24]	; (8014c74 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8014c5c:	213a      	movs	r1, #58	; 0x3a
 8014c5e:	4a06      	ldr	r2, [pc, #24]	; (8014c78 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8014c60:	4806      	ldr	r0, [pc, #24]	; (8014c7c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8014c62:	f012 fdfb 	bl	802785c <__assert_func>
 8014c66:	6823      	ldr	r3, [r4, #0]
 8014c68:	4629      	mov	r1, r5
 8014c6a:	4620      	mov	r0, r4
 8014c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c72:	4718      	bx	r3
 8014c74:	08029ee9 	.word	0x08029ee9
 8014c78:	08029f50 	.word	0x08029f50
 8014c7c:	08029e41 	.word	0x08029e41

08014c80 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014c80:	4770      	bx	lr
	...

08014c84 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014c84:	4a02      	ldr	r2, [pc, #8]	; (8014c90 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014c86:	6002      	str	r2, [r0, #0]
 8014c88:	2200      	movs	r2, #0
 8014c8a:	8082      	strh	r2, [r0, #4]
 8014c8c:	4770      	bx	lr
 8014c8e:	bf00      	nop
 8014c90:	08029f24 	.word	0x08029f24

08014c94 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014c94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014c96:	2000      	movs	r0, #0
 8014c98:	b12b      	cbz	r3, 8014ca6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014c9a:	b920      	cbnz	r0, 8014ca6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014c9c:	1a5a      	subs	r2, r3, r1
 8014c9e:	699b      	ldr	r3, [r3, #24]
 8014ca0:	4250      	negs	r0, r2
 8014ca2:	4150      	adcs	r0, r2
 8014ca4:	e7f8      	b.n	8014c98 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8014ca6:	4770      	bx	lr

08014ca8 <_ZN8touchgfx9Container9removeAllEv>:
 8014ca8:	2200      	movs	r2, #0
 8014caa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014cac:	b123      	cbz	r3, 8014cb8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014cae:	6999      	ldr	r1, [r3, #24]
 8014cb0:	6281      	str	r1, [r0, #40]	; 0x28
 8014cb2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014cb6:	e7f8      	b.n	8014caa <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014cb8:	4770      	bx	lr

08014cba <_ZN8touchgfx9Container6unlinkEv>:
 8014cba:	2300      	movs	r3, #0
 8014cbc:	6283      	str	r3, [r0, #40]	; 0x28
 8014cbe:	4770      	bx	lr

08014cc0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	8002      	strh	r2, [r0, #0]
 8014cc4:	8042      	strh	r2, [r0, #2]
 8014cc6:	8082      	strh	r2, [r0, #4]
 8014cc8:	80c2      	strh	r2, [r0, #6]
 8014cca:	4770      	bx	lr

08014ccc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014ccc:	b570      	push	{r4, r5, r6, lr}
 8014cce:	460d      	mov	r5, r1
 8014cd0:	4616      	mov	r6, r2
 8014cd2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014cd4:	b13c      	cbz	r4, 8014ce6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014cd6:	6823      	ldr	r3, [r4, #0]
 8014cd8:	4620      	mov	r0, r4
 8014cda:	4632      	mov	r2, r6
 8014cdc:	4629      	mov	r1, r5
 8014cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ce0:	4798      	blx	r3
 8014ce2:	69a4      	ldr	r4, [r4, #24]
 8014ce4:	e7f6      	b.n	8014cd4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014ce6:	bd70      	pop	{r4, r5, r6, pc}

08014ce8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014ce8:	b538      	push	{r3, r4, r5, lr}
 8014cea:	460d      	mov	r5, r1
 8014cec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014cee:	b134      	cbz	r4, 8014cfe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014cf0:	682b      	ldr	r3, [r5, #0]
 8014cf2:	4621      	mov	r1, r4
 8014cf4:	4628      	mov	r0, r5
 8014cf6:	689b      	ldr	r3, [r3, #8]
 8014cf8:	4798      	blx	r3
 8014cfa:	69a4      	ldr	r4, [r4, #24]
 8014cfc:	e7f7      	b.n	8014cee <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014cfe:	bd38      	pop	{r3, r4, r5, pc}

08014d00 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014d00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014d02:	b19b      	cbz	r3, 8014d2c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014d04:	428b      	cmp	r3, r1
 8014d06:	d109      	bne.n	8014d1c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014d08:	699a      	ldr	r2, [r3, #24]
 8014d0a:	2100      	movs	r1, #0
 8014d0c:	6159      	str	r1, [r3, #20]
 8014d0e:	6282      	str	r2, [r0, #40]	; 0x28
 8014d10:	b902      	cbnz	r2, 8014d14 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014d12:	4770      	bx	lr
 8014d14:	6199      	str	r1, [r3, #24]
 8014d16:	4770      	bx	lr
 8014d18:	4613      	mov	r3, r2
 8014d1a:	b13a      	cbz	r2, 8014d2c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014d1c:	699a      	ldr	r2, [r3, #24]
 8014d1e:	428a      	cmp	r2, r1
 8014d20:	d1fa      	bne.n	8014d18 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014d22:	698a      	ldr	r2, [r1, #24]
 8014d24:	619a      	str	r2, [r3, #24]
 8014d26:	2300      	movs	r3, #0
 8014d28:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014d2c:	4770      	bx	lr

08014d2e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014d2e:	b410      	push	{r4}
 8014d30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014d32:	4604      	mov	r4, r0
 8014d34:	b92b      	cbnz	r3, 8014d42 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014d36:	6803      	ldr	r3, [r0, #0]
 8014d38:	4611      	mov	r1, r2
 8014d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014d40:	4718      	bx	r3
 8014d42:	b941      	cbnz	r1, 8014d56 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014d44:	6193      	str	r3, [r2, #24]
 8014d46:	6282      	str	r2, [r0, #40]	; 0x28
 8014d48:	6154      	str	r4, [r2, #20]
 8014d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d4e:	4770      	bx	lr
 8014d50:	4603      	mov	r3, r0
 8014d52:	2800      	cmp	r0, #0
 8014d54:	d0f9      	beq.n	8014d4a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8014d56:	4299      	cmp	r1, r3
 8014d58:	6998      	ldr	r0, [r3, #24]
 8014d5a:	d1f9      	bne.n	8014d50 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014d5c:	6190      	str	r0, [r2, #24]
 8014d5e:	618a      	str	r2, [r1, #24]
 8014d60:	e7f2      	b.n	8014d48 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08014d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8014d64:	4288      	cmp	r0, r1
 8014d66:	b508      	push	{r3, lr}
 8014d68:	d105      	bne.n	8014d76 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8014d6a:	4b11      	ldr	r3, [pc, #68]	; (8014db0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8014d6c:	2123      	movs	r1, #35	; 0x23
 8014d6e:	4a11      	ldr	r2, [pc, #68]	; (8014db4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014d70:	4811      	ldr	r0, [pc, #68]	; (8014db8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8014d72:	f012 fd73 	bl	802785c <__assert_func>
 8014d76:	694b      	ldr	r3, [r1, #20]
 8014d78:	b11b      	cbz	r3, 8014d82 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8014d7a:	4b10      	ldr	r3, [pc, #64]	; (8014dbc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8014d7c:	2124      	movs	r1, #36	; 0x24
 8014d7e:	4a0d      	ldr	r2, [pc, #52]	; (8014db4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014d80:	e7f6      	b.n	8014d70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014d82:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8014d86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014d88:	b913      	cbnz	r3, 8014d90 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8014d8a:	6281      	str	r1, [r0, #40]	; 0x28
 8014d8c:	bd08      	pop	{r3, pc}
 8014d8e:	4613      	mov	r3, r2
 8014d90:	699a      	ldr	r2, [r3, #24]
 8014d92:	b12a      	cbz	r2, 8014da0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8014d94:	428b      	cmp	r3, r1
 8014d96:	d1fa      	bne.n	8014d8e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8014d98:	4b09      	ldr	r3, [pc, #36]	; (8014dc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014d9a:	2135      	movs	r1, #53	; 0x35
 8014d9c:	4a05      	ldr	r2, [pc, #20]	; (8014db4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014d9e:	e7e7      	b.n	8014d70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014da0:	428b      	cmp	r3, r1
 8014da2:	d103      	bne.n	8014dac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8014da4:	4b06      	ldr	r3, [pc, #24]	; (8014dc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014da6:	2138      	movs	r1, #56	; 0x38
 8014da8:	4a02      	ldr	r2, [pc, #8]	; (8014db4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014daa:	e7e1      	b.n	8014d70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014dac:	6199      	str	r1, [r3, #24]
 8014dae:	e7ed      	b.n	8014d8c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8014db0:	0802a01b 	.word	0x0802a01b
 8014db4:	0802a170 	.word	0x0802a170
 8014db8:	0802a047 	.word	0x0802a047
 8014dbc:	0802a07a 	.word	0x0802a07a
 8014dc0:	0802a0b0 	.word	0x0802a0b0

08014dc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dc8:	461f      	mov	r7, r3
 8014dca:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014dce:	460d      	mov	r5, r1
 8014dd0:	4616      	mov	r6, r2
 8014dd2:	b103      	cbz	r3, 8014dd6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014dd4:	6038      	str	r0, [r7, #0]
 8014dd6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014dd8:	b314      	cbz	r4, 8014e20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8014dda:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014dde:	b1eb      	cbz	r3, 8014e1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014de0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014de4:	428d      	cmp	r5, r1
 8014de6:	db19      	blt.n	8014e1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014de8:	b289      	uxth	r1, r1
 8014dea:	8923      	ldrh	r3, [r4, #8]
 8014dec:	440b      	add	r3, r1
 8014dee:	b21b      	sxth	r3, r3
 8014df0:	429d      	cmp	r5, r3
 8014df2:	da13      	bge.n	8014e1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014df4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014df8:	4296      	cmp	r6, r2
 8014dfa:	db0f      	blt.n	8014e1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014dfc:	b292      	uxth	r2, r2
 8014dfe:	8963      	ldrh	r3, [r4, #10]
 8014e00:	4413      	add	r3, r2
 8014e02:	b21b      	sxth	r3, r3
 8014e04:	429e      	cmp	r6, r3
 8014e06:	da09      	bge.n	8014e1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e08:	6823      	ldr	r3, [r4, #0]
 8014e0a:	1ab2      	subs	r2, r6, r2
 8014e0c:	1a69      	subs	r1, r5, r1
 8014e0e:	4620      	mov	r0, r4
 8014e10:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8014e14:	b212      	sxth	r2, r2
 8014e16:	463b      	mov	r3, r7
 8014e18:	b209      	sxth	r1, r1
 8014e1a:	47c0      	blx	r8
 8014e1c:	69a4      	ldr	r4, [r4, #24]
 8014e1e:	e7db      	b.n	8014dd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8014e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e28:	4c6d      	ldr	r4, [pc, #436]	; (8014fe0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8014e2a:	b0a1      	sub	sp, #132	; 0x84
 8014e2c:	4606      	mov	r6, r0
 8014e2e:	6824      	ldr	r4, [r4, #0]
 8014e30:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8014e32:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8014e36:	2400      	movs	r4, #0
 8014e38:	9303      	str	r3, [sp, #12]
 8014e3a:	802c      	strh	r4, [r5, #0]
 8014e3c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8014e3e:	802c      	strh	r4, [r5, #0]
 8014e40:	601c      	str	r4, [r3, #0]
 8014e42:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8014e46:	f7ff ffbd 	bl	8014dc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014e4a:	f1b9 0f03 	cmp.w	r9, #3
 8014e4e:	f340 80c1 	ble.w	8014fd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8014e52:	4631      	mov	r1, r6
 8014e54:	a80c      	add	r0, sp, #48	; 0x30
 8014e56:	f005 f83f 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014e5a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8014e5e:	9306      	str	r3, [sp, #24]
 8014e60:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8014e64:	9307      	str	r3, [sp, #28]
 8014e66:	9b03      	ldr	r3, [sp, #12]
 8014e68:	f8d3 a000 	ldr.w	sl, [r3]
 8014e6c:	f1ba 0f00 	cmp.w	sl, #0
 8014e70:	f000 80b3 	beq.w	8014fda <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8014e74:	4651      	mov	r1, sl
 8014e76:	a810      	add	r0, sp, #64	; 0x40
 8014e78:	f005 f82e 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014e7c:	2002      	movs	r0, #2
 8014e7e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8014e82:	9b01      	ldr	r3, [sp, #4]
 8014e84:	9a06      	ldr	r2, [sp, #24]
 8014e86:	fb91 f1f0 	sdiv	r1, r1, r0
 8014e8a:	189d      	adds	r5, r3, r2
 8014e8c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8014e90:	9a07      	ldr	r2, [sp, #28]
 8014e92:	4419      	add	r1, r3
 8014e94:	9b02      	ldr	r3, [sp, #8]
 8014e96:	4413      	add	r3, r2
 8014e98:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8014e9c:	1a6d      	subs	r5, r5, r1
 8014e9e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8014ea2:	fb92 f2f0 	sdiv	r2, r2, r0
 8014ea6:	440a      	add	r2, r1
 8014ea8:	1a9b      	subs	r3, r3, r2
 8014eaa:	435b      	muls	r3, r3
 8014eac:	fb05 3505 	mla	r5, r5, r5, r3
 8014eb0:	4f4c      	ldr	r7, [pc, #304]	; (8014fe4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8014eb2:	ac10      	add	r4, sp, #64	; 0x40
 8014eb4:	f1b9 0f0c 	cmp.w	r9, #12
 8014eb8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ebc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ec0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ec4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8014ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014ecc:	f04f 0303 	mov.w	r3, #3
 8014ed0:	bfd8      	it	le
 8014ed2:	f109 32ff 	addle.w	r2, r9, #4294967295
 8014ed6:	f04f 0400 	mov.w	r4, #0
 8014eda:	f8cd 9000 	str.w	r9, [sp]
 8014ede:	bfcc      	ite	gt
 8014ee0:	4698      	movgt	r8, r3
 8014ee2:	fb92 f8f3 	sdivle	r8, r2, r3
 8014ee6:	1c63      	adds	r3, r4, #1
 8014ee8:	aa10      	add	r2, sp, #64	; 0x40
 8014eea:	f004 0401 	and.w	r4, r4, #1
 8014eee:	f04f 0b00 	mov.w	fp, #0
 8014ef2:	9308      	str	r3, [sp, #32]
 8014ef4:	9b00      	ldr	r3, [sp, #0]
 8014ef6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8014efa:	fb93 f3f8 	sdiv	r3, r3, r8
 8014efe:	3404      	adds	r4, #4
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	9304      	str	r3, [sp, #16]
 8014f04:	9a04      	ldr	r2, [sp, #16]
 8014f06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014f0a:	fb13 f302 	smulbb	r3, r3, r2
 8014f0e:	9a01      	ldr	r2, [sp, #4]
 8014f10:	b29b      	uxth	r3, r3
 8014f12:	1899      	adds	r1, r3, r2
 8014f14:	9305      	str	r3, [sp, #20]
 8014f16:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014f1a:	b209      	sxth	r1, r1
 8014f1c:	4299      	cmp	r1, r3
 8014f1e:	db4d      	blt.n	8014fbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f20:	8932      	ldrh	r2, [r6, #8]
 8014f22:	4413      	add	r3, r2
 8014f24:	b21b      	sxth	r3, r3
 8014f26:	4299      	cmp	r1, r3
 8014f28:	da48      	bge.n	8014fbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f2a:	9b04      	ldr	r3, [sp, #16]
 8014f2c:	6827      	ldr	r7, [r4, #0]
 8014f2e:	fb17 f703 	smulbb	r7, r7, r3
 8014f32:	9b02      	ldr	r3, [sp, #8]
 8014f34:	b2bf      	uxth	r7, r7
 8014f36:	18fa      	adds	r2, r7, r3
 8014f38:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014f3c:	b212      	sxth	r2, r2
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	db3c      	blt.n	8014fbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f42:	8970      	ldrh	r0, [r6, #10]
 8014f44:	4403      	add	r3, r0
 8014f46:	b21b      	sxth	r3, r3
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	da37      	bge.n	8014fbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	4630      	mov	r0, r6
 8014f50:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f52:	ab0b      	add	r3, sp, #44	; 0x2c
 8014f54:	f7ff ff36 	bl	8014dc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014f5a:	b37a      	cbz	r2, 8014fbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f5c:	4552      	cmp	r2, sl
 8014f5e:	d02d      	beq.n	8014fbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014f60:	4611      	mov	r1, r2
 8014f62:	a80e      	add	r0, sp, #56	; 0x38
 8014f64:	9209      	str	r2, [sp, #36]	; 0x24
 8014f66:	f004 ffb7 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014f6a:	f04f 0e02 	mov.w	lr, #2
 8014f6e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8014f72:	9a06      	ldr	r2, [sp, #24]
 8014f74:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8014f78:	9b01      	ldr	r3, [sp, #4]
 8014f7a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8014f7e:	4413      	add	r3, r2
 8014f80:	9a07      	ldr	r2, [sp, #28]
 8014f82:	fb91 f1fe 	sdiv	r1, r1, lr
 8014f86:	fb9c fcfe 	sdiv	ip, ip, lr
 8014f8a:	4401      	add	r1, r0
 8014f8c:	1a58      	subs	r0, r3, r1
 8014f8e:	9b02      	ldr	r3, [sp, #8]
 8014f90:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8014f94:	4413      	add	r3, r2
 8014f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f98:	448c      	add	ip, r1
 8014f9a:	eba3 030c 	sub.w	r3, r3, ip
 8014f9e:	435b      	muls	r3, r3
 8014fa0:	fb00 3300 	mla	r3, r0, r0, r3
 8014fa4:	42ab      	cmp	r3, r5
 8014fa6:	d208      	bcs.n	8014fba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8014fa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014faa:	461d      	mov	r5, r3
 8014fac:	9803      	ldr	r0, [sp, #12]
 8014fae:	6001      	str	r1, [r0, #0]
 8014fb0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8014fb2:	9805      	ldr	r0, [sp, #20]
 8014fb4:	8008      	strh	r0, [r1, #0]
 8014fb6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014fb8:	800f      	strh	r7, [r1, #0]
 8014fba:	4692      	mov	sl, r2
 8014fbc:	f10b 0b01 	add.w	fp, fp, #1
 8014fc0:	3408      	adds	r4, #8
 8014fc2:	f1bb 0f04 	cmp.w	fp, #4
 8014fc6:	d19d      	bne.n	8014f04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8014fc8:	9b00      	ldr	r3, [sp, #0]
 8014fca:	9c08      	ldr	r4, [sp, #32]
 8014fcc:	444b      	add	r3, r9
 8014fce:	4544      	cmp	r4, r8
 8014fd0:	9300      	str	r3, [sp, #0]
 8014fd2:	d188      	bne.n	8014ee6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8014fd4:	b021      	add	sp, #132	; 0x84
 8014fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fda:	f04f 35ff 	mov.w	r5, #4294967295
 8014fde:	e767      	b.n	8014eb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8014fe0:	2400aeec 	.word	0x2400aeec
 8014fe4:	08029384 	.word	0x08029384

08014fe8 <_ZN8touchgfx4RectaNERKS0_>:
 8014fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fec:	f9b1 7000 	ldrsh.w	r7, [r1]
 8014ff0:	888c      	ldrh	r4, [r1, #4]
 8014ff2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014ff6:	443c      	add	r4, r7
 8014ff8:	b2a4      	uxth	r4, r4
 8014ffa:	fa0f f884 	sxth.w	r8, r4
 8014ffe:	45c1      	cmp	r9, r8
 8015000:	da2f      	bge.n	8015062 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015002:	8882      	ldrh	r2, [r0, #4]
 8015004:	444a      	add	r2, r9
 8015006:	b292      	uxth	r2, r2
 8015008:	fa0f fe82 	sxth.w	lr, r2
 801500c:	4577      	cmp	r7, lr
 801500e:	da28      	bge.n	8015062 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015010:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015014:	88cb      	ldrh	r3, [r1, #6]
 8015016:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801501a:	442b      	add	r3, r5
 801501c:	b21b      	sxth	r3, r3
 801501e:	429e      	cmp	r6, r3
 8015020:	da1f      	bge.n	8015062 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015022:	88c3      	ldrh	r3, [r0, #6]
 8015024:	4433      	add	r3, r6
 8015026:	b29b      	uxth	r3, r3
 8015028:	fa0f fc83 	sxth.w	ip, r3
 801502c:	4565      	cmp	r5, ip
 801502e:	da18      	bge.n	8015062 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015030:	454f      	cmp	r7, r9
 8015032:	bfb8      	it	lt
 8015034:	464f      	movlt	r7, r9
 8015036:	42b5      	cmp	r5, r6
 8015038:	bfb8      	it	lt
 801503a:	4635      	movlt	r5, r6
 801503c:	45f0      	cmp	r8, lr
 801503e:	bfd8      	it	le
 8015040:	4622      	movle	r2, r4
 8015042:	1bd2      	subs	r2, r2, r7
 8015044:	8082      	strh	r2, [r0, #4]
 8015046:	884a      	ldrh	r2, [r1, #2]
 8015048:	88c9      	ldrh	r1, [r1, #6]
 801504a:	8007      	strh	r7, [r0, #0]
 801504c:	440a      	add	r2, r1
 801504e:	8045      	strh	r5, [r0, #2]
 8015050:	b292      	uxth	r2, r2
 8015052:	b211      	sxth	r1, r2
 8015054:	458c      	cmp	ip, r1
 8015056:	bfa8      	it	ge
 8015058:	4613      	movge	r3, r2
 801505a:	1b5b      	subs	r3, r3, r5
 801505c:	80c3      	strh	r3, [r0, #6]
 801505e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015062:	2300      	movs	r3, #0
 8015064:	8003      	strh	r3, [r0, #0]
 8015066:	8043      	strh	r3, [r0, #2]
 8015068:	8083      	strh	r3, [r0, #4]
 801506a:	80c3      	strh	r3, [r0, #6]
 801506c:	e7f7      	b.n	801505e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801506e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801506e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015072:	2b00      	cmp	r3, #0
 8015074:	dd06      	ble.n	8015084 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015076:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801507a:	2800      	cmp	r0, #0
 801507c:	bfcc      	ite	gt
 801507e:	2000      	movgt	r0, #0
 8015080:	2001      	movle	r0, #1
 8015082:	4770      	bx	lr
 8015084:	2001      	movs	r0, #1
 8015086:	4770      	bx	lr

08015088 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801508c:	2300      	movs	r3, #0
 801508e:	4604      	mov	r4, r0
 8015090:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015092:	8003      	strh	r3, [r0, #0]
 8015094:	8043      	strh	r3, [r0, #2]
 8015096:	8083      	strh	r3, [r0, #4]
 8015098:	80c3      	strh	r3, [r0, #6]
 801509a:	2d00      	cmp	r5, #0
 801509c:	d040      	beq.n	8015120 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801509e:	1d28      	adds	r0, r5, #4
 80150a0:	f7ff ffe5 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 80150a4:	b988      	cbnz	r0, 80150ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80150a6:	4620      	mov	r0, r4
 80150a8:	f7ff ffe1 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 80150ac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80150b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80150b4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80150b8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80150bc:	b138      	cbz	r0, 80150ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80150be:	8022      	strh	r2, [r4, #0]
 80150c0:	8063      	strh	r3, [r4, #2]
 80150c2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80150c6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80150ca:	69ad      	ldr	r5, [r5, #24]
 80150cc:	e7e5      	b.n	801509a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80150ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 80150d2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80150d6:	4290      	cmp	r0, r2
 80150d8:	4607      	mov	r7, r0
 80150da:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80150de:	460e      	mov	r6, r1
 80150e0:	bfa8      	it	ge
 80150e2:	4617      	movge	r7, r2
 80150e4:	4299      	cmp	r1, r3
 80150e6:	4472      	add	r2, lr
 80150e8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80150ec:	bfa8      	it	ge
 80150ee:	461e      	movge	r6, r3
 80150f0:	4440      	add	r0, r8
 80150f2:	4471      	add	r1, lr
 80150f4:	4463      	add	r3, ip
 80150f6:	b200      	sxth	r0, r0
 80150f8:	8027      	strh	r7, [r4, #0]
 80150fa:	b212      	sxth	r2, r2
 80150fc:	8066      	strh	r6, [r4, #2]
 80150fe:	b209      	sxth	r1, r1
 8015100:	b21b      	sxth	r3, r3
 8015102:	4290      	cmp	r0, r2
 8015104:	bfac      	ite	ge
 8015106:	ebc7 0200 	rsbge	r2, r7, r0
 801510a:	ebc7 0202 	rsblt	r2, r7, r2
 801510e:	4299      	cmp	r1, r3
 8015110:	bfac      	ite	ge
 8015112:	ebc6 0301 	rsbge	r3, r6, r1
 8015116:	ebc6 0303 	rsblt	r3, r6, r3
 801511a:	80a2      	strh	r2, [r4, #4]
 801511c:	80e3      	strh	r3, [r4, #6]
 801511e:	e7d4      	b.n	80150ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015120:	4620      	mov	r0, r4
 8015122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015126 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015126:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801512a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801512e:	b383      	cbz	r3, 8015192 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015130:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015132:	b374      	cbz	r4, 8015192 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015134:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015138:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801513c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015140:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015144:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015148:	b303      	cbz	r3, 801518c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801514a:	4668      	mov	r0, sp
 801514c:	1d21      	adds	r1, r4, #4
 801514e:	f8ad 5000 	strh.w	r5, [sp]
 8015152:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015156:	f8ad 7004 	strh.w	r7, [sp, #4]
 801515a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801515e:	f7ff ff43 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 8015162:	4668      	mov	r0, sp
 8015164:	f7ff ff83 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015168:	b980      	cbnz	r0, 801518c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801516a:	f8bd 3000 	ldrh.w	r3, [sp]
 801516e:	4669      	mov	r1, sp
 8015170:	88a2      	ldrh	r2, [r4, #4]
 8015172:	4620      	mov	r0, r4
 8015174:	1a9b      	subs	r3, r3, r2
 8015176:	88e2      	ldrh	r2, [r4, #6]
 8015178:	f8ad 3000 	strh.w	r3, [sp]
 801517c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015180:	1a9b      	subs	r3, r3, r2
 8015182:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015186:	6823      	ldr	r3, [r4, #0]
 8015188:	689b      	ldr	r3, [r3, #8]
 801518a:	4798      	blx	r3
 801518c:	69a4      	ldr	r4, [r4, #24]
 801518e:	2c00      	cmp	r4, #0
 8015190:	d1d8      	bne.n	8015144 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015192:	b002      	add	sp, #8
 8015194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015198 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015198:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801519a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801519e:	460d      	mov	r5, r1
 80151a0:	4616      	mov	r6, r2
 80151a2:	b323      	cbz	r3, 80151ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80151a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80151a6:	b314      	cbz	r4, 80151ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80151a8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80151ac:	b1eb      	cbz	r3, 80151ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80151ae:	6828      	ldr	r0, [r5, #0]
 80151b0:	466b      	mov	r3, sp
 80151b2:	6869      	ldr	r1, [r5, #4]
 80151b4:	c303      	stmia	r3!, {r0, r1}
 80151b6:	4668      	mov	r0, sp
 80151b8:	1d21      	adds	r1, r4, #4
 80151ba:	f7ff ff15 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 80151be:	4668      	mov	r0, sp
 80151c0:	f7ff ff55 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 80151c4:	b988      	cbnz	r0, 80151ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80151c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80151ca:	4669      	mov	r1, sp
 80151cc:	88a2      	ldrh	r2, [r4, #4]
 80151ce:	4620      	mov	r0, r4
 80151d0:	1a9b      	subs	r3, r3, r2
 80151d2:	88e2      	ldrh	r2, [r4, #6]
 80151d4:	f8ad 3000 	strh.w	r3, [sp]
 80151d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80151dc:	1a9b      	subs	r3, r3, r2
 80151de:	4632      	mov	r2, r6
 80151e0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80151e4:	6823      	ldr	r3, [r4, #0]
 80151e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80151e8:	4798      	blx	r3
 80151ea:	69a4      	ldr	r4, [r4, #24]
 80151ec:	e7db      	b.n	80151a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80151ee:	b002      	add	sp, #8
 80151f0:	bd70      	pop	{r4, r5, r6, pc}

080151f2 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80151f2:	2000      	movs	r0, #0
 80151f4:	4770      	bx	lr

080151f6 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80151f6:	2001      	movs	r0, #1
 80151f8:	4770      	bx	lr

080151fa <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 80151fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80151fc:	6803      	ldr	r3, [r0, #0]
 80151fe:	4604      	mov	r4, r0
 8015200:	460e      	mov	r6, r1
 8015202:	4601      	mov	r1, r0
 8015204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015206:	4668      	mov	r0, sp
 8015208:	4615      	mov	r5, r2
 801520a:	4798      	blx	r3
 801520c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8015210:	b13b      	cbz	r3, 8015222 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x28>
 8015212:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015216:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801521a:	4293      	cmp	r3, r2
 801521c:	bfac      	ite	ge
 801521e:	2300      	movge	r3, #0
 8015220:	2301      	movlt	r3, #1
 8015222:	7033      	strb	r3, [r6, #0]
 8015224:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8015228:	b13b      	cbz	r3, 801523a <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x40>
 801522a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801522e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8015232:	4293      	cmp	r3, r2
 8015234:	bfac      	ite	ge
 8015236:	2300      	movge	r3, #0
 8015238:	2301      	movlt	r3, #1
 801523a:	702b      	strb	r3, [r5, #0]
 801523c:	b002      	add	sp, #8
 801523e:	bd70      	pop	{r4, r5, r6, pc}

08015240 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 8015240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015244:	4604      	mov	r4, r0
 8015246:	460f      	mov	r7, r1
 8015248:	4616      	mov	r6, r2
 801524a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 801524c:	f100 0838 	add.w	r8, r0, #56	; 0x38
 8015250:	f100 0964 	add.w	r9, r0, #100	; 0x64
 8015254:	b15d      	cbz	r5, 801526e <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 8015256:	4545      	cmp	r5, r8
 8015258:	d007      	beq.n	801526a <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 801525a:	454d      	cmp	r5, r9
 801525c:	d005      	beq.n	801526a <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 801525e:	682b      	ldr	r3, [r5, #0]
 8015260:	4632      	mov	r2, r6
 8015262:	4639      	mov	r1, r7
 8015264:	4628      	mov	r0, r5
 8015266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015268:	4798      	blx	r3
 801526a:	69ad      	ldr	r5, [r5, #24]
 801526c:	e7f2      	b.n	8015254 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 801526e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8015272:	441f      	add	r7, r3
 8015274:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 8015278:	441e      	add	r6, r3
 801527a:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
 801527e:	f8a4 609a 	strh.w	r6, [r4, #154]	; 0x9a
 8015282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015286 <_ZN8touchgfx9DragEventD1Ev>:
 8015286:	4770      	bx	lr

08015288 <_ZN8touchgfx10ClickEventD1Ev>:
 8015288:	4770      	bx	lr

0801528a <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 801528a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801528c:	4605      	mov	r5, r0
 801528e:	f100 0638 	add.w	r6, r0, #56	; 0x38
 8015292:	4604      	mov	r4, r0
 8015294:	460f      	mov	r7, r1
 8015296:	f855 3b64 	ldr.w	r3, [r5], #100
 801529a:	4631      	mov	r1, r6
 801529c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801529e:	4798      	blx	r3
 80152a0:	6823      	ldr	r3, [r4, #0]
 80152a2:	4629      	mov	r1, r5
 80152a4:	4620      	mov	r0, r4
 80152a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80152a8:	4798      	blx	r3
 80152aa:	4639      	mov	r1, r7
 80152ac:	4620      	mov	r0, r4
 80152ae:	f7ff fd59 	bl	8014d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80152b2:	4631      	mov	r1, r6
 80152b4:	4620      	mov	r0, r4
 80152b6:	f7ff fd55 	bl	8014d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80152ba:	4629      	mov	r1, r5
 80152bc:	4620      	mov	r0, r4
 80152be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80152c2:	f7ff bd4f 	b.w	8014d64 <_ZN8touchgfx9Container3addERNS_8DrawableE>

080152c6 <_ZN8touchgfx10ClickEventD0Ev>:
 80152c6:	b510      	push	{r4, lr}
 80152c8:	4604      	mov	r4, r0
 80152ca:	210c      	movs	r1, #12
 80152cc:	f012 fa97 	bl	80277fe <_ZdlPvj>
 80152d0:	4620      	mov	r0, r4
 80152d2:	bd10      	pop	{r4, pc}

080152d4 <_ZN8touchgfx9DragEventD0Ev>:
 80152d4:	b510      	push	{r4, lr}
 80152d6:	4604      	mov	r4, r0
 80152d8:	2110      	movs	r1, #16
 80152da:	f012 fa90 	bl	80277fe <_ZdlPvj>
 80152de:	4620      	mov	r0, r4
 80152e0:	bd10      	pop	{r4, pc}
	...

080152e4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 80152e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e8:	b08b      	sub	sp, #44	; 0x2c
 80152ea:	2300      	movs	r3, #0
 80152ec:	4604      	mov	r4, r0
 80152ee:	f9b1 9006 	ldrsh.w	r9, [r1, #6]
 80152f2:	aa0a      	add	r2, sp, #40	; 0x28
 80152f4:	f88d 3006 	strb.w	r3, [sp, #6]
 80152f8:	f9b1 8008 	ldrsh.w	r8, [r1, #8]
 80152fc:	460d      	mov	r5, r1
 80152fe:	f802 3d21 	strb.w	r3, [r2, #-33]!
 8015302:	6803      	ldr	r3, [r0, #0]
 8015304:	f9b1 700a 	ldrsh.w	r7, [r1, #10]
 8015308:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 801530c:	f10d 0106 	add.w	r1, sp, #6
 8015310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015314:	4798      	blx	r3
 8015316:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801531a:	2900      	cmp	r1, #0
 801531c:	d03d      	beq.n	801539a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801531e:	42a1      	cmp	r1, r4
 8015320:	d03b      	beq.n	801539a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8015322:	a802      	add	r0, sp, #8
 8015324:	f004 fdd8 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015328:	4621      	mov	r1, r4
 801532a:	a804      	add	r0, sp, #16
 801532c:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 8015330:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8015334:	f004 fdd0 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015338:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801533c:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 8015340:	eba3 030b 	sub.w	r3, r3, fp
 8015344:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8015348:	88e9      	ldrh	r1, [r5, #6]
 801534a:	4413      	add	r3, r2
 801534c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015350:	f89d c006 	ldrb.w	ip, [sp, #6]
 8015354:	eba2 020a 	sub.w	r2, r2, sl
 8015358:	b29b      	uxth	r3, r3
 801535a:	4402      	add	r2, r0
 801535c:	8928      	ldrh	r0, [r5, #8]
 801535e:	4419      	add	r1, r3
 8015360:	b292      	uxth	r2, r2
 8015362:	b209      	sxth	r1, r1
 8015364:	4410      	add	r0, r2
 8015366:	b200      	sxth	r0, r0
 8015368:	f1bc 0f00 	cmp.w	ip, #0
 801536c:	f040 808f 	bne.w	801548e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 8015370:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 8015374:	4473      	add	r3, lr
 8015376:	b21b      	sxth	r3, r3
 8015378:	f89d e007 	ldrb.w	lr, [sp, #7]
 801537c:	f1be 0f00 	cmp.w	lr, #0
 8015380:	f040 80b3 	bne.w	80154ea <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x206>
 8015384:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 8015388:	4472      	add	r2, lr
 801538a:	b212      	sxth	r2, r2
 801538c:	f1bc 0f00 	cmp.w	ip, #0
 8015390:	f000 80ca 	beq.w	8015528 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x244>
 8015394:	4290      	cmp	r0, r2
 8015396:	f040 80b0 	bne.w	80154fa <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x216>
 801539a:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 801539e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	f040 809b 	bne.w	80154de <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 80153a8:	896e      	ldrh	r6, [r5, #10]
 80153aa:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80153ae:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 80153b2:	89ad      	ldrh	r5, [r5, #12]
 80153b4:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
 80153b8:	f8b4 80a0 	ldrh.w	r8, [r4, #160]	; 0xa0
 80153bc:	4419      	add	r1, r3
 80153be:	4433      	add	r3, r6
 80153c0:	4490      	add	r8, r2
 80153c2:	442a      	add	r2, r5
 80153c4:	b29b      	uxth	r3, r3
 80153c6:	f89d 5006 	ldrb.w	r5, [sp, #6]
 80153ca:	b292      	uxth	r2, r2
 80153cc:	b289      	uxth	r1, r1
 80153ce:	fa1f f888 	uxth.w	r8, r8
 80153d2:	b21f      	sxth	r7, r3
 80153d4:	b216      	sxth	r6, r2
 80153d6:	b165      	cbz	r5, 80153f2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10e>
 80153d8:	1a5b      	subs	r3, r3, r1
 80153da:	b29b      	uxth	r3, r3
 80153dc:	b21d      	sxth	r5, r3
 80153de:	2d00      	cmp	r5, #0
 80153e0:	bfbc      	itt	lt
 80153e2:	425b      	neglt	r3, r3
 80153e4:	b21d      	sxthlt	r5, r3
 80153e6:	f9b4 309c 	ldrsh.w	r3, [r4, #156]	; 0x9c
 80153ea:	42ab      	cmp	r3, r5
 80153ec:	bfac      	ite	ge
 80153ee:	2500      	movge	r5, #0
 80153f0:	2501      	movlt	r5, #1
 80153f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80153f6:	b15b      	cbz	r3, 8015410 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 80153f8:	eba2 0308 	sub.w	r3, r2, r8
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	b21a      	sxth	r2, r3
 8015400:	2a00      	cmp	r2, #0
 8015402:	bfbc      	itt	lt
 8015404:	425b      	neglt	r3, r3
 8015406:	b21a      	sxthlt	r2, r3
 8015408:	f9b4 309c 	ldrsh.w	r3, [r4, #156]	; 0x9c
 801540c:	4293      	cmp	r3, r2
 801540e:	db01      	blt.n	8015414 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x130>
 8015410:	2d00      	cmp	r5, #0
 8015412:	d03e      	beq.n	8015492 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1ae>
 8015414:	2501      	movs	r5, #1
 8015416:	fa0f f981 	sxth.w	r9, r1
 801541a:	fa0f f888 	sxth.w	r8, r8
 801541e:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 8015422:	b1a0      	cbz	r0, 801544e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x16a>
 8015424:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8015428:	b98b      	cbnz	r3, 801544e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x16a>
 801542a:	4a41      	ldr	r2, [pc, #260]	; (8015530 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>)
 801542c:	a906      	add	r1, sp, #24
 801542e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015432:	9206      	str	r2, [sp, #24]
 8015434:	2202      	movs	r2, #2
 8015436:	f8ad 3020 	strh.w	r3, [sp, #32]
 801543a:	f88d 201c 	strb.w	r2, [sp, #28]
 801543e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015442:	6803      	ldr	r3, [r0, #0]
 8015444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015446:	4798      	blx	r3
 8015448:	2301      	movs	r3, #1
 801544a:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 801544e:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 8015452:	b149      	cbz	r1, 8015468 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 8015454:	eba7 0109 	sub.w	r1, r7, r9
 8015458:	b209      	sxth	r1, r1
 801545a:	b12d      	cbz	r5, 8015468 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 801545c:	2900      	cmp	r1, #0
 801545e:	dc40      	bgt.n	80154e2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 8015460:	bf14      	ite	ne
 8015462:	f04f 31ff 	movne.w	r1, #4294967295
 8015466:	2100      	moveq	r1, #0
 8015468:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 801546c:	b14a      	cbz	r2, 8015482 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 801546e:	eba6 0608 	sub.w	r6, r6, r8
 8015472:	b232      	sxth	r2, r6
 8015474:	b12d      	cbz	r5, 8015482 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 8015476:	2a00      	cmp	r2, #0
 8015478:	dc35      	bgt.n	80154e6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 801547a:	bf14      	ite	ne
 801547c:	f04f 32ff 	movne.w	r2, #4294967295
 8015480:	2200      	moveq	r2, #0
 8015482:	6823      	ldr	r3, [r4, #0]
 8015484:	4620      	mov	r0, r4
 8015486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801548a:	4798      	blx	r3
 801548c:	e024      	b.n	80154d8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 801548e:	460b      	mov	r3, r1
 8015490:	e772      	b.n	8015378 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 8015492:	b308      	cbz	r0, 80154d8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 8015494:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8015498:	b9f3      	cbnz	r3, 80154d8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 801549a:	ab0a      	add	r3, sp, #40	; 0x28
 801549c:	4620      	mov	r0, r4
 801549e:	4632      	mov	r2, r6
 80154a0:	4639      	mov	r1, r7
 80154a2:	f843 5d18 	str.w	r5, [r3, #-24]!
 80154a6:	f7ff fc8d 	bl	8014dc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80154aa:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80154ae:	9b04      	ldr	r3, [sp, #16]
 80154b0:	4298      	cmp	r0, r3
 80154b2:	d011      	beq.n	80154d8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 80154b4:	4b1e      	ldr	r3, [pc, #120]	; (8015530 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>)
 80154b6:	a906      	add	r1, sp, #24
 80154b8:	f8ad 501e 	strh.w	r5, [sp, #30]
 80154bc:	9306      	str	r3, [sp, #24]
 80154be:	2302      	movs	r3, #2
 80154c0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80154c4:	f88d 301c 	strb.w	r3, [sp, #28]
 80154c8:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 80154cc:	6803      	ldr	r3, [r0, #0]
 80154ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154d0:	4798      	blx	r3
 80154d2:	2301      	movs	r3, #1
 80154d4:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 80154d8:	b00b      	add	sp, #44	; 0x2c
 80154da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154de:	2500      	movs	r5, #0
 80154e0:	e79f      	b.n	8015422 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13e>
 80154e2:	2101      	movs	r1, #1
 80154e4:	e7c0      	b.n	8015468 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 80154e6:	2201      	movs	r2, #1
 80154e8:	e7cb      	b.n	8015482 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 80154ea:	f1bc 0f00 	cmp.w	ip, #0
 80154ee:	f47f af54 	bne.w	801539a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 80154f2:	428b      	cmp	r3, r1
 80154f4:	f43f af51 	beq.w	801539a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 80154f8:	4602      	mov	r2, r0
 80154fa:	f8df c038 	ldr.w	ip, [pc, #56]	; 8015534 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x250>
 80154fe:	f8ad 0020 	strh.w	r0, [sp, #32]
 8015502:	f8cd c018 	str.w	ip, [sp, #24]
 8015506:	f04f 0c00 	mov.w	ip, #0
 801550a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801550e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8015512:	a906      	add	r1, sp, #24
 8015514:	f88d c01c 	strb.w	ip, [sp, #28]
 8015518:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801551c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8015520:	6803      	ldr	r3, [r0, #0]
 8015522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015524:	4798      	blx	r3
 8015526:	e738      	b.n	801539a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8015528:	428b      	cmp	r3, r1
 801552a:	f43f af33 	beq.w	8015394 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 801552e:	e7e4      	b.n	80154fa <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x216>
 8015530:	0802a1b4 	.word	0x0802a1b4
 8015534:	0802a1c8 	.word	0x0802a1c8

08015538 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 8015538:	b570      	push	{r4, r5, r6, lr}
 801553a:	b086      	sub	sp, #24
 801553c:	2300      	movs	r3, #0
 801553e:	460c      	mov	r4, r1
 8015540:	4605      	mov	r5, r0
 8015542:	aa06      	add	r2, sp, #24
 8015544:	f88d 3002 	strb.w	r3, [sp, #2]
 8015548:	f10d 0102 	add.w	r1, sp, #2
 801554c:	f802 3d15 	strb.w	r3, [r2, #-21]!
 8015550:	6803      	ldr	r3, [r0, #0]
 8015552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015556:	4798      	blx	r3
 8015558:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801555c:	b10b      	cbz	r3, 8015562 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 801555e:	7923      	ldrb	r3, [r4, #4]
 8015560:	b133      	cbz	r3, 8015570 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 8015562:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d067      	beq.n	801563a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 801556a:	7923      	ldrb	r3, [r4, #4]
 801556c:	2b01      	cmp	r3, #1
 801556e:	d164      	bne.n	801563a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8015570:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015574:	2b00      	cmp	r3, #0
 8015576:	bfbc      	itt	lt
 8015578:	425a      	neglt	r2, r3
 801557a:	b213      	sxthlt	r3, r2
 801557c:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	; 0x9c
 8015580:	429a      	cmp	r2, r3
 8015582:	dc5a      	bgt.n	801563a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8015584:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 8015586:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	; 0xb8
 801558a:	429a      	cmp	r2, r3
 801558c:	bfa8      	it	ge
 801558e:	461a      	movge	r2, r3
 8015590:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	; 0xba
 8015594:	b212      	sxth	r2, r2
 8015596:	2a05      	cmp	r2, #5
 8015598:	bfb8      	it	lt
 801559a:	2205      	movlt	r2, #5
 801559c:	4351      	muls	r1, r2
 801559e:	3a04      	subs	r2, #4
 80155a0:	fb91 f1f3 	sdiv	r1, r1, r3
 80155a4:	b288      	uxth	r0, r1
 80155a6:	4629      	mov	r1, r5
 80155a8:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80155ac:	f8a5 00a8 	strh.w	r0, [r5, #168]	; 0xa8
 80155b0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155ba:	bfcc      	ite	gt
 80155bc:	2601      	movgt	r6, #1
 80155be:	461e      	movle	r6, r3
 80155c0:	00d3      	lsls	r3, r2, #3
 80155c2:	fb13 f306 	smulbb	r3, r3, r6
 80155c6:	b29b      	uxth	r3, r3
 80155c8:	b21a      	sxth	r2, r3
 80155ca:	2a00      	cmp	r2, #0
 80155cc:	f8a5 20ac 	strh.w	r2, [r5, #172]	; 0xac
 80155d0:	bfbc      	itt	lt
 80155d2:	425b      	neglt	r3, r3
 80155d4:	b21a      	sxthlt	r2, r3
 80155d6:	682b      	ldr	r3, [r5, #0]
 80155d8:	4282      	cmp	r2, r0
 80155da:	bfd8      	it	le
 80155dc:	b290      	uxthle	r0, r2
 80155de:	f8a5 00a8 	strh.w	r0, [r5, #168]	; 0xa8
 80155e2:	7922      	ldrb	r2, [r4, #4]
 80155e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80155e6:	2a01      	cmp	r2, #1
 80155e8:	d129      	bne.n	801563e <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x106>
 80155ea:	a801      	add	r0, sp, #4
 80155ec:	4798      	blx	r3
 80155ee:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80155f2:	2601      	movs	r6, #1
 80155f4:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
 80155f8:	f885 60b0 	strb.w	r6, [r5, #176]	; 0xb0
 80155fc:	f003 fc0a 	bl	8018e14 <_ZN8touchgfx11Application11getInstanceEv>
 8015600:	4629      	mov	r1, r5
 8015602:	f003 fc0d 	bl	8018e20 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8015606:	7923      	ldrb	r3, [r4, #4]
 8015608:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 801560c:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8015610:	b198      	cbz	r0, 801563a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8015612:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 8015616:	b983      	cbnz	r3, 801563a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8015618:	4a0b      	ldr	r2, [pc, #44]	; (8015648 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x110>)
 801561a:	a903      	add	r1, sp, #12
 801561c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015620:	9203      	str	r2, [sp, #12]
 8015622:	2202      	movs	r2, #2
 8015624:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015628:	f88d 2010 	strb.w	r2, [sp, #16]
 801562c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015630:	6803      	ldr	r3, [r0, #0]
 8015632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015634:	4798      	blx	r3
 8015636:	f885 60b6 	strb.w	r6, [r5, #182]	; 0xb6
 801563a:	b006      	add	sp, #24
 801563c:	bd70      	pop	{r4, r5, r6, pc}
 801563e:	a803      	add	r0, sp, #12
 8015640:	4798      	blx	r3
 8015642:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015646:	e7d4      	b.n	80155f2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 8015648:	0802a1b4 	.word	0x0802a1b4

0801564c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 801564c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801564e:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8015652:	4604      	mov	r4, r0
 8015654:	2b00      	cmp	r3, #0
 8015656:	d046      	beq.n	80156e6 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 8015658:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
 801565c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8015660:	3001      	adds	r0, #1
 8015662:	b280      	uxth	r0, r0
 8015664:	4298      	cmp	r0, r3
 8015666:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 801566a:	d840      	bhi.n	80156ee <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa2>
 801566c:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8015670:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8015674:	f004 ffcc 	bl	801a610 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8015678:	4605      	mov	r5, r0
 801567a:	b282      	uxth	r2, r0
 801567c:	f012 0301 	ands.w	r3, r2, #1
 8015680:	d006      	beq.n	8015690 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 8015682:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015686:	2800      	cmp	r0, #0
 8015688:	bfd8      	it	le
 801568a:	460b      	movle	r3, r1
 801568c:	18d5      	adds	r5, r2, r3
 801568e:	b22d      	sxth	r5, r5
 8015690:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8015694:	2b01      	cmp	r3, #1
 8015696:	d028      	beq.n	80156ea <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 8015698:	6823      	ldr	r3, [r4, #0]
 801569a:	4621      	mov	r1, r4
 801569c:	4668      	mov	r0, sp
 801569e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80156a0:	4798      	blx	r3
 80156a2:	f8bd 6000 	ldrh.w	r6, [sp]
 80156a6:	1bae      	subs	r6, r5, r6
 80156a8:	b236      	sxth	r6, r6
 80156aa:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80156ae:	b142      	cbz	r2, 80156c2 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x76>
 80156b0:	6823      	ldr	r3, [r4, #0]
 80156b2:	4621      	mov	r1, r4
 80156b4:	4668      	mov	r0, sp
 80156b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80156b8:	4798      	blx	r3
 80156ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80156be:	1aad      	subs	r5, r5, r2
 80156c0:	b22a      	sxth	r2, r5
 80156c2:	6823      	ldr	r3, [r4, #0]
 80156c4:	4631      	mov	r1, r6
 80156c6:	4620      	mov	r0, r4
 80156c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80156cc:	4798      	blx	r3
 80156ce:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
 80156d2:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
 80156d6:	b935      	cbnz	r5, 80156e6 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 80156d8:	f003 fb9c 	bl	8018e14 <_ZN8touchgfx11Application11getInstanceEv>
 80156dc:	4621      	mov	r1, r4
 80156de:	f003 fbd1 	bl	8018e84 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 80156e2:	f8a4 50ae 	strh.w	r5, [r4, #174]	; 0xae
 80156e6:	b002      	add	sp, #8
 80156e8:	bd70      	pop	{r4, r5, r6, pc}
 80156ea:	2600      	movs	r6, #0
 80156ec:	e7dd      	b.n	80156aa <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x5e>
 80156ee:	2300      	movs	r3, #0
 80156f0:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 80156f4:	e7ed      	b.n	80156d2 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x86>

080156f6 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 80156f6:	b470      	push	{r4, r5, r6}
 80156f8:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 80156fc:	461d      	mov	r5, r3
 80156fe:	b11e      	cbz	r6, 8015708 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 8015700:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
 8015704:	b116      	cbz	r6, 801570c <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8015706:	6028      	str	r0, [r5, #0]
 8015708:	bc70      	pop	{r4, r5, r6}
 801570a:	4770      	bx	lr
 801570c:	bc70      	pop	{r4, r5, r6}
 801570e:	f7ff bb59 	b.w	8014dc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

08015712 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8015712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015714:	4604      	mov	r4, r0
 8015716:	4608      	mov	r0, r1
 8015718:	460d      	mov	r5, r1
 801571a:	f7ff fca8 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801571e:	b978      	cbnz	r0, 8015740 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8015720:	4620      	mov	r0, r4
 8015722:	f7ff fca4 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015726:	f9b5 6000 	ldrsh.w	r6, [r5]
 801572a:	b150      	cbz	r0, 8015742 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801572c:	8026      	strh	r6, [r4, #0]
 801572e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015732:	8063      	strh	r3, [r4, #2]
 8015734:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015738:	80a3      	strh	r3, [r4, #4]
 801573a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801573e:	80e3      	strh	r3, [r4, #6]
 8015740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015742:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015746:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801574a:	42b1      	cmp	r1, r6
 801574c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015750:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8015754:	460f      	mov	r7, r1
 8015756:	88ed      	ldrh	r5, [r5, #6]
 8015758:	bfa8      	it	ge
 801575a:	4637      	movge	r7, r6
 801575c:	4293      	cmp	r3, r2
 801575e:	4618      	mov	r0, r3
 8015760:	4466      	add	r6, ip
 8015762:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015766:	bfa8      	it	ge
 8015768:	4610      	movge	r0, r2
 801576a:	442a      	add	r2, r5
 801576c:	88e5      	ldrh	r5, [r4, #6]
 801576e:	4461      	add	r1, ip
 8015770:	b236      	sxth	r6, r6
 8015772:	8027      	strh	r7, [r4, #0]
 8015774:	442b      	add	r3, r5
 8015776:	b209      	sxth	r1, r1
 8015778:	b212      	sxth	r2, r2
 801577a:	8060      	strh	r0, [r4, #2]
 801577c:	b21b      	sxth	r3, r3
 801577e:	428e      	cmp	r6, r1
 8015780:	bfac      	ite	ge
 8015782:	ebc7 0106 	rsbge	r1, r7, r6
 8015786:	ebc7 0101 	rsblt	r1, r7, r1
 801578a:	429a      	cmp	r2, r3
 801578c:	bfac      	ite	ge
 801578e:	ebc0 0202 	rsbge	r2, r0, r2
 8015792:	ebc0 0203 	rsblt	r2, r0, r3
 8015796:	80a1      	strh	r1, [r4, #4]
 8015798:	80e2      	strh	r2, [r4, #6]
 801579a:	e7d1      	b.n	8015740 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0801579c <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 801579c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801579e:	4604      	mov	r4, r0
 80157a0:	2200      	movs	r2, #0
 80157a2:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 80157a6:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 80157aa:	680b      	ldr	r3, [r1, #0]
 80157ac:	8022      	strh	r2, [r4, #0]
 80157ae:	8062      	strh	r2, [r4, #2]
 80157b0:	80e0      	strh	r0, [r4, #6]
 80157b2:	4668      	mov	r0, sp
 80157b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80157b8:	80a5      	strh	r5, [r4, #4]
 80157ba:	4798      	blx	r3
 80157bc:	4620      	mov	r0, r4
 80157be:	4669      	mov	r1, sp
 80157c0:	f7ff ffa7 	bl	8015712 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80157c4:	4620      	mov	r0, r4
 80157c6:	b003      	add	sp, #12
 80157c8:	bd30      	pop	{r4, r5, pc}

080157ca <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 80157ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157cc:	2300      	movs	r3, #0
 80157ce:	4605      	mov	r5, r0
 80157d0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80157d2:	f101 0738 	add.w	r7, r1, #56	; 0x38
 80157d6:	f101 0664 	add.w	r6, r1, #100	; 0x64
 80157da:	8003      	strh	r3, [r0, #0]
 80157dc:	8043      	strh	r3, [r0, #2]
 80157de:	8083      	strh	r3, [r0, #4]
 80157e0:	80c3      	strh	r3, [r0, #6]
 80157e2:	b164      	cbz	r4, 80157fe <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 80157e4:	42bc      	cmp	r4, r7
 80157e6:	d008      	beq.n	80157fa <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 80157e8:	42b4      	cmp	r4, r6
 80157ea:	d006      	beq.n	80157fa <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 80157ec:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80157f0:	b11b      	cbz	r3, 80157fa <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 80157f2:	1d21      	adds	r1, r4, #4
 80157f4:	4628      	mov	r0, r5
 80157f6:	f7ff ff8c 	bl	8015712 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80157fa:	69a4      	ldr	r4, [r4, #24]
 80157fc:	e7f1      	b.n	80157e2 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 80157fe:	4628      	mov	r0, r5
 8015800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015804 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 8015804:	b530      	push	{r4, r5, lr}
 8015806:	2500      	movs	r5, #0
 8015808:	6283      	str	r3, [r0, #40]	; 0x28
 801580a:	8101      	strh	r1, [r0, #8]
 801580c:	8085      	strh	r5, [r0, #4]
 801580e:	80c5      	strh	r5, [r0, #6]
 8015810:	8185      	strh	r5, [r0, #12]
 8015812:	81c5      	strh	r5, [r0, #14]
 8015814:	8205      	strh	r5, [r0, #16]
 8015816:	8245      	strh	r5, [r0, #18]
 8015818:	61c5      	str	r5, [r0, #28]
 801581a:	8405      	strh	r5, [r0, #32]
 801581c:	8445      	strh	r5, [r0, #34]	; 0x22
 801581e:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8015822:	8142      	strh	r2, [r0, #10]
 8015824:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8015828:	2501      	movs	r5, #1
 801582a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 801582e:	4d03      	ldr	r5, [pc, #12]	; (801583c <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 8015830:	6005      	str	r5, [r0, #0]
 8015832:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8015836:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
 801583a:	bd30      	pop	{r4, r5, pc}
 801583c:	0802acb4 	.word	0x0802acb4

08015840 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 8015840:	4b2f      	ldr	r3, [pc, #188]	; (8015900 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 8015842:	2278      	movs	r2, #120	; 0x78
 8015844:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015846:	6003      	str	r3, [r0, #0]
 8015848:	f44f 7300 	mov.w	r3, #512	; 0x200
 801584c:	2500      	movs	r5, #0
 801584e:	2601      	movs	r6, #1
 8015850:	8583      	strh	r3, [r0, #44]	; 0x2c
 8015852:	2111      	movs	r1, #17
 8015854:	f04f 33ff 	mov.w	r3, #4294967295
 8015858:	4604      	mov	r4, r0
 801585a:	8085      	strh	r5, [r0, #4]
 801585c:	80c5      	strh	r5, [r0, #6]
 801585e:	8105      	strh	r5, [r0, #8]
 8015860:	8145      	strh	r5, [r0, #10]
 8015862:	8185      	strh	r5, [r0, #12]
 8015864:	81c5      	strh	r5, [r0, #14]
 8015866:	8205      	strh	r5, [r0, #16]
 8015868:	8245      	strh	r5, [r0, #18]
 801586a:	61c5      	str	r5, [r0, #28]
 801586c:	8405      	strh	r5, [r0, #32]
 801586e:	8445      	strh	r5, [r0, #34]	; 0x22
 8015870:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8015874:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
 8015878:	6285      	str	r5, [r0, #40]	; 0x28
 801587a:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801587e:	6303      	str	r3, [r0, #48]	; 0x30
 8015880:	8681      	strh	r1, [r0, #52]	; 0x34
 8015882:	4629      	mov	r1, r5
 8015884:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
 8015888:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801588c:	9200      	str	r2, [sp, #0]
 801588e:	3038      	adds	r0, #56	; 0x38
 8015890:	462a      	mov	r2, r5
 8015892:	f7ff ffb7 	bl	8015804 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8015896:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801589a:	462a      	mov	r2, r5
 801589c:	4629      	mov	r1, r5
 801589e:	9300      	str	r3, [sp, #0]
 80158a0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80158a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80158a6:	f7ff ffad 	bl	8015804 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 80158aa:	2305      	movs	r3, #5
 80158ac:	4620      	mov	r0, r4
 80158ae:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 80158b2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 80158b6:	4b13      	ldr	r3, [pc, #76]	; (8015904 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 80158b8:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 80158bc:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 80158c0:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 80158c4:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 80158c8:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
 80158cc:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 80158d0:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 80158d4:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 80158d8:	f8a4 50b2 	strh.w	r5, [r4, #178]	; 0xb2
 80158dc:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
 80158e0:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 80158e4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80158e8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 80158ec:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 80158f0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 80158f4:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 80158f8:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 80158fc:	b002      	add	sp, #8
 80158fe:	bd70      	pop	{r4, r5, r6, pc}
 8015900:	0802a1dc 	.word	0x0802a1dc
 8015904:	00010007 	.word	0x00010007

08015908 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 8015908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801590a:	2600      	movs	r6, #0
 801590c:	f891 30a4 	ldrb.w	r3, [r1, #164]	; 0xa4
 8015910:	4605      	mov	r5, r0
 8015912:	460c      	mov	r4, r1
 8015914:	8006      	strh	r6, [r0, #0]
 8015916:	8046      	strh	r6, [r0, #2]
 8015918:	8086      	strh	r6, [r0, #4]
 801591a:	80c6      	strh	r6, [r0, #6]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d041      	beq.n	80159a4 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8015920:	680b      	ldr	r3, [r1, #0]
 8015922:	4668      	mov	r0, sp
 8015924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015926:	4798      	blx	r3
 8015928:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 801592c:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d03a      	beq.n	80159aa <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 8015934:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8015938:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801593c:	429a      	cmp	r2, r3
 801593e:	dd05      	ble.n	801594c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>
 8015940:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015944:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8015948:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801594c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015950:	42bb      	cmp	r3, r7
 8015952:	da27      	bge.n	80159a4 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8015954:	f9bd 1000 	ldrsh.w	r1, [sp]
 8015958:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801595c:	424a      	negs	r2, r1
 801595e:	4439      	add	r1, r7
 8015960:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 8015964:	b209      	sxth	r1, r1
 8015966:	435a      	muls	r2, r3
 8015968:	ebac 0606 	sub.w	r6, ip, r6
 801596c:	1ac9      	subs	r1, r1, r3
 801596e:	434b      	muls	r3, r1
 8015970:	fb92 f2f7 	sdiv	r2, r2, r7
 8015974:	fb93 f3f7 	sdiv	r3, r3, r7
 8015978:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801597c:	4413      	add	r3, r2
 801597e:	0079      	lsls	r1, r7, #1
 8015980:	1af3      	subs	r3, r6, r3
 8015982:	4299      	cmp	r1, r3
 8015984:	dd05      	ble.n	8015992 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 8015986:	1acb      	subs	r3, r1, r3
 8015988:	4353      	muls	r3, r2
 801598a:	fb93 f3f6 	sdiv	r3, r3, r6
 801598e:	1ad2      	subs	r2, r2, r3
 8015990:	460b      	mov	r3, r1
 8015992:	8961      	ldrh	r1, [r4, #10]
 8015994:	b280      	uxth	r0, r0
 8015996:	80ab      	strh	r3, [r5, #4]
 8015998:	1bc9      	subs	r1, r1, r7
 801599a:	80ef      	strh	r7, [r5, #6]
 801599c:	1a09      	subs	r1, r1, r0
 801599e:	4410      	add	r0, r2
 80159a0:	8069      	strh	r1, [r5, #2]
 80159a2:	8028      	strh	r0, [r5, #0]
 80159a4:	4628      	mov	r0, r5
 80159a6:	b003      	add	sp, #12
 80159a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159aa:	461e      	mov	r6, r3
 80159ac:	e7ce      	b.n	801594c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>

080159ae <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 80159ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159b0:	2600      	movs	r6, #0
 80159b2:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
 80159b6:	4605      	mov	r5, r0
 80159b8:	460c      	mov	r4, r1
 80159ba:	8006      	strh	r6, [r0, #0]
 80159bc:	8046      	strh	r6, [r0, #2]
 80159be:	8086      	strh	r6, [r0, #4]
 80159c0:	80c6      	strh	r6, [r0, #6]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d041      	beq.n	8015a4a <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 80159c6:	680b      	ldr	r3, [r1, #0]
 80159c8:	4668      	mov	r0, sp
 80159ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80159cc:	4798      	blx	r3
 80159ce:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80159d2:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d03a      	beq.n	8015a50 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 80159da:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80159de:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80159e2:	429a      	cmp	r2, r3
 80159e4:	dd05      	ble.n	80159f2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>
 80159e6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80159ea:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80159ee:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80159f2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80159f6:	42bb      	cmp	r3, r7
 80159f8:	da27      	bge.n	8015a4a <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 80159fa:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80159fe:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015a02:	424a      	negs	r2, r1
 8015a04:	4439      	add	r1, r7
 8015a06:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 8015a0a:	b209      	sxth	r1, r1
 8015a0c:	435a      	muls	r2, r3
 8015a0e:	ebac 0606 	sub.w	r6, ip, r6
 8015a12:	1ac9      	subs	r1, r1, r3
 8015a14:	434b      	muls	r3, r1
 8015a16:	fb92 f2f7 	sdiv	r2, r2, r7
 8015a1a:	fb93 f3f7 	sdiv	r3, r3, r7
 8015a1e:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8015a22:	4413      	add	r3, r2
 8015a24:	0079      	lsls	r1, r7, #1
 8015a26:	1af3      	subs	r3, r6, r3
 8015a28:	4299      	cmp	r1, r3
 8015a2a:	dd05      	ble.n	8015a38 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 8015a2c:	1acb      	subs	r3, r1, r3
 8015a2e:	4353      	muls	r3, r2
 8015a30:	fb93 f3f6 	sdiv	r3, r3, r6
 8015a34:	1ad2      	subs	r2, r2, r3
 8015a36:	460b      	mov	r3, r1
 8015a38:	8921      	ldrh	r1, [r4, #8]
 8015a3a:	b280      	uxth	r0, r0
 8015a3c:	80af      	strh	r7, [r5, #4]
 8015a3e:	1bc9      	subs	r1, r1, r7
 8015a40:	80eb      	strh	r3, [r5, #6]
 8015a42:	1a09      	subs	r1, r1, r0
 8015a44:	4410      	add	r0, r2
 8015a46:	8029      	strh	r1, [r5, #0]
 8015a48:	8068      	strh	r0, [r5, #2]
 8015a4a:	4628      	mov	r0, r5
 8015a4c:	b003      	add	sp, #12
 8015a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a50:	461e      	mov	r6, r3
 8015a52:	e7ce      	b.n	80159f2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>

08015a54 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 8015a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a58:	4617      	mov	r7, r2
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	4604      	mov	r4, r0
 8015a5e:	460e      	mov	r6, r1
 8015a60:	8002      	strh	r2, [r0, #0]
 8015a62:	4698      	mov	r8, r3
 8015a64:	8042      	strh	r2, [r0, #2]
 8015a66:	8082      	strh	r2, [r0, #4]
 8015a68:	80c2      	strh	r2, [r0, #6]
 8015a6a:	4638      	mov	r0, r7
 8015a6c:	f7ff faff 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015a70:	4605      	mov	r5, r0
 8015a72:	b998      	cbnz	r0, 8015a9c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 8015a74:	4640      	mov	r0, r8
 8015a76:	f7ff fafa 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015a7a:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8015a7e:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 8015a82:	b908      	cbnz	r0, 8015a88 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 8015a84:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8015a88:	8933      	ldrh	r3, [r6, #8]
 8015a8a:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 8015a8e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015a92:	8022      	strh	r2, [r4, #0]
 8015a94:	8067      	strh	r7, [r4, #2]
 8015a96:	1b58      	subs	r0, r3, r5
 8015a98:	80e1      	strh	r1, [r4, #6]
 8015a9a:	80a0      	strh	r0, [r4, #4]
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015aa2 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 8015aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aa6:	4604      	mov	r4, r0
 8015aa8:	2000      	movs	r0, #0
 8015aaa:	460f      	mov	r7, r1
 8015aac:	4616      	mov	r6, r2
 8015aae:	8020      	strh	r0, [r4, #0]
 8015ab0:	4698      	mov	r8, r3
 8015ab2:	8060      	strh	r0, [r4, #2]
 8015ab4:	80a0      	strh	r0, [r4, #4]
 8015ab6:	80e0      	strh	r0, [r4, #6]
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7ff fad8 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015abe:	4605      	mov	r5, r0
 8015ac0:	b998      	cbnz	r0, 8015aea <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	f7ff fad3 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ac8:	f897 602c 	ldrb.w	r6, [r7, #44]	; 0x2c
 8015acc:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8015ad0:	b908      	cbnz	r0, 8015ad6 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 8015ad2:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 8015ad6:	897a      	ldrh	r2, [r7, #10]
 8015ad8:	f8b8 3000 	ldrh.w	r3, [r8]
 8015adc:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 8015ae0:	8066      	strh	r6, [r4, #2]
 8015ae2:	8023      	strh	r3, [r4, #0]
 8015ae4:	1b50      	subs	r0, r2, r5
 8015ae6:	80a1      	strh	r1, [r4, #4]
 8015ae8:	80e0      	strh	r0, [r4, #6]
 8015aea:	4620      	mov	r0, r4
 8015aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015af0 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 8015af0:	b570      	push	{r4, r5, r6, lr}
 8015af2:	b088      	sub	sp, #32
 8015af4:	4604      	mov	r4, r0
 8015af6:	4601      	mov	r1, r0
 8015af8:	4668      	mov	r0, sp
 8015afa:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8015afe:	f7ff ff03 	bl	8015908 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 8015b02:	4621      	mov	r1, r4
 8015b04:	a802      	add	r0, sp, #8
 8015b06:	f7ff ff52 	bl	80159ae <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 8015b0a:	ab02      	add	r3, sp, #8
 8015b0c:	466a      	mov	r2, sp
 8015b0e:	4621      	mov	r1, r4
 8015b10:	a804      	add	r0, sp, #16
 8015b12:	f7ff ff9f 	bl	8015a54 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 8015b16:	ab02      	add	r3, sp, #8
 8015b18:	466a      	mov	r2, sp
 8015b1a:	4621      	mov	r1, r4
 8015b1c:	a806      	add	r0, sp, #24
 8015b1e:	f7ff ffc0 	bl	8015aa2 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 8015b22:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8015b26:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	da02      	bge.n	8015b34 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 8015b2e:	4630      	mov	r0, r6
 8015b30:	f004 f93a 	bl	8019da8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015b34:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8015b38:	f104 0564 	add.w	r5, r4, #100	; 0x64
 8015b3c:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8015b40:	429a      	cmp	r2, r3
 8015b42:	da02      	bge.n	8015b4a <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 8015b44:	4628      	mov	r0, r5
 8015b46:	f004 f92f 	bl	8019da8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015b4a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8015b4e:	f8bd 0000 	ldrh.w	r0, [sp]
 8015b52:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8015b56:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8015b5a:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8015b5c:	4630      	mov	r0, r6
 8015b5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8015b60:	f7ef f844 	bl	8004bec <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015b64:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015b68:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8015b6c:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8015b70:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8015b74:	4628      	mov	r0, r5
 8015b76:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8015b7a:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8015b7e:	f7ef f835 	bl	8004bec <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015b82:	8922      	ldrh	r2, [r4, #8]
 8015b84:	2300      	movs	r3, #0
 8015b86:	a804      	add	r0, sp, #16
 8015b88:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015b8c:	8962      	ldrh	r2, [r4, #10]
 8015b8e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8015b92:	f8ad 201e 	strh.w	r2, [sp, #30]
 8015b96:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015b9a:	f7ff fa68 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015b9e:	b920      	cbnz	r0, 8015baa <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 8015ba0:	6823      	ldr	r3, [r4, #0]
 8015ba2:	a904      	add	r1, sp, #16
 8015ba4:	4620      	mov	r0, r4
 8015ba6:	691b      	ldr	r3, [r3, #16]
 8015ba8:	4798      	blx	r3
 8015baa:	a806      	add	r0, sp, #24
 8015bac:	f7ff fa5f 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015bb0:	b920      	cbnz	r0, 8015bbc <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 8015bb2:	6823      	ldr	r3, [r4, #0]
 8015bb4:	a906      	add	r1, sp, #24
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	691b      	ldr	r3, [r3, #16]
 8015bba:	4798      	blx	r3
 8015bbc:	b008      	add	sp, #32
 8015bbe:	bd70      	pop	{r4, r5, r6, pc}

08015bc0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8015bc0:	b570      	push	{r4, r5, r6, lr}
 8015bc2:	790b      	ldrb	r3, [r1, #4]
 8015bc4:	b08a      	sub	sp, #40	; 0x28
 8015bc6:	4604      	mov	r4, r0
 8015bc8:	460d      	mov	r5, r1
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d17e      	bne.n	8015ccc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10c>
 8015bce:	2201      	movs	r2, #1
 8015bd0:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 8015bd4:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 8015bd8:	b142      	cbz	r2, 8015bec <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2c>
 8015bda:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8015bde:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
 8015be2:	f003 f917 	bl	8018e14 <_ZN8touchgfx11Application11getInstanceEv>
 8015be6:	4621      	mov	r1, r4
 8015be8:	f003 f94c 	bl	8018e84 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8015bec:	4623      	mov	r3, r4
 8015bee:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015bf2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8015bf6:	f853 0bb4 	ldr.w	r0, [r3], #180
 8015bfa:	9301      	str	r3, [sp, #4]
 8015bfc:	f104 03b2 	add.w	r3, r4, #178	; 0xb2
 8015c00:	9300      	str	r3, [sp, #0]
 8015c02:	f104 0390 	add.w	r3, r4, #144	; 0x90
 8015c06:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8015c08:	4620      	mov	r0, r4
 8015c0a:	47b0      	blx	r6
 8015c0c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8015c10:	42a3      	cmp	r3, r4
 8015c12:	bf04      	itt	eq
 8015c14:	2300      	moveq	r3, #0
 8015c16:	f8c4 3090 	streq.w	r3, [r4, #144]	; 0x90
 8015c1a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8015c1e:	2900      	cmp	r1, #0
 8015c20:	d03a      	beq.n	8015c98 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 8015c22:	2600      	movs	r6, #0
 8015c24:	a803      	add	r0, sp, #12
 8015c26:	f884 60b6 	strb.w	r6, [r4, #182]	; 0xb6
 8015c2a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015c2e:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8015c32:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8015c36:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8015c3a:	f004 f94d 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015c3e:	4621      	mov	r1, r4
 8015c40:	a805      	add	r0, sp, #20
 8015c42:	f004 f949 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015c46:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015c4a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015c4e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8015c52:	1ad2      	subs	r2, r2, r3
 8015c54:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8015c58:	7929      	ldrb	r1, [r5, #4]
 8015c5a:	441a      	add	r2, r3
 8015c5c:	88eb      	ldrh	r3, [r5, #6]
 8015c5e:	f88d 1020 	strb.w	r1, [sp, #32]
 8015c62:	a907      	add	r1, sp, #28
 8015c64:	441a      	add	r2, r3
 8015c66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015c6a:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8015c6e:	1a1b      	subs	r3, r3, r0
 8015c70:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8015c74:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8015c78:	4403      	add	r3, r0
 8015c7a:	8928      	ldrh	r0, [r5, #8]
 8015c7c:	4403      	add	r3, r0
 8015c7e:	482f      	ldr	r0, [pc, #188]	; (8015d3c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 8015c80:	9007      	str	r0, [sp, #28]
 8015c82:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8015c86:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015c8a:	6803      	ldr	r3, [r0, #0]
 8015c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c8e:	4798      	blx	r3
 8015c90:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8015c94:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8015c98:	2300      	movs	r3, #0
 8015c9a:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 8015c9e:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8015ca2:	b112      	cbz	r2, 8015caa <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xea>
 8015ca4:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 8015ca8:	b90b      	cbnz	r3, 8015cae <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xee>
 8015caa:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8015cae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8015cb2:	b112      	cbz	r2, 8015cba <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfa>
 8015cb4:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 8015cb8:	b90b      	cbnz	r3, 8015cbe <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfe>
 8015cba:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8015cbe:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 8015cc2:	4620      	mov	r0, r4
 8015cc4:	f7ff ff14 	bl	8015af0 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8015cc8:	b00a      	add	sp, #40	; 0x28
 8015cca:	bd70      	pop	{r4, r5, r6, pc}
 8015ccc:	2b02      	cmp	r3, #2
 8015cce:	d0fb      	beq.n	8015cc8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x108>
 8015cd0:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 8015cd4:	b361      	cbz	r1, 8015d30 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x170>
 8015cd6:	a803      	add	r0, sp, #12
 8015cd8:	f004 f8fe 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015cdc:	4621      	mov	r1, r4
 8015cde:	a805      	add	r0, sp, #20
 8015ce0:	f004 f8fa 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015ce4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015ce8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015cec:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8015cf0:	1ad2      	subs	r2, r2, r3
 8015cf2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8015cf6:	7929      	ldrb	r1, [r5, #4]
 8015cf8:	441a      	add	r2, r3
 8015cfa:	88eb      	ldrh	r3, [r5, #6]
 8015cfc:	f88d 1020 	strb.w	r1, [sp, #32]
 8015d00:	a907      	add	r1, sp, #28
 8015d02:	441a      	add	r2, r3
 8015d04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015d08:	1a1b      	subs	r3, r3, r0
 8015d0a:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8015d0e:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8015d12:	4403      	add	r3, r0
 8015d14:	8928      	ldrh	r0, [r5, #8]
 8015d16:	4403      	add	r3, r0
 8015d18:	4808      	ldr	r0, [pc, #32]	; (8015d3c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 8015d1a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015d1e:	2300      	movs	r3, #0
 8015d20:	9007      	str	r0, [sp, #28]
 8015d22:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8015d26:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015d2a:	6803      	ldr	r3, [r0, #0]
 8015d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d2e:	4798      	blx	r3
 8015d30:	2300      	movs	r3, #0
 8015d32:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
 8015d36:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8015d3a:	e7ad      	b.n	8015c98 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 8015d3c:	0802a1b4 	.word	0x0802a1b4

08015d40 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 8015d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d42:	4606      	mov	r6, r0
 8015d44:	4615      	mov	r5, r2
 8015d46:	460c      	mov	r4, r1
 8015d48:	b919      	cbnz	r1, 8015d52 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8015d4a:	b912      	cbnz	r2, 8015d52 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8015d4c:	2000      	movs	r0, #0
 8015d4e:	b003      	add	sp, #12
 8015d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d52:	6833      	ldr	r3, [r6, #0]
 8015d54:	4631      	mov	r1, r6
 8015d56:	4668      	mov	r0, sp
 8015d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015d5a:	4798      	blx	r3
 8015d5c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8015d60:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 8015d64:	f9bd 2000 	ldrsh.w	r2, [sp]
 8015d68:	4288      	cmp	r0, r1
 8015d6a:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8015d6e:	da2c      	bge.n	8015dca <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8a>
 8015d70:	2c00      	cmp	r4, #0
 8015d72:	dd20      	ble.n	8015db6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x76>
 8015d74:	1913      	adds	r3, r2, r4
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	dd01      	ble.n	8015d7e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 8015d7a:	4252      	negs	r2, r2
 8015d7c:	b214      	sxth	r4, r2
 8015d7e:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 8015d82:	4297      	cmp	r7, r2
 8015d84:	dd2c      	ble.n	8015de0 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa0>
 8015d86:	2d00      	cmp	r5, #0
 8015d88:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8015d8c:	dd1f      	ble.n	8015dce <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8e>
 8015d8e:	195a      	adds	r2, r3, r5
 8015d90:	2a00      	cmp	r2, #0
 8015d92:	dd04      	ble.n	8015d9e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 8015d94:	425b      	negs	r3, r3
 8015d96:	b21d      	sxth	r5, r3
 8015d98:	b90c      	cbnz	r4, 8015d9e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 8015d9a:	2d00      	cmp	r5, #0
 8015d9c:	d0d6      	beq.n	8015d4c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8015d9e:	6833      	ldr	r3, [r6, #0]
 8015da0:	462a      	mov	r2, r5
 8015da2:	4621      	mov	r1, r4
 8015da4:	4630      	mov	r0, r6
 8015da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015daa:	4798      	blx	r3
 8015dac:	4630      	mov	r0, r6
 8015dae:	f7ff fe9f 	bl	8015af0 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8015db2:	2001      	movs	r0, #1
 8015db4:	e7cb      	b.n	8015d4e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 8015db6:	d0e2      	beq.n	8015d7e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 8015db8:	440a      	add	r2, r1
 8015dba:	b292      	uxth	r2, r2
 8015dbc:	fa04 f382 	sxtah	r3, r4, r2
 8015dc0:	4283      	cmp	r3, r0
 8015dc2:	dadc      	bge.n	8015d7e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 8015dc4:	1a84      	subs	r4, r0, r2
 8015dc6:	b224      	sxth	r4, r4
 8015dc8:	e7d9      	b.n	8015d7e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 8015dca:	2400      	movs	r4, #0
 8015dcc:	e7d7      	b.n	8015d7e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 8015dce:	d007      	beq.n	8015de0 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa0>
 8015dd0:	443b      	add	r3, r7
 8015dd2:	b29b      	uxth	r3, r3
 8015dd4:	fa05 f183 	sxtah	r1, r5, r3
 8015dd8:	4291      	cmp	r1, r2
 8015dda:	dae0      	bge.n	8015d9e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 8015ddc:	1ad3      	subs	r3, r2, r3
 8015dde:	e7da      	b.n	8015d96 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x56>
 8015de0:	2c00      	cmp	r4, #0
 8015de2:	d0b3      	beq.n	8015d4c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8015de4:	2500      	movs	r5, #0
 8015de6:	e7da      	b.n	8015d9e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>

08015de8 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 8015de8:	b513      	push	{r0, r1, r4, lr}
 8015dea:	6803      	ldr	r3, [r0, #0]
 8015dec:	4601      	mov	r1, r0
 8015dee:	4604      	mov	r4, r0
 8015df0:	4668      	mov	r0, sp
 8015df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015df6:	4798      	blx	r3
 8015df8:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8015dfc:	f9bd 1000 	ldrsh.w	r1, [sp]
 8015e00:	2800      	cmp	r0, #0
 8015e02:	dd20      	ble.n	8015e46 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 8015e04:	4602      	mov	r2, r0
 8015e06:	2900      	cmp	r1, #0
 8015e08:	dc0e      	bgt.n	8015e28 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8015e0a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015e0e:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8015e12:	440b      	add	r3, r1
 8015e14:	b21b      	sxth	r3, r3
 8015e16:	4298      	cmp	r0, r3
 8015e18:	dd04      	ble.n	8015e24 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 8015e1a:	1a1b      	subs	r3, r3, r0
 8015e1c:	4299      	cmp	r1, r3
 8015e1e:	bfb8      	it	lt
 8015e20:	4619      	movlt	r1, r3
 8015e22:	b909      	cbnz	r1, 8015e28 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8015e24:	b1f2      	cbz	r2, 8015e64 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 8015e26:	2100      	movs	r1, #0
 8015e28:	6823      	ldr	r3, [r4, #0]
 8015e2a:	4252      	negs	r2, r2
 8015e2c:	4249      	negs	r1, r1
 8015e2e:	4620      	mov	r0, r4
 8015e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e34:	b212      	sxth	r2, r2
 8015e36:	b209      	sxth	r1, r1
 8015e38:	4798      	blx	r3
 8015e3a:	4620      	mov	r0, r4
 8015e3c:	b002      	add	sp, #8
 8015e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e42:	f7ff be55 	b.w	8015af0 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8015e46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015e4a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015e4e:	4403      	add	r3, r0
 8015e50:	b21b      	sxth	r3, r3
 8015e52:	429a      	cmp	r2, r3
 8015e54:	dd04      	ble.n	8015e60 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 8015e56:	1a9a      	subs	r2, r3, r2
 8015e58:	4282      	cmp	r2, r0
 8015e5a:	bfb8      	it	lt
 8015e5c:	4602      	movlt	r2, r0
 8015e5e:	e7d2      	b.n	8015e06 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8015e60:	2200      	movs	r2, #0
 8015e62:	e7d0      	b.n	8015e06 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8015e64:	b002      	add	sp, #8
 8015e66:	bd10      	pop	{r4, pc}

08015e68 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 8015e68:	6301      	str	r1, [r0, #48]	; 0x30
 8015e6a:	6601      	str	r1, [r0, #96]	; 0x60
 8015e6c:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8015e70:	4770      	bx	lr

08015e72 <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>:
 8015e72:	2201      	movs	r2, #1
 8015e74:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
 8015e78:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
 8015e7c:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 8015e80:	f7ff be36 	b.w	8015af0 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

08015e84 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8015e84:	4770      	bx	lr

08015e86 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8015e86:	4770      	bx	lr

08015e88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015e88:	6803      	ldr	r3, [r0, #0]
 8015e8a:	b513      	push	{r0, r1, r4, lr}
 8015e8c:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8015e90:	2300      	movs	r3, #0
 8015e92:	e9cd 3300 	strd	r3, r3, [sp]
 8015e96:	466b      	mov	r3, sp
 8015e98:	47a0      	blx	r4
 8015e9a:	b002      	add	sp, #8
 8015e9c:	bd10      	pop	{r4, pc}

08015e9e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015e9e:	2301      	movs	r3, #1
 8015ea0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015ea4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015ea8:	4770      	bx	lr

08015eaa <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015eaa:	2301      	movs	r3, #1
 8015eac:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015eb0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015eb4:	4770      	bx	lr

08015eb6 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015eb6:	6843      	ldr	r3, [r0, #4]
 8015eb8:	2201      	movs	r2, #1
 8015eba:	725a      	strb	r2, [r3, #9]
 8015ebc:	6840      	ldr	r0, [r0, #4]
 8015ebe:	6803      	ldr	r3, [r0, #0]
 8015ec0:	691b      	ldr	r3, [r3, #16]
 8015ec2:	4718      	bx	r3

08015ec4 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015ec4:	6840      	ldr	r0, [r0, #4]
 8015ec6:	6803      	ldr	r3, [r0, #0]
 8015ec8:	689b      	ldr	r3, [r3, #8]
 8015eca:	4718      	bx	r3

08015ecc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8015ecc:	b530      	push	{r4, r5, lr}
 8015ece:	b08b      	sub	sp, #44	; 0x2c
 8015ed0:	6804      	ldr	r4, [r0, #0]
 8015ed2:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8015ed6:	9509      	str	r5, [sp, #36]	; 0x24
 8015ed8:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8015edc:	9508      	str	r5, [sp, #32]
 8015ede:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015ee2:	9507      	str	r5, [sp, #28]
 8015ee4:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8015ee8:	9506      	str	r5, [sp, #24]
 8015eea:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8015eee:	9505      	str	r5, [sp, #20]
 8015ef0:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015ef4:	9504      	str	r5, [sp, #16]
 8015ef6:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8015efa:	9503      	str	r5, [sp, #12]
 8015efc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015f00:	9502      	str	r5, [sp, #8]
 8015f02:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015f06:	e9cd 3500 	strd	r3, r5, [sp]
 8015f0a:	4613      	mov	r3, r2
 8015f0c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8015f0e:	2200      	movs	r2, #0
 8015f10:	47a0      	blx	r4
 8015f12:	b00b      	add	sp, #44	; 0x2c
 8015f14:	bd30      	pop	{r4, r5, pc}
	...

08015f18 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015f18:	4b04      	ldr	r3, [pc, #16]	; (8015f2c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015f1a:	781b      	ldrb	r3, [r3, #0]
 8015f1c:	b123      	cbz	r3, 8015f28 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015f1e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015f22:	f080 0001 	eor.w	r0, r0, #1
 8015f26:	4770      	bx	lr
 8015f28:	2001      	movs	r0, #1
 8015f2a:	4770      	bx	lr
 8015f2c:	2400aeea 	.word	0x2400aeea

08015f30 <_ZN8touchgfx3HAL8endFrameEv>:
 8015f30:	b510      	push	{r4, lr}
 8015f32:	4604      	mov	r4, r0
 8015f34:	6840      	ldr	r0, [r0, #4]
 8015f36:	6803      	ldr	r3, [r0, #0]
 8015f38:	689b      	ldr	r3, [r3, #8]
 8015f3a:	4798      	blx	r3
 8015f3c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015f40:	b113      	cbz	r3, 8015f48 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015f42:	2301      	movs	r3, #1
 8015f44:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015f48:	bd10      	pop	{r4, pc}

08015f4a <_ZN8touchgfx3HAL10initializeEv>:
 8015f4a:	b510      	push	{r4, lr}
 8015f4c:	4604      	mov	r4, r0
 8015f4e:	f7ec f965 	bl	800221c <_ZN8touchgfx10OSWrappers10initializeEv>
 8015f52:	6860      	ldr	r0, [r4, #4]
 8015f54:	6803      	ldr	r3, [r0, #0]
 8015f56:	68db      	ldr	r3, [r3, #12]
 8015f58:	4798      	blx	r3
 8015f5a:	68e0      	ldr	r0, [r4, #12]
 8015f5c:	6803      	ldr	r3, [r0, #0]
 8015f5e:	689b      	ldr	r3, [r3, #8]
 8015f60:	4798      	blx	r3
 8015f62:	6823      	ldr	r3, [r4, #0]
 8015f64:	4620      	mov	r0, r4
 8015f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f6c:	4718      	bx	r3

08015f6e <_ZN8touchgfx3HAL9taskEntryEv>:
 8015f6e:	b508      	push	{r3, lr}
 8015f70:	6803      	ldr	r3, [r0, #0]
 8015f72:	4604      	mov	r4, r0
 8015f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f76:	4798      	blx	r3
 8015f78:	6823      	ldr	r3, [r4, #0]
 8015f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	4798      	blx	r3
 8015f80:	f7ec f9c2 	bl	8002308 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015f84:	6823      	ldr	r3, [r4, #0]
 8015f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f88:	e7f8      	b.n	8015f7c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015f8c <_ZN8touchgfx3HAL4tickEv>:
 8015f8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015f8e:	6803      	ldr	r3, [r0, #0]
 8015f90:	4604      	mov	r4, r0
 8015f92:	4d5c      	ldr	r5, [pc, #368]	; (8016104 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015f94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015f98:	4798      	blx	r3
 8015f9a:	2800      	cmp	r0, #0
 8015f9c:	f000 8097 	beq.w	80160ce <_ZN8touchgfx3HAL4tickEv+0x142>
 8015fa0:	2001      	movs	r0, #1
 8015fa2:	2600      	movs	r6, #0
 8015fa4:	f7eb fe78 	bl	8001c98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015fa8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015fac:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015fb0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015fb4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015fb8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015fbc:	b133      	cbz	r3, 8015fcc <_ZN8touchgfx3HAL4tickEv+0x40>
 8015fbe:	6823      	ldr	r3, [r4, #0]
 8015fc0:	4620      	mov	r0, r4
 8015fc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015fc6:	4798      	blx	r3
 8015fc8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015fcc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015fd0:	2601      	movs	r6, #1
 8015fd2:	6862      	ldr	r2, [r4, #4]
 8015fd4:	f083 0301 	eor.w	r3, r3, #1
 8015fd8:	702e      	strb	r6, [r5, #0]
 8015fda:	7253      	strb	r3, [r2, #9]
 8015fdc:	f002 ff1a 	bl	8018e14 <_ZN8touchgfx11Application11getInstanceEv>
 8015fe0:	6803      	ldr	r3, [r0, #0]
 8015fe2:	4631      	mov	r1, r6
 8015fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fe6:	4798      	blx	r3
 8015fe8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015fec:	b90b      	cbnz	r3, 8015ff2 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015fee:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015ff2:	f002 ff0f 	bl	8018e14 <_ZN8touchgfx11Application11getInstanceEv>
 8015ff6:	6803      	ldr	r3, [r0, #0]
 8015ff8:	695b      	ldr	r3, [r3, #20]
 8015ffa:	4798      	blx	r3
 8015ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ffe:	6803      	ldr	r3, [r0, #0]
 8016000:	691b      	ldr	r3, [r3, #16]
 8016002:	4798      	blx	r3
 8016004:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016008:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801600c:	3b01      	subs	r3, #1
 801600e:	b2db      	uxtb	r3, r3
 8016010:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016014:	b10a      	cbz	r2, 801601a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8016016:	2b00      	cmp	r3, #0
 8016018:	d1eb      	bne.n	8015ff2 <_ZN8touchgfx3HAL4tickEv+0x66>
 801601a:	4a3b      	ldr	r2, [pc, #236]	; (8016108 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801601c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8016020:	7813      	ldrb	r3, [r2, #0]
 8016022:	3301      	adds	r3, #1
 8016024:	b25b      	sxtb	r3, r3
 8016026:	4299      	cmp	r1, r3
 8016028:	7013      	strb	r3, [r2, #0]
 801602a:	dc10      	bgt.n	801604e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801602c:	2300      	movs	r3, #0
 801602e:	68e0      	ldr	r0, [r4, #12]
 8016030:	a902      	add	r1, sp, #8
 8016032:	7013      	strb	r3, [r2, #0]
 8016034:	aa03      	add	r2, sp, #12
 8016036:	6803      	ldr	r3, [r0, #0]
 8016038:	68db      	ldr	r3, [r3, #12]
 801603a:	4798      	blx	r3
 801603c:	6823      	ldr	r3, [r4, #0]
 801603e:	2800      	cmp	r0, #0
 8016040:	d051      	beq.n	80160e6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8016042:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016046:	4620      	mov	r0, r4
 8016048:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801604c:	4798      	blx	r3
 801604e:	2300      	movs	r3, #0
 8016050:	6960      	ldr	r0, [r4, #20]
 8016052:	f88d 3007 	strb.w	r3, [sp, #7]
 8016056:	b158      	cbz	r0, 8016070 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016058:	6803      	ldr	r3, [r0, #0]
 801605a:	f10d 0107 	add.w	r1, sp, #7
 801605e:	68db      	ldr	r3, [r3, #12]
 8016060:	4798      	blx	r3
 8016062:	b128      	cbz	r0, 8016070 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016066:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801606a:	6803      	ldr	r3, [r0, #0]
 801606c:	68db      	ldr	r3, [r3, #12]
 801606e:	4798      	blx	r3
 8016070:	f104 001c 	add.w	r0, r4, #28
 8016074:	f011 fb0a 	bl	802768c <_ZN8touchgfx8Gestures4tickEv>
 8016078:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801607c:	b30b      	cbz	r3, 80160c2 <_ZN8touchgfx3HAL4tickEv+0x136>
 801607e:	6920      	ldr	r0, [r4, #16]
 8016080:	6803      	ldr	r3, [r0, #0]
 8016082:	691b      	ldr	r3, [r3, #16]
 8016084:	4798      	blx	r3
 8016086:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016088:	4606      	mov	r6, r0
 801608a:	b903      	cbnz	r3, 801608e <_ZN8touchgfx3HAL4tickEv+0x102>
 801608c:	6720      	str	r0, [r4, #112]	; 0x70
 801608e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016090:	4a1e      	ldr	r2, [pc, #120]	; (801610c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8016092:	1af3      	subs	r3, r6, r3
 8016094:	4293      	cmp	r3, r2
 8016096:	d914      	bls.n	80160c2 <_ZN8touchgfx3HAL4tickEv+0x136>
 8016098:	6920      	ldr	r0, [r4, #16]
 801609a:	6803      	ldr	r3, [r0, #0]
 801609c:	699b      	ldr	r3, [r3, #24]
 801609e:	4798      	blx	r3
 80160a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80160a2:	2264      	movs	r2, #100	; 0x64
 80160a4:	1af3      	subs	r3, r6, r3
 80160a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80160aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80160ae:	2800      	cmp	r0, #0
 80160b0:	dc1e      	bgt.n	80160f0 <_ZN8touchgfx3HAL4tickEv+0x164>
 80160b2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80160b6:	6920      	ldr	r0, [r4, #16]
 80160b8:	2100      	movs	r1, #0
 80160ba:	6803      	ldr	r3, [r0, #0]
 80160bc:	69db      	ldr	r3, [r3, #28]
 80160be:	4798      	blx	r3
 80160c0:	6726      	str	r6, [r4, #112]	; 0x70
 80160c2:	f002 fea7 	bl	8018e14 <_ZN8touchgfx11Application11getInstanceEv>
 80160c6:	6803      	ldr	r3, [r0, #0]
 80160c8:	2100      	movs	r1, #0
 80160ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160cc:	4798      	blx	r3
 80160ce:	6823      	ldr	r3, [r4, #0]
 80160d0:	4620      	mov	r0, r4
 80160d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80160d6:	4798      	blx	r3
 80160d8:	2001      	movs	r0, #1
 80160da:	f7eb fdf9 	bl	8001cd0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80160de:	2300      	movs	r3, #0
 80160e0:	702b      	strb	r3, [r5, #0]
 80160e2:	b004      	add	sp, #16
 80160e4:	bd70      	pop	{r4, r5, r6, pc}
 80160e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80160ea:	4620      	mov	r0, r4
 80160ec:	4798      	blx	r3
 80160ee:	e7ae      	b.n	801604e <_ZN8touchgfx3HAL4tickEv+0xc2>
 80160f0:	2863      	cmp	r0, #99	; 0x63
 80160f2:	bfcb      	itete	gt
 80160f4:	2300      	movgt	r3, #0
 80160f6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80160fa:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80160fe:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8016102:	e7d8      	b.n	80160b6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8016104:	2400aef0 	.word	0x2400aef0
 8016108:	2400aef1 	.word	0x2400aef1
 801610c:	05f5e100 	.word	0x05f5e100

08016110 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016110:	f7ec b8c6 	b.w	80022a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016114 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016114:	6581      	str	r1, [r0, #88]	; 0x58
 8016116:	301c      	adds	r0, #28
 8016118:	f011 bab6 	b.w	8027688 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801611c <_ZN8touchgfx3HAL5touchEll>:
 801611c:	b530      	push	{r4, r5, lr}
 801611e:	b087      	sub	sp, #28
 8016120:	4604      	mov	r4, r0
 8016122:	a804      	add	r0, sp, #16
 8016124:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016128:	f002 fc7a 	bl	8018a20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801612c:	9b04      	ldr	r3, [sp, #16]
 801612e:	a906      	add	r1, sp, #24
 8016130:	a803      	add	r0, sp, #12
 8016132:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016136:	9b05      	ldr	r3, [sp, #20]
 8016138:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801613c:	f002 fcc2 	bl	8018ac4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016140:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016144:	f104 001c 	add.w	r0, r4, #28
 8016148:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801614c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016150:	b189      	cbz	r1, 8016176 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016152:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016156:	9300      	str	r3, [sp, #0]
 8016158:	4613      	mov	r3, r2
 801615a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801615e:	462a      	mov	r2, r5
 8016160:	f011 faa2 	bl	80276a8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016164:	b128      	cbz	r0, 8016172 <_ZN8touchgfx3HAL5touchEll+0x56>
 8016166:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801616a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801616c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016170:	6623      	str	r3, [r4, #96]	; 0x60
 8016172:	b007      	add	sp, #28
 8016174:	bd30      	pop	{r4, r5, pc}
 8016176:	f011 fadb 	bl	8027730 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801617a:	2301      	movs	r3, #1
 801617c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016180:	e7f1      	b.n	8016166 <_ZN8touchgfx3HAL5touchEll+0x4a>

08016182 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016182:	b510      	push	{r4, lr}
 8016184:	2b00      	cmp	r3, #0
 8016186:	d046      	beq.n	8016216 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016188:	ea81 0002 	eor.w	r0, r1, r2
 801618c:	07c4      	lsls	r4, r0, #31
 801618e:	d508      	bpl.n	80161a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016190:	440b      	add	r3, r1
 8016192:	3a01      	subs	r2, #1
 8016194:	428b      	cmp	r3, r1
 8016196:	d93e      	bls.n	8016216 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016198:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801619c:	f801 0b01 	strb.w	r0, [r1], #1
 80161a0:	e7f8      	b.n	8016194 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80161a2:	07d0      	lsls	r0, r2, #31
 80161a4:	bf42      	ittt	mi
 80161a6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80161aa:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80161ae:	f801 0b01 	strbmi.w	r0, [r1], #1
 80161b2:	2b01      	cmp	r3, #1
 80161b4:	d911      	bls.n	80161da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80161b6:	ea81 0402 	eor.w	r4, r1, r2
 80161ba:	4610      	mov	r0, r2
 80161bc:	07a4      	lsls	r4, r4, #30
 80161be:	d022      	beq.n	8016206 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80161c0:	f023 0401 	bic.w	r4, r3, #1
 80161c4:	440c      	add	r4, r1
 80161c6:	428c      	cmp	r4, r1
 80161c8:	4602      	mov	r2, r0
 80161ca:	d904      	bls.n	80161d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80161cc:	8812      	ldrh	r2, [r2, #0]
 80161ce:	3002      	adds	r0, #2
 80161d0:	f821 2b02 	strh.w	r2, [r1], #2
 80161d4:	e7f7      	b.n	80161c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80161d6:	f003 0301 	and.w	r3, r3, #1
 80161da:	f023 0003 	bic.w	r0, r3, #3
 80161de:	4408      	add	r0, r1
 80161e0:	4288      	cmp	r0, r1
 80161e2:	4614      	mov	r4, r2
 80161e4:	d904      	bls.n	80161f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80161e6:	6824      	ldr	r4, [r4, #0]
 80161e8:	3204      	adds	r2, #4
 80161ea:	f841 4b04 	str.w	r4, [r1], #4
 80161ee:	e7f7      	b.n	80161e0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80161f0:	f003 0303 	and.w	r3, r3, #3
 80161f4:	3a01      	subs	r2, #1
 80161f6:	440b      	add	r3, r1
 80161f8:	428b      	cmp	r3, r1
 80161fa:	d90c      	bls.n	8016216 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80161fc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016200:	f801 0b01 	strb.w	r0, [r1], #1
 8016204:	e7f8      	b.n	80161f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8016206:	0790      	lsls	r0, r2, #30
 8016208:	d0e7      	beq.n	80161da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801620a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801620e:	3b02      	subs	r3, #2
 8016210:	f821 0b02 	strh.w	r0, [r1], #2
 8016214:	e7e1      	b.n	80161da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016216:	2001      	movs	r0, #1
 8016218:	bd10      	pop	{r4, pc}

0801621a <_ZN8touchgfx3HAL7noTouchEv>:
 801621a:	b510      	push	{r4, lr}
 801621c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016220:	4604      	mov	r4, r0
 8016222:	b153      	cbz	r3, 801623a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016224:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016228:	2101      	movs	r1, #1
 801622a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801622e:	301c      	adds	r0, #28
 8016230:	f011 fa7e 	bl	8027730 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016234:	2300      	movs	r3, #0
 8016236:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801623a:	bd10      	pop	{r4, pc}

0801623c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801623c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016240:	4604      	mov	r4, r0
 8016242:	6980      	ldr	r0, [r0, #24]
 8016244:	b085      	sub	sp, #20
 8016246:	460f      	mov	r7, r1
 8016248:	4690      	mov	r8, r2
 801624a:	4699      	mov	r9, r3
 801624c:	b930      	cbnz	r0, 801625c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801624e:	4b1c      	ldr	r3, [pc, #112]	; (80162c0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8016250:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8016254:	4a1b      	ldr	r2, [pc, #108]	; (80162c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016256:	481c      	ldr	r0, [pc, #112]	; (80162c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8016258:	f011 fb00 	bl	802785c <__assert_func>
 801625c:	ad04      	add	r5, sp, #16
 801625e:	2600      	movs	r6, #0
 8016260:	f845 6d04 	str.w	r6, [r5, #-4]!
 8016264:	6806      	ldr	r6, [r0, #0]
 8016266:	9501      	str	r5, [sp, #4]
 8016268:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801626c:	9500      	str	r5, [sp, #0]
 801626e:	6835      	ldr	r5, [r6, #0]
 8016270:	47a8      	blx	r5
 8016272:	4d16      	ldr	r5, [pc, #88]	; (80162cc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016274:	4606      	mov	r6, r0
 8016276:	f8a5 9000 	strh.w	r9, [r5]
 801627a:	f7ed ff79 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 801627e:	6803      	ldr	r3, [r0, #0]
 8016280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016282:	4798      	blx	r3
 8016284:	2801      	cmp	r0, #1
 8016286:	d012      	beq.n	80162ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8016288:	d306      	bcc.n	8016298 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801628a:	280d      	cmp	r0, #13
 801628c:	d80b      	bhi.n	80162a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 801628e:	4b10      	ldr	r3, [pc, #64]	; (80162d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016290:	f240 1167 	movw	r1, #359	; 0x167
 8016294:	4a0b      	ldr	r2, [pc, #44]	; (80162c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016296:	e7de      	b.n	8016256 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8016298:	882b      	ldrh	r3, [r5, #0]
 801629a:	fb08 7203 	mla	r2, r8, r3, r7
 801629e:	9b03      	ldr	r3, [sp, #12]
 80162a0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80162a4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80162a6:	4630      	mov	r0, r6
 80162a8:	b005      	add	sp, #20
 80162aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162ae:	882a      	ldrh	r2, [r5, #0]
 80162b0:	9b03      	ldr	r3, [sp, #12]
 80162b2:	fb08 7202 	mla	r2, r8, r2, r7
 80162b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80162ba:	1a9a      	subs	r2, r3, r2
 80162bc:	63e2      	str	r2, [r4, #60]	; 0x3c
 80162be:	e7f2      	b.n	80162a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80162c0:	0802a3d9 	.word	0x0802a3d9
 80162c4:	0802a767 	.word	0x0802a767
 80162c8:	0802a41e 	.word	0x0802a41e
 80162cc:	2400aee6 	.word	0x2400aee6
 80162d0:	0802a444 	.word	0x0802a444

080162d4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80162d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162d6:	b08b      	sub	sp, #44	; 0x2c
 80162d8:	4617      	mov	r7, r2
 80162da:	4604      	mov	r4, r0
 80162dc:	460e      	mov	r6, r1
 80162de:	461d      	mov	r5, r3
 80162e0:	f7ed ff46 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 80162e4:	6803      	ldr	r3, [r0, #0]
 80162e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162e8:	4798      	blx	r3
 80162ea:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80162ee:	9007      	str	r0, [sp, #28]
 80162f0:	4631      	mov	r1, r6
 80162f2:	6822      	ldr	r2, [r4, #0]
 80162f4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80162f8:	4b0c      	ldr	r3, [pc, #48]	; (801632c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80162fa:	4620      	mov	r0, r4
 80162fc:	881b      	ldrh	r3, [r3, #0]
 80162fe:	9306      	str	r3, [sp, #24]
 8016300:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016304:	9305      	str	r3, [sp, #20]
 8016306:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801630a:	9304      	str	r3, [sp, #16]
 801630c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016310:	9303      	str	r3, [sp, #12]
 8016312:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016316:	9302      	str	r3, [sp, #8]
 8016318:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801631c:	e9cd 5300 	strd	r5, r3, [sp]
 8016320:	463b      	mov	r3, r7
 8016322:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8016324:	2200      	movs	r2, #0
 8016326:	47a8      	blx	r5
 8016328:	b00b      	add	sp, #44	; 0x2c
 801632a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801632c:	2400aee6 	.word	0x2400aee6

08016330 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8016330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016334:	4698      	mov	r8, r3
 8016336:	6803      	ldr	r3, [r0, #0]
 8016338:	b08b      	sub	sp, #44	; 0x2c
 801633a:	4617      	mov	r7, r2
 801633c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801633e:	460e      	mov	r6, r1
 8016340:	4b13      	ldr	r3, [pc, #76]	; (8016390 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8016342:	4604      	mov	r4, r0
 8016344:	f8b3 9000 	ldrh.w	r9, [r3]
 8016348:	f7ed ff12 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 801634c:	6803      	ldr	r3, [r0, #0]
 801634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016350:	4798      	blx	r3
 8016352:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016356:	2200      	movs	r2, #0
 8016358:	4631      	mov	r1, r6
 801635a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801635e:	2302      	movs	r3, #2
 8016360:	4620      	mov	r0, r4
 8016362:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8016366:	2301      	movs	r3, #1
 8016368:	9305      	str	r3, [sp, #20]
 801636a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801636e:	9304      	str	r3, [sp, #16]
 8016370:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016374:	9303      	str	r3, [sp, #12]
 8016376:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801637a:	9302      	str	r3, [sp, #8]
 801637c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016380:	e9cd 8300 	strd	r8, r3, [sp]
 8016384:	463b      	mov	r3, r7
 8016386:	47a8      	blx	r5
 8016388:	b00b      	add	sp, #44	; 0x2c
 801638a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801638e:	bf00      	nop
 8016390:	2400aee6 	.word	0x2400aee6

08016394 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8016394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016398:	4698      	mov	r8, r3
 801639a:	6803      	ldr	r3, [r0, #0]
 801639c:	b087      	sub	sp, #28
 801639e:	460e      	mov	r6, r1
 80163a0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80163a2:	4617      	mov	r7, r2
 80163a4:	4b0f      	ldr	r3, [pc, #60]	; (80163e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80163a6:	4604      	mov	r4, r0
 80163a8:	f8b3 9000 	ldrh.w	r9, [r3]
 80163ac:	f7ed fee0 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 80163b0:	6803      	ldr	r3, [r0, #0]
 80163b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163b4:	4798      	blx	r3
 80163b6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80163ba:	463a      	mov	r2, r7
 80163bc:	4631      	mov	r1, r6
 80163be:	f8cd 900c 	str.w	r9, [sp, #12]
 80163c2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80163c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80163ca:	4620      	mov	r0, r4
 80163cc:	9302      	str	r3, [sp, #8]
 80163ce:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80163d2:	9301      	str	r3, [sp, #4]
 80163d4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80163d8:	9300      	str	r3, [sp, #0]
 80163da:	4643      	mov	r3, r8
 80163dc:	47a8      	blx	r5
 80163de:	b007      	add	sp, #28
 80163e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163e4:	2400aee6 	.word	0x2400aee6

080163e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80163e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ec:	4604      	mov	r4, r0
 80163ee:	b08f      	sub	sp, #60	; 0x3c
 80163f0:	4610      	mov	r0, r2
 80163f2:	460d      	mov	r5, r1
 80163f4:	4691      	mov	r9, r2
 80163f6:	461e      	mov	r6, r3
 80163f8:	f005 f904 	bl	801b604 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80163fc:	2800      	cmp	r0, #0
 80163fe:	f000 809c 	beq.w	801653a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8016402:	6823      	ldr	r3, [r4, #0]
 8016404:	4620      	mov	r0, r4
 8016406:	f8df b194 	ldr.w	fp, [pc, #404]	; 801659c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 801640a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016410:	4798      	blx	r3
 8016412:	6823      	ldr	r3, [r4, #0]
 8016414:	4620      	mov	r0, r4
 8016416:	f8df a188 	ldr.w	sl, [pc, #392]	; 80165a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801641c:	4798      	blx	r3
 801641e:	f8bb 3000 	ldrh.w	r3, [fp]
 8016422:	4f5b      	ldr	r7, [pc, #364]	; (8016590 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8016424:	9301      	str	r3, [sp, #4]
 8016426:	f8ba 3000 	ldrh.w	r3, [sl]
 801642a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801642e:	4640      	mov	r0, r8
 8016430:	9302      	str	r3, [sp, #8]
 8016432:	883b      	ldrh	r3, [r7, #0]
 8016434:	9303      	str	r3, [sp, #12]
 8016436:	4b57      	ldr	r3, [pc, #348]	; (8016594 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016438:	881a      	ldrh	r2, [r3, #0]
 801643a:	9305      	str	r3, [sp, #20]
 801643c:	9204      	str	r2, [sp, #16]
 801643e:	f005 f99b 	bl	801b778 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016442:	8038      	strh	r0, [r7, #0]
 8016444:	4640      	mov	r0, r8
 8016446:	f005 f9d1 	bl	801b7ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801644a:	9b05      	ldr	r3, [sp, #20]
 801644c:	8018      	strh	r0, [r3, #0]
 801644e:	4b52      	ldr	r3, [pc, #328]	; (8016598 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016450:	781b      	ldrb	r3, [r3, #0]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d174      	bne.n	8016540 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8016456:	883b      	ldrh	r3, [r7, #0]
 8016458:	f8aa 0000 	strh.w	r0, [sl]
 801645c:	f8ab 3000 	strh.w	r3, [fp]
 8016460:	4648      	mov	r0, r9
 8016462:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8016466:	f005 f8cd 	bl	801b604 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801646a:	2200      	movs	r2, #0
 801646c:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8016470:	4611      	mov	r1, r2
 8016472:	4628      	mov	r0, r5
 8016474:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8016478:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801647c:	f7ee fb5a 	bl	8004b34 <_ZN8touchgfx8Drawable5setXYEss>
 8016480:	2301      	movs	r3, #1
 8016482:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8016486:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801648a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801648e:	2b00      	cmp	r3, #0
 8016490:	dd5c      	ble.n	801654c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8016492:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016496:	2b00      	cmp	r3, #0
 8016498:	dd58      	ble.n	801654c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 801649a:	462a      	mov	r2, r5
 801649c:	ab0a      	add	r3, sp, #40	; 0x28
 801649e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80164a2:	6851      	ldr	r1, [r2, #4]
 80164a4:	c303      	stmia	r3!, {r0, r1}
 80164a6:	4631      	mov	r1, r6
 80164a8:	a80a      	add	r0, sp, #40	; 0x28
 80164aa:	f7fe fd9d 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 80164ae:	4b38      	ldr	r3, [pc, #224]	; (8016590 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80164b0:	2100      	movs	r1, #0
 80164b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80164b6:	4b37      	ldr	r3, [pc, #220]	; (8016594 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80164b8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80164bc:	aa0a      	add	r2, sp, #40	; 0x28
 80164be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164c2:	910c      	str	r1, [sp, #48]	; 0x30
 80164c4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80164c8:	ab08      	add	r3, sp, #32
 80164ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80164ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80164d2:	4618      	mov	r0, r3
 80164d4:	a90c      	add	r1, sp, #48	; 0x30
 80164d6:	f7fe fd87 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 80164da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d13c      	bne.n	801655a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 80164e0:	2000      	movs	r0, #0
 80164e2:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80164e6:	2600      	movs	r6, #0
 80164e8:	696b      	ldr	r3, [r5, #20]
 80164ea:	a908      	add	r1, sp, #32
 80164ec:	682a      	ldr	r2, [r5, #0]
 80164ee:	4628      	mov	r0, r5
 80164f0:	9305      	str	r3, [sp, #20]
 80164f2:	616e      	str	r6, [r5, #20]
 80164f4:	6892      	ldr	r2, [r2, #8]
 80164f6:	4790      	blx	r2
 80164f8:	9b05      	ldr	r3, [sp, #20]
 80164fa:	4652      	mov	r2, sl
 80164fc:	4649      	mov	r1, r9
 80164fe:	616b      	str	r3, [r5, #20]
 8016500:	4628      	mov	r0, r5
 8016502:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8016506:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801650a:	f7ee fb13 	bl	8004b34 <_ZN8touchgfx8Drawable5setXYEss>
 801650e:	9a01      	ldr	r2, [sp, #4]
 8016510:	4b22      	ldr	r3, [pc, #136]	; (801659c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8016512:	4620      	mov	r0, r4
 8016514:	801a      	strh	r2, [r3, #0]
 8016516:	9a02      	ldr	r2, [sp, #8]
 8016518:	4b21      	ldr	r3, [pc, #132]	; (80165a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801651a:	801a      	strh	r2, [r3, #0]
 801651c:	9a03      	ldr	r2, [sp, #12]
 801651e:	4b1c      	ldr	r3, [pc, #112]	; (8016590 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8016520:	801a      	strh	r2, [r3, #0]
 8016522:	4b1c      	ldr	r3, [pc, #112]	; (8016594 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016524:	9a04      	ldr	r2, [sp, #16]
 8016526:	801a      	strh	r2, [r3, #0]
 8016528:	6823      	ldr	r3, [r4, #0]
 801652a:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016530:	4798      	blx	r3
 8016532:	6823      	ldr	r3, [r4, #0]
 8016534:	4620      	mov	r0, r4
 8016536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016538:	4798      	blx	r3
 801653a:	b00f      	add	sp, #60	; 0x3c
 801653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016540:	883b      	ldrh	r3, [r7, #0]
 8016542:	f8ab 0000 	strh.w	r0, [fp]
 8016546:	f8aa 3000 	strh.w	r3, [sl]
 801654a:	e789      	b.n	8016460 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 801654c:	462a      	mov	r2, r5
 801654e:	ab0a      	add	r3, sp, #40	; 0x28
 8016550:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016554:	6851      	ldr	r1, [r2, #4]
 8016556:	c303      	stmia	r3!, {r0, r1}
 8016558:	e7a9      	b.n	80164ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 801655a:	a807      	add	r0, sp, #28
 801655c:	f005 fa9e 	bl	801ba9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016560:	4606      	mov	r6, r0
 8016562:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016564:	6803      	ldr	r3, [r0, #0]
 8016566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016568:	4798      	blx	r3
 801656a:	4286      	cmp	r6, r0
 801656c:	d1b8      	bne.n	80164e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 801656e:	f7ed fdff 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 8016572:	6803      	ldr	r3, [r0, #0]
 8016574:	4606      	mov	r6, r0
 8016576:	a807      	add	r0, sp, #28
 8016578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801657a:	9305      	str	r3, [sp, #20]
 801657c:	f005 fa8e 	bl	801ba9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016580:	9b05      	ldr	r3, [sp, #20]
 8016582:	4601      	mov	r1, r0
 8016584:	4630      	mov	r0, r6
 8016586:	4798      	blx	r3
 8016588:	f080 0001 	eor.w	r0, r0, #1
 801658c:	b2c0      	uxtb	r0, r0
 801658e:	e7a8      	b.n	80164e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8016590:	2400aee0 	.word	0x2400aee0
 8016594:	2400aee2 	.word	0x2400aee2
 8016598:	2400aee4 	.word	0x2400aee4
 801659c:	2400aee6 	.word	0x2400aee6
 80165a0:	2400aee8 	.word	0x2400aee8

080165a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80165a4:	4b07      	ldr	r3, [pc, #28]	; (80165c4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80165a6:	b510      	push	{r4, lr}
 80165a8:	781b      	ldrb	r3, [r3, #0]
 80165aa:	4604      	mov	r4, r0
 80165ac:	b13b      	cbz	r3, 80165be <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80165ae:	6803      	ldr	r3, [r0, #0]
 80165b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165b2:	4798      	blx	r3
 80165b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80165b6:	4283      	cmp	r3, r0
 80165b8:	d101      	bne.n	80165be <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80165ba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80165bc:	bd10      	pop	{r4, pc}
 80165be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80165c0:	e7fc      	b.n	80165bc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80165c2:	bf00      	nop
 80165c4:	2400aeea 	.word	0x2400aeea

080165c8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80165c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165cc:	b088      	sub	sp, #32
 80165ce:	4692      	mov	sl, r2
 80165d0:	461d      	mov	r5, r3
 80165d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80165d6:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 80165da:	2400      	movs	r4, #0
 80165dc:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 80165e0:	4606      	mov	r6, r0
 80165e2:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 80165e6:	fb09 a505 	mla	r5, r9, r5, sl
 80165ea:	9403      	str	r4, [sp, #12]
 80165ec:	f8ad 8014 	strh.w	r8, [sp, #20]
 80165f0:	f8ad 7016 	strh.w	r7, [sp, #22]
 80165f4:	f88d 401c 	strb.w	r4, [sp, #28]
 80165f8:	e9cd 3100 	strd	r3, r1, [sp]
 80165fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016600:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016604:	f7ff ffce 	bl	80165a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016608:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801660c:	f8ad 901a 	strh.w	r9, [sp, #26]
 8016610:	f88d 401e 	strb.w	r4, [sp, #30]
 8016614:	9504      	str	r5, [sp, #16]
 8016616:	f88d 401d 	strb.w	r4, [sp, #29]
 801661a:	f88d 401f 	strb.w	r4, [sp, #31]
 801661e:	f1b8 0f00 	cmp.w	r8, #0
 8016622:	d000      	beq.n	8016626 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8016624:	b937      	cbnz	r7, 8016634 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8016626:	4b0d      	ldr	r3, [pc, #52]	; (801665c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8016628:	f240 210b 	movw	r1, #523	; 0x20b
 801662c:	4a0c      	ldr	r2, [pc, #48]	; (8016660 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 801662e:	480d      	ldr	r0, [pc, #52]	; (8016664 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8016630:	f011 f914 	bl	802785c <__assert_func>
 8016634:	6833      	ldr	r3, [r6, #0]
 8016636:	4630      	mov	r0, r6
 8016638:	9c00      	ldr	r4, [sp, #0]
 801663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801663c:	4798      	blx	r3
 801663e:	4220      	tst	r0, r4
 8016640:	d104      	bne.n	801664c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8016642:	4b09      	ldr	r3, [pc, #36]	; (8016668 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8016644:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8016648:	4a05      	ldr	r2, [pc, #20]	; (8016660 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 801664a:	e7f0      	b.n	801662e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 801664c:	6870      	ldr	r0, [r6, #4]
 801664e:	4669      	mov	r1, sp
 8016650:	6803      	ldr	r3, [r0, #0]
 8016652:	685b      	ldr	r3, [r3, #4]
 8016654:	4798      	blx	r3
 8016656:	b008      	add	sp, #32
 8016658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801665c:	0802a26c 	.word	0x0802a26c
 8016660:	0802a59c 	.word	0x0802a59c
 8016664:	0802a41e 	.word	0x0802a41e
 8016668:	0802a2a4 	.word	0x0802a2a4

0801666c <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801666c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016670:	b089      	sub	sp, #36	; 0x24
 8016672:	4693      	mov	fp, r2
 8016674:	461d      	mov	r5, r3
 8016676:	2400      	movs	r4, #0
 8016678:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 801667c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016680:	468a      	mov	sl, r1
 8016682:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8016686:	fb09 b505 	mla	r5, r9, r5, fp
 801668a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 801668e:	4606      	mov	r6, r0
 8016690:	9403      	str	r4, [sp, #12]
 8016692:	e9cd 3400 	strd	r3, r4, [sp]
 8016696:	f7ff ff85 	bl	80165a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801669a:	f8ad 8014 	strh.w	r8, [sp, #20]
 801669e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80166a2:	f8ad 7016 	strh.w	r7, [sp, #22]
 80166a6:	f8ad 4018 	strh.w	r4, [sp, #24]
 80166aa:	9504      	str	r5, [sp, #16]
 80166ac:	f8ad 901a 	strh.w	r9, [sp, #26]
 80166b0:	f8cd a00c 	str.w	sl, [sp, #12]
 80166b4:	f8ad 401c 	strh.w	r4, [sp, #28]
 80166b8:	f88d 401e 	strb.w	r4, [sp, #30]
 80166bc:	f88d 401f 	strb.w	r4, [sp, #31]
 80166c0:	f1b8 0f00 	cmp.w	r8, #0
 80166c4:	d000      	beq.n	80166c8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 80166c6:	b937      	cbnz	r7, 80166d6 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 80166c8:	4b0d      	ldr	r3, [pc, #52]	; (8016700 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 80166ca:	f240 2121 	movw	r1, #545	; 0x221
 80166ce:	4a0d      	ldr	r2, [pc, #52]	; (8016704 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 80166d0:	480d      	ldr	r0, [pc, #52]	; (8016708 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 80166d2:	f011 f8c3 	bl	802785c <__assert_func>
 80166d6:	6833      	ldr	r3, [r6, #0]
 80166d8:	4630      	mov	r0, r6
 80166da:	9c00      	ldr	r4, [sp, #0]
 80166dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166de:	4798      	blx	r3
 80166e0:	4220      	tst	r0, r4
 80166e2:	d104      	bne.n	80166ee <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 80166e4:	4b09      	ldr	r3, [pc, #36]	; (801670c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 80166e6:	f240 2122 	movw	r1, #546	; 0x222
 80166ea:	4a06      	ldr	r2, [pc, #24]	; (8016704 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 80166ec:	e7f0      	b.n	80166d0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 80166ee:	6870      	ldr	r0, [r6, #4]
 80166f0:	4669      	mov	r1, sp
 80166f2:	6803      	ldr	r3, [r0, #0]
 80166f4:	685b      	ldr	r3, [r3, #4]
 80166f6:	4798      	blx	r3
 80166f8:	b009      	add	sp, #36	; 0x24
 80166fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fe:	bf00      	nop
 8016700:	0802a2e9 	.word	0x0802a2e9
 8016704:	0802a612 	.word	0x0802a612
 8016708:	0802a41e 	.word	0x0802a41e
 801670c:	0802a321 	.word	0x0802a321

08016710 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016710:	b508      	push	{r3, lr}
 8016712:	290d      	cmp	r1, #13
 8016714:	d817      	bhi.n	8016746 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8016716:	e8df f001 	tbb	[pc, r1]
 801671a:	090b      	.short	0x090b
 801671c:	0d0d0d07 	.word	0x0d0d0d07
 8016720:	1414140d 	.word	0x1414140d
 8016724:	0d0d1414 	.word	0x0d0d1414
 8016728:	2020      	movs	r0, #32
 801672a:	bd08      	pop	{r3, pc}
 801672c:	2018      	movs	r0, #24
 801672e:	e7fc      	b.n	801672a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016730:	2010      	movs	r0, #16
 8016732:	e7fa      	b.n	801672a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016734:	4b05      	ldr	r3, [pc, #20]	; (801674c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8016736:	f240 2182 	movw	r1, #642	; 0x282
 801673a:	4a05      	ldr	r2, [pc, #20]	; (8016750 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801673c:	4805      	ldr	r0, [pc, #20]	; (8016754 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801673e:	f011 f88d 	bl	802785c <__assert_func>
 8016742:	2008      	movs	r0, #8
 8016744:	e7f1      	b.n	801672a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016746:	2000      	movs	r0, #0
 8016748:	e7ef      	b.n	801672a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801674a:	bf00      	nop
 801674c:	0802a49a 	.word	0x0802a49a
 8016750:	0802a93d 	.word	0x0802a93d
 8016754:	0802a41e 	.word	0x0802a41e

08016758 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8016758:	b570      	push	{r4, r5, r6, lr}
 801675a:	460d      	mov	r5, r1
 801675c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8016760:	4616      	mov	r6, r2
 8016762:	461c      	mov	r4, r3
 8016764:	f7ff ffd4 	bl	8016710 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8016768:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801676c:	10c0      	asrs	r0, r0, #3
 801676e:	fb06 5101 	mla	r1, r6, r1, r5
 8016772:	fb00 4001 	mla	r0, r0, r1, r4
 8016776:	bd70      	pop	{r4, r5, r6, pc}

08016778 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8016778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801677c:	b08a      	sub	sp, #40	; 0x28
 801677e:	f04f 0c00 	mov.w	ip, #0
 8016782:	4604      	mov	r4, r0
 8016784:	469a      	mov	sl, r3
 8016786:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801678a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 801678e:	2d0b      	cmp	r5, #11
 8016790:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8016794:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016798:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801679c:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80167a0:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80167a4:	f8cd c014 	str.w	ip, [sp, #20]
 80167a8:	d12d      	bne.n	8016806 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 80167aa:	2080      	movs	r0, #128	; 0x80
 80167ac:	9204      	str	r2, [sp, #16]
 80167ae:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80167b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80167b6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80167ba:	f8ad 701c 	strh.w	r7, [sp, #28]
 80167be:	f8ad 601e 	strh.w	r6, [sp, #30]
 80167c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80167c6:	4620      	mov	r0, r4
 80167c8:	f7ff feec 	bl	80165a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80167cc:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80167d0:	4603      	mov	r3, r0
 80167d2:	4651      	mov	r1, sl
 80167d4:	4620      	mov	r0, r4
 80167d6:	e9cd 9800 	strd	r9, r8, [sp]
 80167da:	f7ff ffbd 	bl	8016758 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80167de:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 80167e2:	9006      	str	r0, [sp, #24]
 80167e4:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 80167e8:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80167ec:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 80167f0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 80167f4:	b107      	cbz	r7, 80167f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 80167f6:	b9d6      	cbnz	r6, 801682e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 80167f8:	4b17      	ldr	r3, [pc, #92]	; (8016858 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 80167fa:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80167fe:	4a17      	ldr	r2, [pc, #92]	; (801685c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8016800:	4817      	ldr	r0, [pc, #92]	; (8016860 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8016802:	f011 f82b 	bl	802785c <__assert_func>
 8016806:	2d02      	cmp	r5, #2
 8016808:	d108      	bne.n	801681c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 801680a:	2bff      	cmp	r3, #255	; 0xff
 801680c:	d104      	bne.n	8016818 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 801680e:	2800      	cmp	r0, #0
 8016810:	bf14      	ite	ne
 8016812:	2040      	movne	r0, #64	; 0x40
 8016814:	2020      	moveq	r0, #32
 8016816:	e7c9      	b.n	80167ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8016818:	2040      	movs	r0, #64	; 0x40
 801681a:	e7c7      	b.n	80167ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801681c:	2bff      	cmp	r3, #255	; 0xff
 801681e:	d104      	bne.n	801682a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8016820:	2800      	cmp	r0, #0
 8016822:	bf14      	ite	ne
 8016824:	2004      	movne	r0, #4
 8016826:	2001      	moveq	r0, #1
 8016828:	e7c0      	b.n	80167ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801682a:	2004      	movs	r0, #4
 801682c:	e7be      	b.n	80167ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801682e:	6823      	ldr	r3, [r4, #0]
 8016830:	4620      	mov	r0, r4
 8016832:	9d02      	ldr	r5, [sp, #8]
 8016834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016836:	4798      	blx	r3
 8016838:	4228      	tst	r0, r5
 801683a:	d104      	bne.n	8016846 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 801683c:	4b09      	ldr	r3, [pc, #36]	; (8016864 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 801683e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8016842:	4a06      	ldr	r2, [pc, #24]	; (801685c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8016844:	e7dc      	b.n	8016800 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8016846:	6860      	ldr	r0, [r4, #4]
 8016848:	a902      	add	r1, sp, #8
 801684a:	6803      	ldr	r3, [r0, #0]
 801684c:	685b      	ldr	r3, [r3, #4]
 801684e:	4798      	blx	r3
 8016850:	b00a      	add	sp, #40	; 0x28
 8016852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016856:	bf00      	nop
 8016858:	0802a26c 	.word	0x0802a26c
 801685c:	0802a7cb 	.word	0x0802a7cb
 8016860:	0802a41e 	.word	0x0802a41e
 8016864:	0802a2a4 	.word	0x0802a2a4

08016868 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8016868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801686c:	b08b      	sub	sp, #44	; 0x2c
 801686e:	469b      	mov	fp, r3
 8016870:	4604      	mov	r4, r0
 8016872:	4692      	mov	sl, r2
 8016874:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016878:	2600      	movs	r6, #0
 801687a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801687e:	4689      	mov	r9, r1
 8016880:	2fff      	cmp	r7, #255	; 0xff
 8016882:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8016886:	9605      	str	r6, [sp, #20]
 8016888:	bf14      	ite	ne
 801688a:	2308      	movne	r3, #8
 801688c:	2302      	moveq	r3, #2
 801688e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8016892:	f7ff fe87 	bl	80165a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016896:	465a      	mov	r2, fp
 8016898:	4603      	mov	r3, r0
 801689a:	4651      	mov	r1, sl
 801689c:	4620      	mov	r0, r4
 801689e:	e9cd 8500 	strd	r8, r5, [sp]
 80168a2:	f7ff ff59 	bl	8016758 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80168a6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80168aa:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80168ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80168b2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80168b6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80168ba:	f8ad 301e 	strh.w	r3, [sp, #30]
 80168be:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80168c2:	9d02      	ldr	r5, [sp, #8]
 80168c4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 80168c8:	6823      	ldr	r3, [r4, #0]
 80168ca:	9006      	str	r0, [sp, #24]
 80168cc:	4620      	mov	r0, r4
 80168ce:	f8ad 6020 	strh.w	r6, [sp, #32]
 80168d2:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 80168d6:	f8cd 9014 	str.w	r9, [sp, #20]
 80168da:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80168de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168e0:	4798      	blx	r3
 80168e2:	4228      	tst	r0, r5
 80168e4:	d106      	bne.n	80168f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 80168e6:	4b07      	ldr	r3, [pc, #28]	; (8016904 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 80168e8:	f240 2137 	movw	r1, #567	; 0x237
 80168ec:	4a06      	ldr	r2, [pc, #24]	; (8016908 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 80168ee:	4807      	ldr	r0, [pc, #28]	; (801690c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 80168f0:	f010 ffb4 	bl	802785c <__assert_func>
 80168f4:	6860      	ldr	r0, [r4, #4]
 80168f6:	a902      	add	r1, sp, #8
 80168f8:	6803      	ldr	r3, [r0, #0]
 80168fa:	685b      	ldr	r3, [r3, #4]
 80168fc:	4798      	blx	r3
 80168fe:	b00b      	add	sp, #44	; 0x2c
 8016900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016904:	0802a2a4 	.word	0x0802a2a4
 8016908:	0802a8a2 	.word	0x0802a8a2
 801690c:	0802a41e 	.word	0x0802a41e

08016910 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016910:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016914:	461f      	mov	r7, r3
 8016916:	4b0b      	ldr	r3, [pc, #44]	; (8016944 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016918:	460d      	mov	r5, r1
 801691a:	4616      	mov	r6, r2
 801691c:	f8b3 8000 	ldrh.w	r8, [r3]
 8016920:	4604      	mov	r4, r0
 8016922:	f7ed fc25 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 8016926:	6803      	ldr	r3, [r0, #0]
 8016928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801692a:	4798      	blx	r3
 801692c:	463b      	mov	r3, r7
 801692e:	4632      	mov	r2, r6
 8016930:	4629      	mov	r1, r5
 8016932:	e9cd 8000 	strd	r8, r0, [sp]
 8016936:	4620      	mov	r0, r4
 8016938:	f7ff ff0e 	bl	8016758 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801693c:	b002      	add	sp, #8
 801693e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016942:	bf00      	nop
 8016944:	2400aee6 	.word	0x2400aee6

08016948 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8016948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801694c:	4698      	mov	r8, r3
 801694e:	b088      	sub	sp, #32
 8016950:	2300      	movs	r3, #0
 8016952:	4617      	mov	r7, r2
 8016954:	4604      	mov	r4, r0
 8016956:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801695a:	9303      	str	r3, [sp, #12]
 801695c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016960:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016964:	f8ad 6014 	strh.w	r6, [sp, #20]
 8016968:	f8ad 5016 	strh.w	r5, [sp, #22]
 801696c:	e9cd 3100 	strd	r3, r1, [sp]
 8016970:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016974:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016978:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801697c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016980:	f7ff fe10 	bl	80165a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016984:	4642      	mov	r2, r8
 8016986:	4603      	mov	r3, r0
 8016988:	4639      	mov	r1, r7
 801698a:	4620      	mov	r0, r4
 801698c:	f7ff ffc0 	bl	8016910 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016990:	4b18      	ldr	r3, [pc, #96]	; (80169f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8016992:	9004      	str	r0, [sp, #16]
 8016994:	881b      	ldrh	r3, [r3, #0]
 8016996:	f8ad 301a 	strh.w	r3, [sp, #26]
 801699a:	f7ed fbe9 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 801699e:	6803      	ldr	r3, [r0, #0]
 80169a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169a2:	4798      	blx	r3
 80169a4:	f88d 001e 	strb.w	r0, [sp, #30]
 80169a8:	f88d 001d 	strb.w	r0, [sp, #29]
 80169ac:	b106      	cbz	r6, 80169b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 80169ae:	b935      	cbnz	r5, 80169be <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 80169b0:	4b11      	ldr	r3, [pc, #68]	; (80169f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 80169b2:	f240 11f1 	movw	r1, #497	; 0x1f1
 80169b6:	4a11      	ldr	r2, [pc, #68]	; (80169fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 80169b8:	4811      	ldr	r0, [pc, #68]	; (8016a00 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 80169ba:	f010 ff4f 	bl	802785c <__assert_func>
 80169be:	6823      	ldr	r3, [r4, #0]
 80169c0:	4620      	mov	r0, r4
 80169c2:	9d00      	ldr	r5, [sp, #0]
 80169c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169c6:	4798      	blx	r3
 80169c8:	4228      	tst	r0, r5
 80169ca:	d104      	bne.n	80169d6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 80169cc:	4b0d      	ldr	r3, [pc, #52]	; (8016a04 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 80169ce:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80169d2:	4a0a      	ldr	r2, [pc, #40]	; (80169fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 80169d4:	e7f0      	b.n	80169b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 80169d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80169d8:	4669      	mov	r1, sp
 80169da:	6860      	ldr	r0, [r4, #4]
 80169dc:	9303      	str	r3, [sp, #12]
 80169de:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80169e2:	f88d 301f 	strb.w	r3, [sp, #31]
 80169e6:	6803      	ldr	r3, [r0, #0]
 80169e8:	685b      	ldr	r3, [r3, #4]
 80169ea:	4798      	blx	r3
 80169ec:	b008      	add	sp, #32
 80169ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169f2:	bf00      	nop
 80169f4:	2400aee6 	.word	0x2400aee6
 80169f8:	0802a26c 	.word	0x0802a26c
 80169fc:	0802a677 	.word	0x0802a677
 8016a00:	0802a41e 	.word	0x0802a41e
 8016a04:	0802a2a4 	.word	0x0802a2a4

08016a08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a0a:	b08b      	sub	sp, #44	; 0x2c
 8016a0c:	4604      	mov	r4, r0
 8016a0e:	466b      	mov	r3, sp
 8016a10:	e883 0006 	stmia.w	r3, {r1, r2}
 8016a14:	4b20      	ldr	r3, [pc, #128]	; (8016a98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016a16:	781b      	ldrb	r3, [r3, #0]
 8016a18:	b933      	cbnz	r3, 8016a28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016a1a:	4b20      	ldr	r3, [pc, #128]	; (8016a9c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8016a1c:	f44f 7112 	mov.w	r1, #584	; 0x248
 8016a20:	4a1f      	ldr	r2, [pc, #124]	; (8016aa0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016a22:	4820      	ldr	r0, [pc, #128]	; (8016aa4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8016a24:	f010 ff1a 	bl	802785c <__assert_func>
 8016a28:	2301      	movs	r3, #1
 8016a2a:	2500      	movs	r5, #0
 8016a2c:	f8bd 6000 	ldrh.w	r6, [sp]
 8016a30:	9302      	str	r3, [sp, #8]
 8016a32:	6803      	ldr	r3, [r0, #0]
 8016a34:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016a38:	9505      	str	r5, [sp, #20]
 8016a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a3c:	4798      	blx	r3
 8016a3e:	463a      	mov	r2, r7
 8016a40:	4631      	mov	r1, r6
 8016a42:	4603      	mov	r3, r0
 8016a44:	4620      	mov	r0, r4
 8016a46:	f7ff ff63 	bl	8016910 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016a4c:	9003      	str	r0, [sp, #12]
 8016a4e:	9306      	str	r3, [sp, #24]
 8016a50:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016a54:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016a58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016a5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016a60:	4b11      	ldr	r3, [pc, #68]	; (8016aa8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8016a62:	881b      	ldrh	r3, [r3, #0]
 8016a64:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016a68:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016a6c:	f7ed fb80 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 8016a70:	6803      	ldr	r3, [r0, #0]
 8016a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a74:	4798      	blx	r3
 8016a76:	23ff      	movs	r3, #255	; 0xff
 8016a78:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016a7c:	a902      	add	r1, sp, #8
 8016a7e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016a82:	6860      	ldr	r0, [r4, #4]
 8016a84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016a88:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 8016a8c:	6803      	ldr	r3, [r0, #0]
 8016a8e:	685b      	ldr	r3, [r3, #4]
 8016a90:	4798      	blx	r3
 8016a92:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016a94:	b00b      	add	sp, #44	; 0x2c
 8016a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a98:	2400aeeb 	.word	0x2400aeeb
 8016a9c:	0802a36b 	.word	0x0802a36b
 8016aa0:	0802a721 	.word	0x0802a721
 8016aa4:	0802a41e 	.word	0x0802a41e
 8016aa8:	2400aee6 	.word	0x2400aee6

08016aac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ab0:	b08a      	sub	sp, #40	; 0x28
 8016ab2:	2600      	movs	r6, #0
 8016ab4:	4604      	mov	r4, r0
 8016ab6:	466d      	mov	r5, sp
 8016ab8:	9605      	str	r6, [sp, #20]
 8016aba:	e885 0006 	stmia.w	r5, {r1, r2}
 8016abe:	461d      	mov	r5, r3
 8016ac0:	2301      	movs	r3, #1
 8016ac2:	f8bd 7000 	ldrh.w	r7, [sp]
 8016ac6:	9302      	str	r3, [sp, #8]
 8016ac8:	6803      	ldr	r3, [r0, #0]
 8016aca:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8016ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ad0:	4798      	blx	r3
 8016ad2:	4642      	mov	r2, r8
 8016ad4:	4639      	mov	r1, r7
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	4620      	mov	r0, r4
 8016ada:	f7ff ff19 	bl	8016910 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016ade:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016ae2:	9003      	str	r0, [sp, #12]
 8016ae4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016ae8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016aec:	9506      	str	r5, [sp, #24]
 8016aee:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016af2:	4b0f      	ldr	r3, [pc, #60]	; (8016b30 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 8016af4:	881b      	ldrh	r3, [r3, #0]
 8016af6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016afa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016afc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016b00:	f7ed fb36 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 8016b04:	6803      	ldr	r3, [r0, #0]
 8016b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b08:	4798      	blx	r3
 8016b0a:	23ff      	movs	r3, #255	; 0xff
 8016b0c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016b10:	a902      	add	r1, sp, #8
 8016b12:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016b16:	6860      	ldr	r0, [r4, #4]
 8016b18:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016b1c:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8016b20:	6803      	ldr	r3, [r0, #0]
 8016b22:	685b      	ldr	r3, [r3, #4]
 8016b24:	4798      	blx	r3
 8016b26:	4628      	mov	r0, r5
 8016b28:	b00a      	add	sp, #40	; 0x28
 8016b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b2e:	bf00      	nop
 8016b30:	2400aee6 	.word	0x2400aee6

08016b34 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016b34:	b570      	push	{r4, r5, r6, lr}
 8016b36:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	b19b      	cbz	r3, 8016b66 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016b3e:	2002      	movs	r0, #2
 8016b40:	f7eb f8e2 	bl	8001d08 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016b44:	2300      	movs	r3, #0
 8016b46:	4620      	mov	r0, r4
 8016b48:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016b4c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016b50:	6823      	ldr	r3, [r4, #0]
 8016b52:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8016b56:	f7ff fd25 	bl	80165a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016b5a:	4601      	mov	r1, r0
 8016b5c:	4620      	mov	r0, r4
 8016b5e:	462b      	mov	r3, r5
 8016b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b64:	4718      	bx	r3
 8016b66:	bd70      	pop	{r4, r5, r6, pc}

08016b68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8016b68:	b538      	push	{r3, r4, r5, lr}
 8016b6a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8016b6e:	4604      	mov	r4, r0
 8016b70:	460d      	mov	r5, r1
 8016b72:	428a      	cmp	r2, r1
 8016b74:	d008      	beq.n	8016b88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8016b76:	2a01      	cmp	r2, #1
 8016b78:	6803      	ldr	r3, [r0, #0]
 8016b7a:	d106      	bne.n	8016b8a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8016b7c:	b929      	cbnz	r1, 8016b8a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8016b7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016b82:	4798      	blx	r3
 8016b84:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8016b88:	bd38      	pop	{r3, r4, r5, pc}
 8016b8a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016b8e:	4620      	mov	r0, r4
 8016b90:	e7f7      	b.n	8016b82 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08016b94 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016b94:	4b0d      	ldr	r3, [pc, #52]	; (8016bcc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8016b96:	b510      	push	{r4, lr}
 8016b98:	781b      	ldrb	r3, [r3, #0]
 8016b9a:	4604      	mov	r4, r0
 8016b9c:	b95b      	cbnz	r3, 8016bb6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016b9e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016ba2:	2b02      	cmp	r3, #2
 8016ba4:	d007      	beq.n	8016bb6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016ba6:	6840      	ldr	r0, [r0, #4]
 8016ba8:	f000 f936 	bl	8016e18 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016bac:	b118      	cbz	r0, 8016bb6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016bae:	6862      	ldr	r2, [r4, #4]
 8016bb0:	7a53      	ldrb	r3, [r2, #9]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d0fc      	beq.n	8016bb0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016bb6:	f7eb fb65 	bl	8002284 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016bba:	4620      	mov	r0, r4
 8016bbc:	2100      	movs	r1, #0
 8016bbe:	f7ff ffd3 	bl	8016b68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016bc2:	4620      	mov	r0, r4
 8016bc4:	f7ff fcee 	bl	80165a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016bc8:	bd10      	pop	{r4, pc}
 8016bca:	bf00      	nop
 8016bcc:	2400aeea 	.word	0x2400aeea

08016bd0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016bd0:	4770      	bx	lr

08016bd2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016bd2:	2000      	movs	r0, #0
 8016bd4:	4770      	bx	lr

08016bd6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016bd6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016bda:	1a13      	subs	r3, r2, r0
 8016bdc:	4258      	negs	r0, r3
 8016bde:	4158      	adcs	r0, r3
 8016be0:	4770      	bx	lr

08016be2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016be2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016be6:	1a9b      	subs	r3, r3, r2
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	bfdc      	itt	le
 8016bec:	6882      	ldrle	r2, [r0, #8]
 8016bee:	189b      	addle	r3, r3, r2
 8016bf0:	2b01      	cmp	r3, #1
 8016bf2:	bfcc      	ite	gt
 8016bf4:	2000      	movgt	r0, #0
 8016bf6:	2001      	movle	r0, #1
 8016bf8:	4770      	bx	lr

08016bfa <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016bfa:	6902      	ldr	r2, [r0, #16]
 8016bfc:	6840      	ldr	r0, [r0, #4]
 8016bfe:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016c02:	4770      	bx	lr

08016c04 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016c04:	6803      	ldr	r3, [r0, #0]
 8016c06:	691b      	ldr	r3, [r3, #16]
 8016c08:	4718      	bx	r3

08016c0a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016c0a:	4770      	bx	lr

08016c0c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016c0c:	4770      	bx	lr
	...

08016c10 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016c10:	2301      	movs	r3, #1
 8016c12:	b570      	push	{r4, r5, r6, lr}
 8016c14:	7203      	strb	r3, [r0, #8]
 8016c16:	4604      	mov	r4, r0
 8016c18:	6840      	ldr	r0, [r0, #4]
 8016c1a:	6803      	ldr	r3, [r0, #0]
 8016c1c:	699b      	ldr	r3, [r3, #24]
 8016c1e:	4798      	blx	r3
 8016c20:	6803      	ldr	r3, [r0, #0]
 8016c22:	4605      	mov	r5, r0
 8016c24:	2b40      	cmp	r3, #64	; 0x40
 8016c26:	d039      	beq.n	8016c9c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016c28:	d815      	bhi.n	8016c56 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8016c2a:	2b04      	cmp	r3, #4
 8016c2c:	d022      	beq.n	8016c74 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016c2e:	d808      	bhi.n	8016c42 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016c30:	2b01      	cmp	r3, #1
 8016c32:	d033      	beq.n	8016c9c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016c34:	2b02      	cmp	r3, #2
 8016c36:	d108      	bne.n	8016c4a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8016c38:	6823      	ldr	r3, [r4, #0]
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c3e:	4798      	blx	r3
 8016c40:	e025      	b.n	8016c8e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8016c42:	2b08      	cmp	r3, #8
 8016c44:	d01e      	beq.n	8016c84 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8016c46:	2b20      	cmp	r3, #32
 8016c48:	d028      	beq.n	8016c9c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016c4a:	4b17      	ldr	r3, [pc, #92]	; (8016ca8 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8016c4c:	218b      	movs	r1, #139	; 0x8b
 8016c4e:	4a17      	ldr	r2, [pc, #92]	; (8016cac <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8016c50:	4817      	ldr	r0, [pc, #92]	; (8016cb0 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8016c52:	f010 fe03 	bl	802785c <__assert_func>
 8016c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c5a:	d01f      	beq.n	8016c9c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016c5c:	d804      	bhi.n	8016c68 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8016c5e:	2b80      	cmp	r3, #128	; 0x80
 8016c60:	d01c      	beq.n	8016c9c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016c66:	e7ef      	b.n	8016c48 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8016c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016c6c:	d016      	beq.n	8016c9c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016c72:	e7e0      	b.n	8016c36 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8016c74:	6823      	ldr	r3, [r4, #0]
 8016c76:	7f01      	ldrb	r1, [r0, #28]
 8016c78:	4620      	mov	r0, r4
 8016c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c7c:	4798      	blx	r3
 8016c7e:	6823      	ldr	r3, [r4, #0]
 8016c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c82:	e006      	b.n	8016c92 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8016c84:	6823      	ldr	r3, [r4, #0]
 8016c86:	7f01      	ldrb	r1, [r0, #28]
 8016c88:	4620      	mov	r0, r4
 8016c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c8c:	4798      	blx	r3
 8016c8e:	6823      	ldr	r3, [r4, #0]
 8016c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c92:	4629      	mov	r1, r5
 8016c94:	4620      	mov	r0, r4
 8016c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c9a:	4718      	bx	r3
 8016c9c:	6823      	ldr	r3, [r4, #0]
 8016c9e:	4620      	mov	r0, r4
 8016ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ca2:	4798      	blx	r3
 8016ca4:	e7eb      	b.n	8016c7e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016ca6:	bf00      	nop
 8016ca8:	0802a986 	.word	0x0802a986
 8016cac:	0802aa98 	.word	0x0802aa98
 8016cb0:	0802a9ab 	.word	0x0802a9ab

08016cb4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016cb4:	b570      	push	{r4, r5, r6, lr}
 8016cb6:	4604      	mov	r4, r0
 8016cb8:	460e      	mov	r6, r1
 8016cba:	6860      	ldr	r0, [r4, #4]
 8016cbc:	6803      	ldr	r3, [r0, #0]
 8016cbe:	685b      	ldr	r3, [r3, #4]
 8016cc0:	4798      	blx	r3
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	d1f9      	bne.n	8016cba <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016cc6:	4d0d      	ldr	r5, [pc, #52]	; (8016cfc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016cc8:	6828      	ldr	r0, [r5, #0]
 8016cca:	6803      	ldr	r3, [r0, #0]
 8016ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016cce:	4798      	blx	r3
 8016cd0:	f7eb faf2 	bl	80022b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016cd4:	6828      	ldr	r0, [r5, #0]
 8016cd6:	2101      	movs	r1, #1
 8016cd8:	f7ff ff46 	bl	8016b68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016cdc:	6860      	ldr	r0, [r4, #4]
 8016cde:	4631      	mov	r1, r6
 8016ce0:	6803      	ldr	r3, [r0, #0]
 8016ce2:	689b      	ldr	r3, [r3, #8]
 8016ce4:	4798      	blx	r3
 8016ce6:	6823      	ldr	r3, [r4, #0]
 8016ce8:	4620      	mov	r0, r4
 8016cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cec:	4798      	blx	r3
 8016cee:	6828      	ldr	r0, [r5, #0]
 8016cf0:	6803      	ldr	r3, [r0, #0]
 8016cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016cf8:	4718      	bx	r3
 8016cfa:	bf00      	nop
 8016cfc:	2400aeec 	.word	0x2400aeec

08016d00 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016d00:	b508      	push	{r3, lr}
 8016d02:	f7eb fabf 	bl	8002284 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016d0a:	f7eb bac9 	b.w	80022a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016d0e <_ZN8touchgfx13DMA_Interface5startEv>:
 8016d0e:	b510      	push	{r4, lr}
 8016d10:	4604      	mov	r4, r0
 8016d12:	6840      	ldr	r0, [r0, #4]
 8016d14:	6803      	ldr	r3, [r0, #0]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	4798      	blx	r3
 8016d1a:	b948      	cbnz	r0, 8016d30 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016d1c:	7a63      	ldrb	r3, [r4, #9]
 8016d1e:	b13b      	cbz	r3, 8016d30 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016d20:	7a23      	ldrb	r3, [r4, #8]
 8016d22:	b92b      	cbnz	r3, 8016d30 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016d24:	6823      	ldr	r3, [r4, #0]
 8016d26:	4620      	mov	r0, r4
 8016d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d2e:	4718      	bx	r3
 8016d30:	bd10      	pop	{r4, pc}
	...

08016d34 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016d34:	b570      	push	{r4, r5, r6, lr}
 8016d36:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016d3a:	4606      	mov	r6, r0
 8016d3c:	1a9b      	subs	r3, r3, r2
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	bfdc      	itt	le
 8016d42:	6880      	ldrle	r0, [r0, #8]
 8016d44:	181b      	addle	r3, r3, r0
 8016d46:	2b01      	cmp	r3, #1
 8016d48:	dd13      	ble.n	8016d72 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 8016d4a:	6874      	ldr	r4, [r6, #4]
 8016d4c:	460d      	mov	r5, r1
 8016d4e:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 8016d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016d5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016d5e:	68f3      	ldr	r3, [r6, #12]
 8016d60:	68b2      	ldr	r2, [r6, #8]
 8016d62:	f3bf 8f5b 	dmb	ish
 8016d66:	3301      	adds	r3, #1
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	bfd8      	it	le
 8016d6c:	1a9b      	suble	r3, r3, r2
 8016d6e:	60f3      	str	r3, [r6, #12]
 8016d70:	bd70      	pop	{r4, r5, r6, pc}
 8016d72:	4b03      	ldr	r3, [pc, #12]	; (8016d80 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 8016d74:	2139      	movs	r1, #57	; 0x39
 8016d76:	4a03      	ldr	r2, [pc, #12]	; (8016d84 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8016d78:	4803      	ldr	r0, [pc, #12]	; (8016d88 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016d7a:	f010 fd6f 	bl	802785c <__assert_func>
 8016d7e:	bf00      	nop
 8016d80:	0802a9d1 	.word	0x0802a9d1
 8016d84:	0802aac8 	.word	0x0802aac8
 8016d88:	0802a9ab 	.word	0x0802a9ab

08016d8c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016d8c:	b510      	push	{r4, lr}
 8016d8e:	6803      	ldr	r3, [r0, #0]
 8016d90:	4604      	mov	r4, r0
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	4798      	blx	r3
 8016d96:	b128      	cbz	r0, 8016da4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016d98:	4b07      	ldr	r3, [pc, #28]	; (8016db8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016d9a:	213f      	movs	r1, #63	; 0x3f
 8016d9c:	4a07      	ldr	r2, [pc, #28]	; (8016dbc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8016d9e:	4808      	ldr	r0, [pc, #32]	; (8016dc0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016da0:	f010 fd5c 	bl	802785c <__assert_func>
 8016da4:	6923      	ldr	r3, [r4, #16]
 8016da6:	68a2      	ldr	r2, [r4, #8]
 8016da8:	f3bf 8f5b 	dmb	ish
 8016dac:	3301      	adds	r3, #1
 8016dae:	429a      	cmp	r2, r3
 8016db0:	bfd8      	it	le
 8016db2:	1a9b      	suble	r3, r3, r2
 8016db4:	6123      	str	r3, [r4, #16]
 8016db6:	bd10      	pop	{r4, pc}
 8016db8:	0802a9f4 	.word	0x0802a9f4
 8016dbc:	0802ab16 	.word	0x0802ab16
 8016dc0:	0802a9ab 	.word	0x0802a9ab

08016dc4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016dc4:	b570      	push	{r4, r5, r6, lr}
 8016dc6:	4604      	mov	r4, r0
 8016dc8:	6840      	ldr	r0, [r0, #4]
 8016dca:	6803      	ldr	r3, [r0, #0]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	4798      	blx	r3
 8016dd0:	4605      	mov	r5, r0
 8016dd2:	b930      	cbnz	r0, 8016de2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016dd4:	7a23      	ldrb	r3, [r4, #8]
 8016dd6:	b123      	cbz	r3, 8016de2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016dd8:	6860      	ldr	r0, [r4, #4]
 8016dda:	6803      	ldr	r3, [r0, #0]
 8016ddc:	695b      	ldr	r3, [r3, #20]
 8016dde:	4798      	blx	r3
 8016de0:	7225      	strb	r5, [r4, #8]
 8016de2:	6860      	ldr	r0, [r4, #4]
 8016de4:	6803      	ldr	r3, [r0, #0]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	4798      	blx	r3
 8016dea:	b928      	cbnz	r0, 8016df8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016dec:	6823      	ldr	r3, [r4, #0]
 8016dee:	4620      	mov	r0, r4
 8016df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016df6:	4718      	bx	r3
 8016df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dfc:	f7eb ba68 	b.w	80022d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016e00 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016e00:	b510      	push	{r4, lr}
 8016e02:	6082      	str	r2, [r0, #8]
 8016e04:	2200      	movs	r2, #0
 8016e06:	4c03      	ldr	r4, [pc, #12]	; (8016e14 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016e08:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016e0c:	e9c0 4100 	strd	r4, r1, [r0]
 8016e10:	bd10      	pop	{r4, pc}
 8016e12:	bf00      	nop
 8016e14:	0802aa7c 	.word	0x0802aa7c

08016e18 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016e18:	6840      	ldr	r0, [r0, #4]
 8016e1a:	6803      	ldr	r3, [r0, #0]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	4718      	bx	r3

08016e20 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8016e20:	2200      	movs	r2, #0
 8016e22:	8002      	strh	r2, [r0, #0]
 8016e24:	8042      	strh	r2, [r0, #2]
 8016e26:	8082      	strh	r2, [r0, #4]
 8016e28:	80c2      	strh	r2, [r0, #6]
 8016e2a:	4770      	bx	lr

08016e2c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8016e2c:	b570      	push	{r4, r5, r6, lr}
 8016e2e:	6803      	ldr	r3, [r0, #0]
 8016e30:	4604      	mov	r4, r0
 8016e32:	4615      	mov	r5, r2
 8016e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e36:	4798      	blx	r3
 8016e38:	6823      	ldr	r3, [r4, #0]
 8016e3a:	4629      	mov	r1, r5
 8016e3c:	4620      	mov	r0, r4
 8016e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e44:	4718      	bx	r3
	...

08016e48 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e4e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016e50:	4299      	cmp	r1, r3
 8016e52:	d029      	beq.n	8016ea8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8016e54:	4b15      	ldr	r3, [pc, #84]	; (8016eac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	b92b      	cbnz	r3, 8016e66 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8016e5a:	4b15      	ldr	r3, [pc, #84]	; (8016eb0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8016e5c:	21ae      	movs	r1, #174	; 0xae
 8016e5e:	4a15      	ldr	r2, [pc, #84]	; (8016eb4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016e60:	4815      	ldr	r0, [pc, #84]	; (8016eb8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8016e62:	f010 fcfb 	bl	802785c <__assert_func>
 8016e66:	4a15      	ldr	r2, [pc, #84]	; (8016ebc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8016e68:	8812      	ldrh	r2, [r2, #0]
 8016e6a:	428a      	cmp	r2, r1
 8016e6c:	d803      	bhi.n	8016e76 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8016e6e:	4b14      	ldr	r3, [pc, #80]	; (8016ec0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8016e70:	21af      	movs	r1, #175	; 0xaf
 8016e72:	4a10      	ldr	r2, [pc, #64]	; (8016eb4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016e74:	e7f4      	b.n	8016e60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8016e76:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016e7a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016e7e:	4b11      	ldr	r3, [pc, #68]	; (8016ec4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8016e80:	7854      	ldrb	r4, [r2, #1]
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8016e88:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8016e8c:	682b      	ldr	r3, [r5, #0]
 8016e8e:	69de      	ldr	r6, [r3, #28]
 8016e90:	4b0d      	ldr	r3, [pc, #52]	; (8016ec8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8016e92:	6818      	ldr	r0, [r3, #0]
 8016e94:	f7f0 f91e 	bl	80070d4 <_ZNK8touchgfx5Texts7getTextEt>
 8016e98:	2300      	movs	r3, #0
 8016e9a:	4602      	mov	r2, r0
 8016e9c:	4621      	mov	r1, r4
 8016e9e:	9300      	str	r3, [sp, #0]
 8016ea0:	4628      	mov	r0, r5
 8016ea2:	47b0      	blx	r6
 8016ea4:	b002      	add	sp, #8
 8016ea6:	bd70      	pop	{r4, r5, r6, pc}
 8016ea8:	2000      	movs	r0, #0
 8016eaa:	e7fb      	b.n	8016ea4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8016eac:	2400af3c 	.word	0x2400af3c
 8016eb0:	0802ab46 	.word	0x0802ab46
 8016eb4:	0802ac7c 	.word	0x0802ac7c
 8016eb8:	0802ab88 	.word	0x0802ab88
 8016ebc:	2400af40 	.word	0x2400af40
 8016ec0:	0802abb1 	.word	0x0802abb1
 8016ec4:	2400af44 	.word	0x2400af44
 8016ec8:	2400af48 	.word	0x2400af48

08016ecc <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8016ecc:	b570      	push	{r4, r5, r6, lr}
 8016ece:	6803      	ldr	r3, [r0, #0]
 8016ed0:	4604      	mov	r4, r0
 8016ed2:	b28d      	uxth	r5, r1
 8016ed4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016ed6:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8016ed8:	4b10      	ldr	r3, [pc, #64]	; (8016f1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	b92b      	cbnz	r3, 8016eea <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8016ede:	4b10      	ldr	r3, [pc, #64]	; (8016f20 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8016ee0:	21ae      	movs	r1, #174	; 0xae
 8016ee2:	4a10      	ldr	r2, [pc, #64]	; (8016f24 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8016ee4:	4810      	ldr	r0, [pc, #64]	; (8016f28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8016ee6:	f010 fcb9 	bl	802785c <__assert_func>
 8016eea:	4910      	ldr	r1, [pc, #64]	; (8016f2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8016eec:	8809      	ldrh	r1, [r1, #0]
 8016eee:	4291      	cmp	r1, r2
 8016ef0:	d803      	bhi.n	8016efa <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8016ef2:	4b0f      	ldr	r3, [pc, #60]	; (8016f30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8016ef4:	21af      	movs	r1, #175	; 0xaf
 8016ef6:	4a0b      	ldr	r2, [pc, #44]	; (8016f24 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8016ef8:	e7f4      	b.n	8016ee4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8016efa:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8016efe:	4b0d      	ldr	r3, [pc, #52]	; (8016f34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016f06:	6803      	ldr	r3, [r0, #0]
 8016f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f0a:	4798      	blx	r3
 8016f0c:	1a29      	subs	r1, r5, r0
 8016f0e:	4633      	mov	r3, r6
 8016f10:	4620      	mov	r0, r4
 8016f12:	b209      	sxth	r1, r1
 8016f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f18:	4718      	bx	r3
 8016f1a:	bf00      	nop
 8016f1c:	2400af3c 	.word	0x2400af3c
 8016f20:	0802ab46 	.word	0x0802ab46
 8016f24:	0802ac7c 	.word	0x0802ac7c
 8016f28:	0802ab88 	.word	0x0802ab88
 8016f2c:	2400af40 	.word	0x2400af40
 8016f30:	0802abb1 	.word	0x0802abb1
 8016f34:	2400af44 	.word	0x2400af44

08016f38 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f40:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016f42:	b08c      	sub	sp, #48	; 0x30
 8016f44:	4604      	mov	r4, r0
 8016f46:	4293      	cmp	r3, r2
 8016f48:	4688      	mov	r8, r1
 8016f4a:	d05f      	beq.n	801700c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8016f4c:	4e31      	ldr	r6, [pc, #196]	; (8017014 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8016f4e:	6832      	ldr	r2, [r6, #0]
 8016f50:	b92a      	cbnz	r2, 8016f5e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8016f52:	4b31      	ldr	r3, [pc, #196]	; (8017018 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8016f54:	21ae      	movs	r1, #174	; 0xae
 8016f56:	4a31      	ldr	r2, [pc, #196]	; (801701c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8016f58:	4831      	ldr	r0, [pc, #196]	; (8017020 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8016f5a:	f010 fc7f 	bl	802785c <__assert_func>
 8016f5e:	4d31      	ldr	r5, [pc, #196]	; (8017024 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8016f60:	8829      	ldrh	r1, [r5, #0]
 8016f62:	4299      	cmp	r1, r3
 8016f64:	d803      	bhi.n	8016f6e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8016f66:	4b30      	ldr	r3, [pc, #192]	; (8017028 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8016f68:	21af      	movs	r1, #175	; 0xaf
 8016f6a:	4a2c      	ldr	r2, [pc, #176]	; (801701c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8016f6c:	e7f4      	b.n	8016f58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8016f6e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8016f72:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016f76:	4b2d      	ldr	r3, [pc, #180]	; (801702c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016f7e:	2a00      	cmp	r2, #0
 8016f80:	d044      	beq.n	801700c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8016f82:	784b      	ldrb	r3, [r1, #1]
 8016f84:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8016f88:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8016f8c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016f90:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8016f94:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8016f98:	4b25      	ldr	r3, [pc, #148]	; (8017030 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8016f9a:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8016fa4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8016fa8:	9207      	str	r2, [sp, #28]
 8016faa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016fac:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016fb0:	f88d a020 	strb.w	sl, [sp, #32]
 8016fb4:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8016fb8:	9009      	str	r0, [sp, #36]	; 0x24
 8016fba:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8016fbe:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8016fc2:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8016fc6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8016fca:	b10a      	cbz	r2, 8016fd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8016fcc:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8016fce:	b907      	cbnz	r7, 8016fd2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8016fd0:	689f      	ldr	r7, [r3, #8]
 8016fd2:	f10d 0914 	add.w	r9, sp, #20
 8016fd6:	4621      	mov	r1, r4
 8016fd8:	4648      	mov	r0, r9
 8016fda:	f002 ff7d 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016fde:	6833      	ldr	r3, [r6, #0]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d0b6      	beq.n	8016f52 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8016fe4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8016fe6:	882b      	ldrh	r3, [r5, #0]
 8016fe8:	428b      	cmp	r3, r1
 8016fea:	d9bc      	bls.n	8016f66 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8016fec:	4b11      	ldr	r3, [pc, #68]	; (8017034 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8016fee:	6818      	ldr	r0, [r3, #0]
 8016ff0:	f7f0 f870 	bl	80070d4 <_ZNK8touchgfx5Texts7getTextEt>
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	9001      	str	r0, [sp, #4]
 8016ff8:	4638      	mov	r0, r7
 8016ffa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016ffe:	ab07      	add	r3, sp, #28
 8017000:	9300      	str	r3, [sp, #0]
 8017002:	4643      	mov	r3, r8
 8017004:	e899 0006 	ldmia.w	r9, {r1, r2}
 8017008:	f7ef fff5 	bl	8006ff6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801700c:	b00c      	add	sp, #48	; 0x30
 801700e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017012:	bf00      	nop
 8017014:	2400af3c 	.word	0x2400af3c
 8017018:	0802ab46 	.word	0x0802ab46
 801701c:	0802ac7c 	.word	0x0802ac7c
 8017020:	0802ab88 	.word	0x0802ab88
 8017024:	2400af40 	.word	0x2400af40
 8017028:	0802abb1 	.word	0x0802abb1
 801702c:	2400af44 	.word	0x2400af44
 8017030:	2400aeec 	.word	0x2400aeec
 8017034:	2400af48 	.word	0x2400af48

08017038 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017038:	b40e      	push	{r1, r2, r3}
 801703a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801703e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017042:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017044:	b09c      	sub	sp, #112	; 0x70
 8017046:	4604      	mov	r4, r0
 8017048:	4293      	cmp	r3, r2
 801704a:	d06b      	beq.n	8017124 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 801704c:	aa26      	add	r2, sp, #152	; 0x98
 801704e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8017138 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8017052:	9202      	str	r2, [sp, #8]
 8017054:	f8da 2000 	ldr.w	r2, [sl]
 8017058:	b92a      	cbnz	r2, 8017066 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801705a:	4b33      	ldr	r3, [pc, #204]	; (8017128 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 801705c:	21ae      	movs	r1, #174	; 0xae
 801705e:	4a33      	ldr	r2, [pc, #204]	; (801712c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8017060:	4833      	ldr	r0, [pc, #204]	; (8017130 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 8017062:	f010 fbfb 	bl	802785c <__assert_func>
 8017066:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 801713c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 801706a:	f8b8 1000 	ldrh.w	r1, [r8]
 801706e:	4299      	cmp	r1, r3
 8017070:	d803      	bhi.n	801707a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8017072:	4b30      	ldr	r3, [pc, #192]	; (8017134 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8017074:	21af      	movs	r1, #175	; 0xaf
 8017076:	4a2d      	ldr	r2, [pc, #180]	; (801712c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8017078:	e7f2      	b.n	8017060 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801707a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8017140 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 801707e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017082:	f8d9 3000 	ldr.w	r3, [r9]
 8017086:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801708a:	682b      	ldr	r3, [r5, #0]
 801708c:	4628      	mov	r0, r5
 801708e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017090:	4798      	blx	r3
 8017092:	4606      	mov	r6, r0
 8017094:	b207      	sxth	r7, r0
 8017096:	a803      	add	r0, sp, #12
 8017098:	f003 faed 	bl	801a676 <_ZN8touchgfx12TextProviderC1Ev>
 801709c:	682b      	ldr	r3, [r5, #0]
 801709e:	4628      	mov	r0, r5
 80170a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170a2:	4798      	blx	r3
 80170a4:	682b      	ldr	r3, [r5, #0]
 80170a6:	4683      	mov	fp, r0
 80170a8:	4628      	mov	r0, r5
 80170aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170ac:	4798      	blx	r3
 80170ae:	465b      	mov	r3, fp
 80170b0:	9000      	str	r0, [sp, #0]
 80170b2:	a803      	add	r0, sp, #12
 80170b4:	9925      	ldr	r1, [sp, #148]	; 0x94
 80170b6:	9a02      	ldr	r2, [sp, #8]
 80170b8:	f003 fb30 	bl	801a71c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80170bc:	f8da 3000 	ldr.w	r3, [sl]
 80170c0:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d0c8      	beq.n	801705a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 80170c8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80170ca:	f8b8 0000 	ldrh.w	r0, [r8]
 80170ce:	4290      	cmp	r0, r2
 80170d0:	d9cf      	bls.n	8017072 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 80170d2:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 80170d6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80170da:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80170de:	786a      	ldrb	r2, [r5, #1]
 80170e0:	8925      	ldrh	r5, [r4, #8]
 80170e2:	f8d9 3000 	ldr.w	r3, [r9]
 80170e6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80170ea:	eba5 050c 	sub.w	r5, r5, ip
 80170ee:	b22d      	sxth	r5, r5
 80170f0:	9500      	str	r5, [sp, #0]
 80170f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80170f6:	a803      	add	r0, sp, #12
 80170f8:	f001 fa2d 	bl	8018556 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80170fc:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8017100:	b203      	sxth	r3, r0
 8017102:	18b9      	adds	r1, r7, r2
 8017104:	2900      	cmp	r1, #0
 8017106:	dd0b      	ble.n	8017120 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8017108:	3b01      	subs	r3, #1
 801710a:	fb13 f302 	smulbb	r3, r3, r2
 801710e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017112:	b21f      	sxth	r7, r3
 8017114:	4638      	mov	r0, r7
 8017116:	b01c      	add	sp, #112	; 0x70
 8017118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801711c:	b003      	add	sp, #12
 801711e:	4770      	bx	lr
 8017120:	2b00      	cmp	r3, #0
 8017122:	dcf7      	bgt.n	8017114 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8017124:	2700      	movs	r7, #0
 8017126:	e7f5      	b.n	8017114 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8017128:	0802ab46 	.word	0x0802ab46
 801712c:	0802ac7c 	.word	0x0802ac7c
 8017130:	0802ab88 	.word	0x0802ab88
 8017134:	0802abb1 	.word	0x0802abb1
 8017138:	2400af3c 	.word	0x2400af3c
 801713c:	2400af40 	.word	0x2400af40
 8017140:	2400af44 	.word	0x2400af44

08017144 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017144:	b570      	push	{r4, r5, r6, lr}
 8017146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801714a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801714c:	4604      	mov	r4, r0
 801714e:	4299      	cmp	r1, r3
 8017150:	d01e      	beq.n	8017190 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8017152:	6803      	ldr	r3, [r0, #0]
 8017154:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8017156:	4b0f      	ldr	r3, [pc, #60]	; (8017194 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	b92b      	cbnz	r3, 8017168 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801715c:	4b0e      	ldr	r3, [pc, #56]	; (8017198 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801715e:	21ae      	movs	r1, #174	; 0xae
 8017160:	4a0e      	ldr	r2, [pc, #56]	; (801719c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017162:	480f      	ldr	r0, [pc, #60]	; (80171a0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8017164:	f010 fb7a 	bl	802785c <__assert_func>
 8017168:	4b0e      	ldr	r3, [pc, #56]	; (80171a4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801716a:	881b      	ldrh	r3, [r3, #0]
 801716c:	428b      	cmp	r3, r1
 801716e:	d803      	bhi.n	8017178 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8017170:	4b0d      	ldr	r3, [pc, #52]	; (80171a8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8017172:	21af      	movs	r1, #175	; 0xaf
 8017174:	4a09      	ldr	r2, [pc, #36]	; (801719c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017176:	e7f4      	b.n	8017162 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8017178:	4b0c      	ldr	r3, [pc, #48]	; (80171ac <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801717a:	6818      	ldr	r0, [r3, #0]
 801717c:	f7ef ffaa 	bl	80070d4 <_ZNK8touchgfx5Texts7getTextEt>
 8017180:	2300      	movs	r3, #0
 8017182:	4601      	mov	r1, r0
 8017184:	46ac      	mov	ip, r5
 8017186:	4620      	mov	r0, r4
 8017188:	461a      	mov	r2, r3
 801718a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801718e:	4760      	bx	ip
 8017190:	2000      	movs	r0, #0
 8017192:	bd70      	pop	{r4, r5, r6, pc}
 8017194:	2400af3c 	.word	0x2400af3c
 8017198:	0802ab46 	.word	0x0802ab46
 801719c:	0802ac7c 	.word	0x0802ac7c
 80171a0:	0802ab88 	.word	0x0802ab88
 80171a4:	2400af40 	.word	0x2400af40
 80171a8:	0802abb1 	.word	0x0802abb1
 80171ac:	2400af48 	.word	0x2400af48

080171b0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80171b0:	b538      	push	{r3, r4, r5, lr}
 80171b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80171b6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80171b8:	4604      	mov	r4, r0
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d014      	beq.n	80171e8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80171be:	6803      	ldr	r3, [r0, #0]
 80171c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80171c2:	4798      	blx	r3
 80171c4:	6823      	ldr	r3, [r4, #0]
 80171c6:	4605      	mov	r5, r0
 80171c8:	4620      	mov	r0, r4
 80171ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80171cc:	4798      	blx	r3
 80171ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80171d2:	b22d      	sxth	r5, r5
 80171d4:	4601      	mov	r1, r0
 80171d6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80171da:	bf06      	itte	eq
 80171dc:	4602      	moveq	r2, r0
 80171de:	4629      	moveq	r1, r5
 80171e0:	462a      	movne	r2, r5
 80171e2:	4620      	mov	r0, r4
 80171e4:	f7ed fd02 	bl	8004bec <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80171e8:	bd38      	pop	{r3, r4, r5, pc}

080171ea <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80171ea:	888a      	ldrh	r2, [r1, #4]
 80171ec:	8582      	strh	r2, [r0, #44]	; 0x2c
 80171ee:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80171f2:	b922      	cbnz	r2, 80171fe <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 80171f4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80171f8:	b90b      	cbnz	r3, 80171fe <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 80171fa:	f7ff bfd9 	b.w	80171b0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80171fe:	4770      	bx	lr

08017200 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017200:	2300      	movs	r3, #0
 8017202:	8083      	strh	r3, [r0, #4]
 8017204:	80c3      	strh	r3, [r0, #6]
 8017206:	8003      	strh	r3, [r0, #0]
 8017208:	8043      	strh	r3, [r0, #2]
 801720a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801720e:	2bff      	cmp	r3, #255	; 0xff
 8017210:	bf01      	itttt	eq
 8017212:	890b      	ldrheq	r3, [r1, #8]
 8017214:	8083      	strheq	r3, [r0, #4]
 8017216:	894b      	ldrheq	r3, [r1, #10]
 8017218:	80c3      	strheq	r3, [r0, #6]
 801721a:	4770      	bx	lr

0801721c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801721c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801721e:	4604      	mov	r4, r0
 8017220:	466b      	mov	r3, sp
 8017222:	6808      	ldr	r0, [r1, #0]
 8017224:	6849      	ldr	r1, [r1, #4]
 8017226:	c303      	stmia	r3!, {r0, r1}
 8017228:	6823      	ldr	r3, [r4, #0]
 801722a:	4669      	mov	r1, sp
 801722c:	4620      	mov	r0, r4
 801722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017230:	4798      	blx	r3
 8017232:	4b08      	ldr	r3, [pc, #32]	; (8017254 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801723a:	b10a      	cbz	r2, 8017240 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801723c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801723e:	b900      	cbnz	r0, 8017242 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017240:	6898      	ldr	r0, [r3, #8]
 8017242:	6803      	ldr	r3, [r0, #0]
 8017244:	4669      	mov	r1, sp
 8017246:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017248:	699d      	ldr	r5, [r3, #24]
 801724a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801724e:	47a8      	blx	r5
 8017250:	b003      	add	sp, #12
 8017252:	bd30      	pop	{r4, r5, pc}
 8017254:	2400aeec 	.word	0x2400aeec

08017258 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801725a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801725e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017260:	4606      	mov	r6, r0
 8017262:	4299      	cmp	r1, r3
 8017264:	d02a      	beq.n	80172bc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8017266:	4b16      	ldr	r3, [pc, #88]	; (80172c0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	b92b      	cbnz	r3, 8017278 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801726c:	4b15      	ldr	r3, [pc, #84]	; (80172c4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801726e:	21ae      	movs	r1, #174	; 0xae
 8017270:	4a15      	ldr	r2, [pc, #84]	; (80172c8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017272:	4816      	ldr	r0, [pc, #88]	; (80172cc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8017274:	f010 faf2 	bl	802785c <__assert_func>
 8017278:	4a15      	ldr	r2, [pc, #84]	; (80172d0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801727a:	8812      	ldrh	r2, [r2, #0]
 801727c:	428a      	cmp	r2, r1
 801727e:	d803      	bhi.n	8017288 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8017280:	4b14      	ldr	r3, [pc, #80]	; (80172d4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8017282:	21af      	movs	r1, #175	; 0xaf
 8017284:	4a10      	ldr	r2, [pc, #64]	; (80172c8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017286:	e7f4      	b.n	8017272 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8017288:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801728c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017290:	4b11      	ldr	r3, [pc, #68]	; (80172d8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8017292:	7854      	ldrb	r4, [r2, #1]
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801729a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801729e:	682b      	ldr	r3, [r5, #0]
 80172a0:	69df      	ldr	r7, [r3, #28]
 80172a2:	4b0e      	ldr	r3, [pc, #56]	; (80172dc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 80172a4:	6818      	ldr	r0, [r3, #0]
 80172a6:	f7ef ff15 	bl	80070d4 <_ZNK8touchgfx5Texts7getTextEt>
 80172aa:	2300      	movs	r3, #0
 80172ac:	4602      	mov	r2, r0
 80172ae:	4621      	mov	r1, r4
 80172b0:	9300      	str	r3, [sp, #0]
 80172b2:	4628      	mov	r0, r5
 80172b4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80172b6:	47b8      	blx	r7
 80172b8:	b003      	add	sp, #12
 80172ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172bc:	2000      	movs	r0, #0
 80172be:	e7fb      	b.n	80172b8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 80172c0:	2400af3c 	.word	0x2400af3c
 80172c4:	0802ab46 	.word	0x0802ab46
 80172c8:	0802ad88 	.word	0x0802ad88
 80172cc:	0802ab88 	.word	0x0802ab88
 80172d0:	2400af40 	.word	0x2400af40
 80172d4:	0802abb1 	.word	0x0802abb1
 80172d8:	2400af44 	.word	0x2400af44
 80172dc:	2400af48 	.word	0x2400af48

080172e0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80172e0:	b570      	push	{r4, r5, r6, lr}
 80172e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80172e6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80172e8:	4604      	mov	r4, r0
 80172ea:	4299      	cmp	r1, r3
 80172ec:	d01e      	beq.n	801732c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 80172ee:	6803      	ldr	r3, [r0, #0]
 80172f0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80172f2:	4b0f      	ldr	r3, [pc, #60]	; (8017330 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	b92b      	cbnz	r3, 8017304 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 80172f8:	4b0e      	ldr	r3, [pc, #56]	; (8017334 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 80172fa:	21ae      	movs	r1, #174	; 0xae
 80172fc:	4a0e      	ldr	r2, [pc, #56]	; (8017338 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80172fe:	480f      	ldr	r0, [pc, #60]	; (801733c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8017300:	f010 faac 	bl	802785c <__assert_func>
 8017304:	4b0e      	ldr	r3, [pc, #56]	; (8017340 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8017306:	881b      	ldrh	r3, [r3, #0]
 8017308:	428b      	cmp	r3, r1
 801730a:	d803      	bhi.n	8017314 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801730c:	4b0d      	ldr	r3, [pc, #52]	; (8017344 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801730e:	21af      	movs	r1, #175	; 0xaf
 8017310:	4a09      	ldr	r2, [pc, #36]	; (8017338 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017312:	e7f4      	b.n	80172fe <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8017314:	4b0c      	ldr	r3, [pc, #48]	; (8017348 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8017316:	6818      	ldr	r0, [r3, #0]
 8017318:	f7ef fedc 	bl	80070d4 <_ZNK8touchgfx5Texts7getTextEt>
 801731c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801731e:	4601      	mov	r1, r0
 8017320:	46ac      	mov	ip, r5
 8017322:	4620      	mov	r0, r4
 8017324:	2300      	movs	r3, #0
 8017326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801732a:	4760      	bx	ip
 801732c:	2000      	movs	r0, #0
 801732e:	bd70      	pop	{r4, r5, r6, pc}
 8017330:	2400af3c 	.word	0x2400af3c
 8017334:	0802ab46 	.word	0x0802ab46
 8017338:	0802ad88 	.word	0x0802ad88
 801733c:	0802ab88 	.word	0x0802ab88
 8017340:	2400af40 	.word	0x2400af40
 8017344:	0802abb1 	.word	0x0802abb1
 8017348:	2400af48 	.word	0x2400af48

0801734c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801734c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017354:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017356:	b08c      	sub	sp, #48	; 0x30
 8017358:	4604      	mov	r4, r0
 801735a:	4293      	cmp	r3, r2
 801735c:	460e      	mov	r6, r1
 801735e:	d05d      	beq.n	801741c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017360:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8017440 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8017364:	f8d8 2000 	ldr.w	r2, [r8]
 8017368:	b92a      	cbnz	r2, 8017376 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801736a:	4b2e      	ldr	r3, [pc, #184]	; (8017424 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801736c:	21ae      	movs	r1, #174	; 0xae
 801736e:	4a2e      	ldr	r2, [pc, #184]	; (8017428 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017370:	482e      	ldr	r0, [pc, #184]	; (801742c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8017372:	f010 fa73 	bl	802785c <__assert_func>
 8017376:	4f2e      	ldr	r7, [pc, #184]	; (8017430 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8017378:	8839      	ldrh	r1, [r7, #0]
 801737a:	4299      	cmp	r1, r3
 801737c:	d803      	bhi.n	8017386 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801737e:	4b2d      	ldr	r3, [pc, #180]	; (8017434 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8017380:	21af      	movs	r1, #175	; 0xaf
 8017382:	4a29      	ldr	r2, [pc, #164]	; (8017428 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017384:	e7f4      	b.n	8017370 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8017386:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801738a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801738e:	4b2a      	ldr	r3, [pc, #168]	; (8017438 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017396:	2a00      	cmp	r2, #0
 8017398:	d040      	beq.n	801741c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801739a:	784b      	ldrb	r3, [r1, #1]
 801739c:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 80173a0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80173a4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80173a8:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80173ac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80173b0:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80173b4:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80173b8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80173bc:	ad05      	add	r5, sp, #20
 80173be:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80173c0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80173c4:	9207      	str	r2, [sp, #28]
 80173c6:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80173ca:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80173ce:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80173d2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80173d6:	f88d a020 	strb.w	sl, [sp, #32]
 80173da:	9009      	str	r0, [sp, #36]	; 0x24
 80173dc:	f7ec fec8 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 80173e0:	4621      	mov	r1, r4
 80173e2:	4681      	mov	r9, r0
 80173e4:	4628      	mov	r0, r5
 80173e6:	f002 fd77 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80173ea:	f8d8 3000 	ldr.w	r3, [r8]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d0bb      	beq.n	801736a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 80173f2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80173f4:	883b      	ldrh	r3, [r7, #0]
 80173f6:	428b      	cmp	r3, r1
 80173f8:	d9c1      	bls.n	801737e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 80173fa:	4b10      	ldr	r3, [pc, #64]	; (801743c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 80173fc:	6818      	ldr	r0, [r3, #0]
 80173fe:	f7ef fe69 	bl	80070d4 <_ZNK8touchgfx5Texts7getTextEt>
 8017402:	2300      	movs	r3, #0
 8017404:	9303      	str	r3, [sp, #12]
 8017406:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017408:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801740c:	ab07      	add	r3, sp, #28
 801740e:	4648      	mov	r0, r9
 8017410:	9300      	str	r3, [sp, #0]
 8017412:	4633      	mov	r3, r6
 8017414:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017418:	f7ef fded 	bl	8006ff6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801741c:	b00c      	add	sp, #48	; 0x30
 801741e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017422:	bf00      	nop
 8017424:	0802ab46 	.word	0x0802ab46
 8017428:	0802ad88 	.word	0x0802ad88
 801742c:	0802ab88 	.word	0x0802ab88
 8017430:	2400af40 	.word	0x2400af40
 8017434:	0802abb1 	.word	0x0802abb1
 8017438:	2400af44 	.word	0x2400af44
 801743c:	2400af48 	.word	0x2400af48
 8017440:	2400af3c 	.word	0x2400af3c

08017444 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8017444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017448:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801744a:	4604      	mov	r4, r0
 801744c:	460e      	mov	r6, r1
 801744e:	b08e      	sub	sp, #56	; 0x38
 8017450:	b218      	sxth	r0, r3
 8017452:	8921      	ldrh	r1, [r4, #8]
 8017454:	005b      	lsls	r3, r3, #1
 8017456:	8962      	ldrh	r2, [r4, #10]
 8017458:	f8ad 0000 	strh.w	r0, [sp]
 801745c:	b29b      	uxth	r3, r3
 801745e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8017462:	1ac9      	subs	r1, r1, r3
 8017464:	1ad3      	subs	r3, r2, r3
 8017466:	b209      	sxth	r1, r1
 8017468:	b21b      	sxth	r3, r3
 801746a:	2900      	cmp	r1, #0
 801746c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017470:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017474:	dd5e      	ble.n	8017534 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8017476:	2b00      	cmp	r3, #0
 8017478:	dd5c      	ble.n	8017534 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801747a:	6830      	ldr	r0, [r6, #0]
 801747c:	ab02      	add	r3, sp, #8
 801747e:	6871      	ldr	r1, [r6, #4]
 8017480:	c303      	stmia	r3!, {r0, r1}
 8017482:	4669      	mov	r1, sp
 8017484:	a802      	add	r0, sp, #8
 8017486:	f7fd fdaf 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801748a:	4620      	mov	r0, r4
 801748c:	a902      	add	r1, sp, #8
 801748e:	f7ff fec5 	bl	801721c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8017492:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8017494:	2800      	cmp	r0, #0
 8017496:	d05f      	beq.n	8017558 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8017498:	8963      	ldrh	r3, [r4, #10]
 801749a:	b202      	sxth	r2, r0
 801749c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80174a0:	2500      	movs	r5, #0
 80174a2:	1a1f      	subs	r7, r3, r0
 80174a4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80174a8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80174ac:	b21b      	sxth	r3, r3
 80174ae:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80174b2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80174b6:	af04      	add	r7, sp, #16
 80174b8:	1a09      	subs	r1, r1, r0
 80174ba:	9506      	str	r5, [sp, #24]
 80174bc:	f8ad 201e 	strh.w	r2, [sp, #30]
 80174c0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80174c4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80174c8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80174cc:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80174d0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80174d4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80174d8:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80174dc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80174e0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80174e4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80174e8:	ab06      	add	r3, sp, #24
 80174ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80174ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80174f2:	e887 0003 	stmia.w	r7, {r0, r1}
 80174f6:	4631      	mov	r1, r6
 80174f8:	4638      	mov	r0, r7
 80174fa:	f7fd fd75 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 80174fe:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017502:	2b00      	cmp	r3, #0
 8017504:	dd12      	ble.n	801752c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8017506:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801750a:	2b00      	cmp	r3, #0
 801750c:	dd0e      	ble.n	801752c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801750e:	6823      	ldr	r3, [r4, #0]
 8017510:	4639      	mov	r1, r7
 8017512:	4620      	mov	r0, r4
 8017514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017516:	4798      	blx	r3
 8017518:	f7ec fe2a 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 801751c:	6803      	ldr	r3, [r0, #0]
 801751e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017520:	4639      	mov	r1, r7
 8017522:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017526:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801752a:	47c0      	blx	r8
 801752c:	3501      	adds	r5, #1
 801752e:	2d04      	cmp	r5, #4
 8017530:	d1da      	bne.n	80174e8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8017532:	e011      	b.n	8017558 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8017534:	6830      	ldr	r0, [r6, #0]
 8017536:	ab06      	add	r3, sp, #24
 8017538:	6871      	ldr	r1, [r6, #4]
 801753a:	c303      	stmia	r3!, {r0, r1}
 801753c:	6823      	ldr	r3, [r4, #0]
 801753e:	a906      	add	r1, sp, #24
 8017540:	4620      	mov	r0, r4
 8017542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017544:	4798      	blx	r3
 8017546:	f7ec fe13 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 801754a:	6803      	ldr	r3, [r0, #0]
 801754c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801754e:	a906      	add	r1, sp, #24
 8017550:	699d      	ldr	r5, [r3, #24]
 8017552:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017556:	47a8      	blx	r5
 8017558:	b00e      	add	sp, #56	; 0x38
 801755a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801755e <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801755e:	b510      	push	{r4, lr}
 8017560:	6803      	ldr	r3, [r0, #0]
 8017562:	460c      	mov	r4, r1
 8017564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017566:	4798      	blx	r3
 8017568:	1b03      	subs	r3, r0, r4
 801756a:	4258      	negs	r0, r3
 801756c:	4158      	adcs	r0, r3
 801756e:	bd10      	pop	{r4, pc}

08017570 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017570:	4b01      	ldr	r3, [pc, #4]	; (8017578 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8017572:	6019      	str	r1, [r3, #0]
 8017574:	4770      	bx	lr
 8017576:	bf00      	nop
 8017578:	2400aef4 	.word	0x2400aef4

0801757c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801757c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017580:	4696      	mov	lr, r2
 8017582:	b097      	sub	sp, #92	; 0x5c
 8017584:	4605      	mov	r5, r0
 8017586:	4614      	mov	r4, r2
 8017588:	460e      	mov	r6, r1
 801758a:	461f      	mov	r7, r3
 801758c:	f10d 0c1c 	add.w	ip, sp, #28
 8017590:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017594:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017598:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801759c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80175a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175a4:	f8de 3000 	ldr.w	r3, [lr]
 80175a8:	f104 0e14 	add.w	lr, r4, #20
 80175ac:	f8cc 3000 	str.w	r3, [ip]
 80175b0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80175b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80175b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175bc:	f8de 3000 	ldr.w	r3, [lr]
 80175c0:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80175c4:	f8cc 3000 	str.w	r3, [ip]
 80175c8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80175cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80175d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175d4:	f8de 3000 	ldr.w	r3, [lr]
 80175d8:	4631      	mov	r1, r6
 80175da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80175dc:	4628      	mov	r0, r5
 80175de:	f8cc 3000 	str.w	r3, [ip]
 80175e2:	682b      	ldr	r3, [r5, #0]
 80175e4:	9201      	str	r2, [sp, #4]
 80175e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80175e8:	f8cd 8008 	str.w	r8, [sp, #8]
 80175ec:	9200      	str	r2, [sp, #0]
 80175ee:	aa07      	add	r2, sp, #28
 80175f0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80175f4:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 80175f8:	463b      	mov	r3, r7
 80175fa:	47d8      	blx	fp
 80175fc:	46a6      	mov	lr, r4
 80175fe:	f10d 0c1c 	add.w	ip, sp, #28
 8017602:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017606:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801760a:	f8de 3000 	ldr.w	r3, [lr]
 801760e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017612:	343c      	adds	r4, #60	; 0x3c
 8017614:	f8cc 3000 	str.w	r3, [ip]
 8017618:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801761c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017620:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017624:	f8de 3000 	ldr.w	r3, [lr]
 8017628:	f8cc 3000 	str.w	r3, [ip]
 801762c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017632:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017636:	6823      	ldr	r3, [r4, #0]
 8017638:	4631      	mov	r1, r6
 801763a:	4628      	mov	r0, r5
 801763c:	f8cc 3000 	str.w	r3, [ip]
 8017640:	682b      	ldr	r3, [r5, #0]
 8017642:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017646:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017648:	f8cd 8008 	str.w	r8, [sp, #8]
 801764c:	9201      	str	r2, [sp, #4]
 801764e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017650:	9200      	str	r2, [sp, #0]
 8017652:	aa07      	add	r2, sp, #28
 8017654:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8017656:	463b      	mov	r3, r7
 8017658:	47a0      	blx	r4
 801765a:	b017      	add	sp, #92	; 0x5c
 801765c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017660 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017660:	2000      	movs	r0, #0
 8017662:	4770      	bx	lr

08017664 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017668:	b08d      	sub	sp, #52	; 0x34
 801766a:	4688      	mov	r8, r1
 801766c:	f8d3 c000 	ldr.w	ip, [r3]
 8017670:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017672:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8017676:	680f      	ldr	r7, [r1, #0]
 8017678:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801767c:	eba7 070c 	sub.w	r7, r7, ip
 8017680:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8017684:	edd3 6a07 	vldr	s13, [r3, #28]
 8017688:	42bc      	cmp	r4, r7
 801768a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801768c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8017690:	bfa8      	it	ge
 8017692:	463c      	movge	r4, r7
 8017694:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017698:	f9ba 1000 	ldrsh.w	r1, [sl]
 801769c:	ee07 4a90 	vmov	s15, r4
 80176a0:	eb09 0e0c 	add.w	lr, r9, ip
 80176a4:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80176a8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80176ac:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80176b0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80176b4:	4571      	cmp	r1, lr
 80176b6:	ee25 4a04 	vmul.f32	s8, s10, s8
 80176ba:	ee65 4a24 	vmul.f32	s9, s10, s9
 80176be:	ee25 5a27 	vmul.f32	s10, s10, s15
 80176c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80176c6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80176ca:	ee32 1a05 	vadd.f32	s2, s4, s10
 80176ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80176d2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80176d6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80176da:	ee22 2a07 	vmul.f32	s4, s4, s14
 80176de:	f340 808c 	ble.w	80177fa <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80176e2:	eba1 060e 	sub.w	r6, r1, lr
 80176e6:	fb96 f5f4 	sdiv	r5, r6, r4
 80176ea:	ee07 5a10 	vmov	s14, r5
 80176ee:	2d00      	cmp	r5, #0
 80176f0:	fb04 6615 	mls	r6, r4, r5, r6
 80176f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80176f8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80176fc:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017700:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017704:	dd12      	ble.n	801772c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8017706:	ee70 6a44 	vsub.f32	s13, s0, s8
 801770a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801770e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017712:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801771a:	bf14      	ite	ne
 801771c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017720:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017724:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017728:	ee22 2a07 	vmul.f32	s4, s4, s14
 801772c:	fb05 f204 	mul.w	r2, r5, r4
 8017730:	1abf      	subs	r7, r7, r2
 8017732:	4494      	add	ip, r2
 8017734:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8017738:	4411      	add	r1, r2
 801773a:	eb09 020c 	add.w	r2, r9, ip
 801773e:	b209      	sxth	r1, r1
 8017740:	443a      	add	r2, r7
 8017742:	428a      	cmp	r2, r1
 8017744:	bfc4      	itt	gt
 8017746:	eba1 0209 	subgt.w	r2, r1, r9
 801774a:	eba2 070c 	subgt.w	r7, r2, ip
 801774e:	2f00      	cmp	r7, #0
 8017750:	dd50      	ble.n	80177f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8017752:	fb97 f1f4 	sdiv	r1, r7, r4
 8017756:	fb04 7211 	mls	r2, r4, r1, r7
 801775a:	b90a      	cbnz	r2, 8017760 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801775c:	3901      	subs	r1, #1
 801775e:	4622      	mov	r2, r4
 8017760:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017764:	6840      	ldr	r0, [r0, #4]
 8017766:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801776a:	44b6      	add	lr, r6
 801776c:	f8d0 a000 	ldr.w	sl, [r0]
 8017770:	2900      	cmp	r1, #0
 8017772:	bfcc      	ite	gt
 8017774:	46a1      	movgt	r9, r4
 8017776:	4691      	movle	r9, r2
 8017778:	900b      	str	r0, [sp, #44]	; 0x2c
 801777a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801777c:	fb04 e505 	mla	r5, r4, r5, lr
 8017780:	eef0 6a42 	vmov.f32	s13, s4
 8017784:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017788:	9008      	str	r0, [sp, #32]
 801778a:	eeb0 7a61 	vmov.f32	s14, s3
 801778e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017790:	695b      	ldr	r3, [r3, #20]
 8017792:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017796:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801779a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801779e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80177a0:	445b      	add	r3, fp
 80177a2:	9307      	str	r3, [sp, #28]
 80177a4:	ee16 3a90 	vmov	r3, s13
 80177a8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80177ac:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80177b0:	ee21 3a23 	vmul.f32	s6, s2, s7
 80177b4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80177b8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80177bc:	ee17 7a90 	vmov	r7, s15
 80177c0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80177c4:	fb97 f7f4 	sdiv	r7, r7, r4
 80177c8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80177cc:	ee17 ca90 	vmov	ip, s15
 80177d0:	fb9c fcf4 	sdiv	ip, ip, r4
 80177d4:	fb0c 3306 	mla	r3, ip, r6, r3
 80177d8:	9302      	str	r3, [sp, #8]
 80177da:	ee17 3a10 	vmov	r3, s14
 80177de:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80177e2:	fb07 3706 	mla	r7, r7, r6, r3
 80177e6:	eba9 0306 	sub.w	r3, r9, r6
 80177ea:	e9cd 4700 	strd	r4, r7, [sp]
 80177ee:	f8da 4008 	ldr.w	r4, [sl, #8]
 80177f2:	47a0      	blx	r4
 80177f4:	b00d      	add	sp, #52	; 0x34
 80177f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177fa:	2500      	movs	r5, #0
 80177fc:	462e      	mov	r6, r5
 80177fe:	e799      	b.n	8017734 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08017800 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017804:	b0db      	sub	sp, #364	; 0x16c
 8017806:	461d      	mov	r5, r3
 8017808:	4614      	mov	r4, r2
 801780a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801780e:	910f      	str	r1, [sp, #60]	; 0x3c
 8017810:	4629      	mov	r1, r5
 8017812:	930a      	str	r3, [sp, #40]	; 0x28
 8017814:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8017818:	9009      	str	r0, [sp, #36]	; 0x24
 801781a:	930b      	str	r3, [sp, #44]	; 0x2c
 801781c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8017820:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8017824:	9310      	str	r3, [sp, #64]	; 0x40
 8017826:	6803      	ldr	r3, [r0, #0]
 8017828:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801782a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801782e:	47b8      	blx	r7
 8017830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017832:	6058      	str	r0, [r3, #4]
 8017834:	2800      	cmp	r0, #0
 8017836:	f000 83a1 	beq.w	8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801783a:	682b      	ldr	r3, [r5, #0]
 801783c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017840:	ed94 7a02 	vldr	s14, [r4, #8]
 8017844:	9314      	str	r3, [sp, #80]	; 0x50
 8017846:	686b      	ldr	r3, [r5, #4]
 8017848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801784c:	9315      	str	r3, [sp, #84]	; 0x54
 801784e:	4bc1      	ldr	r3, [pc, #772]	; (8017b54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8017850:	7819      	ldrb	r1, [r3, #0]
 8017852:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8017856:	2900      	cmp	r1, #0
 8017858:	bf16      	itet	ne
 801785a:	4619      	movne	r1, r3
 801785c:	4611      	moveq	r1, r2
 801785e:	4613      	movne	r3, r2
 8017860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017864:	9116      	str	r1, [sp, #88]	; 0x58
 8017866:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801786a:	f240 8387 	bls.w	8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801786e:	ed94 7a07 	vldr	s14, [r4, #28]
 8017872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801787a:	f240 837f 	bls.w	8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801787e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8017882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801788a:	f240 8377 	bls.w	8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801788e:	6822      	ldr	r2, [r4, #0]
 8017890:	4bb1      	ldr	r3, [pc, #708]	; (8017b58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8017892:	429a      	cmp	r2, r3
 8017894:	f2c0 8372 	blt.w	8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017898:	49b0      	ldr	r1, [pc, #704]	; (8017b5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801789a:	6963      	ldr	r3, [r4, #20]
 801789c:	428a      	cmp	r2, r1
 801789e:	f300 836d 	bgt.w	8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80178a2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80178a6:	48ae      	ldr	r0, [pc, #696]	; (8017b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80178a8:	33ff      	adds	r3, #255	; 0xff
 80178aa:	4283      	cmp	r3, r0
 80178ac:	f200 8366 	bhi.w	8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80178b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80178b2:	4dac      	ldr	r5, [pc, #688]	; (8017b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80178b4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80178b8:	33ff      	adds	r3, #255	; 0xff
 80178ba:	42ab      	cmp	r3, r5
 80178bc:	f200 835e 	bhi.w	8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80178c0:	6862      	ldr	r2, [r4, #4]
 80178c2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80178c6:	33ff      	adds	r3, #255	; 0xff
 80178c8:	4283      	cmp	r3, r0
 80178ca:	f200 8357 	bhi.w	8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80178ce:	69a1      	ldr	r1, [r4, #24]
 80178d0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80178d4:	33ff      	adds	r3, #255	; 0xff
 80178d6:	4283      	cmp	r3, r0
 80178d8:	f200 8350 	bhi.w	8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80178dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80178de:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80178e2:	30ff      	adds	r0, #255	; 0xff
 80178e4:	42a8      	cmp	r0, r5
 80178e6:	f200 8349 	bhi.w	8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80178ea:	428a      	cmp	r2, r1
 80178ec:	f280 8110 	bge.w	8017b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80178f0:	429a      	cmp	r2, r3
 80178f2:	f300 8119 	bgt.w	8017b28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80178f6:	4299      	cmp	r1, r3
 80178f8:	f280 811d 	bge.w	8017b36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80178fc:	2502      	movs	r5, #2
 80178fe:	2701      	movs	r7, #1
 8017900:	46a9      	mov	r9, r5
 8017902:	46b8      	mov	r8, r7
 8017904:	f04f 0a00 	mov.w	sl, #0
 8017908:	4621      	mov	r1, r4
 801790a:	a849      	add	r0, sp, #292	; 0x124
 801790c:	f003 fc82 	bl	801b214 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017910:	4622      	mov	r2, r4
 8017912:	4653      	mov	r3, sl
 8017914:	a949      	add	r1, sp, #292	; 0x124
 8017916:	f8cd 9000 	str.w	r9, [sp]
 801791a:	a819      	add	r0, sp, #100	; 0x64
 801791c:	f003 fdaa 	bl	801b474 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017920:	4622      	mov	r2, r4
 8017922:	4653      	mov	r3, sl
 8017924:	a949      	add	r1, sp, #292	; 0x124
 8017926:	f8cd 8000 	str.w	r8, [sp]
 801792a:	a829      	add	r0, sp, #164	; 0xa4
 801792c:	f003 fda2 	bl	801b474 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017930:	4643      	mov	r3, r8
 8017932:	4622      	mov	r2, r4
 8017934:	a949      	add	r1, sp, #292	; 0x124
 8017936:	f8cd 9000 	str.w	r9, [sp]
 801793a:	a839      	add	r0, sp, #228	; 0xe4
 801793c:	f003 fd9a 	bl	801b474 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017940:	42af      	cmp	r7, r5
 8017942:	af12      	add	r7, sp, #72	; 0x48
 8017944:	bfb7      	itett	lt
 8017946:	2300      	movlt	r3, #0
 8017948:	2301      	movge	r3, #1
 801794a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801794c:	ac19      	addlt	r4, sp, #100	; 0x64
 801794e:	bfb1      	iteee	lt
 8017950:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017952:	ad19      	addge	r5, sp, #100	; 0x64
 8017954:	930e      	strge	r3, [sp, #56]	; 0x38
 8017956:	ac29      	addge	r4, sp, #164	; 0xa4
 8017958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801795a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801795e:	e887 0003 	stmia.w	r7, {r0, r1}
 8017962:	b928      	cbnz	r0, 8017970 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8017964:	4b80      	ldr	r3, [pc, #512]	; (8017b68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8017966:	6818      	ldr	r0, [r3, #0]
 8017968:	6803      	ldr	r3, [r0, #0]
 801796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801796c:	4798      	blx	r3
 801796e:	6038      	str	r0, [r7, #0]
 8017970:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017972:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017976:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801797a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801797c:	930c      	str	r3, [sp, #48]	; 0x30
 801797e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017980:	6963      	ldr	r3, [r4, #20]
 8017982:	440b      	add	r3, r1
 8017984:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017988:	4408      	add	r0, r1
 801798a:	b200      	sxth	r0, r0
 801798c:	4283      	cmp	r3, r0
 801798e:	900d      	str	r0, [sp, #52]	; 0x34
 8017990:	f280 80dd 	bge.w	8017b4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8017994:	428b      	cmp	r3, r1
 8017996:	da08      	bge.n	80179aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017998:	2a00      	cmp	r2, #0
 801799a:	dd06      	ble.n	80179aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801799c:	1acb      	subs	r3, r1, r3
 801799e:	429a      	cmp	r2, r3
 80179a0:	f2c0 80e4 	blt.w	8017b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	f300 80e2 	bgt.w	8017b6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80179aa:	6967      	ldr	r7, [r4, #20]
 80179ac:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80179b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80179b2:	443b      	add	r3, r7
 80179b4:	461f      	mov	r7, r3
 80179b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179b8:	1bdf      	subs	r7, r3, r7
 80179ba:	4297      	cmp	r7, r2
 80179bc:	bfa8      	it	ge
 80179be:	4617      	movge	r7, r2
 80179c0:	2f00      	cmp	r7, #0
 80179c2:	f340 8166 	ble.w	8017c92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80179c6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80179c8:	6829      	ldr	r1, [r5, #0]
 80179ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80179ce:	f9bb 3000 	ldrsh.w	r3, [fp]
 80179d2:	4411      	add	r1, r2
 80179d4:	6820      	ldr	r0, [r4, #0]
 80179d6:	4299      	cmp	r1, r3
 80179d8:	dd1a      	ble.n	8017a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80179da:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80179de:	4402      	add	r2, r0
 80179e0:	440b      	add	r3, r1
 80179e2:	b21b      	sxth	r3, r3
 80179e4:	429a      	cmp	r2, r3
 80179e6:	dc13      	bgt.n	8017a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80179e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80179ea:	a912      	add	r1, sp, #72	; 0x48
 80179ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	9206      	str	r2, [sp, #24]
 80179f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80179f6:	9500      	str	r5, [sp, #0]
 80179f8:	9205      	str	r2, [sp, #20]
 80179fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179fc:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017a00:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017a02:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017a06:	aa49      	add	r2, sp, #292	; 0x124
 8017a08:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8017a0c:	4623      	mov	r3, r4
 8017a0e:	47c8      	blx	r9
 8017a10:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017a14:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017a18:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017a1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a20:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017a24:	68a1      	ldr	r1, [r4, #8]
 8017a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017a2a:	ed94 6a08 	vldr	s12, [r4, #32]
 8017a2e:	edd4 6a07 	vldr	s13, [r4, #28]
 8017a32:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017a36:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017a3a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017a3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017a42:	edc4 6a07 	vstr	s13, [r4, #28]
 8017a46:	441a      	add	r2, r3
 8017a48:	6963      	ldr	r3, [r4, #20]
 8017a4a:	3301      	adds	r3, #1
 8017a4c:	6022      	str	r2, [r4, #0]
 8017a4e:	6163      	str	r3, [r4, #20]
 8017a50:	69a3      	ldr	r3, [r4, #24]
 8017a52:	3b01      	subs	r3, #1
 8017a54:	61a3      	str	r3, [r4, #24]
 8017a56:	6923      	ldr	r3, [r4, #16]
 8017a58:	440b      	add	r3, r1
 8017a5a:	68e1      	ldr	r1, [r4, #12]
 8017a5c:	428b      	cmp	r3, r1
 8017a5e:	6123      	str	r3, [r4, #16]
 8017a60:	db15      	blt.n	8017a8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8017a62:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017a66:	3201      	adds	r2, #1
 8017a68:	1a5b      	subs	r3, r3, r1
 8017a6a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017a6e:	6022      	str	r2, [r4, #0]
 8017a70:	6123      	str	r3, [r4, #16]
 8017a72:	edc4 6a07 	vstr	s13, [r4, #28]
 8017a76:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017a7a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017a7e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017a82:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a8a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017a8e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017a92:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017a96:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017a9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a9e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017aa2:	68a9      	ldr	r1, [r5, #8]
 8017aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017aa8:	ed95 6a08 	vldr	s12, [r5, #32]
 8017aac:	edd5 6a07 	vldr	s13, [r5, #28]
 8017ab0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017ab4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017ab8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017abc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017ac0:	edc5 6a07 	vstr	s13, [r5, #28]
 8017ac4:	441a      	add	r2, r3
 8017ac6:	696b      	ldr	r3, [r5, #20]
 8017ac8:	3301      	adds	r3, #1
 8017aca:	602a      	str	r2, [r5, #0]
 8017acc:	616b      	str	r3, [r5, #20]
 8017ace:	69ab      	ldr	r3, [r5, #24]
 8017ad0:	3b01      	subs	r3, #1
 8017ad2:	61ab      	str	r3, [r5, #24]
 8017ad4:	692b      	ldr	r3, [r5, #16]
 8017ad6:	440b      	add	r3, r1
 8017ad8:	68e9      	ldr	r1, [r5, #12]
 8017ada:	428b      	cmp	r3, r1
 8017adc:	612b      	str	r3, [r5, #16]
 8017ade:	db15      	blt.n	8017b0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8017ae0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017ae4:	3201      	adds	r2, #1
 8017ae6:	1a5b      	subs	r3, r3, r1
 8017ae8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017aec:	602a      	str	r2, [r5, #0]
 8017aee:	612b      	str	r3, [r5, #16]
 8017af0:	edc5 6a07 	vstr	s13, [r5, #28]
 8017af4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017af8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017afc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017b00:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b08:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017b0c:	3f01      	subs	r7, #1
 8017b0e:	e757      	b.n	80179c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017b10:	4299      	cmp	r1, r3
 8017b12:	dc13      	bgt.n	8017b3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8017b14:	429a      	cmp	r2, r3
 8017b16:	da14      	bge.n	8017b42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8017b18:	2502      	movs	r5, #2
 8017b1a:	2703      	movs	r7, #3
 8017b1c:	f04f 0800 	mov.w	r8, #0
 8017b20:	46a9      	mov	r9, r5
 8017b22:	f04f 0a01 	mov.w	sl, #1
 8017b26:	e6ef      	b.n	8017908 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017b28:	2501      	movs	r5, #1
 8017b2a:	2700      	movs	r7, #0
 8017b2c:	46a9      	mov	r9, r5
 8017b2e:	46b8      	mov	r8, r7
 8017b30:	f04f 0a02 	mov.w	sl, #2
 8017b34:	e6e8      	b.n	8017908 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017b36:	2501      	movs	r5, #1
 8017b38:	2702      	movs	r7, #2
 8017b3a:	e6e1      	b.n	8017900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8017b3c:	2500      	movs	r5, #0
 8017b3e:	2701      	movs	r7, #1
 8017b40:	e7f4      	b.n	8017b2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8017b42:	2702      	movs	r7, #2
 8017b44:	2503      	movs	r5, #3
 8017b46:	f04f 0900 	mov.w	r9, #0
 8017b4a:	46b8      	mov	r8, r7
 8017b4c:	e7e9      	b.n	8017b22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8017b4e:	4613      	mov	r3, r2
 8017b50:	e728      	b.n	80179a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8017b52:	bf00      	nop
 8017b54:	2400aee4 	.word	0x2400aee4
 8017b58:	fffd8f01 	.word	0xfffd8f01
 8017b5c:	00027100 	.word	0x00027100
 8017b60:	0004e1ff 	.word	0x0004e1ff
 8017b64:	0004e1fe 	.word	0x0004e1fe
 8017b68:	2400aeec 	.word	0x2400aeec
 8017b6c:	4613      	mov	r3, r2
 8017b6e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017b70:	469e      	mov	lr, r3
 8017b72:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8017b74:	469c      	mov	ip, r3
 8017b76:	9111      	str	r1, [sp, #68]	; 0x44
 8017b78:	f04f 0900 	mov.w	r9, #0
 8017b7c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8017b80:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8017b84:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8017b88:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8017b8c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8017b90:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017b94:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8017b98:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8017b9c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8017ba0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8017ba4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8017ba8:	f1bc 0f00 	cmp.w	ip, #0
 8017bac:	d147      	bne.n	8017c3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8017bae:	eb03 0c07 	add.w	ip, r3, r7
 8017bb2:	1ad7      	subs	r7, r2, r3
 8017bb4:	f1b9 0f00 	cmp.w	r9, #0
 8017bb8:	d009      	beq.n	8017bce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8017bba:	9029      	str	r0, [sp, #164]	; 0xa4
 8017bbc:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8017bc0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8017bc4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8017bc8:	912d      	str	r1, [sp, #180]	; 0xb4
 8017bca:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8017bce:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017bd0:	f04f 0800 	mov.w	r8, #0
 8017bd4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017bd8:	9111      	str	r1, [sp, #68]	; 0x44
 8017bda:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017bde:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017be2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017be6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017bea:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017bee:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017bf2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017bf6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017bfa:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017bfe:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017c02:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017c06:	f1be 0f00 	cmp.w	lr, #0
 8017c0a:	d031      	beq.n	8017c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017c0c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017c0e:	4450      	add	r0, sl
 8017c10:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017c14:	4431      	add	r1, r6
 8017c16:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017c1a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017c1e:	4549      	cmp	r1, r9
 8017c20:	db08      	blt.n	8017c34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8017c22:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017c26:	3001      	adds	r0, #1
 8017c28:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017c2c:	eba1 0109 	sub.w	r1, r1, r9
 8017c30:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017c34:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017c38:	f04f 0801 	mov.w	r8, #1
 8017c3c:	e7e3      	b.n	8017c06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8017c3e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017c40:	4450      	add	r0, sl
 8017c42:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017c46:	4431      	add	r1, r6
 8017c48:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017c4c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017c50:	4541      	cmp	r1, r8
 8017c52:	db08      	blt.n	8017c66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8017c54:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017c58:	3001      	adds	r0, #1
 8017c5a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017c5e:	eba1 0108 	sub.w	r1, r1, r8
 8017c62:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017c66:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017c6a:	f04f 0901 	mov.w	r9, #1
 8017c6e:	e79b      	b.n	8017ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017c70:	449c      	add	ip, r3
 8017c72:	1aff      	subs	r7, r7, r3
 8017c74:	f1b8 0f00 	cmp.w	r8, #0
 8017c78:	d009      	beq.n	8017c8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8017c7a:	9019      	str	r0, [sp, #100]	; 0x64
 8017c7c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017c80:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017c84:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017c88:	911d      	str	r1, [sp, #116]	; 0x74
 8017c8a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017c8e:	1ad2      	subs	r2, r2, r3
 8017c90:	e68b      	b.n	80179aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c94:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	f000 80d1 	beq.w	8017e3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017c9c:	ad19      	add	r5, sp, #100	; 0x64
 8017c9e:	ac39      	add	r4, sp, #228	; 0xe4
 8017ca0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017ca2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017ca6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017caa:	930c      	str	r3, [sp, #48]	; 0x30
 8017cac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017cae:	6963      	ldr	r3, [r4, #20]
 8017cb0:	440b      	add	r3, r1
 8017cb2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017cb6:	4408      	add	r0, r1
 8017cb8:	b200      	sxth	r0, r0
 8017cba:	4283      	cmp	r3, r0
 8017cbc:	900d      	str	r0, [sp, #52]	; 0x34
 8017cbe:	f280 80c1 	bge.w	8017e44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8017cc2:	428b      	cmp	r3, r1
 8017cc4:	da08      	bge.n	8017cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017cc6:	2a00      	cmp	r2, #0
 8017cc8:	dd06      	ble.n	8017cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017cca:	1acb      	subs	r3, r1, r3
 8017ccc:	429a      	cmp	r2, r3
 8017cce:	f2c0 80bb 	blt.w	8017e48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	f300 80b9 	bgt.w	8017e4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017cd8:	6967      	ldr	r7, [r4, #20]
 8017cda:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ce0:	443b      	add	r3, r7
 8017ce2:	461f      	mov	r7, r3
 8017ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ce6:	1bdf      	subs	r7, r3, r7
 8017ce8:	4297      	cmp	r7, r2
 8017cea:	bfa8      	it	ge
 8017cec:	4617      	movge	r7, r2
 8017cee:	2f00      	cmp	r7, #0
 8017cf0:	f340 813c 	ble.w	8017f6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8017cf4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017cf6:	6829      	ldr	r1, [r5, #0]
 8017cf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017cfc:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017d00:	4411      	add	r1, r2
 8017d02:	6820      	ldr	r0, [r4, #0]
 8017d04:	4299      	cmp	r1, r3
 8017d06:	dd1a      	ble.n	8017d3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017d08:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017d0c:	4402      	add	r2, r0
 8017d0e:	440b      	add	r3, r1
 8017d10:	b21b      	sxth	r3, r3
 8017d12:	429a      	cmp	r2, r3
 8017d14:	dc13      	bgt.n	8017d3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017d16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017d18:	a912      	add	r1, sp, #72	; 0x48
 8017d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	9206      	str	r2, [sp, #24]
 8017d22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017d24:	9500      	str	r5, [sp, #0]
 8017d26:	9205      	str	r2, [sp, #20]
 8017d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d2a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017d2e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017d30:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017d34:	aa49      	add	r2, sp, #292	; 0x124
 8017d36:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8017d3a:	4623      	mov	r3, r4
 8017d3c:	47c8      	blx	r9
 8017d3e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017d42:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017d46:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017d4e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017d52:	68a1      	ldr	r1, [r4, #8]
 8017d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017d58:	ed94 6a08 	vldr	s12, [r4, #32]
 8017d5c:	edd4 6a07 	vldr	s13, [r4, #28]
 8017d60:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017d64:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017d68:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017d6c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017d70:	edc4 6a07 	vstr	s13, [r4, #28]
 8017d74:	441a      	add	r2, r3
 8017d76:	6963      	ldr	r3, [r4, #20]
 8017d78:	3301      	adds	r3, #1
 8017d7a:	6022      	str	r2, [r4, #0]
 8017d7c:	6163      	str	r3, [r4, #20]
 8017d7e:	69a3      	ldr	r3, [r4, #24]
 8017d80:	3b01      	subs	r3, #1
 8017d82:	61a3      	str	r3, [r4, #24]
 8017d84:	6923      	ldr	r3, [r4, #16]
 8017d86:	440b      	add	r3, r1
 8017d88:	68e1      	ldr	r1, [r4, #12]
 8017d8a:	428b      	cmp	r3, r1
 8017d8c:	6123      	str	r3, [r4, #16]
 8017d8e:	db15      	blt.n	8017dbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017d90:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017d94:	3201      	adds	r2, #1
 8017d96:	1a5b      	subs	r3, r3, r1
 8017d98:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017d9c:	6022      	str	r2, [r4, #0]
 8017d9e:	6123      	str	r3, [r4, #16]
 8017da0:	edc4 6a07 	vstr	s13, [r4, #28]
 8017da4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017da8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017dac:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017db0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017db8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017dbc:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017dc0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017dc4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017dcc:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017dd0:	68a9      	ldr	r1, [r5, #8]
 8017dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017dd6:	ed95 6a08 	vldr	s12, [r5, #32]
 8017dda:	edd5 6a07 	vldr	s13, [r5, #28]
 8017dde:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017de2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017de6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017dea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017dee:	edc5 6a07 	vstr	s13, [r5, #28]
 8017df2:	441a      	add	r2, r3
 8017df4:	696b      	ldr	r3, [r5, #20]
 8017df6:	3301      	adds	r3, #1
 8017df8:	602a      	str	r2, [r5, #0]
 8017dfa:	616b      	str	r3, [r5, #20]
 8017dfc:	69ab      	ldr	r3, [r5, #24]
 8017dfe:	3b01      	subs	r3, #1
 8017e00:	61ab      	str	r3, [r5, #24]
 8017e02:	692b      	ldr	r3, [r5, #16]
 8017e04:	440b      	add	r3, r1
 8017e06:	68e9      	ldr	r1, [r5, #12]
 8017e08:	428b      	cmp	r3, r1
 8017e0a:	612b      	str	r3, [r5, #16]
 8017e0c:	db15      	blt.n	8017e3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8017e0e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017e12:	3201      	adds	r2, #1
 8017e14:	1a5b      	subs	r3, r3, r1
 8017e16:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017e1a:	602a      	str	r2, [r5, #0]
 8017e1c:	612b      	str	r3, [r5, #16]
 8017e1e:	edc5 6a07 	vstr	s13, [r5, #28]
 8017e22:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017e26:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017e2a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017e2e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017e36:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017e3a:	3f01      	subs	r7, #1
 8017e3c:	e757      	b.n	8017cee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8017e3e:	ad39      	add	r5, sp, #228	; 0xe4
 8017e40:	ac19      	add	r4, sp, #100	; 0x64
 8017e42:	e72d      	b.n	8017ca0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017e44:	4613      	mov	r3, r2
 8017e46:	e744      	b.n	8017cd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017e48:	4613      	mov	r3, r2
 8017e4a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8017e4c:	469e      	mov	lr, r3
 8017e4e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8017e52:	461f      	mov	r7, r3
 8017e54:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8017e58:	f04f 0900 	mov.w	r9, #0
 8017e5c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8017e60:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8017e64:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8017e68:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8017e6c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8017e70:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8017e72:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8017e76:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8017e7a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8017e7e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8017e82:	960e      	str	r6, [sp, #56]	; 0x38
 8017e84:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8017e88:	2f00      	cmp	r7, #0
 8017e8a:	d146      	bne.n	8017f1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017e8c:	449c      	add	ip, r3
 8017e8e:	1ad7      	subs	r7, r2, r3
 8017e90:	f1b9 0f00 	cmp.w	r9, #0
 8017e94:	d009      	beq.n	8017eaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8017e96:	9039      	str	r0, [sp, #228]	; 0xe4
 8017e98:	913d      	str	r1, [sp, #244]	; 0xf4
 8017e9a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8017e9e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8017ea2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8017ea6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017eaa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017eac:	f04f 0800 	mov.w	r8, #0
 8017eb0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017eb4:	910e      	str	r1, [sp, #56]	; 0x38
 8017eb6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017eba:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017ebe:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017ec2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017ec6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017eca:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017ece:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017ed2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017ed6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017eda:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017ede:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017ee2:	f1be 0f00 	cmp.w	lr, #0
 8017ee6:	d030      	beq.n	8017f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017ee8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017eea:	4450      	add	r0, sl
 8017eec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017ef0:	4431      	add	r1, r6
 8017ef2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017ef6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017efa:	4549      	cmp	r1, r9
 8017efc:	db08      	blt.n	8017f10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017efe:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017f02:	3001      	adds	r0, #1
 8017f04:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017f08:	eba1 0109 	sub.w	r1, r1, r9
 8017f0c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017f10:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017f14:	f04f 0801 	mov.w	r8, #1
 8017f18:	e7e3      	b.n	8017ee2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017f1a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017f1c:	4450      	add	r0, sl
 8017f1e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017f22:	4431      	add	r1, r6
 8017f24:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017f28:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017f2c:	4541      	cmp	r1, r8
 8017f2e:	db08      	blt.n	8017f42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8017f30:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017f34:	3001      	adds	r0, #1
 8017f36:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017f3a:	eba1 0108 	sub.w	r1, r1, r8
 8017f3e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017f42:	3f01      	subs	r7, #1
 8017f44:	f04f 0901 	mov.w	r9, #1
 8017f48:	e79e      	b.n	8017e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017f4a:	449c      	add	ip, r3
 8017f4c:	1aff      	subs	r7, r7, r3
 8017f4e:	f1b8 0f00 	cmp.w	r8, #0
 8017f52:	d009      	beq.n	8017f68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017f54:	9019      	str	r0, [sp, #100]	; 0x64
 8017f56:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017f5a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017f5e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017f62:	911d      	str	r1, [sp, #116]	; 0x74
 8017f64:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017f68:	1ad2      	subs	r2, r2, r3
 8017f6a:	e6b5      	b.n	8017cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017f6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	b923      	cbnz	r3, 8017f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017f72:	4b04      	ldr	r3, [pc, #16]	; (8017f84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017f74:	6818      	ldr	r0, [r3, #0]
 8017f76:	6803      	ldr	r3, [r0, #0]
 8017f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f7a:	4798      	blx	r3
 8017f7c:	b05b      	add	sp, #364	; 0x16c
 8017f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f82:	bf00      	nop
 8017f84:	2400aeec 	.word	0x2400aeec

08017f88 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017f88:	b570      	push	{r4, r5, r6, lr}
 8017f8a:	4604      	mov	r4, r0
 8017f8c:	2500      	movs	r5, #0
 8017f8e:	9804      	ldr	r0, [sp, #16]
 8017f90:	7223      	strb	r3, [r4, #8]
 8017f92:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017f96:	8025      	strh	r5, [r4, #0]
 8017f98:	6061      	str	r1, [r4, #4]
 8017f9a:	7263      	strb	r3, [r4, #9]
 8017f9c:	60e0      	str	r0, [r4, #12]
 8017f9e:	8222      	strh	r2, [r4, #16]
 8017fa0:	8265      	strh	r5, [r4, #18]
 8017fa2:	82a5      	strh	r5, [r4, #20]
 8017fa4:	82e5      	strh	r5, [r4, #22]
 8017fa6:	8325      	strh	r5, [r4, #24]
 8017fa8:	8365      	strh	r5, [r4, #26]
 8017faa:	83a5      	strh	r5, [r4, #28]
 8017fac:	77a5      	strb	r5, [r4, #30]
 8017fae:	6803      	ldr	r3, [r0, #0]
 8017fb0:	695b      	ldr	r3, [r3, #20]
 8017fb2:	4798      	blx	r3
 8017fb4:	4606      	mov	r6, r0
 8017fb6:	b1f8      	cbz	r0, 8017ff8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017fb8:	68e0      	ldr	r0, [r4, #12]
 8017fba:	4631      	mov	r1, r6
 8017fbc:	6803      	ldr	r3, [r0, #0]
 8017fbe:	68db      	ldr	r3, [r3, #12]
 8017fc0:	4798      	blx	r3
 8017fc2:	7b43      	ldrb	r3, [r0, #13]
 8017fc4:	7a82      	ldrb	r2, [r0, #10]
 8017fc6:	4605      	mov	r5, r0
 8017fc8:	005b      	lsls	r3, r3, #1
 8017fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017fce:	4313      	orrs	r3, r2
 8017fd0:	83a3      	strh	r3, [r4, #28]
 8017fd2:	7a63      	ldrb	r3, [r4, #9]
 8017fd4:	2b04      	cmp	r3, #4
 8017fd6:	d10f      	bne.n	8017ff8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017fd8:	68e0      	ldr	r0, [r4, #12]
 8017fda:	462a      	mov	r2, r5
 8017fdc:	4631      	mov	r1, r6
 8017fde:	6803      	ldr	r3, [r0, #0]
 8017fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017fe2:	4798      	blx	r3
 8017fe4:	7b6b      	ldrb	r3, [r5, #13]
 8017fe6:	005b      	lsls	r3, r3, #1
 8017fe8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017fec:	7aab      	ldrb	r3, [r5, #10]
 8017fee:	4313      	orrs	r3, r2
 8017ff0:	4418      	add	r0, r3
 8017ff2:	8ba3      	ldrh	r3, [r4, #28]
 8017ff4:	4418      	add	r0, r3
 8017ff6:	83a0      	strh	r0, [r4, #28]
 8017ff8:	4620      	mov	r0, r4
 8017ffa:	bd70      	pop	{r4, r5, r6, pc}

08017ffc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018000:	2400      	movs	r4, #0
 8018002:	b085      	sub	sp, #20
 8018004:	4681      	mov	r9, r0
 8018006:	4688      	mov	r8, r1
 8018008:	4692      	mov	sl, r2
 801800a:	469b      	mov	fp, r3
 801800c:	4627      	mov	r7, r4
 801800e:	4625      	mov	r5, r4
 8018010:	4626      	mov	r6, r4
 8018012:	4554      	cmp	r4, sl
 8018014:	da2a      	bge.n	801806c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018016:	2300      	movs	r3, #0
 8018018:	9303      	str	r3, [sp, #12]
 801801a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801801e:	429d      	cmp	r5, r3
 8018020:	d004      	beq.n	801802c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8018022:	f242 030b 	movw	r3, #8203	; 0x200b
 8018026:	429d      	cmp	r5, r3
 8018028:	bf18      	it	ne
 801802a:	462f      	movne	r7, r5
 801802c:	ab03      	add	r3, sp, #12
 801802e:	4642      	mov	r2, r8
 8018030:	4659      	mov	r1, fp
 8018032:	4648      	mov	r0, r9
 8018034:	f002 fe72 	bl	801ad1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018038:	4605      	mov	r5, r0
 801803a:	b1b8      	cbz	r0, 801806c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801803c:	280a      	cmp	r0, #10
 801803e:	d015      	beq.n	801806c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018040:	9a03      	ldr	r2, [sp, #12]
 8018042:	b18a      	cbz	r2, 8018068 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8018044:	7b50      	ldrb	r0, [r2, #13]
 8018046:	4639      	mov	r1, r7
 8018048:	7a93      	ldrb	r3, [r2, #10]
 801804a:	0040      	lsls	r0, r0, #1
 801804c:	8895      	ldrh	r5, [r2, #4]
 801804e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018052:	4303      	orrs	r3, r0
 8018054:	4640      	mov	r0, r8
 8018056:	9301      	str	r3, [sp, #4]
 8018058:	f8d8 3000 	ldr.w	r3, [r8]
 801805c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801805e:	4798      	blx	r3
 8018060:	9b01      	ldr	r3, [sp, #4]
 8018062:	4418      	add	r0, r3
 8018064:	4406      	add	r6, r0
 8018066:	b2b6      	uxth	r6, r6
 8018068:	3401      	adds	r4, #1
 801806a:	e7d2      	b.n	8018012 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801806c:	4630      	mov	r0, r6
 801806e:	b005      	add	sp, #20
 8018070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018074 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018074:	2a02      	cmp	r2, #2
 8018076:	b530      	push	{r4, r5, lr}
 8018078:	d011      	beq.n	801809e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801807a:	2a03      	cmp	r2, #3
 801807c:	d01c      	beq.n	80180b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801807e:	2a01      	cmp	r2, #1
 8018080:	d10c      	bne.n	801809c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018082:	888b      	ldrh	r3, [r1, #4]
 8018084:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018088:	8801      	ldrh	r1, [r0, #0]
 801808a:	1a9b      	subs	r3, r3, r2
 801808c:	8844      	ldrh	r4, [r0, #2]
 801808e:	1a5b      	subs	r3, r3, r1
 8018090:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018094:	8004      	strh	r4, [r0, #0]
 8018096:	8043      	strh	r3, [r0, #2]
 8018098:	8081      	strh	r1, [r0, #4]
 801809a:	80c2      	strh	r2, [r0, #6]
 801809c:	bd30      	pop	{r4, r5, pc}
 801809e:	88cb      	ldrh	r3, [r1, #6]
 80180a0:	88c2      	ldrh	r2, [r0, #6]
 80180a2:	1a9b      	subs	r3, r3, r2
 80180a4:	8842      	ldrh	r2, [r0, #2]
 80180a6:	1a9b      	subs	r3, r3, r2
 80180a8:	888a      	ldrh	r2, [r1, #4]
 80180aa:	8881      	ldrh	r1, [r0, #4]
 80180ac:	8043      	strh	r3, [r0, #2]
 80180ae:	1a52      	subs	r2, r2, r1
 80180b0:	8801      	ldrh	r1, [r0, #0]
 80180b2:	1a52      	subs	r2, r2, r1
 80180b4:	8002      	strh	r2, [r0, #0]
 80180b6:	e7f1      	b.n	801809c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80180b8:	88cb      	ldrh	r3, [r1, #6]
 80180ba:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80180be:	8841      	ldrh	r1, [r0, #2]
 80180c0:	1a9b      	subs	r3, r3, r2
 80180c2:	f9b0 5000 	ldrsh.w	r5, [r0]
 80180c6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80180ca:	1a5b      	subs	r3, r3, r1
 80180cc:	8045      	strh	r5, [r0, #2]
 80180ce:	8082      	strh	r2, [r0, #4]
 80180d0:	8003      	strh	r3, [r0, #0]
 80180d2:	80c4      	strh	r4, [r0, #6]
 80180d4:	e7e2      	b.n	801809c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080180d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80180d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180da:	b09f      	sub	sp, #124	; 0x7c
 80180dc:	9116      	str	r1, [sp, #88]	; 0x58
 80180de:	9317      	str	r3, [sp, #92]	; 0x5c
 80180e0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80180e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80180e4:	8809      	ldrh	r1, [r1, #0]
 80180e6:	889b      	ldrh	r3, [r3, #4]
 80180e8:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80180ec:	440b      	add	r3, r1
 80180ee:	9212      	str	r2, [sp, #72]	; 0x48
 80180f0:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80180f4:	b21b      	sxth	r3, r3
 80180f6:	9011      	str	r0, [sp, #68]	; 0x44
 80180f8:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80180fc:	9310      	str	r3, [sp, #64]	; 0x40
 80180fe:	f8d8 3000 	ldr.w	r3, [r8]
 8018102:	7a59      	ldrb	r1, [r3, #9]
 8018104:	7a1b      	ldrb	r3, [r3, #8]
 8018106:	9114      	str	r1, [sp, #80]	; 0x50
 8018108:	9315      	str	r3, [sp, #84]	; 0x54
 801810a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801810c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018110:	2a00      	cmp	r2, #0
 8018112:	d067      	beq.n	80181e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8018114:	f898 3010 	ldrb.w	r3, [r8, #16]
 8018118:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801811a:	2b04      	cmp	r3, #4
 801811c:	bf14      	ite	ne
 801811e:	2301      	movne	r3, #1
 8018120:	2302      	moveq	r3, #2
 8018122:	4413      	add	r3, r2
 8018124:	f04f 0900 	mov.w	r9, #0
 8018128:	930f      	str	r3, [sp, #60]	; 0x3c
 801812a:	464c      	mov	r4, r9
 801812c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8018130:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8018134:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8018138:	4293      	cmp	r3, r2
 801813a:	f280 808c 	bge.w	8018256 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801813e:	2300      	movs	r3, #0
 8018140:	931c      	str	r3, [sp, #112]	; 0x70
 8018142:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018146:	429c      	cmp	r4, r3
 8018148:	d006      	beq.n	8018158 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801814a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801814c:	f242 020b 	movw	r2, #8203	; 0x200b
 8018150:	4294      	cmp	r4, r2
 8018152:	bf18      	it	ne
 8018154:	4623      	movne	r3, r4
 8018156:	930d      	str	r3, [sp, #52]	; 0x34
 8018158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801815a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801815c:	f8d8 2000 	ldr.w	r2, [r8]
 8018160:	428b      	cmp	r3, r1
 8018162:	db41      	blt.n	80181e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8018164:	6813      	ldr	r3, [r2, #0]
 8018166:	4610      	mov	r0, r2
 8018168:	695b      	ldr	r3, [r3, #20]
 801816a:	4798      	blx	r3
 801816c:	4604      	mov	r4, r0
 801816e:	f8d8 0000 	ldr.w	r0, [r8]
 8018172:	aa1d      	add	r2, sp, #116	; 0x74
 8018174:	4621      	mov	r1, r4
 8018176:	6803      	ldr	r3, [r0, #0]
 8018178:	689e      	ldr	r6, [r3, #8]
 801817a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801817e:	47b0      	blx	r6
 8018180:	901c      	str	r0, [sp, #112]	; 0x70
 8018182:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018186:	429c      	cmp	r4, r3
 8018188:	f000 80ea 	beq.w	8018360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801818c:	f242 030b 	movw	r3, #8203	; 0x200b
 8018190:	429c      	cmp	r4, r3
 8018192:	f000 80e5 	beq.w	8018360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018196:	2c00      	cmp	r4, #0
 8018198:	f000 80f7 	beq.w	801838a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801819c:	2c0a      	cmp	r4, #10
 801819e:	d060      	beq.n	8018262 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80181a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80181a2:	b36a      	cbz	r2, 8018200 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80181a4:	8894      	ldrh	r4, [r2, #4]
 80181a6:	f1bb 0f00 	cmp.w	fp, #0
 80181aa:	d03b      	beq.n	8018224 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 80181ac:	f892 900d 	ldrb.w	r9, [r2, #13]
 80181b0:	f1bb 0f01 	cmp.w	fp, #1
 80181b4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80181b8:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80181bc:	f892 900a 	ldrb.w	r9, [r2, #10]
 80181c0:	ea49 0903 	orr.w	r9, r9, r3
 80181c4:	d134      	bne.n	8018230 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 80181c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80181c8:	eba5 0509 	sub.w	r5, r5, r9
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d14f      	bne.n	8018270 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80181d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80181d2:	eb09 0305 	add.w	r3, r9, r5
 80181d6:	4413      	add	r3, r2
 80181d8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80181da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80181de:	4293      	cmp	r3, r2
 80181e0:	da51      	bge.n	8018286 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80181e2:	e038      	b.n	8018256 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80181e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80181e6:	e79d      	b.n	8018124 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 80181e8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80181ec:	4659      	mov	r1, fp
 80181ee:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80181f0:	9301      	str	r3, [sp, #4]
 80181f2:	ab1d      	add	r3, sp, #116	; 0x74
 80181f4:	9300      	str	r3, [sp, #0]
 80181f6:	ab1c      	add	r3, sp, #112	; 0x70
 80181f8:	f002 fde8 	bl	801adcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80181fc:	4604      	mov	r4, r0
 80181fe:	e7c0      	b.n	8018182 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018200:	f8d8 0000 	ldr.w	r0, [r8]
 8018204:	6803      	ldr	r3, [r0, #0]
 8018206:	691b      	ldr	r3, [r3, #16]
 8018208:	4798      	blx	r3
 801820a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801820e:	4298      	cmp	r0, r3
 8018210:	f000 80a6 	beq.w	8018360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018214:	f242 030b 	movw	r3, #8203	; 0x200b
 8018218:	4298      	cmp	r0, r3
 801821a:	f000 80a1 	beq.w	8018360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801821e:	f1bb 0f00 	cmp.w	fp, #0
 8018222:	d100      	bne.n	8018226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8018224:	444d      	add	r5, r9
 8018226:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018228:	2a00      	cmp	r2, #0
 801822a:	d1bf      	bne.n	80181ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801822c:	4691      	mov	r9, r2
 801822e:	e097      	b.n	8018360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018232:	2b00      	cmp	r3, #0
 8018234:	f000 80ab 	beq.w	801838e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8018238:	f1bb 0f00 	cmp.w	fp, #0
 801823c:	d118      	bne.n	8018270 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801823e:	f8d8 0000 	ldr.w	r0, [r8]
 8018242:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018244:	6803      	ldr	r3, [r0, #0]
 8018246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018248:	4798      	blx	r3
 801824a:	4405      	add	r5, r0
 801824c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801824e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018250:	1aeb      	subs	r3, r5, r3
 8018252:	4293      	cmp	r3, r2
 8018254:	dd17      	ble.n	8018286 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8018256:	2c00      	cmp	r4, #0
 8018258:	f000 8097 	beq.w	801838a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801825c:	2c0a      	cmp	r4, #10
 801825e:	f040 8085 	bne.w	801836c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8018262:	240a      	movs	r4, #10
 8018264:	fab4 f084 	clz	r0, r4
 8018268:	0940      	lsrs	r0, r0, #5
 801826a:	b01f      	add	sp, #124	; 0x7c
 801826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018270:	f8d8 0000 	ldr.w	r0, [r8]
 8018274:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018276:	6803      	ldr	r3, [r0, #0]
 8018278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801827a:	4798      	blx	r3
 801827c:	f1bb 0f01 	cmp.w	fp, #1
 8018280:	eba5 0500 	sub.w	r5, r5, r0
 8018284:	d0a4      	beq.n	80181d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018286:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018288:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801828a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801828e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018292:	7b43      	ldrb	r3, [r0, #13]
 8018294:	4429      	add	r1, r5
 8018296:	015b      	lsls	r3, r3, #5
 8018298:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801829c:	7983      	ldrb	r3, [r0, #6]
 801829e:	4313      	orrs	r3, r2
 80182a0:	440b      	add	r3, r1
 80182a2:	42b3      	cmp	r3, r6
 80182a4:	db5c      	blt.n	8018360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80182a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182a8:	4299      	cmp	r1, r3
 80182aa:	da59      	bge.n	8018360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80182ac:	f8d8 0000 	ldr.w	r0, [r8]
 80182b0:	42ae      	cmp	r6, r5
 80182b2:	6803      	ldr	r3, [r0, #0]
 80182b4:	bfcc      	ite	gt
 80182b6:	1b76      	subgt	r6, r6, r5
 80182b8:	2600      	movle	r6, #0
 80182ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182bc:	bfc8      	it	gt
 80182be:	b2b6      	uxthgt	r6, r6
 80182c0:	4798      	blx	r3
 80182c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80182c4:	7b5a      	ldrb	r2, [r3, #13]
 80182c6:	00d1      	lsls	r1, r2, #3
 80182c8:	f401 7780 	and.w	r7, r1, #256	; 0x100
 80182cc:	7a19      	ldrb	r1, [r3, #8]
 80182ce:	4339      	orrs	r1, r7
 80182d0:	0657      	lsls	r7, r2, #25
 80182d2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80182d4:	bf48      	it	mi
 80182d6:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80182da:	4407      	add	r7, r0
 80182dc:	bf48      	it	mi
 80182de:	b209      	sxthmi	r1, r1
 80182e0:	1a7f      	subs	r7, r7, r1
 80182e2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80182e4:	b2bf      	uxth	r7, r7
 80182e6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80182ea:	fa0f fa87 	sxth.w	sl, r7
 80182ee:	4551      	cmp	r1, sl
 80182f0:	dd3a      	ble.n	8018368 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80182f2:	0112      	lsls	r2, r2, #4
 80182f4:	79d8      	ldrb	r0, [r3, #7]
 80182f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80182fa:	4302      	orrs	r2, r0
 80182fc:	4492      	add	sl, r2
 80182fe:	4551      	cmp	r1, sl
 8018300:	dc2e      	bgt.n	8018360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018302:	1bcf      	subs	r7, r1, r7
 8018304:	468a      	mov	sl, r1
 8018306:	b2bf      	uxth	r7, r7
 8018308:	9319      	str	r3, [sp, #100]	; 0x64
 801830a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801830c:	f8d8 0000 	ldr.w	r0, [r8]
 8018310:	681a      	ldr	r2, [r3, #0]
 8018312:	6801      	ldr	r1, [r0, #0]
 8018314:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8018316:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018318:	9313      	str	r3, [sp, #76]	; 0x4c
 801831a:	9218      	str	r2, [sp, #96]	; 0x60
 801831c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801831e:	4788      	blx	r1
 8018320:	f898 1006 	ldrb.w	r1, [r8, #6]
 8018324:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018326:	910b      	str	r1, [sp, #44]	; 0x2c
 8018328:	f898 100e 	ldrb.w	r1, [r8, #14]
 801832c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801832e:	910a      	str	r1, [sp, #40]	; 0x28
 8018330:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8018334:	9109      	str	r1, [sp, #36]	; 0x24
 8018336:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801833a:	9305      	str	r3, [sp, #20]
 801833c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801833e:	9206      	str	r2, [sp, #24]
 8018340:	e9cd a601 	strd	sl, r6, [sp, #4]
 8018344:	442e      	add	r6, r5
 8018346:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801834a:	b236      	sxth	r6, r6
 801834c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801834e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018352:	9600      	str	r6, [sp, #0]
 8018354:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018356:	681a      	ldr	r2, [r3, #0]
 8018358:	9811      	ldr	r0, [sp, #68]	; 0x44
 801835a:	685b      	ldr	r3, [r3, #4]
 801835c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801835e:	47b0      	blx	r6
 8018360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018362:	3301      	adds	r3, #1
 8018364:	930e      	str	r3, [sp, #56]	; 0x38
 8018366:	e6e5      	b.n	8018134 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8018368:	2700      	movs	r7, #0
 801836a:	e7cd      	b.n	8018308 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801836c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801836e:	3501      	adds	r5, #1
 8018370:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018372:	429d      	cmp	r5, r3
 8018374:	f6bf af76 	bge.w	8018264 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018378:	4659      	mov	r1, fp
 801837a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801837c:	f7ee fd8a 	bl	8006e94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018380:	4604      	mov	r4, r0
 8018382:	b110      	cbz	r0, 801838a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018384:	280a      	cmp	r0, #10
 8018386:	d1f2      	bne.n	801836e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8018388:	e76b      	b.n	8018262 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801838a:	2400      	movs	r4, #0
 801838c:	e76a      	b.n	8018264 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801838e:	f1bb 0f00 	cmp.w	fp, #0
 8018392:	f43f af5b 	beq.w	801824c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018396:	e776      	b.n	8018286 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08018398 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018398:	b530      	push	{r4, r5, lr}
 801839a:	8a44      	ldrh	r4, [r0, #18]
 801839c:	8ac5      	ldrh	r5, [r0, #22]
 801839e:	82c3      	strh	r3, [r0, #22]
 80183a0:	442c      	add	r4, r5
 80183a2:	1ae4      	subs	r4, r4, r3
 80183a4:	8b03      	ldrh	r3, [r0, #24]
 80183a6:	8244      	strh	r4, [r0, #18]
 80183a8:	8a84      	ldrh	r4, [r0, #20]
 80183aa:	4422      	add	r2, r4
 80183ac:	440c      	add	r4, r1
 80183ae:	1a59      	subs	r1, r3, r1
 80183b0:	8342      	strh	r2, [r0, #26]
 80183b2:	8284      	strh	r4, [r0, #20]
 80183b4:	8301      	strh	r1, [r0, #24]
 80183b6:	bd30      	pop	{r4, r5, pc}

080183b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80183b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183bc:	7a43      	ldrb	r3, [r0, #9]
 80183be:	b087      	sub	sp, #28
 80183c0:	4604      	mov	r4, r0
 80183c2:	460f      	mov	r7, r1
 80183c4:	1eda      	subs	r2, r3, #3
 80183c6:	b2d2      	uxtb	r2, r2
 80183c8:	2900      	cmp	r1, #0
 80183ca:	d036      	beq.n	801843a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 80183cc:	2a01      	cmp	r2, #1
 80183ce:	d932      	bls.n	8018436 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 80183d0:	1e58      	subs	r0, r3, #1
 80183d2:	f1d0 0b00 	rsbs	fp, r0, #0
 80183d6:	eb4b 0b00 	adc.w	fp, fp, r0
 80183da:	1e99      	subs	r1, r3, #2
 80183dc:	424b      	negs	r3, r1
 80183de:	414b      	adcs	r3, r1
 80183e0:	9303      	str	r3, [sp, #12]
 80183e2:	2300      	movs	r3, #0
 80183e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80183e8:	2500      	movs	r5, #0
 80183ea:	f242 0a0b 	movw	sl, #8203	; 0x200b
 80183ee:	46a9      	mov	r9, r5
 80183f0:	8265      	strh	r5, [r4, #18]
 80183f2:	82a5      	strh	r5, [r4, #20]
 80183f4:	2300      	movs	r3, #0
 80183f6:	9305      	str	r3, [sp, #20]
 80183f8:	8823      	ldrh	r3, [r4, #0]
 80183fa:	2b20      	cmp	r3, #32
 80183fc:	d02b      	beq.n	8018456 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 80183fe:	eba3 020a 	sub.w	r2, r3, sl
 8018402:	4256      	negs	r6, r2
 8018404:	4156      	adcs	r6, r2
 8018406:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801840a:	4293      	cmp	r3, r2
 801840c:	d004      	beq.n	8018418 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801840e:	4553      	cmp	r3, sl
 8018410:	bf16      	itet	ne
 8018412:	4699      	movne	r9, r3
 8018414:	2601      	moveq	r6, #1
 8018416:	2600      	movne	r6, #0
 8018418:	ab05      	add	r3, sp, #20
 801841a:	68e2      	ldr	r2, [r4, #12]
 801841c:	7a21      	ldrb	r1, [r4, #8]
 801841e:	6860      	ldr	r0, [r4, #4]
 8018420:	f002 fc7c 	bl	801ad1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018424:	8020      	strh	r0, [r4, #0]
 8018426:	b9c8      	cbnz	r0, 801845c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018428:	8b22      	ldrh	r2, [r4, #24]
 801842a:	2300      	movs	r3, #0
 801842c:	4611      	mov	r1, r2
 801842e:	4620      	mov	r0, r4
 8018430:	f7ff ffb2 	bl	8018398 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018434:	e066      	b.n	8018504 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018436:	468b      	mov	fp, r1
 8018438:	e7cf      	b.n	80183da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801843a:	3b01      	subs	r3, #1
 801843c:	2a01      	cmp	r2, #1
 801843e:	9103      	str	r1, [sp, #12]
 8018440:	468b      	mov	fp, r1
 8018442:	bf8c      	ite	hi
 8018444:	2200      	movhi	r2, #0
 8018446:	2201      	movls	r2, #1
 8018448:	2b01      	cmp	r3, #1
 801844a:	9202      	str	r2, [sp, #8]
 801844c:	bf8c      	ite	hi
 801844e:	2300      	movhi	r3, #0
 8018450:	2301      	movls	r3, #1
 8018452:	9301      	str	r3, [sp, #4]
 8018454:	e7c8      	b.n	80183e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8018456:	4699      	mov	r9, r3
 8018458:	2601      	movs	r6, #1
 801845a:	e7dd      	b.n	8018418 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801845c:	8ae3      	ldrh	r3, [r4, #22]
 801845e:	280a      	cmp	r0, #10
 8018460:	f103 0301 	add.w	r3, r3, #1
 8018464:	82e3      	strh	r3, [r4, #22]
 8018466:	d0df      	beq.n	8018428 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8018468:	9a05      	ldr	r2, [sp, #20]
 801846a:	bb42      	cbnz	r2, 80184be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801846c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018470:	4298      	cmp	r0, r3
 8018472:	d001      	beq.n	8018478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018474:	4550      	cmp	r0, sl
 8018476:	d1bd      	bne.n	80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018478:	8823      	ldrh	r3, [r4, #0]
 801847a:	8b21      	ldrh	r1, [r4, #24]
 801847c:	2b20      	cmp	r3, #32
 801847e:	d001      	beq.n	8018484 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8018480:	4553      	cmp	r3, sl
 8018482:	d131      	bne.n	80184e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8018484:	2e00      	cmp	r6, #0
 8018486:	bf0a      	itet	eq
 8018488:	460d      	moveq	r5, r1
 801848a:	4630      	movne	r0, r6
 801848c:	2001      	moveq	r0, #1
 801848e:	440a      	add	r2, r1
 8018490:	8aa3      	ldrh	r3, [r4, #20]
 8018492:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018496:	b292      	uxth	r2, r2
 8018498:	8322      	strh	r2, [r4, #24]
 801849a:	4413      	add	r3, r2
 801849c:	2f00      	cmp	r7, #0
 801849e:	d03a      	beq.n	8018516 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80184a0:	f1bb 0f00 	cmp.w	fp, #0
 80184a4:	d102      	bne.n	80184ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80184a6:	9903      	ldr	r1, [sp, #12]
 80184a8:	b301      	cbz	r1, 80184ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80184aa:	b1f8      	cbz	r0, 80184ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80184ac:	8ba1      	ldrh	r1, [r4, #28]
 80184ae:	4419      	add	r1, r3
 80184b0:	458c      	cmp	ip, r1
 80184b2:	da2a      	bge.n	801850a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80184b4:	8a61      	ldrh	r1, [r4, #18]
 80184b6:	b341      	cbz	r1, 801850a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80184b8:	4563      	cmp	r3, ip
 80184ba:	dd9b      	ble.n	80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80184bc:	e01c      	b.n	80184f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80184be:	8893      	ldrh	r3, [r2, #4]
 80184c0:	4649      	mov	r1, r9
 80184c2:	8023      	strh	r3, [r4, #0]
 80184c4:	f892 800d 	ldrb.w	r8, [r2, #13]
 80184c8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80184cc:	f408 7080 	and.w	r0, r8, #256	; 0x100
 80184d0:	f892 800a 	ldrb.w	r8, [r2, #10]
 80184d4:	ea48 0800 	orr.w	r8, r8, r0
 80184d8:	68e0      	ldr	r0, [r4, #12]
 80184da:	6803      	ldr	r3, [r0, #0]
 80184dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184de:	4798      	blx	r3
 80184e0:	eb08 0200 	add.w	r2, r8, r0
 80184e4:	b292      	uxth	r2, r2
 80184e6:	e7c7      	b.n	8018478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80184e8:	2000      	movs	r0, #0
 80184ea:	e7d0      	b.n	801848e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80184ec:	4563      	cmp	r3, ip
 80184ee:	dd81      	ble.n	80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80184f0:	8a63      	ldrh	r3, [r4, #18]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	f43f af7e 	beq.w	80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80184f8:	2301      	movs	r3, #1
 80184fa:	8ba2      	ldrh	r2, [r4, #28]
 80184fc:	77a3      	strb	r3, [r4, #30]
 80184fe:	8b63      	ldrh	r3, [r4, #26]
 8018500:	4413      	add	r3, r2
 8018502:	8363      	strh	r3, [r4, #26]
 8018504:	b007      	add	sp, #28
 8018506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801850a:	2300      	movs	r3, #0
 801850c:	4611      	mov	r1, r2
 801850e:	4620      	mov	r0, r4
 8018510:	f7ff ff42 	bl	8018398 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018514:	e76e      	b.n	80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018516:	4563      	cmp	r3, ip
 8018518:	dd14      	ble.n	8018544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801851a:	9b02      	ldr	r3, [sp, #8]
 801851c:	b113      	cbz	r3, 8018524 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801851e:	2301      	movs	r3, #1
 8018520:	460a      	mov	r2, r1
 8018522:	e783      	b.n	801842c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8018524:	9b01      	ldr	r3, [sp, #4]
 8018526:	2b00      	cmp	r3, #0
 8018528:	f43f af64 	beq.w	80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801852c:	2800      	cmp	r0, #0
 801852e:	f47f af61 	bne.w	80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018532:	b116      	cbz	r6, 801853a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8018534:	2301      	movs	r3, #1
 8018536:	462a      	mov	r2, r5
 8018538:	e779      	b.n	801842e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801853a:	8a63      	ldrh	r3, [r4, #18]
 801853c:	2b00      	cmp	r3, #0
 801853e:	f43f af59 	beq.w	80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018542:	e7df      	b.n	8018504 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018544:	2800      	cmp	r0, #0
 8018546:	f47f af55 	bne.w	80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801854a:	2e00      	cmp	r6, #0
 801854c:	f43f af52 	beq.w	80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018550:	2301      	movs	r3, #1
 8018552:	462a      	mov	r2, r5
 8018554:	e7db      	b.n	801850e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08018556 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018556:	b530      	push	{r4, r5, lr}
 8018558:	4605      	mov	r5, r0
 801855a:	b08b      	sub	sp, #44	; 0x2c
 801855c:	b191      	cbz	r1, 8018584 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801855e:	2401      	movs	r4, #1
 8018560:	e9cd 3100 	strd	r3, r1, [sp]
 8018564:	4613      	mov	r3, r2
 8018566:	4601      	mov	r1, r0
 8018568:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801856c:	a802      	add	r0, sp, #8
 801856e:	f7ff fd0b 	bl	8017f88 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018572:	2100      	movs	r1, #0
 8018574:	a802      	add	r0, sp, #8
 8018576:	f7ff ff1f 	bl	80183b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801857a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801857e:	b163      	cbz	r3, 801859a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018580:	3401      	adds	r4, #1
 8018582:	e7f6      	b.n	8018572 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8018584:	2401      	movs	r4, #1
 8018586:	f002 fcc3 	bl	801af10 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801858a:	280a      	cmp	r0, #10
 801858c:	4628      	mov	r0, r5
 801858e:	bf08      	it	eq
 8018590:	3401      	addeq	r4, #1
 8018592:	f002 fcbd 	bl	801af10 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018596:	2800      	cmp	r0, #0
 8018598:	d1f7      	bne.n	801858a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801859a:	b2a0      	uxth	r0, r4
 801859c:	b00b      	add	sp, #44	; 0x2c
 801859e:	bd30      	pop	{r4, r5, pc}

080185a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80185a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185a4:	b0e5      	sub	sp, #404	; 0x194
 80185a6:	4689      	mov	r9, r1
 80185a8:	461c      	mov	r4, r3
 80185aa:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 80185ae:	900a      	str	r0, [sp, #40]	; 0x28
 80185b0:	f1ba 0f00 	cmp.w	sl, #0
 80185b4:	f000 80b4 	beq.w	8018720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	f000 80b0 	beq.w	8018720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80185c0:	7ba3      	ldrb	r3, [r4, #14]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	f000 80ac 	beq.w	8018720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80185c8:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 80185cc:	6810      	ldr	r0, [r2, #0]
 80185ce:	6851      	ldr	r1, [r2, #4]
 80185d0:	2500      	movs	r5, #0
 80185d2:	4643      	mov	r3, r8
 80185d4:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80185d8:	950f      	str	r5, [sp, #60]	; 0x3c
 80185da:	af19      	add	r7, sp, #100	; 0x64
 80185dc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80185e0:	79a2      	ldrb	r2, [r4, #6]
 80185e2:	c303      	stmia	r3!, {r0, r1}
 80185e4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80185e8:	a90f      	add	r1, sp, #60	; 0x3c
 80185ea:	4640      	mov	r0, r8
 80185ec:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80185f0:	f7ff fd40 	bl	8018074 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80185f4:	a90f      	add	r1, sp, #60	; 0x3c
 80185f6:	79a2      	ldrb	r2, [r4, #6]
 80185f8:	4608      	mov	r0, r1
 80185fa:	f7ff fd3b 	bl	8018074 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80185fe:	4638      	mov	r0, r7
 8018600:	f002 f839 	bl	801a676 <_ZN8touchgfx12TextProviderC1Ev>
 8018604:	6820      	ldr	r0, [r4, #0]
 8018606:	6803      	ldr	r3, [r0, #0]
 8018608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801860a:	4798      	blx	r3
 801860c:	4606      	mov	r6, r0
 801860e:	6820      	ldr	r0, [r4, #0]
 8018610:	6803      	ldr	r3, [r0, #0]
 8018612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018614:	4798      	blx	r3
 8018616:	4633      	mov	r3, r6
 8018618:	9000      	str	r0, [sp, #0]
 801861a:	4651      	mov	r1, sl
 801861c:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801861e:	4638      	mov	r0, r7
 8018620:	f002 f87c 	bl	801a71c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018624:	7923      	ldrb	r3, [r4, #4]
 8018626:	6820      	ldr	r0, [r4, #0]
 8018628:	9308      	str	r3, [sp, #32]
 801862a:	6803      	ldr	r3, [r0, #0]
 801862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801862e:	4798      	blx	r3
 8018630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018634:	181e      	adds	r6, r3, r0
 8018636:	42ae      	cmp	r6, r5
 8018638:	dd06      	ble.n	8018648 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801863a:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801863e:	4282      	cmp	r2, r0
 8018640:	bfa4      	itt	ge
 8018642:	189d      	addge	r5, r3, r2
 8018644:	fb95 f5f6 	sdivge	r5, r5, r6
 8018648:	a832      	add	r0, sp, #200	; 0xc8
 801864a:	f002 f814 	bl	801a676 <_ZN8touchgfx12TextProviderC1Ev>
 801864e:	7c23      	ldrb	r3, [r4, #16]
 8018650:	b17b      	cbz	r3, 8018672 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8018652:	6820      	ldr	r0, [r4, #0]
 8018654:	6803      	ldr	r3, [r0, #0]
 8018656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018658:	4798      	blx	r3
 801865a:	4683      	mov	fp, r0
 801865c:	6820      	ldr	r0, [r4, #0]
 801865e:	6803      	ldr	r3, [r0, #0]
 8018660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018662:	4798      	blx	r3
 8018664:	465b      	mov	r3, fp
 8018666:	9000      	str	r0, [sp, #0]
 8018668:	4651      	mov	r1, sl
 801866a:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801866c:	a832      	add	r0, sp, #200	; 0xc8
 801866e:	f002 f855 	bl	801a71c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018672:	7be1      	ldrb	r1, [r4, #15]
 8018674:	a811      	add	r0, sp, #68	; 0x44
 8018676:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801867a:	7963      	ldrb	r3, [r4, #5]
 801867c:	1a52      	subs	r2, r2, r1
 801867e:	7c21      	ldrb	r1, [r4, #16]
 8018680:	9101      	str	r1, [sp, #4]
 8018682:	b292      	uxth	r2, r2
 8018684:	6821      	ldr	r1, [r4, #0]
 8018686:	9100      	str	r1, [sp, #0]
 8018688:	a932      	add	r1, sp, #200	; 0xc8
 801868a:	f7ff fc7d 	bl	8017f88 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801868e:	7c23      	ldrb	r3, [r4, #16]
 8018690:	b9bb      	cbnz	r3, 80186c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8018692:	fa1f fa86 	uxth.w	sl, r6
 8018696:	2d00      	cmp	r5, #0
 8018698:	dd45      	ble.n	8018726 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801869a:	4638      	mov	r0, r7
 801869c:	f002 fc38 	bl	801af10 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80186a0:	2800      	cmp	r0, #0
 80186a2:	d03d      	beq.n	8018720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80186a4:	280a      	cmp	r0, #10
 80186a6:	d1f6      	bne.n	8018696 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80186a8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80186ac:	3d01      	subs	r5, #1
 80186ae:	4453      	add	r3, sl
 80186b0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80186b4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80186b8:	eba3 030a 	sub.w	r3, r3, sl
 80186bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80186c0:	e7e9      	b.n	8018696 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80186c2:	0073      	lsls	r3, r6, #1
 80186c4:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80186c8:	fa1f fa86 	uxth.w	sl, r6
 80186cc:	9309      	str	r3, [sp, #36]	; 0x24
 80186ce:	2d00      	cmp	r5, #0
 80186d0:	dd29      	ble.n	8018726 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 80186d2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80186d6:	a811      	add	r0, sp, #68	; 0x44
 80186d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186da:	428b      	cmp	r3, r1
 80186dc:	bfd4      	ite	le
 80186de:	2100      	movle	r1, #0
 80186e0:	2101      	movgt	r1, #1
 80186e2:	f7ff fe69 	bl	80183b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80186e6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80186ea:	3b01      	subs	r3, #1
 80186ec:	b29b      	uxth	r3, r3
 80186ee:	455b      	cmp	r3, fp
 80186f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80186f2:	d005      	beq.n	8018700 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 80186f4:	7961      	ldrb	r1, [r4, #5]
 80186f6:	4638      	mov	r0, r7
 80186f8:	f7ee fbcc 	bl	8006e94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80186fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186fe:	e7f4      	b.n	80186ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8018700:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018704:	3d01      	subs	r5, #1
 8018706:	4453      	add	r3, sl
 8018708:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801870c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8018710:	eba3 030a 	sub.w	r3, r3, sl
 8018714:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018718:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801871c:	2b00      	cmp	r3, #0
 801871e:	d1d6      	bne.n	80186ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8018720:	b065      	add	sp, #404	; 0x194
 8018722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018726:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801872a:	ad4b      	add	r5, sp, #300	; 0x12c
 801872c:	f04f 0b00 	mov.w	fp, #0
 8018730:	7c23      	ldrb	r3, [r4, #16]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d067      	beq.n	8018806 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8018736:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801873a:	a811      	add	r0, sp, #68	; 0x44
 801873c:	458a      	cmp	sl, r1
 801873e:	bfd4      	ite	le
 8018740:	2100      	movle	r1, #0
 8018742:	2101      	movgt	r1, #1
 8018744:	f7ff fe38 	bl	80183b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018748:	9b08      	ldr	r3, [sp, #32]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d056      	beq.n	80187fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801874e:	7c23      	ldrb	r3, [r4, #16]
 8018750:	2264      	movs	r2, #100	; 0x64
 8018752:	4639      	mov	r1, r7
 8018754:	4628      	mov	r0, r5
 8018756:	9309      	str	r3, [sp, #36]	; 0x24
 8018758:	f00f f8fe 	bl	8027958 <memcpy>
 801875c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801875e:	2b00      	cmp	r3, #0
 8018760:	d059      	beq.n	8018816 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 8018762:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8018766:	7922      	ldrb	r2, [r4, #4]
 8018768:	2a01      	cmp	r2, #1
 801876a:	d13d      	bne.n	80187e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801876c:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8018770:	1ac0      	subs	r0, r0, r3
 8018772:	2302      	movs	r3, #2
 8018774:	fb90 f0f3 	sdiv	r0, r0, r3
 8018778:	b200      	sxth	r0, r0
 801877a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801877e:	4418      	add	r0, r3
 8018780:	7c23      	ldrb	r3, [r4, #16]
 8018782:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 8018786:	2b00      	cmp	r3, #0
 8018788:	d03a      	beq.n	8018800 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801878a:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801878e:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8018792:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8018796:	9500      	str	r5, [sp, #0]
 8018798:	980a      	ldr	r0, [sp, #40]	; 0x28
 801879a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801879e:	e9cd b703 	strd	fp, r7, [sp, #12]
 80187a2:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80187a6:	464a      	mov	r2, r9
 80187a8:	2100      	movs	r1, #0
 80187aa:	f7ff fc94 	bl	80180d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80187ae:	2800      	cmp	r0, #0
 80187b0:	d1b6      	bne.n	8018720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80187b2:	b2b2      	uxth	r2, r6
 80187b4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80187b8:	4611      	mov	r1, r2
 80187ba:	4413      	add	r3, r2
 80187bc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80187c0:	b21b      	sxth	r3, r3
 80187c2:	1a52      	subs	r2, r2, r1
 80187c4:	7c21      	ldrb	r1, [r4, #16]
 80187c6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80187ca:	b212      	sxth	r2, r2
 80187cc:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 80187d0:	b109      	cbz	r1, 80187d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 80187d2:	42b2      	cmp	r2, r6
 80187d4:	dba4      	blt.n	8018720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80187d6:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 80187da:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80187de:	440a      	add	r2, r1
 80187e0:	b212      	sxth	r2, r2
 80187e2:	4293      	cmp	r3, r2
 80187e4:	dda4      	ble.n	8018730 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 80187e6:	e79b      	b.n	8018720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80187e8:	2a02      	cmp	r2, #2
 80187ea:	d105      	bne.n	80187f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 80187ec:	7be2      	ldrb	r2, [r4, #15]
 80187ee:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 80187f2:	1a80      	subs	r0, r0, r2
 80187f4:	1ac0      	subs	r0, r0, r3
 80187f6:	e7bf      	b.n	8018778 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 80187f8:	2000      	movs	r0, #0
 80187fa:	e7be      	b.n	801877a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 80187fc:	7be0      	ldrb	r0, [r4, #15]
 80187fe:	e7bc      	b.n	801877a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8018800:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018804:	e7c3      	b.n	801878e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8018806:	9b08      	ldr	r3, [sp, #32]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d0f7      	beq.n	80187fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801880c:	2264      	movs	r2, #100	; 0x64
 801880e:	4639      	mov	r1, r7
 8018810:	4628      	mov	r0, r5
 8018812:	f00f f8a1 	bl	8027958 <memcpy>
 8018816:	2300      	movs	r3, #0
 8018818:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801881c:	6821      	ldr	r1, [r4, #0]
 801881e:	4628      	mov	r0, r5
 8018820:	f7ff fbec 	bl	8017ffc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018824:	b203      	sxth	r3, r0
 8018826:	e79e      	b.n	8018766 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

08018828 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018828:	2b02      	cmp	r3, #2
 801882a:	b510      	push	{r4, lr}
 801882c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018830:	d00b      	beq.n	801884a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018832:	2b03      	cmp	r3, #3
 8018834:	d00e      	beq.n	8018854 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018836:	2b01      	cmp	r3, #1
 8018838:	d001      	beq.n	801883e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801883a:	1860      	adds	r0, r4, r1
 801883c:	bd10      	pop	{r4, pc}
 801883e:	8880      	ldrh	r0, [r0, #4]
 8018840:	4420      	add	r0, r4
 8018842:	b200      	sxth	r0, r0
 8018844:	1a80      	subs	r0, r0, r2
 8018846:	3801      	subs	r0, #1
 8018848:	e7f8      	b.n	801883c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801884a:	8880      	ldrh	r0, [r0, #4]
 801884c:	4420      	add	r0, r4
 801884e:	b200      	sxth	r0, r0
 8018850:	1a40      	subs	r0, r0, r1
 8018852:	e7f8      	b.n	8018846 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018854:	18a0      	adds	r0, r4, r2
 8018856:	e7f1      	b.n	801883c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018858 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018858:	2b02      	cmp	r3, #2
 801885a:	b510      	push	{r4, lr}
 801885c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018860:	d006      	beq.n	8018870 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018862:	2b03      	cmp	r3, #3
 8018864:	d00a      	beq.n	801887c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018866:	2b01      	cmp	r3, #1
 8018868:	bf14      	ite	ne
 801886a:	18a0      	addne	r0, r4, r2
 801886c:	1860      	addeq	r0, r4, r1
 801886e:	bd10      	pop	{r4, pc}
 8018870:	88c0      	ldrh	r0, [r0, #6]
 8018872:	4420      	add	r0, r4
 8018874:	b200      	sxth	r0, r0
 8018876:	1a80      	subs	r0, r0, r2
 8018878:	3801      	subs	r0, #1
 801887a:	e7f8      	b.n	801886e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801887c:	88c0      	ldrh	r0, [r0, #6]
 801887e:	4420      	add	r0, r4
 8018880:	b200      	sxth	r0, r0
 8018882:	1a40      	subs	r0, r0, r1
 8018884:	e7f8      	b.n	8018878 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08018888 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018888:	4b01      	ldr	r3, [pc, #4]	; (8018890 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801888a:	2200      	movs	r2, #0
 801888c:	601a      	str	r2, [r3, #0]
 801888e:	4770      	bx	lr
 8018890:	2400aef4 	.word	0x2400aef4

08018894 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8018894:	4603      	mov	r3, r0
 8018896:	b1c8      	cbz	r0, 80188cc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8018898:	0c02      	lsrs	r2, r0, #16
 801889a:	0412      	lsls	r2, r2, #16
 801889c:	b9a2      	cbnz	r2, 80188c8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801889e:	0403      	lsls	r3, r0, #16
 80188a0:	2010      	movs	r0, #16
 80188a2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80188a6:	bf04      	itt	eq
 80188a8:	021b      	lsleq	r3, r3, #8
 80188aa:	3008      	addeq	r0, #8
 80188ac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80188b0:	bf04      	itt	eq
 80188b2:	011b      	lsleq	r3, r3, #4
 80188b4:	3004      	addeq	r0, #4
 80188b6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80188ba:	bf04      	itt	eq
 80188bc:	009b      	lsleq	r3, r3, #2
 80188be:	3002      	addeq	r0, #2
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	db04      	blt.n	80188ce <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80188c4:	3001      	adds	r0, #1
 80188c6:	4770      	bx	lr
 80188c8:	2000      	movs	r0, #0
 80188ca:	e7ea      	b.n	80188a2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80188cc:	2020      	movs	r0, #32
 80188ce:	4770      	bx	lr

080188d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80188d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d4:	b087      	sub	sp, #28
 80188d6:	4681      	mov	r9, r0
 80188d8:	4698      	mov	r8, r3
 80188da:	4610      	mov	r0, r2
 80188dc:	460d      	mov	r5, r1
 80188de:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80188e2:	b981      	cbnz	r1, 8018906 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80188e4:	b14b      	cbz	r3, 80188fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80188e6:	460b      	mov	r3, r1
 80188e8:	464a      	mov	r2, r9
 80188ea:	4641      	mov	r1, r8
 80188ec:	e9cd 4700 	strd	r4, r7, [sp]
 80188f0:	f7ff ffee 	bl	80188d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80188f4:	b007      	add	sp, #28
 80188f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188fa:	f04f 33ff 	mov.w	r3, #4294967295
 80188fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018902:	603b      	str	r3, [r7, #0]
 8018904:	e7f6      	b.n	80188f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018906:	fa32 fa01 	lsrs.w	sl, r2, r1
 801890a:	d107      	bne.n	801891c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801890c:	fb09 f602 	mul.w	r6, r9, r2
 8018910:	fbb6 f0f4 	udiv	r0, r6, r4
 8018914:	fb04 6610 	mls	r6, r4, r0, r6
 8018918:	603e      	str	r6, [r7, #0]
 801891a:	e7eb      	b.n	80188f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801891c:	2601      	movs	r6, #1
 801891e:	fa09 fb01 	lsl.w	fp, r9, r1
 8018922:	408e      	lsls	r6, r1
 8018924:	fbbb f3f4 	udiv	r3, fp, r4
 8018928:	3e01      	subs	r6, #1
 801892a:	9302      	str	r3, [sp, #8]
 801892c:	fb0a f303 	mul.w	r3, sl, r3
 8018930:	4016      	ands	r6, r2
 8018932:	9303      	str	r3, [sp, #12]
 8018934:	4630      	mov	r0, r6
 8018936:	f7ff ffad 	bl	8018894 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801893a:	464a      	mov	r2, r9
 801893c:	460b      	mov	r3, r1
 801893e:	4601      	mov	r1, r0
 8018940:	4630      	mov	r0, r6
 8018942:	e9cd 4700 	strd	r4, r7, [sp]
 8018946:	f7ff ffc3 	bl	80188d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801894a:	9b02      	ldr	r3, [sp, #8]
 801894c:	4606      	mov	r6, r0
 801894e:	eb05 0108 	add.w	r1, r5, r8
 8018952:	fb04 bb13 	mls	fp, r4, r3, fp
 8018956:	4658      	mov	r0, fp
 8018958:	f7ff ff9c 	bl	8018894 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801895c:	ab05      	add	r3, sp, #20
 801895e:	465a      	mov	r2, fp
 8018960:	e9cd 4300 	strd	r4, r3, [sp]
 8018964:	4603      	mov	r3, r0
 8018966:	4650      	mov	r0, sl
 8018968:	f7ff ffb2 	bl	80188d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801896c:	6839      	ldr	r1, [r7, #0]
 801896e:	9a05      	ldr	r2, [sp, #20]
 8018970:	9b03      	ldr	r3, [sp, #12]
 8018972:	4411      	add	r1, r2
 8018974:	fbb1 f2f4 	udiv	r2, r1, r4
 8018978:	18d3      	adds	r3, r2, r3
 801897a:	fb04 1412 	mls	r4, r4, r2, r1
 801897e:	441e      	add	r6, r3
 8018980:	603c      	str	r4, [r7, #0]
 8018982:	4430      	add	r0, r6
 8018984:	e7b6      	b.n	80188f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08018986 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8018986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801898a:	b085      	sub	sp, #20
 801898c:	f1b0 0900 	subs.w	r9, r0, #0
 8018990:	461d      	mov	r5, r3
 8018992:	4617      	mov	r7, r2
 8018994:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018996:	bfbb      	ittet	lt
 8018998:	f1c9 0900 	rsblt	r9, r9, #0
 801899c:	f04f 36ff 	movlt.w	r6, #4294967295
 80189a0:	2601      	movge	r6, #1
 80189a2:	6823      	ldrlt	r3, [r4, #0]
 80189a4:	bfbc      	itt	lt
 80189a6:	425b      	neglt	r3, r3
 80189a8:	6023      	strlt	r3, [r4, #0]
 80189aa:	2a00      	cmp	r2, #0
 80189ac:	da04      	bge.n	80189b8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80189ae:	6823      	ldr	r3, [r4, #0]
 80189b0:	4257      	negs	r7, r2
 80189b2:	4276      	negs	r6, r6
 80189b4:	425b      	negs	r3, r3
 80189b6:	6023      	str	r3, [r4, #0]
 80189b8:	2d00      	cmp	r5, #0
 80189ba:	4638      	mov	r0, r7
 80189bc:	bfba      	itte	lt
 80189be:	426d      	neglt	r5, r5
 80189c0:	f04f 38ff 	movlt.w	r8, #4294967295
 80189c4:	f04f 0801 	movge.w	r8, #1
 80189c8:	f7ff ff64 	bl	8018894 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80189cc:	ab03      	add	r3, sp, #12
 80189ce:	463a      	mov	r2, r7
 80189d0:	e9cd 5300 	strd	r5, r3, [sp]
 80189d4:	4603      	mov	r3, r0
 80189d6:	4648      	mov	r0, r9
 80189d8:	f7ff ff7a 	bl	80188d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80189dc:	6823      	ldr	r3, [r4, #0]
 80189de:	9a03      	ldr	r2, [sp, #12]
 80189e0:	4546      	cmp	r6, r8
 80189e2:	441a      	add	r2, r3
 80189e4:	fb92 f3f5 	sdiv	r3, r2, r5
 80189e8:	4418      	add	r0, r3
 80189ea:	fb05 2313 	mls	r3, r5, r3, r2
 80189ee:	bf18      	it	ne
 80189f0:	4240      	negne	r0, r0
 80189f2:	1c72      	adds	r2, r6, #1
 80189f4:	6023      	str	r3, [r4, #0]
 80189f6:	d105      	bne.n	8018a04 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	f1c3 0200 	rsb	r2, r3, #0
 80189fe:	db0b      	blt.n	8018a18 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8018a00:	6022      	str	r2, [r4, #0]
 8018a02:	e006      	b.n	8018a12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018a04:	2e01      	cmp	r6, #1
 8018a06:	d104      	bne.n	8018a12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	da02      	bge.n	8018a12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018a0c:	442b      	add	r3, r5
 8018a0e:	3801      	subs	r0, #1
 8018a10:	6023      	str	r3, [r4, #0]
 8018a12:	b005      	add	sp, #20
 8018a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a18:	3801      	subs	r0, #1
 8018a1a:	1b52      	subs	r2, r2, r5
 8018a1c:	e7f0      	b.n	8018a00 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08018a20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018a20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018a24:	4c1c      	ldr	r4, [pc, #112]	; (8018a98 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8018a26:	4605      	mov	r5, r0
 8018a28:	6807      	ldr	r7, [r0, #0]
 8018a2a:	69a3      	ldr	r3, [r4, #24]
 8018a2c:	b92b      	cbnz	r3, 8018a3a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8018a2e:	6840      	ldr	r0, [r0, #4]
 8018a30:	e9c5 7000 	strd	r7, r0, [r5]
 8018a34:	b004      	add	sp, #16
 8018a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a3a:	f04f 0802 	mov.w	r8, #2
 8018a3e:	68a2      	ldr	r2, [r4, #8]
 8018a40:	ae04      	add	r6, sp, #16
 8018a42:	6820      	ldr	r0, [r4, #0]
 8018a44:	fb93 f1f8 	sdiv	r1, r3, r8
 8018a48:	440a      	add	r2, r1
 8018a4a:	69e1      	ldr	r1, [r4, #28]
 8018a4c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018a50:	463a      	mov	r2, r7
 8018a52:	9600      	str	r6, [sp, #0]
 8018a54:	f7ff ff97 	bl	8018986 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018a58:	69a3      	ldr	r3, [r4, #24]
 8018a5a:	4607      	mov	r7, r0
 8018a5c:	686a      	ldr	r2, [r5, #4]
 8018a5e:	6a21      	ldr	r1, [r4, #32]
 8018a60:	9600      	str	r6, [sp, #0]
 8018a62:	6860      	ldr	r0, [r4, #4]
 8018a64:	f7ff ff8f 	bl	8018986 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018a68:	69a3      	ldr	r3, [r4, #24]
 8018a6a:	6962      	ldr	r2, [r4, #20]
 8018a6c:	4407      	add	r7, r0
 8018a6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018a70:	9600      	str	r6, [sp, #0]
 8018a72:	68e0      	ldr	r0, [r4, #12]
 8018a74:	fb93 f8f8 	sdiv	r8, r3, r8
 8018a78:	4442      	add	r2, r8
 8018a7a:	9203      	str	r2, [sp, #12]
 8018a7c:	682a      	ldr	r2, [r5, #0]
 8018a7e:	f7ff ff82 	bl	8018986 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018a82:	4680      	mov	r8, r0
 8018a84:	9600      	str	r6, [sp, #0]
 8018a86:	69a3      	ldr	r3, [r4, #24]
 8018a88:	686a      	ldr	r2, [r5, #4]
 8018a8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018a8c:	6920      	ldr	r0, [r4, #16]
 8018a8e:	f7ff ff7a 	bl	8018986 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018a92:	4440      	add	r0, r8
 8018a94:	e7cc      	b.n	8018a30 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8018a96:	bf00      	nop
 8018a98:	2400aef8 	.word	0x2400aef8

08018a9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018a9c:	4b07      	ldr	r3, [pc, #28]	; (8018abc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8018a9e:	781b      	ldrb	r3, [r3, #0]
 8018aa0:	2b01      	cmp	r3, #1
 8018aa2:	d109      	bne.n	8018ab8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8018aa4:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018aa8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018aac:	8003      	strh	r3, [r0, #0]
 8018aae:	4b04      	ldr	r3, [pc, #16]	; (8018ac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018ab0:	881b      	ldrh	r3, [r3, #0]
 8018ab2:	3b01      	subs	r3, #1
 8018ab4:	1a9b      	subs	r3, r3, r2
 8018ab6:	800b      	strh	r3, [r1, #0]
 8018ab8:	4770      	bx	lr
 8018aba:	bf00      	nop
 8018abc:	2400aee4 	.word	0x2400aee4
 8018ac0:	2400aee8 	.word	0x2400aee8

08018ac4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018ac4:	4b07      	ldr	r3, [pc, #28]	; (8018ae4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018ac6:	b510      	push	{r4, lr}
 8018ac8:	781b      	ldrb	r3, [r3, #0]
 8018aca:	2b01      	cmp	r3, #1
 8018acc:	d108      	bne.n	8018ae0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018ace:	4b06      	ldr	r3, [pc, #24]	; (8018ae8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018ad0:	880c      	ldrh	r4, [r1, #0]
 8018ad2:	881b      	ldrh	r3, [r3, #0]
 8018ad4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018ad8:	3b01      	subs	r3, #1
 8018ada:	1b1b      	subs	r3, r3, r4
 8018adc:	8003      	strh	r3, [r0, #0]
 8018ade:	800a      	strh	r2, [r1, #0]
 8018ae0:	bd10      	pop	{r4, pc}
 8018ae2:	bf00      	nop
 8018ae4:	2400aee4 	.word	0x2400aee4
 8018ae8:	2400aee8 	.word	0x2400aee8

08018aec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018aec:	4b0a      	ldr	r3, [pc, #40]	; (8018b18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018aee:	b510      	push	{r4, lr}
 8018af0:	781b      	ldrb	r3, [r3, #0]
 8018af2:	2b01      	cmp	r3, #1
 8018af4:	d10e      	bne.n	8018b14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018af6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018afa:	8843      	ldrh	r3, [r0, #2]
 8018afc:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018b00:	18ca      	adds	r2, r1, r3
 8018b02:	4b06      	ldr	r3, [pc, #24]	; (8018b1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018b04:	8044      	strh	r4, [r0, #2]
 8018b06:	881b      	ldrh	r3, [r3, #0]
 8018b08:	1a9b      	subs	r3, r3, r2
 8018b0a:	8003      	strh	r3, [r0, #0]
 8018b0c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018b10:	8081      	strh	r1, [r0, #4]
 8018b12:	80c3      	strh	r3, [r0, #6]
 8018b14:	bd10      	pop	{r4, pc}
 8018b16:	bf00      	nop
 8018b18:	2400aee4 	.word	0x2400aee4
 8018b1c:	2400aee8 	.word	0x2400aee8

08018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018b20:	4b08      	ldr	r3, [pc, #32]	; (8018b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8018b22:	781b      	ldrb	r3, [r3, #0]
 8018b24:	2b01      	cmp	r3, #1
 8018b26:	d10c      	bne.n	8018b42 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8018b28:	8803      	ldrh	r3, [r0, #0]
 8018b2a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8018b2e:	8842      	ldrh	r2, [r0, #2]
 8018b30:	8002      	strh	r2, [r0, #0]
 8018b32:	185a      	adds	r2, r3, r1
 8018b34:	4b04      	ldr	r3, [pc, #16]	; (8018b48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018b36:	881b      	ldrh	r3, [r3, #0]
 8018b38:	1a9b      	subs	r3, r3, r2
 8018b3a:	8043      	strh	r3, [r0, #2]
 8018b3c:	88c3      	ldrh	r3, [r0, #6]
 8018b3e:	80c1      	strh	r1, [r0, #6]
 8018b40:	8083      	strh	r3, [r0, #4]
 8018b42:	4770      	bx	lr
 8018b44:	2400aee4 	.word	0x2400aee4
 8018b48:	2400aee8 	.word	0x2400aee8

08018b4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018b4c:	4b07      	ldr	r3, [pc, #28]	; (8018b6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018b4e:	b510      	push	{r4, lr}
 8018b50:	781b      	ldrb	r3, [r3, #0]
 8018b52:	2b01      	cmp	r3, #1
 8018b54:	d108      	bne.n	8018b68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018b56:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018b5a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018b5e:	8003      	strh	r3, [r0, #0]
 8018b60:	8893      	ldrh	r3, [r2, #4]
 8018b62:	3b01      	subs	r3, #1
 8018b64:	1b1b      	subs	r3, r3, r4
 8018b66:	800b      	strh	r3, [r1, #0]
 8018b68:	bd10      	pop	{r4, pc}
 8018b6a:	bf00      	nop
 8018b6c:	2400aee4 	.word	0x2400aee4

08018b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018b70:	4b0a      	ldr	r3, [pc, #40]	; (8018b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018b72:	460a      	mov	r2, r1
 8018b74:	b510      	push	{r4, lr}
 8018b76:	781b      	ldrb	r3, [r3, #0]
 8018b78:	2b01      	cmp	r3, #1
 8018b7a:	d10d      	bne.n	8018b98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018b7c:	8881      	ldrh	r1, [r0, #4]
 8018b7e:	8803      	ldrh	r3, [r0, #0]
 8018b80:	440b      	add	r3, r1
 8018b82:	4601      	mov	r1, r0
 8018b84:	3b01      	subs	r3, #1
 8018b86:	f821 3b02 	strh.w	r3, [r1], #2
 8018b8a:	f7ff ffdf 	bl	8018b4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018b8e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018b92:	88c2      	ldrh	r2, [r0, #6]
 8018b94:	80c3      	strh	r3, [r0, #6]
 8018b96:	8082      	strh	r2, [r0, #4]
 8018b98:	bd10      	pop	{r4, pc}
 8018b9a:	bf00      	nop
 8018b9c:	2400aee4 	.word	0x2400aee4

08018ba0 <_ZN8touchgfx11Application13requestRedrawEv>:
 8018ba0:	4b06      	ldr	r3, [pc, #24]	; (8018bbc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8018ba2:	2100      	movs	r1, #0
 8018ba4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ba8:	4b05      	ldr	r3, [pc, #20]	; (8018bc0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8018baa:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8018bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018bb2:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8018bb6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8018bba:	4770      	bx	lr
 8018bbc:	2400aee0 	.word	0x2400aee0
 8018bc0:	2400aee2 	.word	0x2400aee2

08018bc4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018bc4:	4b03      	ldr	r3, [pc, #12]	; (8018bd4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018bc6:	6818      	ldr	r0, [r3, #0]
 8018bc8:	b110      	cbz	r0, 8018bd0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018bca:	6803      	ldr	r3, [r0, #0]
 8018bcc:	699b      	ldr	r3, [r3, #24]
 8018bce:	4718      	bx	r3
 8018bd0:	4770      	bx	lr
 8018bd2:	bf00      	nop
 8018bd4:	2400af28 	.word	0x2400af28

08018bd8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018bd8:	4770      	bx	lr
	...

08018bdc <_ZN8touchgfx11Application4drawEv>:
 8018bdc:	4b09      	ldr	r3, [pc, #36]	; (8018c04 <_ZN8touchgfx11Application4drawEv+0x28>)
 8018bde:	b507      	push	{r0, r1, r2, lr}
 8018be0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018be4:	2100      	movs	r1, #0
 8018be6:	4b08      	ldr	r3, [pc, #32]	; (8018c08 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018be8:	9100      	str	r1, [sp, #0]
 8018bea:	4669      	mov	r1, sp
 8018bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018bf0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018bf4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018bf8:	6803      	ldr	r3, [r0, #0]
 8018bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018bfc:	4798      	blx	r3
 8018bfe:	b003      	add	sp, #12
 8018c00:	f85d fb04 	ldr.w	pc, [sp], #4
 8018c04:	2400aee0 	.word	0x2400aee0
 8018c08:	2400aee2 	.word	0x2400aee2

08018c0c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018c0c:	4b03      	ldr	r3, [pc, #12]	; (8018c1c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018c0e:	6818      	ldr	r0, [r3, #0]
 8018c10:	b110      	cbz	r0, 8018c18 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018c12:	6803      	ldr	r3, [r0, #0]
 8018c14:	69db      	ldr	r3, [r3, #28]
 8018c16:	4718      	bx	r3
 8018c18:	4770      	bx	lr
 8018c1a:	bf00      	nop
 8018c1c:	2400af28 	.word	0x2400af28

08018c20 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018c20:	4b03      	ldr	r3, [pc, #12]	; (8018c30 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018c22:	6818      	ldr	r0, [r3, #0]
 8018c24:	b110      	cbz	r0, 8018c2c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018c26:	6803      	ldr	r3, [r0, #0]
 8018c28:	6a1b      	ldr	r3, [r3, #32]
 8018c2a:	4718      	bx	r3
 8018c2c:	4770      	bx	lr
 8018c2e:	bf00      	nop
 8018c30:	2400af28 	.word	0x2400af28

08018c34 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018c34:	4b03      	ldr	r3, [pc, #12]	; (8018c44 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018c36:	6818      	ldr	r0, [r3, #0]
 8018c38:	b110      	cbz	r0, 8018c40 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018c3a:	6803      	ldr	r3, [r0, #0]
 8018c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c3e:	4718      	bx	r3
 8018c40:	4770      	bx	lr
 8018c42:	bf00      	nop
 8018c44:	2400af28 	.word	0x2400af28

08018c48 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018c48:	b570      	push	{r4, r5, r6, lr}
 8018c4a:	4d38      	ldr	r5, [pc, #224]	; (8018d2c <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 8018c4c:	4604      	mov	r4, r0
 8018c4e:	6828      	ldr	r0, [r5, #0]
 8018c50:	b140      	cbz	r0, 8018c64 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018c52:	7a03      	ldrb	r3, [r0, #8]
 8018c54:	b933      	cbnz	r3, 8018c64 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018c56:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018c5a:	6803      	ldr	r3, [r0, #0]
 8018c5c:	689b      	ldr	r3, [r3, #8]
 8018c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c62:	4718      	bx	r3
 8018c64:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8018c68:	b97b      	cbnz	r3, 8018c8a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018c6a:	b170      	cbz	r0, 8018c8a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018c6c:	7a03      	ldrb	r3, [r0, #8]
 8018c6e:	b163      	cbz	r3, 8018c8a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018c70:	4b2f      	ldr	r3, [pc, #188]	; (8018d30 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8018c72:	6818      	ldr	r0, [r3, #0]
 8018c74:	b110      	cbz	r0, 8018c7c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018c76:	6803      	ldr	r3, [r0, #0]
 8018c78:	691b      	ldr	r3, [r3, #16]
 8018c7a:	4798      	blx	r3
 8018c7c:	6828      	ldr	r0, [r5, #0]
 8018c7e:	6803      	ldr	r3, [r0, #0]
 8018c80:	68db      	ldr	r3, [r3, #12]
 8018c82:	4798      	blx	r3
 8018c84:	2301      	movs	r3, #1
 8018c86:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018c8a:	2500      	movs	r5, #0
 8018c8c:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018c90:	42a8      	cmp	r0, r5
 8018c92:	dd0c      	ble.n	8018cae <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8018c94:	1963      	adds	r3, r4, r5
 8018c96:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018c9a:	b132      	cbz	r2, 8018caa <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8018c9c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018ca0:	4413      	add	r3, r2
 8018ca2:	6858      	ldr	r0, [r3, #4]
 8018ca4:	6803      	ldr	r3, [r0, #0]
 8018ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ca8:	4798      	blx	r3
 8018caa:	3501      	adds	r5, #1
 8018cac:	e7ee      	b.n	8018c8c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018cae:	2300      	movs	r3, #0
 8018cb0:	461a      	mov	r2, r3
 8018cb2:	4298      	cmp	r0, r3
 8018cb4:	d10f      	bne.n	8018cd6 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 8018cb6:	1d25      	adds	r5, r4, #4
 8018cb8:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8018cbc:	4291      	cmp	r1, r2
 8018cbe:	dd2d      	ble.n	8018d1c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 8018cc0:	1e48      	subs	r0, r1, #1
 8018cc2:	b280      	uxth	r0, r0
 8018cc4:	4288      	cmp	r0, r1
 8018cc6:	d31a      	bcc.n	8018cfe <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8018cc8:	4b1a      	ldr	r3, [pc, #104]	; (8018d34 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 8018cca:	f240 11a9 	movw	r1, #425	; 0x1a9
 8018cce:	4a1a      	ldr	r2, [pc, #104]	; (8018d38 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8018cd0:	481a      	ldr	r0, [pc, #104]	; (8018d3c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018cd2:	f00e fdc3 	bl	802785c <__assert_func>
 8018cd6:	18e1      	adds	r1, r4, r3
 8018cd8:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8018cdc:	b16d      	cbz	r5, 8018cfa <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 8018cde:	429a      	cmp	r2, r3
 8018ce0:	d00a      	beq.n	8018cf8 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 8018ce2:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8018ce6:	4431      	add	r1, r6
 8018ce8:	684e      	ldr	r6, [r1, #4]
 8018cea:	b291      	uxth	r1, r2
 8018cec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8018cf0:	604e      	str	r6, [r1, #4]
 8018cf2:	18a1      	adds	r1, r4, r2
 8018cf4:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8018cf8:	3201      	adds	r2, #1
 8018cfa:	3301      	adds	r3, #1
 8018cfc:	e7d9      	b.n	8018cb2 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8018cfe:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8018d02:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8018d06:	3304      	adds	r3, #4
 8018d08:	428b      	cmp	r3, r1
 8018d0a:	d004      	beq.n	8018d16 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8018d0c:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8018d10:	f843 6c04 	str.w	r6, [r3, #-4]
 8018d14:	e7f8      	b.n	8018d08 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8018d16:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8018d1a:	e7cd      	b.n	8018cb8 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8018d1c:	4b04      	ldr	r3, [pc, #16]	; (8018d30 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8018d1e:	6818      	ldr	r0, [r3, #0]
 8018d20:	b110      	cbz	r0, 8018d28 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8018d22:	6803      	ldr	r3, [r0, #0]
 8018d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d26:	e79a      	b.n	8018c5e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018d28:	bd70      	pop	{r4, r5, r6, pc}
 8018d2a:	bf00      	nop
 8018d2c:	2400af2c 	.word	0x2400af2c
 8018d30:	2400af28 	.word	0x2400af28
 8018d34:	0802aea0 	.word	0x0802aea0
 8018d38:	0802b0f9 	.word	0x0802b0f9
 8018d3c:	0802aeae 	.word	0x0802aeae

08018d40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018d40:	b570      	push	{r4, r5, r6, lr}
 8018d42:	4606      	mov	r6, r0
 8018d44:	460c      	mov	r4, r1
 8018d46:	b929      	cbnz	r1, 8018d54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018d48:	4b0c      	ldr	r3, [pc, #48]	; (8018d7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018d4a:	2167      	movs	r1, #103	; 0x67
 8018d4c:	4a0c      	ldr	r2, [pc, #48]	; (8018d80 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018d4e:	480d      	ldr	r0, [pc, #52]	; (8018d84 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018d50:	f00e fd84 	bl	802785c <__assert_func>
 8018d54:	2300      	movs	r3, #0
 8018d56:	4d0c      	ldr	r5, [pc, #48]	; (8018d88 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018d58:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018d5c:	6828      	ldr	r0, [r5, #0]
 8018d5e:	b110      	cbz	r0, 8018d66 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018d60:	6803      	ldr	r3, [r0, #0]
 8018d62:	695b      	ldr	r3, [r3, #20]
 8018d64:	4798      	blx	r3
 8018d66:	602c      	str	r4, [r5, #0]
 8018d68:	4620      	mov	r0, r4
 8018d6a:	6823      	ldr	r3, [r4, #0]
 8018d6c:	68db      	ldr	r3, [r3, #12]
 8018d6e:	4798      	blx	r3
 8018d70:	6833      	ldr	r3, [r6, #0]
 8018d72:	4630      	mov	r0, r6
 8018d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d7a:	4718      	bx	r3
 8018d7c:	0802ae6c 	.word	0x0802ae6c
 8018d80:	0802af74 	.word	0x0802af74
 8018d84:	0802ae76 	.word	0x0802ae76
 8018d88:	2400af28 	.word	0x2400af28

08018d8c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018d8c:	b510      	push	{r4, lr}
 8018d8e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018d92:	888a      	ldrh	r2, [r1, #4]
 8018d94:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018d98:	4422      	add	r2, r4
 8018d9a:	b212      	sxth	r2, r2
 8018d9c:	4293      	cmp	r3, r2
 8018d9e:	da15      	bge.n	8018dcc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018da0:	8882      	ldrh	r2, [r0, #4]
 8018da2:	4413      	add	r3, r2
 8018da4:	b21b      	sxth	r3, r3
 8018da6:	429c      	cmp	r4, r3
 8018da8:	da10      	bge.n	8018dcc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018daa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018dae:	88c9      	ldrh	r1, [r1, #6]
 8018db0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018db4:	4419      	add	r1, r3
 8018db6:	b209      	sxth	r1, r1
 8018db8:	428a      	cmp	r2, r1
 8018dba:	da07      	bge.n	8018dcc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018dbc:	88c0      	ldrh	r0, [r0, #6]
 8018dbe:	4410      	add	r0, r2
 8018dc0:	b200      	sxth	r0, r0
 8018dc2:	4283      	cmp	r3, r0
 8018dc4:	bfac      	ite	ge
 8018dc6:	2000      	movge	r0, #0
 8018dc8:	2001      	movlt	r0, #1
 8018dca:	bd10      	pop	{r4, pc}
 8018dcc:	2000      	movs	r0, #0
 8018dce:	e7fc      	b.n	8018dca <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018dd0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018dd0:	b570      	push	{r4, r5, r6, lr}
 8018dd2:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018dd6:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018dda:	42ac      	cmp	r4, r5
 8018ddc:	db18      	blt.n	8018e10 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018dde:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018de2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018de6:	429a      	cmp	r2, r3
 8018de8:	db12      	blt.n	8018e10 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018dea:	8886      	ldrh	r6, [r0, #4]
 8018dec:	4435      	add	r5, r6
 8018dee:	888e      	ldrh	r6, [r1, #4]
 8018df0:	4434      	add	r4, r6
 8018df2:	b22d      	sxth	r5, r5
 8018df4:	b224      	sxth	r4, r4
 8018df6:	42a5      	cmp	r5, r4
 8018df8:	db0a      	blt.n	8018e10 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018dfa:	88c0      	ldrh	r0, [r0, #6]
 8018dfc:	4418      	add	r0, r3
 8018dfe:	88cb      	ldrh	r3, [r1, #6]
 8018e00:	441a      	add	r2, r3
 8018e02:	b200      	sxth	r0, r0
 8018e04:	b212      	sxth	r2, r2
 8018e06:	4290      	cmp	r0, r2
 8018e08:	bfb4      	ite	lt
 8018e0a:	2000      	movlt	r0, #0
 8018e0c:	2001      	movge	r0, #1
 8018e0e:	bd70      	pop	{r4, r5, r6, pc}
 8018e10:	2000      	movs	r0, #0
 8018e12:	e7fc      	b.n	8018e0e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018e14 <_ZN8touchgfx11Application11getInstanceEv>:
 8018e14:	4b01      	ldr	r3, [pc, #4]	; (8018e1c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018e16:	6818      	ldr	r0, [r3, #0]
 8018e18:	4770      	bx	lr
 8018e1a:	bf00      	nop
 8018e1c:	2400af38 	.word	0x2400af38

08018e20 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8018e20:	b570      	push	{r4, r5, r6, lr}
 8018e22:	2200      	movs	r2, #0
 8018e24:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8018e28:	1d04      	adds	r4, r0, #4
 8018e2a:	b295      	uxth	r5, r2
 8018e2c:	42ab      	cmp	r3, r5
 8018e2e:	d90e      	bls.n	8018e4e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 8018e30:	f854 6b04 	ldr.w	r6, [r4], #4
 8018e34:	4615      	mov	r5, r2
 8018e36:	3201      	adds	r2, #1
 8018e38:	428e      	cmp	r6, r1
 8018e3a:	d1f6      	bne.n	8018e2a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8018e3c:	4428      	add	r0, r5
 8018e3e:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8018e42:	2bff      	cmp	r3, #255	; 0xff
 8018e44:	d002      	beq.n	8018e4c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8018e46:	3301      	adds	r3, #1
 8018e48:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8018e4c:	bd70      	pop	{r4, r5, r6, pc}
 8018e4e:	2b20      	cmp	r3, #32
 8018e50:	d106      	bne.n	8018e60 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 8018e52:	4b09      	ldr	r3, [pc, #36]	; (8018e78 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 8018e54:	f240 215f 	movw	r1, #607	; 0x25f
 8018e58:	4a08      	ldr	r2, [pc, #32]	; (8018e7c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 8018e5a:	4809      	ldr	r0, [pc, #36]	; (8018e80 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 8018e5c:	f00e fcfe 	bl	802785c <__assert_func>
 8018e60:	18c2      	adds	r2, r0, r3
 8018e62:	2401      	movs	r4, #1
 8018e64:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8018e68:	191a      	adds	r2, r3, r4
 8018e6a:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 8018e6e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8018e72:	6041      	str	r1, [r0, #4]
 8018e74:	e7ea      	b.n	8018e4c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8018e76:	bf00      	nop
 8018e78:	0802aed7 	.word	0x0802aed7
 8018e7c:	0802afb8 	.word	0x0802afb8
 8018e80:	0802ae76 	.word	0x0802ae76

08018e84 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8018e84:	b570      	push	{r4, r5, r6, lr}
 8018e86:	2300      	movs	r3, #0
 8018e88:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8018e8c:	1d04      	adds	r4, r0, #4
 8018e8e:	b29a      	uxth	r2, r3
 8018e90:	4296      	cmp	r6, r2
 8018e92:	d90a      	bls.n	8018eaa <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8018e94:	f854 2b04 	ldr.w	r2, [r4], #4
 8018e98:	428a      	cmp	r2, r1
 8018e9a:	d107      	bne.n	8018eac <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8018e9c:	18c5      	adds	r5, r0, r3
 8018e9e:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8018ea2:	b11a      	cbz	r2, 8018eac <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8018ea4:	3a01      	subs	r2, #1
 8018ea6:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8018eaa:	bd70      	pop	{r4, r5, r6, pc}
 8018eac:	3301      	adds	r3, #1
 8018eae:	e7ee      	b.n	8018e8e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08018eb0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018eb6:	30a8      	adds	r0, #168	; 0xa8
 8018eb8:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018ebc:	f802 3b01 	strb.w	r3, [r2], #1
 8018ec0:	4282      	cmp	r2, r0
 8018ec2:	d1fb      	bne.n	8018ebc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018ec4:	4770      	bx	lr

08018ec6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018ecc:	2200      	movs	r2, #0
 8018ece:	801a      	strh	r2, [r3, #0]
 8018ed0:	3308      	adds	r3, #8
 8018ed2:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018ed6:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018eda:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018ede:	428b      	cmp	r3, r1
 8018ee0:	d1f5      	bne.n	8018ece <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018ee2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018ee6:	4770      	bx	lr

08018ee8 <_ZN8touchgfx11ApplicationC1Ev>:
 8018ee8:	b570      	push	{r4, r5, r6, lr}
 8018eea:	4b1a      	ldr	r3, [pc, #104]	; (8018f54 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018eec:	2500      	movs	r5, #0
 8018eee:	4604      	mov	r4, r0
 8018ef0:	30a8      	adds	r0, #168	; 0xa8
 8018ef2:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018ef6:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018efa:	f7ff ffe4 	bl	8018ec6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018efe:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018f02:	f7ff ffe0 	bl	8018ec6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018f06:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8018f0a:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8018f0e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018f12:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8018f16:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8018f1a:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8018f1e:	490e      	ldr	r1, [pc, #56]	; (8018f58 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018f20:	480e      	ldr	r0, [pc, #56]	; (8018f5c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018f22:	f00e fb5f 	bl	80275e4 <CRC_Lock>
 8018f26:	4e0e      	ldr	r6, [pc, #56]	; (8018f60 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018f28:	4b0e      	ldr	r3, [pc, #56]	; (8018f64 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018f2a:	b158      	cbz	r0, 8018f44 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8018f2c:	801d      	strh	r5, [r3, #0]
 8018f2e:	2300      	movs	r3, #0
 8018f30:	4a0d      	ldr	r2, [pc, #52]	; (8018f68 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018f32:	4620      	mov	r0, r4
 8018f34:	6013      	str	r3, [r2, #0]
 8018f36:	4a0d      	ldr	r2, [pc, #52]	; (8018f6c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018f38:	6033      	str	r3, [r6, #0]
 8018f3a:	6013      	str	r3, [r2, #0]
 8018f3c:	f7ff ffb8 	bl	8018eb0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018f40:	4620      	mov	r0, r4
 8018f42:	bd70      	pop	{r4, r5, r6, pc}
 8018f44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018f48:	2002      	movs	r0, #2
 8018f4a:	801a      	strh	r2, [r3, #0]
 8018f4c:	6030      	str	r0, [r6, #0]
 8018f4e:	f001 f9e5 	bl	801a31c <_ZN8touchgfx6Screen4drawEv>
 8018f52:	e7ec      	b.n	8018f2e <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8018f54:	0802af38 	.word	0x0802af38
 8018f58:	b5e8b5cd 	.word	0xb5e8b5cd
 8018f5c:	f407a5c2 	.word	0xf407a5c2
 8018f60:	2400af28 	.word	0x2400af28
 8018f64:	2400004e 	.word	0x2400004e
 8018f68:	2400af38 	.word	0x2400af38
 8018f6c:	2400af2c 	.word	0x2400af2c

08018f70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018f70:	b510      	push	{r4, lr}
 8018f72:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018f76:	428b      	cmp	r3, r1
 8018f78:	d806      	bhi.n	8018f88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 8018f7a:	4b0b      	ldr	r3, [pc, #44]	; (8018fa8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 8018f7c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8018f80:	4a0a      	ldr	r2, [pc, #40]	; (8018fac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 8018f82:	480b      	ldr	r0, [pc, #44]	; (8018fb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 8018f84:	f00e fc6a 	bl	802785c <__assert_func>
 8018f88:	3b01      	subs	r3, #1
 8018f8a:	b29b      	uxth	r3, r3
 8018f8c:	428b      	cmp	r3, r1
 8018f8e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018f92:	d908      	bls.n	8018fa6 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 8018f94:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018f98:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018f9c:	681a      	ldr	r2, [r3, #0]
 8018f9e:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018fa2:	685a      	ldr	r2, [r3, #4]
 8018fa4:	6062      	str	r2, [r4, #4]
 8018fa6:	bd10      	pop	{r4, pc}
 8018fa8:	0802aea0 	.word	0x0802aea0
 8018fac:	0802affd 	.word	0x0802affd
 8018fb0:	0802aeae 	.word	0x0802aeae

08018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018fb6:	466b      	mov	r3, sp
 8018fb8:	4604      	mov	r4, r0
 8018fba:	e883 0006 	stmia.w	r3, {r1, r2}
 8018fbe:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018fc2:	2a07      	cmp	r2, #7
 8018fc4:	d906      	bls.n	8018fd4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018fc6:	4b09      	ldr	r3, [pc, #36]	; (8018fec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018fc8:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8018fcc:	4a08      	ldr	r2, [pc, #32]	; (8018ff0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018fce:	4809      	ldr	r0, [pc, #36]	; (8018ff4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018fd0:	f00e fc44 	bl	802785c <__assert_func>
 8018fd4:	1c51      	adds	r1, r2, #1
 8018fd6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018fda:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018fde:	cb03      	ldmia	r3!, {r0, r1}
 8018fe0:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018fe4:	6069      	str	r1, [r5, #4]
 8018fe6:	b003      	add	sp, #12
 8018fe8:	bd30      	pop	{r4, r5, pc}
 8018fea:	bf00      	nop
 8018fec:	0802aeff 	.word	0x0802aeff
 8018ff0:	0802b093 	.word	0x0802b093
 8018ff4:	0802aeae 	.word	0x0802aeae

08018ff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ffc:	b08d      	sub	sp, #52	; 0x34
 8018ffe:	4683      	mov	fp, r0
 8019000:	ac08      	add	r4, sp, #32
 8019002:	4620      	mov	r0, r4
 8019004:	e884 0006 	stmia.w	r4, {r1, r2}
 8019008:	f7fc f831 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801900c:	2800      	cmp	r0, #0
 801900e:	d16a      	bne.n	80190e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019010:	9402      	str	r4, [sp, #8]
 8019012:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8019016:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801901a:	2400      	movs	r4, #0
 801901c:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8019020:	9301      	str	r3, [sp, #4]
 8019022:	36a0      	adds	r6, #160	; 0xa0
 8019024:	42a5      	cmp	r5, r4
 8019026:	d00d      	beq.n	8019044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8019028:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801902c:	9802      	ldr	r0, [sp, #8]
 801902e:	f7ff fecf 	bl	8018dd0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019032:	b128      	cbz	r0, 8019040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8019034:	1e69      	subs	r1, r5, #1
 8019036:	9801      	ldr	r0, [sp, #4]
 8019038:	1b09      	subs	r1, r1, r4
 801903a:	b289      	uxth	r1, r1
 801903c:	f7ff ff98 	bl	8018f70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019040:	3401      	adds	r4, #1
 8019042:	e7ef      	b.n	8019024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019044:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8019048:	1e7b      	subs	r3, r7, #1
 801904a:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801904e:	9703      	str	r7, [sp, #12]
 8019050:	9300      	str	r3, [sp, #0]
 8019052:	2400      	movs	r4, #0
 8019054:	4655      	mov	r5, sl
 8019056:	9704      	str	r7, [sp, #16]
 8019058:	4626      	mov	r6, r4
 801905a:	9b04      	ldr	r3, [sp, #16]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d078      	beq.n	8019152 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8019060:	9902      	ldr	r1, [sp, #8]
 8019062:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8019066:	f7ff fe91 	bl	8018d8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801906a:	b360      	cbz	r0, 80190c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801906c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8019070:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8019074:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8019078:	45e6      	cmp	lr, ip
 801907a:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801907e:	db35      	blt.n	80190ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8019080:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8019084:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8019088:	4472      	add	r2, lr
 801908a:	4463      	add	r3, ip
 801908c:	b212      	sxth	r2, r2
 801908e:	b21b      	sxth	r3, r3
 8019090:	429a      	cmp	r2, r3
 8019092:	dc2b      	bgt.n	80190ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8019094:	fa1f f288 	uxth.w	r2, r8
 8019098:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801909c:	45c1      	cmp	r9, r8
 801909e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80190a2:	4413      	add	r3, r2
 80190a4:	fa1f fc89 	uxth.w	ip, r9
 80190a8:	b29b      	uxth	r3, r3
 80190aa:	fa0f fe83 	sxth.w	lr, r3
 80190ae:	db0f      	blt.n	80190d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 80190b0:	eba3 030c 	sub.w	r3, r3, ip
 80190b4:	1ac9      	subs	r1, r1, r3
 80190b6:	b209      	sxth	r1, r1
 80190b8:	2900      	cmp	r1, #0
 80190ba:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80190be:	dd12      	ble.n	80190e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80190c0:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 80190c4:	4604      	mov	r4, r0
 80190c6:	9b04      	ldr	r3, [sp, #16]
 80190c8:	3d08      	subs	r5, #8
 80190ca:	3b01      	subs	r3, #1
 80190cc:	9304      	str	r3, [sp, #16]
 80190ce:	e7c4      	b.n	801905a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80190d0:	4461      	add	r1, ip
 80190d2:	b209      	sxth	r1, r1
 80190d4:	4571      	cmp	r1, lr
 80190d6:	dc3a      	bgt.n	801914e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80190d8:	eba2 020c 	sub.w	r2, r2, ip
 80190dc:	b212      	sxth	r2, r2
 80190de:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80190e2:	2a00      	cmp	r2, #0
 80190e4:	dcee      	bgt.n	80190c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80190e6:	b00d      	add	sp, #52	; 0x34
 80190e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ec:	45c1      	cmp	r9, r8
 80190ee:	db2e      	blt.n	801914e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80190f0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80190f4:	4499      	add	r9, r3
 80190f6:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80190fa:	4498      	add	r8, r3
 80190fc:	fa0f f989 	sxth.w	r9, r9
 8019100:	fa0f f888 	sxth.w	r8, r8
 8019104:	45c1      	cmp	r9, r8
 8019106:	dc22      	bgt.n	801914e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8019108:	fa1f f28c 	uxth.w	r2, ip
 801910c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8019110:	45e6      	cmp	lr, ip
 8019112:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019116:	4413      	add	r3, r2
 8019118:	fa1f f88e 	uxth.w	r8, lr
 801911c:	b29b      	uxth	r3, r3
 801911e:	fa0f f983 	sxth.w	r9, r3
 8019122:	db0a      	blt.n	801913a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8019124:	eba3 0308 	sub.w	r3, r3, r8
 8019128:	1ac9      	subs	r1, r1, r3
 801912a:	b209      	sxth	r1, r1
 801912c:	2900      	cmp	r1, #0
 801912e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8019132:	ddd8      	ble.n	80190e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019134:	f8ad 9020 	strh.w	r9, [sp, #32]
 8019138:	e7c4      	b.n	80190c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801913a:	4441      	add	r1, r8
 801913c:	b209      	sxth	r1, r1
 801913e:	4549      	cmp	r1, r9
 8019140:	dc05      	bgt.n	801914e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8019142:	eba2 0208 	sub.w	r2, r2, r8
 8019146:	b212      	sxth	r2, r2
 8019148:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801914c:	e7c9      	b.n	80190e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801914e:	4606      	mov	r6, r0
 8019150:	e7b9      	b.n	80190c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8019152:	2c00      	cmp	r4, #0
 8019154:	f47f af7d 	bne.w	8019052 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8019158:	2e00      	cmp	r6, #0
 801915a:	f000 81dc 	beq.w	8019516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801915e:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8019162:	4655      	mov	r5, sl
 8019164:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8019168:	b2b9      	uxth	r1, r7
 801916a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801916e:	b2b3      	uxth	r3, r6
 8019170:	9104      	str	r1, [sp, #16]
 8019172:	9804      	ldr	r0, [sp, #16]
 8019174:	441a      	add	r2, r3
 8019176:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801917a:	b292      	uxth	r2, r2
 801917c:	4401      	add	r1, r0
 801917e:	fa0f f882 	sxth.w	r8, r2
 8019182:	b289      	uxth	r1, r1
 8019184:	9105      	str	r1, [sp, #20]
 8019186:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801918a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801918e:	9b03      	ldr	r3, [sp, #12]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d054      	beq.n	801923e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8019194:	9902      	ldr	r1, [sp, #8]
 8019196:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801919a:	f7ff fdf7 	bl	8018d8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801919e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80191a2:	b1d8      	cbz	r0, 80191dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80191a4:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80191a8:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80191ac:	4576      	cmp	r6, lr
 80191ae:	dc26      	bgt.n	80191fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80191b0:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80191b4:	44f4      	add	ip, lr
 80191b6:	fa0f fc8c 	sxth.w	ip, ip
 80191ba:	45e0      	cmp	r8, ip
 80191bc:	db1f      	blt.n	80191fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80191be:	428f      	cmp	r7, r1
 80191c0:	fa1f fc81 	uxth.w	ip, r1
 80191c4:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 80191c8:	dc0f      	bgt.n	80191ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80191ca:	9805      	ldr	r0, [sp, #20]
 80191cc:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 80191d0:	eba0 0c0c 	sub.w	ip, r0, ip
 80191d4:	eba1 010c 	sub.w	r1, r1, ip
 80191d8:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 80191dc:	4620      	mov	r0, r4
 80191de:	9903      	ldr	r1, [sp, #12]
 80191e0:	3d08      	subs	r5, #8
 80191e2:	4604      	mov	r4, r0
 80191e4:	3901      	subs	r1, #1
 80191e6:	9103      	str	r1, [sp, #12]
 80191e8:	e7cf      	b.n	801918a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 80191ea:	4461      	add	r1, ip
 80191ec:	b209      	sxth	r1, r1
 80191ee:	4549      	cmp	r1, r9
 80191f0:	dcf5      	bgt.n	80191de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80191f2:	9904      	ldr	r1, [sp, #16]
 80191f4:	eba1 0c0c 	sub.w	ip, r1, ip
 80191f8:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 80191fc:	e7ee      	b.n	80191dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80191fe:	428f      	cmp	r7, r1
 8019200:	dced      	bgt.n	80191de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019202:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8019206:	4461      	add	r1, ip
 8019208:	b209      	sxth	r1, r1
 801920a:	4589      	cmp	r9, r1
 801920c:	dbe7      	blt.n	80191de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801920e:	4576      	cmp	r6, lr
 8019210:	fa1f fc8e 	uxth.w	ip, lr
 8019214:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8019218:	dc08      	bgt.n	801922c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801921a:	eba2 0c0c 	sub.w	ip, r2, ip
 801921e:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8019222:	eba1 010c 	sub.w	r1, r1, ip
 8019226:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801922a:	e7d7      	b.n	80191dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801922c:	4461      	add	r1, ip
 801922e:	b209      	sxth	r1, r1
 8019230:	4588      	cmp	r8, r1
 8019232:	dbd4      	blt.n	80191de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019234:	eba3 0c0c 	sub.w	ip, r3, ip
 8019238:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801923c:	e7ce      	b.n	80191dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801923e:	2c00      	cmp	r4, #0
 8019240:	f000 8169 	beq.w	8019516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019244:	9b00      	ldr	r3, [sp, #0]
 8019246:	3301      	adds	r3, #1
 8019248:	f000 8165 	beq.w	8019516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801924c:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8019250:	9802      	ldr	r0, [sp, #8]
 8019252:	4621      	mov	r1, r4
 8019254:	f7ff fdbc 	bl	8018dd0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019258:	b120      	cbz	r0, 8019264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801925a:	f8bd 1000 	ldrh.w	r1, [sp]
 801925e:	9801      	ldr	r0, [sp, #4]
 8019260:	f7ff fe86 	bl	8018f70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019264:	9902      	ldr	r1, [sp, #8]
 8019266:	4620      	mov	r0, r4
 8019268:	f7ff fd90 	bl	8018d8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801926c:	2800      	cmp	r0, #0
 801926e:	f000 809b 	beq.w	80193a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8019272:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8019276:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801927a:	fa1f f288 	uxth.w	r2, r8
 801927e:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8019282:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8019286:	19d5      	adds	r5, r2, r7
 8019288:	b2a1      	uxth	r1, r4
 801928a:	45a0      	cmp	r8, r4
 801928c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019290:	fa1f f985 	uxth.w	r9, r5
 8019294:	440b      	add	r3, r1
 8019296:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801929a:	fa0f f589 	sxth.w	r5, r9
 801929e:	b29b      	uxth	r3, r3
 80192a0:	9503      	str	r5, [sp, #12]
 80192a2:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80192a6:	9507      	str	r5, [sp, #28]
 80192a8:	f340 809d 	ble.w	80193e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80192ac:	1a52      	subs	r2, r2, r1
 80192ae:	4584      	cmp	ip, r0
 80192b0:	fa0f fe83 	sxth.w	lr, r3
 80192b4:	b292      	uxth	r2, r2
 80192b6:	b215      	sxth	r5, r2
 80192b8:	dd2f      	ble.n	801931a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 80192ba:	9e00      	ldr	r6, [sp, #0]
 80192bc:	fa1f fc8c 	uxth.w	ip, ip
 80192c0:	b280      	uxth	r0, r0
 80192c2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80192c6:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 80192ca:	9e03      	ldr	r6, [sp, #12]
 80192cc:	ebac 0300 	sub.w	r3, ip, r0
 80192d0:	448c      	add	ip, r1
 80192d2:	eba6 060e 	sub.w	r6, r6, lr
 80192d6:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 80192da:	b29b      	uxth	r3, r3
 80192dc:	4470      	add	r0, lr
 80192de:	fa0f fc8c 	sxth.w	ip, ip
 80192e2:	b21c      	sxth	r4, r3
 80192e4:	b200      	sxth	r0, r0
 80192e6:	4366      	muls	r6, r4
 80192e8:	ebac 0000 	sub.w	r0, ip, r0
 80192ec:	4368      	muls	r0, r5
 80192ee:	4286      	cmp	r6, r0
 80192f0:	db09      	blt.n	8019306 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 80192f2:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 80192f6:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80192fa:	4417      	add	r7, r2
 80192fc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019300:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8019304:	e685      	b.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019306:	440b      	add	r3, r1
 8019308:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801930c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019310:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8019314:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019318:	e67b      	b.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801931a:	9e03      	ldr	r6, [sp, #12]
 801931c:	45b6      	cmp	lr, r6
 801931e:	da28      	bge.n	8019372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8019320:	9b00      	ldr	r3, [sp, #0]
 8019322:	eba6 060e 	sub.w	r6, r6, lr
 8019326:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801932a:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801932e:	eb04 030c 	add.w	r3, r4, ip
 8019332:	fa1f f883 	uxth.w	r8, r3
 8019336:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801933a:	4403      	add	r3, r0
 801933c:	fa0f f988 	sxth.w	r9, r8
 8019340:	eba0 000c 	sub.w	r0, r0, ip
 8019344:	eba3 0308 	sub.w	r3, r3, r8
 8019348:	4368      	muls	r0, r5
 801934a:	b29b      	uxth	r3, r3
 801934c:	fa0f f883 	sxth.w	r8, r3
 8019350:	fb08 f606 	mul.w	r6, r8, r6
 8019354:	42b0      	cmp	r0, r6
 8019356:	dc06      	bgt.n	8019366 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8019358:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801935c:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8019360:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8019364:	e7c9      	b.n	80192fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8019366:	4423      	add	r3, r4
 8019368:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801936c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019370:	e64f      	b.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019372:	eba3 0309 	sub.w	r3, r3, r9
 8019376:	9807      	ldr	r0, [sp, #28]
 8019378:	b29b      	uxth	r3, r3
 801937a:	2806      	cmp	r0, #6
 801937c:	fa0f fc83 	sxth.w	ip, r3
 8019380:	d818      	bhi.n	80193b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8019382:	4652      	mov	r2, sl
 8019384:	ab0a      	add	r3, sp, #40	; 0x28
 8019386:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801938a:	6851      	ldr	r1, [r2, #4]
 801938c:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8019390:	c303      	stmia	r3!, {r0, r1}
 8019392:	9b03      	ldr	r3, [sp, #12]
 8019394:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8019398:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801939c:	ab0a      	add	r3, sp, #40	; 0x28
 801939e:	9801      	ldr	r0, [sp, #4]
 80193a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80193a4:	f7ff fe06 	bl	8018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80193a8:	9b00      	ldr	r3, [sp, #0]
 80193aa:	f1aa 0a08 	sub.w	sl, sl, #8
 80193ae:	3b01      	subs	r3, #1
 80193b0:	9300      	str	r3, [sp, #0]
 80193b2:	e747      	b.n	8019244 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80193b4:	9800      	ldr	r0, [sp, #0]
 80193b6:	45ac      	cmp	ip, r5
 80193b8:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80193bc:	db0c      	blt.n	80193d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 80193be:	4417      	add	r7, r2
 80193c0:	4458      	add	r0, fp
 80193c2:	f8ad 4020 	strh.w	r4, [sp, #32]
 80193c6:	b2bf      	uxth	r7, r7
 80193c8:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 80193cc:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80193d0:	440f      	add	r7, r1
 80193d2:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 80193d6:	e61c      	b.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80193d8:	4458      	add	r0, fp
 80193da:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 80193de:	443b      	add	r3, r7
 80193e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80193e4:	e615      	b.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80193e6:	fa1f f18c 	uxth.w	r1, ip
 80193ea:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 80193ee:	b282      	uxth	r2, r0
 80193f0:	4584      	cmp	ip, r0
 80193f2:	eb01 0e05 	add.w	lr, r1, r5
 80193f6:	9204      	str	r2, [sp, #16]
 80193f8:	fa1f fe8e 	uxth.w	lr, lr
 80193fc:	9e04      	ldr	r6, [sp, #16]
 80193fe:	fa0f f28e 	sxth.w	r2, lr
 8019402:	9205      	str	r2, [sp, #20]
 8019404:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8019408:	4432      	add	r2, r6
 801940a:	b292      	uxth	r2, r2
 801940c:	9206      	str	r2, [sp, #24]
 801940e:	da26      	bge.n	801945e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8019410:	eba3 0309 	sub.w	r3, r3, r9
 8019414:	eba2 020e 	sub.w	r2, r2, lr
 8019418:	eba0 000c 	sub.w	r0, r0, ip
 801941c:	eba4 0408 	sub.w	r4, r4, r8
 8019420:	b29b      	uxth	r3, r3
 8019422:	b292      	uxth	r2, r2
 8019424:	fa0f fa83 	sxth.w	sl, r3
 8019428:	b211      	sxth	r1, r2
 801942a:	fb0a f000 	mul.w	r0, sl, r0
 801942e:	434c      	muls	r4, r1
 8019430:	42a0      	cmp	r0, r4
 8019432:	9800      	ldr	r0, [sp, #0]
 8019434:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8019438:	dc06      	bgt.n	8019448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801943a:	4458      	add	r0, fp
 801943c:	9a05      	ldr	r2, [sp, #20]
 801943e:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8019442:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8019446:	e7ca      	b.n	80193de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019448:	eb0b 0300 	add.w	r3, fp, r0
 801944c:	9903      	ldr	r1, [sp, #12]
 801944e:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8019452:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8019456:	442a      	add	r2, r5
 8019458:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801945c:	e5d9      	b.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801945e:	9e04      	ldr	r6, [sp, #16]
 8019460:	9a03      	ldr	r2, [sp, #12]
 8019462:	1b89      	subs	r1, r1, r6
 8019464:	b21e      	sxth	r6, r3
 8019466:	b289      	uxth	r1, r1
 8019468:	4296      	cmp	r6, r2
 801946a:	fa0f fc81 	sxth.w	ip, r1
 801946e:	dd25      	ble.n	80194bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8019470:	eba3 0309 	sub.w	r3, r3, r9
 8019474:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8019478:	9e05      	ldr	r6, [sp, #20]
 801947a:	eba4 0408 	sub.w	r4, r4, r8
 801947e:	b29b      	uxth	r3, r3
 8019480:	eba6 0902 	sub.w	r9, r6, r2
 8019484:	fb0c f404 	mul.w	r4, ip, r4
 8019488:	b218      	sxth	r0, r3
 801948a:	9a00      	ldr	r2, [sp, #0]
 801948c:	fb00 f909 	mul.w	r9, r0, r9
 8019490:	00d2      	lsls	r2, r2, #3
 8019492:	454c      	cmp	r4, r9
 8019494:	db03      	blt.n	801949e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8019496:	445a      	add	r2, fp
 8019498:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801949c:	e79f      	b.n	80193de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801949e:	eb0b 0302 	add.w	r3, fp, r2
 80194a2:	9a03      	ldr	r2, [sp, #12]
 80194a4:	4429      	add	r1, r5
 80194a6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80194aa:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80194ae:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80194b2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80194b6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80194ba:	e5aa      	b.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80194bc:	9b06      	ldr	r3, [sp, #24]
 80194be:	9c07      	ldr	r4, [sp, #28]
 80194c0:	eba3 020e 	sub.w	r2, r3, lr
 80194c4:	2c06      	cmp	r4, #6
 80194c6:	b292      	uxth	r2, r2
 80194c8:	b213      	sxth	r3, r2
 80194ca:	d80d      	bhi.n	80194e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 80194cc:	4651      	mov	r1, sl
 80194ce:	aa0a      	add	r2, sp, #40	; 0x28
 80194d0:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 80194d4:	6849      	ldr	r1, [r1, #4]
 80194d6:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 80194da:	9b05      	ldr	r3, [sp, #20]
 80194dc:	c203      	stmia	r2!, {r0, r1}
 80194de:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80194e2:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 80194e6:	e759      	b.n	801939c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 80194e8:	9c00      	ldr	r4, [sp, #0]
 80194ea:	4563      	cmp	r3, ip
 80194ec:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80194f0:	db0d      	blt.n	801950e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 80194f2:	4429      	add	r1, r5
 80194f4:	9a04      	ldr	r2, [sp, #16]
 80194f6:	445c      	add	r4, fp
 80194f8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80194fc:	b289      	uxth	r1, r1
 80194fe:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8019502:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8019506:	4411      	add	r1, r2
 8019508:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801950c:	e581      	b.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801950e:	445c      	add	r4, fp
 8019510:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8019514:	e79f      	b.n	8019456 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8019516:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801951a:	2f07      	cmp	r7, #7
 801951c:	d806      	bhi.n	801952c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801951e:	ab08      	add	r3, sp, #32
 8019520:	9801      	ldr	r0, [sp, #4]
 8019522:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019526:	f7ff fd45 	bl	8018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801952a:	e5dc      	b.n	80190e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801952c:	f107 39ff 	add.w	r9, r7, #4294967295
 8019530:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8019534:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8019538:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801953c:	f04f 35ff 	mov.w	r5, #4294967295
 8019540:	2400      	movs	r4, #0
 8019542:	9304      	str	r3, [sp, #16]
 8019544:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8019548:	f109 32ff 	add.w	r2, r9, #4294967295
 801954c:	9300      	str	r3, [sp, #0]
 801954e:	4690      	mov	r8, r2
 8019550:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8019554:	9303      	str	r3, [sp, #12]
 8019556:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801955a:	f1b8 3fff 	cmp.w	r8, #4294967295
 801955e:	6818      	ldr	r0, [r3, #0]
 8019560:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8019564:	9206      	str	r2, [sp, #24]
 8019566:	bf16      	itet	ne
 8019568:	9904      	ldrne	r1, [sp, #16]
 801956a:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801956e:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8019572:	9305      	str	r3, [sp, #20]
 8019574:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019578:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801957c:	fb16 f601 	smulbb	r6, r6, r1
 8019580:	6859      	ldr	r1, [r3, #4]
 8019582:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019586:	4671      	mov	r1, lr
 8019588:	a80a      	add	r0, sp, #40	; 0x28
 801958a:	f7fc f8c2 	bl	8015712 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801958e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8019592:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019596:	9b03      	ldr	r3, [sp, #12]
 8019598:	9a00      	ldr	r2, [sp, #0]
 801959a:	fb11 f100 	smulbb	r1, r1, r0
 801959e:	2008      	movs	r0, #8
 80195a0:	fb02 6603 	mla	r6, r2, r3, r6
 80195a4:	1b8e      	subs	r6, r1, r6
 80195a6:	fb91 f1f0 	sdiv	r1, r1, r0
 80195aa:	42b1      	cmp	r1, r6
 80195ac:	dc21      	bgt.n	80195f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80195ae:	4556      	cmp	r6, sl
 80195b0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80195b4:	da03      	bge.n	80195be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 80195b6:	b1e6      	cbz	r6, 80195f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80195b8:	46b2      	mov	sl, r6
 80195ba:	4645      	mov	r5, r8
 80195bc:	464c      	mov	r4, r9
 80195be:	f108 38ff 	add.w	r8, r8, #4294967295
 80195c2:	f118 0f02 	cmn.w	r8, #2
 80195c6:	d1c8      	bne.n	801955a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 80195c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80195cc:	f1a7 0708 	sub.w	r7, r7, #8
 80195d0:	4691      	mov	r9, r2
 80195d2:	d1b7      	bne.n	8019544 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 80195d4:	9b01      	ldr	r3, [sp, #4]
 80195d6:	b2a6      	uxth	r6, r4
 80195d8:	00e4      	lsls	r4, r4, #3
 80195da:	1918      	adds	r0, r3, r4
 80195dc:	1c6b      	adds	r3, r5, #1
 80195de:	d10b      	bne.n	80195f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 80195e0:	4601      	mov	r1, r0
 80195e2:	9802      	ldr	r0, [sp, #8]
 80195e4:	f7fc f895 	bl	8015712 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80195e8:	4631      	mov	r1, r6
 80195ea:	9801      	ldr	r0, [sp, #4]
 80195ec:	f7ff fcc0 	bl	8018f70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80195f0:	e50f      	b.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80195f2:	4645      	mov	r5, r8
 80195f4:	464c      	mov	r4, r9
 80195f6:	e7ed      	b.n	80195d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 80195f8:	9b01      	ldr	r3, [sp, #4]
 80195fa:	00ed      	lsls	r5, r5, #3
 80195fc:	445c      	add	r4, fp
 80195fe:	1959      	adds	r1, r3, r5
 8019600:	445d      	add	r5, fp
 8019602:	f7fc f886 	bl	8015712 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019606:	9b02      	ldr	r3, [sp, #8]
 8019608:	cb03      	ldmia	r3!, {r0, r1}
 801960a:	9b02      	ldr	r3, [sp, #8]
 801960c:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8019610:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8019614:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8019618:	6861      	ldr	r1, [r4, #4]
 801961a:	c303      	stmia	r3!, {r0, r1}
 801961c:	e7e4      	b.n	80195e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08019620 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019620:	4b1d      	ldr	r3, [pc, #116]	; (8019698 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8019622:	b530      	push	{r4, r5, lr}
 8019624:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019628:	b085      	sub	sp, #20
 801962a:	4b1c      	ldr	r3, [pc, #112]	; (801969c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801962c:	460c      	mov	r4, r1
 801962e:	2100      	movs	r1, #0
 8019630:	4605      	mov	r5, r0
 8019632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019636:	6820      	ldr	r0, [r4, #0]
 8019638:	9100      	str	r1, [sp, #0]
 801963a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801963e:	ab02      	add	r3, sp, #8
 8019640:	6861      	ldr	r1, [r4, #4]
 8019642:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019646:	c303      	stmia	r3!, {r0, r1}
 8019648:	4669      	mov	r1, sp
 801964a:	a802      	add	r0, sp, #8
 801964c:	f7fb fccc 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 8019650:	ab02      	add	r3, sp, #8
 8019652:	cb03      	ldmia	r3!, {r0, r1}
 8019654:	4b12      	ldr	r3, [pc, #72]	; (80196a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8019656:	6020      	str	r0, [r4, #0]
 8019658:	6818      	ldr	r0, [r3, #0]
 801965a:	6061      	str	r1, [r4, #4]
 801965c:	b138      	cbz	r0, 801966e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801965e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8019662:	b133      	cbz	r3, 8019672 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8019664:	6821      	ldr	r1, [r4, #0]
 8019666:	4628      	mov	r0, r5
 8019668:	6862      	ldr	r2, [r4, #4]
 801966a:	f7ff fcc5 	bl	8018ff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801966e:	b005      	add	sp, #20
 8019670:	bd30      	pop	{r4, r5, pc}
 8019672:	6803      	ldr	r3, [r0, #0]
 8019674:	4621      	mov	r1, r4
 8019676:	689b      	ldr	r3, [r3, #8]
 8019678:	4798      	blx	r3
 801967a:	4b0a      	ldr	r3, [pc, #40]	; (80196a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801967c:	6818      	ldr	r0, [r3, #0]
 801967e:	b118      	cbz	r0, 8019688 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8019680:	6803      	ldr	r3, [r0, #0]
 8019682:	4621      	mov	r1, r4
 8019684:	689b      	ldr	r3, [r3, #8]
 8019686:	4798      	blx	r3
 8019688:	4b07      	ldr	r3, [pc, #28]	; (80196a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801968a:	4621      	mov	r1, r4
 801968c:	6818      	ldr	r0, [r3, #0]
 801968e:	6803      	ldr	r3, [r0, #0]
 8019690:	69db      	ldr	r3, [r3, #28]
 8019692:	4798      	blx	r3
 8019694:	e7eb      	b.n	801966e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019696:	bf00      	nop
 8019698:	2400aee0 	.word	0x2400aee0
 801969c:	2400aee2 	.word	0x2400aee2
 80196a0:	2400af28 	.word	0x2400af28
 80196a4:	2400af24 	.word	0x2400af24
 80196a8:	2400aeec 	.word	0x2400aeec

080196ac <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80196ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196b0:	4604      	mov	r4, r0
 80196b2:	b09b      	sub	sp, #108	; 0x6c
 80196b4:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80196b8:	b129      	cbz	r1, 80196c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80196ba:	2300      	movs	r3, #0
 80196bc:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80196c0:	b01b      	add	sp, #108	; 0x6c
 80196c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196c6:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80196ca:	4630      	mov	r0, r6
 80196cc:	f7fb fccf 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 80196d0:	4605      	mov	r5, r0
 80196d2:	b940      	cbnz	r0, 80196e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 80196d4:	4620      	mov	r0, r4
 80196d6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80196da:	f7ff fc8d 	bl	8018ff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80196de:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80196e2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80196e6:	4ba6      	ldr	r3, [pc, #664]	; (8019980 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	b33b      	cbz	r3, 801973c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80196ec:	4da5      	ldr	r5, [pc, #660]	; (8019984 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80196ee:	4628      	mov	r0, r5
 80196f0:	f7fb fcbd 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 80196f4:	4606      	mov	r6, r0
 80196f6:	bb08      	cbnz	r0, 801973c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80196f8:	4628      	mov	r0, r5
 80196fa:	f7ff f9f7 	bl	8018aec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80196fe:	6829      	ldr	r1, [r5, #0]
 8019700:	686a      	ldr	r2, [r5, #4]
 8019702:	4620      	mov	r0, r4
 8019704:	f7ff fc78 	bl	8018ff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019708:	802e      	strh	r6, [r5, #0]
 801970a:	806e      	strh	r6, [r5, #2]
 801970c:	80ae      	strh	r6, [r5, #4]
 801970e:	80ee      	strh	r6, [r5, #6]
 8019710:	4f9d      	ldr	r7, [pc, #628]	; (8019988 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8019712:	a809      	add	r0, sp, #36	; 0x24
 8019714:	f7ff fbd7 	bl	8018ec6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019718:	883d      	ldrh	r5, [r7, #0]
 801971a:	462e      	mov	r6, r5
 801971c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019720:	42b3      	cmp	r3, r6
 8019722:	d910      	bls.n	8019746 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8019724:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019728:	3601      	adds	r6, #1
 801972a:	a809      	add	r0, sp, #36	; 0x24
 801972c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019730:	b2b6      	uxth	r6, r6
 8019732:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019736:	f7ff fc3d 	bl	8018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801973a:	e7ef      	b.n	801971c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801973c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019740:	2b00      	cmp	r3, #0
 8019742:	d1e5      	bne.n	8019710 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8019744:	e7bc      	b.n	80196c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019746:	462e      	mov	r6, r5
 8019748:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801974c:	42b3      	cmp	r3, r6
 801974e:	d90b      	bls.n	8019768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8019750:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019754:	3601      	adds	r6, #1
 8019756:	4620      	mov	r0, r4
 8019758:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801975c:	b2b6      	uxth	r6, r6
 801975e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8019762:	f7ff fc49 	bl	8018ff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019766:	e7ef      	b.n	8019748 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019768:	4a88      	ldr	r2, [pc, #544]	; (801998c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801976a:	6813      	ldr	r3, [r2, #0]
 801976c:	4690      	mov	r8, r2
 801976e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019772:	2b01      	cmp	r3, #1
 8019774:	f040 8094 	bne.w	80198a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8019778:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801977c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8019780:	f04f 0900 	mov.w	r9, #0
 8019784:	33aa      	adds	r3, #170	; 0xaa
 8019786:	42a8      	cmp	r0, r5
 8019788:	f103 0308 	add.w	r3, r3, #8
 801978c:	dd0a      	ble.n	80197a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801978e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8019792:	3501      	adds	r5, #1
 8019794:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8019798:	440a      	add	r2, r1
 801979a:	b212      	sxth	r2, r2
 801979c:	4591      	cmp	r9, r2
 801979e:	bfb8      	it	lt
 80197a0:	4691      	movlt	r9, r2
 80197a2:	e7f0      	b.n	8019786 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 80197a4:	4b7a      	ldr	r3, [pc, #488]	; (8019990 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80197a6:	4e7b      	ldr	r6, [pc, #492]	; (8019994 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80197a8:	881d      	ldrh	r5, [r3, #0]
 80197aa:	2300      	movs	r3, #0
 80197ac:	2d0f      	cmp	r5, #15
 80197ae:	bf8c      	ite	hi
 80197b0:	08ed      	lsrhi	r5, r5, #3
 80197b2:	2501      	movls	r5, #1
 80197b4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80197b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80197bc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80197c0:	f8d8 0000 	ldr.w	r0, [r8]
 80197c4:	440b      	add	r3, r1
 80197c6:	6802      	ldr	r2, [r0, #0]
 80197c8:	b21b      	sxth	r3, r3
 80197ca:	4599      	cmp	r9, r3
 80197cc:	dd4b      	ble.n	8019866 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 80197ce:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80197d2:	4798      	blx	r3
 80197d4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80197d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80197dc:	4413      	add	r3, r2
 80197de:	b21b      	sxth	r3, r3
 80197e0:	195a      	adds	r2, r3, r5
 80197e2:	4290      	cmp	r0, r2
 80197e4:	da07      	bge.n	80197f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80197e6:	4581      	cmp	r9, r0
 80197e8:	dd05      	ble.n	80197f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80197ea:	4298      	cmp	r0, r3
 80197ec:	da33      	bge.n	8019856 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	dd31      	ble.n	8019856 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80197f2:	4648      	mov	r0, r9
 80197f4:	e004      	b.n	8019800 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 80197f6:	4298      	cmp	r0, r3
 80197f8:	dbfb      	blt.n	80197f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 80197fa:	4548      	cmp	r0, r9
 80197fc:	bfa8      	it	ge
 80197fe:	4648      	movge	r0, r9
 8019800:	f9b6 2000 	ldrsh.w	r2, [r6]
 8019804:	2100      	movs	r1, #0
 8019806:	1ac0      	subs	r0, r0, r3
 8019808:	f8b7 a000 	ldrh.w	sl, [r7]
 801980c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019810:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019814:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019818:	f8ad 001a 	strh.w	r0, [sp, #26]
 801981c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019820:	4553      	cmp	r3, sl
 8019822:	d9c9      	bls.n	80197b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019824:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019828:	ab07      	add	r3, sp, #28
 801982a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801982e:	6851      	ldr	r1, [r2, #4]
 8019830:	c303      	stmia	r3!, {r0, r1}
 8019832:	a807      	add	r0, sp, #28
 8019834:	a905      	add	r1, sp, #20
 8019836:	f7fb fbd7 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801983a:	a807      	add	r0, sp, #28
 801983c:	f7fb fc17 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019840:	b920      	cbnz	r0, 801984c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8019842:	6823      	ldr	r3, [r4, #0]
 8019844:	a907      	add	r1, sp, #28
 8019846:	4620      	mov	r0, r4
 8019848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801984a:	4798      	blx	r3
 801984c:	f10a 0a01 	add.w	sl, sl, #1
 8019850:	fa1f fa8a 	uxth.w	sl, sl
 8019854:	e7e2      	b.n	801981c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8019856:	f8d8 0000 	ldr.w	r0, [r8]
 801985a:	2101      	movs	r1, #1
 801985c:	6803      	ldr	r3, [r0, #0]
 801985e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019862:	4798      	blx	r3
 8019864:	e7a8      	b.n	80197b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019866:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8019868:	4798      	blx	r3
 801986a:	4b4b      	ldr	r3, [pc, #300]	; (8019998 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801986c:	781b      	ldrb	r3, [r3, #0]
 801986e:	2b00      	cmp	r3, #0
 8019870:	f43f af26 	beq.w	80196c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019874:	2300      	movs	r3, #0
 8019876:	883d      	ldrh	r5, [r7, #0]
 8019878:	34ea      	adds	r4, #234	; 0xea
 801987a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801987e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8019882:	42ab      	cmp	r3, r5
 8019884:	f67f af1c 	bls.w	80196c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019888:	ab1a      	add	r3, sp, #104	; 0x68
 801988a:	4620      	mov	r0, r4
 801988c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019890:	3501      	adds	r5, #1
 8019892:	3b44      	subs	r3, #68	; 0x44
 8019894:	b2ad      	uxth	r5, r5
 8019896:	e893 0006 	ldmia.w	r3, {r1, r2}
 801989a:	f7ff fb8b 	bl	8018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801989e:	e7ee      	b.n	801987e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 80198a0:	2b02      	cmp	r3, #2
 80198a2:	f040 813d 	bne.w	8019b20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 80198a6:	4b3d      	ldr	r3, [pc, #244]	; (801999c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 80198a8:	781b      	ldrb	r3, [r3, #0]
 80198aa:	2b01      	cmp	r3, #1
 80198ac:	d02c      	beq.n	8019908 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 80198ae:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 80198b2:	883a      	ldrh	r2, [r7, #0]
 80198b4:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 80198b8:	3201      	adds	r2, #1
 80198ba:	b292      	uxth	r2, r2
 80198bc:	2900      	cmp	r1, #0
 80198be:	d0d4      	beq.n	801986a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80198c0:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80198c4:	4610      	mov	r0, r2
 80198c6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80198ca:	f04f 0a00 	mov.w	sl, #0
 80198ce:	441d      	add	r5, r3
 80198d0:	b22d      	sxth	r5, r5
 80198d2:	b283      	uxth	r3, r0
 80198d4:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 80198d8:	4299      	cmp	r1, r3
 80198da:	f240 80c3 	bls.w	8019a64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 80198de:	4426      	add	r6, r4
 80198e0:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 80198e4:	4684      	mov	ip, r0
 80198e6:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 80198ea:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 80198ee:	4573      	cmp	r3, lr
 80198f0:	f340 80a5 	ble.w	8019a3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 80198f4:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 80198f8:	4475      	add	r5, lr
 80198fa:	b22d      	sxth	r5, r5
 80198fc:	429d      	cmp	r5, r3
 80198fe:	bfa8      	it	ge
 8019900:	461d      	movge	r5, r3
 8019902:	3001      	adds	r0, #1
 8019904:	46e2      	mov	sl, ip
 8019906:	e7e4      	b.n	80198d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8019908:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801990c:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8019910:	f1bb 0f00 	cmp.w	fp, #0
 8019914:	d0a9      	beq.n	801986a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8019916:	883b      	ldrh	r3, [r7, #0]
 8019918:	2600      	movs	r6, #0
 801991a:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801991e:	3301      	adds	r3, #1
 8019920:	b29b      	uxth	r3, r3
 8019922:	b299      	uxth	r1, r3
 8019924:	00f5      	lsls	r5, r6, #3
 8019926:	458b      	cmp	fp, r1
 8019928:	d93a      	bls.n	80199a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801992a:	4425      	add	r5, r4
 801992c:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8019930:	469c      	mov	ip, r3
 8019932:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8019936:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801993a:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801993e:	4408      	add	r0, r1
 8019940:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8019944:	4471      	add	r1, lr
 8019946:	b200      	sxth	r0, r0
 8019948:	b209      	sxth	r1, r1
 801994a:	4288      	cmp	r0, r1
 801994c:	da06      	bge.n	801995c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801994e:	4586      	cmp	lr, r0
 8019950:	4672      	mov	r2, lr
 8019952:	bfb8      	it	lt
 8019954:	4602      	movlt	r2, r0
 8019956:	3301      	adds	r3, #1
 8019958:	4666      	mov	r6, ip
 801995a:	e7e2      	b.n	8019922 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801995c:	d10b      	bne.n	8019976 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801995e:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8019962:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8019966:	458c      	cmp	ip, r1
 8019968:	bfb4      	ite	lt
 801996a:	469c      	movlt	ip, r3
 801996c:	46b4      	movge	ip, r6
 801996e:	4572      	cmp	r2, lr
 8019970:	bfb8      	it	lt
 8019972:	4672      	movlt	r2, lr
 8019974:	e7ef      	b.n	8019956 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8019976:	428a      	cmp	r2, r1
 8019978:	46b4      	mov	ip, r6
 801997a:	bfb8      	it	lt
 801997c:	460a      	movlt	r2, r1
 801997e:	e7ea      	b.n	8019956 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8019980:	2400af24 	.word	0x2400af24
 8019984:	2400af30 	.word	0x2400af30
 8019988:	2400004e 	.word	0x2400004e
 801998c:	2400aeec 	.word	0x2400aeec
 8019990:	2400aee2 	.word	0x2400aee2
 8019994:	2400aee0 	.word	0x2400aee0
 8019998:	2400aeea 	.word	0x2400aeea
 801999c:	2400aee4 	.word	0x2400aee4
 80199a0:	1961      	adds	r1, r4, r5
 80199a2:	ab07      	add	r3, sp, #28
 80199a4:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80199a8:	6849      	ldr	r1, [r1, #4]
 80199aa:	c303      	stmia	r3!, {r0, r1}
 80199ac:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80199b0:	a807      	add	r0, sp, #28
 80199b2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80199b6:	2b13      	cmp	r3, #19
 80199b8:	440b      	add	r3, r1
 80199ba:	bfd8      	it	le
 80199bc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80199c0:	1a9b      	subs	r3, r3, r2
 80199c2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80199c6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80199ca:	f7ff f8a9 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80199ce:	a807      	add	r0, sp, #28
 80199d0:	f7fb fb4d 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 80199d4:	2800      	cmp	r0, #0
 80199d6:	d199      	bne.n	801990c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80199d8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80199dc:	4425      	add	r5, r4
 80199de:	f8d8 0000 	ldr.w	r0, [r8]
 80199e2:	f1bc 0f14 	cmp.w	ip, #20
 80199e6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80199ea:	f8d0 e000 	ldr.w	lr, [r0]
 80199ee:	bfa8      	it	ge
 80199f0:	f04f 0c14 	movge.w	ip, #20
 80199f4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80199f8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80199fc:	fa1f fc8c 	uxth.w	ip, ip
 8019a00:	f8cd c000 	str.w	ip, [sp]
 8019a04:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 8019a08:	47d0      	blx	sl
 8019a0a:	4682      	mov	sl, r0
 8019a0c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019a10:	a807      	add	r0, sp, #28
 8019a12:	f7ff f86b 	bl	8018aec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019a16:	6823      	ldr	r3, [r4, #0]
 8019a18:	4620      	mov	r0, r4
 8019a1a:	a907      	add	r1, sp, #28
 8019a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a1e:	4798      	blx	r3
 8019a20:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8019a24:	eba0 000a 	sub.w	r0, r0, sl
 8019a28:	b200      	sxth	r0, r0
 8019a2a:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8019a2e:	2800      	cmp	r0, #0
 8019a30:	f47f af6c 	bne.w	801990c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8019a34:	b2b1      	uxth	r1, r6
 8019a36:	4648      	mov	r0, r9
 8019a38:	f7ff fa9a 	bl	8018f70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019a3c:	e766      	b.n	801990c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8019a3e:	d10c      	bne.n	8019a5a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8019a40:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8019a44:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8019a48:	45b4      	cmp	ip, r6
 8019a4a:	bfb4      	ite	lt
 8019a4c:	4684      	movlt	ip, r0
 8019a4e:	46d4      	movge	ip, sl
 8019a50:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8019a54:	4433      	add	r3, r6
 8019a56:	b21b      	sxth	r3, r3
 8019a58:	e750      	b.n	80198fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8019a5a:	4575      	cmp	r5, lr
 8019a5c:	46d4      	mov	ip, sl
 8019a5e:	bfa8      	it	ge
 8019a60:	4675      	movge	r5, lr
 8019a62:	e74e      	b.n	8019902 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8019a64:	eb0b 0006 	add.w	r0, fp, r6
 8019a68:	4426      	add	r6, r4
 8019a6a:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8019a6e:	f1b9 0f13 	cmp.w	r9, #19
 8019a72:	bfdc      	itt	le
 8019a74:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8019a78:	444d      	addle	r5, r9
 8019a7a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8019a7e:	bfd8      	it	le
 8019a80:	b22d      	sxthle	r5, r5
 8019a82:	f7fb faf4 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019a86:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019a8a:	2800      	cmp	r0, #0
 8019a8c:	f47f af16 	bne.w	80198bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8019a90:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8019a94:	fa1f f989 	uxth.w	r9, r9
 8019a98:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019a9c:	eba5 050c 	sub.w	r5, r5, ip
 8019aa0:	fa1f f28c 	uxth.w	r2, ip
 8019aa4:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8019aa8:	eb02 0009 	add.w	r0, r2, r9
 8019aac:	2d14      	cmp	r5, #20
 8019aae:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8019ab2:	bfa8      	it	ge
 8019ab4:	2514      	movge	r5, #20
 8019ab6:	b200      	sxth	r0, r0
 8019ab8:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019abc:	b289      	uxth	r1, r1
 8019abe:	fa1f fe85 	uxth.w	lr, r5
 8019ac2:	eba0 000c 	sub.w	r0, r0, ip
 8019ac6:	f8ad c01e 	strh.w	ip, [sp, #30]
 8019aca:	4586      	cmp	lr, r0
 8019acc:	f8d8 0000 	ldr.w	r0, [r8]
 8019ad0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019ad4:	b29b      	uxth	r3, r3
 8019ad6:	bfb8      	it	lt
 8019ad8:	46f1      	movlt	r9, lr
 8019ada:	6805      	ldr	r5, [r0, #0]
 8019adc:	f8cd 9000 	str.w	r9, [sp]
 8019ae0:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 8019ae4:	47a8      	blx	r5
 8019ae6:	6823      	ldr	r3, [r4, #0]
 8019ae8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019aec:	a907      	add	r1, sp, #28
 8019aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019af0:	4620      	mov	r0, r4
 8019af2:	4798      	blx	r3
 8019af4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019af8:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8019afc:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8019b00:	1a5b      	subs	r3, r3, r1
 8019b02:	440a      	add	r2, r1
 8019b04:	b21b      	sxth	r3, r3
 8019b06:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8019b0a:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	f47f aecf 	bne.w	80198b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8019b14:	fa1f f18a 	uxth.w	r1, sl
 8019b18:	4658      	mov	r0, fp
 8019b1a:	f7ff fa29 	bl	8018f70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019b1e:	e6c8      	b.n	80198b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8019b20:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019b24:	42ab      	cmp	r3, r5
 8019b26:	f67f aea0 	bls.w	801986a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8019b2a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019b2e:	ab07      	add	r3, sp, #28
 8019b30:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019b34:	6851      	ldr	r1, [r2, #4]
 8019b36:	c303      	stmia	r3!, {r0, r1}
 8019b38:	a807      	add	r0, sp, #28
 8019b3a:	f7fb fa98 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019b3e:	b920      	cbnz	r0, 8019b4a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8019b40:	6823      	ldr	r3, [r4, #0]
 8019b42:	a907      	add	r1, sp, #28
 8019b44:	4620      	mov	r0, r4
 8019b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b48:	4798      	blx	r3
 8019b4a:	3501      	adds	r5, #1
 8019b4c:	b2ad      	uxth	r5, r5
 8019b4e:	e7e7      	b.n	8019b20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08019b50 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019b50:	4b03      	ldr	r3, [pc, #12]	; (8019b60 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019b52:	2200      	movs	r2, #0
 8019b54:	801a      	strh	r2, [r3, #0]
 8019b56:	805a      	strh	r2, [r3, #2]
 8019b58:	809a      	strh	r2, [r3, #4]
 8019b5a:	80da      	strh	r2, [r3, #6]
 8019b5c:	4770      	bx	lr
 8019b5e:	bf00      	nop
 8019b60:	2400af30 	.word	0x2400af30

08019b64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b68:	b09d      	sub	sp, #116	; 0x74
 8019b6a:	4606      	mov	r6, r0
 8019b6c:	4614      	mov	r4, r2
 8019b6e:	468a      	mov	sl, r1
 8019b70:	a803      	add	r0, sp, #12
 8019b72:	461d      	mov	r5, r3
 8019b74:	f000 fd7f 	bl	801a676 <_ZN8touchgfx12TextProviderC1Ev>
 8019b78:	6833      	ldr	r3, [r6, #0]
 8019b7a:	4630      	mov	r0, r6
 8019b7c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b82:	4798      	blx	r3
 8019b84:	6833      	ldr	r3, [r6, #0]
 8019b86:	4607      	mov	r7, r0
 8019b88:	4630      	mov	r0, r6
 8019b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b8c:	4798      	blx	r3
 8019b8e:	462a      	mov	r2, r5
 8019b90:	2500      	movs	r5, #0
 8019b92:	4621      	mov	r1, r4
 8019b94:	9000      	str	r0, [sp, #0]
 8019b96:	463b      	mov	r3, r7
 8019b98:	462c      	mov	r4, r5
 8019b9a:	46a9      	mov	r9, r5
 8019b9c:	46a8      	mov	r8, r5
 8019b9e:	a803      	add	r0, sp, #12
 8019ba0:	f000 fdbc 	bl	801a71c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	9302      	str	r3, [sp, #8]
 8019ba8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019bac:	429c      	cmp	r4, r3
 8019bae:	d002      	beq.n	8019bb6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8019bb0:	455c      	cmp	r4, fp
 8019bb2:	bf18      	it	ne
 8019bb4:	4625      	movne	r5, r4
 8019bb6:	ab02      	add	r3, sp, #8
 8019bb8:	4632      	mov	r2, r6
 8019bba:	4651      	mov	r1, sl
 8019bbc:	a803      	add	r0, sp, #12
 8019bbe:	f001 f8ad 	bl	801ad1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019bc2:	4604      	mov	r4, r0
 8019bc4:	b108      	cbz	r0, 8019bca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8019bc6:	280a      	cmp	r0, #10
 8019bc8:	d10a      	bne.n	8019be0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8019bca:	45c1      	cmp	r9, r8
 8019bcc:	bf38      	it	cc
 8019bce:	46c1      	movcc	r9, r8
 8019bd0:	f04f 0800 	mov.w	r8, #0
 8019bd4:	2c00      	cmp	r4, #0
 8019bd6:	d1e5      	bne.n	8019ba4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019bd8:	4648      	mov	r0, r9
 8019bda:	b01d      	add	sp, #116	; 0x74
 8019bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019be0:	9a02      	ldr	r2, [sp, #8]
 8019be2:	2a00      	cmp	r2, #0
 8019be4:	d0de      	beq.n	8019ba4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019be6:	7b57      	ldrb	r7, [r2, #13]
 8019be8:	4629      	mov	r1, r5
 8019bea:	6833      	ldr	r3, [r6, #0]
 8019bec:	007f      	lsls	r7, r7, #1
 8019bee:	8894      	ldrh	r4, [r2, #4]
 8019bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019bf2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8019bf6:	7a97      	ldrb	r7, [r2, #10]
 8019bf8:	4307      	orrs	r7, r0
 8019bfa:	4630      	mov	r0, r6
 8019bfc:	4798      	blx	r3
 8019bfe:	4438      	add	r0, r7
 8019c00:	4480      	add	r8, r0
 8019c02:	fa1f f888 	uxth.w	r8, r8
 8019c06:	e7e5      	b.n	8019bd4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08019c08 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019c08:	b508      	push	{r3, lr}
 8019c0a:	6803      	ldr	r3, [r0, #0]
 8019c0c:	68db      	ldr	r3, [r3, #12]
 8019c0e:	4798      	blx	r3
 8019c10:	b128      	cbz	r0, 8019c1e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019c12:	7b43      	ldrb	r3, [r0, #13]
 8019c14:	7a80      	ldrb	r0, [r0, #10]
 8019c16:	005b      	lsls	r3, r3, #1
 8019c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c1c:	4318      	orrs	r0, r3
 8019c1e:	bd08      	pop	{r3, pc}

08019c20 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019c20:	b40e      	push	{r1, r2, r3}
 8019c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c24:	b09e      	sub	sp, #120	; 0x78
 8019c26:	4605      	mov	r5, r0
 8019c28:	ab23      	add	r3, sp, #140	; 0x8c
 8019c2a:	a805      	add	r0, sp, #20
 8019c2c:	f853 4b04 	ldr.w	r4, [r3], #4
 8019c30:	9303      	str	r3, [sp, #12]
 8019c32:	f000 fd20 	bl	801a676 <_ZN8touchgfx12TextProviderC1Ev>
 8019c36:	682b      	ldr	r3, [r5, #0]
 8019c38:	4628      	mov	r0, r5
 8019c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c3c:	4798      	blx	r3
 8019c3e:	682b      	ldr	r3, [r5, #0]
 8019c40:	4606      	mov	r6, r0
 8019c42:	4628      	mov	r0, r5
 8019c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019c46:	4798      	blx	r3
 8019c48:	4633      	mov	r3, r6
 8019c4a:	4621      	mov	r1, r4
 8019c4c:	ae1e      	add	r6, sp, #120	; 0x78
 8019c4e:	2400      	movs	r4, #0
 8019c50:	9000      	str	r0, [sp, #0]
 8019c52:	9a03      	ldr	r2, [sp, #12]
 8019c54:	a805      	add	r0, sp, #20
 8019c56:	f000 fd61 	bl	801a71c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019c5a:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019c5e:	462a      	mov	r2, r5
 8019c60:	4633      	mov	r3, r6
 8019c62:	4621      	mov	r1, r4
 8019c64:	a805      	add	r0, sp, #20
 8019c66:	f001 f859 	bl	801ad1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019c6a:	b300      	cbz	r0, 8019cae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8019c6c:	280a      	cmp	r0, #10
 8019c6e:	d01a      	beq.n	8019ca6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019c70:	9f04      	ldr	r7, [sp, #16]
 8019c72:	b1c7      	cbz	r7, 8019ca6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019c74:	7b78      	ldrb	r0, [r7, #13]
 8019c76:	7a3b      	ldrb	r3, [r7, #8]
 8019c78:	00c1      	lsls	r1, r0, #3
 8019c7a:	88aa      	ldrh	r2, [r5, #4]
 8019c7c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019c80:	4319      	orrs	r1, r3
 8019c82:	0643      	lsls	r3, r0, #25
 8019c84:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019c88:	bf48      	it	mi
 8019c8a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019c8e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019c92:	bf48      	it	mi
 8019c94:	b219      	sxthmi	r1, r3
 8019c96:	79fb      	ldrb	r3, [r7, #7]
 8019c98:	4303      	orrs	r3, r0
 8019c9a:	4413      	add	r3, r2
 8019c9c:	1a5b      	subs	r3, r3, r1
 8019c9e:	b29b      	uxth	r3, r3
 8019ca0:	42a3      	cmp	r3, r4
 8019ca2:	bfc8      	it	gt
 8019ca4:	b21c      	sxthgt	r4, r3
 8019ca6:	4633      	mov	r3, r6
 8019ca8:	462a      	mov	r2, r5
 8019caa:	2100      	movs	r1, #0
 8019cac:	e7da      	b.n	8019c64 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019cae:	b2a0      	uxth	r0, r4
 8019cb0:	b01e      	add	sp, #120	; 0x78
 8019cb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019cb6:	b003      	add	sp, #12
 8019cb8:	4770      	bx	lr

08019cba <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019cba:	b40e      	push	{r1, r2, r3}
 8019cbc:	b570      	push	{r4, r5, r6, lr}
 8019cbe:	b09d      	sub	sp, #116	; 0x74
 8019cc0:	4604      	mov	r4, r0
 8019cc2:	ab21      	add	r3, sp, #132	; 0x84
 8019cc4:	a803      	add	r0, sp, #12
 8019cc6:	f853 5b04 	ldr.w	r5, [r3], #4
 8019cca:	9302      	str	r3, [sp, #8]
 8019ccc:	f000 fcd3 	bl	801a676 <_ZN8touchgfx12TextProviderC1Ev>
 8019cd0:	6823      	ldr	r3, [r4, #0]
 8019cd2:	4620      	mov	r0, r4
 8019cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cd6:	4798      	blx	r3
 8019cd8:	6823      	ldr	r3, [r4, #0]
 8019cda:	4606      	mov	r6, r0
 8019cdc:	4620      	mov	r0, r4
 8019cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ce0:	2401      	movs	r4, #1
 8019ce2:	4798      	blx	r3
 8019ce4:	4633      	mov	r3, r6
 8019ce6:	9000      	str	r0, [sp, #0]
 8019ce8:	4629      	mov	r1, r5
 8019cea:	9a02      	ldr	r2, [sp, #8]
 8019cec:	a803      	add	r0, sp, #12
 8019cee:	f000 fd15 	bl	801a71c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019cf2:	a803      	add	r0, sp, #12
 8019cf4:	f001 f90c 	bl	801af10 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019cf8:	b2a3      	uxth	r3, r4
 8019cfa:	b138      	cbz	r0, 8019d0c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8019cfc:	280a      	cmp	r0, #10
 8019cfe:	a803      	add	r0, sp, #12
 8019d00:	bf04      	itt	eq
 8019d02:	3301      	addeq	r3, #1
 8019d04:	b21c      	sxtheq	r4, r3
 8019d06:	f001 f903 	bl	801af10 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019d0a:	e7f5      	b.n	8019cf8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	b01d      	add	sp, #116	; 0x74
 8019d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d14:	b003      	add	sp, #12
 8019d16:	4770      	bx	lr

08019d18 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019d18:	b40e      	push	{r1, r2, r3}
 8019d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d1c:	b09e      	sub	sp, #120	; 0x78
 8019d1e:	4604      	mov	r4, r0
 8019d20:	ab23      	add	r3, sp, #140	; 0x8c
 8019d22:	a805      	add	r0, sp, #20
 8019d24:	f853 5b04 	ldr.w	r5, [r3], #4
 8019d28:	9303      	str	r3, [sp, #12]
 8019d2a:	f000 fca4 	bl	801a676 <_ZN8touchgfx12TextProviderC1Ev>
 8019d2e:	6823      	ldr	r3, [r4, #0]
 8019d30:	4620      	mov	r0, r4
 8019d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d34:	4798      	blx	r3
 8019d36:	6823      	ldr	r3, [r4, #0]
 8019d38:	4606      	mov	r6, r0
 8019d3a:	4620      	mov	r0, r4
 8019d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019d3e:	4798      	blx	r3
 8019d40:	4633      	mov	r3, r6
 8019d42:	4629      	mov	r1, r5
 8019d44:	9000      	str	r0, [sp, #0]
 8019d46:	9a03      	ldr	r2, [sp, #12]
 8019d48:	a805      	add	r0, sp, #20
 8019d4a:	f000 fce7 	bl	801a71c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019d4e:	ad1e      	add	r5, sp, #120	; 0x78
 8019d50:	2100      	movs	r1, #0
 8019d52:	26ff      	movs	r6, #255	; 0xff
 8019d54:	4622      	mov	r2, r4
 8019d56:	a805      	add	r0, sp, #20
 8019d58:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019d5c:	462b      	mov	r3, r5
 8019d5e:	f000 ffdd 	bl	801ad1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019d62:	b1d8      	cbz	r0, 8019d9c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8019d64:	280a      	cmp	r0, #10
 8019d66:	d012      	beq.n	8019d8e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8019d68:	9804      	ldr	r0, [sp, #16]
 8019d6a:	b180      	cbz	r0, 8019d8e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8019d6c:	7b47      	ldrb	r7, [r0, #13]
 8019d6e:	7922      	ldrb	r2, [r4, #4]
 8019d70:	00fb      	lsls	r3, r7, #3
 8019d72:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019d76:	7a03      	ldrb	r3, [r0, #8]
 8019d78:	430b      	orrs	r3, r1
 8019d7a:	0679      	lsls	r1, r7, #25
 8019d7c:	bf44      	itt	mi
 8019d7e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019d82:	b21b      	sxthmi	r3, r3
 8019d84:	1ad3      	subs	r3, r2, r3
 8019d86:	b2db      	uxtb	r3, r3
 8019d88:	429e      	cmp	r6, r3
 8019d8a:	bf28      	it	cs
 8019d8c:	461e      	movcs	r6, r3
 8019d8e:	462b      	mov	r3, r5
 8019d90:	4622      	mov	r2, r4
 8019d92:	2100      	movs	r1, #0
 8019d94:	a805      	add	r0, sp, #20
 8019d96:	f000 ffc1 	bl	801ad1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019d9a:	e7e2      	b.n	8019d62 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8019d9c:	4630      	mov	r0, r6
 8019d9e:	b01e      	add	sp, #120	; 0x78
 8019da0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019da4:	b003      	add	sp, #12
 8019da6:	4770      	bx	lr

08019da8 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019da8:	b513      	push	{r0, r1, r4, lr}
 8019daa:	6803      	ldr	r3, [r0, #0]
 8019dac:	2400      	movs	r4, #0
 8019dae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019db2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019db6:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019dba:	4669      	mov	r1, sp
 8019dbc:	691b      	ldr	r3, [r3, #16]
 8019dbe:	9400      	str	r4, [sp, #0]
 8019dc0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019dc4:	4798      	blx	r3
 8019dc6:	b002      	add	sp, #8
 8019dc8:	bd10      	pop	{r4, pc}

08019dca <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019dca:	b538      	push	{r3, r4, r5, lr}
 8019dcc:	680b      	ldr	r3, [r1, #0]
 8019dce:	460c      	mov	r4, r1
 8019dd0:	4605      	mov	r5, r0
 8019dd2:	68db      	ldr	r3, [r3, #12]
 8019dd4:	4798      	blx	r3
 8019dd6:	6823      	ldr	r3, [r4, #0]
 8019dd8:	4620      	mov	r0, r4
 8019dda:	4629      	mov	r1, r5
 8019ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019dde:	4798      	blx	r3
 8019de0:	4628      	mov	r0, r5
 8019de2:	bd38      	pop	{r3, r4, r5, pc}

08019de4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019de4:	b410      	push	{r4}
 8019de6:	880a      	ldrh	r2, [r1, #0]
 8019de8:	8884      	ldrh	r4, [r0, #4]
 8019dea:	4422      	add	r2, r4
 8019dec:	800a      	strh	r2, [r1, #0]
 8019dee:	884a      	ldrh	r2, [r1, #2]
 8019df0:	88c4      	ldrh	r4, [r0, #6]
 8019df2:	4422      	add	r2, r4
 8019df4:	804a      	strh	r2, [r1, #2]
 8019df6:	6940      	ldr	r0, [r0, #20]
 8019df8:	b120      	cbz	r0, 8019e04 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019dfa:	6803      	ldr	r3, [r0, #0]
 8019dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e02:	4718      	bx	r3
 8019e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e08:	4770      	bx	lr

08019e0a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019e0a:	b570      	push	{r4, r5, r6, lr}
 8019e0c:	8882      	ldrh	r2, [r0, #4]
 8019e0e:	460c      	mov	r4, r1
 8019e10:	880b      	ldrh	r3, [r1, #0]
 8019e12:	4605      	mov	r5, r0
 8019e14:	4413      	add	r3, r2
 8019e16:	800b      	strh	r3, [r1, #0]
 8019e18:	884b      	ldrh	r3, [r1, #2]
 8019e1a:	88c2      	ldrh	r2, [r0, #6]
 8019e1c:	4413      	add	r3, r2
 8019e1e:	804b      	strh	r3, [r1, #2]
 8019e20:	1d01      	adds	r1, r0, #4
 8019e22:	4620      	mov	r0, r4
 8019e24:	f7fb f8e0 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 8019e28:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	dd0b      	ble.n	8019e48 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019e30:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	dd07      	ble.n	8019e48 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019e38:	6968      	ldr	r0, [r5, #20]
 8019e3a:	b128      	cbz	r0, 8019e48 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019e3c:	6803      	ldr	r3, [r0, #0]
 8019e3e:	4621      	mov	r1, r4
 8019e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e46:	4718      	bx	r3
 8019e48:	bd70      	pop	{r4, r5, r6, pc}
	...

08019e4c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019e4c:	b570      	push	{r4, r5, r6, lr}
 8019e4e:	8882      	ldrh	r2, [r0, #4]
 8019e50:	460c      	mov	r4, r1
 8019e52:	880b      	ldrh	r3, [r1, #0]
 8019e54:	4605      	mov	r5, r0
 8019e56:	4413      	add	r3, r2
 8019e58:	800b      	strh	r3, [r1, #0]
 8019e5a:	884b      	ldrh	r3, [r1, #2]
 8019e5c:	88c2      	ldrh	r2, [r0, #6]
 8019e5e:	4413      	add	r3, r2
 8019e60:	804b      	strh	r3, [r1, #2]
 8019e62:	1d01      	adds	r1, r0, #4
 8019e64:	4620      	mov	r0, r4
 8019e66:	f7fb f8bf 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 8019e6a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	dd15      	ble.n	8019e9e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8019e72:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	dd11      	ble.n	8019e9e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8019e7a:	6968      	ldr	r0, [r5, #20]
 8019e7c:	b128      	cbz	r0, 8019e8a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019e7e:	6803      	ldr	r3, [r0, #0]
 8019e80:	691b      	ldr	r3, [r3, #16]
 8019e82:	4621      	mov	r1, r4
 8019e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e88:	4718      	bx	r3
 8019e8a:	4b05      	ldr	r3, [pc, #20]	; (8019ea0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	3304      	adds	r3, #4
 8019e90:	429d      	cmp	r5, r3
 8019e92:	d104      	bne.n	8019e9e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8019e94:	f7fe ffbe 	bl	8018e14 <_ZN8touchgfx11Application11getInstanceEv>
 8019e98:	6803      	ldr	r3, [r0, #0]
 8019e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e9c:	e7f1      	b.n	8019e82 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 8019e9e:	bd70      	pop	{r4, r5, r6, pc}
 8019ea0:	2400af28 	.word	0x2400af28

08019ea4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019ea4:	b570      	push	{r4, r5, r6, lr}
 8019ea6:	4604      	mov	r4, r0
 8019ea8:	4616      	mov	r6, r2
 8019eaa:	460d      	mov	r5, r1
 8019eac:	b901      	cbnz	r1, 8019eb0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019eae:	b192      	cbz	r2, 8019ed6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019eb0:	6823      	ldr	r3, [r4, #0]
 8019eb2:	4620      	mov	r0, r4
 8019eb4:	695b      	ldr	r3, [r3, #20]
 8019eb6:	4798      	blx	r3
 8019eb8:	88e2      	ldrh	r2, [r4, #6]
 8019eba:	88a1      	ldrh	r1, [r4, #4]
 8019ebc:	4620      	mov	r0, r4
 8019ebe:	4432      	add	r2, r6
 8019ec0:	4429      	add	r1, r5
 8019ec2:	b212      	sxth	r2, r2
 8019ec4:	b209      	sxth	r1, r1
 8019ec6:	f7ea fe35 	bl	8004b34 <_ZN8touchgfx8Drawable5setXYEss>
 8019eca:	6823      	ldr	r3, [r4, #0]
 8019ecc:	4620      	mov	r0, r4
 8019ece:	695b      	ldr	r3, [r3, #20]
 8019ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ed4:	4718      	bx	r3
 8019ed6:	bd70      	pop	{r4, r5, r6, pc}

08019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019ed8:	b510      	push	{r4, lr}
 8019eda:	2300      	movs	r3, #0
 8019edc:	4604      	mov	r4, r0
 8019ede:	4608      	mov	r0, r1
 8019ee0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019ee4:	8023      	strh	r3, [r4, #0]
 8019ee6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019eea:	8063      	strh	r3, [r4, #2]
 8019eec:	6803      	ldr	r3, [r0, #0]
 8019eee:	80a1      	strh	r1, [r4, #4]
 8019ef0:	4621      	mov	r1, r4
 8019ef2:	80e2      	strh	r2, [r4, #6]
 8019ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ef6:	4798      	blx	r3
 8019ef8:	4620      	mov	r0, r4
 8019efa:	bd10      	pop	{r4, pc}

08019efc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019efc:	b530      	push	{r4, r5, lr}
 8019efe:	8083      	strh	r3, [r0, #4]
 8019f00:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019f04:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019f08:	7183      	strb	r3, [r0, #6]
 8019f0a:	79c3      	ldrb	r3, [r0, #7]
 8019f0c:	6101      	str	r1, [r0, #16]
 8019f0e:	f365 0306 	bfi	r3, r5, #0, #7
 8019f12:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019f16:	8282      	strh	r2, [r0, #20]
 8019f18:	f365 13c7 	bfi	r3, r5, #7, #1
 8019f1c:	71c3      	strb	r3, [r0, #7]
 8019f1e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019f22:	7203      	strb	r3, [r0, #8]
 8019f24:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019f28:	7243      	strb	r3, [r0, #9]
 8019f2a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019f2e:	8143      	strh	r3, [r0, #10]
 8019f30:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019f34:	8183      	strh	r3, [r0, #12]
 8019f36:	4b01      	ldr	r3, [pc, #4]	; (8019f3c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019f38:	6003      	str	r3, [r0, #0]
 8019f3a:	bd30      	pop	{r4, r5, pc}
 8019f3c:	0802b1fc 	.word	0x0802b1fc

08019f40 <_ZNK8touchgfx9ConstFont4findEt>:
 8019f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f42:	6904      	ldr	r4, [r0, #16]
 8019f44:	b3bc      	cbz	r4, 8019fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019f46:	88a3      	ldrh	r3, [r4, #4]
 8019f48:	8a82      	ldrh	r2, [r0, #20]
 8019f4a:	1acb      	subs	r3, r1, r3
 8019f4c:	f102 32ff 	add.w	r2, r2, #4294967295
 8019f50:	d431      	bmi.n	8019fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019f52:	4293      	cmp	r3, r2
 8019f54:	dd0c      	ble.n	8019f70 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019f56:	230e      	movs	r3, #14
 8019f58:	fb03 4302 	mla	r3, r3, r2, r4
 8019f5c:	889b      	ldrh	r3, [r3, #4]
 8019f5e:	1a5b      	subs	r3, r3, r1
 8019f60:	1ad3      	subs	r3, r2, r3
 8019f62:	429a      	cmp	r2, r3
 8019f64:	db27      	blt.n	8019fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	bfbc      	itt	lt
 8019f6a:	2302      	movlt	r3, #2
 8019f6c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019f70:	2500      	movs	r5, #0
 8019f72:	260e      	movs	r6, #14
 8019f74:	4295      	cmp	r5, r2
 8019f76:	dc1e      	bgt.n	8019fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019f78:	fb06 4003 	mla	r0, r6, r3, r4
 8019f7c:	8887      	ldrh	r7, [r0, #4]
 8019f7e:	42b9      	cmp	r1, r7
 8019f80:	d01a      	beq.n	8019fb8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8019f82:	d20d      	bcs.n	8019fa0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019f84:	1e5a      	subs	r2, r3, #1
 8019f86:	4295      	cmp	r5, r2
 8019f88:	dc15      	bgt.n	8019fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019f8a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019f8e:	1a5b      	subs	r3, r3, r1
 8019f90:	1ad3      	subs	r3, r2, r3
 8019f92:	429a      	cmp	r2, r3
 8019f94:	db0f      	blt.n	8019fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019f96:	429d      	cmp	r5, r3
 8019f98:	ddec      	ble.n	8019f74 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019f9a:	1953      	adds	r3, r2, r5
 8019f9c:	105b      	asrs	r3, r3, #1
 8019f9e:	e7e9      	b.n	8019f74 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019fa0:	1c5d      	adds	r5, r3, #1
 8019fa2:	42aa      	cmp	r2, r5
 8019fa4:	db07      	blt.n	8019fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019fa6:	8a43      	ldrh	r3, [r0, #18]
 8019fa8:	1acb      	subs	r3, r1, r3
 8019faa:	442b      	add	r3, r5
 8019fac:	429d      	cmp	r5, r3
 8019fae:	dc02      	bgt.n	8019fb6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019fb0:	429a      	cmp	r2, r3
 8019fb2:	dadf      	bge.n	8019f74 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019fb4:	e7f1      	b.n	8019f9a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019fb6:	2000      	movs	r0, #0
 8019fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019fba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fbc:	4604      	mov	r4, r0
 8019fbe:	4617      	mov	r7, r2
 8019fc0:	461e      	mov	r6, r3
 8019fc2:	b911      	cbnz	r1, 8019fca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019fc4:	2500      	movs	r5, #0
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fca:	290a      	cmp	r1, #10
 8019fcc:	d0fa      	beq.n	8019fc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019fce:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019fd2:	4291      	cmp	r1, r2
 8019fd4:	d0f6      	beq.n	8019fc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019fd6:	f242 020b 	movw	r2, #8203	; 0x200b
 8019fda:	4291      	cmp	r1, r2
 8019fdc:	d0f2      	beq.n	8019fc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019fde:	f7ff ffaf 	bl	8019f40 <_ZNK8touchgfx9ConstFont4findEt>
 8019fe2:	4605      	mov	r5, r0
 8019fe4:	b950      	cbnz	r0, 8019ffc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019fe6:	6823      	ldr	r3, [r4, #0]
 8019fe8:	4620      	mov	r0, r4
 8019fea:	691b      	ldr	r3, [r3, #16]
 8019fec:	4798      	blx	r3
 8019fee:	4601      	mov	r1, r0
 8019ff0:	4620      	mov	r0, r4
 8019ff2:	f7ff ffa5 	bl	8019f40 <_ZNK8touchgfx9ConstFont4findEt>
 8019ff6:	4605      	mov	r5, r0
 8019ff8:	2800      	cmp	r0, #0
 8019ffa:	d0e3      	beq.n	8019fc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019ffc:	6823      	ldr	r3, [r4, #0]
 8019ffe:	4629      	mov	r1, r5
 801a000:	4620      	mov	r0, r4
 801a002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a004:	4798      	blx	r3
 801a006:	6038      	str	r0, [r7, #0]
 801a008:	6823      	ldr	r3, [r4, #0]
 801a00a:	4620      	mov	r0, r4
 801a00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a00e:	4798      	blx	r3
 801a010:	7030      	strb	r0, [r6, #0]
 801a012:	e7d8      	b.n	8019fc6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a014 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801a014:	2002      	movs	r0, #2
 801a016:	4770      	bx	lr

0801a018 <_ZN8touchgfx12GestureEventD1Ev>:
 801a018:	4770      	bx	lr

0801a01a <_ZN8touchgfx12GestureEventD0Ev>:
 801a01a:	b510      	push	{r4, lr}
 801a01c:	4604      	mov	r4, r0
 801a01e:	210c      	movs	r1, #12
 801a020:	f00d fbed 	bl	80277fe <_ZdlPvj>
 801a024:	4620      	mov	r0, r4
 801a026:	bd10      	pop	{r4, pc}

0801a028 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a028:	b530      	push	{r4, r5, lr}
 801a02a:	460d      	mov	r5, r1
 801a02c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a02e:	b087      	sub	sp, #28
 801a030:	4604      	mov	r4, r0
 801a032:	b301      	cbz	r1, 801a076 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a034:	a801      	add	r0, sp, #4
 801a036:	f7ff ff4f 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a03a:	892a      	ldrh	r2, [r5, #8]
 801a03c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a040:	7928      	ldrb	r0, [r5, #4]
 801a042:	1ad2      	subs	r2, r2, r3
 801a044:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a046:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a04a:	441a      	add	r2, r3
 801a04c:	896b      	ldrh	r3, [r5, #10]
 801a04e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a052:	f88d 0010 	strb.w	r0, [sp, #16]
 801a056:	1b5b      	subs	r3, r3, r5
 801a058:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801a05a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a05c:	442b      	add	r3, r5
 801a05e:	4d07      	ldr	r5, [pc, #28]	; (801a07c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a060:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a064:	a903      	add	r1, sp, #12
 801a066:	9503      	str	r5, [sp, #12]
 801a068:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a06c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a070:	6803      	ldr	r3, [r0, #0]
 801a072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a074:	4798      	blx	r3
 801a076:	b007      	add	sp, #28
 801a078:	bd30      	pop	{r4, r5, pc}
 801a07a:	bf00      	nop
 801a07c:	0802b254 	.word	0x0802b254

0801a080 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a084:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a086:	b08a      	sub	sp, #40	; 0x28
 801a088:	4604      	mov	r4, r0
 801a08a:	460d      	mov	r5, r1
 801a08c:	b113      	cbz	r3, 801a094 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801a08e:	790b      	ldrb	r3, [r1, #4]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d044      	beq.n	801a11e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a094:	f104 0804 	add.w	r8, r4, #4
 801a098:	a803      	add	r0, sp, #12
 801a09a:	4641      	mov	r1, r8
 801a09c:	f7ff ff1c 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0a0:	792b      	ldrb	r3, [r5, #4]
 801a0a2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a0a6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801a0aa:	b983      	cbnz	r3, 801a0ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801a0ac:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801a0b0:	892a      	ldrh	r2, [r5, #8]
 801a0b2:	88e9      	ldrh	r1, [r5, #6]
 801a0b4:	4640      	mov	r0, r8
 801a0b6:	1b92      	subs	r2, r2, r6
 801a0b8:	9301      	str	r3, [sp, #4]
 801a0ba:	1bc9      	subs	r1, r1, r7
 801a0bc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801a0c0:	b212      	sxth	r2, r2
 801a0c2:	9300      	str	r3, [sp, #0]
 801a0c4:	b209      	sxth	r1, r1
 801a0c6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a0ca:	f7fa feab 	bl	8014e24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801a0ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a0d0:	b329      	cbz	r1, 801a11e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a0d2:	a805      	add	r0, sp, #20
 801a0d4:	f7ff ff00 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0d8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a0dc:	792b      	ldrb	r3, [r5, #4]
 801a0de:	a907      	add	r1, sp, #28
 801a0e0:	1abf      	subs	r7, r7, r2
 801a0e2:	88ea      	ldrh	r2, [r5, #6]
 801a0e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a0e6:	4417      	add	r7, r2
 801a0e8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801a0ea:	f88d 3020 	strb.w	r3, [sp, #32]
 801a0ee:	4417      	add	r7, r2
 801a0f0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a0f4:	1ab6      	subs	r6, r6, r2
 801a0f6:	892a      	ldrh	r2, [r5, #8]
 801a0f8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801a0fc:	4416      	add	r6, r2
 801a0fe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a100:	4416      	add	r6, r2
 801a102:	4a08      	ldr	r2, [pc, #32]	; (801a124 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801a104:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801a108:	2600      	movs	r6, #0
 801a10a:	9207      	str	r2, [sp, #28]
 801a10c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801a110:	6803      	ldr	r3, [r0, #0]
 801a112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a114:	4798      	blx	r3
 801a116:	792b      	ldrb	r3, [r5, #4]
 801a118:	b10b      	cbz	r3, 801a11e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a11a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a11e:	b00a      	add	sp, #40	; 0x28
 801a120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a124:	0802a1b4 	.word	0x0802a1b4

0801a128 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a12c:	460c      	mov	r4, r1
 801a12e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a130:	b088      	sub	sp, #32
 801a132:	4605      	mov	r5, r0
 801a134:	2900      	cmp	r1, #0
 801a136:	d06d      	beq.n	801a214 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801a138:	4668      	mov	r0, sp
 801a13a:	f7ff fecd 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a13e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801a140:	88e3      	ldrh	r3, [r4, #6]
 801a142:	f9bd 8000 	ldrsh.w	r8, [sp]
 801a146:	440b      	add	r3, r1
 801a148:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801a14c:	b21b      	sxth	r3, r3
 801a14e:	4543      	cmp	r3, r8
 801a150:	db31      	blt.n	801a1b6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a152:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801a156:	44c4      	add	ip, r8
 801a158:	fa0f fc8c 	sxth.w	ip, ip
 801a15c:	4563      	cmp	r3, ip
 801a15e:	da2a      	bge.n	801a1b6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a160:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801a162:	8926      	ldrh	r6, [r4, #8]
 801a164:	4416      	add	r6, r2
 801a166:	b236      	sxth	r6, r6
 801a168:	42be      	cmp	r6, r7
 801a16a:	db24      	blt.n	801a1b6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a16c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a170:	4438      	add	r0, r7
 801a172:	b200      	sxth	r0, r0
 801a174:	4286      	cmp	r6, r0
 801a176:	da1e      	bge.n	801a1b6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a178:	8963      	ldrh	r3, [r4, #10]
 801a17a:	4419      	add	r1, r3
 801a17c:	b209      	sxth	r1, r1
 801a17e:	4541      	cmp	r1, r8
 801a180:	db08      	blt.n	801a194 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a182:	4561      	cmp	r1, ip
 801a184:	da06      	bge.n	801a194 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a186:	89a3      	ldrh	r3, [r4, #12]
 801a188:	441a      	add	r2, r3
 801a18a:	b212      	sxth	r2, r2
 801a18c:	42ba      	cmp	r2, r7
 801a18e:	db01      	blt.n	801a194 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a190:	4282      	cmp	r2, r0
 801a192:	db10      	blt.n	801a1b6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a194:	4b21      	ldr	r3, [pc, #132]	; (801a21c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801a196:	a904      	add	r1, sp, #16
 801a198:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a19a:	9304      	str	r3, [sp, #16]
 801a19c:	2302      	movs	r3, #2
 801a19e:	f88d 3014 	strb.w	r3, [sp, #20]
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a1a8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a1ac:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a1b0:	6803      	ldr	r3, [r0, #0]
 801a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1b4:	4798      	blx	r3
 801a1b6:	1d29      	adds	r1, r5, #4
 801a1b8:	a802      	add	r0, sp, #8
 801a1ba:	f7ff fe8d 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1be:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a1c2:	88e0      	ldrh	r0, [r4, #6]
 801a1c4:	eba3 0808 	sub.w	r8, r3, r8
 801a1c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a1cc:	7921      	ldrb	r1, [r4, #4]
 801a1ce:	fa1f f888 	uxth.w	r8, r8
 801a1d2:	1bdf      	subs	r7, r3, r7
 801a1d4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a1d8:	b2bb      	uxth	r3, r7
 801a1da:	4440      	add	r0, r8
 801a1dc:	8922      	ldrh	r2, [r4, #8]
 801a1de:	8967      	ldrh	r7, [r4, #10]
 801a1e0:	4460      	add	r0, ip
 801a1e2:	89a4      	ldrh	r4, [r4, #12]
 801a1e4:	441a      	add	r2, r3
 801a1e6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a1e8:	44b8      	add	r8, r7
 801a1ea:	4423      	add	r3, r4
 801a1ec:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a1f0:	4432      	add	r2, r6
 801a1f2:	44e0      	add	r8, ip
 801a1f4:	4433      	add	r3, r6
 801a1f6:	4c0a      	ldr	r4, [pc, #40]	; (801a220 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801a1f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a1fa:	f88d 1014 	strb.w	r1, [sp, #20]
 801a1fe:	a904      	add	r1, sp, #16
 801a200:	9404      	str	r4, [sp, #16]
 801a202:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a206:	f8ad 801a 	strh.w	r8, [sp, #26]
 801a20a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a20e:	6803      	ldr	r3, [r0, #0]
 801a210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a212:	4798      	blx	r3
 801a214:	b008      	add	sp, #32
 801a216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a21a:	bf00      	nop
 801a21c:	0802a1b4 	.word	0x0802a1b4
 801a220:	0802a1c8 	.word	0x0802a1c8

0801a224 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a226:	4604      	mov	r4, r0
 801a228:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a22c:	3201      	adds	r2, #1
 801a22e:	d112      	bne.n	801a256 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a230:	2500      	movs	r5, #0
 801a232:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a236:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a23a:	6803      	ldr	r3, [r0, #0]
 801a23c:	9500      	str	r5, [sp, #0]
 801a23e:	466d      	mov	r5, sp
 801a240:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a244:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a248:	4629      	mov	r1, r5
 801a24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a24c:	4798      	blx	r3
 801a24e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a252:	e884 0003 	stmia.w	r4, {r0, r1}
 801a256:	4620      	mov	r0, r4
 801a258:	b003      	add	sp, #12
 801a25a:	bd30      	pop	{r4, r5, pc}

0801a25c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a25c:	b513      	push	{r0, r1, r4, lr}
 801a25e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a262:	4604      	mov	r4, r0
 801a264:	3301      	adds	r3, #1
 801a266:	d109      	bne.n	801a27c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a268:	4601      	mov	r1, r0
 801a26a:	4668      	mov	r0, sp
 801a26c:	f7ff fe34 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a270:	f8bd 3000 	ldrh.w	r3, [sp]
 801a274:	8423      	strh	r3, [r4, #32]
 801a276:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a27a:	8463      	strh	r3, [r4, #34]	; 0x22
 801a27c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a280:	b002      	add	sp, #8
 801a282:	bd10      	pop	{r4, pc}

0801a284 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a284:	b513      	push	{r0, r1, r4, lr}
 801a286:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a28a:	4604      	mov	r4, r0
 801a28c:	3301      	adds	r3, #1
 801a28e:	d109      	bne.n	801a2a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a290:	4601      	mov	r1, r0
 801a292:	4668      	mov	r0, sp
 801a294:	f7ff fe20 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a298:	f8bd 3000 	ldrh.w	r3, [sp]
 801a29c:	8423      	strh	r3, [r4, #32]
 801a29e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a2a2:	8463      	strh	r3, [r4, #34]	; 0x22
 801a2a4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a2a8:	b002      	add	sp, #8
 801a2aa:	bd10      	pop	{r4, pc}

0801a2ac <_ZN8touchgfx6ScreenC1Ev>:
 801a2ac:	b570      	push	{r4, r5, r6, lr}
 801a2ae:	4b17      	ldr	r3, [pc, #92]	; (801a30c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a2b0:	4605      	mov	r5, r0
 801a2b2:	4a17      	ldr	r2, [pc, #92]	; (801a310 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a2b4:	2101      	movs	r1, #1
 801a2b6:	f845 3b04 	str.w	r3, [r5], #4
 801a2ba:	2300      	movs	r3, #0
 801a2bc:	6042      	str	r2, [r0, #4]
 801a2be:	4604      	mov	r4, r0
 801a2c0:	8103      	strh	r3, [r0, #8]
 801a2c2:	8143      	strh	r3, [r0, #10]
 801a2c4:	8183      	strh	r3, [r0, #12]
 801a2c6:	81c3      	strh	r3, [r0, #14]
 801a2c8:	8203      	strh	r3, [r0, #16]
 801a2ca:	8243      	strh	r3, [r0, #18]
 801a2cc:	8283      	strh	r3, [r0, #20]
 801a2ce:	82c3      	strh	r3, [r0, #22]
 801a2d0:	6203      	str	r3, [r0, #32]
 801a2d2:	8483      	strh	r3, [r0, #36]	; 0x24
 801a2d4:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a2d6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a2da:	6343      	str	r3, [r0, #52]	; 0x34
 801a2dc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a2e0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a2e4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a2e8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a2ec:	4b09      	ldr	r3, [pc, #36]	; (801a314 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a2ee:	4628      	mov	r0, r5
 801a2f0:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a2f4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801a2f6:	4a08      	ldr	r2, [pc, #32]	; (801a318 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a2f8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a2fc:	4798      	blx	r3
 801a2fe:	6863      	ldr	r3, [r4, #4]
 801a300:	4628      	mov	r0, r5
 801a302:	4631      	mov	r1, r6
 801a304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a306:	4798      	blx	r3
 801a308:	4620      	mov	r0, r4
 801a30a:	bd70      	pop	{r4, r5, r6, pc}
 801a30c:	0802b268 	.word	0x0802b268
 801a310:	0802a0ec 	.word	0x0802a0ec
 801a314:	2400aee2 	.word	0x2400aee2
 801a318:	2400aee0 	.word	0x2400aee0

0801a31c <_ZN8touchgfx6Screen4drawEv>:
 801a31c:	4b09      	ldr	r3, [pc, #36]	; (801a344 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a31e:	b507      	push	{r0, r1, r2, lr}
 801a320:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a324:	2100      	movs	r1, #0
 801a326:	4b08      	ldr	r3, [pc, #32]	; (801a348 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a328:	9100      	str	r1, [sp, #0]
 801a32a:	4669      	mov	r1, sp
 801a32c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a330:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a334:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a338:	6803      	ldr	r3, [r0, #0]
 801a33a:	689b      	ldr	r3, [r3, #8]
 801a33c:	4798      	blx	r3
 801a33e:	b003      	add	sp, #12
 801a340:	f85d fb04 	ldr.w	pc, [sp], #4
 801a344:	2400aee0 	.word	0x2400aee0
 801a348:	2400aee2 	.word	0x2400aee2

0801a34c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a350:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a354:	b089      	sub	sp, #36	; 0x24
 801a356:	4680      	mov	r8, r0
 801a358:	460c      	mov	r4, r1
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	4615      	mov	r5, r2
 801a35e:	dd0e      	ble.n	801a37e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a360:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a364:	2b00      	cmp	r3, #0
 801a366:	dd0a      	ble.n	801a37e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a368:	4628      	mov	r0, r5
 801a36a:	f7ff ff5b 	bl	801a224 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a36e:	4621      	mov	r1, r4
 801a370:	f7fe fd0c 	bl	8018d8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a374:	69eb      	ldr	r3, [r5, #28]
 801a376:	b928      	cbnz	r0, 801a384 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a378:	461d      	mov	r5, r3
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d1f4      	bne.n	801a368 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a37e:	b009      	add	sp, #36	; 0x24
 801a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a384:	ae04      	add	r6, sp, #16
 801a386:	2b00      	cmp	r3, #0
 801a388:	f000 80b5 	beq.w	801a4f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a38c:	682b      	ldr	r3, [r5, #0]
 801a38e:	4629      	mov	r1, r5
 801a390:	a802      	add	r0, sp, #8
 801a392:	68db      	ldr	r3, [r3, #12]
 801a394:	4798      	blx	r3
 801a396:	4628      	mov	r0, r5
 801a398:	f7ff ff60 	bl	801a25c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a39c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a3a0:	4407      	add	r7, r0
 801a3a2:	4628      	mov	r0, r5
 801a3a4:	f7ff ff6e 	bl	801a284 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a3a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a3ac:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a3b0:	b23f      	sxth	r7, r7
 801a3b2:	4418      	add	r0, r3
 801a3b4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a3b8:	4621      	mov	r1, r4
 801a3ba:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a3be:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a3c2:	4630      	mov	r0, r6
 801a3c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a3c8:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a3cc:	f7fa fe0c 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801a3d0:	4628      	mov	r0, r5
 801a3d2:	f7ff ff27 	bl	801a224 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a3d6:	ab06      	add	r3, sp, #24
 801a3d8:	4602      	mov	r2, r0
 801a3da:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a3de:	e883 0003 	stmia.w	r3, {r0, r1}
 801a3e2:	4611      	mov	r1, r2
 801a3e4:	4618      	mov	r0, r3
 801a3e6:	f7fa fdff 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801a3ea:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a3ee:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a3f2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a3f6:	4299      	cmp	r1, r3
 801a3f8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a3fc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a400:	d10b      	bne.n	801a41a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a402:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a406:	4552      	cmp	r2, sl
 801a408:	d107      	bne.n	801a41a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a40a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a40e:	455a      	cmp	r2, fp
 801a410:	d103      	bne.n	801a41a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a412:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a416:	454a      	cmp	r2, r9
 801a418:	d06d      	beq.n	801a4f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a41a:	f1bb 0f00 	cmp.w	fp, #0
 801a41e:	dd65      	ble.n	801a4ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a420:	f1b9 0f00 	cmp.w	r9, #0
 801a424:	dd62      	ble.n	801a4ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a426:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a42a:	fa1f f08a 	uxth.w	r0, sl
 801a42e:	4552      	cmp	r2, sl
 801a430:	9000      	str	r0, [sp, #0]
 801a432:	da12      	bge.n	801a45a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a434:	9301      	str	r3, [sp, #4]
 801a436:	9b00      	ldr	r3, [sp, #0]
 801a438:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a43c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a440:	1a9a      	subs	r2, r3, r2
 801a442:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a446:	4631      	mov	r1, r6
 801a448:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a44c:	4640      	mov	r0, r8
 801a44e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a452:	69ea      	ldr	r2, [r5, #28]
 801a454:	f7ff ff7a 	bl	801a34c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a458:	9b01      	ldr	r3, [sp, #4]
 801a45a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a45e:	b29f      	uxth	r7, r3
 801a460:	429a      	cmp	r2, r3
 801a462:	da0d      	bge.n	801a480 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a464:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a468:	1aba      	subs	r2, r7, r2
 801a46a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a46e:	4631      	mov	r1, r6
 801a470:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a474:	4640      	mov	r0, r8
 801a476:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a47a:	69ea      	ldr	r2, [r5, #28]
 801a47c:	f7ff ff66 	bl	801a34c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a480:	8822      	ldrh	r2, [r4, #0]
 801a482:	445f      	add	r7, fp
 801a484:	88a3      	ldrh	r3, [r4, #4]
 801a486:	b2bf      	uxth	r7, r7
 801a488:	4413      	add	r3, r2
 801a48a:	b23a      	sxth	r2, r7
 801a48c:	b29b      	uxth	r3, r3
 801a48e:	b219      	sxth	r1, r3
 801a490:	4291      	cmp	r1, r2
 801a492:	dd0d      	ble.n	801a4b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a494:	1bdb      	subs	r3, r3, r7
 801a496:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a49a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a49e:	4631      	mov	r1, r6
 801a4a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a4a4:	4640      	mov	r0, r8
 801a4a6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a4aa:	69ea      	ldr	r2, [r5, #28]
 801a4ac:	f7ff ff4e 	bl	801a34c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a4b0:	88e2      	ldrh	r2, [r4, #6]
 801a4b2:	8863      	ldrh	r3, [r4, #2]
 801a4b4:	4413      	add	r3, r2
 801a4b6:	9a00      	ldr	r2, [sp, #0]
 801a4b8:	444a      	add	r2, r9
 801a4ba:	b29b      	uxth	r3, r3
 801a4bc:	fa1f f982 	uxth.w	r9, r2
 801a4c0:	b219      	sxth	r1, r3
 801a4c2:	fa0f f289 	sxth.w	r2, r9
 801a4c6:	428a      	cmp	r2, r1
 801a4c8:	da15      	bge.n	801a4f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a4ca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a4ce:	eba3 0309 	sub.w	r3, r3, r9
 801a4d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a4d6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a4da:	4631      	mov	r1, r6
 801a4dc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a4e0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a4e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a4e8:	69ea      	ldr	r2, [r5, #28]
 801a4ea:	e001      	b.n	801a4f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a4ec:	69ea      	ldr	r2, [r5, #28]
 801a4ee:	4621      	mov	r1, r4
 801a4f0:	4640      	mov	r0, r8
 801a4f2:	f7ff ff2b 	bl	801a34c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a4f6:	4628      	mov	r0, r5
 801a4f8:	f7ff fe94 	bl	801a224 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a4fc:	6861      	ldr	r1, [r4, #4]
 801a4fe:	4602      	mov	r2, r0
 801a500:	4633      	mov	r3, r6
 801a502:	6820      	ldr	r0, [r4, #0]
 801a504:	c303      	stmia	r3!, {r0, r1}
 801a506:	4611      	mov	r1, r2
 801a508:	4630      	mov	r0, r6
 801a50a:	f7fa fd6d 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801a50e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a512:	2b00      	cmp	r3, #0
 801a514:	f77f af33 	ble.w	801a37e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a518:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	f77f af2e 	ble.w	801a37e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a522:	4628      	mov	r0, r5
 801a524:	f7ff fe9a 	bl	801a25c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a528:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a52c:	1a18      	subs	r0, r3, r0
 801a52e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a532:	4628      	mov	r0, r5
 801a534:	f7ff fea6 	bl	801a284 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a538:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a53c:	4631      	mov	r1, r6
 801a53e:	1a18      	subs	r0, r3, r0
 801a540:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a544:	4628      	mov	r0, r5
 801a546:	682b      	ldr	r3, [r5, #0]
 801a548:	689b      	ldr	r3, [r3, #8]
 801a54a:	4798      	blx	r3
 801a54c:	e717      	b.n	801a37e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a54e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a54e:	b570      	push	{r4, r5, r6, lr}
 801a550:	1d06      	adds	r6, r0, #4
 801a552:	b086      	sub	sp, #24
 801a554:	460c      	mov	r4, r1
 801a556:	2300      	movs	r3, #0
 801a558:	4631      	mov	r1, r6
 801a55a:	4605      	mov	r5, r0
 801a55c:	a802      	add	r0, sp, #8
 801a55e:	9301      	str	r3, [sp, #4]
 801a560:	f7ff fcba 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a564:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a568:	8822      	ldrh	r2, [r4, #0]
 801a56a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801a56e:	1ad2      	subs	r2, r2, r3
 801a570:	8863      	ldrh	r3, [r4, #2]
 801a572:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a576:	1a5b      	subs	r3, r3, r1
 801a578:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a57c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a580:	aa01      	add	r2, sp, #4
 801a582:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a586:	4630      	mov	r0, r6
 801a588:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a58c:	a904      	add	r1, sp, #16
 801a58e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a592:	f7fa fe01 	bl	8015198 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a596:	9a01      	ldr	r2, [sp, #4]
 801a598:	b11a      	cbz	r2, 801a5a2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801a59a:	4621      	mov	r1, r4
 801a59c:	4628      	mov	r0, r5
 801a59e:	f7ff fed5 	bl	801a34c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a5a2:	b006      	add	sp, #24
 801a5a4:	bd70      	pop	{r4, r5, r6, pc}

0801a5a6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a5a6:	4602      	mov	r2, r0
 801a5a8:	b530      	push	{r4, r5, lr}
 801a5aa:	4604      	mov	r4, r0
 801a5ac:	b085      	sub	sp, #20
 801a5ae:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a5b2:	460d      	mov	r5, r1
 801a5b4:	466b      	mov	r3, sp
 801a5b6:	6851      	ldr	r1, [r2, #4]
 801a5b8:	c303      	stmia	r3!, {r0, r1}
 801a5ba:	4629      	mov	r1, r5
 801a5bc:	4668      	mov	r0, sp
 801a5be:	f7fa fd13 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801a5c2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a5c6:	b12b      	cbz	r3, 801a5d4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a5c8:	4669      	mov	r1, sp
 801a5ca:	4620      	mov	r0, r4
 801a5cc:	f7ff ffbf 	bl	801a54e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a5d0:	b005      	add	sp, #20
 801a5d2:	bd30      	pop	{r4, r5, pc}
 801a5d4:	3404      	adds	r4, #4
 801a5d6:	a802      	add	r0, sp, #8
 801a5d8:	4621      	mov	r1, r4
 801a5da:	f7ff fc7d 	bl	8019ed8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a5de:	f8bd 3000 	ldrh.w	r3, [sp]
 801a5e2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a5e6:	4669      	mov	r1, sp
 801a5e8:	4620      	mov	r0, r4
 801a5ea:	1a9b      	subs	r3, r3, r2
 801a5ec:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a5f0:	f8ad 3000 	strh.w	r3, [sp]
 801a5f4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a5f8:	1a9b      	subs	r3, r3, r2
 801a5fa:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a5fe:	f7fa fd92 	bl	8015126 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a602:	e7e5      	b.n	801a5d0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801a604 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a604:	460b      	mov	r3, r1
 801a606:	680a      	ldr	r2, [r1, #0]
 801a608:	1d01      	adds	r1, r0, #4
 801a60a:	6992      	ldr	r2, [r2, #24]
 801a60c:	4618      	mov	r0, r3
 801a60e:	4710      	bx	r2

0801a610 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801a610:	4298      	cmp	r0, r3
 801a612:	d200      	bcs.n	801a616 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801a614:	b913      	cbnz	r3, 801a61c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801a616:	440a      	add	r2, r1
 801a618:	b210      	sxth	r0, r2
 801a61a:	4770      	bx	lr
 801a61c:	ee07 0a90 	vmov	s15, r0
 801a620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a624:	ee07 3a90 	vmov	s15, r3
 801a628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a62c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a630:	ee07 2a90 	vmov	s15, r2
 801a634:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a638:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a63c:	ee07 1a90 	vmov	s15, r1
 801a640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a644:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a648:	ee67 5a07 	vmul.f32	s11, s14, s14
 801a64c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a650:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a654:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a660:	bfcc      	ite	gt
 801a662:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a666:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a66a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a66e:	ee17 3a90 	vmov	r3, s15
 801a672:	b218      	sxth	r0, r3
 801a674:	4770      	bx	lr

0801a676 <_ZN8touchgfx12TextProviderC1Ev>:
 801a676:	b538      	push	{r3, r4, r5, lr}
 801a678:	2500      	movs	r5, #0
 801a67a:	2302      	movs	r3, #2
 801a67c:	4604      	mov	r4, r0
 801a67e:	220e      	movs	r2, #14
 801a680:	7403      	strb	r3, [r0, #16]
 801a682:	4629      	mov	r1, r5
 801a684:	6145      	str	r5, [r0, #20]
 801a686:	7605      	strb	r5, [r0, #24]
 801a688:	83c5      	strh	r5, [r0, #30]
 801a68a:	8405      	strh	r5, [r0, #32]
 801a68c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a68e:	8705      	strh	r5, [r0, #56]	; 0x38
 801a690:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801a692:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801a696:	e9c0 5500 	strd	r5, r5, [r0]
 801a69a:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801a69e:	304c      	adds	r0, #76	; 0x4c
 801a6a0:	f00d f968 	bl	8027974 <memset>
 801a6a4:	2301      	movs	r3, #1
 801a6a6:	4620      	mov	r0, r4
 801a6a8:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801a6ac:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a6b0:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801a6b4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801a6b8:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801a6bc:	f7ec fc90 	bl	8006fe0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a6c0:	4620      	mov	r0, r4
 801a6c2:	bd38      	pop	{r3, r4, r5, pc}

0801a6c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a6c4:	b530      	push	{r4, r5, lr}
 801a6c6:	2500      	movs	r5, #0
 801a6c8:	2401      	movs	r4, #1
 801a6ca:	6843      	ldr	r3, [r0, #4]
 801a6cc:	b913      	cbnz	r3, 801a6d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a6ce:	6803      	ldr	r3, [r0, #0]
 801a6d0:	b313      	cbz	r3, 801a718 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a6d2:	6043      	str	r3, [r0, #4]
 801a6d4:	7e03      	ldrb	r3, [r0, #24]
 801a6d6:	b143      	cbz	r3, 801a6ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a6d8:	6943      	ldr	r3, [r0, #20]
 801a6da:	b12b      	cbz	r3, 801a6e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a6dc:	881a      	ldrh	r2, [r3, #0]
 801a6de:	b11a      	cbz	r2, 801a6e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a6e0:	1c9a      	adds	r2, r3, #2
 801a6e2:	6142      	str	r2, [r0, #20]
 801a6e4:	8818      	ldrh	r0, [r3, #0]
 801a6e6:	bd30      	pop	{r4, r5, pc}
 801a6e8:	7605      	strb	r5, [r0, #24]
 801a6ea:	6843      	ldr	r3, [r0, #4]
 801a6ec:	8819      	ldrh	r1, [r3, #0]
 801a6ee:	b199      	cbz	r1, 801a718 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a6f0:	1c9a      	adds	r2, r3, #2
 801a6f2:	2902      	cmp	r1, #2
 801a6f4:	6042      	str	r2, [r0, #4]
 801a6f6:	d1f5      	bne.n	801a6e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a6f8:	7c03      	ldrb	r3, [r0, #16]
 801a6fa:	2b01      	cmp	r3, #1
 801a6fc:	d8e5      	bhi.n	801a6ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a6fe:	1c5a      	adds	r2, r3, #1
 801a700:	3302      	adds	r3, #2
 801a702:	7402      	strb	r2, [r0, #16]
 801a704:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a708:	6143      	str	r3, [r0, #20]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d0dd      	beq.n	801a6ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a70e:	881b      	ldrh	r3, [r3, #0]
 801a710:	2b00      	cmp	r3, #0
 801a712:	d0da      	beq.n	801a6ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a714:	7604      	strb	r4, [r0, #24]
 801a716:	e7d8      	b.n	801a6ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a718:	2000      	movs	r0, #0
 801a71a:	e7e4      	b.n	801a6e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a71c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a71c:	b430      	push	{r4, r5}
 801a71e:	6815      	ldr	r5, [r2, #0]
 801a720:	6085      	str	r5, [r0, #8]
 801a722:	6852      	ldr	r2, [r2, #4]
 801a724:	6443      	str	r3, [r0, #68]	; 0x44
 801a726:	60c2      	str	r2, [r0, #12]
 801a728:	2200      	movs	r2, #0
 801a72a:	9b02      	ldr	r3, [sp, #8]
 801a72c:	7402      	strb	r2, [r0, #16]
 801a72e:	6001      	str	r1, [r0, #0]
 801a730:	6483      	str	r3, [r0, #72]	; 0x48
 801a732:	6042      	str	r2, [r0, #4]
 801a734:	6142      	str	r2, [r0, #20]
 801a736:	7602      	strb	r2, [r0, #24]
 801a738:	8702      	strh	r2, [r0, #56]	; 0x38
 801a73a:	8402      	strh	r2, [r0, #32]
 801a73c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a740:	bc30      	pop	{r4, r5}
 801a742:	f7ec bc4d 	b.w	8006fe0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a746 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a746:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a748:	4605      	mov	r5, r0
 801a74a:	4608      	mov	r0, r1
 801a74c:	b1f1      	cbz	r1, 801a78c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a74e:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801a752:	460b      	mov	r3, r1
 801a754:	f101 0708 	add.w	r7, r1, #8
 801a758:	4622      	mov	r2, r4
 801a75a:	6818      	ldr	r0, [r3, #0]
 801a75c:	3308      	adds	r3, #8
 801a75e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a762:	4626      	mov	r6, r4
 801a764:	42bb      	cmp	r3, r7
 801a766:	c603      	stmia	r6!, {r0, r1}
 801a768:	4634      	mov	r4, r6
 801a76a:	d1f6      	bne.n	801a75a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a76c:	6818      	ldr	r0, [r3, #0]
 801a76e:	6030      	str	r0, [r6, #0]
 801a770:	4610      	mov	r0, r2
 801a772:	889b      	ldrh	r3, [r3, #4]
 801a774:	80b3      	strh	r3, [r6, #4]
 801a776:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801a77a:	015b      	lsls	r3, r3, #5
 801a77c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a780:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801a784:	430b      	orrs	r3, r1
 801a786:	425b      	negs	r3, r3
 801a788:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a78c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a78e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a78e:	b538      	push	{r3, r4, r5, lr}
 801a790:	460c      	mov	r4, r1
 801a792:	6811      	ldr	r1, [r2, #0]
 801a794:	4610      	mov	r0, r2
 801a796:	68cd      	ldr	r5, [r1, #12]
 801a798:	4619      	mov	r1, r3
 801a79a:	47a8      	blx	r5
 801a79c:	2800      	cmp	r0, #0
 801a79e:	bf08      	it	eq
 801a7a0:	4620      	moveq	r0, r4
 801a7a2:	bd38      	pop	{r3, r4, r5, pc}

0801a7a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7a6:	4604      	mov	r4, r0
 801a7a8:	4615      	mov	r5, r2
 801a7aa:	4608      	mov	r0, r1
 801a7ac:	b93a      	cbnz	r2, 801a7be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a7ae:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a7b2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801a7b6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801a7ba:	4628      	mov	r0, r5
 801a7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7be:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a7c2:	8893      	ldrh	r3, [r2, #4]
 801a7c4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a7c8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a7cc:	79ee      	ldrb	r6, [r5, #7]
 801a7ce:	4316      	orrs	r6, r2
 801a7d0:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801a7d4:	189a      	adds	r2, r3, r2
 801a7d6:	b2b7      	uxth	r7, r6
 801a7d8:	b291      	uxth	r1, r2
 801a7da:	291d      	cmp	r1, #29
 801a7dc:	f200 8084 	bhi.w	801a8e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a7e0:	2201      	movs	r2, #1
 801a7e2:	10f6      	asrs	r6, r6, #3
 801a7e4:	408a      	lsls	r2, r1
 801a7e6:	4978      	ldr	r1, [pc, #480]	; (801a9c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801a7e8:	420a      	tst	r2, r1
 801a7ea:	d12e      	bne.n	801a84a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a7ec:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a7f0:	d07a      	beq.n	801a8e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a7f2:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801a7f6:	462b      	mov	r3, r5
 801a7f8:	f105 0e08 	add.w	lr, r5, #8
 801a7fc:	4615      	mov	r5, r2
 801a7fe:	6818      	ldr	r0, [r3, #0]
 801a800:	3308      	adds	r3, #8
 801a802:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a806:	4694      	mov	ip, r2
 801a808:	4573      	cmp	r3, lr
 801a80a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a80e:	4662      	mov	r2, ip
 801a810:	d1f5      	bne.n	801a7fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801a812:	6818      	ldr	r0, [r3, #0]
 801a814:	f8cc 0000 	str.w	r0, [ip]
 801a818:	889b      	ldrh	r3, [r3, #4]
 801a81a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a81e:	b2b3      	uxth	r3, r6
 801a820:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a824:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801a828:	1aca      	subs	r2, r1, r3
 801a82a:	1bcf      	subs	r7, r1, r7
 801a82c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a830:	b292      	uxth	r2, r2
 801a832:	1afb      	subs	r3, r7, r3
 801a834:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801a838:	10d2      	asrs	r2, r2, #3
 801a83a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a83e:	4302      	orrs	r2, r0
 801a840:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801a844:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a848:	e7b7      	b.n	801a7ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a84a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a84c:	b92b      	cbnz	r3, 801a85a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801a84e:	4b5f      	ldr	r3, [pc, #380]	; (801a9cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801a850:	21c0      	movs	r1, #192	; 0xc0
 801a852:	4a5f      	ldr	r2, [pc, #380]	; (801a9d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801a854:	485f      	ldr	r0, [pc, #380]	; (801a9d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801a856:	f00d f801 	bl	802785c <__assert_func>
 801a85a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a85c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a860:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801a862:	f640 6333 	movw	r3, #3635	; 0xe33
 801a866:	4299      	cmp	r1, r3
 801a868:	d110      	bne.n	801a88c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801a86a:	6803      	ldr	r3, [r0, #0]
 801a86c:	68db      	ldr	r3, [r3, #12]
 801a86e:	4798      	blx	r3
 801a870:	7b41      	ldrb	r1, [r0, #13]
 801a872:	00cb      	lsls	r3, r1, #3
 801a874:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a878:	7a03      	ldrb	r3, [r0, #8]
 801a87a:	0648      	lsls	r0, r1, #25
 801a87c:	ea43 0302 	orr.w	r3, r3, r2
 801a880:	bf44      	itt	mi
 801a882:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a886:	b21b      	sxthmi	r3, r3
 801a888:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a88c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801a890:	462a      	mov	r2, r5
 801a892:	f105 0c08 	add.w	ip, r5, #8
 801a896:	443b      	add	r3, r7
 801a898:	4433      	add	r3, r6
 801a89a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801a89e:	b29b      	uxth	r3, r3
 801a8a0:	4635      	mov	r5, r6
 801a8a2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a8a6:	6810      	ldr	r0, [r2, #0]
 801a8a8:	3208      	adds	r2, #8
 801a8aa:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a8ae:	4637      	mov	r7, r6
 801a8b0:	4562      	cmp	r2, ip
 801a8b2:	c703      	stmia	r7!, {r0, r1}
 801a8b4:	463e      	mov	r6, r7
 801a8b6:	d1f6      	bne.n	801a8a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801a8b8:	6810      	ldr	r0, [r2, #0]
 801a8ba:	6038      	str	r0, [r7, #0]
 801a8bc:	8892      	ldrh	r2, [r2, #4]
 801a8be:	80ba      	strh	r2, [r7, #4]
 801a8c0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a8c4:	10db      	asrs	r3, r3, #3
 801a8c6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a8ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a8ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a8d2:	4313      	orrs	r3, r2
 801a8d4:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801a8d8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a8dc:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801a8e0:	1a9b      	subs	r3, r3, r2
 801a8e2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801a8e6:	e768      	b.n	801a7ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a8e8:	f023 0204 	bic.w	r2, r3, #4
 801a8ec:	f640 611b 	movw	r1, #3611	; 0xe1b
 801a8f0:	428a      	cmp	r2, r1
 801a8f2:	d003      	beq.n	801a8fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801a8f4:	f640 621d 	movw	r2, #3613	; 0xe1d
 801a8f8:	4293      	cmp	r3, r2
 801a8fa:	d120      	bne.n	801a93e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a8fc:	3b01      	subs	r3, #1
 801a8fe:	4602      	mov	r2, r0
 801a900:	4629      	mov	r1, r5
 801a902:	4620      	mov	r0, r4
 801a904:	b29b      	uxth	r3, r3
 801a906:	f7ff ff42 	bl	801a78e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a90a:	7b41      	ldrb	r1, [r0, #13]
 801a90c:	00cb      	lsls	r3, r1, #3
 801a90e:	0649      	lsls	r1, r1, #25
 801a910:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a914:	7a03      	ldrb	r3, [r0, #8]
 801a916:	ea43 0302 	orr.w	r3, r3, r2
 801a91a:	bf44      	itt	mi
 801a91c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a920:	b21b      	sxthmi	r3, r3
 801a922:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a926:	7b6b      	ldrb	r3, [r5, #13]
 801a928:	7aaa      	ldrb	r2, [r5, #10]
 801a92a:	005b      	lsls	r3, r3, #1
 801a92c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a930:	4313      	orrs	r3, r2
 801a932:	115a      	asrs	r2, r3, #5
 801a934:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a938:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a93c:	e035      	b.n	801a9aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801a93e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a942:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801a946:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801a94a:	7a2a      	ldrb	r2, [r5, #8]
 801a94c:	ea42 0201 	orr.w	r2, r2, r1
 801a950:	f640 6109 	movw	r1, #3593	; 0xe09
 801a954:	bf1c      	itt	ne
 801a956:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801a95a:	b212      	sxthne	r2, r2
 801a95c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a960:	f023 0210 	bic.w	r2, r3, #16
 801a964:	428a      	cmp	r2, r1
 801a966:	d003      	beq.n	801a970 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801a968:	f640 6213 	movw	r2, #3603	; 0xe13
 801a96c:	4293      	cmp	r3, r2
 801a96e:	d129      	bne.n	801a9c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801a970:	7b6e      	ldrb	r6, [r5, #13]
 801a972:	4629      	mov	r1, r5
 801a974:	0076      	lsls	r6, r6, #1
 801a976:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a97a:	7aae      	ldrb	r6, [r5, #10]
 801a97c:	4316      	orrs	r6, r2
 801a97e:	f640 6213 	movw	r2, #3603	; 0xe13
 801a982:	4293      	cmp	r3, r2
 801a984:	4602      	mov	r2, r0
 801a986:	4620      	mov	r0, r4
 801a988:	bf16      	itet	ne
 801a98a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a98e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a992:	b29b      	uxthne	r3, r3
 801a994:	f7ff fefb 	bl	801a78e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a998:	7b43      	ldrb	r3, [r0, #13]
 801a99a:	7a82      	ldrb	r2, [r0, #10]
 801a99c:	005b      	lsls	r3, r3, #1
 801a99e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a9a2:	4313      	orrs	r3, r2
 801a9a4:	1af6      	subs	r6, r6, r3
 801a9a6:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801a9aa:	7b69      	ldrb	r1, [r5, #13]
 801a9ac:	00cb      	lsls	r3, r1, #3
 801a9ae:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a9b2:	7a2b      	ldrb	r3, [r5, #8]
 801a9b4:	4313      	orrs	r3, r2
 801a9b6:	064a      	lsls	r2, r1, #25
 801a9b8:	bf44      	itt	mi
 801a9ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a9be:	b21b      	sxthmi	r3, r3
 801a9c0:	1bdb      	subs	r3, r3, r7
 801a9c2:	e73f      	b.n	801a844 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801a9c4:	2300      	movs	r3, #0
 801a9c6:	e7b7      	b.n	801a938 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801a9c8:	3fc00079 	.word	0x3fc00079
 801a9cc:	0802b294 	.word	0x0802b294
 801a9d0:	0802b506 	.word	0x0802b506
 801a9d4:	0802b29d 	.word	0x0802b29d

0801a9d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a9d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9dc:	4604      	mov	r4, r0
 801a9de:	b942      	cbnz	r2, 801a9f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a9e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a9e4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801a9e8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801a9ec:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a9f0:	e046      	b.n	801aa80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801a9f2:	7b51      	ldrb	r1, [r2, #13]
 801a9f4:	8893      	ldrh	r3, [r2, #4]
 801a9f6:	010f      	lsls	r7, r1, #4
 801a9f8:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801a9fc:	79d7      	ldrb	r7, [r2, #7]
 801a9fe:	4307      	orrs	r7, r0
 801aa00:	2f04      	cmp	r7, #4
 801aa02:	b2bd      	uxth	r5, r7
 801aa04:	bfcc      	ite	gt
 801aa06:	08bf      	lsrgt	r7, r7, #2
 801aa08:	2701      	movle	r7, #1
 801aa0a:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801aa0e:	f200 80ab 	bhi.w	801ab68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801aa12:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801aa16:	4283      	cmp	r3, r0
 801aa18:	d216      	bcs.n	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa1a:	f240 605b 	movw	r0, #1627	; 0x65b
 801aa1e:	4283      	cmp	r3, r0
 801aa20:	d859      	bhi.n	801aad6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801aa22:	f240 6057 	movw	r0, #1623	; 0x657
 801aa26:	4283      	cmp	r3, r0
 801aa28:	d20e      	bcs.n	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa2a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801aa2e:	d24a      	bcs.n	801aac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801aa30:	f240 604e 	movw	r0, #1614	; 0x64e
 801aa34:	4283      	cmp	r3, r0
 801aa36:	d207      	bcs.n	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa38:	f240 601a 	movw	r0, #1562	; 0x61a
 801aa3c:	4283      	cmp	r3, r0
 801aa3e:	d02a      	beq.n	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aa40:	d821      	bhi.n	801aa86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801aa42:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801aa46:	d35b      	bcc.n	801ab00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aa48:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801aa4c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aa50:	f040 80d0 	bne.w	801abf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801aa54:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801aa58:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aa5c:	f040 80ca 	bne.w	801abf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801aa60:	00cb      	lsls	r3, r1, #3
 801aa62:	0649      	lsls	r1, r1, #25
 801aa64:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aa68:	7a13      	ldrb	r3, [r2, #8]
 801aa6a:	ea43 0300 	orr.w	r3, r3, r0
 801aa6e:	bf44      	itt	mi
 801aa70:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aa74:	b21b      	sxthmi	r3, r3
 801aa76:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801aa7a:	1b5d      	subs	r5, r3, r5
 801aa7c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801aa80:	4610      	mov	r0, r2
 801aa82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa86:	f240 604b 	movw	r0, #1611	; 0x64b
 801aa8a:	4283      	cmp	r3, r0
 801aa8c:	d338      	bcc.n	801ab00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aa8e:	f240 604c 	movw	r0, #1612	; 0x64c
 801aa92:	4283      	cmp	r3, r0
 801aa94:	d9d8      	bls.n	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa96:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801aa9a:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801aa9e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aaa2:	f040 80f2 	bne.w	801ac8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801aaa6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aaaa:	f040 80ee 	bne.w	801ac8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801aaae:	00cb      	lsls	r3, r1, #3
 801aab0:	064e      	lsls	r6, r1, #25
 801aab2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aab6:	7a13      	ldrb	r3, [r2, #8]
 801aab8:	ea43 0300 	orr.w	r3, r3, r0
 801aabc:	bf44      	itt	mi
 801aabe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aac2:	b21b      	sxthmi	r3, r3
 801aac4:	e7d9      	b.n	801aa7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801aac6:	f240 6054 	movw	r0, #1620	; 0x654
 801aaca:	4283      	cmp	r3, r0
 801aacc:	d8e3      	bhi.n	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aace:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801aad2:	d9e0      	bls.n	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aad4:	e7b8      	b.n	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aad6:	f240 6074 	movw	r0, #1652	; 0x674
 801aada:	4283      	cmp	r3, r0
 801aadc:	d0b4      	beq.n	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aade:	d82d      	bhi.n	801ab3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801aae0:	f240 605e 	movw	r0, #1630	; 0x65e
 801aae4:	4283      	cmp	r3, r0
 801aae6:	d804      	bhi.n	801aaf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801aae8:	f240 605d 	movw	r0, #1629	; 0x65d
 801aaec:	4283      	cmp	r3, r0
 801aaee:	d3d2      	bcc.n	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aaf0:	e7aa      	b.n	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aaf2:	f240 605f 	movw	r0, #1631	; 0x65f
 801aaf6:	4283      	cmp	r3, r0
 801aaf8:	d0cd      	beq.n	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aafa:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801aafe:	d0a3      	beq.n	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab00:	00cb      	lsls	r3, r1, #3
 801ab02:	0649      	lsls	r1, r1, #25
 801ab04:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ab08:	7a13      	ldrb	r3, [r2, #8]
 801ab0a:	ea43 0300 	orr.w	r3, r3, r0
 801ab0e:	bf44      	itt	mi
 801ab10:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ab14:	b21b      	sxthmi	r3, r3
 801ab16:	1b5d      	subs	r5, r3, r5
 801ab18:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ab1c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ab20:	7b53      	ldrb	r3, [r2, #13]
 801ab22:	015b      	lsls	r3, r3, #5
 801ab24:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ab28:	7993      	ldrb	r3, [r2, #6]
 801ab2a:	430b      	orrs	r3, r1
 801ab2c:	2105      	movs	r1, #5
 801ab2e:	005b      	lsls	r3, r3, #1
 801ab30:	fb93 f3f1 	sdiv	r3, r3, r1
 801ab34:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ab38:	440b      	add	r3, r1
 801ab3a:	e757      	b.n	801a9ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ab3c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801ab40:	4283      	cmp	r3, r0
 801ab42:	d809      	bhi.n	801ab58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801ab44:	f240 60df 	movw	r0, #1759	; 0x6df
 801ab48:	4283      	cmp	r3, r0
 801ab4a:	f4bf af7d 	bcs.w	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab4e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ab52:	2b05      	cmp	r3, #5
 801ab54:	d8d4      	bhi.n	801ab00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ab56:	e777      	b.n	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab58:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ab5c:	4283      	cmp	r3, r0
 801ab5e:	d09a      	beq.n	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab60:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ab64:	4283      	cmp	r3, r0
 801ab66:	e7ca      	b.n	801aafe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801ab68:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ab6c:	d22b      	bcs.n	801abc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801ab6e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ab72:	4283      	cmp	r3, r0
 801ab74:	d28f      	bcs.n	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab76:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ab7a:	4283      	cmp	r3, r0
 801ab7c:	d816      	bhi.n	801abac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801ab7e:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ab82:	4283      	cmp	r3, r0
 801ab84:	f4bf af60 	bcs.w	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab88:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ab8c:	4283      	cmp	r3, r0
 801ab8e:	d80a      	bhi.n	801aba6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801ab90:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ab94:	4283      	cmp	r3, r0
 801ab96:	f4bf af57 	bcs.w	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab9a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ab9e:	4283      	cmp	r3, r0
 801aba0:	f43f af79 	beq.w	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aba4:	e7ac      	b.n	801ab00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aba6:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801abaa:	e7f8      	b.n	801ab9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801abac:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801abb0:	4283      	cmp	r3, r0
 801abb2:	d802      	bhi.n	801abba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801abb4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801abb8:	e798      	b.n	801aaec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801abba:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801abbe:	4283      	cmp	r3, r0
 801abc0:	f47f af42 	bne.w	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abc4:	e767      	b.n	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abc6:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801abca:	4283      	cmp	r3, r0
 801abcc:	f43f af63 	beq.w	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abd0:	d802      	bhi.n	801abd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801abd2:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801abd6:	e7f2      	b.n	801abbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801abd8:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801abdc:	4283      	cmp	r3, r0
 801abde:	d805      	bhi.n	801abec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801abe0:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801abe4:	4283      	cmp	r3, r0
 801abe6:	f4ff af2f 	bcc.w	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abea:	e754      	b.n	801aa96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abec:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801abf0:	4283      	cmp	r3, r0
 801abf2:	e7af      	b.n	801ab54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801abf4:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801abf8:	4617      	mov	r7, r2
 801abfa:	f102 0808 	add.w	r8, r2, #8
 801abfe:	4666      	mov	r6, ip
 801ac00:	6838      	ldr	r0, [r7, #0]
 801ac02:	3708      	adds	r7, #8
 801ac04:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ac08:	46e6      	mov	lr, ip
 801ac0a:	4547      	cmp	r7, r8
 801ac0c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ac10:	46f4      	mov	ip, lr
 801ac12:	d1f5      	bne.n	801ac00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801ac14:	6838      	ldr	r0, [r7, #0]
 801ac16:	f8ce 0000 	str.w	r0, [lr]
 801ac1a:	88b9      	ldrh	r1, [r7, #4]
 801ac1c:	f8ae 1004 	strh.w	r1, [lr, #4]
 801ac20:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ac24:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ac28:	d009      	beq.n	801ac3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801ac2a:	7b51      	ldrb	r1, [r2, #13]
 801ac2c:	7992      	ldrb	r2, [r2, #6]
 801ac2e:	0149      	lsls	r1, r1, #5
 801ac30:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ac34:	4311      	orrs	r1, r2
 801ac36:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ac3a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ac3e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ac42:	d00d      	beq.n	801ac60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801ac44:	442b      	add	r3, r5
 801ac46:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ac4a:	b29b      	uxth	r3, r3
 801ac4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ac50:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ac54:	10db      	asrs	r3, r3, #3
 801ac56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ac5a:	4313      	orrs	r3, r2
 801ac5c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ac60:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801ac64:	00cb      	lsls	r3, r1, #3
 801ac66:	064f      	lsls	r7, r1, #25
 801ac68:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ac6c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801ac70:	ea43 0302 	orr.w	r3, r3, r2
 801ac74:	bf44      	itt	mi
 801ac76:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ac7a:	b21b      	sxthmi	r3, r3
 801ac7c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ac80:	1b5d      	subs	r5, r3, r5
 801ac82:	4632      	mov	r2, r6
 801ac84:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ac88:	e6fa      	b.n	801aa80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801ac8a:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801ac8e:	4694      	mov	ip, r2
 801ac90:	f102 0908 	add.w	r9, r2, #8
 801ac94:	4676      	mov	r6, lr
 801ac96:	f8dc 0000 	ldr.w	r0, [ip]
 801ac9a:	f10c 0c08 	add.w	ip, ip, #8
 801ac9e:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801aca2:	46f0      	mov	r8, lr
 801aca4:	45cc      	cmp	ip, r9
 801aca6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801acaa:	46c6      	mov	lr, r8
 801acac:	d1f3      	bne.n	801ac96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801acae:	f8dc 0000 	ldr.w	r0, [ip]
 801acb2:	f8c8 0000 	str.w	r0, [r8]
 801acb6:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801acba:	f8a8 1004 	strh.w	r1, [r8, #4]
 801acbe:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801acc2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801acc6:	d009      	beq.n	801acdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801acc8:	7b51      	ldrb	r1, [r2, #13]
 801acca:	7992      	ldrb	r2, [r2, #6]
 801accc:	0149      	lsls	r1, r1, #5
 801acce:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801acd2:	4311      	orrs	r1, r2
 801acd4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801acd8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801acdc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ace0:	d00d      	beq.n	801acfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801ace2:	1bdb      	subs	r3, r3, r7
 801ace4:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ace8:	b29b      	uxth	r3, r3
 801acea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801acee:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801acf2:	10db      	asrs	r3, r3, #3
 801acf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801acf8:	4313      	orrs	r3, r2
 801acfa:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801acfe:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801ad02:	00cb      	lsls	r3, r1, #3
 801ad04:	0648      	lsls	r0, r1, #25
 801ad06:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ad0a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801ad0e:	ea43 0302 	orr.w	r3, r3, r2
 801ad12:	bf44      	itt	mi
 801ad14:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ad18:	b21b      	sxthmi	r3, r3
 801ad1a:	e7b1      	b.n	801ac80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801ad1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ad1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad20:	461e      	mov	r6, r3
 801ad22:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801ad24:	4604      	mov	r4, r0
 801ad26:	4617      	mov	r7, r2
 801ad28:	b92b      	cbnz	r3, 801ad36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801ad2a:	4b25      	ldr	r3, [pc, #148]	; (801adc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801ad2c:	21c0      	movs	r1, #192	; 0xc0
 801ad2e:	4a25      	ldr	r2, [pc, #148]	; (801adc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801ad30:	4825      	ldr	r0, [pc, #148]	; (801adc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801ad32:	f00c fd93 	bl	802785c <__assert_func>
 801ad36:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ad38:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ad3c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ad40:	f7ec f8a8 	bl	8006e94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ad44:	4605      	mov	r5, r0
 801ad46:	b918      	cbnz	r0, 801ad50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801ad48:	6030      	str	r0, [r6, #0]
 801ad4a:	4628      	mov	r0, r5
 801ad4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad50:	683b      	ldr	r3, [r7, #0]
 801ad52:	4601      	mov	r1, r0
 801ad54:	4638      	mov	r0, r7
 801ad56:	68db      	ldr	r3, [r3, #12]
 801ad58:	4798      	blx	r3
 801ad5a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ad5e:	4602      	mov	r2, r0
 801ad60:	6030      	str	r0, [r6, #0]
 801ad62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ad66:	d213      	bcs.n	801ad90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801ad68:	4643      	mov	r3, r8
 801ad6a:	4639      	mov	r1, r7
 801ad6c:	4620      	mov	r0, r4
 801ad6e:	f7ff fe33 	bl	801a9d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ad72:	6030      	str	r0, [r6, #0]
 801ad74:	6833      	ldr	r3, [r6, #0]
 801ad76:	b143      	cbz	r3, 801ad8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801ad78:	7b5a      	ldrb	r2, [r3, #13]
 801ad7a:	7a9b      	ldrb	r3, [r3, #10]
 801ad7c:	0052      	lsls	r2, r2, #1
 801ad7e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ad82:	4313      	orrs	r3, r2
 801ad84:	bf0c      	ite	eq
 801ad86:	2301      	moveq	r3, #1
 801ad88:	2300      	movne	r3, #0
 801ad8a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ad8e:	e7dc      	b.n	801ad4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801ad90:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ad94:	b29b      	uxth	r3, r3
 801ad96:	2b7f      	cmp	r3, #127	; 0x7f
 801ad98:	d804      	bhi.n	801ada4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801ad9a:	4639      	mov	r1, r7
 801ad9c:	4620      	mov	r0, r4
 801ad9e:	f7ff fd01 	bl	801a7a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ada2:	e7e6      	b.n	801ad72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ada4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d0e3      	beq.n	801ad74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801adac:	f640 1302 	movw	r3, #2306	; 0x902
 801adb0:	429d      	cmp	r5, r3
 801adb2:	d1df      	bne.n	801ad74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801adb4:	4601      	mov	r1, r0
 801adb6:	4620      	mov	r0, r4
 801adb8:	f7ff fcc5 	bl	801a746 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801adbc:	e7d9      	b.n	801ad72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801adbe:	bf00      	nop
 801adc0:	0802b294 	.word	0x0802b294
 801adc4:	0802b506 	.word	0x0802b506
 801adc8:	0802b29d 	.word	0x0802b29d

0801adcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801adcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801add0:	461e      	mov	r6, r3
 801add2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801add4:	4604      	mov	r4, r0
 801add6:	4617      	mov	r7, r2
 801add8:	b92b      	cbnz	r3, 801ade6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801adda:	4b26      	ldr	r3, [pc, #152]	; (801ae74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801addc:	21c0      	movs	r1, #192	; 0xc0
 801adde:	4a26      	ldr	r2, [pc, #152]	; (801ae78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801ade0:	4826      	ldr	r0, [pc, #152]	; (801ae7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801ade2:	f00c fd3b 	bl	802785c <__assert_func>
 801ade6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ade8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801adec:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801adf0:	f7ec f850 	bl	8006e94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801adf4:	4605      	mov	r5, r0
 801adf6:	b918      	cbnz	r0, 801ae00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801adf8:	6030      	str	r0, [r6, #0]
 801adfa:	4628      	mov	r0, r5
 801adfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae00:	683b      	ldr	r3, [r7, #0]
 801ae02:	4601      	mov	r1, r0
 801ae04:	4638      	mov	r0, r7
 801ae06:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ae0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ae0e:	47c8      	blx	r9
 801ae10:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ae14:	4602      	mov	r2, r0
 801ae16:	6030      	str	r0, [r6, #0]
 801ae18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ae1c:	d213      	bcs.n	801ae46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801ae1e:	4643      	mov	r3, r8
 801ae20:	4639      	mov	r1, r7
 801ae22:	4620      	mov	r0, r4
 801ae24:	f7ff fdd8 	bl	801a9d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ae28:	6030      	str	r0, [r6, #0]
 801ae2a:	6833      	ldr	r3, [r6, #0]
 801ae2c:	b143      	cbz	r3, 801ae40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ae2e:	7b5a      	ldrb	r2, [r3, #13]
 801ae30:	7a9b      	ldrb	r3, [r3, #10]
 801ae32:	0052      	lsls	r2, r2, #1
 801ae34:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ae38:	4313      	orrs	r3, r2
 801ae3a:	bf0c      	ite	eq
 801ae3c:	2301      	moveq	r3, #1
 801ae3e:	2300      	movne	r3, #0
 801ae40:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ae44:	e7d9      	b.n	801adfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801ae46:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ae4a:	b29b      	uxth	r3, r3
 801ae4c:	2b7f      	cmp	r3, #127	; 0x7f
 801ae4e:	d804      	bhi.n	801ae5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801ae50:	4639      	mov	r1, r7
 801ae52:	4620      	mov	r0, r4
 801ae54:	f7ff fca6 	bl	801a7a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ae58:	e7e6      	b.n	801ae28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801ae5a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d0e3      	beq.n	801ae2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801ae62:	f640 1302 	movw	r3, #2306	; 0x902
 801ae66:	429d      	cmp	r5, r3
 801ae68:	d1df      	bne.n	801ae2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801ae6a:	4601      	mov	r1, r0
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	f7ff fc6a 	bl	801a746 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ae72:	e7d9      	b.n	801ae28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801ae74:	0802b294 	.word	0x0802b294
 801ae78:	0802b506 	.word	0x0802b506
 801ae7c:	0802b29d 	.word	0x0802b29d

0801ae80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ae80:	b510      	push	{r4, lr}
 801ae82:	4604      	mov	r4, r0
 801ae84:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801ae88:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ae8a:	b9d9      	cbnz	r1, 801aec4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801ae8c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ae8e:	2b0a      	cmp	r3, #10
 801ae90:	d037      	beq.n	801af02 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801ae92:	4620      	mov	r0, r4
 801ae94:	f7ff fc16 	bl	801a6c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ae98:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ae9a:	2b09      	cmp	r3, #9
 801ae9c:	d906      	bls.n	801aeac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801ae9e:	4b19      	ldr	r3, [pc, #100]	; (801af04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801aea0:	f44f 7182 	mov.w	r1, #260	; 0x104
 801aea4:	4a18      	ldr	r2, [pc, #96]	; (801af08 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801aea6:	4819      	ldr	r0, [pc, #100]	; (801af0c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801aea8:	f00c fcd8 	bl	802785c <__assert_func>
 801aeac:	1c5a      	adds	r2, r3, #1
 801aeae:	8722      	strh	r2, [r4, #56]	; 0x38
 801aeb0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801aeb2:	4413      	add	r3, r2
 801aeb4:	b29b      	uxth	r3, r3
 801aeb6:	2b09      	cmp	r3, #9
 801aeb8:	bf88      	it	hi
 801aeba:	3b0a      	subhi	r3, #10
 801aebc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aec0:	8458      	strh	r0, [r3, #34]	; 0x22
 801aec2:	e7e3      	b.n	801ae8c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801aec4:	2b0a      	cmp	r3, #10
 801aec6:	d01c      	beq.n	801af02 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801aec8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801aeca:	3901      	subs	r1, #1
 801aecc:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801aed0:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801aed2:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801aed6:	1c51      	adds	r1, r2, #1
 801aed8:	b289      	uxth	r1, r1
 801aeda:	2901      	cmp	r1, #1
 801aedc:	bf8a      	itet	hi
 801aede:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801aee2:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801aee4:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801aee6:	2b09      	cmp	r3, #9
 801aee8:	d8d9      	bhi.n	801ae9e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801aeea:	1c5a      	adds	r2, r3, #1
 801aeec:	8722      	strh	r2, [r4, #56]	; 0x38
 801aeee:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801aef0:	4413      	add	r3, r2
 801aef2:	b29b      	uxth	r3, r3
 801aef4:	2b09      	cmp	r3, #9
 801aef6:	bf88      	it	hi
 801aef8:	3b0a      	subhi	r3, #10
 801aefa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aefe:	8458      	strh	r0, [r3, #34]	; 0x22
 801af00:	e7c0      	b.n	801ae84 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801af02:	bd10      	pop	{r4, pc}
 801af04:	0802b2c9 	.word	0x0802b2c9
 801af08:	0802b65c 	.word	0x0802b65c
 801af0c:	0802b29d 	.word	0x0802b29d

0801af10 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801af10:	b538      	push	{r3, r4, r5, lr}
 801af12:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801af14:	4604      	mov	r4, r0
 801af16:	b92a      	cbnz	r2, 801af24 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801af18:	4b13      	ldr	r3, [pc, #76]	; (801af68 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801af1a:	21d5      	movs	r1, #213	; 0xd5
 801af1c:	4a13      	ldr	r2, [pc, #76]	; (801af6c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801af1e:	4814      	ldr	r0, [pc, #80]	; (801af70 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801af20:	f00c fc9c 	bl	802785c <__assert_func>
 801af24:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801af26:	3a01      	subs	r2, #1
 801af28:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801af2c:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801af2e:	8702      	strh	r2, [r0, #56]	; 0x38
 801af30:	1c5a      	adds	r2, r3, #1
 801af32:	b292      	uxth	r2, r2
 801af34:	2a09      	cmp	r2, #9
 801af36:	bf8a      	itet	hi
 801af38:	3b09      	subhi	r3, #9
 801af3a:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801af3c:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801af3e:	f7ff ff9f 	bl	801ae80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801af42:	8c23      	ldrh	r3, [r4, #32]
 801af44:	2b01      	cmp	r3, #1
 801af46:	bf9c      	itt	ls
 801af48:	3301      	addls	r3, #1
 801af4a:	8423      	strhls	r3, [r4, #32]
 801af4c:	8be3      	ldrh	r3, [r4, #30]
 801af4e:	b90b      	cbnz	r3, 801af54 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801af50:	2302      	movs	r3, #2
 801af52:	83e3      	strh	r3, [r4, #30]
 801af54:	8be3      	ldrh	r3, [r4, #30]
 801af56:	4628      	mov	r0, r5
 801af58:	3b01      	subs	r3, #1
 801af5a:	b29b      	uxth	r3, r3
 801af5c:	83e3      	strh	r3, [r4, #30]
 801af5e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801af62:	8365      	strh	r5, [r4, #26]
 801af64:	bd38      	pop	{r3, r4, r5, pc}
 801af66:	bf00      	nop
 801af68:	0802b294 	.word	0x0802b294
 801af6c:	0802b5b1 	.word	0x0802b5b1
 801af70:	0802b29d 	.word	0x0802b29d

0801af74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801af74:	428a      	cmp	r2, r1
 801af76:	b538      	push	{r3, r4, r5, lr}
 801af78:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801af7a:	d90c      	bls.n	801af96 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801af7c:	b92c      	cbnz	r4, 801af8a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801af7e:	4b1c      	ldr	r3, [pc, #112]	; (801aff0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801af80:	21e1      	movs	r1, #225	; 0xe1
 801af82:	4a1c      	ldr	r2, [pc, #112]	; (801aff4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801af84:	481c      	ldr	r0, [pc, #112]	; (801aff8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801af86:	f00c fc69 	bl	802785c <__assert_func>
 801af8a:	3c01      	subs	r4, #1
 801af8c:	4b1b      	ldr	r3, [pc, #108]	; (801affc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801af8e:	4a1c      	ldr	r2, [pc, #112]	; (801b000 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801af90:	21c5      	movs	r1, #197	; 0xc5
 801af92:	8704      	strh	r4, [r0, #56]	; 0x38
 801af94:	e7f6      	b.n	801af84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801af96:	428c      	cmp	r4, r1
 801af98:	d203      	bcs.n	801afa2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801af9a:	4b1a      	ldr	r3, [pc, #104]	; (801b004 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801af9c:	21cb      	movs	r1, #203	; 0xcb
 801af9e:	4a1a      	ldr	r2, [pc, #104]	; (801b008 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801afa0:	e7f0      	b.n	801af84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801afa2:	1a64      	subs	r4, r4, r1
 801afa4:	250a      	movs	r5, #10
 801afa6:	8704      	strh	r4, [r0, #56]	; 0x38
 801afa8:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801afaa:	4421      	add	r1, r4
 801afac:	b289      	uxth	r1, r1
 801afae:	2909      	cmp	r1, #9
 801afb0:	bf88      	it	hi
 801afb2:	390a      	subhi	r1, #10
 801afb4:	86c1      	strh	r1, [r0, #54]	; 0x36
 801afb6:	b1ba      	cbz	r2, 801afe8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801afb8:	3a01      	subs	r2, #1
 801afba:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801afbc:	b292      	uxth	r2, r2
 801afbe:	2909      	cmp	r1, #9
 801afc0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801afc4:	d903      	bls.n	801afce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801afc6:	4b11      	ldr	r3, [pc, #68]	; (801b00c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801afc8:	21e6      	movs	r1, #230	; 0xe6
 801afca:	4a11      	ldr	r2, [pc, #68]	; (801b010 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801afcc:	e7da      	b.n	801af84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801afce:	3101      	adds	r1, #1
 801afd0:	8701      	strh	r1, [r0, #56]	; 0x38
 801afd2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801afd4:	b901      	cbnz	r1, 801afd8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801afd6:	86c5      	strh	r5, [r0, #54]	; 0x36
 801afd8:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801afda:	3901      	subs	r1, #1
 801afdc:	b289      	uxth	r1, r1
 801afde:	86c1      	strh	r1, [r0, #54]	; 0x36
 801afe0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801afe4:	844c      	strh	r4, [r1, #34]	; 0x22
 801afe6:	e7e6      	b.n	801afb6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801afe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afec:	f7ff bf48 	b.w	801ae80 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801aff0:	0802b294 	.word	0x0802b294
 801aff4:	0802b38a 	.word	0x0802b38a
 801aff8:	0802b29d 	.word	0x0802b29d
 801affc:	0802b2d5 	.word	0x0802b2d5
 801b000:	0802b434 	.word	0x0802b434
 801b004:	0802b2e3 	.word	0x0802b2e3
 801b008:	0802b70b 	.word	0x0802b70b
 801b00c:	0802b2ef 	.word	0x0802b2ef
 801b010:	0802b302 	.word	0x0802b302

0801b014 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b014:	3a01      	subs	r2, #1
 801b016:	b570      	push	{r4, r5, r6, lr}
 801b018:	b292      	uxth	r2, r2
 801b01a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b01e:	42b2      	cmp	r2, r6
 801b020:	d019      	beq.n	801b056 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801b022:	8c04      	ldrh	r4, [r0, #32]
 801b024:	f831 5b02 	ldrh.w	r5, [r1], #2
 801b028:	4294      	cmp	r4, r2
 801b02a:	d805      	bhi.n	801b038 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801b02c:	4b19      	ldr	r3, [pc, #100]	; (801b094 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b02e:	4a1a      	ldr	r2, [pc, #104]	; (801b098 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801b030:	21c5      	movs	r1, #197	; 0xc5
 801b032:	481a      	ldr	r0, [pc, #104]	; (801b09c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801b034:	f00c fc12 	bl	802785c <__assert_func>
 801b038:	8bc4      	ldrh	r4, [r0, #30]
 801b03a:	4414      	add	r4, r2
 801b03c:	3a01      	subs	r2, #1
 801b03e:	b2a4      	uxth	r4, r4
 801b040:	b292      	uxth	r2, r2
 801b042:	2c01      	cmp	r4, #1
 801b044:	bf88      	it	hi
 801b046:	3c02      	subhi	r4, #2
 801b048:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b04c:	8b64      	ldrh	r4, [r4, #26]
 801b04e:	42ac      	cmp	r4, r5
 801b050:	d0e5      	beq.n	801b01e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801b052:	2000      	movs	r0, #0
 801b054:	bd70      	pop	{r4, r5, r6, pc}
 801b056:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b05a:	2400      	movs	r4, #0
 801b05c:	4413      	add	r3, r2
 801b05e:	b2a2      	uxth	r2, r4
 801b060:	429a      	cmp	r2, r3
 801b062:	da14      	bge.n	801b08e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801b064:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801b066:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b06a:	4296      	cmp	r6, r2
 801b06c:	d802      	bhi.n	801b074 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801b06e:	4b09      	ldr	r3, [pc, #36]	; (801b094 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b070:	4a0b      	ldr	r2, [pc, #44]	; (801b0a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801b072:	e7dd      	b.n	801b030 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801b074:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801b076:	3401      	adds	r4, #1
 801b078:	4432      	add	r2, r6
 801b07a:	b292      	uxth	r2, r2
 801b07c:	2a09      	cmp	r2, #9
 801b07e:	bf88      	it	hi
 801b080:	3a0a      	subhi	r2, #10
 801b082:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b086:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801b088:	42aa      	cmp	r2, r5
 801b08a:	d0e8      	beq.n	801b05e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801b08c:	e7e1      	b.n	801b052 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801b08e:	2001      	movs	r0, #1
 801b090:	e7e0      	b.n	801b054 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801b092:	bf00      	nop
 801b094:	0802b2d5 	.word	0x0802b2d5
 801b098:	0802b78f 	.word	0x0802b78f
 801b09c:	0802b29d 	.word	0x0802b29d
 801b0a0:	0802b434 	.word	0x0802b434

0801b0a4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0a8:	4605      	mov	r5, r0
 801b0aa:	4616      	mov	r6, r2
 801b0ac:	1c8c      	adds	r4, r1, #2
 801b0ae:	8809      	ldrh	r1, [r1, #0]
 801b0b0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b0b4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b0b8:	42b3      	cmp	r3, r6
 801b0ba:	d124      	bne.n	801b106 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b0bc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b0c0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b0c4:	f001 070f 	and.w	r7, r1, #15
 801b0c8:	4652      	mov	r2, sl
 801b0ca:	f8cd 8000 	str.w	r8, [sp]
 801b0ce:	464b      	mov	r3, r9
 801b0d0:	4621      	mov	r1, r4
 801b0d2:	4628      	mov	r0, r5
 801b0d4:	f7ff ff9e 	bl	801b014 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b0d8:	4683      	mov	fp, r0
 801b0da:	b168      	cbz	r0, 801b0f8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b0dc:	eb0a 0109 	add.w	r1, sl, r9
 801b0e0:	463a      	mov	r2, r7
 801b0e2:	4628      	mov	r0, r5
 801b0e4:	4441      	add	r1, r8
 801b0e6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b0ea:	4649      	mov	r1, r9
 801b0ec:	f7ff ff42 	bl	801af74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b0f0:	4658      	mov	r0, fp
 801b0f2:	b003      	add	sp, #12
 801b0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0f8:	eb07 010a 	add.w	r1, r7, sl
 801b0fc:	4449      	add	r1, r9
 801b0fe:	4441      	add	r1, r8
 801b100:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b104:	e7d2      	b.n	801b0ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b106:	f04f 0b00 	mov.w	fp, #0
 801b10a:	e7f1      	b.n	801b0f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b10c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b10c:	b570      	push	{r4, r5, r6, lr}
 801b10e:	8810      	ldrh	r0, [r2, #0]
 801b110:	4298      	cmp	r0, r3
 801b112:	d817      	bhi.n	801b144 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b114:	1e48      	subs	r0, r1, #1
 801b116:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b11a:	4298      	cmp	r0, r3
 801b11c:	d312      	bcc.n	801b144 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b11e:	2400      	movs	r4, #0
 801b120:	428c      	cmp	r4, r1
 801b122:	d20f      	bcs.n	801b144 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b124:	1860      	adds	r0, r4, r1
 801b126:	1040      	asrs	r0, r0, #1
 801b128:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b12c:	0085      	lsls	r5, r0, #2
 801b12e:	42b3      	cmp	r3, r6
 801b130:	d902      	bls.n	801b138 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b132:	3001      	adds	r0, #1
 801b134:	b284      	uxth	r4, r0
 801b136:	e7f3      	b.n	801b120 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b138:	d201      	bcs.n	801b13e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b13a:	b281      	uxth	r1, r0
 801b13c:	e7f0      	b.n	801b120 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b13e:	442a      	add	r2, r5
 801b140:	8850      	ldrh	r0, [r2, #2]
 801b142:	bd70      	pop	{r4, r5, r6, pc}
 801b144:	2000      	movs	r0, #0
 801b146:	e7fc      	b.n	801b142 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b148 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b14c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801b14e:	4604      	mov	r4, r0
 801b150:	260b      	movs	r6, #11
 801b152:	886f      	ldrh	r7, [r5, #2]
 801b154:	087f      	lsrs	r7, r7, #1
 801b156:	3e01      	subs	r6, #1
 801b158:	d01b      	beq.n	801b192 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b15a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b15c:	b92b      	cbnz	r3, 801b16a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801b15e:	4b0e      	ldr	r3, [pc, #56]	; (801b198 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801b160:	21c0      	movs	r1, #192	; 0xc0
 801b162:	4a0e      	ldr	r2, [pc, #56]	; (801b19c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801b164:	480e      	ldr	r0, [pc, #56]	; (801b1a0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801b166:	f00c fb79 	bl	802785c <__assert_func>
 801b16a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b16c:	462a      	mov	r2, r5
 801b16e:	4639      	mov	r1, r7
 801b170:	4620      	mov	r0, r4
 801b172:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b176:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801b17a:	4643      	mov	r3, r8
 801b17c:	f7ff ffc6 	bl	801b10c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b180:	b138      	cbz	r0, 801b192 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b182:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b186:	4642      	mov	r2, r8
 801b188:	4620      	mov	r0, r4
 801b18a:	f7ff ff8b 	bl	801b0a4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b18e:	2800      	cmp	r0, #0
 801b190:	d1e1      	bne.n	801b156 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b196:	bf00      	nop
 801b198:	0802b294 	.word	0x0802b294
 801b19c:	0802b506 	.word	0x0802b506
 801b1a0:	0802b29d 	.word	0x0802b29d

0801b1a4 <_ZN8touchgfx8ceil28_4El>:
 801b1a4:	f110 030f 	adds.w	r3, r0, #15
 801b1a8:	d401      	bmi.n	801b1ae <_ZN8touchgfx8ceil28_4El+0xa>
 801b1aa:	1118      	asrs	r0, r3, #4
 801b1ac:	4770      	bx	lr
 801b1ae:	2210      	movs	r2, #16
 801b1b0:	f1c0 0001 	rsb	r0, r0, #1
 801b1b4:	fb93 f3f2 	sdiv	r3, r3, r2
 801b1b8:	f010 000f 	ands.w	r0, r0, #15
 801b1bc:	bf18      	it	ne
 801b1be:	2001      	movne	r0, #1
 801b1c0:	1a18      	subs	r0, r3, r0
 801b1c2:	4770      	bx	lr

0801b1c4 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801b1c4:	2900      	cmp	r1, #0
 801b1c6:	b538      	push	{r3, r4, r5, lr}
 801b1c8:	dc05      	bgt.n	801b1d6 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801b1ca:	4b0f      	ldr	r3, [pc, #60]	; (801b208 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801b1cc:	21f7      	movs	r1, #247	; 0xf7
 801b1ce:	4a0f      	ldr	r2, [pc, #60]	; (801b20c <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801b1d0:	480f      	ldr	r0, [pc, #60]	; (801b210 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801b1d2:	f00c fb43 	bl	802785c <__assert_func>
 801b1d6:	2800      	cmp	r0, #0
 801b1d8:	db06      	blt.n	801b1e8 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801b1da:	fb90 f4f1 	sdiv	r4, r0, r1
 801b1de:	fb01 0114 	mls	r1, r1, r4, r0
 801b1e2:	6014      	str	r4, [r2, #0]
 801b1e4:	6019      	str	r1, [r3, #0]
 801b1e6:	bd38      	pop	{r3, r4, r5, pc}
 801b1e8:	4240      	negs	r0, r0
 801b1ea:	fb90 f4f1 	sdiv	r4, r0, r1
 801b1ee:	4265      	negs	r5, r4
 801b1f0:	fb01 0014 	mls	r0, r1, r4, r0
 801b1f4:	6015      	str	r5, [r2, #0]
 801b1f6:	6018      	str	r0, [r3, #0]
 801b1f8:	2800      	cmp	r0, #0
 801b1fa:	d0f4      	beq.n	801b1e6 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801b1fc:	6810      	ldr	r0, [r2, #0]
 801b1fe:	3801      	subs	r0, #1
 801b200:	6010      	str	r0, [r2, #0]
 801b202:	6818      	ldr	r0, [r3, #0]
 801b204:	1a09      	subs	r1, r1, r0
 801b206:	e7ed      	b.n	801b1e4 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801b208:	0802b860 	.word	0x0802b860
 801b20c:	0802b89f 	.word	0x0802b89f
 801b210:	0802b870 	.word	0x0802b870

0801b214 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801b214:	b570      	push	{r4, r5, r6, lr}
 801b216:	694a      	ldr	r2, [r1, #20]
 801b218:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b21a:	684b      	ldr	r3, [r1, #4]
 801b21c:	1b54      	subs	r4, r2, r5
 801b21e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801b220:	f000 8106 	beq.w	801b430 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801b224:	1b9b      	subs	r3, r3, r6
 801b226:	d003      	beq.n	801b230 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b228:	4363      	muls	r3, r4
 801b22a:	2210      	movs	r2, #16
 801b22c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b230:	680c      	ldr	r4, [r1, #0]
 801b232:	698a      	ldr	r2, [r1, #24]
 801b234:	1b65      	subs	r5, r4, r5
 801b236:	f000 80fd 	beq.w	801b434 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801b23a:	1b92      	subs	r2, r2, r6
 801b23c:	d003      	beq.n	801b246 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b23e:	436a      	muls	r2, r5
 801b240:	2410      	movs	r4, #16
 801b242:	fb92 f2f4 	sdiv	r2, r2, r4
 801b246:	1a9b      	subs	r3, r3, r2
 801b248:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801b470 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801b24c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b250:	460a      	mov	r2, r1
 801b252:	ee07 3a90 	vmov	s15, r3
 801b256:	f100 040c 	add.w	r4, r0, #12
 801b25a:	4603      	mov	r3, r0
 801b25c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b260:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b264:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801b268:	eeb1 6a43 	vneg.f32	s12, s6
 801b26c:	edd2 7a02 	vldr	s15, [r2, #8]
 801b270:	3214      	adds	r2, #20
 801b272:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b276:	ece3 6a01 	vstmia	r3!, {s13}
 801b27a:	429c      	cmp	r4, r3
 801b27c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801b280:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b284:	edc3 7a02 	vstr	s15, [r3, #8]
 801b288:	ed52 7a01 	vldr	s15, [r2, #-4]
 801b28c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b290:	edc3 7a05 	vstr	s15, [r3, #20]
 801b294:	d1ea      	bne.n	801b26c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801b296:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b298:	698b      	ldr	r3, [r1, #24]
 801b29a:	edd0 4a02 	vldr	s9, [r0, #8]
 801b29e:	1a9b      	subs	r3, r3, r2
 801b2a0:	edd0 3a00 	vldr	s7, [r0]
 801b2a4:	edd0 6a01 	vldr	s13, [r0, #4]
 801b2a8:	ee07 3a90 	vmov	s15, r3
 801b2ac:	684b      	ldr	r3, [r1, #4]
 801b2ae:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b2b2:	ed90 5a05 	vldr	s10, [r0, #20]
 801b2b6:	1a9b      	subs	r3, r3, r2
 801b2b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b2bc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b2c0:	ed90 2a03 	vldr	s4, [r0, #12]
 801b2c4:	ee07 3a10 	vmov	s14, r3
 801b2c8:	edd0 5a04 	vldr	s11, [r0, #16]
 801b2cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b2d0:	ed90 1a07 	vldr	s2, [r0, #28]
 801b2d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b2d8:	edd0 2a06 	vldr	s5, [r0, #24]
 801b2dc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b2e0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b2e4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b2e8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b2ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b2f0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b2f4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801b2f8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b2fa:	694a      	ldr	r2, [r1, #20]
 801b2fc:	1b13      	subs	r3, r2, r4
 801b2fe:	ee07 3a10 	vmov	s14, r3
 801b302:	680b      	ldr	r3, [r1, #0]
 801b304:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b308:	1b1b      	subs	r3, r3, r4
 801b30a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b30e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b312:	ee07 3a10 	vmov	s14, r3
 801b316:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b31a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b31e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b322:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b326:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801b32a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b32c:	698b      	ldr	r3, [r1, #24]
 801b32e:	1a9b      	subs	r3, r3, r2
 801b330:	ee06 3a90 	vmov	s13, r3
 801b334:	684b      	ldr	r3, [r1, #4]
 801b336:	1a9b      	subs	r3, r3, r2
 801b338:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b33c:	ee07 3a10 	vmov	s14, r3
 801b340:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b348:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b34c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b350:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b354:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b358:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801b35c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b35e:	694a      	ldr	r2, [r1, #20]
 801b360:	1b13      	subs	r3, r2, r4
 801b362:	ee07 3a10 	vmov	s14, r3
 801b366:	680b      	ldr	r3, [r1, #0]
 801b368:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b36c:	1b1b      	subs	r3, r3, r4
 801b36e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b372:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b376:	ee07 3a10 	vmov	s14, r3
 801b37a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b37e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b382:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b386:	edd0 5a08 	vldr	s11, [r0, #32]
 801b38a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b38e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b392:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b396:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801b39a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b39c:	698b      	ldr	r3, [r1, #24]
 801b39e:	1a9b      	subs	r3, r3, r2
 801b3a0:	ee07 3a10 	vmov	s14, r3
 801b3a4:	684b      	ldr	r3, [r1, #4]
 801b3a6:	1a9b      	subs	r3, r3, r2
 801b3a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b3ac:	ee01 3a90 	vmov	s3, r3
 801b3b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b3b4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b3b8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b3bc:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b3c0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b3c4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b3c8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b3cc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b3ce:	694a      	ldr	r2, [r1, #20]
 801b3d0:	1b13      	subs	r3, r2, r4
 801b3d2:	ee03 3a10 	vmov	s6, r3
 801b3d6:	680b      	ldr	r3, [r1, #0]
 801b3d8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b3dc:	1b1b      	subs	r3, r3, r4
 801b3de:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b3e2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b3e6:	ee03 3a10 	vmov	s6, r3
 801b3ea:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b3ee:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b3f2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b3f6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b3fa:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b3fe:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801b402:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b406:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b40e:	dd13      	ble.n	801b438 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801b410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b414:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b418:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b41a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b41e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b426:	dd15      	ble.n	801b454 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801b428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b42c:	6403      	str	r3, [r0, #64]	; 0x40
 801b42e:	bd70      	pop	{r4, r5, r6, pc}
 801b430:	4623      	mov	r3, r4
 801b432:	e6fd      	b.n	801b230 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b434:	462a      	mov	r2, r5
 801b436:	e706      	b.n	801b246 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b438:	d502      	bpl.n	801b440 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801b43a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b43e:	e7e9      	b.n	801b414 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801b440:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b444:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b448:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b450:	dade      	bge.n	801b410 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801b452:	e7f2      	b.n	801b43a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b454:	d502      	bpl.n	801b45c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801b456:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b45a:	e7e7      	b.n	801b42c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801b45c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b460:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b464:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b46c:	dadc      	bge.n	801b428 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801b46e:	e7f2      	b.n	801b456 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b470:	3d800000 	.word	0x3d800000

0801b474 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b478:	f04f 0814 	mov.w	r8, #20
 801b47c:	4604      	mov	r4, r0
 801b47e:	4617      	mov	r7, r2
 801b480:	460d      	mov	r5, r1
 801b482:	fb08 f903 	mul.w	r9, r8, r3
 801b486:	461e      	mov	r6, r3
 801b488:	eb02 0a09 	add.w	sl, r2, r9
 801b48c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801b490:	f7ff fe88 	bl	801b1a4 <_ZN8touchgfx8ceil28_4El>
 801b494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b496:	6160      	str	r0, [r4, #20]
 801b498:	fb08 f803 	mul.w	r8, r8, r3
 801b49c:	9001      	str	r0, [sp, #4]
 801b49e:	eb07 0b08 	add.w	fp, r7, r8
 801b4a2:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b4a6:	f7ff fe7d 	bl	801b1a4 <_ZN8touchgfx8ceil28_4El>
 801b4aa:	9a01      	ldr	r2, [sp, #4]
 801b4ac:	1a80      	subs	r0, r0, r2
 801b4ae:	61a0      	str	r0, [r4, #24]
 801b4b0:	2800      	cmp	r0, #0
 801b4b2:	f000 8088 	beq.w	801b5c6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801b4b6:	f857 3009 	ldr.w	r3, [r7, r9]
 801b4ba:	f857 c008 	ldr.w	ip, [r7, r8]
 801b4be:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b4c2:	ebac 0c03 	sub.w	ip, ip, r3
 801b4c6:	f8da 1004 	ldr.w	r1, [sl, #4]
 801b4ca:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801b4ce:	1a40      	subs	r0, r0, r1
 801b4d0:	fb0b f202 	mul.w	r2, fp, r2
 801b4d4:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801b4d8:	fb0c 2211 	mls	r2, ip, r1, r2
 801b4dc:	4641      	mov	r1, r8
 801b4de:	fb00 2003 	mla	r0, r0, r3, r2
 801b4e2:	f104 0310 	add.w	r3, r4, #16
 801b4e6:	4622      	mov	r2, r4
 801b4e8:	3801      	subs	r0, #1
 801b4ea:	4440      	add	r0, r8
 801b4ec:	f7ff fe6a 	bl	801b1c4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801b4f0:	f104 0308 	add.w	r3, r4, #8
 801b4f4:	1d22      	adds	r2, r4, #4
 801b4f6:	4641      	mov	r1, r8
 801b4f8:	4658      	mov	r0, fp
 801b4fa:	f7ff fe63 	bl	801b1c4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801b4fe:	f8c4 800c 	str.w	r8, [r4, #12]
 801b502:	6962      	ldr	r2, [r4, #20]
 801b504:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b508:	eddf 6a31 	vldr	s13, [pc, #196]	; 801b5d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b50c:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b510:	6822      	ldr	r2, [r4, #0]
 801b512:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b516:	ee07 3a10 	vmov	s14, r3
 801b51a:	f857 3009 	ldr.w	r3, [r7, r9]
 801b51e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b522:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b526:	ee07 3a90 	vmov	s15, r3
 801b52a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801b52e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b536:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b53a:	edd3 6a00 	vldr	s13, [r3]
 801b53e:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b542:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b546:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b54a:	edc4 6a07 	vstr	s13, [r4, #28]
 801b54e:	edd4 6a01 	vldr	s13, [r4, #4]
 801b552:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801b556:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b55a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b55e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b562:	ed84 6a08 	vstr	s12, [r4, #32]
 801b566:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801b568:	6262      	str	r2, [r4, #36]	; 0x24
 801b56a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801b56e:	ed93 6a03 	vldr	s12, [r3, #12]
 801b572:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b576:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b57a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b57e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801b582:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b586:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801b58a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b58e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801b592:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801b594:	6322      	str	r2, [r4, #48]	; 0x30
 801b596:	ed93 6a06 	vldr	s12, [r3, #24]
 801b59a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801b59e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b5a2:	eeb0 7a46 	vmov.f32	s14, s12
 801b5a6:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801b5aa:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b5ae:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801b5b2:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801b5b6:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801b5ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b5be:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801b5c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b5c4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801b5c6:	4620      	mov	r0, r4
 801b5c8:	b003      	add	sp, #12
 801b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ce:	bf00      	nop
 801b5d0:	3d800000 	.word	0x3d800000

0801b5d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b5d4:	4b01      	ldr	r3, [pc, #4]	; (801b5dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b5d6:	6018      	str	r0, [r3, #0]
 801b5d8:	4770      	bx	lr
 801b5da:	bf00      	nop
 801b5dc:	2400af4c 	.word	0x2400af4c

0801b5e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b5e0:	4b06      	ldr	r3, [pc, #24]	; (801b5fc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b5e2:	881a      	ldrh	r2, [r3, #0]
 801b5e4:	4282      	cmp	r2, r0
 801b5e6:	d807      	bhi.n	801b5f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b5e8:	4b05      	ldr	r3, [pc, #20]	; (801b600 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b5ea:	881b      	ldrh	r3, [r3, #0]
 801b5ec:	4413      	add	r3, r2
 801b5ee:	4298      	cmp	r0, r3
 801b5f0:	bfac      	ite	ge
 801b5f2:	2000      	movge	r0, #0
 801b5f4:	2001      	movlt	r0, #1
 801b5f6:	4770      	bx	lr
 801b5f8:	2000      	movs	r0, #0
 801b5fa:	4770      	bx	lr
 801b5fc:	2400af6c 	.word	0x2400af6c
 801b600:	2400af70 	.word	0x2400af70

0801b604 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b604:	b508      	push	{r3, lr}
 801b606:	4601      	mov	r1, r0
 801b608:	f7ff ffea 	bl	801b5e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b60c:	b118      	cbz	r0, 801b616 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b60e:	4b02      	ldr	r3, [pc, #8]	; (801b618 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b616:	bd08      	pop	{r3, pc}
 801b618:	2400af50 	.word	0x2400af50

0801b61c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b620:	4d28      	ldr	r5, [pc, #160]	; (801b6c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b622:	682b      	ldr	r3, [r5, #0]
 801b624:	2b00      	cmp	r3, #0
 801b626:	d04a      	beq.n	801b6be <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b628:	4a27      	ldr	r2, [pc, #156]	; (801b6c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b62a:	4e28      	ldr	r6, [pc, #160]	; (801b6cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b62c:	8810      	ldrh	r0, [r2, #0]
 801b62e:	f8b6 8000 	ldrh.w	r8, [r6]
 801b632:	4c27      	ldr	r4, [pc, #156]	; (801b6d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b634:	4440      	add	r0, r8
 801b636:	4f27      	ldr	r7, [pc, #156]	; (801b6d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b638:	1c41      	adds	r1, r0, #1
 801b63a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801b63e:	f021 0101 	bic.w	r1, r1, #1
 801b642:	eb03 020e 	add.w	r2, r3, lr
 801b646:	0409      	lsls	r1, r1, #16
 801b648:	6022      	str	r2, [r4, #0]
 801b64a:	0c09      	lsrs	r1, r1, #16
 801b64c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801b650:	eb0e 010c 	add.w	r1, lr, ip
 801b654:	185a      	adds	r2, r3, r1
 801b656:	603a      	str	r2, [r7, #0]
 801b658:	220e      	movs	r2, #14
 801b65a:	fb02 f208 	mul.w	r2, r2, r8
 801b65e:	3203      	adds	r2, #3
 801b660:	f022 0203 	bic.w	r2, r2, #3
 801b664:	4411      	add	r1, r2
 801b666:	440b      	add	r3, r1
 801b668:	491b      	ldr	r1, [pc, #108]	; (801b6d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b66a:	600b      	str	r3, [r1, #0]
 801b66c:	2300      	movs	r3, #0
 801b66e:	491b      	ldr	r1, [pc, #108]	; (801b6dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b670:	800b      	strh	r3, [r1, #0]
 801b672:	491b      	ldr	r1, [pc, #108]	; (801b6e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b674:	6809      	ldr	r1, [r1, #0]
 801b676:	eba1 010e 	sub.w	r1, r1, lr
 801b67a:	eba1 010c 	sub.w	r1, r1, ip
 801b67e:	469c      	mov	ip, r3
 801b680:	1a8a      	subs	r2, r1, r2
 801b682:	4918      	ldr	r1, [pc, #96]	; (801b6e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801b684:	600a      	str	r2, [r1, #0]
 801b686:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b68a:	4a17      	ldr	r2, [pc, #92]	; (801b6e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801b68c:	8013      	strh	r3, [r2, #0]
 801b68e:	4283      	cmp	r3, r0
 801b690:	d10d      	bne.n	801b6ae <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801b692:	8835      	ldrh	r5, [r6, #0]
 801b694:	2300      	movs	r3, #0
 801b696:	6838      	ldr	r0, [r7, #0]
 801b698:	240e      	movs	r4, #14
 801b69a:	429d      	cmp	r5, r3
 801b69c:	d90f      	bls.n	801b6be <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b69e:	fb04 0203 	mla	r2, r4, r3, r0
 801b6a2:	3301      	adds	r3, #1
 801b6a4:	7b11      	ldrb	r1, [r2, #12]
 801b6a6:	f36f 1145 	bfc	r1, #5, #1
 801b6aa:	7311      	strb	r1, [r2, #12]
 801b6ac:	e7f5      	b.n	801b69a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801b6ae:	682a      	ldr	r2, [r5, #0]
 801b6b0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b6b4:	6822      	ldr	r2, [r4, #0]
 801b6b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b6ba:	3301      	adds	r3, #1
 801b6bc:	e7e7      	b.n	801b68e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801b6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6c2:	bf00      	nop
 801b6c4:	2400af50 	.word	0x2400af50
 801b6c8:	2400af6c 	.word	0x2400af6c
 801b6cc:	2400af70 	.word	0x2400af70
 801b6d0:	2400af64 	.word	0x2400af64
 801b6d4:	2400af54 	.word	0x2400af54
 801b6d8:	2400af5c 	.word	0x2400af5c
 801b6dc:	2400af6e 	.word	0x2400af6e
 801b6e0:	2400af58 	.word	0x2400af58
 801b6e4:	2400af68 	.word	0x2400af68
 801b6e8:	2400af60 	.word	0x2400af60

0801b6ec <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b6ec:	4b10      	ldr	r3, [pc, #64]	; (801b730 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b6ee:	b510      	push	{r4, lr}
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	b9db      	cbnz	r3, 801b72c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b6f4:	b1d1      	cbz	r1, 801b72c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b6f6:	4b0f      	ldr	r3, [pc, #60]	; (801b734 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b6f8:	240e      	movs	r4, #14
 801b6fa:	801a      	strh	r2, [r3, #0]
 801b6fc:	b292      	uxth	r2, r2
 801b6fe:	4b0e      	ldr	r3, [pc, #56]	; (801b738 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b700:	881b      	ldrh	r3, [r3, #0]
 801b702:	4413      	add	r3, r2
 801b704:	4362      	muls	r2, r4
 801b706:	2406      	movs	r4, #6
 801b708:	fb04 2203 	mla	r2, r4, r3, r2
 801b70c:	428a      	cmp	r2, r1
 801b70e:	d305      	bcc.n	801b71c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b710:	4b0a      	ldr	r3, [pc, #40]	; (801b73c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b712:	2135      	movs	r1, #53	; 0x35
 801b714:	4a0a      	ldr	r2, [pc, #40]	; (801b740 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801b716:	480b      	ldr	r0, [pc, #44]	; (801b744 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801b718:	f00c f8a0 	bl	802785c <__assert_func>
 801b71c:	4b0a      	ldr	r3, [pc, #40]	; (801b748 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801b71e:	6019      	str	r1, [r3, #0]
 801b720:	4b0a      	ldr	r3, [pc, #40]	; (801b74c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801b722:	6018      	str	r0, [r3, #0]
 801b724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b728:	f7ff bf78 	b.w	801b61c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b72c:	bd10      	pop	{r4, pc}
 801b72e:	bf00      	nop
 801b730:	2400af5c 	.word	0x2400af5c
 801b734:	2400af70 	.word	0x2400af70
 801b738:	2400af6c 	.word	0x2400af6c
 801b73c:	0802b93d 	.word	0x0802b93d
 801b740:	0802b9d2 	.word	0x0802b9d2
 801b744:	0802b918 	.word	0x0802b918
 801b748:	2400af58 	.word	0x2400af58
 801b74c:	2400af50 	.word	0x2400af50

0801b750 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b750:	b470      	push	{r4, r5, r6}
 801b752:	4c07      	ldr	r4, [pc, #28]	; (801b770 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b754:	4605      	mov	r5, r0
 801b756:	4610      	mov	r0, r2
 801b758:	9a03      	ldr	r2, [sp, #12]
 801b75a:	6826      	ldr	r6, [r4, #0]
 801b75c:	b936      	cbnz	r6, 801b76c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b75e:	6025      	str	r5, [r4, #0]
 801b760:	4c04      	ldr	r4, [pc, #16]	; (801b774 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b762:	8021      	strh	r1, [r4, #0]
 801b764:	4619      	mov	r1, r3
 801b766:	bc70      	pop	{r4, r5, r6}
 801b768:	f7ff bfc0 	b.w	801b6ec <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b76c:	bc70      	pop	{r4, r5, r6}
 801b76e:	4770      	bx	lr
 801b770:	2400af74 	.word	0x2400af74
 801b774:	2400af6c 	.word	0x2400af6c

0801b778 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b778:	b508      	push	{r3, lr}
 801b77a:	4b14      	ldr	r3, [pc, #80]	; (801b7cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b77c:	6819      	ldr	r1, [r3, #0]
 801b77e:	b931      	cbnz	r1, 801b78e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801b780:	4b13      	ldr	r3, [pc, #76]	; (801b7d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b782:	f240 4185 	movw	r1, #1157	; 0x485
 801b786:	4a13      	ldr	r2, [pc, #76]	; (801b7d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b788:	4813      	ldr	r0, [pc, #76]	; (801b7d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b78a:	f00c f867 	bl	802785c <__assert_func>
 801b78e:	4a13      	ldr	r2, [pc, #76]	; (801b7dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b790:	8803      	ldrh	r3, [r0, #0]
 801b792:	8812      	ldrh	r2, [r2, #0]
 801b794:	4293      	cmp	r3, r2
 801b796:	d204      	bcs.n	801b7a2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801b798:	2214      	movs	r2, #20
 801b79a:	fb02 1303 	mla	r3, r2, r3, r1
 801b79e:	8918      	ldrh	r0, [r3, #8]
 801b7a0:	bd08      	pop	{r3, pc}
 801b7a2:	490f      	ldr	r1, [pc, #60]	; (801b7e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801b7a4:	8809      	ldrh	r1, [r1, #0]
 801b7a6:	4411      	add	r1, r2
 801b7a8:	428b      	cmp	r3, r1
 801b7aa:	da06      	bge.n	801b7ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801b7ac:	1a9b      	subs	r3, r3, r2
 801b7ae:	4a0d      	ldr	r2, [pc, #52]	; (801b7e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801b7b0:	210e      	movs	r1, #14
 801b7b2:	6812      	ldr	r2, [r2, #0]
 801b7b4:	fb01 2303 	mla	r3, r1, r3, r2
 801b7b8:	e7f1      	b.n	801b79e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801b7ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b7be:	4293      	cmp	r3, r2
 801b7c0:	bf0a      	itet	eq
 801b7c2:	4b09      	ldreq	r3, [pc, #36]	; (801b7e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801b7c4:	2000      	movne	r0, #0
 801b7c6:	8818      	ldrheq	r0, [r3, #0]
 801b7c8:	e7ea      	b.n	801b7a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801b7ca:	bf00      	nop
 801b7cc:	2400af74 	.word	0x2400af74
 801b7d0:	0802b996 	.word	0x0802b996
 801b7d4:	0802ba7f 	.word	0x0802ba7f
 801b7d8:	0802b918 	.word	0x0802b918
 801b7dc:	2400af6c 	.word	0x2400af6c
 801b7e0:	2400af70 	.word	0x2400af70
 801b7e4:	2400af54 	.word	0x2400af54
 801b7e8:	2400aee0 	.word	0x2400aee0

0801b7ec <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b7ec:	b508      	push	{r3, lr}
 801b7ee:	4b14      	ldr	r3, [pc, #80]	; (801b840 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b7f0:	6819      	ldr	r1, [r3, #0]
 801b7f2:	b931      	cbnz	r1, 801b802 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801b7f4:	4b13      	ldr	r3, [pc, #76]	; (801b844 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b7f6:	f240 4199 	movw	r1, #1177	; 0x499
 801b7fa:	4a13      	ldr	r2, [pc, #76]	; (801b848 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b7fc:	4813      	ldr	r0, [pc, #76]	; (801b84c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b7fe:	f00c f82d 	bl	802785c <__assert_func>
 801b802:	4a13      	ldr	r2, [pc, #76]	; (801b850 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b804:	8803      	ldrh	r3, [r0, #0]
 801b806:	8812      	ldrh	r2, [r2, #0]
 801b808:	4293      	cmp	r3, r2
 801b80a:	d204      	bcs.n	801b816 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801b80c:	2214      	movs	r2, #20
 801b80e:	fb02 1303 	mla	r3, r2, r3, r1
 801b812:	8958      	ldrh	r0, [r3, #10]
 801b814:	bd08      	pop	{r3, pc}
 801b816:	490f      	ldr	r1, [pc, #60]	; (801b854 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801b818:	8809      	ldrh	r1, [r1, #0]
 801b81a:	4411      	add	r1, r2
 801b81c:	428b      	cmp	r3, r1
 801b81e:	da06      	bge.n	801b82e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801b820:	1a9b      	subs	r3, r3, r2
 801b822:	4a0d      	ldr	r2, [pc, #52]	; (801b858 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801b824:	210e      	movs	r1, #14
 801b826:	6812      	ldr	r2, [r2, #0]
 801b828:	fb01 2303 	mla	r3, r1, r3, r2
 801b82c:	e7f1      	b.n	801b812 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801b82e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b832:	4293      	cmp	r3, r2
 801b834:	bf0a      	itet	eq
 801b836:	4b09      	ldreq	r3, [pc, #36]	; (801b85c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801b838:	2000      	movne	r0, #0
 801b83a:	8818      	ldrheq	r0, [r3, #0]
 801b83c:	e7ea      	b.n	801b814 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801b83e:	bf00      	nop
 801b840:	2400af74 	.word	0x2400af74
 801b844:	0802b996 	.word	0x0802b996
 801b848:	0802baab 	.word	0x0802baab
 801b84c:	0802b918 	.word	0x0802b918
 801b850:	2400af6c 	.word	0x2400af6c
 801b854:	2400af70 	.word	0x2400af70
 801b858:	2400af54 	.word	0x2400af54
 801b85c:	2400aee2 	.word	0x2400aee2

0801b860 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b860:	4b23      	ldr	r3, [pc, #140]	; (801b8f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b862:	b510      	push	{r4, lr}
 801b864:	681c      	ldr	r4, [r3, #0]
 801b866:	b934      	cbnz	r4, 801b876 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801b868:	4b22      	ldr	r3, [pc, #136]	; (801b8f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b86a:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801b86e:	4a22      	ldr	r2, [pc, #136]	; (801b8f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801b870:	4822      	ldr	r0, [pc, #136]	; (801b8fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801b872:	f00b fff3 	bl	802785c <__assert_func>
 801b876:	4a22      	ldr	r2, [pc, #136]	; (801b900 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801b878:	880b      	ldrh	r3, [r1, #0]
 801b87a:	8812      	ldrh	r2, [r2, #0]
 801b87c:	4293      	cmp	r3, r2
 801b87e:	d211      	bcs.n	801b8a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801b880:	2214      	movs	r2, #20
 801b882:	fb02 4303 	mla	r3, r2, r3, r4
 801b886:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b88a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b88e:	8a1a      	ldrh	r2, [r3, #16]
 801b890:	8a5b      	ldrh	r3, [r3, #18]
 801b892:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b896:	8004      	strh	r4, [r0, #0]
 801b898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b89c:	8041      	strh	r1, [r0, #2]
 801b89e:	8082      	strh	r2, [r0, #4]
 801b8a0:	80c3      	strh	r3, [r0, #6]
 801b8a2:	e00e      	b.n	801b8c2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b8a4:	4917      	ldr	r1, [pc, #92]	; (801b904 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801b8a6:	8809      	ldrh	r1, [r1, #0]
 801b8a8:	4411      	add	r1, r2
 801b8aa:	428b      	cmp	r3, r1
 801b8ac:	da0a      	bge.n	801b8c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801b8ae:	1a9b      	subs	r3, r3, r2
 801b8b0:	4a15      	ldr	r2, [pc, #84]	; (801b908 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801b8b2:	210e      	movs	r1, #14
 801b8b4:	6812      	ldr	r2, [r2, #0]
 801b8b6:	fb01 2303 	mla	r3, r1, r3, r2
 801b8ba:	681a      	ldr	r2, [r3, #0]
 801b8bc:	6002      	str	r2, [r0, #0]
 801b8be:	685a      	ldr	r2, [r3, #4]
 801b8c0:	6042      	str	r2, [r0, #4]
 801b8c2:	bd10      	pop	{r4, pc}
 801b8c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b8c8:	4293      	cmp	r3, r2
 801b8ca:	d10b      	bne.n	801b8e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801b8cc:	4b0f      	ldr	r3, [pc, #60]	; (801b90c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801b8ce:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b8d2:	4b0f      	ldr	r3, [pc, #60]	; (801b910 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801b8d4:	8081      	strh	r1, [r0, #4]
 801b8d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b8da:	2300      	movs	r3, #0
 801b8dc:	80c2      	strh	r2, [r0, #6]
 801b8de:	8003      	strh	r3, [r0, #0]
 801b8e0:	8043      	strh	r3, [r0, #2]
 801b8e2:	e7ee      	b.n	801b8c2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	8003      	strh	r3, [r0, #0]
 801b8e8:	8043      	strh	r3, [r0, #2]
 801b8ea:	8083      	strh	r3, [r0, #4]
 801b8ec:	e7d8      	b.n	801b8a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801b8ee:	bf00      	nop
 801b8f0:	2400af74 	.word	0x2400af74
 801b8f4:	0802b996 	.word	0x0802b996
 801b8f8:	0802ba18 	.word	0x0802ba18
 801b8fc:	0802b918 	.word	0x0802b918
 801b900:	2400af6c 	.word	0x2400af6c
 801b904:	2400af70 	.word	0x2400af70
 801b908:	2400af54 	.word	0x2400af54
 801b90c:	2400aee0 	.word	0x2400aee0
 801b910:	2400aee2 	.word	0x2400aee2

0801b914 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b914:	4b18      	ldr	r3, [pc, #96]	; (801b978 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	b34b      	cbz	r3, 801b96e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b91a:	4a18      	ldr	r2, [pc, #96]	; (801b97c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b91c:	8800      	ldrh	r0, [r0, #0]
 801b91e:	8812      	ldrh	r2, [r2, #0]
 801b920:	4290      	cmp	r0, r2
 801b922:	d211      	bcs.n	801b948 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801b924:	2214      	movs	r2, #20
 801b926:	fb02 3300 	mla	r3, r2, r0, r3
 801b92a:	8a1a      	ldrh	r2, [r3, #16]
 801b92c:	8919      	ldrh	r1, [r3, #8]
 801b92e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b932:	428a      	cmp	r2, r1
 801b934:	db1d      	blt.n	801b972 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b936:	8a58      	ldrh	r0, [r3, #18]
 801b938:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b93c:	895b      	ldrh	r3, [r3, #10]
 801b93e:	4298      	cmp	r0, r3
 801b940:	bfac      	ite	ge
 801b942:	2000      	movge	r0, #0
 801b944:	2001      	movlt	r0, #1
 801b946:	4770      	bx	lr
 801b948:	4b0d      	ldr	r3, [pc, #52]	; (801b980 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b94a:	881b      	ldrh	r3, [r3, #0]
 801b94c:	4413      	add	r3, r2
 801b94e:	4298      	cmp	r0, r3
 801b950:	da0d      	bge.n	801b96e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b952:	4b0c      	ldr	r3, [pc, #48]	; (801b984 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801b954:	1a80      	subs	r0, r0, r2
 801b956:	220e      	movs	r2, #14
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	fb02 3300 	mla	r3, r2, r0, r3
 801b95e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b962:	891a      	ldrh	r2, [r3, #8]
 801b964:	4291      	cmp	r1, r2
 801b966:	db04      	blt.n	801b972 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b968:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b96c:	e7e6      	b.n	801b93c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801b96e:	2000      	movs	r0, #0
 801b970:	4770      	bx	lr
 801b972:	2001      	movs	r0, #1
 801b974:	4770      	bx	lr
 801b976:	bf00      	nop
 801b978:	2400af74 	.word	0x2400af74
 801b97c:	2400af6c 	.word	0x2400af6c
 801b980:	2400af70 	.word	0x2400af70
 801b984:	2400af54 	.word	0x2400af54

0801b988 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b988:	b508      	push	{r3, lr}
 801b98a:	4b12      	ldr	r3, [pc, #72]	; (801b9d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b98c:	6819      	ldr	r1, [r3, #0]
 801b98e:	b931      	cbnz	r1, 801b99e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b990:	4b11      	ldr	r3, [pc, #68]	; (801b9d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b992:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801b996:	4a11      	ldr	r2, [pc, #68]	; (801b9dc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b998:	4811      	ldr	r0, [pc, #68]	; (801b9e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b99a:	f00b ff5f 	bl	802785c <__assert_func>
 801b99e:	8803      	ldrh	r3, [r0, #0]
 801b9a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9a4:	4293      	cmp	r3, r2
 801b9a6:	d012      	beq.n	801b9ce <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b9a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b9ac:	4293      	cmp	r3, r2
 801b9ae:	d103      	bne.n	801b9b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b9b0:	4b0c      	ldr	r3, [pc, #48]	; (801b9e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b9b6:	bd08      	pop	{r3, pc}
 801b9b8:	4a0b      	ldr	r2, [pc, #44]	; (801b9e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b9ba:	6812      	ldr	r2, [r2, #0]
 801b9bc:	b11a      	cbz	r2, 801b9c6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b9be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b9c2:	2800      	cmp	r0, #0
 801b9c4:	d1f7      	bne.n	801b9b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b9c6:	2214      	movs	r2, #20
 801b9c8:	4353      	muls	r3, r2
 801b9ca:	58c8      	ldr	r0, [r1, r3]
 801b9cc:	e7f3      	b.n	801b9b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b9ce:	2000      	movs	r0, #0
 801b9d0:	e7f1      	b.n	801b9b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b9d2:	bf00      	nop
 801b9d4:	2400af74 	.word	0x2400af74
 801b9d8:	0802b996 	.word	0x0802b996
 801b9dc:	0802ba4e 	.word	0x0802ba4e
 801b9e0:	0802b918 	.word	0x0802b918
 801b9e4:	2400aeec 	.word	0x2400aeec
 801b9e8:	2400af50 	.word	0x2400af50

0801b9ec <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b9ec:	8802      	ldrh	r2, [r0, #0]
 801b9ee:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b9f2:	429a      	cmp	r2, r3
 801b9f4:	d845      	bhi.n	801ba82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b9f6:	4b24      	ldr	r3, [pc, #144]	; (801ba88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b9f8:	8818      	ldrh	r0, [r3, #0]
 801b9fa:	4282      	cmp	r2, r0
 801b9fc:	d221      	bcs.n	801ba42 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801b9fe:	4b23      	ldr	r3, [pc, #140]	; (801ba8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ba00:	6819      	ldr	r1, [r3, #0]
 801ba02:	2314      	movs	r3, #20
 801ba04:	fb03 1302 	mla	r3, r3, r2, r1
 801ba08:	6858      	ldr	r0, [r3, #4]
 801ba0a:	2800      	cmp	r0, #0
 801ba0c:	d03a      	beq.n	801ba84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ba0e:	4920      	ldr	r1, [pc, #128]	; (801ba90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ba10:	6809      	ldr	r1, [r1, #0]
 801ba12:	2900      	cmp	r1, #0
 801ba14:	d036      	beq.n	801ba84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ba16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ba1a:	2900      	cmp	r1, #0
 801ba1c:	d032      	beq.n	801ba84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ba1e:	891a      	ldrh	r2, [r3, #8]
 801ba20:	8958      	ldrh	r0, [r3, #10]
 801ba22:	4350      	muls	r0, r2
 801ba24:	7c5a      	ldrb	r2, [r3, #17]
 801ba26:	7cdb      	ldrb	r3, [r3, #19]
 801ba28:	0952      	lsrs	r2, r2, #5
 801ba2a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ba2e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ba32:	2b0b      	cmp	r3, #11
 801ba34:	bf18      	it	ne
 801ba36:	0040      	lslne	r0, r0, #1
 801ba38:	3003      	adds	r0, #3
 801ba3a:	f020 0003 	bic.w	r0, r0, #3
 801ba3e:	4408      	add	r0, r1
 801ba40:	4770      	bx	lr
 801ba42:	4b14      	ldr	r3, [pc, #80]	; (801ba94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801ba44:	881b      	ldrh	r3, [r3, #0]
 801ba46:	4403      	add	r3, r0
 801ba48:	429a      	cmp	r2, r3
 801ba4a:	da1a      	bge.n	801ba82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ba4c:	4b12      	ldr	r3, [pc, #72]	; (801ba98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801ba4e:	1a10      	subs	r0, r2, r0
 801ba50:	210e      	movs	r1, #14
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	fb01 3000 	mla	r0, r1, r0, r3
 801ba58:	7b03      	ldrb	r3, [r0, #12]
 801ba5a:	f003 031f 	and.w	r3, r3, #31
 801ba5e:	2b0b      	cmp	r3, #11
 801ba60:	d10b      	bne.n	801ba7a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ba62:	8903      	ldrh	r3, [r0, #8]
 801ba64:	8940      	ldrh	r0, [r0, #10]
 801ba66:	4358      	muls	r0, r3
 801ba68:	4b09      	ldr	r3, [pc, #36]	; (801ba90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ba6a:	3003      	adds	r0, #3
 801ba6c:	6819      	ldr	r1, [r3, #0]
 801ba6e:	f020 0303 	bic.w	r3, r0, #3
 801ba72:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ba76:	4418      	add	r0, r3
 801ba78:	4770      	bx	lr
 801ba7a:	2b0d      	cmp	r3, #13
 801ba7c:	d101      	bne.n	801ba82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ba7e:	300d      	adds	r0, #13
 801ba80:	4770      	bx	lr
 801ba82:	2000      	movs	r0, #0
 801ba84:	4770      	bx	lr
 801ba86:	bf00      	nop
 801ba88:	2400af6c 	.word	0x2400af6c
 801ba8c:	2400af74 	.word	0x2400af74
 801ba90:	2400af50 	.word	0x2400af50
 801ba94:	2400af70 	.word	0x2400af70
 801ba98:	2400af54 	.word	0x2400af54

0801ba9c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ba9c:	4b17      	ldr	r3, [pc, #92]	; (801bafc <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801ba9e:	b510      	push	{r4, lr}
 801baa0:	6819      	ldr	r1, [r3, #0]
 801baa2:	8803      	ldrh	r3, [r0, #0]
 801baa4:	b1e9      	cbz	r1, 801bae2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801baa6:	4a16      	ldr	r2, [pc, #88]	; (801bb00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801baa8:	8812      	ldrh	r2, [r2, #0]
 801baaa:	429a      	cmp	r2, r3
 801baac:	d90a      	bls.n	801bac4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801baae:	2214      	movs	r2, #20
 801bab0:	fb02 1303 	mla	r3, r2, r3, r1
 801bab4:	7c58      	ldrb	r0, [r3, #17]
 801bab6:	0942      	lsrs	r2, r0, #5
 801bab8:	7cd8      	ldrb	r0, [r3, #19]
 801baba:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801babe:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801bac2:	bd10      	pop	{r4, pc}
 801bac4:	490f      	ldr	r1, [pc, #60]	; (801bb04 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bac6:	8809      	ldrh	r1, [r1, #0]
 801bac8:	4411      	add	r1, r2
 801baca:	428b      	cmp	r3, r1
 801bacc:	da09      	bge.n	801bae2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801bace:	1a9b      	subs	r3, r3, r2
 801bad0:	4a0d      	ldr	r2, [pc, #52]	; (801bb08 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801bad2:	210e      	movs	r1, #14
 801bad4:	6812      	ldr	r2, [r2, #0]
 801bad6:	fb01 2303 	mla	r3, r1, r3, r2
 801bada:	7b18      	ldrb	r0, [r3, #12]
 801badc:	f000 001f 	and.w	r0, r0, #31
 801bae0:	e7ef      	b.n	801bac2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801bae2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bae6:	4293      	cmp	r3, r2
 801bae8:	d106      	bne.n	801baf8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801baea:	f7e8 fb41 	bl	8004170 <_ZN8touchgfx3HAL3lcdEv>
 801baee:	6803      	ldr	r3, [r0, #0]
 801baf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801baf6:	4718      	bx	r3
 801baf8:	2000      	movs	r0, #0
 801bafa:	e7e2      	b.n	801bac2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801bafc:	2400af74 	.word	0x2400af74
 801bb00:	2400af6c 	.word	0x2400af6c
 801bb04:	2400af70 	.word	0x2400af70
 801bb08:	2400af54 	.word	0x2400af54

0801bb0c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801bb0c:	2010      	movs	r0, #16
 801bb0e:	4770      	bx	lr

0801bb10 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801bb10:	2000      	movs	r0, #0
 801bb12:	4770      	bx	lr

0801bb14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801bb14:	2bff      	cmp	r3, #255	; 0xff
 801bb16:	d050      	beq.n	801bbba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801bb18:	2a0b      	cmp	r2, #11
 801bb1a:	d04a      	beq.n	801bbb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801bb1c:	d80e      	bhi.n	801bb3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801bb1e:	2a03      	cmp	r2, #3
 801bb20:	d03f      	beq.n	801bba2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801bb22:	d804      	bhi.n	801bb2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801bb24:	2a01      	cmp	r2, #1
 801bb26:	d03e      	beq.n	801bba6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801bb28:	d93f      	bls.n	801bbaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801bb2a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801bb2c:	4770      	bx	lr
 801bb2e:	2a09      	cmp	r2, #9
 801bb30:	d03f      	beq.n	801bbb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801bb32:	d83c      	bhi.n	801bbae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801bb34:	2a08      	cmp	r2, #8
 801bb36:	d03a      	beq.n	801bbae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801bb38:	2000      	movs	r0, #0
 801bb3a:	4770      	bx	lr
 801bb3c:	2a2f      	cmp	r2, #47	; 0x2f
 801bb3e:	d024      	beq.n	801bb8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801bb40:	d80d      	bhi.n	801bb5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801bb42:	2a2d      	cmp	r2, #45	; 0x2d
 801bb44:	d014      	beq.n	801bb70 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801bb46:	d826      	bhi.n	801bb96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801bb48:	2a2c      	cmp	r2, #44	; 0x2c
 801bb4a:	d1f5      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bb4c:	684b      	ldr	r3, [r1, #4]
 801bb4e:	781b      	ldrb	r3, [r3, #0]
 801bb50:	2b01      	cmp	r3, #1
 801bb52:	d018      	beq.n	801bb86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801bb54:	d323      	bcc.n	801bb9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801bb56:	2b02      	cmp	r3, #2
 801bb58:	d1ee      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bb5a:	6880      	ldr	r0, [r0, #8]
 801bb5c:	4770      	bx	lr
 801bb5e:	2a31      	cmp	r2, #49	; 0x31
 801bb60:	d004      	beq.n	801bb6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801bb62:	d328      	bcc.n	801bbb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801bb64:	2a32      	cmp	r2, #50	; 0x32
 801bb66:	d026      	beq.n	801bbb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801bb68:	2a33      	cmp	r2, #51	; 0x33
 801bb6a:	d1e5      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bb6c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801bb6e:	4770      	bx	lr
 801bb70:	684b      	ldr	r3, [r1, #4]
 801bb72:	781b      	ldrb	r3, [r3, #0]
 801bb74:	2b01      	cmp	r3, #1
 801bb76:	d004      	beq.n	801bb82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801bb78:	d30b      	bcc.n	801bb92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bb7a:	2b02      	cmp	r3, #2
 801bb7c:	d1dc      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bb7e:	6900      	ldr	r0, [r0, #16]
 801bb80:	4770      	bx	lr
 801bb82:	6a00      	ldr	r0, [r0, #32]
 801bb84:	4770      	bx	lr
 801bb86:	6980      	ldr	r0, [r0, #24]
 801bb88:	4770      	bx	lr
 801bb8a:	684b      	ldr	r3, [r1, #4]
 801bb8c:	781b      	ldrb	r3, [r3, #0]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d1d2      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bb92:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801bb94:	4770      	bx	lr
 801bb96:	684b      	ldr	r3, [r1, #4]
 801bb98:	781b      	ldrb	r3, [r3, #0]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d1cc      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bb9e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801bba0:	4770      	bx	lr
 801bba2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801bba4:	4770      	bx	lr
 801bba6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801bba8:	4770      	bx	lr
 801bbaa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801bbac:	4770      	bx	lr
 801bbae:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801bbb0:	4770      	bx	lr
 801bbb2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801bbb4:	4770      	bx	lr
 801bbb6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801bbb8:	4770      	bx	lr
 801bbba:	2a0b      	cmp	r2, #11
 801bbbc:	d049      	beq.n	801bc52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801bbbe:	d80e      	bhi.n	801bbde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801bbc0:	2a03      	cmp	r2, #3
 801bbc2:	d040      	beq.n	801bc46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801bbc4:	d804      	bhi.n	801bbd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801bbc6:	2a01      	cmp	r2, #1
 801bbc8:	d03f      	beq.n	801bc4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801bbca:	d940      	bls.n	801bc4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801bbcc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801bbce:	4770      	bx	lr
 801bbd0:	2a09      	cmp	r2, #9
 801bbd2:	d03e      	beq.n	801bc52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801bbd4:	d801      	bhi.n	801bbda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801bbd6:	2a08      	cmp	r2, #8
 801bbd8:	d1ae      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bbda:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801bbdc:	4770      	bx	lr
 801bbde:	2a2f      	cmp	r2, #47	; 0x2f
 801bbe0:	d024      	beq.n	801bc2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801bbe2:	d80d      	bhi.n	801bc00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801bbe4:	2a2d      	cmp	r2, #45	; 0x2d
 801bbe6:	d014      	beq.n	801bc12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801bbe8:	d826      	bhi.n	801bc38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801bbea:	2a2c      	cmp	r2, #44	; 0x2c
 801bbec:	d1a4      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bbee:	684b      	ldr	r3, [r1, #4]
 801bbf0:	781b      	ldrb	r3, [r3, #0]
 801bbf2:	2b01      	cmp	r3, #1
 801bbf4:	d018      	beq.n	801bc28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801bbf6:	d324      	bcc.n	801bc42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801bbf8:	2b02      	cmp	r3, #2
 801bbfa:	d19d      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bbfc:	68c0      	ldr	r0, [r0, #12]
 801bbfe:	4770      	bx	lr
 801bc00:	2a31      	cmp	r2, #49	; 0x31
 801bc02:	d004      	beq.n	801bc0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801bc04:	d327      	bcc.n	801bc56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801bc06:	2a32      	cmp	r2, #50	; 0x32
 801bc08:	d025      	beq.n	801bc56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801bc0a:	2a33      	cmp	r2, #51	; 0x33
 801bc0c:	d194      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bc0e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801bc10:	4770      	bx	lr
 801bc12:	684b      	ldr	r3, [r1, #4]
 801bc14:	781b      	ldrb	r3, [r3, #0]
 801bc16:	2b01      	cmp	r3, #1
 801bc18:	d004      	beq.n	801bc24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801bc1a:	d30b      	bcc.n	801bc34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801bc1c:	2b02      	cmp	r3, #2
 801bc1e:	d18b      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bc20:	6940      	ldr	r0, [r0, #20]
 801bc22:	4770      	bx	lr
 801bc24:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801bc26:	4770      	bx	lr
 801bc28:	69c0      	ldr	r0, [r0, #28]
 801bc2a:	4770      	bx	lr
 801bc2c:	684b      	ldr	r3, [r1, #4]
 801bc2e:	781b      	ldrb	r3, [r3, #0]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d181      	bne.n	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bc34:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801bc36:	4770      	bx	lr
 801bc38:	684b      	ldr	r3, [r1, #4]
 801bc3a:	781b      	ldrb	r3, [r3, #0]
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	f47f af7b 	bne.w	801bb38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bc42:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801bc44:	4770      	bx	lr
 801bc46:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801bc48:	4770      	bx	lr
 801bc4a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801bc4c:	4770      	bx	lr
 801bc4e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801bc50:	4770      	bx	lr
 801bc52:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801bc54:	4770      	bx	lr
 801bc56:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801bc58:	4770      	bx	lr

0801bc5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc5e:	b087      	sub	sp, #28
 801bc60:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bc62:	9205      	str	r2, [sp, #20]
 801bc64:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bc68:	9101      	str	r1, [sp, #4]
 801bc6a:	9202      	str	r2, [sp, #8]
 801bc6c:	6841      	ldr	r1, [r0, #4]
 801bc6e:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801bc72:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801bc76:	fb01 2404 	mla	r4, r1, r4, r2
 801bc7a:	6802      	ldr	r2, [r0, #0]
 801bc7c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bc80:	f8de 2000 	ldr.w	r2, [lr]
 801bc84:	9203      	str	r2, [sp, #12]
 801bc86:	f8de 2004 	ldr.w	r2, [lr, #4]
 801bc8a:	3204      	adds	r2, #4
 801bc8c:	9204      	str	r2, [sp, #16]
 801bc8e:	9a02      	ldr	r2, [sp, #8]
 801bc90:	43d6      	mvns	r6, r2
 801bc92:	b2f6      	uxtb	r6, r6
 801bc94:	9a01      	ldr	r2, [sp, #4]
 801bc96:	2a00      	cmp	r2, #0
 801bc98:	dc03      	bgt.n	801bca2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bc9a:	9a05      	ldr	r2, [sp, #20]
 801bc9c:	2a00      	cmp	r2, #0
 801bc9e:	f340 8129 	ble.w	801bef4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bca2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bca4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801bca8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bcac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bcae:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801bcb2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	dd0e      	ble.n	801bcd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bcba:	1408      	asrs	r0, r1, #16
 801bcbc:	d405      	bmi.n	801bcca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcbe:	4560      	cmp	r0, ip
 801bcc0:	da03      	bge.n	801bcca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcc2:	1410      	asrs	r0, r2, #16
 801bcc4:	d401      	bmi.n	801bcca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bcc6:	42b8      	cmp	r0, r7
 801bcc8:	db07      	blt.n	801bcda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bcca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bccc:	3b01      	subs	r3, #1
 801bcce:	3402      	adds	r4, #2
 801bcd0:	4401      	add	r1, r0
 801bcd2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bcd4:	4402      	add	r2, r0
 801bcd6:	e7ee      	b.n	801bcb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bcd8:	d071      	beq.n	801bdbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bcda:	1e58      	subs	r0, r3, #1
 801bcdc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bcde:	fb05 1500 	mla	r5, r5, r0, r1
 801bce2:	142d      	asrs	r5, r5, #16
 801bce4:	d45f      	bmi.n	801bda6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bce6:	4565      	cmp	r5, ip
 801bce8:	da5d      	bge.n	801bda6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bcea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bcec:	fb05 2000 	mla	r0, r5, r0, r2
 801bcf0:	1400      	asrs	r0, r0, #16
 801bcf2:	d458      	bmi.n	801bda6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bcf4:	42b8      	cmp	r0, r7
 801bcf6:	da56      	bge.n	801bda6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bcf8:	4699      	mov	r9, r3
 801bcfa:	46a2      	mov	sl, r4
 801bcfc:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801bd00:	f1b9 0f00 	cmp.w	r9, #0
 801bd04:	dd57      	ble.n	801bdb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801bd06:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801bd0a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801bd0e:	9803      	ldr	r0, [sp, #12]
 801bd10:	140d      	asrs	r5, r1, #16
 801bd12:	f109 39ff 	add.w	r9, r9, #4294967295
 801bd16:	fb07 000c 	mla	r0, r7, ip, r0
 801bd1a:	5d40      	ldrb	r0, [r0, r5]
 801bd1c:	9d04      	ldr	r5, [sp, #16]
 801bd1e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801bd22:	f8ba 5000 	ldrh.w	r5, [sl]
 801bd26:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801bd2a:	122f      	asrs	r7, r5, #8
 801bd2c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801bd30:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bd34:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bd38:	00ed      	lsls	r5, r5, #3
 801bd3a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801bd3e:	fb17 f706 	smulbb	r7, r7, r6
 801bd42:	b2ed      	uxtb	r5, r5
 801bd44:	fb18 f806 	smulbb	r8, r8, r6
 801bd48:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801bd4c:	10c7      	asrs	r7, r0, #3
 801bd4e:	fb15 f506 	smulbb	r5, r5, r6
 801bd52:	00c0      	lsls	r0, r0, #3
 801bd54:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bd58:	fa1f fc8c 	uxth.w	ip, ip
 801bd5c:	b2c0      	uxtb	r0, r0
 801bd5e:	fb07 870b 	mla	r7, r7, fp, r8
 801bd62:	fb00 500b 	mla	r0, r0, fp, r5
 801bd66:	f10c 0501 	add.w	r5, ip, #1
 801bd6a:	b2bf      	uxth	r7, r7
 801bd6c:	b280      	uxth	r0, r0
 801bd6e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bd72:	f107 0801 	add.w	r8, r7, #1
 801bd76:	1c45      	adds	r5, r0, #1
 801bd78:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801bd7c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bd80:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801bd84:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bd86:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801bd8a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bd8e:	4401      	add	r1, r0
 801bd90:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801bd94:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bd96:	ea45 0c0c 	orr.w	ip, r5, ip
 801bd9a:	4402      	add	r2, r0
 801bd9c:	ea4c 0c08 	orr.w	ip, ip, r8
 801bda0:	f82a cb02 	strh.w	ip, [sl], #2
 801bda4:	e7ac      	b.n	801bd00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801bda6:	f04f 0800 	mov.w	r8, #0
 801bdaa:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801bdae:	eb03 0008 	add.w	r0, r3, r8
 801bdb2:	2800      	cmp	r0, #0
 801bdb4:	dc41      	bgt.n	801be3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801bdb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bdba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bdbe:	9b01      	ldr	r3, [sp, #4]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	f340 8097 	ble.w	801bef4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bdc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bdca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdcc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bdd0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bdd4:	eef0 6a62 	vmov.f32	s13, s5
 801bdd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bddc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bde0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bde4:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801bde8:	eef0 6a43 	vmov.f32	s13, s6
 801bdec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bdf0:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801bdf4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bdf8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bdfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be0c:	ee12 2a90 	vmov	r2, s5
 801be10:	eef0 2a47 	vmov.f32	s5, s14
 801be14:	fb92 f3f3 	sdiv	r3, r2, r3
 801be18:	ee13 2a10 	vmov	r2, s6
 801be1c:	9313      	str	r3, [sp, #76]	; 0x4c
 801be1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be20:	eeb0 3a67 	vmov.f32	s6, s15
 801be24:	fb92 f3f3 	sdiv	r3, r2, r3
 801be28:	9314      	str	r3, [sp, #80]	; 0x50
 801be2a:	9b01      	ldr	r3, [sp, #4]
 801be2c:	9a05      	ldr	r2, [sp, #20]
 801be2e:	3b01      	subs	r3, #1
 801be30:	9301      	str	r3, [sp, #4]
 801be32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be34:	bf08      	it	eq
 801be36:	4613      	moveq	r3, r2
 801be38:	e72c      	b.n	801bc94 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801be3a:	140f      	asrs	r7, r1, #16
 801be3c:	d453      	bmi.n	801bee6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801be3e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801be42:	42bd      	cmp	r5, r7
 801be44:	dd4f      	ble.n	801bee6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801be46:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801be4a:	d44c      	bmi.n	801bee6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801be4c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801be50:	4560      	cmp	r0, ip
 801be52:	dd48      	ble.n	801bee6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801be54:	9803      	ldr	r0, [sp, #12]
 801be56:	b22d      	sxth	r5, r5
 801be58:	fb0c 0505 	mla	r5, ip, r5, r0
 801be5c:	5de8      	ldrb	r0, [r5, r7]
 801be5e:	9d04      	ldr	r5, [sp, #16]
 801be60:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801be64:	f06f 0501 	mvn.w	r5, #1
 801be68:	fb05 fb08 	mul.w	fp, r5, r8
 801be6c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801be70:	f834 500b 	ldrh.w	r5, [r4, fp]
 801be74:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801be78:	122f      	asrs	r7, r5, #8
 801be7a:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801be7e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801be82:	00ed      	lsls	r5, r5, #3
 801be84:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801be88:	fb17 f706 	smulbb	r7, r7, r6
 801be8c:	b2ed      	uxtb	r5, r5
 801be8e:	fb19 f906 	smulbb	r9, r9, r6
 801be92:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801be96:	10c7      	asrs	r7, r0, #3
 801be98:	fb15 f506 	smulbb	r5, r5, r6
 801be9c:	00c0      	lsls	r0, r0, #3
 801be9e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bea2:	fa1f fc8c 	uxth.w	ip, ip
 801bea6:	b2c0      	uxtb	r0, r0
 801bea8:	fb07 970a 	mla	r7, r7, sl, r9
 801beac:	fb00 500a 	mla	r0, r0, sl, r5
 801beb0:	f10c 0501 	add.w	r5, ip, #1
 801beb4:	b2bf      	uxth	r7, r7
 801beb6:	b280      	uxth	r0, r0
 801beb8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bebc:	f107 0901 	add.w	r9, r7, #1
 801bec0:	1c45      	adds	r5, r0, #1
 801bec2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801bec6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801beca:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801bece:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801bed2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bed6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801beda:	ea45 0c0c 	orr.w	ip, r5, ip
 801bede:	ea4c 0c09 	orr.w	ip, ip, r9
 801bee2:	f824 c00b 	strh.w	ip, [r4, fp]
 801bee6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bee8:	f108 38ff 	add.w	r8, r8, #4294967295
 801beec:	4401      	add	r1, r0
 801beee:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bef0:	4402      	add	r2, r0
 801bef2:	e75c      	b.n	801bdae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bef4:	b007      	add	sp, #28
 801bef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801befa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801befa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801befe:	b085      	sub	sp, #20
 801bf00:	4693      	mov	fp, r2
 801bf02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bf06:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bf08:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801bf0a:	6870      	ldr	r0, [r6, #4]
 801bf0c:	9100      	str	r1, [sp, #0]
 801bf0e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bf12:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801bf16:	fb00 2404 	mla	r4, r0, r4, r2
 801bf1a:	6832      	ldr	r2, [r6, #0]
 801bf1c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bf20:	682a      	ldr	r2, [r5, #0]
 801bf22:	9201      	str	r2, [sp, #4]
 801bf24:	686a      	ldr	r2, [r5, #4]
 801bf26:	3204      	adds	r2, #4
 801bf28:	9202      	str	r2, [sp, #8]
 801bf2a:	9a00      	ldr	r2, [sp, #0]
 801bf2c:	2a00      	cmp	r2, #0
 801bf2e:	dc03      	bgt.n	801bf38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bf30:	f1bb 0f00 	cmp.w	fp, #0
 801bf34:	f340 80a0 	ble.w	801c078 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801bf38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf3a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801bf3e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bf42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bf44:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801bf48:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	dd0c      	ble.n	801bf6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bf50:	1406      	asrs	r6, r0, #16
 801bf52:	d405      	bmi.n	801bf60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf54:	454e      	cmp	r6, r9
 801bf56:	da03      	bge.n	801bf60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf58:	1416      	asrs	r6, r2, #16
 801bf5a:	d401      	bmi.n	801bf60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf5c:	4546      	cmp	r6, r8
 801bf5e:	db05      	blt.n	801bf6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bf60:	4470      	add	r0, lr
 801bf62:	4462      	add	r2, ip
 801bf64:	3b01      	subs	r3, #1
 801bf66:	3402      	adds	r4, #2
 801bf68:	e7f0      	b.n	801bf4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bf6a:	d00f      	beq.n	801bf8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bf6c:	1e5e      	subs	r6, r3, #1
 801bf6e:	fb0e 0706 	mla	r7, lr, r6, r0
 801bf72:	143f      	asrs	r7, r7, #16
 801bf74:	d541      	bpl.n	801bffa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801bf76:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801bf7a:	4698      	mov	r8, r3
 801bf7c:	9603      	str	r6, [sp, #12]
 801bf7e:	f1b8 0f00 	cmp.w	r8, #0
 801bf82:	dc59      	bgt.n	801c038 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bf84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf88:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bf8c:	9b00      	ldr	r3, [sp, #0]
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	dd72      	ble.n	801c078 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801bf92:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf9c:	eeb0 6a62 	vmov.f32	s12, s5
 801bfa0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bfa4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bfa8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bfac:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bfb0:	eeb0 6a43 	vmov.f32	s12, s6
 801bfb4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bfb8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bfbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bfc0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bfc4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bfc8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bfcc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bfd0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bfd4:	ee12 2a90 	vmov	r2, s5
 801bfd8:	eef0 2a47 	vmov.f32	s5, s14
 801bfdc:	fb92 fef3 	sdiv	lr, r2, r3
 801bfe0:	ee13 2a10 	vmov	r2, s6
 801bfe4:	eeb0 3a67 	vmov.f32	s6, s15
 801bfe8:	fb92 fcf3 	sdiv	ip, r2, r3
 801bfec:	9b00      	ldr	r3, [sp, #0]
 801bfee:	3b01      	subs	r3, #1
 801bff0:	9300      	str	r3, [sp, #0]
 801bff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bff4:	bf08      	it	eq
 801bff6:	465b      	moveq	r3, fp
 801bff8:	e797      	b.n	801bf2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801bffa:	454f      	cmp	r7, r9
 801bffc:	dabb      	bge.n	801bf76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bffe:	fb0c 2606 	mla	r6, ip, r6, r2
 801c002:	1436      	asrs	r6, r6, #16
 801c004:	d4b7      	bmi.n	801bf76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c006:	4546      	cmp	r6, r8
 801c008:	dab5      	bge.n	801bf76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c00a:	461e      	mov	r6, r3
 801c00c:	46a0      	mov	r8, r4
 801c00e:	2e00      	cmp	r6, #0
 801c010:	ddb8      	ble.n	801bf84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c012:	1417      	asrs	r7, r2, #16
 801c014:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801c018:	9901      	ldr	r1, [sp, #4]
 801c01a:	ea4f 4920 	mov.w	r9, r0, asr #16
 801c01e:	4462      	add	r2, ip
 801c020:	4470      	add	r0, lr
 801c022:	fb0a 1707 	mla	r7, sl, r7, r1
 801c026:	9902      	ldr	r1, [sp, #8]
 801c028:	3e01      	subs	r6, #1
 801c02a:	f817 7009 	ldrb.w	r7, [r7, r9]
 801c02e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801c032:	f828 7b02 	strh.w	r7, [r8], #2
 801c036:	e7ea      	b.n	801c00e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c038:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c03c:	d417      	bmi.n	801c06e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c03e:	68ae      	ldr	r6, [r5, #8]
 801c040:	454e      	cmp	r6, r9
 801c042:	dd14      	ble.n	801c06e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c044:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c048:	d411      	bmi.n	801c06e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c04a:	68ef      	ldr	r7, [r5, #12]
 801c04c:	4557      	cmp	r7, sl
 801c04e:	dd0e      	ble.n	801c06e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c050:	9f01      	ldr	r7, [sp, #4]
 801c052:	b236      	sxth	r6, r6
 801c054:	f06f 0101 	mvn.w	r1, #1
 801c058:	fb0a 7606 	mla	r6, sl, r6, r7
 801c05c:	9f02      	ldr	r7, [sp, #8]
 801c05e:	f816 6009 	ldrb.w	r6, [r6, r9]
 801c062:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801c066:	fb01 f608 	mul.w	r6, r1, r8
 801c06a:	9903      	ldr	r1, [sp, #12]
 801c06c:	538f      	strh	r7, [r1, r6]
 801c06e:	4470      	add	r0, lr
 801c070:	4462      	add	r2, ip
 801c072:	f108 38ff 	add.w	r8, r8, #4294967295
 801c076:	e782      	b.n	801bf7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c078:	b005      	add	sp, #20
 801c07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c07e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c07e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c082:	b087      	sub	sp, #28
 801c084:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c086:	9205      	str	r2, [sp, #20]
 801c088:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c08c:	9102      	str	r1, [sp, #8]
 801c08e:	9203      	str	r2, [sp, #12]
 801c090:	6861      	ldr	r1, [r4, #4]
 801c092:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c096:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801c09a:	fb01 2000 	mla	r0, r1, r0, r2
 801c09e:	6822      	ldr	r2, [r4, #0]
 801c0a0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801c0a4:	9200      	str	r2, [sp, #0]
 801c0a6:	f8dc 2000 	ldr.w	r2, [ip]
 801c0aa:	9204      	str	r2, [sp, #16]
 801c0ac:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c0b0:	3204      	adds	r2, #4
 801c0b2:	9201      	str	r2, [sp, #4]
 801c0b4:	9a03      	ldr	r2, [sp, #12]
 801c0b6:	43d5      	mvns	r5, r2
 801c0b8:	b2ed      	uxtb	r5, r5
 801c0ba:	9a02      	ldr	r2, [sp, #8]
 801c0bc:	2a00      	cmp	r2, #0
 801c0be:	dc03      	bgt.n	801c0c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c0c0:	9a05      	ldr	r2, [sp, #20]
 801c0c2:	2a00      	cmp	r2, #0
 801c0c4:	f340 812c 	ble.w	801c320 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c0c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c0ca:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c0ce:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c0d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c0d4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c0d8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	dd10      	ble.n	801c102 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c0e0:	140c      	asrs	r4, r1, #16
 801c0e2:	d405      	bmi.n	801c0f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c0e4:	4574      	cmp	r4, lr
 801c0e6:	da03      	bge.n	801c0f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c0e8:	1414      	asrs	r4, r2, #16
 801c0ea:	d401      	bmi.n	801c0f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c0ec:	42bc      	cmp	r4, r7
 801c0ee:	db09      	blt.n	801c104 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c0f0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c0f2:	3b01      	subs	r3, #1
 801c0f4:	9800      	ldr	r0, [sp, #0]
 801c0f6:	4421      	add	r1, r4
 801c0f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c0fa:	3002      	adds	r0, #2
 801c0fc:	4422      	add	r2, r4
 801c0fe:	9000      	str	r0, [sp, #0]
 801c100:	e7ec      	b.n	801c0dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c102:	d071      	beq.n	801c1e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c104:	1e5c      	subs	r4, r3, #1
 801c106:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c108:	fb06 1604 	mla	r6, r6, r4, r1
 801c10c:	1436      	asrs	r6, r6, #16
 801c10e:	d45d      	bmi.n	801c1cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c110:	4576      	cmp	r6, lr
 801c112:	da5b      	bge.n	801c1cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c114:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c116:	fb06 2404 	mla	r4, r6, r4, r2
 801c11a:	1424      	asrs	r4, r4, #16
 801c11c:	d456      	bmi.n	801c1cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c11e:	42bc      	cmp	r4, r7
 801c120:	da54      	bge.n	801c1cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c122:	4698      	mov	r8, r3
 801c124:	f8dd 9000 	ldr.w	r9, [sp]
 801c128:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801c12c:	f1b8 0f00 	cmp.w	r8, #0
 801c130:	dd54      	ble.n	801c1dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c132:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c136:	1414      	asrs	r4, r2, #16
 801c138:	9804      	ldr	r0, [sp, #16]
 801c13a:	140e      	asrs	r6, r1, #16
 801c13c:	f108 38ff 	add.w	r8, r8, #4294967295
 801c140:	fb07 0404 	mla	r4, r7, r4, r0
 801c144:	9801      	ldr	r0, [sp, #4]
 801c146:	f814 e006 	ldrb.w	lr, [r4, r6]
 801c14a:	f8b9 4000 	ldrh.w	r4, [r9]
 801c14e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c152:	1227      	asrs	r7, r4, #8
 801c154:	eb00 0b0e 	add.w	fp, r0, lr
 801c158:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801c15c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c160:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c162:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801c166:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c16a:	4401      	add	r1, r0
 801c16c:	fb16 f60a 	smulbb	r6, r6, sl
 801c170:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c172:	fb1b fb0a 	smulbb	fp, fp, sl
 801c176:	fb07 6705 	mla	r7, r7, r5, r6
 801c17a:	10e6      	asrs	r6, r4, #3
 801c17c:	00e4      	lsls	r4, r4, #3
 801c17e:	4402      	add	r2, r0
 801c180:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c184:	b2bf      	uxth	r7, r7
 801c186:	b2e4      	uxtb	r4, r4
 801c188:	fb06 b605 	mla	r6, r6, r5, fp
 801c18c:	fb14 f405 	smulbb	r4, r4, r5
 801c190:	b2b6      	uxth	r6, r6
 801c192:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801c196:	1c7c      	adds	r4, r7, #1
 801c198:	f106 0b01 	add.w	fp, r6, #1
 801c19c:	fa1f fe8e 	uxth.w	lr, lr
 801c1a0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801c1a4:	f10e 0401 	add.w	r4, lr, #1
 801c1a8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801c1ac:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c1b0:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801c1b4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801c1b8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c1bc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801c1c0:	4327      	orrs	r7, r4
 801c1c2:	ea47 070b 	orr.w	r7, r7, fp
 801c1c6:	f829 7b02 	strh.w	r7, [r9], #2
 801c1ca:	e7af      	b.n	801c12c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801c1cc:	f04f 0e00 	mov.w	lr, #0
 801c1d0:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801c1d4:	eb03 040e 	add.w	r4, r3, lr
 801c1d8:	2c00      	cmp	r4, #0
 801c1da:	dc43      	bgt.n	801c264 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801c1dc:	9a00      	ldr	r2, [sp, #0]
 801c1de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c1e6:	9300      	str	r3, [sp, #0]
 801c1e8:	9b02      	ldr	r3, [sp, #8]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	f340 8098 	ble.w	801c320 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c1f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c1f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c1f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1fe:	eef0 6a62 	vmov.f32	s13, s5
 801c202:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c206:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c20a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c20e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801c212:	eef0 6a43 	vmov.f32	s13, s6
 801c216:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c21a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801c21e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c222:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c226:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c22a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c22e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c232:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c236:	ee12 2a90 	vmov	r2, s5
 801c23a:	eef0 2a47 	vmov.f32	s5, s14
 801c23e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c242:	ee13 2a10 	vmov	r2, s6
 801c246:	9313      	str	r3, [sp, #76]	; 0x4c
 801c248:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c24a:	eeb0 3a67 	vmov.f32	s6, s15
 801c24e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c252:	9314      	str	r3, [sp, #80]	; 0x50
 801c254:	9b02      	ldr	r3, [sp, #8]
 801c256:	9a05      	ldr	r2, [sp, #20]
 801c258:	3b01      	subs	r3, #1
 801c25a:	9302      	str	r3, [sp, #8]
 801c25c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c25e:	bf08      	it	eq
 801c260:	4613      	moveq	r3, r2
 801c262:	e72a      	b.n	801c0ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c264:	140f      	asrs	r7, r1, #16
 801c266:	d454      	bmi.n	801c312 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c268:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c26c:	42be      	cmp	r6, r7
 801c26e:	dd50      	ble.n	801c312 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c270:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c274:	d44d      	bmi.n	801c312 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c276:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801c27a:	4544      	cmp	r4, r8
 801c27c:	dd49      	ble.n	801c312 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c27e:	9c04      	ldr	r4, [sp, #16]
 801c280:	b236      	sxth	r6, r6
 801c282:	f06f 0001 	mvn.w	r0, #1
 801c286:	fb08 4606 	mla	r6, r8, r6, r4
 801c28a:	9c01      	ldr	r4, [sp, #4]
 801c28c:	fb00 fa0e 	mul.w	sl, r0, lr
 801c290:	9800      	ldr	r0, [sp, #0]
 801c292:	f816 8007 	ldrb.w	r8, [r6, r7]
 801c296:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c29a:	eb04 0b08 	add.w	fp, r4, r8
 801c29e:	f830 400a 	ldrh.w	r4, [r0, sl]
 801c2a2:	9801      	ldr	r0, [sp, #4]
 801c2a4:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801c2a8:	1227      	asrs	r7, r4, #8
 801c2aa:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c2ae:	fb16 f609 	smulbb	r6, r6, r9
 801c2b2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c2b6:	f810 8008 	ldrb.w	r8, [r0, r8]
 801c2ba:	fb1b fb09 	smulbb	fp, fp, r9
 801c2be:	fb07 6705 	mla	r7, r7, r5, r6
 801c2c2:	10e6      	asrs	r6, r4, #3
 801c2c4:	00e4      	lsls	r4, r4, #3
 801c2c6:	9800      	ldr	r0, [sp, #0]
 801c2c8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c2cc:	b2bf      	uxth	r7, r7
 801c2ce:	b2e4      	uxtb	r4, r4
 801c2d0:	fb06 b605 	mla	r6, r6, r5, fp
 801c2d4:	fb14 f405 	smulbb	r4, r4, r5
 801c2d8:	b2b6      	uxth	r6, r6
 801c2da:	fb08 4809 	mla	r8, r8, r9, r4
 801c2de:	1c7c      	adds	r4, r7, #1
 801c2e0:	f106 0b01 	add.w	fp, r6, #1
 801c2e4:	fa1f f888 	uxth.w	r8, r8
 801c2e8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801c2ec:	f108 0401 	add.w	r4, r8, #1
 801c2f0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801c2f4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c2f8:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801c2fc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801c300:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c304:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801c308:	4327      	orrs	r7, r4
 801c30a:	ea47 070b 	orr.w	r7, r7, fp
 801c30e:	f820 700a 	strh.w	r7, [r0, sl]
 801c312:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c314:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c318:	4401      	add	r1, r0
 801c31a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c31c:	4402      	add	r2, r0
 801c31e:	e759      	b.n	801c1d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c320:	b007      	add	sp, #28
 801c322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c328 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c32c:	b085      	sub	sp, #20
 801c32e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c332:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c334:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801c336:	9203      	str	r2, [sp, #12]
 801c338:	6870      	ldr	r0, [r6, #4]
 801c33a:	686f      	ldr	r7, [r5, #4]
 801c33c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801c340:	3704      	adds	r7, #4
 801c342:	9101      	str	r1, [sp, #4]
 801c344:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c348:	fb00 2404 	mla	r4, r0, r4, r2
 801c34c:	6832      	ldr	r2, [r6, #0]
 801c34e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c352:	682a      	ldr	r2, [r5, #0]
 801c354:	9202      	str	r2, [sp, #8]
 801c356:	9a01      	ldr	r2, [sp, #4]
 801c358:	2a00      	cmp	r2, #0
 801c35a:	dc03      	bgt.n	801c364 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c35c:	9a03      	ldr	r2, [sp, #12]
 801c35e:	2a00      	cmp	r2, #0
 801c360:	f340 80cc 	ble.w	801c4fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c364:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c366:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c36a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c36e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c370:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c374:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c378:	2b00      	cmp	r3, #0
 801c37a:	dd0d      	ble.n	801c398 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c37c:	1406      	asrs	r6, r0, #16
 801c37e:	d405      	bmi.n	801c38c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c380:	454e      	cmp	r6, r9
 801c382:	da03      	bge.n	801c38c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c384:	1416      	asrs	r6, r2, #16
 801c386:	d401      	bmi.n	801c38c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c388:	4546      	cmp	r6, r8
 801c38a:	db06      	blt.n	801c39a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c38c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c38e:	4460      	add	r0, ip
 801c390:	3b01      	subs	r3, #1
 801c392:	3402      	adds	r4, #2
 801c394:	4432      	add	r2, r6
 801c396:	e7ef      	b.n	801c378 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c398:	d00f      	beq.n	801c3ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c39a:	1e5e      	subs	r6, r3, #1
 801c39c:	fb0c 0e06 	mla	lr, ip, r6, r0
 801c3a0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801c3a4:	d543      	bpl.n	801c42e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801c3a6:	4698      	mov	r8, r3
 801c3a8:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801c3ac:	f1b8 0f00 	cmp.w	r8, #0
 801c3b0:	dc71      	bgt.n	801c496 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801c3b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c3b6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c3ba:	9b01      	ldr	r3, [sp, #4]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	f340 809d 	ble.w	801c4fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c3c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c3c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c3cc:	eeb0 6a62 	vmov.f32	s12, s5
 801c3d0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c3d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c3d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3dc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c3e0:	eeb0 6a43 	vmov.f32	s12, s6
 801c3e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3e8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c3ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c3f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c3f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c3f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c3fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c400:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c404:	ee12 2a90 	vmov	r2, s5
 801c408:	eef0 2a47 	vmov.f32	s5, s14
 801c40c:	fb92 fcf3 	sdiv	ip, r2, r3
 801c410:	ee13 2a10 	vmov	r2, s6
 801c414:	eeb0 3a67 	vmov.f32	s6, s15
 801c418:	fb92 f3f3 	sdiv	r3, r2, r3
 801c41c:	9312      	str	r3, [sp, #72]	; 0x48
 801c41e:	9b01      	ldr	r3, [sp, #4]
 801c420:	9a03      	ldr	r2, [sp, #12]
 801c422:	3b01      	subs	r3, #1
 801c424:	9301      	str	r3, [sp, #4]
 801c426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c428:	bf08      	it	eq
 801c42a:	4613      	moveq	r3, r2
 801c42c:	e793      	b.n	801c356 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c42e:	45ce      	cmp	lr, r9
 801c430:	dab9      	bge.n	801c3a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c432:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c434:	fb01 2606 	mla	r6, r1, r6, r2
 801c438:	1436      	asrs	r6, r6, #16
 801c43a:	d4b4      	bmi.n	801c3a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c43c:	4546      	cmp	r6, r8
 801c43e:	dab2      	bge.n	801c3a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c440:	4698      	mov	r8, r3
 801c442:	46a2      	mov	sl, r4
 801c444:	f1b8 0f00 	cmp.w	r8, #0
 801c448:	ddb3      	ble.n	801c3b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c44a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c44e:	1416      	asrs	r6, r2, #16
 801c450:	9902      	ldr	r1, [sp, #8]
 801c452:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801c456:	f108 38ff 	add.w	r8, r8, #4294967295
 801c45a:	4460      	add	r0, ip
 801c45c:	fb09 1606 	mla	r6, r9, r6, r1
 801c460:	4928      	ldr	r1, [pc, #160]	; (801c504 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801c462:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801c466:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c46a:	eb07 0b0e 	add.w	fp, r7, lr
 801c46e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801c472:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c476:	00f6      	lsls	r6, r6, #3
 801c478:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801c47c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c47e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c482:	440a      	add	r2, r1
 801c484:	ea49 0606 	orr.w	r6, r9, r6
 801c488:	f817 900e 	ldrb.w	r9, [r7, lr]
 801c48c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801c490:	f82a 6b02 	strh.w	r6, [sl], #2
 801c494:	e7d6      	b.n	801c444 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c496:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c49a:	d429      	bmi.n	801c4f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c49c:	68ae      	ldr	r6, [r5, #8]
 801c49e:	454e      	cmp	r6, r9
 801c4a0:	dd26      	ble.n	801c4f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c4a2:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c4a6:	d423      	bmi.n	801c4f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c4a8:	68e9      	ldr	r1, [r5, #12]
 801c4aa:	4559      	cmp	r1, fp
 801c4ac:	dd20      	ble.n	801c4f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c4ae:	fa0f fe86 	sxth.w	lr, r6
 801c4b2:	9902      	ldr	r1, [sp, #8]
 801c4b4:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801c4b8:	f06f 0101 	mvn.w	r1, #1
 801c4bc:	f81e e009 	ldrb.w	lr, [lr, r9]
 801c4c0:	fb01 f908 	mul.w	r9, r1, r8
 801c4c4:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801c4c8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c4cc:	eb07 060e 	add.w	r6, r7, lr
 801c4d0:	f896 b002 	ldrb.w	fp, [r6, #2]
 801c4d4:	7876      	ldrb	r6, [r6, #1]
 801c4d6:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801c4da:	00f6      	lsls	r6, r6, #3
 801c4dc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c4e0:	ea4b 0606 	orr.w	r6, fp, r6
 801c4e4:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801c4e8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801c4ec:	f82a 6009 	strh.w	r6, [sl, r9]
 801c4f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c4f2:	4460      	add	r0, ip
 801c4f4:	f108 38ff 	add.w	r8, r8, #4294967295
 801c4f8:	440a      	add	r2, r1
 801c4fa:	e757      	b.n	801c3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c4fc:	b005      	add	sp, #20
 801c4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c502:	bf00      	nop
 801c504:	fffff800 	.word	0xfffff800

0801c508 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c50c:	b087      	sub	sp, #28
 801c50e:	468b      	mov	fp, r1
 801c510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c514:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c516:	9204      	str	r2, [sp, #16]
 801c518:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c51c:	6841      	ldr	r1, [r0, #4]
 801c51e:	9205      	str	r2, [sp, #20]
 801c520:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c524:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c528:	fb01 2404 	mla	r4, r1, r4, r2
 801c52c:	6802      	ldr	r2, [r0, #0]
 801c52e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c532:	f8dc 2000 	ldr.w	r2, [ip]
 801c536:	9201      	str	r2, [sp, #4]
 801c538:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c53c:	3204      	adds	r2, #4
 801c53e:	9202      	str	r2, [sp, #8]
 801c540:	f1bb 0f00 	cmp.w	fp, #0
 801c544:	dc03      	bgt.n	801c54e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801c546:	9a04      	ldr	r2, [sp, #16]
 801c548:	2a00      	cmp	r2, #0
 801c54a:	f340 8138 	ble.w	801c7be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c54e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c550:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c554:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c558:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c55a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801c55e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c562:	2b00      	cmp	r3, #0
 801c564:	dd0e      	ble.n	801c584 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c566:	1402      	asrs	r2, r0, #16
 801c568:	d405      	bmi.n	801c576 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c56a:	42ba      	cmp	r2, r7
 801c56c:	da03      	bge.n	801c576 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c56e:	140a      	asrs	r2, r1, #16
 801c570:	d401      	bmi.n	801c576 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c572:	42b2      	cmp	r2, r6
 801c574:	db07      	blt.n	801c586 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c576:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c578:	3b01      	subs	r3, #1
 801c57a:	3402      	adds	r4, #2
 801c57c:	4410      	add	r0, r2
 801c57e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c580:	4411      	add	r1, r2
 801c582:	e7ee      	b.n	801c562 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c584:	d019      	beq.n	801c5ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801c586:	1e5a      	subs	r2, r3, #1
 801c588:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c58a:	fb05 0502 	mla	r5, r5, r2, r0
 801c58e:	142d      	asrs	r5, r5, #16
 801c590:	d409      	bmi.n	801c5a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c592:	42bd      	cmp	r5, r7
 801c594:	da07      	bge.n	801c5a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c596:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c598:	fb05 1202 	mla	r2, r5, r2, r1
 801c59c:	1412      	asrs	r2, r2, #16
 801c59e:	d402      	bmi.n	801c5a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c5a0:	42b2      	cmp	r2, r6
 801c5a2:	f2c0 80ac 	blt.w	801c6fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801c5a6:	f04f 0e00 	mov.w	lr, #0
 801c5aa:	eb03 020e 	add.w	r2, r3, lr
 801c5ae:	2a00      	cmp	r2, #0
 801c5b0:	dc3e      	bgt.n	801c630 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c5b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5b6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c5ba:	f1bb 0f00 	cmp.w	fp, #0
 801c5be:	f340 80fe 	ble.w	801c7be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c5c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5cc:	f1bb 0b01 	subs.w	fp, fp, #1
 801c5d0:	eeb0 6a62 	vmov.f32	s12, s5
 801c5d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c5d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5e0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c5e4:	eeb0 6a43 	vmov.f32	s12, s6
 801c5e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5ec:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c5f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c600:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c604:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c608:	ee12 2a90 	vmov	r2, s5
 801c60c:	eef0 2a47 	vmov.f32	s5, s14
 801c610:	fb92 f3f3 	sdiv	r3, r2, r3
 801c614:	ee13 2a10 	vmov	r2, s6
 801c618:	9313      	str	r3, [sp, #76]	; 0x4c
 801c61a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c61c:	eeb0 3a67 	vmov.f32	s6, s15
 801c620:	fb92 f3f3 	sdiv	r3, r2, r3
 801c624:	9a04      	ldr	r2, [sp, #16]
 801c626:	9314      	str	r3, [sp, #80]	; 0x50
 801c628:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c62a:	bf08      	it	eq
 801c62c:	4613      	moveq	r3, r2
 801c62e:	e787      	b.n	801c540 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c630:	1406      	asrs	r6, r0, #16
 801c632:	d45d      	bmi.n	801c6f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c634:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801c638:	42b5      	cmp	r5, r6
 801c63a:	dd59      	ble.n	801c6f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c63c:	140f      	asrs	r7, r1, #16
 801c63e:	d457      	bmi.n	801c6f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c640:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c644:	42ba      	cmp	r2, r7
 801c646:	dd53      	ble.n	801c6f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c648:	9a01      	ldr	r2, [sp, #4]
 801c64a:	b22d      	sxth	r5, r5
 801c64c:	fb07 2505 	mla	r5, r7, r5, r2
 801c650:	5daa      	ldrb	r2, [r5, r6]
 801c652:	9d02      	ldr	r5, [sp, #8]
 801c654:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c658:	0e2e      	lsrs	r6, r5, #24
 801c65a:	d049      	beq.n	801c6f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c65c:	f06f 0201 	mvn.w	r2, #1
 801c660:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c664:	fb02 f20e 	mul.w	r2, r2, lr
 801c668:	f834 8002 	ldrh.w	r8, [r4, r2]
 801c66c:	9203      	str	r2, [sp, #12]
 801c66e:	9a05      	ldr	r2, [sp, #20]
 801c670:	ea4f 2728 	mov.w	r7, r8, asr #8
 801c674:	4356      	muls	r6, r2
 801c676:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c67a:	1c72      	adds	r2, r6, #1
 801c67c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c680:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c684:	b2ed      	uxtb	r5, r5
 801c686:	1212      	asrs	r2, r2, #8
 801c688:	fa1f f982 	uxth.w	r9, r2
 801c68c:	43d2      	mvns	r2, r2
 801c68e:	fb16 f609 	smulbb	r6, r6, r9
 801c692:	b2d2      	uxtb	r2, r2
 801c694:	fb15 f509 	smulbb	r5, r5, r9
 801c698:	fb07 6702 	mla	r7, r7, r2, r6
 801c69c:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801c6a0:	fb1a fa09 	smulbb	sl, sl, r9
 801c6a4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c6a8:	b2bf      	uxth	r7, r7
 801c6aa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c6ae:	fa5f f888 	uxtb.w	r8, r8
 801c6b2:	fb06 a602 	mla	r6, r6, r2, sl
 801c6b6:	fb08 5502 	mla	r5, r8, r2, r5
 801c6ba:	1c7a      	adds	r2, r7, #1
 801c6bc:	b2b6      	uxth	r6, r6
 801c6be:	b2ad      	uxth	r5, r5
 801c6c0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c6c4:	9a03      	ldr	r2, [sp, #12]
 801c6c6:	f105 0a01 	add.w	sl, r5, #1
 801c6ca:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c6ce:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c6d2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c6d6:	ea4a 0707 	orr.w	r7, sl, r7
 801c6da:	f106 0a01 	add.w	sl, r6, #1
 801c6de:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c6e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c6e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c6ea:	ea47 070a 	orr.w	r7, r7, sl
 801c6ee:	52a7      	strh	r7, [r4, r2]
 801c6f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c6f2:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c6f6:	4410      	add	r0, r2
 801c6f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c6fa:	4411      	add	r1, r2
 801c6fc:	e755      	b.n	801c5aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c6fe:	f04f 0800 	mov.w	r8, #0
 801c702:	eba3 0208 	sub.w	r2, r3, r8
 801c706:	2a00      	cmp	r2, #0
 801c708:	f77f af53 	ble.w	801c5b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801c70c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801c710:	140a      	asrs	r2, r1, #16
 801c712:	9f01      	ldr	r7, [sp, #4]
 801c714:	1405      	asrs	r5, r0, #16
 801c716:	fb06 7202 	mla	r2, r6, r2, r7
 801c71a:	5d52      	ldrb	r2, [r2, r5]
 801c71c:	9d02      	ldr	r5, [sp, #8]
 801c71e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c722:	0e2e      	lsrs	r6, r5, #24
 801c724:	d044      	beq.n	801c7b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c726:	9a05      	ldr	r2, [sp, #20]
 801c728:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c72c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801c730:	4356      	muls	r6, r2
 801c732:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c736:	1c72      	adds	r2, r6, #1
 801c738:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c73c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c740:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c744:	b2ed      	uxtb	r5, r5
 801c746:	1212      	asrs	r2, r2, #8
 801c748:	fa1f f982 	uxth.w	r9, r2
 801c74c:	43d2      	mvns	r2, r2
 801c74e:	fb16 f609 	smulbb	r6, r6, r9
 801c752:	b2d2      	uxtb	r2, r2
 801c754:	fb15 f509 	smulbb	r5, r5, r9
 801c758:	fb07 6702 	mla	r7, r7, r2, r6
 801c75c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c760:	fb1a fa09 	smulbb	sl, sl, r9
 801c764:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c768:	b2bf      	uxth	r7, r7
 801c76a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c76e:	fa5f fe8e 	uxtb.w	lr, lr
 801c772:	fb06 a602 	mla	r6, r6, r2, sl
 801c776:	fb0e 5502 	mla	r5, lr, r2, r5
 801c77a:	1c7a      	adds	r2, r7, #1
 801c77c:	b2b6      	uxth	r6, r6
 801c77e:	b2ad      	uxth	r5, r5
 801c780:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c784:	f105 0a01 	add.w	sl, r5, #1
 801c788:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c78c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c790:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c794:	ea4a 0707 	orr.w	r7, sl, r7
 801c798:	f106 0a01 	add.w	sl, r6, #1
 801c79c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c7a0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c7a4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c7a8:	ea47 070a 	orr.w	r7, r7, sl
 801c7ac:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801c7b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c7b2:	f108 0801 	add.w	r8, r8, #1
 801c7b6:	4410      	add	r0, r2
 801c7b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c7ba:	4411      	add	r1, r2
 801c7bc:	e7a1      	b.n	801c702 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801c7be:	b007      	add	sp, #28
 801c7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c7c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7c8:	b085      	sub	sp, #20
 801c7ca:	468b      	mov	fp, r1
 801c7cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c7d2:	9203      	str	r2, [sp, #12]
 801c7d4:	6841      	ldr	r1, [r0, #4]
 801c7d6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801c7da:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c7de:	fb01 2404 	mla	r4, r1, r4, r2
 801c7e2:	6802      	ldr	r2, [r0, #0]
 801c7e4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c7e8:	f8de 2000 	ldr.w	r2, [lr]
 801c7ec:	9200      	str	r2, [sp, #0]
 801c7ee:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c7f2:	3204      	adds	r2, #4
 801c7f4:	9201      	str	r2, [sp, #4]
 801c7f6:	f1bb 0f00 	cmp.w	fp, #0
 801c7fa:	dc03      	bgt.n	801c804 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c7fc:	9a03      	ldr	r2, [sp, #12]
 801c7fe:	2a00      	cmp	r2, #0
 801c800:	f340 8153 	ble.w	801caaa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801c804:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c806:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c80a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c80e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c810:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801c814:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c818:	2b00      	cmp	r3, #0
 801c81a:	dd0e      	ble.n	801c83a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c81c:	1408      	asrs	r0, r1, #16
 801c81e:	d405      	bmi.n	801c82c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c820:	42b8      	cmp	r0, r7
 801c822:	da03      	bge.n	801c82c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c824:	1410      	asrs	r0, r2, #16
 801c826:	d401      	bmi.n	801c82c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c828:	42b0      	cmp	r0, r6
 801c82a:	db07      	blt.n	801c83c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c82c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c82e:	3b01      	subs	r3, #1
 801c830:	3402      	adds	r4, #2
 801c832:	4401      	add	r1, r0
 801c834:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c836:	4402      	add	r2, r0
 801c838:	e7ee      	b.n	801c818 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c83a:	d017      	beq.n	801c86c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c83c:	1e58      	subs	r0, r3, #1
 801c83e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c840:	fb05 1500 	mla	r5, r5, r0, r1
 801c844:	142d      	asrs	r5, r5, #16
 801c846:	d409      	bmi.n	801c85c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c848:	42bd      	cmp	r5, r7
 801c84a:	da07      	bge.n	801c85c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c84c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c84e:	fb05 2000 	mla	r0, r5, r0, r2
 801c852:	1400      	asrs	r0, r0, #16
 801c854:	d402      	bmi.n	801c85c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c856:	42b0      	cmp	r0, r6
 801c858:	f2c0 80bc 	blt.w	801c9d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801c85c:	2600      	movs	r6, #0
 801c85e:	1998      	adds	r0, r3, r6
 801c860:	2800      	cmp	r0, #0
 801c862:	dc3e      	bgt.n	801c8e2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c864:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c868:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c86c:	f1bb 0f00 	cmp.w	fp, #0
 801c870:	f340 811b 	ble.w	801caaa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801c874:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c87a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c87e:	f1bb 0b01 	subs.w	fp, fp, #1
 801c882:	eeb0 6a62 	vmov.f32	s12, s5
 801c886:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c88a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c88e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c892:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c896:	eeb0 6a43 	vmov.f32	s12, s6
 801c89a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c89e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c8a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c8a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c8aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c8ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c8b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c8b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c8ba:	ee12 2a90 	vmov	r2, s5
 801c8be:	eef0 2a47 	vmov.f32	s5, s14
 801c8c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8c6:	ee13 2a10 	vmov	r2, s6
 801c8ca:	9311      	str	r3, [sp, #68]	; 0x44
 801c8cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8ce:	eeb0 3a67 	vmov.f32	s6, s15
 801c8d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8d6:	9a03      	ldr	r2, [sp, #12]
 801c8d8:	9312      	str	r3, [sp, #72]	; 0x48
 801c8da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8dc:	bf08      	it	eq
 801c8de:	4613      	moveq	r3, r2
 801c8e0:	e789      	b.n	801c7f6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c8e2:	140f      	asrs	r7, r1, #16
 801c8e4:	d426      	bmi.n	801c934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c8e6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c8ea:	42bd      	cmp	r5, r7
 801c8ec:	dd22      	ble.n	801c934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c8ee:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c8f2:	d41f      	bmi.n	801c934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c8f4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c8f8:	4560      	cmp	r0, ip
 801c8fa:	dd1b      	ble.n	801c934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c8fc:	9800      	ldr	r0, [sp, #0]
 801c8fe:	b22d      	sxth	r5, r5
 801c900:	fb0c 0505 	mla	r5, ip, r5, r0
 801c904:	5de8      	ldrb	r0, [r5, r7]
 801c906:	9d01      	ldr	r5, [sp, #4]
 801c908:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c90c:	0e07      	lsrs	r7, r0, #24
 801c90e:	2fff      	cmp	r7, #255	; 0xff
 801c910:	d116      	bne.n	801c940 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c912:	f06f 0501 	mvn.w	r5, #1
 801c916:	fb05 f706 	mul.w	r7, r5, r6
 801c91a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801c91e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801c922:	0945      	lsrs	r5, r0, #5
 801c924:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c928:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c92c:	ea4c 0505 	orr.w	r5, ip, r5
 801c930:	4305      	orrs	r5, r0
 801c932:	53e5      	strh	r5, [r4, r7]
 801c934:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c936:	3e01      	subs	r6, #1
 801c938:	4401      	add	r1, r0
 801c93a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c93c:	4402      	add	r2, r0
 801c93e:	e78e      	b.n	801c85e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c940:	b2fd      	uxtb	r5, r7
 801c942:	2f00      	cmp	r7, #0
 801c944:	d0f6      	beq.n	801c934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c946:	f06f 0701 	mvn.w	r7, #1
 801c94a:	fa1f f985 	uxth.w	r9, r5
 801c94e:	43ed      	mvns	r5, r5
 801c950:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c954:	4377      	muls	r7, r6
 801c956:	fb1a fa09 	smulbb	sl, sl, r9
 801c95a:	b2ed      	uxtb	r5, r5
 801c95c:	f834 8007 	ldrh.w	r8, [r4, r7]
 801c960:	9702      	str	r7, [sp, #8]
 801c962:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c966:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801c96a:	fb17 f709 	smulbb	r7, r7, r9
 801c96e:	b2c0      	uxtb	r0, r0
 801c970:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c974:	fb10 f009 	smulbb	r0, r0, r9
 801c978:	fb0c 7c05 	mla	ip, ip, r5, r7
 801c97c:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801c980:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c984:	fa1f fc8c 	uxth.w	ip, ip
 801c988:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c98c:	fa5f f888 	uxtb.w	r8, r8
 801c990:	fb07 a705 	mla	r7, r7, r5, sl
 801c994:	fb08 0005 	mla	r0, r8, r5, r0
 801c998:	f10c 0501 	add.w	r5, ip, #1
 801c99c:	b2bf      	uxth	r7, r7
 801c99e:	b280      	uxth	r0, r0
 801c9a0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c9a4:	f100 0a01 	add.w	sl, r0, #1
 801c9a8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c9ac:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c9b0:	9802      	ldr	r0, [sp, #8]
 801c9b2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c9b6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c9ba:	f107 0a01 	add.w	sl, r7, #1
 801c9be:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c9c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c9c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c9ca:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c9ce:	f824 c000 	strh.w	ip, [r4, r0]
 801c9d2:	e7af      	b.n	801c934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c9d4:	f04f 0800 	mov.w	r8, #0
 801c9d8:	eba3 0008 	sub.w	r0, r3, r8
 801c9dc:	2800      	cmp	r0, #0
 801c9de:	f77f af41 	ble.w	801c864 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c9e2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801c9e6:	1410      	asrs	r0, r2, #16
 801c9e8:	9f00      	ldr	r7, [sp, #0]
 801c9ea:	140d      	asrs	r5, r1, #16
 801c9ec:	fb06 7000 	mla	r0, r6, r0, r7
 801c9f0:	5d40      	ldrb	r0, [r0, r5]
 801c9f2:	9d01      	ldr	r5, [sp, #4]
 801c9f4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801c9f8:	0e2e      	lsrs	r6, r5, #24
 801c9fa:	2eff      	cmp	r6, #255	; 0xff
 801c9fc:	d112      	bne.n	801ca24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801c9fe:	482c      	ldr	r0, [pc, #176]	; (801cab0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ca00:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ca04:	0968      	lsrs	r0, r5, #5
 801ca06:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ca0a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ca0e:	4330      	orrs	r0, r6
 801ca10:	4328      	orrs	r0, r5
 801ca12:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801ca16:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ca18:	f108 0801 	add.w	r8, r8, #1
 801ca1c:	4401      	add	r1, r0
 801ca1e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ca20:	4402      	add	r2, r0
 801ca22:	e7d9      	b.n	801c9d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ca24:	b2f0      	uxtb	r0, r6
 801ca26:	2e00      	cmp	r6, #0
 801ca28:	d0f5      	beq.n	801ca16 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ca2a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801ca2e:	fa1f f980 	uxth.w	r9, r0
 801ca32:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ca36:	43c0      	mvns	r0, r0
 801ca38:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ca3c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ca40:	fb16 f609 	smulbb	r6, r6, r9
 801ca44:	b2c0      	uxtb	r0, r0
 801ca46:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ca4a:	b2ed      	uxtb	r5, r5
 801ca4c:	fb1a fa09 	smulbb	sl, sl, r9
 801ca50:	fb07 6700 	mla	r7, r7, r0, r6
 801ca54:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ca58:	fb15 f509 	smulbb	r5, r5, r9
 801ca5c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ca60:	b2bf      	uxth	r7, r7
 801ca62:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ca66:	fa5f fc8c 	uxtb.w	ip, ip
 801ca6a:	fb06 a600 	mla	r6, r6, r0, sl
 801ca6e:	fb0c 5500 	mla	r5, ip, r0, r5
 801ca72:	1c78      	adds	r0, r7, #1
 801ca74:	b2b6      	uxth	r6, r6
 801ca76:	b2ad      	uxth	r5, r5
 801ca78:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ca7c:	f105 0a01 	add.w	sl, r5, #1
 801ca80:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ca84:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ca88:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ca8c:	ea4a 0707 	orr.w	r7, sl, r7
 801ca90:	f106 0a01 	add.w	sl, r6, #1
 801ca94:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ca98:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ca9c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801caa0:	ea47 070a 	orr.w	r7, r7, sl
 801caa4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801caa8:	e7b5      	b.n	801ca16 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801caaa:	b005      	add	sp, #20
 801caac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cab0:	fffff800 	.word	0xfffff800

0801cab4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cab8:	b087      	sub	sp, #28
 801caba:	468b      	mov	fp, r1
 801cabc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cac0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cac2:	9204      	str	r2, [sp, #16]
 801cac4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801cac8:	6861      	ldr	r1, [r4, #4]
 801caca:	9205      	str	r2, [sp, #20]
 801cacc:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801cad0:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801cad4:	fb01 2000 	mla	r0, r1, r0, r2
 801cad8:	6822      	ldr	r2, [r4, #0]
 801cada:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801cade:	f8de 2000 	ldr.w	r2, [lr]
 801cae2:	9201      	str	r2, [sp, #4]
 801cae4:	f8de 2004 	ldr.w	r2, [lr, #4]
 801cae8:	9202      	str	r2, [sp, #8]
 801caea:	f1bb 0f00 	cmp.w	fp, #0
 801caee:	dc03      	bgt.n	801caf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801caf0:	9a04      	ldr	r2, [sp, #16]
 801caf2:	2a00      	cmp	r2, #0
 801caf4:	f340 8142 	ble.w	801cd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801caf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cafa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801cafe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cb02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cb04:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801cb08:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	dd0e      	ble.n	801cb2e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cb10:	140c      	asrs	r4, r1, #16
 801cb12:	d405      	bmi.n	801cb20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cb14:	42bc      	cmp	r4, r7
 801cb16:	da03      	bge.n	801cb20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cb18:	1414      	asrs	r4, r2, #16
 801cb1a:	d401      	bmi.n	801cb20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cb1c:	42b4      	cmp	r4, r6
 801cb1e:	db07      	blt.n	801cb30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cb20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cb22:	3b01      	subs	r3, #1
 801cb24:	3002      	adds	r0, #2
 801cb26:	4421      	add	r1, r4
 801cb28:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cb2a:	4422      	add	r2, r4
 801cb2c:	e7ee      	b.n	801cb0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801cb2e:	d019      	beq.n	801cb64 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801cb30:	1e5c      	subs	r4, r3, #1
 801cb32:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cb34:	fb05 1504 	mla	r5, r5, r4, r1
 801cb38:	142d      	asrs	r5, r5, #16
 801cb3a:	d409      	bmi.n	801cb50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cb3c:	42bd      	cmp	r5, r7
 801cb3e:	da07      	bge.n	801cb50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cb40:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cb42:	fb05 2404 	mla	r4, r5, r4, r2
 801cb46:	1424      	asrs	r4, r4, #16
 801cb48:	d402      	bmi.n	801cb50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cb4a:	42b4      	cmp	r4, r6
 801cb4c:	f2c0 80b1 	blt.w	801ccb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801cb50:	f04f 0800 	mov.w	r8, #0
 801cb54:	eb03 0408 	add.w	r4, r3, r8
 801cb58:	2c00      	cmp	r4, #0
 801cb5a:	dc3e      	bgt.n	801cbda <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801cb5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb60:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cb64:	f1bb 0f00 	cmp.w	fp, #0
 801cb68:	f340 8108 	ble.w	801cd7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801cb6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cb72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb76:	f1bb 0b01 	subs.w	fp, fp, #1
 801cb7a:	eeb0 6a62 	vmov.f32	s12, s5
 801cb7e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cb82:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb86:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb8a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801cb8e:	eeb0 6a43 	vmov.f32	s12, s6
 801cb92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb96:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801cb9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cba2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cba6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cbaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cbae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cbb2:	ee12 2a90 	vmov	r2, s5
 801cbb6:	eef0 2a47 	vmov.f32	s5, s14
 801cbba:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbbe:	ee13 2a10 	vmov	r2, s6
 801cbc2:	9313      	str	r3, [sp, #76]	; 0x4c
 801cbc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cbc6:	eeb0 3a67 	vmov.f32	s6, s15
 801cbca:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbce:	9a04      	ldr	r2, [sp, #16]
 801cbd0:	9314      	str	r3, [sp, #80]	; 0x50
 801cbd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cbd4:	bf08      	it	eq
 801cbd6:	4613      	moveq	r3, r2
 801cbd8:	e787      	b.n	801caea <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801cbda:	140e      	asrs	r6, r1, #16
 801cbdc:	d462      	bmi.n	801cca4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cbde:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cbe2:	42b5      	cmp	r5, r6
 801cbe4:	dd5e      	ble.n	801cca4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cbe6:	1417      	asrs	r7, r2, #16
 801cbe8:	d45c      	bmi.n	801cca4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cbea:	f8de 400c 	ldr.w	r4, [lr, #12]
 801cbee:	42bc      	cmp	r4, r7
 801cbf0:	dd58      	ble.n	801cca4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cbf2:	b22d      	sxth	r5, r5
 801cbf4:	9c02      	ldr	r4, [sp, #8]
 801cbf6:	fb07 6505 	mla	r5, r7, r5, r6
 801cbfa:	5d66      	ldrb	r6, [r4, r5]
 801cbfc:	2e00      	cmp	r6, #0
 801cbfe:	d051      	beq.n	801cca4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cc00:	9c01      	ldr	r4, [sp, #4]
 801cc02:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801cc06:	f06f 0401 	mvn.w	r4, #1
 801cc0a:	fb04 f408 	mul.w	r4, r4, r8
 801cc0e:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801cc12:	5b05      	ldrh	r5, [r0, r4]
 801cc14:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cc18:	9403      	str	r4, [sp, #12]
 801cc1a:	9c05      	ldr	r4, [sp, #20]
 801cc1c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cc20:	4366      	muls	r6, r4
 801cc22:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cc26:	1c74      	adds	r4, r6, #1
 801cc28:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801cc2c:	122e      	asrs	r6, r5, #8
 801cc2e:	1224      	asrs	r4, r4, #8
 801cc30:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cc34:	00ed      	lsls	r5, r5, #3
 801cc36:	b2a7      	uxth	r7, r4
 801cc38:	43e4      	mvns	r4, r4
 801cc3a:	b2ed      	uxtb	r5, r5
 801cc3c:	b2e4      	uxtb	r4, r4
 801cc3e:	fb16 f604 	smulbb	r6, r6, r4
 801cc42:	fb15 f504 	smulbb	r5, r5, r4
 801cc46:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cc4a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801cc4e:	fb1a fa04 	smulbb	sl, sl, r4
 801cc52:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801cc56:	fa1f fc8c 	uxth.w	ip, ip
 801cc5a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cc5e:	fa5f f989 	uxtb.w	r9, r9
 801cc62:	fb06 a607 	mla	r6, r6, r7, sl
 801cc66:	f10c 0401 	add.w	r4, ip, #1
 801cc6a:	fb09 5507 	mla	r5, r9, r7, r5
 801cc6e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801cc72:	9c03      	ldr	r4, [sp, #12]
 801cc74:	b2ad      	uxth	r5, r5
 801cc76:	b2b6      	uxth	r6, r6
 801cc78:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cc7c:	f105 0a01 	add.w	sl, r5, #1
 801cc80:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cc84:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cc88:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cc8c:	f106 0a01 	add.w	sl, r6, #1
 801cc90:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cc94:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cc98:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cc9c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cca0:	f820 c004 	strh.w	ip, [r0, r4]
 801cca4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cca6:	f108 38ff 	add.w	r8, r8, #4294967295
 801ccaa:	4421      	add	r1, r4
 801ccac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ccae:	4422      	add	r2, r4
 801ccb0:	e750      	b.n	801cb54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ccb2:	f04f 0900 	mov.w	r9, #0
 801ccb6:	eba3 0409 	sub.w	r4, r3, r9
 801ccba:	2c00      	cmp	r4, #0
 801ccbc:	f77f af4e 	ble.w	801cb5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ccc0:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ccc4:	140d      	asrs	r5, r1, #16
 801ccc6:	1414      	asrs	r4, r2, #16
 801ccc8:	fb06 5404 	mla	r4, r6, r4, r5
 801cccc:	9d02      	ldr	r5, [sp, #8]
 801ccce:	5d2e      	ldrb	r6, [r5, r4]
 801ccd0:	2e00      	cmp	r6, #0
 801ccd2:	d04c      	beq.n	801cd6e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ccd4:	9d01      	ldr	r5, [sp, #4]
 801ccd6:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801ccda:	9c05      	ldr	r4, [sp, #20]
 801ccdc:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801cce0:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801cce4:	4366      	muls	r6, r4
 801cce6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ccea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ccee:	1c74      	adds	r4, r6, #1
 801ccf0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ccf4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801ccf8:	122e      	asrs	r6, r5, #8
 801ccfa:	1224      	asrs	r4, r4, #8
 801ccfc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cd00:	00ed      	lsls	r5, r5, #3
 801cd02:	b2a7      	uxth	r7, r4
 801cd04:	43e4      	mvns	r4, r4
 801cd06:	b2ed      	uxtb	r5, r5
 801cd08:	b2e4      	uxtb	r4, r4
 801cd0a:	fb16 f604 	smulbb	r6, r6, r4
 801cd0e:	fb15 f504 	smulbb	r5, r5, r4
 801cd12:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cd16:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801cd1a:	fb1a fa04 	smulbb	sl, sl, r4
 801cd1e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cd22:	fa1f fc8c 	uxth.w	ip, ip
 801cd26:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cd2a:	fa5f f888 	uxtb.w	r8, r8
 801cd2e:	fb06 a607 	mla	r6, r6, r7, sl
 801cd32:	f10c 0401 	add.w	r4, ip, #1
 801cd36:	fb08 5507 	mla	r5, r8, r7, r5
 801cd3a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801cd3e:	b2ad      	uxth	r5, r5
 801cd40:	b2b6      	uxth	r6, r6
 801cd42:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cd46:	f105 0a01 	add.w	sl, r5, #1
 801cd4a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cd4e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cd52:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cd56:	f106 0a01 	add.w	sl, r6, #1
 801cd5a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cd5e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cd62:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cd66:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cd6a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801cd6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cd70:	f109 0901 	add.w	r9, r9, #1
 801cd74:	4421      	add	r1, r4
 801cd76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cd78:	4422      	add	r2, r4
 801cd7a:	e79c      	b.n	801ccb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801cd7c:	b007      	add	sp, #28
 801cd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd82 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd86:	b085      	sub	sp, #20
 801cd88:	468b      	mov	fp, r1
 801cd8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cd8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cd90:	9203      	str	r2, [sp, #12]
 801cd92:	6861      	ldr	r1, [r4, #4]
 801cd94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801cd98:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801cd9c:	fb01 2000 	mla	r0, r1, r0, r2
 801cda0:	6822      	ldr	r2, [r4, #0]
 801cda2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801cda6:	f8d8 2000 	ldr.w	r2, [r8]
 801cdaa:	9200      	str	r2, [sp, #0]
 801cdac:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801cdb0:	9201      	str	r2, [sp, #4]
 801cdb2:	f1bb 0f00 	cmp.w	fp, #0
 801cdb6:	dc03      	bgt.n	801cdc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801cdb8:	9a03      	ldr	r2, [sp, #12]
 801cdba:	2a00      	cmp	r2, #0
 801cdbc:	f340 8146 	ble.w	801d04c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801cdc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cdc2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801cdc6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cdca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cdcc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801cdd0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	dd0e      	ble.n	801cdf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cdd8:	140c      	asrs	r4, r1, #16
 801cdda:	d405      	bmi.n	801cde8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cddc:	42bc      	cmp	r4, r7
 801cdde:	da03      	bge.n	801cde8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cde0:	1414      	asrs	r4, r2, #16
 801cde2:	d401      	bmi.n	801cde8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cde4:	42b4      	cmp	r4, r6
 801cde6:	db07      	blt.n	801cdf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cde8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cdea:	3b01      	subs	r3, #1
 801cdec:	3002      	adds	r0, #2
 801cdee:	4421      	add	r1, r4
 801cdf0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cdf2:	4422      	add	r2, r4
 801cdf4:	e7ee      	b.n	801cdd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801cdf6:	d017      	beq.n	801ce28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801cdf8:	1e5c      	subs	r4, r3, #1
 801cdfa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cdfc:	fb05 1504 	mla	r5, r5, r4, r1
 801ce00:	142d      	asrs	r5, r5, #16
 801ce02:	d409      	bmi.n	801ce18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce04:	42bd      	cmp	r5, r7
 801ce06:	da07      	bge.n	801ce18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce08:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ce0a:	fb05 2404 	mla	r4, r5, r4, r2
 801ce0e:	1424      	asrs	r4, r4, #16
 801ce10:	d402      	bmi.n	801ce18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce12:	42b4      	cmp	r4, r6
 801ce14:	f2c0 80b3 	blt.w	801cf7e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801ce18:	2600      	movs	r6, #0
 801ce1a:	199c      	adds	r4, r3, r6
 801ce1c:	2c00      	cmp	r4, #0
 801ce1e:	dc3e      	bgt.n	801ce9e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ce20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ce24:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ce28:	f1bb 0f00 	cmp.w	fp, #0
 801ce2c:	f340 810e 	ble.w	801d04c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ce30:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce3a:	f1bb 0b01 	subs.w	fp, fp, #1
 801ce3e:	eeb0 6a62 	vmov.f32	s12, s5
 801ce42:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ce46:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ce4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce4e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ce52:	eeb0 6a43 	vmov.f32	s12, s6
 801ce56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce5a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ce5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ce62:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ce66:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ce6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ce6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ce72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ce76:	ee12 2a90 	vmov	r2, s5
 801ce7a:	eef0 2a47 	vmov.f32	s5, s14
 801ce7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce82:	ee13 2a10 	vmov	r2, s6
 801ce86:	9311      	str	r3, [sp, #68]	; 0x44
 801ce88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce8a:	eeb0 3a67 	vmov.f32	s6, s15
 801ce8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce92:	9a03      	ldr	r2, [sp, #12]
 801ce94:	9312      	str	r3, [sp, #72]	; 0x48
 801ce96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce98:	bf08      	it	eq
 801ce9a:	4613      	moveq	r3, r2
 801ce9c:	e789      	b.n	801cdb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ce9e:	140f      	asrs	r7, r1, #16
 801cea0:	d418      	bmi.n	801ced4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cea2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801cea6:	42bd      	cmp	r5, r7
 801cea8:	dd14      	ble.n	801ced4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ceaa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ceae:	d411      	bmi.n	801ced4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ceb0:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801ceb4:	4564      	cmp	r4, ip
 801ceb6:	dd0d      	ble.n	801ced4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ceb8:	b22d      	sxth	r5, r5
 801ceba:	9c01      	ldr	r4, [sp, #4]
 801cebc:	fb0c 7505 	mla	r5, ip, r5, r7
 801cec0:	5d64      	ldrb	r4, [r4, r5]
 801cec2:	2cff      	cmp	r4, #255	; 0xff
 801cec4:	d10c      	bne.n	801cee0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801cec6:	9c00      	ldr	r4, [sp, #0]
 801cec8:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801cecc:	f06f 0401 	mvn.w	r4, #1
 801ced0:	4374      	muls	r4, r6
 801ced2:	5305      	strh	r5, [r0, r4]
 801ced4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ced6:	3e01      	subs	r6, #1
 801ced8:	4421      	add	r1, r4
 801ceda:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cedc:	4422      	add	r2, r4
 801cede:	e79c      	b.n	801ce1a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cee0:	2c00      	cmp	r4, #0
 801cee2:	d0f7      	beq.n	801ced4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cee4:	9f00      	ldr	r7, [sp, #0]
 801cee6:	fa1f fc84 	uxth.w	ip, r4
 801ceea:	43e4      	mvns	r4, r4
 801ceec:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801cef0:	f06f 0501 	mvn.w	r5, #1
 801cef4:	b2e4      	uxtb	r4, r4
 801cef6:	4375      	muls	r5, r6
 801cef8:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801cefc:	9502      	str	r5, [sp, #8]
 801cefe:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801cf02:	5b45      	ldrh	r5, [r0, r5]
 801cf04:	122f      	asrs	r7, r5, #8
 801cf06:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cf0a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cf0e:	00ed      	lsls	r5, r5, #3
 801cf10:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cf14:	fb17 f704 	smulbb	r7, r7, r4
 801cf18:	b2ed      	uxtb	r5, r5
 801cf1a:	fb1a fa04 	smulbb	sl, sl, r4
 801cf1e:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801cf22:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801cf26:	fb15 f504 	smulbb	r5, r5, r4
 801cf2a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801cf2e:	fa1f fe8e 	uxth.w	lr, lr
 801cf32:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cf36:	fa5f f989 	uxtb.w	r9, r9
 801cf3a:	fb07 a70c 	mla	r7, r7, ip, sl
 801cf3e:	f10e 0401 	add.w	r4, lr, #1
 801cf42:	fb09 550c 	mla	r5, r9, ip, r5
 801cf46:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801cf4a:	9c02      	ldr	r4, [sp, #8]
 801cf4c:	b2ad      	uxth	r5, r5
 801cf4e:	b2bf      	uxth	r7, r7
 801cf50:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801cf54:	f105 0a01 	add.w	sl, r5, #1
 801cf58:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cf5c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cf60:	ea4a 0e0e 	orr.w	lr, sl, lr
 801cf64:	f107 0a01 	add.w	sl, r7, #1
 801cf68:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cf6c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cf70:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cf74:	ea4e 0e0a 	orr.w	lr, lr, sl
 801cf78:	f820 e004 	strh.w	lr, [r0, r4]
 801cf7c:	e7aa      	b.n	801ced4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cf7e:	f04f 0900 	mov.w	r9, #0
 801cf82:	eba3 0409 	sub.w	r4, r3, r9
 801cf86:	2c00      	cmp	r4, #0
 801cf88:	f77f af4a 	ble.w	801ce20 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cf8c:	1414      	asrs	r4, r2, #16
 801cf8e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801cf92:	140d      	asrs	r5, r1, #16
 801cf94:	fb06 5504 	mla	r5, r6, r4, r5
 801cf98:	9c01      	ldr	r4, [sp, #4]
 801cf9a:	5d64      	ldrb	r4, [r4, r5]
 801cf9c:	2cff      	cmp	r4, #255	; 0xff
 801cf9e:	d10b      	bne.n	801cfb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801cfa0:	9c00      	ldr	r4, [sp, #0]
 801cfa2:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801cfa6:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801cfaa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cfac:	f109 0901 	add.w	r9, r9, #1
 801cfb0:	4421      	add	r1, r4
 801cfb2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cfb4:	4422      	add	r2, r4
 801cfb6:	e7e4      	b.n	801cf82 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801cfb8:	2c00      	cmp	r4, #0
 801cfba:	d0f6      	beq.n	801cfaa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801cfbc:	9e00      	ldr	r6, [sp, #0]
 801cfbe:	b2a7      	uxth	r7, r4
 801cfc0:	43e4      	mvns	r4, r4
 801cfc2:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801cfc6:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801cfca:	b2e4      	uxtb	r4, r4
 801cfcc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cfd0:	122e      	asrs	r6, r5, #8
 801cfd2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cfd6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cfda:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cfde:	00ed      	lsls	r5, r5, #3
 801cfe0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cfe4:	fb16 f604 	smulbb	r6, r6, r4
 801cfe8:	b2ed      	uxtb	r5, r5
 801cfea:	fb1a fa04 	smulbb	sl, sl, r4
 801cfee:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cff2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801cff6:	fb15 f504 	smulbb	r5, r5, r4
 801cffa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cffe:	fa1f fc8c 	uxth.w	ip, ip
 801d002:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d006:	fa5f fe8e 	uxtb.w	lr, lr
 801d00a:	fb06 a607 	mla	r6, r6, r7, sl
 801d00e:	f10c 0401 	add.w	r4, ip, #1
 801d012:	fb0e 5507 	mla	r5, lr, r7, r5
 801d016:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801d01a:	b2ad      	uxth	r5, r5
 801d01c:	b2b6      	uxth	r6, r6
 801d01e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d022:	f105 0a01 	add.w	sl, r5, #1
 801d026:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d02a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d02e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d032:	f106 0a01 	add.w	sl, r6, #1
 801d036:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d03a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d03e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d042:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d046:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801d04a:	e7ae      	b.n	801cfaa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d04c:	b005      	add	sp, #20
 801d04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d052 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d056:	b085      	sub	sp, #20
 801d058:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d05a:	9203      	str	r2, [sp, #12]
 801d05c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801d060:	9100      	str	r1, [sp, #0]
 801d062:	9201      	str	r2, [sp, #4]
 801d064:	6841      	ldr	r1, [r0, #4]
 801d066:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801d06a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d06e:	fb01 2404 	mla	r4, r1, r4, r2
 801d072:	6802      	ldr	r2, [r0, #0]
 801d074:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d078:	f8de 2000 	ldr.w	r2, [lr]
 801d07c:	9202      	str	r2, [sp, #8]
 801d07e:	9a01      	ldr	r2, [sp, #4]
 801d080:	43d6      	mvns	r6, r2
 801d082:	b2f6      	uxtb	r6, r6
 801d084:	9a00      	ldr	r2, [sp, #0]
 801d086:	2a00      	cmp	r2, #0
 801d088:	dc03      	bgt.n	801d092 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d08a:	9a03      	ldr	r2, [sp, #12]
 801d08c:	2a00      	cmp	r2, #0
 801d08e:	f340 8124 	ble.w	801d2da <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d094:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801d098:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d09c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d09e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801d0a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	dd0e      	ble.n	801d0c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d0aa:	1408      	asrs	r0, r1, #16
 801d0ac:	d405      	bmi.n	801d0ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d0ae:	4560      	cmp	r0, ip
 801d0b0:	da03      	bge.n	801d0ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d0b2:	1410      	asrs	r0, r2, #16
 801d0b4:	d401      	bmi.n	801d0ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d0b6:	42b8      	cmp	r0, r7
 801d0b8:	db07      	blt.n	801d0ca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d0ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d0bc:	3b01      	subs	r3, #1
 801d0be:	3402      	adds	r4, #2
 801d0c0:	4401      	add	r1, r0
 801d0c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d0c4:	4402      	add	r2, r0
 801d0c6:	e7ee      	b.n	801d0a6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d0c8:	d06e      	beq.n	801d1a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d0ca:	1e58      	subs	r0, r3, #1
 801d0cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d0ce:	fb05 1500 	mla	r5, r5, r0, r1
 801d0d2:	142d      	asrs	r5, r5, #16
 801d0d4:	d45c      	bmi.n	801d190 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d0d6:	4565      	cmp	r5, ip
 801d0d8:	da5a      	bge.n	801d190 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d0da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d0dc:	fb05 2000 	mla	r0, r5, r0, r2
 801d0e0:	1400      	asrs	r0, r0, #16
 801d0e2:	d455      	bmi.n	801d190 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d0e4:	42b8      	cmp	r0, r7
 801d0e6:	da53      	bge.n	801d190 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d0e8:	4699      	mov	r9, r3
 801d0ea:	46a2      	mov	sl, r4
 801d0ec:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801d0f0:	f1b9 0f00 	cmp.w	r9, #0
 801d0f4:	dd54      	ble.n	801d1a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d0f6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d0fa:	140d      	asrs	r5, r1, #16
 801d0fc:	1410      	asrs	r0, r2, #16
 801d0fe:	f109 39ff 	add.w	r9, r9, #4294967295
 801d102:	fb07 5000 	mla	r0, r7, r0, r5
 801d106:	9d02      	ldr	r5, [sp, #8]
 801d108:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d10c:	f8ba 5000 	ldrh.w	r5, [sl]
 801d110:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d114:	122f      	asrs	r7, r5, #8
 801d116:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d11a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d11e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d122:	00ed      	lsls	r5, r5, #3
 801d124:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801d128:	fb17 f706 	smulbb	r7, r7, r6
 801d12c:	b2ed      	uxtb	r5, r5
 801d12e:	fb18 f806 	smulbb	r8, r8, r6
 801d132:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d136:	10c7      	asrs	r7, r0, #3
 801d138:	fb15 f506 	smulbb	r5, r5, r6
 801d13c:	00c0      	lsls	r0, r0, #3
 801d13e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d142:	fa1f fc8c 	uxth.w	ip, ip
 801d146:	b2c0      	uxtb	r0, r0
 801d148:	fb07 870b 	mla	r7, r7, fp, r8
 801d14c:	fb00 500b 	mla	r0, r0, fp, r5
 801d150:	f10c 0501 	add.w	r5, ip, #1
 801d154:	b2bf      	uxth	r7, r7
 801d156:	b280      	uxth	r0, r0
 801d158:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d15c:	f107 0801 	add.w	r8, r7, #1
 801d160:	1c45      	adds	r5, r0, #1
 801d162:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d166:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d16a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d16e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d170:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d174:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d178:	4401      	add	r1, r0
 801d17a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d17e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d180:	ea45 0c0c 	orr.w	ip, r5, ip
 801d184:	4402      	add	r2, r0
 801d186:	ea4c 0c08 	orr.w	ip, ip, r8
 801d18a:	f82a cb02 	strh.w	ip, [sl], #2
 801d18e:	e7af      	b.n	801d0f0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d190:	f04f 0800 	mov.w	r8, #0
 801d194:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801d198:	eb03 0008 	add.w	r0, r3, r8
 801d19c:	2800      	cmp	r0, #0
 801d19e:	dc41      	bgt.n	801d224 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d1a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d1a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d1a8:	9b00      	ldr	r3, [sp, #0]
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	f340 8095 	ble.w	801d2da <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d1b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d1b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d1b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d1ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d1be:	eef0 6a62 	vmov.f32	s13, s5
 801d1c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d1c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d1ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d1ce:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801d1d2:	eef0 6a43 	vmov.f32	s13, s6
 801d1d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d1da:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801d1de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d1e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d1e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d1ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d1ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d1f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d1f6:	ee12 2a90 	vmov	r2, s5
 801d1fa:	eef0 2a47 	vmov.f32	s5, s14
 801d1fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801d202:	ee13 2a10 	vmov	r2, s6
 801d206:	9311      	str	r3, [sp, #68]	; 0x44
 801d208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d20a:	eeb0 3a67 	vmov.f32	s6, s15
 801d20e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d212:	9312      	str	r3, [sp, #72]	; 0x48
 801d214:	9b00      	ldr	r3, [sp, #0]
 801d216:	9a03      	ldr	r2, [sp, #12]
 801d218:	3b01      	subs	r3, #1
 801d21a:	9300      	str	r3, [sp, #0]
 801d21c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d21e:	bf08      	it	eq
 801d220:	4613      	moveq	r3, r2
 801d222:	e72f      	b.n	801d084 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d224:	140f      	asrs	r7, r1, #16
 801d226:	d451      	bmi.n	801d2cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d228:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d22c:	42bd      	cmp	r5, r7
 801d22e:	dd4d      	ble.n	801d2cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d230:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d234:	d44a      	bmi.n	801d2cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d236:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d23a:	4560      	cmp	r0, ip
 801d23c:	dd46      	ble.n	801d2cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d23e:	b22d      	sxth	r5, r5
 801d240:	9802      	ldr	r0, [sp, #8]
 801d242:	fb0c 7505 	mla	r5, ip, r5, r7
 801d246:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801d24a:	f06f 0501 	mvn.w	r5, #1
 801d24e:	fb05 fb08 	mul.w	fp, r5, r8
 801d252:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d256:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d25a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d25e:	122f      	asrs	r7, r5, #8
 801d260:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d264:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d268:	00ed      	lsls	r5, r5, #3
 801d26a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d26e:	fb17 f706 	smulbb	r7, r7, r6
 801d272:	b2ed      	uxtb	r5, r5
 801d274:	fb19 f906 	smulbb	r9, r9, r6
 801d278:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d27c:	10c7      	asrs	r7, r0, #3
 801d27e:	fb15 f506 	smulbb	r5, r5, r6
 801d282:	00c0      	lsls	r0, r0, #3
 801d284:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d288:	fa1f fc8c 	uxth.w	ip, ip
 801d28c:	b2c0      	uxtb	r0, r0
 801d28e:	fb07 970a 	mla	r7, r7, sl, r9
 801d292:	fb00 500a 	mla	r0, r0, sl, r5
 801d296:	f10c 0501 	add.w	r5, ip, #1
 801d29a:	b2bf      	uxth	r7, r7
 801d29c:	b280      	uxth	r0, r0
 801d29e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d2a2:	f107 0901 	add.w	r9, r7, #1
 801d2a6:	1c45      	adds	r5, r0, #1
 801d2a8:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d2ac:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d2b0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d2b4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d2b8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d2bc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d2c0:	ea45 0c0c 	orr.w	ip, r5, ip
 801d2c4:	ea4c 0c09 	orr.w	ip, ip, r9
 801d2c8:	f824 c00b 	strh.w	ip, [r4, fp]
 801d2cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d2ce:	f108 38ff 	add.w	r8, r8, #4294967295
 801d2d2:	4401      	add	r1, r0
 801d2d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d2d6:	4402      	add	r2, r0
 801d2d8:	e75e      	b.n	801d198 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d2da:	b005      	add	sp, #20
 801d2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d2e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2e4:	b085      	sub	sp, #20
 801d2e6:	4693      	mov	fp, r2
 801d2e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d2ec:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d2ee:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d2f0:	6870      	ldr	r0, [r6, #4]
 801d2f2:	9101      	str	r1, [sp, #4]
 801d2f4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d2f8:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801d2fc:	fb00 2404 	mla	r4, r0, r4, r2
 801d300:	6832      	ldr	r2, [r6, #0]
 801d302:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d306:	682a      	ldr	r2, [r5, #0]
 801d308:	9202      	str	r2, [sp, #8]
 801d30a:	9a01      	ldr	r2, [sp, #4]
 801d30c:	2a00      	cmp	r2, #0
 801d30e:	dc03      	bgt.n	801d318 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d310:	f1bb 0f00 	cmp.w	fp, #0
 801d314:	f340 809a 	ble.w	801d44c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d31a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d31e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d322:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d324:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d328:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	dd0c      	ble.n	801d34a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d330:	1406      	asrs	r6, r0, #16
 801d332:	d405      	bmi.n	801d340 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d334:	454e      	cmp	r6, r9
 801d336:	da03      	bge.n	801d340 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d338:	1416      	asrs	r6, r2, #16
 801d33a:	d401      	bmi.n	801d340 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d33c:	4546      	cmp	r6, r8
 801d33e:	db05      	blt.n	801d34c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d340:	4470      	add	r0, lr
 801d342:	4462      	add	r2, ip
 801d344:	3b01      	subs	r3, #1
 801d346:	3402      	adds	r4, #2
 801d348:	e7f0      	b.n	801d32c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d34a:	d00f      	beq.n	801d36c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d34c:	1e5e      	subs	r6, r3, #1
 801d34e:	fb0e 0706 	mla	r7, lr, r6, r0
 801d352:	143f      	asrs	r7, r7, #16
 801d354:	d541      	bpl.n	801d3da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801d356:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d35a:	4698      	mov	r8, r3
 801d35c:	9603      	str	r6, [sp, #12]
 801d35e:	f1b8 0f00 	cmp.w	r8, #0
 801d362:	dc56      	bgt.n	801d412 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801d364:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d368:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d36c:	9b01      	ldr	r3, [sp, #4]
 801d36e:	2b00      	cmp	r3, #0
 801d370:	dd6c      	ble.n	801d44c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d372:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d378:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d37c:	eeb0 6a62 	vmov.f32	s12, s5
 801d380:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d384:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d388:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d38c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d390:	eeb0 6a43 	vmov.f32	s12, s6
 801d394:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d398:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d39c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d3a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d3a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d3a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d3ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d3b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d3b4:	ee12 2a90 	vmov	r2, s5
 801d3b8:	eef0 2a47 	vmov.f32	s5, s14
 801d3bc:	fb92 fef3 	sdiv	lr, r2, r3
 801d3c0:	ee13 2a10 	vmov	r2, s6
 801d3c4:	eeb0 3a67 	vmov.f32	s6, s15
 801d3c8:	fb92 fcf3 	sdiv	ip, r2, r3
 801d3cc:	9b01      	ldr	r3, [sp, #4]
 801d3ce:	3b01      	subs	r3, #1
 801d3d0:	9301      	str	r3, [sp, #4]
 801d3d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3d4:	bf08      	it	eq
 801d3d6:	465b      	moveq	r3, fp
 801d3d8:	e797      	b.n	801d30a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801d3da:	454f      	cmp	r7, r9
 801d3dc:	dabb      	bge.n	801d356 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d3de:	fb0c 2606 	mla	r6, ip, r6, r2
 801d3e2:	1436      	asrs	r6, r6, #16
 801d3e4:	d4b7      	bmi.n	801d356 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d3e6:	4546      	cmp	r6, r8
 801d3e8:	dab5      	bge.n	801d356 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d3ea:	461e      	mov	r6, r3
 801d3ec:	46a0      	mov	r8, r4
 801d3ee:	2e00      	cmp	r6, #0
 801d3f0:	ddb8      	ble.n	801d364 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d3f2:	1417      	asrs	r7, r2, #16
 801d3f4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d3f8:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d3fc:	9902      	ldr	r1, [sp, #8]
 801d3fe:	4470      	add	r0, lr
 801d400:	4462      	add	r2, ip
 801d402:	fb0a 9707 	mla	r7, sl, r7, r9
 801d406:	3e01      	subs	r6, #1
 801d408:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d40c:	f828 7b02 	strh.w	r7, [r8], #2
 801d410:	e7ed      	b.n	801d3ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801d412:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d416:	d414      	bmi.n	801d442 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d418:	68ae      	ldr	r6, [r5, #8]
 801d41a:	454e      	cmp	r6, r9
 801d41c:	dd11      	ble.n	801d442 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d41e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d422:	d40e      	bmi.n	801d442 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d424:	68ef      	ldr	r7, [r5, #12]
 801d426:	4557      	cmp	r7, sl
 801d428:	dd0b      	ble.n	801d442 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d42a:	b236      	sxth	r6, r6
 801d42c:	f06f 0101 	mvn.w	r1, #1
 801d430:	9f02      	ldr	r7, [sp, #8]
 801d432:	fb0a 9606 	mla	r6, sl, r6, r9
 801d436:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d43a:	fb01 f608 	mul.w	r6, r1, r8
 801d43e:	9903      	ldr	r1, [sp, #12]
 801d440:	538f      	strh	r7, [r1, r6]
 801d442:	4470      	add	r0, lr
 801d444:	4462      	add	r2, ip
 801d446:	f108 38ff 	add.w	r8, r8, #4294967295
 801d44a:	e788      	b.n	801d35e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d44c:	b005      	add	sp, #20
 801d44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d452 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d452:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d456:	b087      	sub	sp, #28
 801d458:	468b      	mov	fp, r1
 801d45a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d45e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d460:	9203      	str	r2, [sp, #12]
 801d462:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d466:	6841      	ldr	r1, [r0, #4]
 801d468:	9204      	str	r2, [sp, #16]
 801d46a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801d46e:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d472:	fb01 2505 	mla	r5, r1, r5, r2
 801d476:	6802      	ldr	r2, [r0, #0]
 801d478:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801d47c:	f8d9 2000 	ldr.w	r2, [r9]
 801d480:	9201      	str	r2, [sp, #4]
 801d482:	f1bb 0f00 	cmp.w	fp, #0
 801d486:	dc03      	bgt.n	801d490 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d488:	9a03      	ldr	r2, [sp, #12]
 801d48a:	2a00      	cmp	r2, #0
 801d48c:	f340 8158 	ble.w	801d740 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801d490:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d492:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801d496:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d49a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d49c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801d4a0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	dd0e      	ble.n	801d4c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d4a8:	1402      	asrs	r2, r0, #16
 801d4aa:	d405      	bmi.n	801d4b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d4ac:	42ba      	cmp	r2, r7
 801d4ae:	da03      	bge.n	801d4b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d4b0:	140a      	asrs	r2, r1, #16
 801d4b2:	d401      	bmi.n	801d4b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d4b4:	42b2      	cmp	r2, r6
 801d4b6:	db07      	blt.n	801d4c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d4b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d4ba:	3b01      	subs	r3, #1
 801d4bc:	3502      	adds	r5, #2
 801d4be:	4410      	add	r0, r2
 801d4c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d4c2:	4411      	add	r1, r2
 801d4c4:	e7ee      	b.n	801d4a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d4c6:	d017      	beq.n	801d4f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d4c8:	1e5a      	subs	r2, r3, #1
 801d4ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d4cc:	fb04 0402 	mla	r4, r4, r2, r0
 801d4d0:	1424      	asrs	r4, r4, #16
 801d4d2:	d409      	bmi.n	801d4e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d4d4:	42bc      	cmp	r4, r7
 801d4d6:	da07      	bge.n	801d4e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d4d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d4da:	fb04 1202 	mla	r2, r4, r2, r1
 801d4de:	1412      	asrs	r2, r2, #16
 801d4e0:	d402      	bmi.n	801d4e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d4e2:	42b2      	cmp	r2, r6
 801d4e4:	f2c0 80bf 	blt.w	801d666 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d4e8:	2700      	movs	r7, #0
 801d4ea:	19da      	adds	r2, r3, r7
 801d4ec:	2a00      	cmp	r2, #0
 801d4ee:	dc3e      	bgt.n	801d56e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d4f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4f4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801d4f8:	f1bb 0f00 	cmp.w	fp, #0
 801d4fc:	f340 8120 	ble.w	801d740 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801d500:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d506:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d50a:	f1bb 0b01 	subs.w	fp, fp, #1
 801d50e:	eeb0 6a62 	vmov.f32	s12, s5
 801d512:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d516:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d51a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d51e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d522:	eeb0 6a43 	vmov.f32	s12, s6
 801d526:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d52a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d52e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d532:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d536:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d53a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d53e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d542:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d546:	ee12 2a90 	vmov	r2, s5
 801d54a:	eef0 2a47 	vmov.f32	s5, s14
 801d54e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d552:	ee13 2a10 	vmov	r2, s6
 801d556:	9313      	str	r3, [sp, #76]	; 0x4c
 801d558:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d55a:	eeb0 3a67 	vmov.f32	s6, s15
 801d55e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d562:	9a03      	ldr	r2, [sp, #12]
 801d564:	9314      	str	r3, [sp, #80]	; 0x50
 801d566:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d568:	bf08      	it	eq
 801d56a:	4613      	moveq	r3, r2
 801d56c:	e789      	b.n	801d482 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d56e:	1406      	asrs	r6, r0, #16
 801d570:	d42d      	bmi.n	801d5ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d572:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801d576:	42b4      	cmp	r4, r6
 801d578:	dd29      	ble.n	801d5ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d57a:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801d57e:	d426      	bmi.n	801d5ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d580:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801d584:	4562      	cmp	r2, ip
 801d586:	dd22      	ble.n	801d5ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d588:	b224      	sxth	r4, r4
 801d58a:	9a01      	ldr	r2, [sp, #4]
 801d58c:	fb0c 6404 	mla	r4, ip, r4, r6
 801d590:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801d594:	0e22      	lsrs	r2, r4, #24
 801d596:	d01a      	beq.n	801d5ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d598:	9e04      	ldr	r6, [sp, #16]
 801d59a:	4372      	muls	r2, r6
 801d59c:	1c56      	adds	r6, r2, #1
 801d59e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d5a2:	0a26      	lsrs	r6, r4, #8
 801d5a4:	1212      	asrs	r2, r2, #8
 801d5a6:	9605      	str	r6, [sp, #20]
 801d5a8:	2aff      	cmp	r2, #255	; 0xff
 801d5aa:	d116      	bne.n	801d5da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801d5ac:	f06f 0201 	mvn.w	r2, #1
 801d5b0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801d5b4:	fb02 fc07 	mul.w	ip, r2, r7
 801d5b8:	0962      	lsrs	r2, r4, #5
 801d5ba:	f026 0607 	bic.w	r6, r6, #7
 801d5be:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d5c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d5c6:	4316      	orrs	r6, r2
 801d5c8:	4326      	orrs	r6, r4
 801d5ca:	f825 600c 	strh.w	r6, [r5, ip]
 801d5ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d5d0:	3f01      	subs	r7, #1
 801d5d2:	4410      	add	r0, r2
 801d5d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d5d6:	4411      	add	r1, r2
 801d5d8:	e787      	b.n	801d4ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d5da:	f06f 0601 	mvn.w	r6, #1
 801d5de:	fa1f fa82 	uxth.w	sl, r2
 801d5e2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801d5e6:	43d2      	mvns	r2, r2
 801d5e8:	437e      	muls	r6, r7
 801d5ea:	b2e4      	uxtb	r4, r4
 801d5ec:	fb1c fc0a 	smulbb	ip, ip, sl
 801d5f0:	b2d2      	uxtb	r2, r2
 801d5f2:	f835 8006 	ldrh.w	r8, [r5, r6]
 801d5f6:	fb14 f40a 	smulbb	r4, r4, sl
 801d5fa:	9602      	str	r6, [sp, #8]
 801d5fc:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801d600:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801d604:	fb16 f60a 	smulbb	r6, r6, sl
 801d608:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d60c:	fb0e ce02 	mla	lr, lr, r2, ip
 801d610:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801d614:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d618:	fa1f fe8e 	uxth.w	lr, lr
 801d61c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d620:	fa5f f888 	uxtb.w	r8, r8
 801d624:	fb0c 6c02 	mla	ip, ip, r2, r6
 801d628:	fb08 4402 	mla	r4, r8, r2, r4
 801d62c:	f10e 0201 	add.w	r2, lr, #1
 801d630:	fa1f fc8c 	uxth.w	ip, ip
 801d634:	b2a4      	uxth	r4, r4
 801d636:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d63a:	9a02      	ldr	r2, [sp, #8]
 801d63c:	1c66      	adds	r6, r4, #1
 801d63e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801d642:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d646:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d64a:	ea46 0e0e 	orr.w	lr, r6, lr
 801d64e:	f10c 0601 	add.w	r6, ip, #1
 801d652:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801d656:	0976      	lsrs	r6, r6, #5
 801d658:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d65c:	ea4e 0e06 	orr.w	lr, lr, r6
 801d660:	f825 e002 	strh.w	lr, [r5, r2]
 801d664:	e7b3      	b.n	801d5ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d666:	f04f 0800 	mov.w	r8, #0
 801d66a:	eba3 0208 	sub.w	r2, r3, r8
 801d66e:	2a00      	cmp	r2, #0
 801d670:	f77f af3e 	ble.w	801d4f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d674:	1404      	asrs	r4, r0, #16
 801d676:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801d67a:	140a      	asrs	r2, r1, #16
 801d67c:	fb06 4202 	mla	r2, r6, r2, r4
 801d680:	9c01      	ldr	r4, [sp, #4]
 801d682:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801d686:	0e22      	lsrs	r2, r4, #24
 801d688:	d015      	beq.n	801d6b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801d68a:	9e04      	ldr	r6, [sp, #16]
 801d68c:	4372      	muls	r2, r6
 801d68e:	1c56      	adds	r6, r2, #1
 801d690:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d694:	0a26      	lsrs	r6, r4, #8
 801d696:	1212      	asrs	r2, r2, #8
 801d698:	2aff      	cmp	r2, #255	; 0xff
 801d69a:	d113      	bne.n	801d6c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801d69c:	0962      	lsrs	r2, r4, #5
 801d69e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801d6a2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d6a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d6aa:	f026 0607 	bic.w	r6, r6, #7
 801d6ae:	4316      	orrs	r6, r2
 801d6b0:	4326      	orrs	r6, r4
 801d6b2:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801d6b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d6b8:	f108 0801 	add.w	r8, r8, #1
 801d6bc:	4410      	add	r0, r2
 801d6be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d6c0:	4411      	add	r1, r2
 801d6c2:	e7d2      	b.n	801d66a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801d6c4:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801d6c8:	fa1f fa82 	uxth.w	sl, r2
 801d6cc:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801d6d0:	43d2      	mvns	r2, r2
 801d6d2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d6d6:	fb17 f70a 	smulbb	r7, r7, sl
 801d6da:	b2d2      	uxtb	r2, r2
 801d6dc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d6e0:	b2e4      	uxtb	r4, r4
 801d6e2:	b2f6      	uxtb	r6, r6
 801d6e4:	fb0c 7c02 	mla	ip, ip, r2, r7
 801d6e8:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d6ec:	fb14 f40a 	smulbb	r4, r4, sl
 801d6f0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d6f4:	fa1f fc8c 	uxth.w	ip, ip
 801d6f8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d6fc:	fb16 f60a 	smulbb	r6, r6, sl
 801d700:	fa5f fe8e 	uxtb.w	lr, lr
 801d704:	fb0e 4402 	mla	r4, lr, r2, r4
 801d708:	fb07 6702 	mla	r7, r7, r2, r6
 801d70c:	f10c 0201 	add.w	r2, ip, #1
 801d710:	b2a4      	uxth	r4, r4
 801d712:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d716:	1c66      	adds	r6, r4, #1
 801d718:	b2bf      	uxth	r7, r7
 801d71a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d71e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d722:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d726:	ea46 0c0c 	orr.w	ip, r6, ip
 801d72a:	1c7e      	adds	r6, r7, #1
 801d72c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d730:	0976      	lsrs	r6, r6, #5
 801d732:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d736:	ea4c 0c06 	orr.w	ip, ip, r6
 801d73a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801d73e:	e7ba      	b.n	801d6b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801d740:	b007      	add	sp, #28
 801d742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d748 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d74c:	b085      	sub	sp, #20
 801d74e:	468b      	mov	fp, r1
 801d750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d754:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d756:	9203      	str	r2, [sp, #12]
 801d758:	6841      	ldr	r1, [r0, #4]
 801d75a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801d75e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d762:	fb01 2404 	mla	r4, r1, r4, r2
 801d766:	6802      	ldr	r2, [r0, #0]
 801d768:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d76c:	f8d8 2000 	ldr.w	r2, [r8]
 801d770:	9201      	str	r2, [sp, #4]
 801d772:	f1bb 0f00 	cmp.w	fp, #0
 801d776:	dc03      	bgt.n	801d780 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d778:	9a03      	ldr	r2, [sp, #12]
 801d77a:	2a00      	cmp	r2, #0
 801d77c:	f340 814f 	ble.w	801da1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801d780:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d782:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d786:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d78a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d78c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d790:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d794:	2b00      	cmp	r3, #0
 801d796:	dd0e      	ble.n	801d7b6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d798:	1408      	asrs	r0, r1, #16
 801d79a:	d405      	bmi.n	801d7a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d79c:	42b8      	cmp	r0, r7
 801d79e:	da03      	bge.n	801d7a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d7a0:	1410      	asrs	r0, r2, #16
 801d7a2:	d401      	bmi.n	801d7a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d7a4:	42b0      	cmp	r0, r6
 801d7a6:	db07      	blt.n	801d7b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d7a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d7aa:	3b01      	subs	r3, #1
 801d7ac:	3402      	adds	r4, #2
 801d7ae:	4401      	add	r1, r0
 801d7b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d7b2:	4402      	add	r2, r0
 801d7b4:	e7ee      	b.n	801d794 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d7b6:	d017      	beq.n	801d7e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d7b8:	1e58      	subs	r0, r3, #1
 801d7ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d7bc:	fb05 1500 	mla	r5, r5, r0, r1
 801d7c0:	142d      	asrs	r5, r5, #16
 801d7c2:	d409      	bmi.n	801d7d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d7c4:	42bd      	cmp	r5, r7
 801d7c6:	da07      	bge.n	801d7d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d7c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d7ca:	fb05 2000 	mla	r0, r5, r0, r2
 801d7ce:	1400      	asrs	r0, r0, #16
 801d7d0:	d402      	bmi.n	801d7d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d7d2:	42b0      	cmp	r0, r6
 801d7d4:	f2c0 80ba 	blt.w	801d94c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801d7d8:	2600      	movs	r6, #0
 801d7da:	1998      	adds	r0, r3, r6
 801d7dc:	2800      	cmp	r0, #0
 801d7de:	dc3e      	bgt.n	801d85e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d7e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d7e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d7e8:	f1bb 0f00 	cmp.w	fp, #0
 801d7ec:	f340 8117 	ble.w	801da1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801d7f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d7f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d7fa:	f1bb 0b01 	subs.w	fp, fp, #1
 801d7fe:	eeb0 6a62 	vmov.f32	s12, s5
 801d802:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d806:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d80a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d80e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d812:	eeb0 6a43 	vmov.f32	s12, s6
 801d816:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d81a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d81e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d822:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d826:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d82a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d82e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d832:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d836:	ee12 2a90 	vmov	r2, s5
 801d83a:	eef0 2a47 	vmov.f32	s5, s14
 801d83e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d842:	ee13 2a10 	vmov	r2, s6
 801d846:	9311      	str	r3, [sp, #68]	; 0x44
 801d848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d84a:	eeb0 3a67 	vmov.f32	s6, s15
 801d84e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d852:	9a03      	ldr	r2, [sp, #12]
 801d854:	9312      	str	r3, [sp, #72]	; 0x48
 801d856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d858:	bf08      	it	eq
 801d85a:	4613      	moveq	r3, r2
 801d85c:	e789      	b.n	801d772 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801d85e:	140f      	asrs	r7, r1, #16
 801d860:	d424      	bmi.n	801d8ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d862:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801d866:	42bd      	cmp	r5, r7
 801d868:	dd20      	ble.n	801d8ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d86a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d86e:	d41d      	bmi.n	801d8ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d870:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801d874:	4560      	cmp	r0, ip
 801d876:	dd19      	ble.n	801d8ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d878:	b22d      	sxth	r5, r5
 801d87a:	9801      	ldr	r0, [sp, #4]
 801d87c:	fb0c 7505 	mla	r5, ip, r5, r7
 801d880:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801d884:	0e07      	lsrs	r7, r0, #24
 801d886:	2fff      	cmp	r7, #255	; 0xff
 801d888:	d116      	bne.n	801d8b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d88a:	f06f 0501 	mvn.w	r5, #1
 801d88e:	fb05 f706 	mul.w	r7, r5, r6
 801d892:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801d896:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801d89a:	0945      	lsrs	r5, r0, #5
 801d89c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801d8a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d8a4:	ea4c 0505 	orr.w	r5, ip, r5
 801d8a8:	4305      	orrs	r5, r0
 801d8aa:	53e5      	strh	r5, [r4, r7]
 801d8ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d8ae:	3e01      	subs	r6, #1
 801d8b0:	4401      	add	r1, r0
 801d8b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d8b4:	4402      	add	r2, r0
 801d8b6:	e790      	b.n	801d7da <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d8b8:	b2fd      	uxtb	r5, r7
 801d8ba:	2f00      	cmp	r7, #0
 801d8bc:	d0f6      	beq.n	801d8ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d8be:	f06f 0701 	mvn.w	r7, #1
 801d8c2:	fa1f f985 	uxth.w	r9, r5
 801d8c6:	43ed      	mvns	r5, r5
 801d8c8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d8cc:	4377      	muls	r7, r6
 801d8ce:	fb1a fa09 	smulbb	sl, sl, r9
 801d8d2:	b2ed      	uxtb	r5, r5
 801d8d4:	f834 e007 	ldrh.w	lr, [r4, r7]
 801d8d8:	9702      	str	r7, [sp, #8]
 801d8da:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801d8de:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d8e2:	fb17 f709 	smulbb	r7, r7, r9
 801d8e6:	b2c0      	uxtb	r0, r0
 801d8e8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d8ec:	fb10 f009 	smulbb	r0, r0, r9
 801d8f0:	fb0c 7c05 	mla	ip, ip, r5, r7
 801d8f4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d8f8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d8fc:	fa1f fc8c 	uxth.w	ip, ip
 801d900:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d904:	fa5f fe8e 	uxtb.w	lr, lr
 801d908:	fb07 a705 	mla	r7, r7, r5, sl
 801d90c:	fb0e 0005 	mla	r0, lr, r5, r0
 801d910:	f10c 0501 	add.w	r5, ip, #1
 801d914:	b2bf      	uxth	r7, r7
 801d916:	b280      	uxth	r0, r0
 801d918:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d91c:	f100 0a01 	add.w	sl, r0, #1
 801d920:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d924:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801d928:	9802      	ldr	r0, [sp, #8]
 801d92a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d92e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d932:	f107 0a01 	add.w	sl, r7, #1
 801d936:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d93a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d93e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d942:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d946:	f824 c000 	strh.w	ip, [r4, r0]
 801d94a:	e7af      	b.n	801d8ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d94c:	f04f 0e00 	mov.w	lr, #0
 801d950:	eba3 000e 	sub.w	r0, r3, lr
 801d954:	2800      	cmp	r0, #0
 801d956:	f77f af43 	ble.w	801d7e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d95a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801d95e:	140d      	asrs	r5, r1, #16
 801d960:	1410      	asrs	r0, r2, #16
 801d962:	fb06 5000 	mla	r0, r6, r0, r5
 801d966:	9d01      	ldr	r5, [sp, #4]
 801d968:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801d96c:	0e2e      	lsrs	r6, r5, #24
 801d96e:	2eff      	cmp	r6, #255	; 0xff
 801d970:	d112      	bne.n	801d998 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801d972:	482c      	ldr	r0, [pc, #176]	; (801da24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801d974:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801d978:	0968      	lsrs	r0, r5, #5
 801d97a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d97e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d982:	4330      	orrs	r0, r6
 801d984:	4328      	orrs	r0, r5
 801d986:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801d98a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d98c:	f10e 0e01 	add.w	lr, lr, #1
 801d990:	4401      	add	r1, r0
 801d992:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d994:	4402      	add	r2, r0
 801d996:	e7db      	b.n	801d950 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d998:	b2f0      	uxtb	r0, r6
 801d99a:	2e00      	cmp	r6, #0
 801d99c:	d0f5      	beq.n	801d98a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801d99e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801d9a2:	fa1f f980 	uxth.w	r9, r0
 801d9a6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d9aa:	43c0      	mvns	r0, r0
 801d9ac:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d9b0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d9b4:	fb16 f609 	smulbb	r6, r6, r9
 801d9b8:	b2c0      	uxtb	r0, r0
 801d9ba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d9be:	b2ed      	uxtb	r5, r5
 801d9c0:	fb1a fa09 	smulbb	sl, sl, r9
 801d9c4:	fb07 6700 	mla	r7, r7, r0, r6
 801d9c8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801d9cc:	fb15 f509 	smulbb	r5, r5, r9
 801d9d0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d9d4:	b2bf      	uxth	r7, r7
 801d9d6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d9da:	fa5f fc8c 	uxtb.w	ip, ip
 801d9de:	fb06 a600 	mla	r6, r6, r0, sl
 801d9e2:	fb0c 5500 	mla	r5, ip, r0, r5
 801d9e6:	1c78      	adds	r0, r7, #1
 801d9e8:	b2b6      	uxth	r6, r6
 801d9ea:	b2ad      	uxth	r5, r5
 801d9ec:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801d9f0:	f105 0a01 	add.w	sl, r5, #1
 801d9f4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d9f8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d9fc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801da00:	ea4a 0707 	orr.w	r7, sl, r7
 801da04:	f106 0a01 	add.w	sl, r6, #1
 801da08:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801da0c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801da10:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801da14:	ea47 070a 	orr.w	r7, r7, sl
 801da18:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801da1c:	e7b5      	b.n	801d98a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801da1e:	b005      	add	sp, #20
 801da20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da24:	fffff800 	.word	0xfffff800

0801da28 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da2c:	b087      	sub	sp, #28
 801da2e:	468b      	mov	fp, r1
 801da30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801da34:	9815      	ldr	r0, [sp, #84]	; 0x54
 801da36:	9203      	str	r2, [sp, #12]
 801da38:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801da3c:	6841      	ldr	r1, [r0, #4]
 801da3e:	9204      	str	r2, [sp, #16]
 801da40:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801da44:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801da48:	fb01 2404 	mla	r4, r1, r4, r2
 801da4c:	6802      	ldr	r2, [r0, #0]
 801da4e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801da52:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801da56:	3201      	adds	r2, #1
 801da58:	f022 0201 	bic.w	r2, r2, #1
 801da5c:	9200      	str	r2, [sp, #0]
 801da5e:	f8d9 2000 	ldr.w	r2, [r9]
 801da62:	9201      	str	r2, [sp, #4]
 801da64:	f1bb 0f00 	cmp.w	fp, #0
 801da68:	dc03      	bgt.n	801da72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801da6a:	9a03      	ldr	r2, [sp, #12]
 801da6c:	2a00      	cmp	r2, #0
 801da6e:	f340 816a 	ble.w	801dd46 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801da72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da74:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801da78:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801da7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801da7e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801da82:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801da86:	2b00      	cmp	r3, #0
 801da88:	dd0e      	ble.n	801daa8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801da8a:	1402      	asrs	r2, r0, #16
 801da8c:	d405      	bmi.n	801da9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801da8e:	42ba      	cmp	r2, r7
 801da90:	da03      	bge.n	801da9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801da92:	140a      	asrs	r2, r1, #16
 801da94:	d401      	bmi.n	801da9a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801da96:	42b2      	cmp	r2, r6
 801da98:	db07      	blt.n	801daaa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801da9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801da9c:	3b01      	subs	r3, #1
 801da9e:	3402      	adds	r4, #2
 801daa0:	4410      	add	r0, r2
 801daa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801daa4:	4411      	add	r1, r2
 801daa6:	e7ee      	b.n	801da86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801daa8:	d017      	beq.n	801dada <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801daaa:	1e5a      	subs	r2, r3, #1
 801daac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801daae:	fb05 0502 	mla	r5, r5, r2, r0
 801dab2:	142d      	asrs	r5, r5, #16
 801dab4:	d409      	bmi.n	801daca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dab6:	42bd      	cmp	r5, r7
 801dab8:	da07      	bge.n	801daca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801daba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801dabc:	fb05 1202 	mla	r2, r5, r2, r1
 801dac0:	1412      	asrs	r2, r2, #16
 801dac2:	d402      	bmi.n	801daca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dac4:	42b2      	cmp	r2, r6
 801dac6:	f2c0 80c8 	blt.w	801dc5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801daca:	2700      	movs	r7, #0
 801dacc:	19da      	adds	r2, r3, r7
 801dace:	2a00      	cmp	r2, #0
 801dad0:	dc3e      	bgt.n	801db50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801dad2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dad6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dada:	f1bb 0f00 	cmp.w	fp, #0
 801dade:	f340 8132 	ble.w	801dd46 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801dae2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dae6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dae8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801daec:	f1bb 0b01 	subs.w	fp, fp, #1
 801daf0:	eeb0 6a62 	vmov.f32	s12, s5
 801daf4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801daf8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dafc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db00:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801db04:	eeb0 6a43 	vmov.f32	s12, s6
 801db08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db0c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801db10:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db14:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db18:	ee77 2a62 	vsub.f32	s5, s14, s5
 801db1c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db20:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db24:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db28:	ee12 2a90 	vmov	r2, s5
 801db2c:	eef0 2a47 	vmov.f32	s5, s14
 801db30:	fb92 f3f3 	sdiv	r3, r2, r3
 801db34:	ee13 2a10 	vmov	r2, s6
 801db38:	9313      	str	r3, [sp, #76]	; 0x4c
 801db3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db3c:	eeb0 3a67 	vmov.f32	s6, s15
 801db40:	fb92 f3f3 	sdiv	r3, r2, r3
 801db44:	9a03      	ldr	r2, [sp, #12]
 801db46:	9314      	str	r3, [sp, #80]	; 0x50
 801db48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db4a:	bf08      	it	eq
 801db4c:	4613      	moveq	r3, r2
 801db4e:	e789      	b.n	801da64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801db50:	1405      	asrs	r5, r0, #16
 801db52:	d436      	bmi.n	801dbc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801db54:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801db58:	42aa      	cmp	r2, r5
 801db5a:	dd32      	ble.n	801dbc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801db5c:	140e      	asrs	r6, r1, #16
 801db5e:	d430      	bmi.n	801dbc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801db60:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801db64:	42b2      	cmp	r2, r6
 801db66:	dd2c      	ble.n	801dbc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801db68:	9a00      	ldr	r2, [sp, #0]
 801db6a:	fb06 5502 	mla	r5, r6, r2, r5
 801db6e:	9e01      	ldr	r6, [sp, #4]
 801db70:	086a      	lsrs	r2, r5, #1
 801db72:	5cb2      	ldrb	r2, [r6, r2]
 801db74:	07ee      	lsls	r6, r5, #31
 801db76:	bf54      	ite	pl
 801db78:	f002 020f 	andpl.w	r2, r2, #15
 801db7c:	1112      	asrmi	r2, r2, #4
 801db7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801db82:	b2d2      	uxtb	r2, r2
 801db84:	b1ea      	cbz	r2, 801dbc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801db86:	9d04      	ldr	r5, [sp, #16]
 801db88:	436a      	muls	r2, r5
 801db8a:	1c55      	adds	r5, r2, #1
 801db8c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801db90:	4d6e      	ldr	r5, [pc, #440]	; (801dd4c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801db92:	1212      	asrs	r2, r2, #8
 801db94:	682d      	ldr	r5, [r5, #0]
 801db96:	2aff      	cmp	r2, #255	; 0xff
 801db98:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801db9c:	9605      	str	r6, [sp, #20]
 801db9e:	d116      	bne.n	801dbce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801dba0:	f06f 0201 	mvn.w	r2, #1
 801dba4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801dba8:	fb02 fc07 	mul.w	ip, r2, r7
 801dbac:	096a      	lsrs	r2, r5, #5
 801dbae:	f026 0607 	bic.w	r6, r6, #7
 801dbb2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801dbb6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dbba:	4316      	orrs	r6, r2
 801dbbc:	432e      	orrs	r6, r5
 801dbbe:	f824 600c 	strh.w	r6, [r4, ip]
 801dbc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dbc4:	3f01      	subs	r7, #1
 801dbc6:	4410      	add	r0, r2
 801dbc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dbca:	4411      	add	r1, r2
 801dbcc:	e77e      	b.n	801dacc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801dbce:	f06f 0601 	mvn.w	r6, #1
 801dbd2:	fa1f fa82 	uxth.w	sl, r2
 801dbd6:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801dbda:	43d2      	mvns	r2, r2
 801dbdc:	437e      	muls	r6, r7
 801dbde:	b2ed      	uxtb	r5, r5
 801dbe0:	fb1c fc0a 	smulbb	ip, ip, sl
 801dbe4:	b2d2      	uxtb	r2, r2
 801dbe6:	f834 8006 	ldrh.w	r8, [r4, r6]
 801dbea:	fb15 f50a 	smulbb	r5, r5, sl
 801dbee:	9602      	str	r6, [sp, #8]
 801dbf0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801dbf4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801dbf8:	fb16 f60a 	smulbb	r6, r6, sl
 801dbfc:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801dc00:	fb0e ce02 	mla	lr, lr, r2, ip
 801dc04:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801dc08:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801dc0c:	fa1f fe8e 	uxth.w	lr, lr
 801dc10:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801dc14:	fa5f f888 	uxtb.w	r8, r8
 801dc18:	fb0c 6c02 	mla	ip, ip, r2, r6
 801dc1c:	fb08 5502 	mla	r5, r8, r2, r5
 801dc20:	f10e 0201 	add.w	r2, lr, #1
 801dc24:	fa1f fc8c 	uxth.w	ip, ip
 801dc28:	b2ad      	uxth	r5, r5
 801dc2a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801dc2e:	9a02      	ldr	r2, [sp, #8]
 801dc30:	1c6e      	adds	r6, r5, #1
 801dc32:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801dc36:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801dc3a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801dc3e:	ea46 0e0e 	orr.w	lr, r6, lr
 801dc42:	f10c 0601 	add.w	r6, ip, #1
 801dc46:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801dc4a:	0976      	lsrs	r6, r6, #5
 801dc4c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801dc50:	ea4e 0e06 	orr.w	lr, lr, r6
 801dc54:	f824 e002 	strh.w	lr, [r4, r2]
 801dc58:	e7b3      	b.n	801dbc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801dc5a:	f04f 0800 	mov.w	r8, #0
 801dc5e:	eba3 0208 	sub.w	r2, r3, r8
 801dc62:	2a00      	cmp	r2, #0
 801dc64:	f77f af35 	ble.w	801dad2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801dc68:	1402      	asrs	r2, r0, #16
 801dc6a:	9e00      	ldr	r6, [sp, #0]
 801dc6c:	140d      	asrs	r5, r1, #16
 801dc6e:	fb06 2505 	mla	r5, r6, r5, r2
 801dc72:	9e01      	ldr	r6, [sp, #4]
 801dc74:	086a      	lsrs	r2, r5, #1
 801dc76:	07ed      	lsls	r5, r5, #31
 801dc78:	5cb2      	ldrb	r2, [r6, r2]
 801dc7a:	bf54      	ite	pl
 801dc7c:	f002 020f 	andpl.w	r2, r2, #15
 801dc80:	1112      	asrmi	r2, r2, #4
 801dc82:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801dc86:	b2d2      	uxtb	r2, r2
 801dc88:	b1c2      	cbz	r2, 801dcbc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801dc8a:	9d04      	ldr	r5, [sp, #16]
 801dc8c:	436a      	muls	r2, r5
 801dc8e:	1c55      	adds	r5, r2, #1
 801dc90:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801dc94:	4d2d      	ldr	r5, [pc, #180]	; (801dd4c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801dc96:	1212      	asrs	r2, r2, #8
 801dc98:	682e      	ldr	r6, [r5, #0]
 801dc9a:	2aff      	cmp	r2, #255	; 0xff
 801dc9c:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801dca0:	d113      	bne.n	801dcca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801dca2:	0972      	lsrs	r2, r6, #5
 801dca4:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801dca8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801dcac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dcb0:	f025 0507 	bic.w	r5, r5, #7
 801dcb4:	4315      	orrs	r5, r2
 801dcb6:	4335      	orrs	r5, r6
 801dcb8:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801dcbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dcbe:	f108 0801 	add.w	r8, r8, #1
 801dcc2:	4410      	add	r0, r2
 801dcc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dcc6:	4411      	add	r1, r2
 801dcc8:	e7c9      	b.n	801dc5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801dcca:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801dcce:	fa1f fa82 	uxth.w	sl, r2
 801dcd2:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801dcd6:	43d2      	mvns	r2, r2
 801dcd8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801dcdc:	fb17 f70a 	smulbb	r7, r7, sl
 801dce0:	b2d2      	uxtb	r2, r2
 801dce2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dce6:	b2f6      	uxtb	r6, r6
 801dce8:	b2ed      	uxtb	r5, r5
 801dcea:	fb0c 7c02 	mla	ip, ip, r2, r7
 801dcee:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801dcf2:	fb16 f60a 	smulbb	r6, r6, sl
 801dcf6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801dcfa:	fa1f fc8c 	uxth.w	ip, ip
 801dcfe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801dd02:	fb15 f50a 	smulbb	r5, r5, sl
 801dd06:	fa5f fe8e 	uxtb.w	lr, lr
 801dd0a:	fb0e 6602 	mla	r6, lr, r2, r6
 801dd0e:	fb07 5702 	mla	r7, r7, r2, r5
 801dd12:	f10c 0201 	add.w	r2, ip, #1
 801dd16:	b2b6      	uxth	r6, r6
 801dd18:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801dd1c:	1c75      	adds	r5, r6, #1
 801dd1e:	b2bf      	uxth	r7, r7
 801dd20:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801dd24:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801dd28:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801dd2c:	ea45 0c0c 	orr.w	ip, r5, ip
 801dd30:	1c7d      	adds	r5, r7, #1
 801dd32:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801dd36:	096d      	lsrs	r5, r5, #5
 801dd38:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dd3c:	ea4c 0c05 	orr.w	ip, ip, r5
 801dd40:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801dd44:	e7ba      	b.n	801dcbc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801dd46:	b007      	add	sp, #28
 801dd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd4c:	2400aef4 	.word	0x2400aef4

0801dd50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd54:	b087      	sub	sp, #28
 801dd56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dd5a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801e064 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801dd5e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dd60:	9101      	str	r1, [sp, #4]
 801dd62:	9205      	str	r2, [sp, #20]
 801dd64:	6841      	ldr	r1, [r0, #4]
 801dd66:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801dd6a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801dd6e:	fb01 2404 	mla	r4, r1, r4, r2
 801dd72:	6802      	ldr	r2, [r0, #0]
 801dd74:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dd78:	f8db 2008 	ldr.w	r2, [fp, #8]
 801dd7c:	3201      	adds	r2, #1
 801dd7e:	f022 0201 	bic.w	r2, r2, #1
 801dd82:	9202      	str	r2, [sp, #8]
 801dd84:	f8db 2000 	ldr.w	r2, [fp]
 801dd88:	9203      	str	r2, [sp, #12]
 801dd8a:	9a01      	ldr	r2, [sp, #4]
 801dd8c:	2a00      	cmp	r2, #0
 801dd8e:	dc03      	bgt.n	801dd98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801dd90:	9a05      	ldr	r2, [sp, #20]
 801dd92:	2a00      	cmp	r2, #0
 801dd94:	f340 8162 	ble.w	801e05c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801dd98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dd9a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801dd9e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dda2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dda4:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801dda8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ddac:	2b00      	cmp	r3, #0
 801ddae:	dd0e      	ble.n	801ddce <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ddb0:	1402      	asrs	r2, r0, #16
 801ddb2:	d405      	bmi.n	801ddc0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ddb4:	42ba      	cmp	r2, r7
 801ddb6:	da03      	bge.n	801ddc0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ddb8:	140a      	asrs	r2, r1, #16
 801ddba:	d401      	bmi.n	801ddc0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ddbc:	42b2      	cmp	r2, r6
 801ddbe:	db07      	blt.n	801ddd0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ddc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ddc2:	3b01      	subs	r3, #1
 801ddc4:	3402      	adds	r4, #2
 801ddc6:	4410      	add	r0, r2
 801ddc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ddca:	4411      	add	r1, r2
 801ddcc:	e7ee      	b.n	801ddac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ddce:	d017      	beq.n	801de00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ddd0:	1e5a      	subs	r2, r3, #1
 801ddd2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ddd4:	fb05 0502 	mla	r5, r5, r2, r0
 801ddd8:	142d      	asrs	r5, r5, #16
 801ddda:	d409      	bmi.n	801ddf0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dddc:	42bd      	cmp	r5, r7
 801ddde:	da07      	bge.n	801ddf0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dde0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801dde2:	fb05 1202 	mla	r2, r5, r2, r1
 801dde6:	1412      	asrs	r2, r2, #16
 801dde8:	d402      	bmi.n	801ddf0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ddea:	42b2      	cmp	r2, r6
 801ddec:	f2c0 80c3 	blt.w	801df76 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801ddf0:	2500      	movs	r5, #0
 801ddf2:	195a      	adds	r2, r3, r5
 801ddf4:	2a00      	cmp	r2, #0
 801ddf6:	dc3f      	bgt.n	801de78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ddf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ddfc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801de00:	9b01      	ldr	r3, [sp, #4]
 801de02:	2b00      	cmp	r3, #0
 801de04:	f340 812a 	ble.w	801e05c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801de08:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de12:	eeb0 6a62 	vmov.f32	s12, s5
 801de16:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801de1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de22:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801de26:	eeb0 6a43 	vmov.f32	s12, s6
 801de2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de2e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801de32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de36:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de4a:	ee12 2a90 	vmov	r2, s5
 801de4e:	eef0 2a47 	vmov.f32	s5, s14
 801de52:	fb92 f3f3 	sdiv	r3, r2, r3
 801de56:	ee13 2a10 	vmov	r2, s6
 801de5a:	9313      	str	r3, [sp, #76]	; 0x4c
 801de5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de5e:	eeb0 3a67 	vmov.f32	s6, s15
 801de62:	fb92 f3f3 	sdiv	r3, r2, r3
 801de66:	9314      	str	r3, [sp, #80]	; 0x50
 801de68:	9b01      	ldr	r3, [sp, #4]
 801de6a:	9a05      	ldr	r2, [sp, #20]
 801de6c:	3b01      	subs	r3, #1
 801de6e:	9301      	str	r3, [sp, #4]
 801de70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de72:	bf08      	it	eq
 801de74:	4613      	moveq	r3, r2
 801de76:	e788      	b.n	801dd8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801de78:	1406      	asrs	r6, r0, #16
 801de7a:	d42c      	bmi.n	801ded6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801de7c:	f8db 2008 	ldr.w	r2, [fp, #8]
 801de80:	42b2      	cmp	r2, r6
 801de82:	dd28      	ble.n	801ded6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801de84:	140f      	asrs	r7, r1, #16
 801de86:	d426      	bmi.n	801ded6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801de88:	f8db 200c 	ldr.w	r2, [fp, #12]
 801de8c:	42ba      	cmp	r2, r7
 801de8e:	dd22      	ble.n	801ded6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801de90:	9a02      	ldr	r2, [sp, #8]
 801de92:	fb07 6602 	mla	r6, r7, r2, r6
 801de96:	9f03      	ldr	r7, [sp, #12]
 801de98:	0872      	lsrs	r2, r6, #1
 801de9a:	07f6      	lsls	r6, r6, #31
 801de9c:	5cba      	ldrb	r2, [r7, r2]
 801de9e:	bf54      	ite	pl
 801dea0:	f002 020f 	andpl.w	r2, r2, #15
 801dea4:	1112      	asrmi	r2, r2, #4
 801dea6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801deaa:	b2d2      	uxtb	r2, r2
 801deac:	2aff      	cmp	r2, #255	; 0xff
 801deae:	d118      	bne.n	801dee2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801deb0:	f06f 0601 	mvn.w	r6, #1
 801deb4:	f8d8 2000 	ldr.w	r2, [r8]
 801deb8:	fb06 f705 	mul.w	r7, r6, r5
 801debc:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801dec0:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801dec4:	0956      	lsrs	r6, r2, #5
 801dec6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801deca:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801dece:	ea4c 0606 	orr.w	r6, ip, r6
 801ded2:	4316      	orrs	r6, r2
 801ded4:	53e6      	strh	r6, [r4, r7]
 801ded6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ded8:	3d01      	subs	r5, #1
 801deda:	4410      	add	r0, r2
 801dedc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dede:	4411      	add	r1, r2
 801dee0:	e787      	b.n	801ddf2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dee2:	2a00      	cmp	r2, #0
 801dee4:	d0f7      	beq.n	801ded6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801dee6:	f06f 0601 	mvn.w	r6, #1
 801deea:	f8d8 c000 	ldr.w	ip, [r8]
 801deee:	fa1f f982 	uxth.w	r9, r2
 801def2:	43d2      	mvns	r2, r2
 801def4:	436e      	muls	r6, r5
 801def6:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801defa:	b2d2      	uxtb	r2, r2
 801defc:	f834 e006 	ldrh.w	lr, [r4, r6]
 801df00:	fb1a fa09 	smulbb	sl, sl, r9
 801df04:	9604      	str	r6, [sp, #16]
 801df06:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801df0a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801df0e:	fb16 f609 	smulbb	r6, r6, r9
 801df12:	fa5f fc8c 	uxtb.w	ip, ip
 801df16:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801df1a:	fb1c fc09 	smulbb	ip, ip, r9
 801df1e:	fb07 6702 	mla	r7, r7, r2, r6
 801df22:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801df26:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801df2a:	b2bf      	uxth	r7, r7
 801df2c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801df30:	fa5f fe8e 	uxtb.w	lr, lr
 801df34:	fb06 a602 	mla	r6, r6, r2, sl
 801df38:	fb0e cc02 	mla	ip, lr, r2, ip
 801df3c:	1c7a      	adds	r2, r7, #1
 801df3e:	b2b6      	uxth	r6, r6
 801df40:	fa1f fc8c 	uxth.w	ip, ip
 801df44:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801df48:	9a04      	ldr	r2, [sp, #16]
 801df4a:	f10c 0a01 	add.w	sl, ip, #1
 801df4e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801df52:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801df56:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801df5a:	ea4a 0707 	orr.w	r7, sl, r7
 801df5e:	f106 0a01 	add.w	sl, r6, #1
 801df62:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801df66:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801df6a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801df6e:	ea47 070a 	orr.w	r7, r7, sl
 801df72:	52a7      	strh	r7, [r4, r2]
 801df74:	e7af      	b.n	801ded6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801df76:	f04f 0e00 	mov.w	lr, #0
 801df7a:	eba3 020e 	sub.w	r2, r3, lr
 801df7e:	2a00      	cmp	r2, #0
 801df80:	f77f af3a 	ble.w	801ddf8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801df84:	1402      	asrs	r2, r0, #16
 801df86:	9e02      	ldr	r6, [sp, #8]
 801df88:	140d      	asrs	r5, r1, #16
 801df8a:	fb06 2505 	mla	r5, r6, r5, r2
 801df8e:	9e03      	ldr	r6, [sp, #12]
 801df90:	086a      	lsrs	r2, r5, #1
 801df92:	07ed      	lsls	r5, r5, #31
 801df94:	5cb2      	ldrb	r2, [r6, r2]
 801df96:	bf54      	ite	pl
 801df98:	f002 020f 	andpl.w	r2, r2, #15
 801df9c:	1112      	asrmi	r2, r2, #4
 801df9e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801dfa2:	b2d2      	uxtb	r2, r2
 801dfa4:	2aff      	cmp	r2, #255	; 0xff
 801dfa6:	d115      	bne.n	801dfd4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801dfa8:	f8d8 5000 	ldr.w	r5, [r8]
 801dfac:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801dfb0:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801dfb4:	096a      	lsrs	r2, r5, #5
 801dfb6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801dfba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dfbe:	4332      	orrs	r2, r6
 801dfc0:	432a      	orrs	r2, r5
 801dfc2:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801dfc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dfc8:	f10e 0e01 	add.w	lr, lr, #1
 801dfcc:	4410      	add	r0, r2
 801dfce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dfd0:	4411      	add	r1, r2
 801dfd2:	e7d2      	b.n	801df7a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801dfd4:	2a00      	cmp	r2, #0
 801dfd6:	d0f6      	beq.n	801dfc6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801dfd8:	f8d8 7000 	ldr.w	r7, [r8]
 801dfdc:	fa1f f982 	uxth.w	r9, r2
 801dfe0:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801dfe4:	43d2      	mvns	r2, r2
 801dfe6:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801dfea:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801dfee:	ea4f 262c 	mov.w	r6, ip, asr #8
 801dff2:	fb15 f509 	smulbb	r5, r5, r9
 801dff6:	b2d2      	uxtb	r2, r2
 801dff8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801dffc:	b2ff      	uxtb	r7, r7
 801dffe:	fb1a fa09 	smulbb	sl, sl, r9
 801e002:	fb06 5602 	mla	r6, r6, r2, r5
 801e006:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e00a:	fb17 f709 	smulbb	r7, r7, r9
 801e00e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e012:	b2b6      	uxth	r6, r6
 801e014:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e018:	fa5f fc8c 	uxtb.w	ip, ip
 801e01c:	fb05 a502 	mla	r5, r5, r2, sl
 801e020:	fb0c 7702 	mla	r7, ip, r2, r7
 801e024:	1c72      	adds	r2, r6, #1
 801e026:	b2ad      	uxth	r5, r5
 801e028:	b2bf      	uxth	r7, r7
 801e02a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801e02e:	f107 0a01 	add.w	sl, r7, #1
 801e032:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e036:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e03a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e03e:	ea4a 0606 	orr.w	r6, sl, r6
 801e042:	f105 0a01 	add.w	sl, r5, #1
 801e046:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e04a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e04e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e052:	ea46 060a 	orr.w	r6, r6, sl
 801e056:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801e05a:	e7b4      	b.n	801dfc6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e05c:	b007      	add	sp, #28
 801e05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e062:	bf00      	nop
 801e064:	2400aef4 	.word	0x2400aef4

0801e068 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801e068:	4770      	bx	lr

0801e06a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801e06a:	4770      	bx	lr

0801e06c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801e06c:	4770      	bx	lr

0801e06e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801e06e:	4770      	bx	lr

0801e070 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e070:	4770      	bx	lr

0801e072 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e072:	4770      	bx	lr

0801e074 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e074:	4770      	bx	lr

0801e076 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e076:	4770      	bx	lr

0801e078 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e078:	4770      	bx	lr

0801e07a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801e07a:	4770      	bx	lr

0801e07c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e07c:	4770      	bx	lr

0801e07e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e07e:	4770      	bx	lr

0801e080 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e080:	4770      	bx	lr

0801e082 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801e082:	4770      	bx	lr

0801e084 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e084:	4770      	bx	lr

0801e086 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e086:	4770      	bx	lr

0801e088 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e088:	4770      	bx	lr

0801e08a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e08a:	4770      	bx	lr

0801e08c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e08c:	4770      	bx	lr

0801e08e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e08e:	4770      	bx	lr

0801e090 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e090:	4770      	bx	lr

0801e092 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e092:	4770      	bx	lr

0801e094 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e094:	4770      	bx	lr

0801e096 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e096:	4770      	bx	lr

0801e098 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e098:	4770      	bx	lr

0801e09a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801e09a:	4770      	bx	lr

0801e09c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e09c:	4770      	bx	lr

0801e09e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801e09e:	4770      	bx	lr

0801e0a0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801e0a0:	b508      	push	{r3, lr}
 801e0a2:	4b06      	ldr	r3, [pc, #24]	; (801e0bc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801e0a4:	8818      	ldrh	r0, [r3, #0]
 801e0a6:	b928      	cbnz	r0, 801e0b4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801e0a8:	4b05      	ldr	r3, [pc, #20]	; (801e0c0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801e0aa:	2150      	movs	r1, #80	; 0x50
 801e0ac:	4a05      	ldr	r2, [pc, #20]	; (801e0c4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801e0ae:	4806      	ldr	r0, [pc, #24]	; (801e0c8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801e0b0:	f009 fbd4 	bl	802785c <__assert_func>
 801e0b4:	0040      	lsls	r0, r0, #1
 801e0b6:	b280      	uxth	r0, r0
 801e0b8:	bd08      	pop	{r3, pc}
 801e0ba:	bf00      	nop
 801e0bc:	2400aee6 	.word	0x2400aee6
 801e0c0:	0802be2f 	.word	0x0802be2f
 801e0c4:	0802c428 	.word	0x0802c428
 801e0c8:	0802be71 	.word	0x0802be71

0801e0cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801e0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0d0:	b08b      	sub	sp, #44	; 0x2c
 801e0d2:	460f      	mov	r7, r1
 801e0d4:	4616      	mov	r6, r2
 801e0d6:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801e0da:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e0de:	f1bb 0f00 	cmp.w	fp, #0
 801e0e2:	d049      	beq.n	801e178 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801e0e4:	6810      	ldr	r0, [r2, #0]
 801e0e6:	ad06      	add	r5, sp, #24
 801e0e8:	6851      	ldr	r1, [r2, #4]
 801e0ea:	c503      	stmia	r5!, {r0, r1}
 801e0ec:	6818      	ldr	r0, [r3, #0]
 801e0ee:	ad08      	add	r5, sp, #32
 801e0f0:	6859      	ldr	r1, [r3, #4]
 801e0f2:	c503      	stmia	r5!, {r0, r1}
 801e0f4:	a806      	add	r0, sp, #24
 801e0f6:	f7fa fd13 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0fa:	4631      	mov	r1, r6
 801e0fc:	a808      	add	r0, sp, #32
 801e0fe:	f7fa fd37 	bl	8018b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e102:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e106:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e10a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e10e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801e112:	fb16 2103 	smlabb	r1, r6, r3, r2
 801e116:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801e11a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801e11e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e122:	4f5f      	ldr	r7, [pc, #380]	; (801e2a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801e124:	440a      	add	r2, r1
 801e126:	6838      	ldr	r0, [r7, #0]
 801e128:	46b9      	mov	r9, r7
 801e12a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e12e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e132:	4413      	add	r3, r2
 801e134:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e138:	6803      	ldr	r3, [r0, #0]
 801e13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e13c:	4798      	blx	r3
 801e13e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e142:	d01c      	beq.n	801e17e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801e144:	f010 0f04 	tst.w	r0, #4
 801e148:	d01d      	beq.n	801e186 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801e14a:	f8d9 0000 	ldr.w	r0, [r9]
 801e14e:	2700      	movs	r7, #0
 801e150:	b2ad      	uxth	r5, r5
 801e152:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e156:	6801      	ldr	r1, [r0, #0]
 801e158:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e15c:	f8cd b00c 	str.w	fp, [sp, #12]
 801e160:	9501      	str	r5, [sp, #4]
 801e162:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801e166:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e16a:	9402      	str	r4, [sp, #8]
 801e16c:	fa1f f488 	uxth.w	r4, r8
 801e170:	9400      	str	r4, [sp, #0]
 801e172:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801e174:	4631      	mov	r1, r6
 801e176:	47a0      	blx	r4
 801e178:	b00b      	add	sp, #44	; 0x2c
 801e17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e17e:	b914      	cbnz	r4, 801e186 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801e180:	f010 0f01 	tst.w	r0, #1
 801e184:	e7e0      	b.n	801e148 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801e186:	f8d9 0000 	ldr.w	r0, [r9]
 801e18a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801e18e:	6803      	ldr	r3, [r0, #0]
 801e190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e192:	4798      	blx	r3
 801e194:	4b43      	ldr	r3, [pc, #268]	; (801e2a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801e196:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801e19a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e19e:	881a      	ldrh	r2, [r3, #0]
 801e1a0:	469a      	mov	sl, r3
 801e1a2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e1a6:	fb05 f502 	mul.w	r5, r5, r2
 801e1aa:	fb02 1404 	mla	r4, r2, r4, r1
 801e1ae:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e1b2:	d059      	beq.n	801e268 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801e1b4:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801e1b8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e1bc:	fa1f f28b 	uxth.w	r2, fp
 801e1c0:	469e      	mov	lr, r3
 801e1c2:	fa1f f989 	uxth.w	r9, r9
 801e1c6:	42ac      	cmp	r4, r5
 801e1c8:	d264      	bcs.n	801e294 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801e1ca:	eb04 0a07 	add.w	sl, r4, r7
 801e1ce:	4554      	cmp	r4, sl
 801e1d0:	d23d      	bcs.n	801e24e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801e1d2:	8821      	ldrh	r1, [r4, #0]
 801e1d4:	f836 3b02 	ldrh.w	r3, [r6], #2
 801e1d8:	1208      	asrs	r0, r1, #8
 801e1da:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801e1de:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e1e2:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801e1e6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e1ea:	00c9      	lsls	r1, r1, #3
 801e1ec:	fb10 f009 	smulbb	r0, r0, r9
 801e1f0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801e1f4:	b2c9      	uxtb	r1, r1
 801e1f6:	fb0c 0c02 	mla	ip, ip, r2, r0
 801e1fa:	10d8      	asrs	r0, r3, #3
 801e1fc:	fb1b fb09 	smulbb	fp, fp, r9
 801e200:	00db      	lsls	r3, r3, #3
 801e202:	fa1f fc8c 	uxth.w	ip, ip
 801e206:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e20a:	fb11 f109 	smulbb	r1, r1, r9
 801e20e:	b2db      	uxtb	r3, r3
 801e210:	fb00 b002 	mla	r0, r0, r2, fp
 801e214:	f10c 0b01 	add.w	fp, ip, #1
 801e218:	fb03 1302 	mla	r3, r3, r2, r1
 801e21c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e220:	b29b      	uxth	r3, r3
 801e222:	b280      	uxth	r0, r0
 801e224:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801e228:	f103 0c01 	add.w	ip, r3, #1
 801e22c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e230:	1c43      	adds	r3, r0, #1
 801e232:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e236:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e23a:	0940      	lsrs	r0, r0, #5
 801e23c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e240:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e244:	ea4c 0c00 	orr.w	ip, ip, r0
 801e248:	f824 cb02 	strh.w	ip, [r4], #2
 801e24c:	e7bf      	b.n	801e1ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801e24e:	f8be 3000 	ldrh.w	r3, [lr]
 801e252:	eba3 0308 	sub.w	r3, r3, r8
 801e256:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e25a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e25e:	eba3 0308 	sub.w	r3, r3, r8
 801e262:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e266:	e7ae      	b.n	801e1c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801e268:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e26c:	f8d9 0000 	ldr.w	r0, [r9]
 801e270:	42ac      	cmp	r4, r5
 801e272:	6803      	ldr	r3, [r0, #0]
 801e274:	d20e      	bcs.n	801e294 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801e276:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801e27a:	4632      	mov	r2, r6
 801e27c:	463b      	mov	r3, r7
 801e27e:	4621      	mov	r1, r4
 801e280:	47c0      	blx	r8
 801e282:	f8ba 3000 	ldrh.w	r3, [sl]
 801e286:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e28a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e28e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e292:	e7eb      	b.n	801e26c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801e294:	4b02      	ldr	r3, [pc, #8]	; (801e2a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801e296:	6818      	ldr	r0, [r3, #0]
 801e298:	6803      	ldr	r3, [r0, #0]
 801e29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e29c:	4798      	blx	r3
 801e29e:	e76b      	b.n	801e178 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801e2a0:	2400aeec 	.word	0x2400aeec
 801e2a4:	2400aee6 	.word	0x2400aee6

0801e2a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e2a8:	b510      	push	{r4, lr}
 801e2aa:	4604      	mov	r4, r0
 801e2ac:	2104      	movs	r1, #4
 801e2ae:	f009 faa6 	bl	80277fe <_ZdlPvj>
 801e2b2:	4620      	mov	r0, r4
 801e2b4:	bd10      	pop	{r4, pc}

0801e2b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801e2b6:	b510      	push	{r4, lr}
 801e2b8:	4604      	mov	r4, r0
 801e2ba:	2104      	movs	r1, #4
 801e2bc:	f009 fa9f 	bl	80277fe <_ZdlPvj>
 801e2c0:	4620      	mov	r0, r4
 801e2c2:	bd10      	pop	{r4, pc}

0801e2c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e2c4:	b510      	push	{r4, lr}
 801e2c6:	4604      	mov	r4, r0
 801e2c8:	2104      	movs	r1, #4
 801e2ca:	f009 fa98 	bl	80277fe <_ZdlPvj>
 801e2ce:	4620      	mov	r0, r4
 801e2d0:	bd10      	pop	{r4, pc}

0801e2d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801e2d2:	b510      	push	{r4, lr}
 801e2d4:	4604      	mov	r4, r0
 801e2d6:	2104      	movs	r1, #4
 801e2d8:	f009 fa91 	bl	80277fe <_ZdlPvj>
 801e2dc:	4620      	mov	r0, r4
 801e2de:	bd10      	pop	{r4, pc}

0801e2e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e2e0:	b510      	push	{r4, lr}
 801e2e2:	4604      	mov	r4, r0
 801e2e4:	2104      	movs	r1, #4
 801e2e6:	f009 fa8a 	bl	80277fe <_ZdlPvj>
 801e2ea:	4620      	mov	r0, r4
 801e2ec:	bd10      	pop	{r4, pc}

0801e2ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e2ee:	b510      	push	{r4, lr}
 801e2f0:	4604      	mov	r4, r0
 801e2f2:	2104      	movs	r1, #4
 801e2f4:	f009 fa83 	bl	80277fe <_ZdlPvj>
 801e2f8:	4620      	mov	r0, r4
 801e2fa:	bd10      	pop	{r4, pc}

0801e2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e2fc:	b510      	push	{r4, lr}
 801e2fe:	4604      	mov	r4, r0
 801e300:	2104      	movs	r1, #4
 801e302:	f009 fa7c 	bl	80277fe <_ZdlPvj>
 801e306:	4620      	mov	r0, r4
 801e308:	bd10      	pop	{r4, pc}

0801e30a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e30a:	b510      	push	{r4, lr}
 801e30c:	4604      	mov	r4, r0
 801e30e:	2104      	movs	r1, #4
 801e310:	f009 fa75 	bl	80277fe <_ZdlPvj>
 801e314:	4620      	mov	r0, r4
 801e316:	bd10      	pop	{r4, pc}

0801e318 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e318:	b510      	push	{r4, lr}
 801e31a:	4604      	mov	r4, r0
 801e31c:	2104      	movs	r1, #4
 801e31e:	f009 fa6e 	bl	80277fe <_ZdlPvj>
 801e322:	4620      	mov	r0, r4
 801e324:	bd10      	pop	{r4, pc}

0801e326 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e326:	b510      	push	{r4, lr}
 801e328:	4604      	mov	r4, r0
 801e32a:	2104      	movs	r1, #4
 801e32c:	f009 fa67 	bl	80277fe <_ZdlPvj>
 801e330:	4620      	mov	r0, r4
 801e332:	bd10      	pop	{r4, pc}

0801e334 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e334:	b510      	push	{r4, lr}
 801e336:	4604      	mov	r4, r0
 801e338:	2104      	movs	r1, #4
 801e33a:	f009 fa60 	bl	80277fe <_ZdlPvj>
 801e33e:	4620      	mov	r0, r4
 801e340:	bd10      	pop	{r4, pc}

0801e342 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e342:	b510      	push	{r4, lr}
 801e344:	4604      	mov	r4, r0
 801e346:	2104      	movs	r1, #4
 801e348:	f009 fa59 	bl	80277fe <_ZdlPvj>
 801e34c:	4620      	mov	r0, r4
 801e34e:	bd10      	pop	{r4, pc}

0801e350 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e350:	b510      	push	{r4, lr}
 801e352:	4604      	mov	r4, r0
 801e354:	2104      	movs	r1, #4
 801e356:	f009 fa52 	bl	80277fe <_ZdlPvj>
 801e35a:	4620      	mov	r0, r4
 801e35c:	bd10      	pop	{r4, pc}

0801e35e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801e35e:	b510      	push	{r4, lr}
 801e360:	4604      	mov	r4, r0
 801e362:	2104      	movs	r1, #4
 801e364:	f009 fa4b 	bl	80277fe <_ZdlPvj>
 801e368:	4620      	mov	r0, r4
 801e36a:	bd10      	pop	{r4, pc}

0801e36c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e36c:	b510      	push	{r4, lr}
 801e36e:	4604      	mov	r4, r0
 801e370:	2104      	movs	r1, #4
 801e372:	f009 fa44 	bl	80277fe <_ZdlPvj>
 801e376:	4620      	mov	r0, r4
 801e378:	bd10      	pop	{r4, pc}

0801e37a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e37a:	b510      	push	{r4, lr}
 801e37c:	4604      	mov	r4, r0
 801e37e:	2104      	movs	r1, #4
 801e380:	f009 fa3d 	bl	80277fe <_ZdlPvj>
 801e384:	4620      	mov	r0, r4
 801e386:	bd10      	pop	{r4, pc}

0801e388 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e388:	b510      	push	{r4, lr}
 801e38a:	4604      	mov	r4, r0
 801e38c:	2104      	movs	r1, #4
 801e38e:	f009 fa36 	bl	80277fe <_ZdlPvj>
 801e392:	4620      	mov	r0, r4
 801e394:	bd10      	pop	{r4, pc}

0801e396 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801e396:	b510      	push	{r4, lr}
 801e398:	4604      	mov	r4, r0
 801e39a:	2104      	movs	r1, #4
 801e39c:	f009 fa2f 	bl	80277fe <_ZdlPvj>
 801e3a0:	4620      	mov	r0, r4
 801e3a2:	bd10      	pop	{r4, pc}

0801e3a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e3a4:	b510      	push	{r4, lr}
 801e3a6:	4604      	mov	r4, r0
 801e3a8:	2104      	movs	r1, #4
 801e3aa:	f009 fa28 	bl	80277fe <_ZdlPvj>
 801e3ae:	4620      	mov	r0, r4
 801e3b0:	bd10      	pop	{r4, pc}

0801e3b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e3b2:	b510      	push	{r4, lr}
 801e3b4:	4604      	mov	r4, r0
 801e3b6:	2104      	movs	r1, #4
 801e3b8:	f009 fa21 	bl	80277fe <_ZdlPvj>
 801e3bc:	4620      	mov	r0, r4
 801e3be:	bd10      	pop	{r4, pc}

0801e3c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e3c0:	b510      	push	{r4, lr}
 801e3c2:	4604      	mov	r4, r0
 801e3c4:	2104      	movs	r1, #4
 801e3c6:	f009 fa1a 	bl	80277fe <_ZdlPvj>
 801e3ca:	4620      	mov	r0, r4
 801e3cc:	bd10      	pop	{r4, pc}

0801e3ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e3ce:	b510      	push	{r4, lr}
 801e3d0:	4604      	mov	r4, r0
 801e3d2:	2104      	movs	r1, #4
 801e3d4:	f009 fa13 	bl	80277fe <_ZdlPvj>
 801e3d8:	4620      	mov	r0, r4
 801e3da:	bd10      	pop	{r4, pc}

0801e3dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e3dc:	b510      	push	{r4, lr}
 801e3de:	4604      	mov	r4, r0
 801e3e0:	2104      	movs	r1, #4
 801e3e2:	f009 fa0c 	bl	80277fe <_ZdlPvj>
 801e3e6:	4620      	mov	r0, r4
 801e3e8:	bd10      	pop	{r4, pc}

0801e3ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e3ea:	b510      	push	{r4, lr}
 801e3ec:	4604      	mov	r4, r0
 801e3ee:	2104      	movs	r1, #4
 801e3f0:	f009 fa05 	bl	80277fe <_ZdlPvj>
 801e3f4:	4620      	mov	r0, r4
 801e3f6:	bd10      	pop	{r4, pc}

0801e3f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801e3f8:	b510      	push	{r4, lr}
 801e3fa:	4604      	mov	r4, r0
 801e3fc:	2104      	movs	r1, #4
 801e3fe:	f009 f9fe 	bl	80277fe <_ZdlPvj>
 801e402:	4620      	mov	r0, r4
 801e404:	bd10      	pop	{r4, pc}

0801e406 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801e406:	b510      	push	{r4, lr}
 801e408:	4604      	mov	r4, r0
 801e40a:	2104      	movs	r1, #4
 801e40c:	f009 f9f7 	bl	80277fe <_ZdlPvj>
 801e410:	4620      	mov	r0, r4
 801e412:	bd10      	pop	{r4, pc}

0801e414 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801e414:	b510      	push	{r4, lr}
 801e416:	4604      	mov	r4, r0
 801e418:	2104      	movs	r1, #4
 801e41a:	f009 f9f0 	bl	80277fe <_ZdlPvj>
 801e41e:	4620      	mov	r0, r4
 801e420:	bd10      	pop	{r4, pc}

0801e422 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801e422:	b510      	push	{r4, lr}
 801e424:	4604      	mov	r4, r0
 801e426:	2104      	movs	r1, #4
 801e428:	f009 f9e9 	bl	80277fe <_ZdlPvj>
 801e42c:	4620      	mov	r0, r4
 801e42e:	bd10      	pop	{r4, pc}

0801e430 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801e430:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e432:	4606      	mov	r6, r0
 801e434:	b087      	sub	sp, #28
 801e436:	460c      	mov	r4, r1
 801e438:	4617      	mov	r7, r2
 801e43a:	461d      	mov	r5, r3
 801e43c:	b333      	cbz	r3, 801e48c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e43e:	4608      	mov	r0, r1
 801e440:	f7f6 fe15 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801e444:	bb10      	cbnz	r0, 801e48c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e446:	6820      	ldr	r0, [r4, #0]
 801e448:	ab04      	add	r3, sp, #16
 801e44a:	6861      	ldr	r1, [r4, #4]
 801e44c:	4c1b      	ldr	r4, [pc, #108]	; (801e4bc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801e44e:	c303      	stmia	r3!, {r0, r1}
 801e450:	a804      	add	r0, sp, #16
 801e452:	f7fa fb65 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e456:	6820      	ldr	r0, [r4, #0]
 801e458:	6803      	ldr	r3, [r0, #0]
 801e45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e45c:	4798      	blx	r3
 801e45e:	2dff      	cmp	r5, #255	; 0xff
 801e460:	d016      	beq.n	801e490 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801e462:	f010 0f08 	tst.w	r0, #8
 801e466:	6820      	ldr	r0, [r4, #0]
 801e468:	d015      	beq.n	801e496 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801e46a:	2400      	movs	r4, #0
 801e46c:	6801      	ldr	r1, [r0, #0]
 801e46e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e472:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e476:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801e47a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801e47e:	9401      	str	r4, [sp, #4]
 801e480:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801e484:	9400      	str	r4, [sp, #0]
 801e486:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 801e488:	4639      	mov	r1, r7
 801e48a:	47a0      	blx	r4
 801e48c:	b007      	add	sp, #28
 801e48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e490:	f010 0f02 	tst.w	r0, #2
 801e494:	e7e7      	b.n	801e466 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801e496:	6803      	ldr	r3, [r0, #0]
 801e498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e49a:	4798      	blx	r3
 801e49c:	4b08      	ldr	r3, [pc, #32]	; (801e4c0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801e49e:	4601      	mov	r1, r0
 801e4a0:	4630      	mov	r0, r6
 801e4a2:	881a      	ldrh	r2, [r3, #0]
 801e4a4:	6833      	ldr	r3, [r6, #0]
 801e4a6:	e9cd 7500 	strd	r7, r5, [sp]
 801e4aa:	69dd      	ldr	r5, [r3, #28]
 801e4ac:	ab04      	add	r3, sp, #16
 801e4ae:	47a8      	blx	r5
 801e4b0:	6820      	ldr	r0, [r4, #0]
 801e4b2:	6803      	ldr	r3, [r0, #0]
 801e4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4b6:	4798      	blx	r3
 801e4b8:	e7e8      	b.n	801e48c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e4ba:	bf00      	nop
 801e4bc:	2400aeec 	.word	0x2400aeec
 801e4c0:	2400aee6 	.word	0x2400aee6

0801e4c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4c8:	4f97      	ldr	r7, [pc, #604]	; (801e728 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801e4ca:	4616      	mov	r6, r2
 801e4cc:	b08f      	sub	sp, #60	; 0x3c
 801e4ce:	4604      	mov	r4, r0
 801e4d0:	683a      	ldr	r2, [r7, #0]
 801e4d2:	4689      	mov	r9, r1
 801e4d4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801e4d8:	2a02      	cmp	r2, #2
 801e4da:	d106      	bne.n	801e4ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801e4dc:	4b93      	ldr	r3, [pc, #588]	; (801e72c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801e4de:	f44f 7159 	mov.w	r1, #868	; 0x364
 801e4e2:	4a93      	ldr	r2, [pc, #588]	; (801e730 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e4e4:	4893      	ldr	r0, [pc, #588]	; (801e734 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801e4e6:	f009 f9b9 	bl	802785c <__assert_func>
 801e4ea:	ad0e      	add	r5, sp, #56	; 0x38
 801e4ec:	f825 3d24 	strh.w	r3, [r5, #-36]!
 801e4f0:	4628      	mov	r0, r5
 801e4f2:	f7fd fad3 	bl	801ba9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e4f6:	6823      	ldr	r3, [r4, #0]
 801e4f8:	4680      	mov	r8, r0
 801e4fa:	4620      	mov	r0, r4
 801e4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4fe:	4798      	blx	r3
 801e500:	4580      	cmp	r8, r0
 801e502:	d004      	beq.n	801e50e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801e504:	4b8c      	ldr	r3, [pc, #560]	; (801e738 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801e506:	f240 3166 	movw	r1, #870	; 0x366
 801e50a:	4a89      	ldr	r2, [pc, #548]	; (801e730 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e50c:	e7ea      	b.n	801e4e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e50e:	4628      	mov	r0, r5
 801e510:	f7fd fa3a 	bl	801b988 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e514:	4680      	mov	r8, r0
 801e516:	b920      	cbnz	r0, 801e522 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801e518:	4b88      	ldr	r3, [pc, #544]	; (801e73c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801e51a:	f44f 715a 	mov.w	r1, #872	; 0x368
 801e51e:	4a84      	ldr	r2, [pc, #528]	; (801e730 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e520:	e7e0      	b.n	801e4e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e522:	6830      	ldr	r0, [r6, #0]
 801e524:	ab06      	add	r3, sp, #24
 801e526:	6871      	ldr	r1, [r6, #4]
 801e528:	f10d 0b20 	add.w	fp, sp, #32
 801e52c:	f9b6 a000 	ldrsh.w	sl, [r6]
 801e530:	c303      	stmia	r3!, {r0, r1}
 801e532:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e536:	ab08      	add	r3, sp, #32
 801e538:	f8d9 0000 	ldr.w	r0, [r9]
 801e53c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801e540:	c303      	stmia	r3!, {r0, r1}
 801e542:	4628      	mov	r0, r5
 801e544:	f7fd f918 	bl	801b778 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e548:	4606      	mov	r6, r0
 801e54a:	4628      	mov	r0, r5
 801e54c:	4d7c      	ldr	r5, [pc, #496]	; (801e740 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801e54e:	f7fd f94d 	bl	801b7ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e552:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801e556:	a806      	add	r0, sp, #24
 801e558:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801e55c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801e560:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801e564:	f7fa fadc 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e568:	4658      	mov	r0, fp
 801e56a:	f7fa fad9 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e56e:	a80a      	add	r0, sp, #40	; 0x28
 801e570:	f7fa fad6 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e574:	4b73      	ldr	r3, [pc, #460]	; (801e744 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801e576:	2100      	movs	r1, #0
 801e578:	f9b5 2000 	ldrsh.w	r2, [r5]
 801e57c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e580:	4658      	mov	r0, fp
 801e582:	910c      	str	r1, [sp, #48]	; 0x30
 801e584:	a90c      	add	r1, sp, #48	; 0x30
 801e586:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801e58a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e58e:	f7f6 fd2b 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801e592:	4658      	mov	r0, fp
 801e594:	f7f6 fd6b 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801e598:	2800      	cmp	r0, #0
 801e59a:	f040 809a 	bne.w	801e6d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e59e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801e5a2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801e5a6:	4288      	cmp	r0, r1
 801e5a8:	db38      	blt.n	801e61c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e5aa:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801e5ae:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801e5b2:	429a      	cmp	r2, r3
 801e5b4:	db32      	blt.n	801e61c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e5b6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801e5ba:	4430      	add	r0, r6
 801e5bc:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e5c0:	4431      	add	r1, r6
 801e5c2:	b200      	sxth	r0, r0
 801e5c4:	b209      	sxth	r1, r1
 801e5c6:	4288      	cmp	r0, r1
 801e5c8:	dc28      	bgt.n	801e61c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e5ca:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801e5ce:	440a      	add	r2, r1
 801e5d0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801e5d4:	440b      	add	r3, r1
 801e5d6:	b212      	sxth	r2, r2
 801e5d8:	b21b      	sxth	r3, r3
 801e5da:	429a      	cmp	r2, r3
 801e5dc:	dc1e      	bgt.n	801e61c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e5de:	6823      	ldr	r3, [r4, #0]
 801e5e0:	4620      	mov	r0, r4
 801e5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e5e4:	4798      	blx	r3
 801e5e6:	4682      	mov	sl, r0
 801e5e8:	6838      	ldr	r0, [r7, #0]
 801e5ea:	6803      	ldr	r3, [r0, #0]
 801e5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e5ee:	4798      	blx	r3
 801e5f0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801e5f4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e5f8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801e5fc:	1a5b      	subs	r3, r3, r1
 801e5fe:	b29b      	uxth	r3, r3
 801e600:	b21c      	sxth	r4, r3
 801e602:	2c00      	cmp	r4, #0
 801e604:	dc0f      	bgt.n	801e626 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 801e606:	bf18      	it	ne
 801e608:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801e60c:	4644      	mov	r4, r8
 801e60e:	bf1e      	ittt	ne
 801e610:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801e614:	185b      	addne	r3, r3, r1
 801e616:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801e61a:	e009      	b.n	801e630 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 801e61c:	4b4a      	ldr	r3, [pc, #296]	; (801e748 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801e61e:	f240 3176 	movw	r1, #886	; 0x376
 801e622:	4a43      	ldr	r2, [pc, #268]	; (801e730 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e624:	e75e      	b.n	801e4e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e626:	1ad3      	subs	r3, r2, r3
 801e628:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801e62c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e630:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801e634:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e638:	1b9b      	subs	r3, r3, r6
 801e63a:	b29b      	uxth	r3, r3
 801e63c:	b219      	sxth	r1, r3
 801e63e:	2900      	cmp	r1, #0
 801e640:	dd4b      	ble.n	801e6da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 801e642:	4351      	muls	r1, r2
 801e644:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801e648:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e64c:	1acb      	subs	r3, r1, r3
 801e64e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e652:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801e656:	2e00      	cmp	r6, #0
 801e658:	dd3b      	ble.n	801e6d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e65a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801e65e:	2b00      	cmp	r3, #0
 801e660:	dd37      	ble.n	801e6d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e662:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801e666:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e66a:	fb0a f90c 	mul.w	r9, sl, ip
 801e66e:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801e672:	4481      	add	r9, r0
 801e674:	8828      	ldrh	r0, [r5, #0]
 801e676:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801e67a:	1a41      	subs	r1, r0, r1
 801e67c:	42ae      	cmp	r6, r5
 801e67e:	bfa8      	it	ge
 801e680:	462e      	movge	r6, r5
 801e682:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801e686:	428e      	cmp	r6, r1
 801e688:	bfa8      	it	ge
 801e68a:	460e      	movge	r6, r1
 801e68c:	429d      	cmp	r5, r3
 801e68e:	bfa8      	it	ge
 801e690:	461d      	movge	r5, r3
 801e692:	4b2c      	ldr	r3, [pc, #176]	; (801e744 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801e694:	881b      	ldrh	r3, [r3, #0]
 801e696:	eba3 030c 	sub.w	r3, r3, ip
 801e69a:	429d      	cmp	r5, r3
 801e69c:	bfa8      	it	ge
 801e69e:	461d      	movge	r5, r3
 801e6a0:	42b0      	cmp	r0, r6
 801e6a2:	d12c      	bne.n	801e6fe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801e6a4:	4290      	cmp	r0, r2
 801e6a6:	d12a      	bne.n	801e6fe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801e6a8:	6838      	ldr	r0, [r7, #0]
 801e6aa:	9203      	str	r2, [sp, #12]
 801e6ac:	6803      	ldr	r3, [r0, #0]
 801e6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6b0:	4798      	blx	r3
 801e6b2:	07c3      	lsls	r3, r0, #31
 801e6b4:	d51a      	bpl.n	801e6ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e6b6:	9a03      	ldr	r2, [sp, #12]
 801e6b8:	6838      	ldr	r0, [r7, #0]
 801e6ba:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 801e6be:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801e6c2:	6803      	ldr	r3, [r0, #0]
 801e6c4:	9200      	str	r2, [sp, #0]
 801e6c6:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 801e6c8:	4623      	mov	r3, r4
 801e6ca:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801e6ce:	47a8      	blx	r5
 801e6d0:	4680      	mov	r8, r0
 801e6d2:	4640      	mov	r0, r8
 801e6d4:	b00f      	add	sp, #60	; 0x3c
 801e6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6da:	bf1f      	itttt	ne
 801e6dc:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 801e6e0:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801e6e4:	185b      	addne	r3, r3, r1
 801e6e6:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801e6ea:	e7b2      	b.n	801e652 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 801e6ec:	6838      	ldr	r0, [r7, #0]
 801e6ee:	464a      	mov	r2, r9
 801e6f0:	4621      	mov	r1, r4
 801e6f2:	6803      	ldr	r3, [r0, #0]
 801e6f4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801e6f6:	fb05 f30a 	mul.w	r3, r5, sl
 801e6fa:	47b0      	blx	r6
 801e6fc:	e7e9      	b.n	801e6d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e6fe:	4355      	muls	r5, r2
 801e700:	0076      	lsls	r6, r6, #1
 801e702:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801e706:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801e70a:	9303      	str	r3, [sp, #12]
 801e70c:	9b03      	ldr	r3, [sp, #12]
 801e70e:	429c      	cmp	r4, r3
 801e710:	d2df      	bcs.n	801e6d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e712:	6838      	ldr	r0, [r7, #0]
 801e714:	464a      	mov	r2, r9
 801e716:	4621      	mov	r1, r4
 801e718:	44d1      	add	r9, sl
 801e71a:	6803      	ldr	r3, [r0, #0]
 801e71c:	445c      	add	r4, fp
 801e71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e720:	461d      	mov	r5, r3
 801e722:	4633      	mov	r3, r6
 801e724:	47a8      	blx	r5
 801e726:	e7f1      	b.n	801e70c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 801e728:	2400aeec 	.word	0x2400aeec
 801e72c:	0802bc27 	.word	0x0802bc27
 801e730:	0802c4d8 	.word	0x0802c4d8
 801e734:	0802bcd9 	.word	0x0802bcd9
 801e738:	0802bd0b 	.word	0x0802bd0b
 801e73c:	0802bd60 	.word	0x0802bd60
 801e740:	2400aee6 	.word	0x2400aee6
 801e744:	2400aee8 	.word	0x2400aee8
 801e748:	0802bd9e 	.word	0x0802bd9e

0801e74c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e750:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801e754:	4688      	mov	r8, r1
 801e756:	4614      	mov	r4, r2
 801e758:	461d      	mov	r5, r3
 801e75a:	9e08      	ldr	r6, [sp, #32]
 801e75c:	2f00      	cmp	r7, #0
 801e75e:	f000 80b4 	beq.w	801e8ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e762:	4618      	mov	r0, r3
 801e764:	f7f6 fc83 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801e768:	2800      	cmp	r0, #0
 801e76a:	f040 80ae 	bne.w	801e8ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e76e:	f9b5 1000 	ldrsh.w	r1, [r5]
 801e772:	2fff      	cmp	r7, #255	; 0xff
 801e774:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801e778:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801e77c:	fb04 1303 	mla	r3, r4, r3, r1
 801e780:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801e784:	eba4 0200 	sub.w	r2, r4, r0
 801e788:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801e78c:	fb04 f505 	mul.w	r5, r4, r5
 801e790:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801e794:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801e798:	d04b      	beq.n	801e832 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 801e79a:	b2bc      	uxth	r4, r7
 801e79c:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801e7a0:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801e7a4:	fa5f f788 	uxtb.w	r7, r8
 801e7a8:	b2f3      	uxtb	r3, r6
 801e7aa:	0040      	lsls	r0, r0, #1
 801e7ac:	fb0e fe04 	mul.w	lr, lr, r4
 801e7b0:	4367      	muls	r7, r4
 801e7b2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801e7b6:	4363      	muls	r3, r4
 801e7b8:	fa1f fc8c 	uxth.w	ip, ip
 801e7bc:	42a9      	cmp	r1, r5
 801e7be:	f080 8084 	bcs.w	801e8ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e7c2:	eb01 0900 	add.w	r9, r1, r0
 801e7c6:	4549      	cmp	r1, r9
 801e7c8:	d231      	bcs.n	801e82e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801e7ca:	880a      	ldrh	r2, [r1, #0]
 801e7cc:	1214      	asrs	r4, r2, #8
 801e7ce:	10d6      	asrs	r6, r2, #3
 801e7d0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801e7d4:	00d2      	lsls	r2, r2, #3
 801e7d6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e7da:	b2d2      	uxtb	r2, r2
 801e7dc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e7e0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e7e4:	fb14 f40c 	smulbb	r4, r4, ip
 801e7e8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801e7ec:	fb12 f20c 	smulbb	r2, r2, ip
 801e7f0:	fb16 f60c 	smulbb	r6, r6, ip
 801e7f4:	4474      	add	r4, lr
 801e7f6:	441a      	add	r2, r3
 801e7f8:	b2a4      	uxth	r4, r4
 801e7fa:	443e      	add	r6, r7
 801e7fc:	b292      	uxth	r2, r2
 801e7fe:	f104 0a01 	add.w	sl, r4, #1
 801e802:	b2b6      	uxth	r6, r6
 801e804:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e808:	f102 0a01 	add.w	sl, r2, #1
 801e80c:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801e810:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801e814:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e818:	4322      	orrs	r2, r4
 801e81a:	1c74      	adds	r4, r6, #1
 801e81c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801e820:	0976      	lsrs	r6, r6, #5
 801e822:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e826:	4332      	orrs	r2, r6
 801e828:	f821 2b02 	strh.w	r2, [r1], #2
 801e82c:	e7cb      	b.n	801e7c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 801e82e:	4441      	add	r1, r8
 801e830:	e7c4      	b.n	801e7bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801e832:	0973      	lsrs	r3, r6, #5
 801e834:	4f26      	ldr	r7, [pc, #152]	; (801e8d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 801e836:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801e83a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e83e:	ea08 0707 	and.w	r7, r8, r7
 801e842:	433b      	orrs	r3, r7
 801e844:	4333      	orrs	r3, r6
 801e846:	07e6      	lsls	r6, r4, #31
 801e848:	b29b      	uxth	r3, r3
 801e84a:	d50b      	bpl.n	801e864 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801e84c:	0040      	lsls	r0, r0, #1
 801e84e:	0052      	lsls	r2, r2, #1
 801e850:	42a9      	cmp	r1, r5
 801e852:	d23a      	bcs.n	801e8ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e854:	180c      	adds	r4, r1, r0
 801e856:	42a1      	cmp	r1, r4
 801e858:	d202      	bcs.n	801e860 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801e85a:	f821 3b02 	strh.w	r3, [r1], #2
 801e85e:	e7fa      	b.n	801e856 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801e860:	4411      	add	r1, r2
 801e862:	e7f5      	b.n	801e850 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801e864:	078f      	lsls	r7, r1, #30
 801e866:	d008      	beq.n	801e87a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801e868:	0066      	lsls	r6, r4, #1
 801e86a:	460a      	mov	r2, r1
 801e86c:	42aa      	cmp	r2, r5
 801e86e:	d202      	bcs.n	801e876 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801e870:	8013      	strh	r3, [r2, #0]
 801e872:	4432      	add	r2, r6
 801e874:	e7fa      	b.n	801e86c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801e876:	3102      	adds	r1, #2
 801e878:	3801      	subs	r0, #1
 801e87a:	07c6      	lsls	r6, r0, #31
 801e87c:	d50b      	bpl.n	801e896 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801e87e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801e882:	0066      	lsls	r6, r4, #1
 801e884:	3a01      	subs	r2, #1
 801e886:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801e88a:	42aa      	cmp	r2, r5
 801e88c:	d202      	bcs.n	801e894 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801e88e:	8013      	strh	r3, [r2, #0]
 801e890:	4432      	add	r2, r6
 801e892:	e7fa      	b.n	801e88a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801e894:	3801      	subs	r0, #1
 801e896:	b1c0      	cbz	r0, 801e8ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e898:	1040      	asrs	r0, r0, #1
 801e89a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801e89e:	0080      	lsls	r0, r0, #2
 801e8a0:	0064      	lsls	r4, r4, #1
 801e8a2:	42a9      	cmp	r1, r5
 801e8a4:	d211      	bcs.n	801e8ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e8a6:	078a      	lsls	r2, r1, #30
 801e8a8:	d006      	beq.n	801e8b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801e8aa:	4b0a      	ldr	r3, [pc, #40]	; (801e8d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 801e8ac:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801e8b0:	4a09      	ldr	r2, [pc, #36]	; (801e8d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 801e8b2:	480a      	ldr	r0, [pc, #40]	; (801e8dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 801e8b4:	f008 ffd2 	bl	802785c <__assert_func>
 801e8b8:	180e      	adds	r6, r1, r0
 801e8ba:	460a      	mov	r2, r1
 801e8bc:	42b2      	cmp	r2, r6
 801e8be:	d202      	bcs.n	801e8c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 801e8c0:	f842 3b04 	str.w	r3, [r2], #4
 801e8c4:	e7fa      	b.n	801e8bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 801e8c6:	4421      	add	r1, r4
 801e8c8:	e7eb      	b.n	801e8a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801e8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8ce:	bf00      	nop
 801e8d0:	00fff800 	.word	0x00fff800
 801e8d4:	0802bad8 	.word	0x0802bad8
 801e8d8:	0802c124 	.word	0x0802c124
 801e8dc:	0802bcd9 	.word	0x0802bcd9

0801e8e0 <_ZN8touchgfx8LCD16bppC1Ev>:
 801e8e0:	2200      	movs	r2, #0
 801e8e2:	4910      	ldr	r1, [pc, #64]	; (801e924 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801e8e4:	6042      	str	r2, [r0, #4]
 801e8e6:	6001      	str	r1, [r0, #0]
 801e8e8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e8ec:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e8f0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e8f4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e8f8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e8fc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e900:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e904:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e908:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e90c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e910:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801e914:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801e918:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801e91c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801e920:	4770      	bx	lr
 801e922:	bf00      	nop
 801e924:	0802c0dc 	.word	0x0802c0dc

0801e928 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e92c:	b08d      	sub	sp, #52	; 0x34
 801e92e:	460d      	mov	r5, r1
 801e930:	4604      	mov	r4, r0
 801e932:	4699      	mov	r9, r3
 801e934:	6808      	ldr	r0, [r1, #0]
 801e936:	ab08      	add	r3, sp, #32
 801e938:	6849      	ldr	r1, [r1, #4]
 801e93a:	c303      	stmia	r3!, {r0, r1}
 801e93c:	6810      	ldr	r0, [r2, #0]
 801e93e:	ab0a      	add	r3, sp, #40	; 0x28
 801e940:	6851      	ldr	r1, [r2, #4]
 801e942:	c303      	stmia	r3!, {r0, r1}
 801e944:	a808      	add	r0, sp, #32
 801e946:	f7fa f8eb 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e94a:	4629      	mov	r1, r5
 801e94c:	a80a      	add	r0, sp, #40	; 0x28
 801e94e:	4d67      	ldr	r5, [pc, #412]	; (801eaec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801e950:	f7fa f90e 	bl	8018b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e954:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e958:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801e95c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801e960:	6828      	ldr	r0, [r5, #0]
 801e962:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e966:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801e96a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e96e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e972:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801e976:	440a      	add	r2, r1
 801e978:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801e97c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801e980:	4413      	add	r3, r2
 801e982:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e986:	6803      	ldr	r3, [r0, #0]
 801e988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e98a:	4798      	blx	r3
 801e98c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e990:	d119      	bne.n	801e9c6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801e992:	f010 0f20 	tst.w	r0, #32
 801e996:	6828      	ldr	r0, [r5, #0]
 801e998:	d018      	beq.n	801e9cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801e99a:	2500      	movs	r5, #0
 801e99c:	6801      	ldr	r1, [r0, #0]
 801e99e:	b2b6      	uxth	r6, r6
 801e9a0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801e9a4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e9a8:	9601      	str	r6, [sp, #4]
 801e9aa:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801e9ae:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801e9b2:	9502      	str	r5, [sp, #8]
 801e9b4:	fa1f f588 	uxth.w	r5, r8
 801e9b8:	9500      	str	r5, [sp, #0]
 801e9ba:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801e9bc:	4621      	mov	r1, r4
 801e9be:	47a8      	blx	r5
 801e9c0:	b00d      	add	sp, #52	; 0x34
 801e9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e9ca:	e7e4      	b.n	801e996 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801e9cc:	6803      	ldr	r3, [r0, #0]
 801e9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e9d0:	4798      	blx	r3
 801e9d2:	4947      	ldr	r1, [pc, #284]	; (801eaf0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801e9d4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801e9d8:	880b      	ldrh	r3, [r1, #0]
 801e9da:	468a      	mov	sl, r1
 801e9dc:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801e9e0:	fb03 5202 	mla	r2, r3, r2, r5
 801e9e4:	4373      	muls	r3, r6
 801e9e6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e9ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e9ee:	9307      	str	r3, [sp, #28]
 801e9f0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801e9f4:	9306      	str	r3, [sp, #24]
 801e9f6:	9b07      	ldr	r3, [sp, #28]
 801e9f8:	4298      	cmp	r0, r3
 801e9fa:	d270      	bcs.n	801eade <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801e9fc:	9b06      	ldr	r3, [sp, #24]
 801e9fe:	4621      	mov	r1, r4
 801ea00:	eb00 0b03 	add.w	fp, r0, r3
 801ea04:	4558      	cmp	r0, fp
 801ea06:	d25d      	bcs.n	801eac4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801ea08:	f851 4b04 	ldr.w	r4, [r1], #4
 801ea0c:	0e23      	lsrs	r3, r4, #24
 801ea0e:	d014      	beq.n	801ea3a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801ea10:	2bff      	cmp	r3, #255	; 0xff
 801ea12:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801ea16:	d112      	bne.n	801ea3e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801ea18:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ea1c:	d10f      	bne.n	801ea3e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801ea1e:	0963      	lsrs	r3, r4, #5
 801ea20:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801ea24:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ea28:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ea2c:	f02c 0c07 	bic.w	ip, ip, #7
 801ea30:	ea43 0c0c 	orr.w	ip, r3, ip
 801ea34:	ea4c 0404 	orr.w	r4, ip, r4
 801ea38:	8004      	strh	r4, [r0, #0]
 801ea3a:	3002      	adds	r0, #2
 801ea3c:	e7e2      	b.n	801ea04 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801ea3e:	fb09 f303 	mul.w	r3, r9, r3
 801ea42:	8807      	ldrh	r7, [r0, #0]
 801ea44:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801ea48:	fa5f fc8c 	uxtb.w	ip, ip
 801ea4c:	1c5a      	adds	r2, r3, #1
 801ea4e:	123e      	asrs	r6, r7, #8
 801ea50:	10fd      	asrs	r5, r7, #3
 801ea52:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801ea56:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ea5a:	00ff      	lsls	r7, r7, #3
 801ea5c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ea60:	1212      	asrs	r2, r2, #8
 801ea62:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ea66:	b293      	uxth	r3, r2
 801ea68:	43d2      	mvns	r2, r2
 801ea6a:	b2ff      	uxtb	r7, r7
 801ea6c:	fb1e fe03 	smulbb	lr, lr, r3
 801ea70:	b2d2      	uxtb	r2, r2
 801ea72:	fb1c fc03 	smulbb	ip, ip, r3
 801ea76:	b2e4      	uxtb	r4, r4
 801ea78:	fb06 e602 	mla	r6, r6, r2, lr
 801ea7c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ea80:	fb14 f403 	smulbb	r4, r4, r3
 801ea84:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801ea88:	b2b6      	uxth	r6, r6
 801ea8a:	fb05 c502 	mla	r5, r5, r2, ip
 801ea8e:	fb07 4702 	mla	r7, r7, r2, r4
 801ea92:	f106 0e01 	add.w	lr, r6, #1
 801ea96:	b2ad      	uxth	r5, r5
 801ea98:	b2bf      	uxth	r7, r7
 801ea9a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801ea9e:	f105 0c01 	add.w	ip, r5, #1
 801eaa2:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801eaa6:	1c7e      	adds	r6, r7, #1
 801eaa8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801eaac:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801eab0:	096d      	lsrs	r5, r5, #5
 801eab2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801eab6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801eaba:	ea46 060e 	orr.w	r6, r6, lr
 801eabe:	432e      	orrs	r6, r5
 801eac0:	8006      	strh	r6, [r0, #0]
 801eac2:	e7ba      	b.n	801ea3a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801eac4:	f8ba 3000 	ldrh.w	r3, [sl]
 801eac8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801eacc:	eba3 0308 	sub.w	r3, r3, r8
 801ead0:	eba4 0408 	sub.w	r4, r4, r8
 801ead4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ead8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801eadc:	e78b      	b.n	801e9f6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801eade:	4b03      	ldr	r3, [pc, #12]	; (801eaec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801eae0:	6818      	ldr	r0, [r3, #0]
 801eae2:	6803      	ldr	r3, [r0, #0]
 801eae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eae6:	4798      	blx	r3
 801eae8:	e76a      	b.n	801e9c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801eaea:	bf00      	nop
 801eaec:	2400aeec 	.word	0x2400aeec
 801eaf0:	2400aee6 	.word	0x2400aee6

0801eaf4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801eaf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eaf8:	b085      	sub	sp, #20
 801eafa:	6810      	ldr	r0, [r2, #0]
 801eafc:	460c      	mov	r4, r1
 801eafe:	6851      	ldr	r1, [r2, #4]
 801eb00:	466d      	mov	r5, sp
 801eb02:	4616      	mov	r6, r2
 801eb04:	c503      	stmia	r5!, {r0, r1}
 801eb06:	6818      	ldr	r0, [r3, #0]
 801eb08:	6859      	ldr	r1, [r3, #4]
 801eb0a:	c503      	stmia	r5!, {r0, r1}
 801eb0c:	4668      	mov	r0, sp
 801eb0e:	4d2e      	ldr	r5, [pc, #184]	; (801ebc8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801eb10:	f7fa f806 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eb14:	4631      	mov	r1, r6
 801eb16:	a802      	add	r0, sp, #8
 801eb18:	4e2c      	ldr	r6, [pc, #176]	; (801ebcc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801eb1a:	f7fa f829 	bl	8018b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eb1e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801eb22:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801eb26:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801eb2a:	6828      	ldr	r0, [r5, #0]
 801eb2c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801eb30:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801eb34:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801eb38:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801eb3c:	f8bd 1000 	ldrh.w	r1, [sp]
 801eb40:	440a      	add	r2, r1
 801eb42:	f8ad 2008 	strh.w	r2, [sp, #8]
 801eb46:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801eb4a:	4413      	add	r3, r2
 801eb4c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801eb50:	6803      	ldr	r3, [r0, #0]
 801eb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb54:	4798      	blx	r3
 801eb56:	8833      	ldrh	r3, [r6, #0]
 801eb58:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801eb5c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801eb60:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801eb64:	f8df e068 	ldr.w	lr, [pc, #104]	; 801ebd0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801eb68:	fb03 1202 	mla	r2, r3, r2, r1
 801eb6c:	fb08 f303 	mul.w	r3, r8, r3
 801eb70:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801eb74:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801eb78:	4298      	cmp	r0, r3
 801eb7a:	d21d      	bcs.n	801ebb8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801eb7c:	eb00 080c 	add.w	r8, r0, ip
 801eb80:	4540      	cmp	r0, r8
 801eb82:	d20f      	bcs.n	801eba4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801eb84:	f854 1b04 	ldr.w	r1, [r4], #4
 801eb88:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801eb8c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801eb90:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801eb94:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801eb98:	ea42 0209 	orr.w	r2, r2, r9
 801eb9c:	430a      	orrs	r2, r1
 801eb9e:	f820 2b02 	strh.w	r2, [r0], #2
 801eba2:	e7ed      	b.n	801eb80 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801eba4:	8832      	ldrh	r2, [r6, #0]
 801eba6:	1bd2      	subs	r2, r2, r7
 801eba8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ebac:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ebb0:	1bd2      	subs	r2, r2, r7
 801ebb2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801ebb6:	e7df      	b.n	801eb78 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801ebb8:	6828      	ldr	r0, [r5, #0]
 801ebba:	6803      	ldr	r3, [r0, #0]
 801ebbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ebbe:	4798      	blx	r3
 801ebc0:	b005      	add	sp, #20
 801ebc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ebc6:	bf00      	nop
 801ebc8:	2400aeec 	.word	0x2400aeec
 801ebcc:	2400aee6 	.word	0x2400aee6
 801ebd0:	fffff800 	.word	0xfffff800

0801ebd4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801ebd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ebd8:	b08e      	sub	sp, #56	; 0x38
 801ebda:	460e      	mov	r6, r1
 801ebdc:	4604      	mov	r4, r0
 801ebde:	461d      	mov	r5, r3
 801ebe0:	6808      	ldr	r0, [r1, #0]
 801ebe2:	ab0a      	add	r3, sp, #40	; 0x28
 801ebe4:	6849      	ldr	r1, [r1, #4]
 801ebe6:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801edbc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801ebea:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801edc0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801ebee:	c303      	stmia	r3!, {r0, r1}
 801ebf0:	6810      	ldr	r0, [r2, #0]
 801ebf2:	ab0c      	add	r3, sp, #48	; 0x30
 801ebf4:	6851      	ldr	r1, [r2, #4]
 801ebf6:	c303      	stmia	r3!, {r0, r1}
 801ebf8:	a80a      	add	r0, sp, #40	; 0x28
 801ebfa:	f7f9 ff91 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebfe:	4631      	mov	r1, r6
 801ec00:	a80c      	add	r0, sp, #48	; 0x30
 801ec02:	f7f9 ffb5 	bl	8018b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ec06:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801ec0a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801ec0e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ec12:	f8d8 0000 	ldr.w	r0, [r8]
 801ec16:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ec1a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801ec1e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801ec22:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ec26:	440c      	add	r4, r1
 801ec28:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801ec2c:	440a      	add	r2, r1
 801ec2e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801ec32:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801ec36:	4413      	add	r3, r2
 801ec38:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ec3c:	6803      	ldr	r3, [r0, #0]
 801ec3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec40:	4798      	blx	r3
 801ec42:	2dff      	cmp	r5, #255	; 0xff
 801ec44:	d124      	bne.n	801ec90 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801ec46:	f010 0f01 	tst.w	r0, #1
 801ec4a:	f8d8 0000 	ldr.w	r0, [r8]
 801ec4e:	d022      	beq.n	801ec96 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801ec50:	2100      	movs	r1, #0
 801ec52:	f04f 0e01 	mov.w	lr, #1
 801ec56:	f8d0 c000 	ldr.w	ip, [r0]
 801ec5a:	b2b6      	uxth	r6, r6
 801ec5c:	f8cd e018 	str.w	lr, [sp, #24]
 801ec60:	b2bf      	uxth	r7, r7
 801ec62:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801ec66:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801ec6a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801ec6e:	f8b9 e000 	ldrh.w	lr, [r9]
 801ec72:	9503      	str	r5, [sp, #12]
 801ec74:	9601      	str	r6, [sp, #4]
 801ec76:	9700      	str	r7, [sp, #0]
 801ec78:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801ec7c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ec80:	9102      	str	r1, [sp, #8]
 801ec82:	4621      	mov	r1, r4
 801ec84:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801ec88:	47a8      	blx	r5
 801ec8a:	b00e      	add	sp, #56	; 0x38
 801ec8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec90:	f010 0f04 	tst.w	r0, #4
 801ec94:	e7d9      	b.n	801ec4a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801ec96:	6803      	ldr	r3, [r0, #0]
 801ec98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec9a:	4798      	blx	r3
 801ec9c:	f8b9 3000 	ldrh.w	r3, [r9]
 801eca0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801eca4:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801eca8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801ecac:	435e      	muls	r6, r3
 801ecae:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801ecb2:	2dff      	cmp	r5, #255	; 0xff
 801ecb4:	fb03 1202 	mla	r2, r3, r2, r1
 801ecb8:	ebac 0c07 	sub.w	ip, ip, r7
 801ecbc:	eba3 0707 	sub.w	r7, r3, r7
 801ecc0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ecc4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ecc8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801eccc:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801ecd0:	d049      	beq.n	801ed66 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801ecd2:	43eb      	mvns	r3, r5
 801ecd4:	fa1f f985 	uxth.w	r9, r5
 801ecd8:	b2db      	uxtb	r3, r3
 801ecda:	42b0      	cmp	r0, r6
 801ecdc:	d266      	bcs.n	801edac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ecde:	eb00 0a0e 	add.w	sl, r0, lr
 801ece2:	4550      	cmp	r0, sl
 801ece4:	4621      	mov	r1, r4
 801ece6:	f104 0403 	add.w	r4, r4, #3
 801ecea:	d25b      	bcs.n	801eda4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801ecec:	8802      	ldrh	r2, [r0, #0]
 801ecee:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801ecf2:	ea4f 2822 	mov.w	r8, r2, asr #8
 801ecf6:	fb11 f109 	smulbb	r1, r1, r9
 801ecfa:	10d5      	asrs	r5, r2, #3
 801ecfc:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801ed00:	00d2      	lsls	r2, r2, #3
 801ed02:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ed06:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801ed0a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ed0e:	fb08 1803 	mla	r8, r8, r3, r1
 801ed12:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801ed16:	b2d2      	uxtb	r2, r2
 801ed18:	fb11 f109 	smulbb	r1, r1, r9
 801ed1c:	fa1f f888 	uxth.w	r8, r8
 801ed20:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ed24:	fb05 1503 	mla	r5, r5, r3, r1
 801ed28:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ed2c:	fb11 f109 	smulbb	r1, r1, r9
 801ed30:	b2ad      	uxth	r5, r5
 801ed32:	fb02 1203 	mla	r2, r2, r3, r1
 801ed36:	f108 0101 	add.w	r1, r8, #1
 801ed3a:	b292      	uxth	r2, r2
 801ed3c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801ed40:	1c51      	adds	r1, r2, #1
 801ed42:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801ed46:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ed4a:	1c69      	adds	r1, r5, #1
 801ed4c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801ed50:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ed54:	096d      	lsrs	r5, r5, #5
 801ed56:	ea42 0208 	orr.w	r2, r2, r8
 801ed5a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ed5e:	432a      	orrs	r2, r5
 801ed60:	f820 2b02 	strh.w	r2, [r0], #2
 801ed64:	e7bd      	b.n	801ece2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801ed66:	4a14      	ldr	r2, [pc, #80]	; (801edb8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801ed68:	42b0      	cmp	r0, r6
 801ed6a:	d21f      	bcs.n	801edac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ed6c:	eb00 050e 	add.w	r5, r0, lr
 801ed70:	42a8      	cmp	r0, r5
 801ed72:	4621      	mov	r1, r4
 801ed74:	f104 0403 	add.w	r4, r4, #3
 801ed78:	d210      	bcs.n	801ed9c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801ed7a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801ed7e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801ed82:	00db      	lsls	r3, r3, #3
 801ed84:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801ed88:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ed8c:	430b      	orrs	r3, r1
 801ed8e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ed92:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801ed96:	f820 3b02 	strh.w	r3, [r0], #2
 801ed9a:	e7e9      	b.n	801ed70 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801ed9c:	4438      	add	r0, r7
 801ed9e:	eb01 040c 	add.w	r4, r1, ip
 801eda2:	e7e1      	b.n	801ed68 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801eda4:	4438      	add	r0, r7
 801eda6:	eb01 040c 	add.w	r4, r1, ip
 801edaa:	e796      	b.n	801ecda <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801edac:	4b03      	ldr	r3, [pc, #12]	; (801edbc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801edae:	6818      	ldr	r0, [r3, #0]
 801edb0:	6803      	ldr	r3, [r0, #0]
 801edb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801edb4:	4798      	blx	r3
 801edb6:	e768      	b.n	801ec8a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801edb8:	fffff800 	.word	0xfffff800
 801edbc:	2400aeec 	.word	0x2400aeec
 801edc0:	2400aee6 	.word	0x2400aee6

0801edc4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801edc4:	b570      	push	{r4, r5, r6, lr}
 801edc6:	9c04      	ldr	r4, [sp, #16]
 801edc8:	4605      	mov	r5, r0
 801edca:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801edce:	4608      	mov	r0, r1
 801edd0:	4619      	mov	r1, r3
 801edd2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801edd6:	2a0d      	cmp	r2, #13
 801edd8:	d825      	bhi.n	801ee26 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 801edda:	e8df f002 	tbb	[pc, r2]
 801edde:	1807      	.short	0x1807
 801ede0:	1d1d1d13 	.word	0x1d1d1d13
 801ede4:	1d1d1d1d 	.word	0x1d1d1d1d
 801ede8:	1d1d1d1d 	.word	0x1d1d1d1d
 801edec:	682a      	ldr	r2, [r5, #0]
 801edee:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801edf2:	68d6      	ldr	r6, [r2, #12]
 801edf4:	4623      	mov	r3, r4
 801edf6:	460a      	mov	r2, r1
 801edf8:	4601      	mov	r1, r0
 801edfa:	46b4      	mov	ip, r6
 801edfc:	4628      	mov	r0, r5
 801edfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ee02:	4760      	bx	ip
 801ee04:	4622      	mov	r2, r4
 801ee06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ee0a:	f7ff bd8d 	b.w	801e928 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ee0e:	4622      	mov	r2, r4
 801ee10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ee14:	f7ff bede 	b.w	801ebd4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801ee18:	4b03      	ldr	r3, [pc, #12]	; (801ee28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801ee1a:	f240 315d 	movw	r1, #861	; 0x35d
 801ee1e:	4a03      	ldr	r2, [pc, #12]	; (801ee2c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801ee20:	4803      	ldr	r0, [pc, #12]	; (801ee30 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801ee22:	f008 fd1b 	bl	802785c <__assert_func>
 801ee26:	bd70      	pop	{r4, r5, r6, pc}
 801ee28:	0802bdfe 	.word	0x0802bdfe
 801ee2c:	0802c55e 	.word	0x0802c55e
 801ee30:	0802bcd9 	.word	0x0802bcd9

0801ee34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ee34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee38:	b093      	sub	sp, #76	; 0x4c
 801ee3a:	880e      	ldrh	r6, [r1, #0]
 801ee3c:	4681      	mov	r9, r0
 801ee3e:	4688      	mov	r8, r1
 801ee40:	4615      	mov	r5, r2
 801ee42:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801ee46:	b136      	cbz	r6, 801ee56 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801ee48:	4b70      	ldr	r3, [pc, #448]	; (801f00c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801ee4a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 801ee4e:	4a70      	ldr	r2, [pc, #448]	; (801f010 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801ee50:	4870      	ldr	r0, [pc, #448]	; (801f014 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801ee52:	f008 fd03 	bl	802785c <__assert_func>
 801ee56:	6810      	ldr	r0, [r2, #0]
 801ee58:	ac0e      	add	r4, sp, #56	; 0x38
 801ee5a:	6851      	ldr	r1, [r2, #4]
 801ee5c:	4f6e      	ldr	r7, [pc, #440]	; (801f018 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801ee5e:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801f01c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801ee62:	c403      	stmia	r4!, {r0, r1}
 801ee64:	6818      	ldr	r0, [r3, #0]
 801ee66:	ac10      	add	r4, sp, #64	; 0x40
 801ee68:	6859      	ldr	r1, [r3, #4]
 801ee6a:	c403      	stmia	r4!, {r0, r1}
 801ee6c:	a80e      	add	r0, sp, #56	; 0x38
 801ee6e:	f7f9 fe57 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ee72:	4629      	mov	r1, r5
 801ee74:	a810      	add	r0, sp, #64	; 0x40
 801ee76:	f7f9 fe7b 	bl	8018b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ee7a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801ee7e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801ee82:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801ee86:	6838      	ldr	r0, [r7, #0]
 801ee88:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ee8c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801ee90:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801ee94:	4489      	add	r9, r1
 801ee96:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801ee9a:	440a      	add	r2, r1
 801ee9c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801eea0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801eea4:	4413      	add	r3, r2
 801eea6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801eeaa:	6803      	ldr	r3, [r0, #0]
 801eeac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eeae:	4798      	blx	r3
 801eeb0:	f010 0f80 	tst.w	r0, #128	; 0x80
 801eeb4:	6838      	ldr	r0, [r7, #0]
 801eeb6:	d01d      	beq.n	801eef4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801eeb8:	210b      	movs	r1, #11
 801eeba:	6802      	ldr	r2, [r0, #0]
 801eebc:	b2a4      	uxth	r4, r4
 801eebe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801eec2:	9107      	str	r1, [sp, #28]
 801eec4:	b2ad      	uxth	r5, r5
 801eec6:	e9cd 6608 	strd	r6, r6, [sp, #32]
 801eeca:	f8bb 1000 	ldrh.w	r1, [fp]
 801eece:	9502      	str	r5, [sp, #8]
 801eed0:	9106      	str	r1, [sp, #24]
 801eed2:	2101      	movs	r1, #1
 801eed4:	9401      	str	r4, [sp, #4]
 801eed6:	e9cd a104 	strd	sl, r1, [sp, #16]
 801eeda:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801eede:	9103      	str	r1, [sp, #12]
 801eee0:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 801eee4:	9100      	str	r1, [sp, #0]
 801eee6:	4649      	mov	r1, r9
 801eee8:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 801eeea:	4642      	mov	r2, r8
 801eeec:	47a0      	blx	r4
 801eeee:	b013      	add	sp, #76	; 0x4c
 801eef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eef4:	6803      	ldr	r3, [r0, #0]
 801eef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eef8:	4798      	blx	r3
 801eefa:	f8bb 3000 	ldrh.w	r3, [fp]
 801eefe:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ef02:	f04f 0e04 	mov.w	lr, #4
 801ef06:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801ef0a:	435d      	muls	r5, r3
 801ef0c:	fb03 1202 	mla	r2, r3, r2, r1
 801ef10:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ef14:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801ef18:	920c      	str	r2, [sp, #48]	; 0x30
 801ef1a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801ef1e:	1b12      	subs	r2, r2, r4
 801ef20:	920d      	str	r2, [sp, #52]	; 0x34
 801ef22:	0062      	lsls	r2, r4, #1
 801ef24:	1b1c      	subs	r4, r3, r4
 801ef26:	920a      	str	r2, [sp, #40]	; 0x28
 801ef28:	0063      	lsls	r3, r4, #1
 801ef2a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ef2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef2e:	4298      	cmp	r0, r3
 801ef30:	d266      	bcs.n	801f000 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801ef32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ef34:	eb00 0b03 	add.w	fp, r0, r3
 801ef38:	4558      	cmp	r0, fp
 801ef3a:	d25c      	bcs.n	801eff6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 801ef3c:	f819 3b01 	ldrb.w	r3, [r9], #1
 801ef40:	fb1e e303 	smlabb	r3, lr, r3, lr
 801ef44:	f858 2003 	ldr.w	r2, [r8, r3]
 801ef48:	0e11      	lsrs	r1, r2, #24
 801ef4a:	d012      	beq.n	801ef72 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801ef4c:	29ff      	cmp	r1, #255	; 0xff
 801ef4e:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801ef52:	d110      	bne.n	801ef76 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801ef54:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ef58:	d10d      	bne.n	801ef76 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801ef5a:	0953      	lsrs	r3, r2, #5
 801ef5c:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801ef60:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ef64:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ef68:	f027 0707 	bic.w	r7, r7, #7
 801ef6c:	431f      	orrs	r7, r3
 801ef6e:	433a      	orrs	r2, r7
 801ef70:	8002      	strh	r2, [r0, #0]
 801ef72:	3002      	adds	r0, #2
 801ef74:	e7e0      	b.n	801ef38 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 801ef76:	fb0a f101 	mul.w	r1, sl, r1
 801ef7a:	8806      	ldrh	r6, [r0, #0]
 801ef7c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801ef80:	b2d2      	uxtb	r2, r2
 801ef82:	1c4b      	adds	r3, r1, #1
 801ef84:	1235      	asrs	r5, r6, #8
 801ef86:	10f4      	asrs	r4, r6, #3
 801ef88:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801ef8c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ef90:	00f6      	lsls	r6, r6, #3
 801ef92:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ef96:	121b      	asrs	r3, r3, #8
 801ef98:	b2f6      	uxtb	r6, r6
 801ef9a:	b299      	uxth	r1, r3
 801ef9c:	43db      	mvns	r3, r3
 801ef9e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801efa2:	fb1c fc01 	smulbb	ip, ip, r1
 801efa6:	b2db      	uxtb	r3, r3
 801efa8:	fb12 f201 	smulbb	r2, r2, r1
 801efac:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801efb0:	fb05 c503 	mla	r5, r5, r3, ip
 801efb4:	b2ff      	uxtb	r7, r7
 801efb6:	fb06 2203 	mla	r2, r6, r3, r2
 801efba:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801efbe:	fb17 f701 	smulbb	r7, r7, r1
 801efc2:	b2ad      	uxth	r5, r5
 801efc4:	b292      	uxth	r2, r2
 801efc6:	fb04 7403 	mla	r4, r4, r3, r7
 801efca:	f105 0c01 	add.w	ip, r5, #1
 801efce:	1c57      	adds	r7, r2, #1
 801efd0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801efd4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801efd8:	b2a4      	uxth	r4, r4
 801efda:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801efde:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801efe2:	433d      	orrs	r5, r7
 801efe4:	1c67      	adds	r7, r4, #1
 801efe6:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801efea:	0964      	lsrs	r4, r4, #5
 801efec:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801eff0:	4325      	orrs	r5, r4
 801eff2:	8005      	strh	r5, [r0, #0]
 801eff4:	e7bd      	b.n	801ef72 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801eff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eff8:	4418      	add	r0, r3
 801effa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801effc:	4499      	add	r9, r3
 801effe:	e795      	b.n	801ef2c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801f000:	4b05      	ldr	r3, [pc, #20]	; (801f018 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801f002:	6818      	ldr	r0, [r3, #0]
 801f004:	6803      	ldr	r3, [r0, #0]
 801f006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f008:	4798      	blx	r3
 801f00a:	e770      	b.n	801eeee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 801f00c:	0802bbd7 	.word	0x0802bbd7
 801f010:	0802c32f 	.word	0x0802c32f
 801f014:	0802bcd9 	.word	0x0802bcd9
 801f018:	2400aeec 	.word	0x2400aeec
 801f01c:	2400aee6 	.word	0x2400aee6

0801f020 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f024:	4614      	mov	r4, r2
 801f026:	880a      	ldrh	r2, [r1, #0]
 801f028:	b087      	sub	sp, #28
 801f02a:	4680      	mov	r8, r0
 801f02c:	2a02      	cmp	r2, #2
 801f02e:	460d      	mov	r5, r1
 801f030:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801f034:	d006      	beq.n	801f044 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801f036:	4b63      	ldr	r3, [pc, #396]	; (801f1c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 801f038:	f240 11e1 	movw	r1, #481	; 0x1e1
 801f03c:	4a62      	ldr	r2, [pc, #392]	; (801f1c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801f03e:	4863      	ldr	r0, [pc, #396]	; (801f1cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 801f040:	f008 fc0c 	bl	802785c <__assert_func>
 801f044:	2e00      	cmp	r6, #0
 801f046:	f000 80b9 	beq.w	801f1bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 801f04a:	6820      	ldr	r0, [r4, #0]
 801f04c:	af02      	add	r7, sp, #8
 801f04e:	6861      	ldr	r1, [r4, #4]
 801f050:	c703      	stmia	r7!, {r0, r1}
 801f052:	6818      	ldr	r0, [r3, #0]
 801f054:	af04      	add	r7, sp, #16
 801f056:	6859      	ldr	r1, [r3, #4]
 801f058:	c703      	stmia	r7!, {r0, r1}
 801f05a:	a802      	add	r0, sp, #8
 801f05c:	f7f9 fd60 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f060:	4621      	mov	r1, r4
 801f062:	a804      	add	r0, sp, #16
 801f064:	f7f9 fd84 	bl	8018b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f068:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f06c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f070:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801f074:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801f078:	fb14 2103 	smlabb	r1, r4, r3, r2
 801f07c:	eb08 0401 	add.w	r4, r8, r1
 801f080:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801f084:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801f088:	440a      	add	r2, r1
 801f08a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801f08e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f092:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f096:	4413      	add	r3, r2
 801f098:	f8ad 3012 	strh.w	r3, [sp, #18]
 801f09c:	4b4c      	ldr	r3, [pc, #304]	; (801f1d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801f09e:	6818      	ldr	r0, [r3, #0]
 801f0a0:	6803      	ldr	r3, [r0, #0]
 801f0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f0a4:	4798      	blx	r3
 801f0a6:	4b4b      	ldr	r3, [pc, #300]	; (801f1d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801f0a8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801f0ac:	2eff      	cmp	r6, #255	; 0xff
 801f0ae:	881a      	ldrh	r2, [r3, #0]
 801f0b0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801f0b4:	fb02 c101 	mla	r1, r2, r1, ip
 801f0b8:	fb02 f207 	mul.w	r2, r2, r7
 801f0bc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f0c0:	f105 0104 	add.w	r1, r5, #4
 801f0c4:	461d      	mov	r5, r3
 801f0c6:	d05a      	beq.n	801f17e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 801f0c8:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801f0cc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f0d0:	b2b6      	uxth	r6, r6
 801f0d2:	9301      	str	r3, [sp, #4]
 801f0d4:	fa1f fe8e 	uxth.w	lr, lr
 801f0d8:	4282      	cmp	r2, r0
 801f0da:	d96a      	bls.n	801f1b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801f0dc:	eb00 0b0a 	add.w	fp, r0, sl
 801f0e0:	4583      	cmp	fp, r0
 801f0e2:	d940      	bls.n	801f166 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 801f0e4:	8805      	ldrh	r5, [r0, #0]
 801f0e6:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f0ea:	122f      	asrs	r7, r5, #8
 801f0ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801f0f0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f0f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f0f8:	00ed      	lsls	r5, r5, #3
 801f0fa:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f0fe:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f102:	fb17 f70e 	smulbb	r7, r7, lr
 801f106:	b2ed      	uxtb	r5, r5
 801f108:	fb19 f90e 	smulbb	r9, r9, lr
 801f10c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f110:	fb15 f50e 	smulbb	r5, r5, lr
 801f114:	fb0c 7c06 	mla	ip, ip, r6, r7
 801f118:	10df      	asrs	r7, r3, #3
 801f11a:	00db      	lsls	r3, r3, #3
 801f11c:	fa1f fc8c 	uxth.w	ip, ip
 801f120:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f124:	b2db      	uxtb	r3, r3
 801f126:	fb07 9706 	mla	r7, r7, r6, r9
 801f12a:	f10c 0901 	add.w	r9, ip, #1
 801f12e:	fb03 5306 	mla	r3, r3, r6, r5
 801f132:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801f136:	b29b      	uxth	r3, r3
 801f138:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801f13c:	b2bf      	uxth	r7, r7
 801f13e:	f103 0c01 	add.w	ip, r3, #1
 801f142:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f146:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f14a:	ea4c 0c09 	orr.w	ip, ip, r9
 801f14e:	f107 0901 	add.w	r9, r7, #1
 801f152:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801f156:	097f      	lsrs	r7, r7, #5
 801f158:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f15c:	ea4c 0c07 	orr.w	ip, ip, r7
 801f160:	f820 cb02 	strh.w	ip, [r0], #2
 801f164:	e7bc      	b.n	801f0e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801f166:	9b01      	ldr	r3, [sp, #4]
 801f168:	881b      	ldrh	r3, [r3, #0]
 801f16a:	eba3 0308 	sub.w	r3, r3, r8
 801f16e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f172:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f176:	eba3 0308 	sub.w	r3, r3, r8
 801f17a:	441c      	add	r4, r3
 801f17c:	e7ac      	b.n	801f0d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 801f17e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f182:	4282      	cmp	r2, r0
 801f184:	d915      	bls.n	801f1b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801f186:	eb00 060a 	add.w	r6, r0, sl
 801f18a:	4286      	cmp	r6, r0
 801f18c:	d906      	bls.n	801f19c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 801f18e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f192:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801f196:	f820 3b02 	strh.w	r3, [r0], #2
 801f19a:	e7f6      	b.n	801f18a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 801f19c:	882b      	ldrh	r3, [r5, #0]
 801f19e:	eba3 0308 	sub.w	r3, r3, r8
 801f1a2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f1a6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f1aa:	eba3 0308 	sub.w	r3, r3, r8
 801f1ae:	441c      	add	r4, r3
 801f1b0:	e7e7      	b.n	801f182 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 801f1b2:	4b07      	ldr	r3, [pc, #28]	; (801f1d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801f1b4:	6818      	ldr	r0, [r3, #0]
 801f1b6:	6803      	ldr	r3, [r0, #0]
 801f1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f1ba:	4798      	blx	r3
 801f1bc:	b007      	add	sp, #28
 801f1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1c2:	bf00      	nop
 801f1c4:	0802bb07 	.word	0x0802bb07
 801f1c8:	0802c199 	.word	0x0802c199
 801f1cc:	0802bcd9 	.word	0x0802bcd9
 801f1d0:	2400aeec 	.word	0x2400aeec
 801f1d4:	2400aee6 	.word	0x2400aee6

0801f1d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1dc:	f8b1 9000 	ldrh.w	r9, [r1]
 801f1e0:	b091      	sub	sp, #68	; 0x44
 801f1e2:	4604      	mov	r4, r0
 801f1e4:	460f      	mov	r7, r1
 801f1e6:	f1b9 0f01 	cmp.w	r9, #1
 801f1ea:	4690      	mov	r8, r2
 801f1ec:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801f1f0:	d006      	beq.n	801f200 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 801f1f2:	4b84      	ldr	r3, [pc, #528]	; (801f404 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 801f1f4:	f240 212f 	movw	r1, #559	; 0x22f
 801f1f8:	4a83      	ldr	r2, [pc, #524]	; (801f408 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 801f1fa:	4884      	ldr	r0, [pc, #528]	; (801f40c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 801f1fc:	f008 fb2e 	bl	802785c <__assert_func>
 801f200:	2d00      	cmp	r5, #0
 801f202:	d04f      	beq.n	801f2a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801f204:	6810      	ldr	r0, [r2, #0]
 801f206:	ae0c      	add	r6, sp, #48	; 0x30
 801f208:	6851      	ldr	r1, [r2, #4]
 801f20a:	f8df b208 	ldr.w	fp, [pc, #520]	; 801f414 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 801f20e:	c603      	stmia	r6!, {r0, r1}
 801f210:	6818      	ldr	r0, [r3, #0]
 801f212:	ae0e      	add	r6, sp, #56	; 0x38
 801f214:	6859      	ldr	r1, [r3, #4]
 801f216:	c603      	stmia	r6!, {r0, r1}
 801f218:	a80c      	add	r0, sp, #48	; 0x30
 801f21a:	f7f9 fc81 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f21e:	4641      	mov	r1, r8
 801f220:	a80e      	add	r0, sp, #56	; 0x38
 801f222:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 801f418 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 801f226:	f7f9 fca3 	bl	8018b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f22a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f22e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f232:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f236:	f8db 0000 	ldr.w	r0, [fp]
 801f23a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f23e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801f242:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801f246:	440c      	add	r4, r1
 801f248:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801f24c:	440a      	add	r2, r1
 801f24e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f252:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801f256:	4413      	add	r3, r2
 801f258:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f25c:	6803      	ldr	r3, [r0, #0]
 801f25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f260:	4798      	blx	r3
 801f262:	f010 0f80 	tst.w	r0, #128	; 0x80
 801f266:	f8db 0000 	ldr.w	r0, [fp]
 801f26a:	d01e      	beq.n	801f2aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 801f26c:	2200      	movs	r2, #0
 801f26e:	6801      	ldr	r1, [r0, #0]
 801f270:	b2b6      	uxth	r6, r6
 801f272:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801f276:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801f27a:	220b      	movs	r2, #11
 801f27c:	9207      	str	r2, [sp, #28]
 801f27e:	f8b8 2000 	ldrh.w	r2, [r8]
 801f282:	9504      	str	r5, [sp, #16]
 801f284:	9601      	str	r6, [sp, #4]
 801f286:	e9cd 9205 	strd	r9, r2, [sp, #20]
 801f28a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801f28e:	9203      	str	r2, [sp, #12]
 801f290:	fa1f f28a 	uxth.w	r2, sl
 801f294:	9202      	str	r2, [sp, #8]
 801f296:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f29a:	9200      	str	r2, [sp, #0]
 801f29c:	463a      	mov	r2, r7
 801f29e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801f2a0:	4621      	mov	r1, r4
 801f2a2:	47a8      	blx	r5
 801f2a4:	b011      	add	sp, #68	; 0x44
 801f2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2aa:	6803      	ldr	r3, [r0, #0]
 801f2ac:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801f2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f2b2:	4798      	blx	r3
 801f2b4:	f8b8 2000 	ldrh.w	r2, [r8]
 801f2b8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f2bc:	2dff      	cmp	r5, #255	; 0xff
 801f2be:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801f2c2:	fb0a fa02 	mul.w	sl, sl, r2
 801f2c6:	fb02 1303 	mla	r3, r2, r3, r1
 801f2ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f2ce:	d062      	beq.n	801f396 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 801f2d0:	ea6f 0c05 	mvn.w	ip, r5
 801f2d4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801f2d8:	b2ad      	uxth	r5, r5
 801f2da:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801f2de:	fa5f fc8c 	uxtb.w	ip, ip
 801f2e2:	930a      	str	r3, [sp, #40]	; 0x28
 801f2e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2e6:	4298      	cmp	r0, r3
 801f2e8:	f080 8085 	bcs.w	801f3f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801f2ec:	eb00 0b09 	add.w	fp, r0, r9
 801f2f0:	4558      	cmp	r0, fp
 801f2f2:	d246      	bcs.n	801f382 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801f2f4:	f814 eb01 	ldrb.w	lr, [r4], #1
 801f2f8:	2303      	movs	r3, #3
 801f2fa:	2204      	movs	r2, #4
 801f2fc:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801f300:	8803      	ldrh	r3, [r0, #0]
 801f302:	eb07 0a0e 	add.w	sl, r7, lr
 801f306:	1219      	asrs	r1, r3, #8
 801f308:	10da      	asrs	r2, r3, #3
 801f30a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f30e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801f312:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f316:	00db      	lsls	r3, r3, #3
 801f318:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f31c:	fb18 f805 	smulbb	r8, r8, r5
 801f320:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801f324:	fb1e fe05 	smulbb	lr, lr, r5
 801f328:	b2db      	uxtb	r3, r3
 801f32a:	fb01 810c 	mla	r1, r1, ip, r8
 801f32e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f332:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801f336:	fb18 f805 	smulbb	r8, r8, r5
 801f33a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801f33e:	b289      	uxth	r1, r1
 801f340:	fb02 820c 	mla	r2, r2, ip, r8
 801f344:	fb03 e30c 	mla	r3, r3, ip, lr
 801f348:	f101 0801 	add.w	r8, r1, #1
 801f34c:	b292      	uxth	r2, r2
 801f34e:	b29b      	uxth	r3, r3
 801f350:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801f354:	f102 0801 	add.w	r8, r2, #1
 801f358:	f103 0e01 	add.w	lr, r3, #1
 801f35c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801f360:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801f364:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801f368:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f36c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f370:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f374:	ea4e 0101 	orr.w	r1, lr, r1
 801f378:	ea41 0108 	orr.w	r1, r1, r8
 801f37c:	f820 1b02 	strh.w	r1, [r0], #2
 801f380:	e7b6      	b.n	801f2f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 801f382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f384:	881b      	ldrh	r3, [r3, #0]
 801f386:	1b9b      	subs	r3, r3, r6
 801f388:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f38c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f390:	1b9b      	subs	r3, r3, r6
 801f392:	441c      	add	r4, r3
 801f394:	e7a6      	b.n	801f2e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 801f396:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801f39a:	2203      	movs	r2, #3
 801f39c:	2504      	movs	r5, #4
 801f39e:	491c      	ldr	r1, [pc, #112]	; (801f410 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 801f3a0:	4550      	cmp	r0, sl
 801f3a2:	d228      	bcs.n	801f3f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801f3a4:	eb00 0c09 	add.w	ip, r0, r9
 801f3a8:	4560      	cmp	r0, ip
 801f3aa:	4623      	mov	r3, r4
 801f3ac:	d219      	bcs.n	801f3e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801f3ae:	f893 e000 	ldrb.w	lr, [r3]
 801f3b2:	3401      	adds	r4, #1
 801f3b4:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801f3b8:	eb07 0b0e 	add.w	fp, r7, lr
 801f3bc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f3c0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801f3c4:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f3c8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801f3cc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801f3d0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f3d4:	ea43 030b 	orr.w	r3, r3, fp
 801f3d8:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801f3dc:	f820 3b02 	strh.w	r3, [r0], #2
 801f3e0:	e7e2      	b.n	801f3a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801f3e2:	f8b8 3000 	ldrh.w	r3, [r8]
 801f3e6:	1b9b      	subs	r3, r3, r6
 801f3e8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f3ec:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f3f0:	1b9b      	subs	r3, r3, r6
 801f3f2:	441c      	add	r4, r3
 801f3f4:	e7d4      	b.n	801f3a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801f3f6:	4b07      	ldr	r3, [pc, #28]	; (801f414 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 801f3f8:	6818      	ldr	r0, [r3, #0]
 801f3fa:	6803      	ldr	r3, [r0, #0]
 801f3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f3fe:	4798      	blx	r3
 801f400:	e750      	b.n	801f2a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801f402:	bf00      	nop
 801f404:	0802bb55 	.word	0x0802bb55
 801f408:	0802c222 	.word	0x0802c222
 801f40c:	0802bcd9 	.word	0x0802bcd9
 801f410:	fffff800 	.word	0xfffff800
 801f414:	2400aeec 	.word	0x2400aeec
 801f418:	2400aee6 	.word	0x2400aee6

0801f41c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801f41c:	b430      	push	{r4, r5}
 801f41e:	780d      	ldrb	r5, [r1, #0]
 801f420:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801f424:	2d01      	cmp	r5, #1
 801f426:	d00a      	beq.n	801f43e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801f428:	d305      	bcc.n	801f436 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801f42a:	2d02      	cmp	r5, #2
 801f42c:	d10b      	bne.n	801f446 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801f42e:	9402      	str	r4, [sp, #8]
 801f430:	bc30      	pop	{r4, r5}
 801f432:	f7ff bdf5 	b.w	801f020 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801f436:	9402      	str	r4, [sp, #8]
 801f438:	bc30      	pop	{r4, r5}
 801f43a:	f7ff bcfb 	b.w	801ee34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801f43e:	9402      	str	r4, [sp, #8]
 801f440:	bc30      	pop	{r4, r5}
 801f442:	f7ff bec9 	b.w	801f1d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801f446:	bc30      	pop	{r4, r5}
 801f448:	4770      	bx	lr
	...

0801f44c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f450:	b087      	sub	sp, #28
 801f452:	4604      	mov	r4, r0
 801f454:	460e      	mov	r6, r1
 801f456:	6810      	ldr	r0, [r2, #0]
 801f458:	6851      	ldr	r1, [r2, #4]
 801f45a:	ad02      	add	r5, sp, #8
 801f45c:	4617      	mov	r7, r2
 801f45e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801f462:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801f694 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801f466:	c503      	stmia	r5!, {r0, r1}
 801f468:	6818      	ldr	r0, [r3, #0]
 801f46a:	ad04      	add	r5, sp, #16
 801f46c:	6859      	ldr	r1, [r3, #4]
 801f46e:	c503      	stmia	r5!, {r0, r1}
 801f470:	a802      	add	r0, sp, #8
 801f472:	f7f9 fb55 	bl	8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f476:	4639      	mov	r1, r7
 801f478:	a804      	add	r0, sp, #16
 801f47a:	f7f9 fb79 	bl	8018b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f47e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f482:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f486:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801f48a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801f48e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f492:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801f496:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801f49a:	440e      	add	r6, r1
 801f49c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801f4a0:	440a      	add	r2, r1
 801f4a2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f4a6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f4aa:	4413      	add	r3, r2
 801f4ac:	f8ad 3012 	strh.w	r3, [sp, #18]
 801f4b0:	4b77      	ldr	r3, [pc, #476]	; (801f690 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801f4b2:	6818      	ldr	r0, [r3, #0]
 801f4b4:	6803      	ldr	r3, [r0, #0]
 801f4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f4b8:	4798      	blx	r3
 801f4ba:	f8b9 b000 	ldrh.w	fp, [r9]
 801f4be:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f4c2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f4c6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f4ca:	fb05 f50b 	mul.w	r5, r5, fp
 801f4ce:	fb0b 2303 	mla	r3, fp, r3, r2
 801f4d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f4d6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801f4da:	9300      	str	r3, [sp, #0]
 801f4dc:	d069      	beq.n	801f5b2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801f4de:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801f4e2:	4558      	cmp	r0, fp
 801f4e4:	f080 80cc 	bcs.w	801f680 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801f4e8:	9b00      	ldr	r3, [sp, #0]
 801f4ea:	4631      	mov	r1, r6
 801f4ec:	18c3      	adds	r3, r0, r3
 801f4ee:	9301      	str	r3, [sp, #4]
 801f4f0:	9b01      	ldr	r3, [sp, #4]
 801f4f2:	4298      	cmp	r0, r3
 801f4f4:	d24f      	bcs.n	801f596 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801f4f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f4fa:	2a00      	cmp	r2, #0
 801f4fc:	d048      	beq.n	801f590 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801f4fe:	fb0a f202 	mul.w	r2, sl, r2
 801f502:	1c53      	adds	r3, r2, #1
 801f504:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f508:	121b      	asrs	r3, r3, #8
 801f50a:	d041      	beq.n	801f590 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801f50c:	8802      	ldrh	r2, [r0, #0]
 801f50e:	b29e      	uxth	r6, r3
 801f510:	f8b4 c000 	ldrh.w	ip, [r4]
 801f514:	43db      	mvns	r3, r3
 801f516:	1215      	asrs	r5, r2, #8
 801f518:	b2db      	uxtb	r3, r3
 801f51a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f51e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f522:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801f526:	fb15 f503 	smulbb	r5, r5, r3
 801f52a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f52e:	00d2      	lsls	r2, r2, #3
 801f530:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f534:	fb07 5706 	mla	r7, r7, r6, r5
 801f538:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f53c:	b2d2      	uxtb	r2, r2
 801f53e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f542:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f546:	fb1e fe03 	smulbb	lr, lr, r3
 801f54a:	b2bf      	uxth	r7, r7
 801f54c:	fb12 f203 	smulbb	r2, r2, r3
 801f550:	fa5f fc8c 	uxtb.w	ip, ip
 801f554:	fb05 e506 	mla	r5, r5, r6, lr
 801f558:	f107 0e01 	add.w	lr, r7, #1
 801f55c:	fb0c 2c06 	mla	ip, ip, r6, r2
 801f560:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801f564:	fa1f fc8c 	uxth.w	ip, ip
 801f568:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801f56c:	b2ad      	uxth	r5, r5
 801f56e:	f10c 0701 	add.w	r7, ip, #1
 801f572:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f576:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f57a:	ea47 070e 	orr.w	r7, r7, lr
 801f57e:	f105 0e01 	add.w	lr, r5, #1
 801f582:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801f586:	096d      	lsrs	r5, r5, #5
 801f588:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f58c:	432f      	orrs	r7, r5
 801f58e:	8007      	strh	r7, [r0, #0]
 801f590:	3002      	adds	r0, #2
 801f592:	3402      	adds	r4, #2
 801f594:	e7ac      	b.n	801f4f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801f596:	f8b9 3000 	ldrh.w	r3, [r9]
 801f59a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f59e:	eba3 0308 	sub.w	r3, r3, r8
 801f5a2:	eba6 0608 	sub.w	r6, r6, r8
 801f5a6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f5aa:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801f5ae:	440e      	add	r6, r1
 801f5b0:	e797      	b.n	801f4e2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801f5b2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801f5b6:	42a8      	cmp	r0, r5
 801f5b8:	d262      	bcs.n	801f680 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801f5ba:	9b00      	ldr	r3, [sp, #0]
 801f5bc:	4631      	mov	r1, r6
 801f5be:	eb00 0b03 	add.w	fp, r0, r3
 801f5c2:	4558      	cmp	r0, fp
 801f5c4:	d24e      	bcs.n	801f664 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801f5c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f5ca:	b12b      	cbz	r3, 801f5d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801f5cc:	2bff      	cmp	r3, #255	; 0xff
 801f5ce:	f8b4 e000 	ldrh.w	lr, [r4]
 801f5d2:	d104      	bne.n	801f5de <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801f5d4:	f8a0 e000 	strh.w	lr, [r0]
 801f5d8:	3002      	adds	r0, #2
 801f5da:	3402      	adds	r4, #2
 801f5dc:	e7f1      	b.n	801f5c2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801f5de:	8802      	ldrh	r2, [r0, #0]
 801f5e0:	b29f      	uxth	r7, r3
 801f5e2:	43db      	mvns	r3, r3
 801f5e4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f5e8:	1216      	asrs	r6, r2, #8
 801f5ea:	b2db      	uxtb	r3, r3
 801f5ec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f5f0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f5f4:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801f5f8:	00d2      	lsls	r2, r2, #3
 801f5fa:	fb16 f603 	smulbb	r6, r6, r3
 801f5fe:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f602:	b2d2      	uxtb	r2, r2
 801f604:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f608:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f60c:	fb1a fa03 	smulbb	sl, sl, r3
 801f610:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f614:	fa1f fc8c 	uxth.w	ip, ip
 801f618:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f61c:	fb12 f303 	smulbb	r3, r2, r3
 801f620:	fa5f fe8e 	uxtb.w	lr, lr
 801f624:	fb06 a607 	mla	r6, r6, r7, sl
 801f628:	f10c 0201 	add.w	r2, ip, #1
 801f62c:	fb0e 3307 	mla	r3, lr, r7, r3
 801f630:	b2b6      	uxth	r6, r6
 801f632:	b29b      	uxth	r3, r3
 801f634:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801f638:	f106 0a01 	add.w	sl, r6, #1
 801f63c:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801f640:	f103 0c01 	add.w	ip, r3, #1
 801f644:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801f648:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f64c:	0976      	lsrs	r6, r6, #5
 801f64e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f652:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f656:	ea4c 0c02 	orr.w	ip, ip, r2
 801f65a:	ea4c 0c06 	orr.w	ip, ip, r6
 801f65e:	f8a0 c000 	strh.w	ip, [r0]
 801f662:	e7b9      	b.n	801f5d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801f664:	f8b9 3000 	ldrh.w	r3, [r9]
 801f668:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f66c:	eba3 0308 	sub.w	r3, r3, r8
 801f670:	eba6 0608 	sub.w	r6, r6, r8
 801f674:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f678:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801f67c:	440e      	add	r6, r1
 801f67e:	e79a      	b.n	801f5b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801f680:	4b03      	ldr	r3, [pc, #12]	; (801f690 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801f682:	6818      	ldr	r0, [r3, #0]
 801f684:	6803      	ldr	r3, [r0, #0]
 801f686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f688:	4798      	blx	r3
 801f68a:	b007      	add	sp, #28
 801f68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f690:	2400aeec 	.word	0x2400aeec
 801f694:	2400aee6 	.word	0x2400aee6

0801f698 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f69c:	b089      	sub	sp, #36	; 0x24
 801f69e:	4682      	mov	sl, r0
 801f6a0:	460f      	mov	r7, r1
 801f6a2:	4691      	mov	r9, r2
 801f6a4:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801f6a8:	4698      	mov	r8, r3
 801f6aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f6ac:	2e00      	cmp	r6, #0
 801f6ae:	d03d      	beq.n	801f72c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f6b0:	4608      	mov	r0, r1
 801f6b2:	f7fc f861 	bl	801b778 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f6b6:	4605      	mov	r5, r0
 801f6b8:	4638      	mov	r0, r7
 801f6ba:	f7fc f897 	bl	801b7ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f6be:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f6c2:	4638      	mov	r0, r7
 801f6c4:	f8ad 9008 	strh.w	r9, [sp, #8]
 801f6c8:	f8ad 500c 	strh.w	r5, [sp, #12]
 801f6cc:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f6d0:	f7fc f95a 	bl	801b988 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f6d4:	4605      	mov	r5, r0
 801f6d6:	4638      	mov	r0, r7
 801f6d8:	f7fc f988 	bl	801b9ec <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f6dc:	4681      	mov	r9, r0
 801f6de:	4638      	mov	r0, r7
 801f6e0:	f7fc f9dc 	bl	801ba9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f6e4:	280b      	cmp	r0, #11
 801f6e6:	f200 816f 	bhi.w	801f9c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 801f6ea:	e8df f010 	tbh	[pc, r0, lsl #1]
 801f6ee:	00c3      	.short	0x00c3
 801f6f0:	000c00b4 	.word	0x000c00b4
 801f6f4:	016d016d 	.word	0x016d016d
 801f6f8:	016d016d 	.word	0x016d016d
 801f6fc:	016d016d 	.word	0x016d016d
 801f700:	016d016d 	.word	0x016d016d
 801f704:	00bb      	.short	0x00bb
 801f706:	4bb3      	ldr	r3, [pc, #716]	; (801f9d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 801f708:	6818      	ldr	r0, [r3, #0]
 801f70a:	6803      	ldr	r3, [r0, #0]
 801f70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f70e:	4798      	blx	r3
 801f710:	2eff      	cmp	r6, #255	; 0xff
 801f712:	d121      	bne.n	801f758 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801f714:	0683      	lsls	r3, r0, #26
 801f716:	d41f      	bmi.n	801f758 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801f718:	4638      	mov	r0, r7
 801f71a:	f7fc f8fb 	bl	801b914 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801f71e:	b940      	cbnz	r0, 801f732 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801f720:	4623      	mov	r3, r4
 801f722:	aa02      	add	r2, sp, #8
 801f724:	4629      	mov	r1, r5
 801f726:	4650      	mov	r0, sl
 801f728:	f7ff f9e4 	bl	801eaf4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801f72c:	b009      	add	sp, #36	; 0x24
 801f72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f732:	f10d 0818 	add.w	r8, sp, #24
 801f736:	4639      	mov	r1, r7
 801f738:	af04      	add	r7, sp, #16
 801f73a:	4640      	mov	r0, r8
 801f73c:	f7fc f890 	bl	801b860 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801f740:	e898 0003 	ldmia.w	r8, {r0, r1}
 801f744:	e887 0003 	stmia.w	r7, {r0, r1}
 801f748:	4638      	mov	r0, r7
 801f74a:	4621      	mov	r1, r4
 801f74c:	f7f5 fc4c 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801f750:	4638      	mov	r0, r7
 801f752:	f7f5 fc8c 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f756:	b130      	cbz	r0, 801f766 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 801f758:	4633      	mov	r3, r6
 801f75a:	4622      	mov	r2, r4
 801f75c:	a902      	add	r1, sp, #8
 801f75e:	4628      	mov	r0, r5
 801f760:	f7ff f8e2 	bl	801e928 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f764:	e7e2      	b.n	801f72c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f766:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f76a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f76e:	4293      	cmp	r3, r2
 801f770:	dd12      	ble.n	801f798 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 801f772:	1a9b      	subs	r3, r3, r2
 801f774:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f778:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f77c:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f780:	4628      	mov	r0, r5
 801f782:	f8ad 201a 	strh.w	r2, [sp, #26]
 801f786:	4642      	mov	r2, r8
 801f788:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f78c:	a902      	add	r1, sp, #8
 801f78e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f792:	4633      	mov	r3, r6
 801f794:	f7ff f8c8 	bl	801e928 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f798:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801f79c:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f7a0:	4293      	cmp	r3, r2
 801f7a2:	dd12      	ble.n	801f7ca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 801f7a4:	1a9b      	subs	r3, r3, r2
 801f7a6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801f7aa:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801f7ae:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f7b2:	4642      	mov	r2, r8
 801f7b4:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f7b8:	4628      	mov	r0, r5
 801f7ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f7be:	23ff      	movs	r3, #255	; 0xff
 801f7c0:	f8ad 101e 	strh.w	r1, [sp, #30]
 801f7c4:	a902      	add	r1, sp, #8
 801f7c6:	f7ff f8af 	bl	801e928 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f7ca:	463b      	mov	r3, r7
 801f7cc:	aa02      	add	r2, sp, #8
 801f7ce:	4629      	mov	r1, r5
 801f7d0:	4650      	mov	r0, sl
 801f7d2:	f7ff f98f 	bl	801eaf4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801f7d6:	88a2      	ldrh	r2, [r4, #4]
 801f7d8:	8823      	ldrh	r3, [r4, #0]
 801f7da:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f7de:	4413      	add	r3, r2
 801f7e0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f7e4:	440a      	add	r2, r1
 801f7e6:	b29b      	uxth	r3, r3
 801f7e8:	b292      	uxth	r2, r2
 801f7ea:	b218      	sxth	r0, r3
 801f7ec:	b211      	sxth	r1, r2
 801f7ee:	4288      	cmp	r0, r1
 801f7f0:	dd12      	ble.n	801f818 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 801f7f2:	1a9b      	subs	r3, r3, r2
 801f7f4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801f7f8:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801f7fc:	4642      	mov	r2, r8
 801f7fe:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f802:	a902      	add	r1, sp, #8
 801f804:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f808:	23ff      	movs	r3, #255	; 0xff
 801f80a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801f80e:	4628      	mov	r0, r5
 801f810:	f8ad 601a 	strh.w	r6, [sp, #26]
 801f814:	f7ff f888 	bl	801e928 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f818:	88e2      	ldrh	r2, [r4, #6]
 801f81a:	8863      	ldrh	r3, [r4, #2]
 801f81c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801f820:	4413      	add	r3, r2
 801f822:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801f826:	440a      	add	r2, r1
 801f828:	b29b      	uxth	r3, r3
 801f82a:	b292      	uxth	r2, r2
 801f82c:	b218      	sxth	r0, r3
 801f82e:	b211      	sxth	r1, r2
 801f830:	4288      	cmp	r0, r1
 801f832:	f77f af7b 	ble.w	801f72c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f836:	1a9b      	subs	r3, r3, r2
 801f838:	f9b4 6000 	ldrsh.w	r6, [r4]
 801f83c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f840:	4642      	mov	r2, r8
 801f842:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f846:	23ff      	movs	r3, #255	; 0xff
 801f848:	f8ad 6018 	strh.w	r6, [sp, #24]
 801f84c:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f850:	f8ad 001c 	strh.w	r0, [sp, #28]
 801f854:	e782      	b.n	801f75c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801f856:	4633      	mov	r3, r6
 801f858:	4622      	mov	r2, r4
 801f85a:	a902      	add	r1, sp, #8
 801f85c:	4628      	mov	r0, r5
 801f85e:	f7ff f9b9 	bl	801ebd4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801f862:	e763      	b.n	801f72c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f864:	9600      	str	r6, [sp, #0]
 801f866:	4623      	mov	r3, r4
 801f868:	aa02      	add	r2, sp, #8
 801f86a:	4649      	mov	r1, r9
 801f86c:	4628      	mov	r0, r5
 801f86e:	f7ff fdd5 	bl	801f41c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f872:	e75b      	b.n	801f72c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f874:	4638      	mov	r0, r7
 801f876:	f7fc f84d 	bl	801b914 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801f87a:	b950      	cbnz	r0, 801f892 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 801f87c:	f8da 3000 	ldr.w	r3, [sl]
 801f880:	aa02      	add	r2, sp, #8
 801f882:	4629      	mov	r1, r5
 801f884:	e9cd 6000 	strd	r6, r0, [sp]
 801f888:	4650      	mov	r0, sl
 801f88a:	68de      	ldr	r6, [r3, #12]
 801f88c:	4623      	mov	r3, r4
 801f88e:	47b0      	blx	r6
 801f890:	e74c      	b.n	801f72c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f892:	f10d 0818 	add.w	r8, sp, #24
 801f896:	4639      	mov	r1, r7
 801f898:	af04      	add	r7, sp, #16
 801f89a:	4640      	mov	r0, r8
 801f89c:	f7fb ffe0 	bl	801b860 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801f8a0:	e898 0003 	ldmia.w	r8, {r0, r1}
 801f8a4:	e887 0003 	stmia.w	r7, {r0, r1}
 801f8a8:	4638      	mov	r0, r7
 801f8aa:	4621      	mov	r1, r4
 801f8ac:	f7f5 fb9c 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801f8b0:	4638      	mov	r0, r7
 801f8b2:	f7f5 fbdc 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f8b6:	b138      	cbz	r0, 801f8c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801f8b8:	4623      	mov	r3, r4
 801f8ba:	9600      	str	r6, [sp, #0]
 801f8bc:	aa02      	add	r2, sp, #8
 801f8be:	4649      	mov	r1, r9
 801f8c0:	4628      	mov	r0, r5
 801f8c2:	f7ff fdc3 	bl	801f44c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f8c6:	e731      	b.n	801f72c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f8c8:	f8da 3000 	ldr.w	r3, [sl]
 801f8cc:	aa02      	add	r2, sp, #8
 801f8ce:	4629      	mov	r1, r5
 801f8d0:	e9cd 6000 	strd	r6, r0, [sp]
 801f8d4:	4650      	mov	r0, sl
 801f8d6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801f8da:	463b      	mov	r3, r7
 801f8dc:	47d8      	blx	fp
 801f8de:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f8e2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f8e6:	4293      	cmp	r3, r2
 801f8e8:	dd13      	ble.n	801f912 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 801f8ea:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f8ee:	1a9b      	subs	r3, r3, r2
 801f8f0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f8f4:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f8f8:	4628      	mov	r0, r5
 801f8fa:	f8ad 201a 	strh.w	r2, [sp, #26]
 801f8fe:	aa02      	add	r2, sp, #8
 801f900:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f904:	4649      	mov	r1, r9
 801f906:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f90a:	4643      	mov	r3, r8
 801f90c:	9600      	str	r6, [sp, #0]
 801f90e:	f7ff fd9d 	bl	801f44c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f912:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801f916:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f91a:	4293      	cmp	r3, r2
 801f91c:	dd13      	ble.n	801f946 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 801f91e:	1a9b      	subs	r3, r3, r2
 801f920:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801f924:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801f928:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f92c:	aa02      	add	r2, sp, #8
 801f92e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f932:	4628      	mov	r0, r5
 801f934:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f938:	4643      	mov	r3, r8
 801f93a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801f93e:	4649      	mov	r1, r9
 801f940:	9600      	str	r6, [sp, #0]
 801f942:	f7ff fd83 	bl	801f44c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f946:	88a2      	ldrh	r2, [r4, #4]
 801f948:	8823      	ldrh	r3, [r4, #0]
 801f94a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f94e:	4413      	add	r3, r2
 801f950:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f954:	440a      	add	r2, r1
 801f956:	b29b      	uxth	r3, r3
 801f958:	b292      	uxth	r2, r2
 801f95a:	b218      	sxth	r0, r3
 801f95c:	b211      	sxth	r1, r2
 801f95e:	4288      	cmp	r0, r1
 801f960:	dd13      	ble.n	801f98a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 801f962:	1a9b      	subs	r3, r3, r2
 801f964:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801f968:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801f96c:	aa02      	add	r2, sp, #8
 801f96e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f972:	4649      	mov	r1, r9
 801f974:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f978:	4643      	mov	r3, r8
 801f97a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801f97e:	4628      	mov	r0, r5
 801f980:	9600      	str	r6, [sp, #0]
 801f982:	f8ad 701a 	strh.w	r7, [sp, #26]
 801f986:	f7ff fd61 	bl	801f44c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f98a:	88e2      	ldrh	r2, [r4, #6]
 801f98c:	8863      	ldrh	r3, [r4, #2]
 801f98e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801f992:	4413      	add	r3, r2
 801f994:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801f998:	440a      	add	r2, r1
 801f99a:	b29b      	uxth	r3, r3
 801f99c:	b292      	uxth	r2, r2
 801f99e:	b218      	sxth	r0, r3
 801f9a0:	b211      	sxth	r1, r2
 801f9a2:	4288      	cmp	r0, r1
 801f9a4:	f77f aec2 	ble.w	801f72c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f9a8:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f9ac:	1a9b      	subs	r3, r3, r2
 801f9ae:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f9b2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f9b6:	4643      	mov	r3, r8
 801f9b8:	f8ad 7018 	strh.w	r7, [sp, #24]
 801f9bc:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f9c0:	f8ad 001c 	strh.w	r0, [sp, #28]
 801f9c4:	9600      	str	r6, [sp, #0]
 801f9c6:	e779      	b.n	801f8bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801f9c8:	4b03      	ldr	r3, [pc, #12]	; (801f9d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 801f9ca:	21b4      	movs	r1, #180	; 0xb4
 801f9cc:	4a03      	ldr	r2, [pc, #12]	; (801f9dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 801f9ce:	4804      	ldr	r0, [pc, #16]	; (801f9e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 801f9d0:	f007 ff44 	bl	802785c <__assert_func>
 801f9d4:	2400aeec 	.word	0x2400aeec
 801f9d8:	0802bba3 	.word	0x0802bba3
 801f9dc:	0802c2ab 	.word	0x0802c2ab
 801f9e0:	0802bcd9 	.word	0x0802bcd9

0801f9e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801f9e4:	b508      	push	{r3, lr}
 801f9e6:	b180      	cbz	r0, 801fa0a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801f9e8:	2902      	cmp	r1, #2
 801f9ea:	d014      	beq.n	801fa16 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801f9ec:	2903      	cmp	r1, #3
 801f9ee:	d01d      	beq.n	801fa2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801f9f0:	2901      	cmp	r1, #1
 801f9f2:	d101      	bne.n	801f9f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801f9f4:	2001      	movs	r0, #1
 801f9f6:	bd08      	pop	{r3, pc}
 801f9f8:	4b0e      	ldr	r3, [pc, #56]	; (801fa34 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801f9fa:	8818      	ldrh	r0, [r3, #0]
 801f9fc:	b990      	cbnz	r0, 801fa24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801f9fe:	4b0e      	ldr	r3, [pc, #56]	; (801fa38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801fa00:	2150      	movs	r1, #80	; 0x50
 801fa02:	4a0e      	ldr	r2, [pc, #56]	; (801fa3c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801fa04:	480e      	ldr	r0, [pc, #56]	; (801fa40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801fa06:	f007 ff29 	bl	802785c <__assert_func>
 801fa0a:	2902      	cmp	r1, #2
 801fa0c:	d00e      	beq.n	801fa2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801fa0e:	2903      	cmp	r1, #3
 801fa10:	d0f2      	beq.n	801f9f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801fa12:	2901      	cmp	r1, #1
 801fa14:	d1ee      	bne.n	801f9f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801fa16:	4b07      	ldr	r3, [pc, #28]	; (801fa34 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801fa18:	8818      	ldrh	r0, [r3, #0]
 801fa1a:	2800      	cmp	r0, #0
 801fa1c:	d0ef      	beq.n	801f9fe <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801fa1e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801fa22:	e7e8      	b.n	801f9f6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801fa24:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801fa28:	4240      	negs	r0, r0
 801fa2a:	e7e4      	b.n	801f9f6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801fa2c:	f04f 30ff 	mov.w	r0, #4294967295
 801fa30:	e7e1      	b.n	801f9f6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801fa32:	bf00      	nop
 801fa34:	2400aee6 	.word	0x2400aee6
 801fa38:	0802be2f 	.word	0x0802be2f
 801fa3c:	0802c428 	.word	0x0802c428
 801fa40:	0802be71 	.word	0x0802be71

0801fa44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801fa44:	b508      	push	{r3, lr}
 801fa46:	b180      	cbz	r0, 801fa6a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801fa48:	2902      	cmp	r1, #2
 801fa4a:	d014      	beq.n	801fa76 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801fa4c:	2903      	cmp	r1, #3
 801fa4e:	d018      	beq.n	801fa82 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801fa50:	2901      	cmp	r1, #1
 801fa52:	d001      	beq.n	801fa58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801fa54:	2001      	movs	r0, #1
 801fa56:	e013      	b.n	801fa80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801fa58:	4b0e      	ldr	r3, [pc, #56]	; (801fa94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801fa5a:	8818      	ldrh	r0, [r3, #0]
 801fa5c:	b970      	cbnz	r0, 801fa7c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801fa5e:	4b0e      	ldr	r3, [pc, #56]	; (801fa98 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801fa60:	2150      	movs	r1, #80	; 0x50
 801fa62:	4a0e      	ldr	r2, [pc, #56]	; (801fa9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801fa64:	480e      	ldr	r0, [pc, #56]	; (801faa0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801fa66:	f007 fef9 	bl	802785c <__assert_func>
 801fa6a:	2902      	cmp	r1, #2
 801fa6c:	d009      	beq.n	801fa82 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801fa6e:	2903      	cmp	r1, #3
 801fa70:	d0f0      	beq.n	801fa54 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801fa72:	2901      	cmp	r1, #1
 801fa74:	d1f0      	bne.n	801fa58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801fa76:	f04f 30ff 	mov.w	r0, #4294967295
 801fa7a:	e001      	b.n	801fa80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801fa7c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801fa80:	bd08      	pop	{r3, pc}
 801fa82:	4b04      	ldr	r3, [pc, #16]	; (801fa94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801fa84:	8818      	ldrh	r0, [r3, #0]
 801fa86:	2800      	cmp	r0, #0
 801fa88:	d0e9      	beq.n	801fa5e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801fa8a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801fa8e:	4240      	negs	r0, r0
 801fa90:	e7f6      	b.n	801fa80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801fa92:	bf00      	nop
 801fa94:	2400aee6 	.word	0x2400aee6
 801fa98:	0802be2f 	.word	0x0802be2f
 801fa9c:	0802c428 	.word	0x0802c428
 801faa0:	0802be71 	.word	0x0802be71

0801faa4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801faa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faa8:	b099      	sub	sp, #100	; 0x64
 801faaa:	910b      	str	r1, [sp, #44]	; 0x2c
 801faac:	a914      	add	r1, sp, #80	; 0x50
 801faae:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801fab2:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801fab6:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801faba:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801fabe:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801fac2:	e881 000c 	stmia.w	r1, {r2, r3}
 801fac6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801faca:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801face:	930a      	str	r3, [sp, #40]	; 0x28
 801fad0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801fad4:	f891 900d 	ldrb.w	r9, [r1, #13]
 801fad8:	9311      	str	r3, [sp, #68]	; 0x44
 801fada:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801fade:	7988      	ldrb	r0, [r1, #6]
 801fae0:	930c      	str	r3, [sp, #48]	; 0x30
 801fae2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801fae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801faea:	4303      	orrs	r3, r0
 801faec:	9309      	str	r3, [sp, #36]	; 0x24
 801faee:	f000 81a1 	beq.w	801fe34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801faf2:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801faf6:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801fafa:	f891 9007 	ldrb.w	r9, [r1, #7]
 801fafe:	ea59 0903 	orrs.w	r9, r9, r3
 801fb02:	f000 8197 	beq.w	801fe34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801fb06:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801fb0a:	b29b      	uxth	r3, r3
 801fb0c:	2e00      	cmp	r6, #0
 801fb0e:	f000 813a 	beq.w	801fd86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801fb12:	1af6      	subs	r6, r6, r3
 801fb14:	b2b6      	uxth	r6, r6
 801fb16:	0433      	lsls	r3, r6, #16
 801fb18:	d502      	bpl.n	801fb20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801fb1a:	1bad      	subs	r5, r5, r6
 801fb1c:	2600      	movs	r6, #0
 801fb1e:	b22d      	sxth	r5, r5
 801fb20:	f9b2 1000 	ldrsh.w	r1, [r2]
 801fb24:	a814      	add	r0, sp, #80	; 0x50
 801fb26:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801fb2a:	428d      	cmp	r5, r1
 801fb2c:	b28b      	uxth	r3, r1
 801fb2e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801fb32:	bfbf      	itttt	lt
 801fb34:	18f6      	addlt	r6, r6, r3
 801fb36:	1b75      	sublt	r5, r6, r5
 801fb38:	b2ae      	uxthlt	r6, r5
 801fb3a:	460d      	movlt	r5, r1
 801fb3c:	8891      	ldrh	r1, [r2, #4]
 801fb3e:	440b      	add	r3, r1
 801fb40:	4629      	mov	r1, r5
 801fb42:	b21b      	sxth	r3, r3
 801fb44:	9310      	str	r3, [sp, #64]	; 0x40
 801fb46:	88d3      	ldrh	r3, [r2, #6]
 801fb48:	8852      	ldrh	r2, [r2, #2]
 801fb4a:	4413      	add	r3, r2
 801fb4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fb4e:	b21b      	sxth	r3, r3
 801fb50:	930f      	str	r3, [sp, #60]	; 0x3c
 801fb52:	4bbd      	ldr	r3, [pc, #756]	; (801fe48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801fb54:	f893 b000 	ldrb.w	fp, [r3]
 801fb58:	f10b 3cff 	add.w	ip, fp, #4294967295
 801fb5c:	f1dc 0300 	rsbs	r3, ip, #0
 801fb60:	eb43 030c 	adc.w	r3, r3, ip
 801fb64:	930e      	str	r3, [sp, #56]	; 0x38
 801fb66:	4653      	mov	r3, sl
 801fb68:	f7f8 fe5e 	bl	8018828 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801fb6c:	4629      	mov	r1, r5
 801fb6e:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801fb72:	4653      	mov	r3, sl
 801fb74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fb76:	a814      	add	r0, sp, #80	; 0x50
 801fb78:	f7f8 fe6e 	bl	8018858 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801fb7c:	a918      	add	r1, sp, #96	; 0x60
 801fb7e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801fb82:	a817      	add	r0, sp, #92	; 0x5c
 801fb84:	f7f8 ff8a 	bl	8018a9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801fb88:	f1ba 0f00 	cmp.w	sl, #0
 801fb8c:	f040 80fe 	bne.w	801fd8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801fb90:	f1bb 0f01 	cmp.w	fp, #1
 801fb94:	f040 8102 	bne.w	801fd9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801fb98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fb9a:	b153      	cbz	r3, 801fbb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801fb9c:	2408      	movs	r4, #8
 801fb9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fba0:	fb94 f3f8 	sdiv	r3, r4, r8
 801fba4:	1e5c      	subs	r4, r3, #1
 801fba6:	4414      	add	r4, r2
 801fba8:	fb94 f4f3 	sdiv	r4, r4, r3
 801fbac:	fb14 f403 	smulbb	r4, r4, r3
 801fbb0:	b2a4      	uxth	r4, r4
 801fbb2:	b906      	cbnz	r6, 801fbb6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 801fbb4:	b16f      	cbz	r7, 801fbd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 801fbb6:	fb07 6304 	mla	r3, r7, r4, r6
 801fbba:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fbbc:	463a      	mov	r2, r7
 801fbbe:	fb08 f303 	mul.w	r3, r8, r3
 801fbc2:	f003 0707 	and.w	r7, r3, #7
 801fbc6:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801fbca:	9328      	str	r3, [sp, #160]	; 0xa0
 801fbcc:	eba9 0302 	sub.w	r3, r9, r2
 801fbd0:	930d      	str	r3, [sp, #52]	; 0x34
 801fbd2:	4651      	mov	r1, sl
 801fbd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fbd6:	f7ff ff05 	bl	801f9e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801fbda:	4651      	mov	r1, sl
 801fbdc:	4681      	mov	r9, r0
 801fbde:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fbe0:	f7ff ff30 	bl	801fa44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801fbe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fbe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fbe8:	4683      	mov	fp, r0
 801fbea:	eba3 0a02 	sub.w	sl, r3, r2
 801fbee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fbf0:	459a      	cmp	sl, r3
 801fbf2:	bfa8      	it	ge
 801fbf4:	469a      	movge	sl, r3
 801fbf6:	f1ba 0f00 	cmp.w	sl, #0
 801fbfa:	f340 811b 	ble.w	801fe34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801fbfe:	1bad      	subs	r5, r5, r6
 801fc00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc02:	1b5d      	subs	r5, r3, r5
 801fc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc06:	429d      	cmp	r5, r3
 801fc08:	bfd4      	ite	le
 801fc0a:	ebc6 0605 	rsble	r6, r6, r5
 801fc0e:	ebc6 0603 	rsbgt	r6, r6, r3
 801fc12:	2e00      	cmp	r6, #0
 801fc14:	f340 810e 	ble.w	801fe34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801fc18:	1ba4      	subs	r4, r4, r6
 801fc1a:	fb08 f304 	mul.w	r3, r8, r4
 801fc1e:	930f      	str	r3, [sp, #60]	; 0x3c
 801fc20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc22:	2b00      	cmp	r3, #0
 801fc24:	f040 810b 	bne.w	801fe3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801fc28:	4b88      	ldr	r3, [pc, #544]	; (801fe4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801fc2a:	6818      	ldr	r0, [r3, #0]
 801fc2c:	6803      	ldr	r3, [r0, #0]
 801fc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc30:	4798      	blx	r3
 801fc32:	2301      	movs	r3, #1
 801fc34:	4a86      	ldr	r2, [pc, #536]	; (801fe50 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801fc36:	fa03 f308 	lsl.w	r3, r3, r8
 801fc3a:	8811      	ldrh	r1, [r2, #0]
 801fc3c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801fc40:	3b01      	subs	r3, #1
 801fc42:	b2db      	uxtb	r3, r3
 801fc44:	930e      	str	r3, [sp, #56]	; 0x38
 801fc46:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801fc4a:	fb01 2303 	mla	r3, r1, r3, r2
 801fc4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fc52:	930a      	str	r3, [sp, #40]	; 0x28
 801fc54:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc56:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801fc5a:	9313      	str	r3, [sp, #76]	; 0x4c
 801fc5c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc5e:	0a19      	lsrs	r1, r3, #8
 801fc60:	b2cb      	uxtb	r3, r1
 801fc62:	9312      	str	r3, [sp, #72]	; 0x48
 801fc64:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc66:	b2db      	uxtb	r3, r3
 801fc68:	9311      	str	r3, [sp, #68]	; 0x44
 801fc6a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc6c:	095a      	lsrs	r2, r3, #5
 801fc6e:	4b79      	ldr	r3, [pc, #484]	; (801fe54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 801fc70:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fc74:	400b      	ands	r3, r1
 801fc76:	4313      	orrs	r3, r2
 801fc78:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801fc7a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fc7e:	4313      	orrs	r3, r2
 801fc80:	b29b      	uxth	r3, r3
 801fc82:	9310      	str	r3, [sp, #64]	; 0x40
 801fc84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc86:	781a      	ldrb	r2, [r3, #0]
 801fc88:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801fc8c:	fb06 b919 	mls	r9, r6, r9, fp
 801fc90:	413a      	asrs	r2, r7
 801fc92:	fb03 fb06 	mul.w	fp, r3, r6
 801fc96:	930d      	str	r3, [sp, #52]	; 0x34
 801fc98:	b2d2      	uxtb	r2, r2
 801fc9a:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801fc9e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801fca2:	f0c0 80ea 	bcc.w	801fe7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 801fca6:	46b6      	mov	lr, r6
 801fca8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801fcac:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801fcb0:	f0c0 80d2 	bcc.w	801fe58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801fcb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcb6:	4013      	ands	r3, r2
 801fcb8:	d055      	beq.n	801fd66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 801fcba:	20ff      	movs	r0, #255	; 0xff
 801fcbc:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fcbe:	fb90 f1f1 	sdiv	r1, r0, r1
 801fcc2:	434b      	muls	r3, r1
 801fcc4:	2bfe      	cmp	r3, #254	; 0xfe
 801fcc6:	dd03      	ble.n	801fcd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 801fcc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fcca:	4281      	cmp	r1, r0
 801fccc:	f000 80b9 	beq.w	801fe42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801fcd0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fcd2:	f8bc 4000 	ldrh.w	r4, [ip]
 801fcd6:	fb11 f303 	smulbb	r3, r1, r3
 801fcda:	1220      	asrs	r0, r4, #8
 801fcdc:	b29b      	uxth	r3, r3
 801fcde:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fce2:	1c59      	adds	r1, r3, #1
 801fce4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801fce8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801fcec:	10e1      	asrs	r1, r4, #3
 801fcee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fcf2:	00e4      	lsls	r4, r4, #3
 801fcf4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fcf8:	b29d      	uxth	r5, r3
 801fcfa:	43db      	mvns	r3, r3
 801fcfc:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801fd00:	b2db      	uxtb	r3, r3
 801fd02:	b2e4      	uxtb	r4, r4
 801fd04:	9309      	str	r3, [sp, #36]	; 0x24
 801fd06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fd08:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801fd0c:	fb13 f905 	smulbb	r9, r3, r5
 801fd10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd12:	fb00 9003 	mla	r0, r0, r3, r9
 801fd16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fd18:	fb13 f905 	smulbb	r9, r3, r5
 801fd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd1e:	b280      	uxth	r0, r0
 801fd20:	fb01 9103 	mla	r1, r1, r3, r9
 801fd24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fd26:	fb13 f505 	smulbb	r5, r3, r5
 801fd2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd2c:	b289      	uxth	r1, r1
 801fd2e:	fb04 5403 	mla	r4, r4, r3, r5
 801fd32:	1c43      	adds	r3, r0, #1
 801fd34:	b2a4      	uxth	r4, r4
 801fd36:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fd3a:	f104 0901 	add.w	r9, r4, #1
 801fd3e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801fd42:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801fd46:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801fd4a:	ea49 0000 	orr.w	r0, r9, r0
 801fd4e:	f101 0901 	add.w	r9, r1, #1
 801fd52:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801fd56:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801fd5a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fd5e:	ea40 0009 	orr.w	r0, r0, r9
 801fd62:	f8ac 0000 	strh.w	r0, [ip]
 801fd66:	4447      	add	r7, r8
 801fd68:	b2bf      	uxth	r7, r7
 801fd6a:	2f07      	cmp	r7, #7
 801fd6c:	bf89      	itett	hi
 801fd6e:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801fd70:	fa42 f208 	asrls.w	r2, r2, r8
 801fd74:	2700      	movhi	r7, #0
 801fd76:	785a      	ldrbhi	r2, [r3, #1]
 801fd78:	bf8a      	itet	hi
 801fd7a:	3301      	addhi	r3, #1
 801fd7c:	b2d2      	uxtbls	r2, r2
 801fd7e:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801fd80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fd82:	449c      	add	ip, r3
 801fd84:	e792      	b.n	801fcac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801fd86:	441d      	add	r5, r3
 801fd88:	b22d      	sxth	r5, r5
 801fd8a:	e6c9      	b.n	801fb20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801fd8c:	f1ba 0f01 	cmp.w	sl, #1
 801fd90:	f47f af02 	bne.w	801fb98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801fd94:	f1bb 0f01 	cmp.w	fp, #1
 801fd98:	f47f aefe 	bne.w	801fb98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801fd9c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801fe4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 801fda0:	f8db 0000 	ldr.w	r0, [fp]
 801fda4:	6803      	ldr	r3, [r0, #0]
 801fda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fda8:	4798      	blx	r3
 801fdaa:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801fdae:	465a      	mov	r2, fp
 801fdb0:	d006      	beq.n	801fdc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801fdb2:	f1b8 0f04 	cmp.w	r8, #4
 801fdb6:	d140      	bne.n	801fe3a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801fdb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fdba:	3300      	adds	r3, #0
 801fdbc:	bf18      	it	ne
 801fdbe:	2301      	movne	r3, #1
 801fdc0:	0580      	lsls	r0, r0, #22
 801fdc2:	d563      	bpl.n	801fe8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801fdc4:	f1b8 0f08 	cmp.w	r8, #8
 801fdc8:	d160      	bne.n	801fe8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	bf0c      	ite	eq
 801fdce:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801fdd2:	f44f 7180 	movne.w	r1, #256	; 0x100
 801fdd6:	2e00      	cmp	r6, #0
 801fdd8:	f47f aede 	bne.w	801fb98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801fddc:	2f00      	cmp	r7, #0
 801fdde:	f47f aedb 	bne.w	801fb98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801fde2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fde4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fde6:	18eb      	adds	r3, r5, r3
 801fde8:	4283      	cmp	r3, r0
 801fdea:	f73f aed5 	bgt.w	801fb98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801fdee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fdf0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801fdf2:	444b      	add	r3, r9
 801fdf4:	4283      	cmp	r3, r0
 801fdf6:	f73f aecf 	bgt.w	801fb98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801fdfa:	f1b8 0f08 	cmp.w	r8, #8
 801fdfe:	6810      	ldr	r0, [r2, #0]
 801fe00:	f04f 0600 	mov.w	r6, #0
 801fe04:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801fe08:	bf18      	it	ne
 801fe0a:	3401      	addne	r4, #1
 801fe0c:	6805      	ldr	r5, [r0, #0]
 801fe0e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801fe12:	bf18      	it	ne
 801fe14:	f024 0401 	bicne.w	r4, r4, #1
 801fe18:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801fe1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fe1e:	bf18      	it	ne
 801fe20:	b2a4      	uxthne	r4, r4
 801fe22:	9104      	str	r1, [sp, #16]
 801fe24:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801fe26:	e9cd 4900 	strd	r4, r9, [sp]
 801fe2a:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801fe2e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fe30:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 801fe32:	47a0      	blx	r4
 801fe34:	b019      	add	sp, #100	; 0x64
 801fe36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe3a:	2300      	movs	r3, #0
 801fe3c:	e7c0      	b.n	801fdc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801fe3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fe40:	e6f7      	b.n	801fc32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 801fe42:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fe44:	e78d      	b.n	801fd62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 801fe46:	bf00      	nop
 801fe48:	2400aee4 	.word	0x2400aee4
 801fe4c:	2400aeec 	.word	0x2400aeec
 801fe50:	2400aee6 	.word	0x2400aee6
 801fe54:	00fff800 	.word	0x00fff800
 801fe58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fe5a:	b153      	cbz	r3, 801fe72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801fe5c:	441f      	add	r7, r3
 801fe5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe60:	b2bf      	uxth	r7, r7
 801fe62:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801fe66:	f007 0707 	and.w	r7, r7, #7
 801fe6a:	781a      	ldrb	r2, [r3, #0]
 801fe6c:	9328      	str	r3, [sp, #160]	; 0xa0
 801fe6e:	413a      	asrs	r2, r7
 801fe70:	b2d2      	uxtb	r2, r2
 801fe72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe74:	445b      	add	r3, fp
 801fe76:	930a      	str	r3, [sp, #40]	; 0x28
 801fe78:	e711      	b.n	801fc9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801fe7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe7c:	2b00      	cmp	r3, #0
 801fe7e:	d1d9      	bne.n	801fe34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801fe80:	4b05      	ldr	r3, [pc, #20]	; (801fe98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 801fe82:	6818      	ldr	r0, [r3, #0]
 801fe84:	6803      	ldr	r3, [r0, #0]
 801fe86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe88:	4798      	blx	r3
 801fe8a:	e7d3      	b.n	801fe34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	f43f ae83 	beq.w	801fb98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801fe92:	f44f 7180 	mov.w	r1, #256	; 0x100
 801fe96:	e79e      	b.n	801fdd6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801fe98:	2400aeec 	.word	0x2400aeec

0801fe9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801fe9c:	b538      	push	{r3, r4, r5, lr}
 801fe9e:	4c15      	ldr	r4, [pc, #84]	; (801fef4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801fea0:	4605      	mov	r5, r0
 801fea2:	7823      	ldrb	r3, [r4, #0]
 801fea4:	f3bf 8f5b 	dmb	ish
 801fea8:	07da      	lsls	r2, r3, #31
 801feaa:	d40b      	bmi.n	801fec4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801feac:	4620      	mov	r0, r4
 801feae:	f007 fca8 	bl	8027802 <__cxa_guard_acquire>
 801feb2:	b138      	cbz	r0, 801fec4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801feb4:	4620      	mov	r0, r4
 801feb6:	f007 fcb0 	bl	802781a <__cxa_guard_release>
 801feba:	4a0f      	ldr	r2, [pc, #60]	; (801fef8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801febc:	490f      	ldr	r1, [pc, #60]	; (801fefc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801febe:	4810      	ldr	r0, [pc, #64]	; (801ff00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801fec0:	f007 fc98 	bl	80277f4 <__aeabi_atexit>
 801fec4:	4c0f      	ldr	r4, [pc, #60]	; (801ff04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801fec6:	7823      	ldrb	r3, [r4, #0]
 801fec8:	f3bf 8f5b 	dmb	ish
 801fecc:	07db      	lsls	r3, r3, #31
 801fece:	d40b      	bmi.n	801fee8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801fed0:	4620      	mov	r0, r4
 801fed2:	f007 fc96 	bl	8027802 <__cxa_guard_acquire>
 801fed6:	b138      	cbz	r0, 801fee8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801fed8:	4620      	mov	r0, r4
 801feda:	f007 fc9e 	bl	802781a <__cxa_guard_release>
 801fede:	4a06      	ldr	r2, [pc, #24]	; (801fef8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801fee0:	4909      	ldr	r1, [pc, #36]	; (801ff08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801fee2:	480a      	ldr	r0, [pc, #40]	; (801ff0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801fee4:	f007 fc86 	bl	80277f4 <__aeabi_atexit>
 801fee8:	4b05      	ldr	r3, [pc, #20]	; (801ff00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801feea:	612b      	str	r3, [r5, #16]
 801feec:	4b07      	ldr	r3, [pc, #28]	; (801ff0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801feee:	616b      	str	r3, [r5, #20]
 801fef0:	bd38      	pop	{r3, r4, r5, pc}
 801fef2:	bf00      	nop
 801fef4:	2400afb8 	.word	0x2400afb8
 801fef8:	24000000 	.word	0x24000000
 801fefc:	0801e09b 	.word	0x0801e09b
 801ff00:	24000090 	.word	0x24000090
 801ff04:	2400afbc 	.word	0x2400afbc
 801ff08:	0801e099 	.word	0x0801e099
 801ff0c:	24000094 	.word	0x24000094

0801ff10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801ff10:	b538      	push	{r3, r4, r5, lr}
 801ff12:	4c15      	ldr	r4, [pc, #84]	; (801ff68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801ff14:	4605      	mov	r5, r0
 801ff16:	7823      	ldrb	r3, [r4, #0]
 801ff18:	f3bf 8f5b 	dmb	ish
 801ff1c:	07da      	lsls	r2, r3, #31
 801ff1e:	d40b      	bmi.n	801ff38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ff20:	4620      	mov	r0, r4
 801ff22:	f007 fc6e 	bl	8027802 <__cxa_guard_acquire>
 801ff26:	b138      	cbz	r0, 801ff38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ff28:	4620      	mov	r0, r4
 801ff2a:	f007 fc76 	bl	802781a <__cxa_guard_release>
 801ff2e:	4a0f      	ldr	r2, [pc, #60]	; (801ff6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ff30:	490f      	ldr	r1, [pc, #60]	; (801ff70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801ff32:	4810      	ldr	r0, [pc, #64]	; (801ff74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ff34:	f007 fc5e 	bl	80277f4 <__aeabi_atexit>
 801ff38:	4c0f      	ldr	r4, [pc, #60]	; (801ff78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801ff3a:	7823      	ldrb	r3, [r4, #0]
 801ff3c:	f3bf 8f5b 	dmb	ish
 801ff40:	07db      	lsls	r3, r3, #31
 801ff42:	d40b      	bmi.n	801ff5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ff44:	4620      	mov	r0, r4
 801ff46:	f007 fc5c 	bl	8027802 <__cxa_guard_acquire>
 801ff4a:	b138      	cbz	r0, 801ff5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ff4c:	4620      	mov	r0, r4
 801ff4e:	f007 fc64 	bl	802781a <__cxa_guard_release>
 801ff52:	4a06      	ldr	r2, [pc, #24]	; (801ff6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ff54:	4909      	ldr	r1, [pc, #36]	; (801ff7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801ff56:	480a      	ldr	r0, [pc, #40]	; (801ff80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801ff58:	f007 fc4c 	bl	80277f4 <__aeabi_atexit>
 801ff5c:	4b05      	ldr	r3, [pc, #20]	; (801ff74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ff5e:	60ab      	str	r3, [r5, #8]
 801ff60:	4b07      	ldr	r3, [pc, #28]	; (801ff80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801ff62:	60eb      	str	r3, [r5, #12]
 801ff64:	bd38      	pop	{r3, r4, r5, pc}
 801ff66:	bf00      	nop
 801ff68:	2400af90 	.word	0x2400af90
 801ff6c:	24000000 	.word	0x24000000
 801ff70:	0801e09f 	.word	0x0801e09f
 801ff74:	24000068 	.word	0x24000068
 801ff78:	2400af94 	.word	0x2400af94
 801ff7c:	0801e09d 	.word	0x0801e09d
 801ff80:	2400006c 	.word	0x2400006c

0801ff84 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801ff84:	b510      	push	{r4, lr}
 801ff86:	4604      	mov	r4, r0
 801ff88:	f7ff ff88 	bl	801fe9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801ff8c:	4620      	mov	r0, r4
 801ff8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff92:	f7ff bfbd 	b.w	801ff10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801ff98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ff98:	b538      	push	{r3, r4, r5, lr}
 801ff9a:	4c15      	ldr	r4, [pc, #84]	; (801fff0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ff9c:	4605      	mov	r5, r0
 801ff9e:	7823      	ldrb	r3, [r4, #0]
 801ffa0:	f3bf 8f5b 	dmb	ish
 801ffa4:	07da      	lsls	r2, r3, #31
 801ffa6:	d40b      	bmi.n	801ffc0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ffa8:	4620      	mov	r0, r4
 801ffaa:	f007 fc2a 	bl	8027802 <__cxa_guard_acquire>
 801ffae:	b138      	cbz	r0, 801ffc0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ffb0:	4620      	mov	r0, r4
 801ffb2:	f007 fc32 	bl	802781a <__cxa_guard_release>
 801ffb6:	4a0f      	ldr	r2, [pc, #60]	; (801fff4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ffb8:	490f      	ldr	r1, [pc, #60]	; (801fff8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ffba:	4810      	ldr	r0, [pc, #64]	; (801fffc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ffbc:	f007 fc1a 	bl	80277f4 <__aeabi_atexit>
 801ffc0:	4c0f      	ldr	r4, [pc, #60]	; (8020000 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ffc2:	7823      	ldrb	r3, [r4, #0]
 801ffc4:	f3bf 8f5b 	dmb	ish
 801ffc8:	07db      	lsls	r3, r3, #31
 801ffca:	d40b      	bmi.n	801ffe4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ffcc:	4620      	mov	r0, r4
 801ffce:	f007 fc18 	bl	8027802 <__cxa_guard_acquire>
 801ffd2:	b138      	cbz	r0, 801ffe4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ffd4:	4620      	mov	r0, r4
 801ffd6:	f007 fc20 	bl	802781a <__cxa_guard_release>
 801ffda:	4a06      	ldr	r2, [pc, #24]	; (801fff4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ffdc:	4909      	ldr	r1, [pc, #36]	; (8020004 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ffde:	480a      	ldr	r0, [pc, #40]	; (8020008 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ffe0:	f007 fc08 	bl	80277f4 <__aeabi_atexit>
 801ffe4:	4b05      	ldr	r3, [pc, #20]	; (801fffc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ffe6:	622b      	str	r3, [r5, #32]
 801ffe8:	4b07      	ldr	r3, [pc, #28]	; (8020008 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ffea:	626b      	str	r3, [r5, #36]	; 0x24
 801ffec:	bd38      	pop	{r3, r4, r5, pc}
 801ffee:	bf00      	nop
 801fff0:	2400afc0 	.word	0x2400afc0
 801fff4:	24000000 	.word	0x24000000
 801fff8:	0801e093 	.word	0x0801e093
 801fffc:	24000098 	.word	0x24000098
 8020000:	2400afc4 	.word	0x2400afc4
 8020004:	0801e091 	.word	0x0801e091
 8020008:	2400009c 	.word	0x2400009c

0802000c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 802000c:	b538      	push	{r3, r4, r5, lr}
 802000e:	4c15      	ldr	r4, [pc, #84]	; (8020064 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8020010:	4605      	mov	r5, r0
 8020012:	7823      	ldrb	r3, [r4, #0]
 8020014:	f3bf 8f5b 	dmb	ish
 8020018:	07da      	lsls	r2, r3, #31
 802001a:	d40b      	bmi.n	8020034 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802001c:	4620      	mov	r0, r4
 802001e:	f007 fbf0 	bl	8027802 <__cxa_guard_acquire>
 8020022:	b138      	cbz	r0, 8020034 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020024:	4620      	mov	r0, r4
 8020026:	f007 fbf8 	bl	802781a <__cxa_guard_release>
 802002a:	4a0f      	ldr	r2, [pc, #60]	; (8020068 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802002c:	490f      	ldr	r1, [pc, #60]	; (802006c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802002e:	4810      	ldr	r0, [pc, #64]	; (8020070 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020030:	f007 fbe0 	bl	80277f4 <__aeabi_atexit>
 8020034:	4c0f      	ldr	r4, [pc, #60]	; (8020074 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8020036:	7823      	ldrb	r3, [r4, #0]
 8020038:	f3bf 8f5b 	dmb	ish
 802003c:	07db      	lsls	r3, r3, #31
 802003e:	d40b      	bmi.n	8020058 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020040:	4620      	mov	r0, r4
 8020042:	f007 fbde 	bl	8027802 <__cxa_guard_acquire>
 8020046:	b138      	cbz	r0, 8020058 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020048:	4620      	mov	r0, r4
 802004a:	f007 fbe6 	bl	802781a <__cxa_guard_release>
 802004e:	4a06      	ldr	r2, [pc, #24]	; (8020068 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020050:	4909      	ldr	r1, [pc, #36]	; (8020078 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8020052:	480a      	ldr	r0, [pc, #40]	; (802007c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020054:	f007 fbce 	bl	80277f4 <__aeabi_atexit>
 8020058:	4b05      	ldr	r3, [pc, #20]	; (8020070 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802005a:	61ab      	str	r3, [r5, #24]
 802005c:	4b07      	ldr	r3, [pc, #28]	; (802007c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802005e:	61eb      	str	r3, [r5, #28]
 8020060:	bd38      	pop	{r3, r4, r5, pc}
 8020062:	bf00      	nop
 8020064:	2400af98 	.word	0x2400af98
 8020068:	24000000 	.word	0x24000000
 802006c:	0801e097 	.word	0x0801e097
 8020070:	24000070 	.word	0x24000070
 8020074:	2400af9c 	.word	0x2400af9c
 8020078:	0801e095 	.word	0x0801e095
 802007c:	24000074 	.word	0x24000074

08020080 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8020080:	b510      	push	{r4, lr}
 8020082:	4604      	mov	r4, r0
 8020084:	f7ff ff88 	bl	801ff98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8020088:	4620      	mov	r0, r4
 802008a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802008e:	f7ff bfbd 	b.w	802000c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08020094 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8020094:	b538      	push	{r3, r4, r5, lr}
 8020096:	4c15      	ldr	r4, [pc, #84]	; (80200ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8020098:	4605      	mov	r5, r0
 802009a:	7823      	ldrb	r3, [r4, #0]
 802009c:	f3bf 8f5b 	dmb	ish
 80200a0:	07da      	lsls	r2, r3, #31
 80200a2:	d40b      	bmi.n	80200bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80200a4:	4620      	mov	r0, r4
 80200a6:	f007 fbac 	bl	8027802 <__cxa_guard_acquire>
 80200aa:	b138      	cbz	r0, 80200bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80200ac:	4620      	mov	r0, r4
 80200ae:	f007 fbb4 	bl	802781a <__cxa_guard_release>
 80200b2:	4a0f      	ldr	r2, [pc, #60]	; (80200f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80200b4:	490f      	ldr	r1, [pc, #60]	; (80200f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80200b6:	4810      	ldr	r0, [pc, #64]	; (80200f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80200b8:	f007 fb9c 	bl	80277f4 <__aeabi_atexit>
 80200bc:	4c0f      	ldr	r4, [pc, #60]	; (80200fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80200be:	7823      	ldrb	r3, [r4, #0]
 80200c0:	f3bf 8f5b 	dmb	ish
 80200c4:	07db      	lsls	r3, r3, #31
 80200c6:	d40b      	bmi.n	80200e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80200c8:	4620      	mov	r0, r4
 80200ca:	f007 fb9a 	bl	8027802 <__cxa_guard_acquire>
 80200ce:	b138      	cbz	r0, 80200e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80200d0:	4620      	mov	r0, r4
 80200d2:	f007 fba2 	bl	802781a <__cxa_guard_release>
 80200d6:	4a06      	ldr	r2, [pc, #24]	; (80200f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80200d8:	4909      	ldr	r1, [pc, #36]	; (8020100 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80200da:	480a      	ldr	r0, [pc, #40]	; (8020104 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80200dc:	f007 fb8a 	bl	80277f4 <__aeabi_atexit>
 80200e0:	4b05      	ldr	r3, [pc, #20]	; (80200f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80200e2:	632b      	str	r3, [r5, #48]	; 0x30
 80200e4:	4b07      	ldr	r3, [pc, #28]	; (8020104 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80200e6:	636b      	str	r3, [r5, #52]	; 0x34
 80200e8:	bd38      	pop	{r3, r4, r5, pc}
 80200ea:	bf00      	nop
 80200ec:	2400afd0 	.word	0x2400afd0
 80200f0:	24000000 	.word	0x24000000
 80200f4:	0801e08b 	.word	0x0801e08b
 80200f8:	240000a8 	.word	0x240000a8
 80200fc:	2400afd4 	.word	0x2400afd4
 8020100:	0801e089 	.word	0x0801e089
 8020104:	240000ac 	.word	0x240000ac

08020108 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8020108:	b538      	push	{r3, r4, r5, lr}
 802010a:	4c15      	ldr	r4, [pc, #84]	; (8020160 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 802010c:	4605      	mov	r5, r0
 802010e:	7823      	ldrb	r3, [r4, #0]
 8020110:	f3bf 8f5b 	dmb	ish
 8020114:	07da      	lsls	r2, r3, #31
 8020116:	d40b      	bmi.n	8020130 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020118:	4620      	mov	r0, r4
 802011a:	f007 fb72 	bl	8027802 <__cxa_guard_acquire>
 802011e:	b138      	cbz	r0, 8020130 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020120:	4620      	mov	r0, r4
 8020122:	f007 fb7a 	bl	802781a <__cxa_guard_release>
 8020126:	4a0f      	ldr	r2, [pc, #60]	; (8020164 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020128:	490f      	ldr	r1, [pc, #60]	; (8020168 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802012a:	4810      	ldr	r0, [pc, #64]	; (802016c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802012c:	f007 fb62 	bl	80277f4 <__aeabi_atexit>
 8020130:	4c0f      	ldr	r4, [pc, #60]	; (8020170 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8020132:	7823      	ldrb	r3, [r4, #0]
 8020134:	f3bf 8f5b 	dmb	ish
 8020138:	07db      	lsls	r3, r3, #31
 802013a:	d40b      	bmi.n	8020154 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802013c:	4620      	mov	r0, r4
 802013e:	f007 fb60 	bl	8027802 <__cxa_guard_acquire>
 8020142:	b138      	cbz	r0, 8020154 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020144:	4620      	mov	r0, r4
 8020146:	f007 fb68 	bl	802781a <__cxa_guard_release>
 802014a:	4a06      	ldr	r2, [pc, #24]	; (8020164 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802014c:	4909      	ldr	r1, [pc, #36]	; (8020174 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802014e:	480a      	ldr	r0, [pc, #40]	; (8020178 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020150:	f007 fb50 	bl	80277f4 <__aeabi_atexit>
 8020154:	4b05      	ldr	r3, [pc, #20]	; (802016c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020156:	62ab      	str	r3, [r5, #40]	; 0x28
 8020158:	4b07      	ldr	r3, [pc, #28]	; (8020178 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802015a:	62eb      	str	r3, [r5, #44]	; 0x2c
 802015c:	bd38      	pop	{r3, r4, r5, pc}
 802015e:	bf00      	nop
 8020160:	2400afa0 	.word	0x2400afa0
 8020164:	24000000 	.word	0x24000000
 8020168:	0801e08f 	.word	0x0801e08f
 802016c:	24000078 	.word	0x24000078
 8020170:	2400afa4 	.word	0x2400afa4
 8020174:	0801e08d 	.word	0x0801e08d
 8020178:	2400007c 	.word	0x2400007c

0802017c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 802017c:	b510      	push	{r4, lr}
 802017e:	4604      	mov	r4, r0
 8020180:	f7ff ff88 	bl	8020094 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8020184:	4620      	mov	r0, r4
 8020186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802018a:	f7ff bfbd 	b.w	8020108 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08020190 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8020190:	b538      	push	{r3, r4, r5, lr}
 8020192:	4c15      	ldr	r4, [pc, #84]	; (80201e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8020194:	4605      	mov	r5, r0
 8020196:	7823      	ldrb	r3, [r4, #0]
 8020198:	f3bf 8f5b 	dmb	ish
 802019c:	07da      	lsls	r2, r3, #31
 802019e:	d40b      	bmi.n	80201b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80201a0:	4620      	mov	r0, r4
 80201a2:	f007 fb2e 	bl	8027802 <__cxa_guard_acquire>
 80201a6:	b138      	cbz	r0, 80201b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80201a8:	4620      	mov	r0, r4
 80201aa:	f007 fb36 	bl	802781a <__cxa_guard_release>
 80201ae:	4a0f      	ldr	r2, [pc, #60]	; (80201ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80201b0:	490f      	ldr	r1, [pc, #60]	; (80201f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80201b2:	4810      	ldr	r0, [pc, #64]	; (80201f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80201b4:	f007 fb1e 	bl	80277f4 <__aeabi_atexit>
 80201b8:	4c0f      	ldr	r4, [pc, #60]	; (80201f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80201ba:	7823      	ldrb	r3, [r4, #0]
 80201bc:	f3bf 8f5b 	dmb	ish
 80201c0:	07db      	lsls	r3, r3, #31
 80201c2:	d40b      	bmi.n	80201dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80201c4:	4620      	mov	r0, r4
 80201c6:	f007 fb1c 	bl	8027802 <__cxa_guard_acquire>
 80201ca:	b138      	cbz	r0, 80201dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80201cc:	4620      	mov	r0, r4
 80201ce:	f007 fb24 	bl	802781a <__cxa_guard_release>
 80201d2:	4a06      	ldr	r2, [pc, #24]	; (80201ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80201d4:	4909      	ldr	r1, [pc, #36]	; (80201fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80201d6:	480a      	ldr	r0, [pc, #40]	; (8020200 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80201d8:	f007 fb0c 	bl	80277f4 <__aeabi_atexit>
 80201dc:	4b05      	ldr	r3, [pc, #20]	; (80201f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80201de:	652b      	str	r3, [r5, #80]	; 0x50
 80201e0:	4b07      	ldr	r3, [pc, #28]	; (8020200 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80201e2:	656b      	str	r3, [r5, #84]	; 0x54
 80201e4:	bd38      	pop	{r3, r4, r5, pc}
 80201e6:	bf00      	nop
 80201e8:	2400afd8 	.word	0x2400afd8
 80201ec:	24000000 	.word	0x24000000
 80201f0:	0801e07b 	.word	0x0801e07b
 80201f4:	240000b0 	.word	0x240000b0
 80201f8:	2400afdc 	.word	0x2400afdc
 80201fc:	0801e079 	.word	0x0801e079
 8020200:	240000b4 	.word	0x240000b4

08020204 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8020204:	b538      	push	{r3, r4, r5, lr}
 8020206:	4c15      	ldr	r4, [pc, #84]	; (802025c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8020208:	4605      	mov	r5, r0
 802020a:	7823      	ldrb	r3, [r4, #0]
 802020c:	f3bf 8f5b 	dmb	ish
 8020210:	07da      	lsls	r2, r3, #31
 8020212:	d40b      	bmi.n	802022c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8020214:	4620      	mov	r0, r4
 8020216:	f007 faf4 	bl	8027802 <__cxa_guard_acquire>
 802021a:	b138      	cbz	r0, 802022c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802021c:	4620      	mov	r0, r4
 802021e:	f007 fafc 	bl	802781a <__cxa_guard_release>
 8020222:	4a0f      	ldr	r2, [pc, #60]	; (8020260 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8020224:	490f      	ldr	r1, [pc, #60]	; (8020264 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8020226:	4810      	ldr	r0, [pc, #64]	; (8020268 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8020228:	f007 fae4 	bl	80277f4 <__aeabi_atexit>
 802022c:	4c0f      	ldr	r4, [pc, #60]	; (802026c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802022e:	7823      	ldrb	r3, [r4, #0]
 8020230:	f3bf 8f5b 	dmb	ish
 8020234:	07db      	lsls	r3, r3, #31
 8020236:	d40b      	bmi.n	8020250 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8020238:	4620      	mov	r0, r4
 802023a:	f007 fae2 	bl	8027802 <__cxa_guard_acquire>
 802023e:	b138      	cbz	r0, 8020250 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8020240:	4620      	mov	r0, r4
 8020242:	f007 faea 	bl	802781a <__cxa_guard_release>
 8020246:	4a06      	ldr	r2, [pc, #24]	; (8020260 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8020248:	4909      	ldr	r1, [pc, #36]	; (8020270 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 802024a:	480a      	ldr	r0, [pc, #40]	; (8020274 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802024c:	f007 fad2 	bl	80277f4 <__aeabi_atexit>
 8020250:	4b05      	ldr	r3, [pc, #20]	; (8020268 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8020252:	64ab      	str	r3, [r5, #72]	; 0x48
 8020254:	4b07      	ldr	r3, [pc, #28]	; (8020274 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8020256:	64eb      	str	r3, [r5, #76]	; 0x4c
 8020258:	bd38      	pop	{r3, r4, r5, pc}
 802025a:	bf00      	nop
 802025c:	2400afe0 	.word	0x2400afe0
 8020260:	24000000 	.word	0x24000000
 8020264:	0801e07f 	.word	0x0801e07f
 8020268:	240000b8 	.word	0x240000b8
 802026c:	2400afe4 	.word	0x2400afe4
 8020270:	0801e07d 	.word	0x0801e07d
 8020274:	240000bc 	.word	0x240000bc

08020278 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8020278:	b538      	push	{r3, r4, r5, lr}
 802027a:	4c15      	ldr	r4, [pc, #84]	; (80202d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 802027c:	4605      	mov	r5, r0
 802027e:	7823      	ldrb	r3, [r4, #0]
 8020280:	f3bf 8f5b 	dmb	ish
 8020284:	07da      	lsls	r2, r3, #31
 8020286:	d40b      	bmi.n	80202a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8020288:	4620      	mov	r0, r4
 802028a:	f007 faba 	bl	8027802 <__cxa_guard_acquire>
 802028e:	b138      	cbz	r0, 80202a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8020290:	4620      	mov	r0, r4
 8020292:	f007 fac2 	bl	802781a <__cxa_guard_release>
 8020296:	4a0f      	ldr	r2, [pc, #60]	; (80202d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8020298:	490f      	ldr	r1, [pc, #60]	; (80202d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802029a:	4810      	ldr	r0, [pc, #64]	; (80202dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802029c:	f007 faaa 	bl	80277f4 <__aeabi_atexit>
 80202a0:	4c0f      	ldr	r4, [pc, #60]	; (80202e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80202a2:	7823      	ldrb	r3, [r4, #0]
 80202a4:	f3bf 8f5b 	dmb	ish
 80202a8:	07db      	lsls	r3, r3, #31
 80202aa:	d40b      	bmi.n	80202c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80202ac:	4620      	mov	r0, r4
 80202ae:	f007 faa8 	bl	8027802 <__cxa_guard_acquire>
 80202b2:	b138      	cbz	r0, 80202c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80202b4:	4620      	mov	r0, r4
 80202b6:	f007 fab0 	bl	802781a <__cxa_guard_release>
 80202ba:	4a06      	ldr	r2, [pc, #24]	; (80202d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80202bc:	4909      	ldr	r1, [pc, #36]	; (80202e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80202be:	480a      	ldr	r0, [pc, #40]	; (80202e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80202c0:	f007 fa98 	bl	80277f4 <__aeabi_atexit>
 80202c4:	4b05      	ldr	r3, [pc, #20]	; (80202dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80202c6:	642b      	str	r3, [r5, #64]	; 0x40
 80202c8:	4b07      	ldr	r3, [pc, #28]	; (80202e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80202ca:	646b      	str	r3, [r5, #68]	; 0x44
 80202cc:	bd38      	pop	{r3, r4, r5, pc}
 80202ce:	bf00      	nop
 80202d0:	2400afa8 	.word	0x2400afa8
 80202d4:	24000000 	.word	0x24000000
 80202d8:	0801e083 	.word	0x0801e083
 80202dc:	24000080 	.word	0x24000080
 80202e0:	2400afac 	.word	0x2400afac
 80202e4:	0801e081 	.word	0x0801e081
 80202e8:	24000084 	.word	0x24000084

080202ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80202ec:	b538      	push	{r3, r4, r5, lr}
 80202ee:	4c15      	ldr	r4, [pc, #84]	; (8020344 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80202f0:	4605      	mov	r5, r0
 80202f2:	7823      	ldrb	r3, [r4, #0]
 80202f4:	f3bf 8f5b 	dmb	ish
 80202f8:	07da      	lsls	r2, r3, #31
 80202fa:	d40b      	bmi.n	8020314 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80202fc:	4620      	mov	r0, r4
 80202fe:	f007 fa80 	bl	8027802 <__cxa_guard_acquire>
 8020302:	b138      	cbz	r0, 8020314 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8020304:	4620      	mov	r0, r4
 8020306:	f007 fa88 	bl	802781a <__cxa_guard_release>
 802030a:	4a0f      	ldr	r2, [pc, #60]	; (8020348 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 802030c:	490f      	ldr	r1, [pc, #60]	; (802034c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802030e:	4810      	ldr	r0, [pc, #64]	; (8020350 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8020310:	f007 fa70 	bl	80277f4 <__aeabi_atexit>
 8020314:	4c0f      	ldr	r4, [pc, #60]	; (8020354 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8020316:	7823      	ldrb	r3, [r4, #0]
 8020318:	f3bf 8f5b 	dmb	ish
 802031c:	07db      	lsls	r3, r3, #31
 802031e:	d40b      	bmi.n	8020338 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8020320:	4620      	mov	r0, r4
 8020322:	f007 fa6e 	bl	8027802 <__cxa_guard_acquire>
 8020326:	b138      	cbz	r0, 8020338 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8020328:	4620      	mov	r0, r4
 802032a:	f007 fa76 	bl	802781a <__cxa_guard_release>
 802032e:	4a06      	ldr	r2, [pc, #24]	; (8020348 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8020330:	4909      	ldr	r1, [pc, #36]	; (8020358 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8020332:	480a      	ldr	r0, [pc, #40]	; (802035c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8020334:	f007 fa5e 	bl	80277f4 <__aeabi_atexit>
 8020338:	4b05      	ldr	r3, [pc, #20]	; (8020350 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802033a:	63ab      	str	r3, [r5, #56]	; 0x38
 802033c:	4b07      	ldr	r3, [pc, #28]	; (802035c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802033e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8020340:	bd38      	pop	{r3, r4, r5, pc}
 8020342:	bf00      	nop
 8020344:	2400afc8 	.word	0x2400afc8
 8020348:	24000000 	.word	0x24000000
 802034c:	0801e087 	.word	0x0801e087
 8020350:	240000a0 	.word	0x240000a0
 8020354:	2400afcc 	.word	0x2400afcc
 8020358:	0801e085 	.word	0x0801e085
 802035c:	240000a4 	.word	0x240000a4

08020360 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8020360:	b510      	push	{r4, lr}
 8020362:	4604      	mov	r4, r0
 8020364:	f7ff ff14 	bl	8020190 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8020368:	4620      	mov	r0, r4
 802036a:	f7ff ff85 	bl	8020278 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 802036e:	4620      	mov	r0, r4
 8020370:	f7ff ff48 	bl	8020204 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8020374:	4620      	mov	r0, r4
 8020376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802037a:	f7ff bfb7 	b.w	80202ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08020380 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8020380:	b538      	push	{r3, r4, r5, lr}
 8020382:	4c15      	ldr	r4, [pc, #84]	; (80203d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8020384:	4605      	mov	r5, r0
 8020386:	7823      	ldrb	r3, [r4, #0]
 8020388:	f3bf 8f5b 	dmb	ish
 802038c:	07da      	lsls	r2, r3, #31
 802038e:	d40b      	bmi.n	80203a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020390:	4620      	mov	r0, r4
 8020392:	f007 fa36 	bl	8027802 <__cxa_guard_acquire>
 8020396:	b138      	cbz	r0, 80203a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020398:	4620      	mov	r0, r4
 802039a:	f007 fa3e 	bl	802781a <__cxa_guard_release>
 802039e:	4a0f      	ldr	r2, [pc, #60]	; (80203dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80203a0:	490f      	ldr	r1, [pc, #60]	; (80203e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80203a2:	4810      	ldr	r0, [pc, #64]	; (80203e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80203a4:	f007 fa26 	bl	80277f4 <__aeabi_atexit>
 80203a8:	4c0f      	ldr	r4, [pc, #60]	; (80203e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80203aa:	7823      	ldrb	r3, [r4, #0]
 80203ac:	f3bf 8f5b 	dmb	ish
 80203b0:	07db      	lsls	r3, r3, #31
 80203b2:	d40b      	bmi.n	80203cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80203b4:	4620      	mov	r0, r4
 80203b6:	f007 fa24 	bl	8027802 <__cxa_guard_acquire>
 80203ba:	b138      	cbz	r0, 80203cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80203bc:	4620      	mov	r0, r4
 80203be:	f007 fa2c 	bl	802781a <__cxa_guard_release>
 80203c2:	4a06      	ldr	r2, [pc, #24]	; (80203dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80203c4:	4909      	ldr	r1, [pc, #36]	; (80203ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80203c6:	480a      	ldr	r0, [pc, #40]	; (80203f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80203c8:	f007 fa14 	bl	80277f4 <__aeabi_atexit>
 80203cc:	4b05      	ldr	r3, [pc, #20]	; (80203e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80203ce:	662b      	str	r3, [r5, #96]	; 0x60
 80203d0:	4b07      	ldr	r3, [pc, #28]	; (80203f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80203d2:	666b      	str	r3, [r5, #100]	; 0x64
 80203d4:	bd38      	pop	{r3, r4, r5, pc}
 80203d6:	bf00      	nop
 80203d8:	2400afb0 	.word	0x2400afb0
 80203dc:	24000000 	.word	0x24000000
 80203e0:	0801e073 	.word	0x0801e073
 80203e4:	24000088 	.word	0x24000088
 80203e8:	2400afb4 	.word	0x2400afb4
 80203ec:	0801e071 	.word	0x0801e071
 80203f0:	2400008c 	.word	0x2400008c

080203f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80203f4:	b538      	push	{r3, r4, r5, lr}
 80203f6:	4c15      	ldr	r4, [pc, #84]	; (802044c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80203f8:	4605      	mov	r5, r0
 80203fa:	7823      	ldrb	r3, [r4, #0]
 80203fc:	f3bf 8f5b 	dmb	ish
 8020400:	07da      	lsls	r2, r3, #31
 8020402:	d40b      	bmi.n	802041c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020404:	4620      	mov	r0, r4
 8020406:	f007 f9fc 	bl	8027802 <__cxa_guard_acquire>
 802040a:	b138      	cbz	r0, 802041c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802040c:	4620      	mov	r0, r4
 802040e:	f007 fa04 	bl	802781a <__cxa_guard_release>
 8020412:	4a0f      	ldr	r2, [pc, #60]	; (8020450 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020414:	490f      	ldr	r1, [pc, #60]	; (8020454 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8020416:	4810      	ldr	r0, [pc, #64]	; (8020458 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020418:	f007 f9ec 	bl	80277f4 <__aeabi_atexit>
 802041c:	4c0f      	ldr	r4, [pc, #60]	; (802045c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802041e:	7823      	ldrb	r3, [r4, #0]
 8020420:	f3bf 8f5b 	dmb	ish
 8020424:	07db      	lsls	r3, r3, #31
 8020426:	d40b      	bmi.n	8020440 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020428:	4620      	mov	r0, r4
 802042a:	f007 f9ea 	bl	8027802 <__cxa_guard_acquire>
 802042e:	b138      	cbz	r0, 8020440 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020430:	4620      	mov	r0, r4
 8020432:	f007 f9f2 	bl	802781a <__cxa_guard_release>
 8020436:	4a06      	ldr	r2, [pc, #24]	; (8020450 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020438:	4909      	ldr	r1, [pc, #36]	; (8020460 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802043a:	480a      	ldr	r0, [pc, #40]	; (8020464 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802043c:	f007 f9da 	bl	80277f4 <__aeabi_atexit>
 8020440:	4b05      	ldr	r3, [pc, #20]	; (8020458 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020442:	65ab      	str	r3, [r5, #88]	; 0x58
 8020444:	4b07      	ldr	r3, [pc, #28]	; (8020464 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8020446:	65eb      	str	r3, [r5, #92]	; 0x5c
 8020448:	bd38      	pop	{r3, r4, r5, pc}
 802044a:	bf00      	nop
 802044c:	2400af88 	.word	0x2400af88
 8020450:	24000000 	.word	0x24000000
 8020454:	0801e077 	.word	0x0801e077
 8020458:	24000060 	.word	0x24000060
 802045c:	2400af8c 	.word	0x2400af8c
 8020460:	0801e075 	.word	0x0801e075
 8020464:	24000064 	.word	0x24000064

08020468 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8020468:	b510      	push	{r4, lr}
 802046a:	4604      	mov	r4, r0
 802046c:	f7ff ff88 	bl	8020380 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8020470:	4620      	mov	r0, r4
 8020472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020476:	f7ff bfbd 	b.w	80203f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0802047c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 802047c:	b538      	push	{r3, r4, r5, lr}
 802047e:	4c15      	ldr	r4, [pc, #84]	; (80204d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8020480:	4605      	mov	r5, r0
 8020482:	7823      	ldrb	r3, [r4, #0]
 8020484:	f3bf 8f5b 	dmb	ish
 8020488:	07da      	lsls	r2, r3, #31
 802048a:	d40b      	bmi.n	80204a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802048c:	4620      	mov	r0, r4
 802048e:	f007 f9b8 	bl	8027802 <__cxa_guard_acquire>
 8020492:	b138      	cbz	r0, 80204a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020494:	4620      	mov	r0, r4
 8020496:	f007 f9c0 	bl	802781a <__cxa_guard_release>
 802049a:	4a0f      	ldr	r2, [pc, #60]	; (80204d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802049c:	490f      	ldr	r1, [pc, #60]	; (80204dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802049e:	4810      	ldr	r0, [pc, #64]	; (80204e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80204a0:	f007 f9a8 	bl	80277f4 <__aeabi_atexit>
 80204a4:	4c0f      	ldr	r4, [pc, #60]	; (80204e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80204a6:	7823      	ldrb	r3, [r4, #0]
 80204a8:	f3bf 8f5b 	dmb	ish
 80204ac:	07db      	lsls	r3, r3, #31
 80204ae:	d40b      	bmi.n	80204c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80204b0:	4620      	mov	r0, r4
 80204b2:	f007 f9a6 	bl	8027802 <__cxa_guard_acquire>
 80204b6:	b138      	cbz	r0, 80204c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80204b8:	4620      	mov	r0, r4
 80204ba:	f007 f9ae 	bl	802781a <__cxa_guard_release>
 80204be:	4a06      	ldr	r2, [pc, #24]	; (80204d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80204c0:	4909      	ldr	r1, [pc, #36]	; (80204e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80204c2:	480a      	ldr	r0, [pc, #40]	; (80204ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80204c4:	f007 f996 	bl	80277f4 <__aeabi_atexit>
 80204c8:	4b05      	ldr	r3, [pc, #20]	; (80204e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80204ca:	672b      	str	r3, [r5, #112]	; 0x70
 80204cc:	4b07      	ldr	r3, [pc, #28]	; (80204ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80204ce:	676b      	str	r3, [r5, #116]	; 0x74
 80204d0:	bd38      	pop	{r3, r4, r5, pc}
 80204d2:	bf00      	nop
 80204d4:	2400af80 	.word	0x2400af80
 80204d8:	24000000 	.word	0x24000000
 80204dc:	0801e06b 	.word	0x0801e06b
 80204e0:	24000058 	.word	0x24000058
 80204e4:	2400af84 	.word	0x2400af84
 80204e8:	0801e069 	.word	0x0801e069
 80204ec:	2400005c 	.word	0x2400005c

080204f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80204f0:	b538      	push	{r3, r4, r5, lr}
 80204f2:	4c15      	ldr	r4, [pc, #84]	; (8020548 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80204f4:	4605      	mov	r5, r0
 80204f6:	7823      	ldrb	r3, [r4, #0]
 80204f8:	f3bf 8f5b 	dmb	ish
 80204fc:	07da      	lsls	r2, r3, #31
 80204fe:	d40b      	bmi.n	8020518 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020500:	4620      	mov	r0, r4
 8020502:	f007 f97e 	bl	8027802 <__cxa_guard_acquire>
 8020506:	b138      	cbz	r0, 8020518 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020508:	4620      	mov	r0, r4
 802050a:	f007 f986 	bl	802781a <__cxa_guard_release>
 802050e:	4a0f      	ldr	r2, [pc, #60]	; (802054c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8020510:	490f      	ldr	r1, [pc, #60]	; (8020550 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8020512:	4810      	ldr	r0, [pc, #64]	; (8020554 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8020514:	f007 f96e 	bl	80277f4 <__aeabi_atexit>
 8020518:	4c0f      	ldr	r4, [pc, #60]	; (8020558 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802051a:	7823      	ldrb	r3, [r4, #0]
 802051c:	f3bf 8f5b 	dmb	ish
 8020520:	07db      	lsls	r3, r3, #31
 8020522:	d40b      	bmi.n	802053c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020524:	4620      	mov	r0, r4
 8020526:	f007 f96c 	bl	8027802 <__cxa_guard_acquire>
 802052a:	b138      	cbz	r0, 802053c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802052c:	4620      	mov	r0, r4
 802052e:	f007 f974 	bl	802781a <__cxa_guard_release>
 8020532:	4a06      	ldr	r2, [pc, #24]	; (802054c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8020534:	4909      	ldr	r1, [pc, #36]	; (802055c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8020536:	480a      	ldr	r0, [pc, #40]	; (8020560 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8020538:	f007 f95c 	bl	80277f4 <__aeabi_atexit>
 802053c:	4b05      	ldr	r3, [pc, #20]	; (8020554 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802053e:	66ab      	str	r3, [r5, #104]	; 0x68
 8020540:	4b07      	ldr	r3, [pc, #28]	; (8020560 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8020542:	66eb      	str	r3, [r5, #108]	; 0x6c
 8020544:	bd38      	pop	{r3, r4, r5, pc}
 8020546:	bf00      	nop
 8020548:	2400af78 	.word	0x2400af78
 802054c:	24000000 	.word	0x24000000
 8020550:	0801e06f 	.word	0x0801e06f
 8020554:	24000050 	.word	0x24000050
 8020558:	2400af7c 	.word	0x2400af7c
 802055c:	0801e06d 	.word	0x0801e06d
 8020560:	24000054 	.word	0x24000054

08020564 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8020564:	b510      	push	{r4, lr}
 8020566:	4604      	mov	r4, r0
 8020568:	f7ff ff88 	bl	802047c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 802056c:	4620      	mov	r0, r4
 802056e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020572:	f7ff bfbd 	b.w	80204f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08020576 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8020576:	b510      	push	{r4, lr}
 8020578:	4604      	mov	r4, r0
 802057a:	f7ff fff3 	bl	8020564 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 802057e:	4620      	mov	r0, r4
 8020580:	f7ff ff72 	bl	8020468 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8020584:	4620      	mov	r0, r4
 8020586:	f7ff fdf9 	bl	802017c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 802058a:	4620      	mov	r0, r4
 802058c:	f7ff fcfa 	bl	801ff84 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8020590:	4620      	mov	r0, r4
 8020592:	f7ff fd75 	bl	8020080 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8020596:	4620      	mov	r0, r4
 8020598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802059c:	f7ff bee0 	b.w	8020360 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080205a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 80205a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205a4:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 80205a8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80205ac:	f1be 0f00 	cmp.w	lr, #0
 80205b0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80205b4:	fb0e 4708 	mla	r7, lr, r8, r4
 80205b8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80205bc:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 80205c0:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80205c4:	eb02 0a07 	add.w	sl, r2, r7
 80205c8:	8808      	ldrh	r0, [r1, #0]
 80205ca:	db37      	blt.n	802063c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80205cc:	45f3      	cmp	fp, lr
 80205ce:	dd35      	ble.n	802063c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80205d0:	2c00      	cmp	r4, #0
 80205d2:	db31      	blt.n	8020638 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80205d4:	45a0      	cmp	r8, r4
 80205d6:	dd2f      	ble.n	8020638 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80205d8:	5dd2      	ldrb	r2, [r2, r7]
 80205da:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 80205de:	1c62      	adds	r2, r4, #1
 80205e0:	d42f      	bmi.n	8020642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80205e2:	4590      	cmp	r8, r2
 80205e4:	dd2d      	ble.n	8020642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80205e6:	b366      	cbz	r6, 8020642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80205e8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80205ec:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80205f0:	f11e 0e01 	adds.w	lr, lr, #1
 80205f4:	d429      	bmi.n	802064a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80205f6:	45f3      	cmp	fp, lr
 80205f8:	dd27      	ble.n	802064a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80205fa:	f1bc 0f00 	cmp.w	ip, #0
 80205fe:	f000 80a1 	beq.w	8020744 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8020602:	2c00      	cmp	r4, #0
 8020604:	db1f      	blt.n	8020646 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8020606:	45a0      	cmp	r8, r4
 8020608:	dd1d      	ble.n	8020646 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802060a:	f81a 2008 	ldrb.w	r2, [sl, r8]
 802060e:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8020612:	3401      	adds	r4, #1
 8020614:	d41c      	bmi.n	8020650 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8020616:	45a0      	cmp	r8, r4
 8020618:	dd1a      	ble.n	8020650 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 802061a:	b1de      	cbz	r6, 8020654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 802061c:	44d0      	add	r8, sl
 802061e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020622:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8020626:	2e0f      	cmp	r6, #15
 8020628:	d915      	bls.n	8020656 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 802062a:	4b49      	ldr	r3, [pc, #292]	; (8020750 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 802062c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8020630:	4a48      	ldr	r2, [pc, #288]	; (8020754 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8020632:	4849      	ldr	r0, [pc, #292]	; (8020758 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8020634:	f007 f912 	bl	802785c <__assert_func>
 8020638:	4681      	mov	r9, r0
 802063a:	e7d0      	b.n	80205de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 802063c:	4607      	mov	r7, r0
 802063e:	4681      	mov	r9, r0
 8020640:	e7d6      	b.n	80205f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8020642:	4607      	mov	r7, r0
 8020644:	e7d4      	b.n	80205f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8020646:	4686      	mov	lr, r0
 8020648:	e7e3      	b.n	8020612 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 802064a:	4603      	mov	r3, r0
 802064c:	4686      	mov	lr, r0
 802064e:	e7ea      	b.n	8020626 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8020650:	4603      	mov	r3, r0
 8020652:	e7e8      	b.n	8020626 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8020654:	4603      	mov	r3, r0
 8020656:	f1bc 0f0f 	cmp.w	ip, #15
 802065a:	d8e6      	bhi.n	802062a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 802065c:	fb16 f80c 	smulbb	r8, r6, ip
 8020660:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8020664:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8020668:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802066c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020670:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8020674:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020678:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802067c:	ea44 0909 	orr.w	r9, r4, r9
 8020680:	f1cc 0410 	rsb	r4, ip, #16
 8020684:	041a      	lsls	r2, r3, #16
 8020686:	ea4a 0707 	orr.w	r7, sl, r7
 802068a:	1ba4      	subs	r4, r4, r6
 802068c:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8020690:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020694:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020698:	4377      	muls	r7, r6
 802069a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802069e:	4313      	orrs	r3, r2
 80206a0:	ea4f 420e 	mov.w	r2, lr, lsl #16
 80206a4:	fb04 7409 	mla	r4, r4, r9, r7
 80206a8:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 80206ac:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80206b0:	b2af      	uxth	r7, r5
 80206b2:	fb08 4303 	mla	r3, r8, r3, r4
 80206b6:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 80206ba:	43ed      	mvns	r5, r5
 80206bc:	10c6      	asrs	r6, r0, #3
 80206be:	4322      	orrs	r2, r4
 80206c0:	b2ed      	uxtb	r5, r5
 80206c2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80206c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80206ca:	fb16 f605 	smulbb	r6, r6, r5
 80206ce:	0d53      	lsrs	r3, r2, #21
 80206d0:	0952      	lsrs	r2, r2, #5
 80206d2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80206d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80206da:	431a      	orrs	r2, r3
 80206dc:	b293      	uxth	r3, r2
 80206de:	1202      	asrs	r2, r0, #8
 80206e0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80206e4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80206e8:	00dc      	lsls	r4, r3, #3
 80206ea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80206ee:	fb12 f205 	smulbb	r2, r2, r5
 80206f2:	b2e4      	uxtb	r4, r4
 80206f4:	fb0c 2c07 	mla	ip, ip, r7, r2
 80206f8:	10da      	asrs	r2, r3, #3
 80206fa:	00c3      	lsls	r3, r0, #3
 80206fc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020700:	fa1f fc8c 	uxth.w	ip, ip
 8020704:	b2db      	uxtb	r3, r3
 8020706:	fb02 6207 	mla	r2, r2, r7, r6
 802070a:	fb13 f305 	smulbb	r3, r3, r5
 802070e:	b296      	uxth	r6, r2
 8020710:	fb04 3307 	mla	r3, r4, r7, r3
 8020714:	b29a      	uxth	r2, r3
 8020716:	f10c 0301 	add.w	r3, ip, #1
 802071a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802071e:	1c53      	adds	r3, r2, #1
 8020720:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020724:	1c72      	adds	r2, r6, #1
 8020726:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802072a:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802072e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020732:	0952      	lsrs	r2, r2, #5
 8020734:	ea43 030c 	orr.w	r3, r3, ip
 8020738:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802073c:	4313      	orrs	r3, r2
 802073e:	800b      	strh	r3, [r1, #0]
 8020740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020744:	2e0f      	cmp	r6, #15
 8020746:	f63f af70 	bhi.w	802062a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 802074a:	4603      	mov	r3, r0
 802074c:	4686      	mov	lr, r0
 802074e:	e785      	b.n	802065c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8020750:	0802bded 	.word	0x0802bded
 8020754:	0802c463 	.word	0x0802c463
 8020758:	0802be71 	.word	0x0802be71

0802075c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020760:	ed2d 8b08 	vpush	{d8-d11}
 8020764:	b099      	sub	sp, #100	; 0x64
 8020766:	eeb0 aa40 	vmov.f32	s20, s0
 802076a:	eef0 9a60 	vmov.f32	s19, s1
 802076e:	9215      	str	r2, [sp, #84]	; 0x54
 8020770:	eeb0 9a41 	vmov.f32	s18, s2
 8020774:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020776:	eeb0 8a62 	vmov.f32	s16, s5
 802077a:	9309      	str	r3, [sp, #36]	; 0x24
 802077c:	eef0 8a43 	vmov.f32	s17, s6
 8020780:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8020784:	eef0 ba44 	vmov.f32	s23, s8
 8020788:	9016      	str	r0, [sp, #88]	; 0x58
 802078a:	eeb0 ba64 	vmov.f32	s22, s9
 802078e:	930d      	str	r3, [sp, #52]	; 0x34
 8020790:	eef0 aa45 	vmov.f32	s21, s10
 8020794:	6850      	ldr	r0, [r2, #4]
 8020796:	910c      	str	r1, [sp, #48]	; 0x30
 8020798:	6812      	ldr	r2, [r2, #0]
 802079a:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802079e:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 80207a2:	fb00 1303 	mla	r3, r0, r3, r1
 80207a6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 80207aa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80207ac:	681b      	ldr	r3, [r3, #0]
 80207ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80207b0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80207b2:	685e      	ldr	r6, [r3, #4]
 80207b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80207b6:	3604      	adds	r6, #4
 80207b8:	43db      	mvns	r3, r3
 80207ba:	b2db      	uxtb	r3, r3
 80207bc:	930a      	str	r3, [sp, #40]	; 0x28
 80207be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	dc03      	bgt.n	80207cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80207c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	f340 8225 	ble.w	8020c16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 80207cc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80207ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80207d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80207d6:	1e48      	subs	r0, r1, #1
 80207d8:	1e57      	subs	r7, r2, #1
 80207da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207dc:	2b00      	cmp	r3, #0
 80207de:	f340 80e3 	ble.w	80209a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 80207e2:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80207e6:	ea4f 4325 	mov.w	r3, r5, asr #16
 80207ea:	d406      	bmi.n	80207fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80207ec:	4584      	cmp	ip, r0
 80207ee:	da04      	bge.n	80207fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	db02      	blt.n	80207fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80207f4:	42bb      	cmp	r3, r7
 80207f6:	f2c0 80d8 	blt.w	80209aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80207fa:	f11c 0c01 	adds.w	ip, ip, #1
 80207fe:	f100 80c9 	bmi.w	8020994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020802:	4561      	cmp	r1, ip
 8020804:	f2c0 80c6 	blt.w	8020994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020808:	3301      	adds	r3, #1
 802080a:	f100 80c3 	bmi.w	8020994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802080e:	429a      	cmp	r2, r3
 8020810:	f2c0 80c0 	blt.w	8020994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020814:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020818:	4647      	mov	r7, r8
 802081a:	f1bb 0f00 	cmp.w	fp, #0
 802081e:	f340 80e3 	ble.w	80209e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8020822:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8020824:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020828:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802082a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802082e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020832:	ea5f 422a 	movs.w	r2, sl, asr #16
 8020836:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802083a:	689b      	ldr	r3, [r3, #8]
 802083c:	f100 8121 	bmi.w	8020a82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8020840:	f103 39ff 	add.w	r9, r3, #4294967295
 8020844:	454a      	cmp	r2, r9
 8020846:	f280 811c 	bge.w	8020a82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802084a:	f1bc 0f00 	cmp.w	ip, #0
 802084e:	f2c0 8118 	blt.w	8020a82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8020852:	f10e 39ff 	add.w	r9, lr, #4294967295
 8020856:	45cc      	cmp	ip, r9
 8020858:	f280 8113 	bge.w	8020a82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802085c:	b21b      	sxth	r3, r3
 802085e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020860:	fb0c 2203 	mla	r2, ip, r3, r2
 8020864:	eb04 0902 	add.w	r9, r4, r2
 8020868:	5ca2      	ldrb	r2, [r4, r2]
 802086a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 802086e:	2800      	cmp	r0, #0
 8020870:	f000 80fe 	beq.w	8020a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8020874:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020878:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802087c:	9211      	str	r2, [sp, #68]	; 0x44
 802087e:	b151      	cbz	r1, 8020896 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020880:	eb09 0203 	add.w	r2, r9, r3
 8020884:	f819 3003 	ldrb.w	r3, [r9, r3]
 8020888:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802088c:	930f      	str	r3, [sp, #60]	; 0x3c
 802088e:	7853      	ldrb	r3, [r2, #1]
 8020890:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020894:	9312      	str	r3, [sp, #72]	; 0x48
 8020896:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020898:	fb10 f201 	smulbb	r2, r0, r1
 802089c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802089e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80208a2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80208a6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80208aa:	10d2      	asrs	r2, r2, #3
 80208ac:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80208b0:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80208b4:	ea4c 0c03 	orr.w	ip, ip, r3
 80208b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80208ba:	041b      	lsls	r3, r3, #16
 80208bc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80208c0:	4323      	orrs	r3, r4
 80208c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80208c4:	4353      	muls	r3, r2
 80208c6:	fb09 330c 	mla	r3, r9, ip, r3
 80208ca:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80208ce:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80208d2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80208d6:	ea4c 0e0e 	orr.w	lr, ip, lr
 80208da:	f1c1 0c10 	rsb	ip, r1, #16
 80208de:	ebac 0c00 	sub.w	ip, ip, r0
 80208e2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80208e6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80208ea:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80208ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80208f0:	0418      	lsls	r0, r3, #16
 80208f2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80208f6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80208fa:	4318      	orrs	r0, r3
 80208fc:	fb02 c200 	mla	r2, r2, r0, ip
 8020900:	8838      	ldrh	r0, [r7, #0]
 8020902:	0d53      	lsrs	r3, r2, #21
 8020904:	0952      	lsrs	r2, r2, #5
 8020906:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802090a:	1201      	asrs	r1, r0, #8
 802090c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020910:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8020914:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020918:	00c0      	lsls	r0, r0, #3
 802091a:	431a      	orrs	r2, r3
 802091c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8020920:	fb11 f104 	smulbb	r1, r1, r4
 8020924:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020928:	b292      	uxth	r2, r2
 802092a:	fb1e fe04 	smulbb	lr, lr, r4
 802092e:	b2c0      	uxtb	r0, r0
 8020930:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8020934:	fb10 f004 	smulbb	r0, r0, r4
 8020938:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802093c:	fb0c 1c03 	mla	ip, ip, r3, r1
 8020940:	10d1      	asrs	r1, r2, #3
 8020942:	00d2      	lsls	r2, r2, #3
 8020944:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020948:	fa1f fc8c 	uxth.w	ip, ip
 802094c:	b2d2      	uxtb	r2, r2
 802094e:	fb01 e103 	mla	r1, r1, r3, lr
 8020952:	fb02 0303 	mla	r3, r2, r3, r0
 8020956:	b289      	uxth	r1, r1
 8020958:	b29a      	uxth	r2, r3
 802095a:	f10c 0301 	add.w	r3, ip, #1
 802095e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020962:	1c53      	adds	r3, r2, #1
 8020964:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020968:	1c4a      	adds	r2, r1, #1
 802096a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802096e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020972:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020976:	0949      	lsrs	r1, r1, #5
 8020978:	ea43 030c 	orr.w	r3, r3, ip
 802097c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020980:	430b      	orrs	r3, r1
 8020982:	803b      	strh	r3, [r7, #0]
 8020984:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020986:	3702      	adds	r7, #2
 8020988:	f10b 3bff 	add.w	fp, fp, #4294967295
 802098c:	449a      	add	sl, r3
 802098e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020990:	441d      	add	r5, r3
 8020992:	e742      	b.n	802081a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8020994:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020996:	f108 0802 	add.w	r8, r8, #2
 802099a:	449a      	add	sl, r3
 802099c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802099e:	441d      	add	r5, r3
 80209a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209a2:	3b01      	subs	r3, #1
 80209a4:	9309      	str	r3, [sp, #36]	; 0x24
 80209a6:	e718      	b.n	80207da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80209a8:	d023      	beq.n	80209f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80209aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209ac:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80209ae:	3b01      	subs	r3, #1
 80209b0:	fb00 a003 	mla	r0, r0, r3, sl
 80209b4:	1400      	asrs	r0, r0, #16
 80209b6:	f53f af2d 	bmi.w	8020814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80209ba:	3901      	subs	r1, #1
 80209bc:	4288      	cmp	r0, r1
 80209be:	f6bf af29 	bge.w	8020814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80209c2:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80209c4:	fb01 5303 	mla	r3, r1, r3, r5
 80209c8:	141b      	asrs	r3, r3, #16
 80209ca:	f53f af23 	bmi.w	8020814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80209ce:	3a01      	subs	r2, #1
 80209d0:	4293      	cmp	r3, r2
 80209d2:	f6bf af1f 	bge.w	8020814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80209d6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80209da:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80209de:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80209e2:	f1be 0f00 	cmp.w	lr, #0
 80209e6:	dc6c      	bgt.n	8020ac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80209e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209ea:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80209ee:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80209f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209f4:	2b00      	cmp	r3, #0
 80209f6:	f340 810e 	ble.w	8020c16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 80209fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80209fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a00:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020a04:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020a08:	eef0 6a48 	vmov.f32	s13, s16
 8020a0c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020a10:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020a14:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a18:	ee16 aa90 	vmov	sl, s13
 8020a1c:	eef0 6a68 	vmov.f32	s13, s17
 8020a20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a24:	ee16 5a90 	vmov	r5, s13
 8020a28:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020a2c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020a30:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020a34:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020a38:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020a3c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020a40:	ee18 2a10 	vmov	r2, s16
 8020a44:	eeb0 8a47 	vmov.f32	s16, s14
 8020a48:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a4c:	ee18 2a90 	vmov	r2, s17
 8020a50:	932d      	str	r3, [sp, #180]	; 0xb4
 8020a52:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a54:	eef0 8a67 	vmov.f32	s17, s15
 8020a58:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a5c:	932e      	str	r3, [sp, #184]	; 0xb8
 8020a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a60:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8020a62:	3b01      	subs	r3, #1
 8020a64:	930c      	str	r3, [sp, #48]	; 0x30
 8020a66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a68:	bf08      	it	eq
 8020a6a:	4613      	moveq	r3, r2
 8020a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8020a6e:	e6a6      	b.n	80207be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020a70:	2900      	cmp	r1, #0
 8020a72:	f43f af10 	beq.w	8020896 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020a76:	f819 3003 	ldrb.w	r3, [r9, r3]
 8020a7a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020a80:	e709      	b.n	8020896 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020a82:	f112 0901 	adds.w	r9, r2, #1
 8020a86:	f53f af7d 	bmi.w	8020984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020a8a:	454b      	cmp	r3, r9
 8020a8c:	f6ff af7a 	blt.w	8020984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020a90:	f11c 0901 	adds.w	r9, ip, #1
 8020a94:	f53f af76 	bmi.w	8020984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020a98:	45ce      	cmp	lr, r9
 8020a9a:	f6ff af73 	blt.w	8020984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020a9e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020aa0:	b21b      	sxth	r3, r3
 8020aa2:	9202      	str	r2, [sp, #8]
 8020aa4:	fa0f f28e 	sxth.w	r2, lr
 8020aa8:	9300      	str	r3, [sp, #0]
 8020aaa:	4633      	mov	r3, r6
 8020aac:	9201      	str	r2, [sp, #4]
 8020aae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020ab0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020ab4:	e9cd c003 	strd	ip, r0, [sp, #12]
 8020ab8:	4639      	mov	r1, r7
 8020aba:	9816      	ldr	r0, [sp, #88]	; 0x58
 8020abc:	f7ff fd70 	bl	80205a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8020ac0:	e760      	b.n	8020984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020ac2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020ac4:	ea4f 422a 	mov.w	r2, sl, asr #16
 8020ac8:	1429      	asrs	r1, r5, #16
 8020aca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020acc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020ad0:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8020ad4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020ad8:	fb03 2101 	mla	r1, r3, r1, r2
 8020adc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020ade:	440a      	add	r2, r1
 8020ae0:	5c61      	ldrb	r1, [r4, r1]
 8020ae2:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8020ae6:	f1bc 0f00 	cmp.w	ip, #0
 8020aea:	f000 808c 	beq.w	8020c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8020aee:	7857      	ldrb	r7, [r2, #1]
 8020af0:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8020af4:	9413      	str	r4, [sp, #76]	; 0x4c
 8020af6:	b140      	cbz	r0, 8020b0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020af8:	18d7      	adds	r7, r2, r3
 8020afa:	5cd3      	ldrb	r3, [r2, r3]
 8020afc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020b00:	9310      	str	r3, [sp, #64]	; 0x40
 8020b02:	787b      	ldrb	r3, [r7, #1]
 8020b04:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020b08:	9314      	str	r3, [sp, #80]	; 0x50
 8020b0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020b0c:	fb1c f200 	smulbb	r2, ip, r0
 8020b10:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020b12:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020b16:	041f      	lsls	r7, r3, #16
 8020b18:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020b1c:	10d2      	asrs	r2, r2, #3
 8020b1e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8020b22:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8020b26:	431f      	orrs	r7, r3
 8020b28:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8020b2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8020b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020b30:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020b32:	041b      	lsls	r3, r3, #16
 8020b34:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020b38:	ea43 030b 	orr.w	r3, r3, fp
 8020b3c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020b40:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020b44:	4353      	muls	r3, r2
 8020b46:	fb04 3707 	mla	r7, r4, r7, r3
 8020b4a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8020b4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020b50:	ea43 0b01 	orr.w	fp, r3, r1
 8020b54:	f1c0 0110 	rsb	r1, r0, #16
 8020b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b5a:	eba1 0c0c 	sub.w	ip, r1, ip
 8020b5e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8020b62:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8020b66:	fb0c 770b 	mla	r7, ip, fp, r7
 8020b6a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020b6e:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8020b72:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020b76:	ea4c 0c0b 	orr.w	ip, ip, fp
 8020b7a:	fb02 770c 	mla	r7, r2, ip, r7
 8020b7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b80:	0d79      	lsrs	r1, r7, #21
 8020b82:	8812      	ldrh	r2, [r2, #0]
 8020b84:	097f      	lsrs	r7, r7, #5
 8020b86:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020b8a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020b8e:	430f      	orrs	r7, r1
 8020b90:	1211      	asrs	r1, r2, #8
 8020b92:	b2bb      	uxth	r3, r7
 8020b94:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020b98:	10d7      	asrs	r7, r2, #3
 8020b9a:	fb11 f104 	smulbb	r1, r1, r4
 8020b9e:	1218      	asrs	r0, r3, #8
 8020ba0:	00d2      	lsls	r2, r2, #3
 8020ba2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020ba6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020baa:	fb17 f704 	smulbb	r7, r7, r4
 8020bae:	b2d2      	uxtb	r2, r2
 8020bb0:	fb00 1009 	mla	r0, r0, r9, r1
 8020bb4:	10d9      	asrs	r1, r3, #3
 8020bb6:	fb12 f204 	smulbb	r2, r2, r4
 8020bba:	00db      	lsls	r3, r3, #3
 8020bbc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020bc0:	b280      	uxth	r0, r0
 8020bc2:	b2db      	uxtb	r3, r3
 8020bc4:	fb01 7109 	mla	r1, r1, r9, r7
 8020bc8:	fb03 2309 	mla	r3, r3, r9, r2
 8020bcc:	1c42      	adds	r2, r0, #1
 8020bce:	b289      	uxth	r1, r1
 8020bd0:	b29b      	uxth	r3, r3
 8020bd2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020bd6:	1c4f      	adds	r7, r1, #1
 8020bd8:	1c5a      	adds	r2, r3, #1
 8020bda:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8020bde:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8020be2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020be8:	0949      	lsrs	r1, r1, #5
 8020bea:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020bee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020bf2:	4310      	orrs	r0, r2
 8020bf4:	4308      	orrs	r0, r1
 8020bf6:	f823 0b02 	strh.w	r0, [r3], #2
 8020bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8020bfc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020bfe:	449a      	add	sl, r3
 8020c00:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020c02:	441d      	add	r5, r3
 8020c04:	e6ed      	b.n	80209e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8020c06:	2800      	cmp	r0, #0
 8020c08:	f43f af7f 	beq.w	8020b0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020c0c:	5cd3      	ldrb	r3, [r2, r3]
 8020c0e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020c12:	9310      	str	r3, [sp, #64]	; 0x40
 8020c14:	e779      	b.n	8020b0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020c16:	b019      	add	sp, #100	; 0x64
 8020c18:	ecbd 8b08 	vpop	{d8-d11}
 8020c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8020c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020c24:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8020c28:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8020c2c:	2e00      	cmp	r6, #0
 8020c2e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020c32:	fb06 570e 	mla	r7, r6, lr, r5
 8020c36:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8020c3a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8020c3e:	eb02 0807 	add.w	r8, r2, r7
 8020c42:	8808      	ldrh	r0, [r1, #0]
 8020c44:	db38      	blt.n	8020cb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8020c46:	45b1      	cmp	r9, r6
 8020c48:	dd36      	ble.n	8020cb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8020c4a:	2d00      	cmp	r5, #0
 8020c4c:	db32      	blt.n	8020cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8020c4e:	45ae      	cmp	lr, r5
 8020c50:	dd30      	ble.n	8020cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8020c52:	5dd2      	ldrb	r2, [r2, r7]
 8020c54:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8020c58:	1c6a      	adds	r2, r5, #1
 8020c5a:	d430      	bmi.n	8020cbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8020c5c:	4596      	cmp	lr, r2
 8020c5e:	dd2e      	ble.n	8020cbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8020c60:	b36c      	cbz	r4, 8020cbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8020c62:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020c66:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8020c6a:	3601      	adds	r6, #1
 8020c6c:	d42b      	bmi.n	8020cc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8020c6e:	45b1      	cmp	r9, r6
 8020c70:	dd29      	ble.n	8020cc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8020c72:	f1bc 0f00 	cmp.w	ip, #0
 8020c76:	d028      	beq.n	8020cca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8020c78:	2d00      	cmp	r5, #0
 8020c7a:	db22      	blt.n	8020cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8020c7c:	45ae      	cmp	lr, r5
 8020c7e:	dd20      	ble.n	8020cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8020c80:	f818 600e 	ldrb.w	r6, [r8, lr]
 8020c84:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8020c88:	3501      	adds	r5, #1
 8020c8a:	d407      	bmi.n	8020c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8020c8c:	45ae      	cmp	lr, r5
 8020c8e:	dd05      	ble.n	8020c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8020c90:	b134      	cbz	r4, 8020ca0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8020c92:	44c6      	add	lr, r8
 8020c94:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020c98:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8020c9c:	2c0f      	cmp	r4, #15
 8020c9e:	d802      	bhi.n	8020ca6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8020ca0:	f1bc 0f0f 	cmp.w	ip, #15
 8020ca4:	d914      	bls.n	8020cd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8020ca6:	4b26      	ldr	r3, [pc, #152]	; (8020d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8020ca8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8020cac:	4a25      	ldr	r2, [pc, #148]	; (8020d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8020cae:	4826      	ldr	r0, [pc, #152]	; (8020d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8020cb0:	f006 fdd4 	bl	802785c <__assert_func>
 8020cb4:	4607      	mov	r7, r0
 8020cb6:	e7cf      	b.n	8020c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8020cb8:	4602      	mov	r2, r0
 8020cba:	4607      	mov	r7, r0
 8020cbc:	e7d5      	b.n	8020c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8020cbe:	4602      	mov	r2, r0
 8020cc0:	e7d3      	b.n	8020c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8020cc2:	4606      	mov	r6, r0
 8020cc4:	e7e0      	b.n	8020c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8020cc6:	4606      	mov	r6, r0
 8020cc8:	e7e8      	b.n	8020c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8020cca:	2c0f      	cmp	r4, #15
 8020ccc:	d8eb      	bhi.n	8020ca6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8020cce:	4606      	mov	r6, r0
 8020cd0:	fb14 f30c 	smulbb	r3, r4, ip
 8020cd4:	043d      	lsls	r5, r7, #16
 8020cd6:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8020cda:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020cde:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8020ce2:	10db      	asrs	r3, r3, #3
 8020ce4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020ce8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020cec:	432f      	orrs	r7, r5
 8020cee:	f1cc 0510 	rsb	r5, ip, #16
 8020cf2:	ea4e 0202 	orr.w	r2, lr, r2
 8020cf6:	1b2d      	subs	r5, r5, r4
 8020cf8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8020cfc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020d00:	4354      	muls	r4, r2
 8020d02:	fb05 4507 	mla	r5, r5, r7, r4
 8020d06:	0404      	lsls	r4, r0, #16
 8020d08:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020d0c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020d10:	4320      	orrs	r0, r4
 8020d12:	fb03 5400 	mla	r4, r3, r0, r5
 8020d16:	0430      	lsls	r0, r6, #16
 8020d18:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8020d1c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020d20:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020d24:	4330      	orrs	r0, r6
 8020d26:	fb03 4000 	mla	r0, r3, r0, r4
 8020d2a:	0d43      	lsrs	r3, r0, #21
 8020d2c:	0940      	lsrs	r0, r0, #5
 8020d2e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020d32:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020d36:	4318      	orrs	r0, r3
 8020d38:	8008      	strh	r0, [r1, #0]
 8020d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020d3e:	bf00      	nop
 8020d40:	0802bded 	.word	0x0802bded
 8020d44:	0802c463 	.word	0x0802c463
 8020d48:	0802be71 	.word	0x0802be71

08020d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d50:	ed2d 8b0a 	vpush	{d8-d12}
 8020d54:	b093      	sub	sp, #76	; 0x4c
 8020d56:	eeb0 aa40 	vmov.f32	s20, s0
 8020d5a:	eef0 9a60 	vmov.f32	s19, s1
 8020d5e:	920f      	str	r2, [sp, #60]	; 0x3c
 8020d60:	eeb0 9a41 	vmov.f32	s18, s2
 8020d64:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020d66:	eeb0 8a62 	vmov.f32	s16, s5
 8020d6a:	9010      	str	r0, [sp, #64]	; 0x40
 8020d6c:	eef0 8a43 	vmov.f32	s17, s6
 8020d70:	6850      	ldr	r0, [r2, #4]
 8020d72:	eeb0 ca44 	vmov.f32	s24, s8
 8020d76:	9108      	str	r1, [sp, #32]
 8020d78:	eef0 ba64 	vmov.f32	s23, s9
 8020d7c:	9306      	str	r3, [sp, #24]
 8020d7e:	eeb0 ba45 	vmov.f32	s22, s10
 8020d82:	6812      	ldr	r2, [r2, #0]
 8020d84:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020d88:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020d8c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8020d90:	fb00 1303 	mla	r3, r0, r3, r1
 8020d94:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8020d98:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020d9a:	681b      	ldr	r3, [r3, #0]
 8020d9c:	9307      	str	r3, [sp, #28]
 8020d9e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020da0:	685f      	ldr	r7, [r3, #4]
 8020da2:	3704      	adds	r7, #4
 8020da4:	9b08      	ldr	r3, [sp, #32]
 8020da6:	2b00      	cmp	r3, #0
 8020da8:	dc03      	bgt.n	8020db2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020daa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	f340 81b2 	ble.w	8021116 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8020db2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020db4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020db8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020dbc:	1e48      	subs	r0, r1, #1
 8020dbe:	f102 3cff 	add.w	ip, r2, #4294967295
 8020dc2:	9b06      	ldr	r3, [sp, #24]
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	f340 80a9 	ble.w	8020f1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8020dca:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020dce:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020dd2:	d406      	bmi.n	8020de2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020dd4:	4586      	cmp	lr, r0
 8020dd6:	da04      	bge.n	8020de2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	db02      	blt.n	8020de2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020ddc:	4563      	cmp	r3, ip
 8020dde:	f2c0 809e 	blt.w	8020f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020de2:	f11e 0e01 	adds.w	lr, lr, #1
 8020de6:	f100 808f 	bmi.w	8020f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020dea:	4571      	cmp	r1, lr
 8020dec:	f2c0 808c 	blt.w	8020f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020df0:	3301      	adds	r3, #1
 8020df2:	f100 8089 	bmi.w	8020f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020df6:	429a      	cmp	r2, r3
 8020df8:	f2c0 8086 	blt.w	8020f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020dfc:	f8dd b018 	ldr.w	fp, [sp, #24]
 8020e00:	46c8      	mov	r8, r9
 8020e02:	f1bb 0f00 	cmp.w	fp, #0
 8020e06:	f340 80a6 	ble.w	8020f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020e0a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020e0c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020e10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020e12:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020e16:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020e1a:	1422      	asrs	r2, r4, #16
 8020e1c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020e20:	689b      	ldr	r3, [r3, #8]
 8020e22:	f100 80e3 	bmi.w	8020fec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020e26:	f103 3aff 	add.w	sl, r3, #4294967295
 8020e2a:	4552      	cmp	r2, sl
 8020e2c:	f280 80de 	bge.w	8020fec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020e30:	f1bc 0f00 	cmp.w	ip, #0
 8020e34:	f2c0 80da 	blt.w	8020fec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020e38:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020e3c:	45d4      	cmp	ip, sl
 8020e3e:	f280 80d5 	bge.w	8020fec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020e42:	b21b      	sxth	r3, r3
 8020e44:	9d07      	ldr	r5, [sp, #28]
 8020e46:	fb0c 2203 	mla	r2, ip, r3, r2
 8020e4a:	eb05 0a02 	add.w	sl, r5, r2
 8020e4e:	5caa      	ldrb	r2, [r5, r2]
 8020e50:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8020e54:	2800      	cmp	r0, #0
 8020e56:	f000 80c0 	beq.w	8020fda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8020e5a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8020e5e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8020e62:	920b      	str	r2, [sp, #44]	; 0x2c
 8020e64:	b151      	cbz	r1, 8020e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8020e66:	eb0a 0203 	add.w	r2, sl, r3
 8020e6a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8020e6e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020e72:	9309      	str	r3, [sp, #36]	; 0x24
 8020e74:	7853      	ldrb	r3, [r2, #1]
 8020e76:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020e7a:	930c      	str	r3, [sp, #48]	; 0x30
 8020e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e7e:	fb10 f201 	smulbb	r2, r0, r1
 8020e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020e84:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020e88:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020e8c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8020e90:	10d2      	asrs	r2, r2, #3
 8020e92:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020e96:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8020e9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8020e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020ea0:	041b      	lsls	r3, r3, #16
 8020ea2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020ea6:	432b      	orrs	r3, r5
 8020ea8:	4353      	muls	r3, r2
 8020eaa:	fb0a 330c 	mla	r3, sl, ip, r3
 8020eae:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8020eb2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020eb6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020eba:	ea4c 0e0e 	orr.w	lr, ip, lr
 8020ebe:	f1c1 0c10 	rsb	ip, r1, #16
 8020ec2:	ebac 0c00 	sub.w	ip, ip, r0
 8020ec6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8020eca:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8020ece:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8020ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ed4:	0418      	lsls	r0, r3, #16
 8020ed6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020eda:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020ede:	4318      	orrs	r0, r3
 8020ee0:	fb02 c200 	mla	r2, r2, r0, ip
 8020ee4:	0d53      	lsrs	r3, r2, #21
 8020ee6:	0952      	lsrs	r2, r2, #5
 8020ee8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020eec:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020ef0:	431a      	orrs	r2, r3
 8020ef2:	f8a8 2000 	strh.w	r2, [r8]
 8020ef6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020ef8:	f108 0802 	add.w	r8, r8, #2
 8020efc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020f00:	441c      	add	r4, r3
 8020f02:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020f04:	441e      	add	r6, r3
 8020f06:	e77c      	b.n	8020e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020f08:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020f0a:	f109 0902 	add.w	r9, r9, #2
 8020f0e:	441c      	add	r4, r3
 8020f10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020f12:	441e      	add	r6, r3
 8020f14:	9b06      	ldr	r3, [sp, #24]
 8020f16:	3b01      	subs	r3, #1
 8020f18:	9306      	str	r3, [sp, #24]
 8020f1a:	e752      	b.n	8020dc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020f1c:	d020      	beq.n	8020f60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020f1e:	9b06      	ldr	r3, [sp, #24]
 8020f20:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8020f22:	3b01      	subs	r3, #1
 8020f24:	fb00 4003 	mla	r0, r0, r3, r4
 8020f28:	1400      	asrs	r0, r0, #16
 8020f2a:	f53f af67 	bmi.w	8020dfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020f2e:	3901      	subs	r1, #1
 8020f30:	4288      	cmp	r0, r1
 8020f32:	f6bf af63 	bge.w	8020dfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020f36:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020f38:	fb01 6303 	mla	r3, r1, r3, r6
 8020f3c:	141b      	asrs	r3, r3, #16
 8020f3e:	f53f af5d 	bmi.w	8020dfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020f42:	3a01      	subs	r2, #1
 8020f44:	4293      	cmp	r3, r2
 8020f46:	f6bf af59 	bge.w	8020dfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020f4a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8020f4e:	46ca      	mov	sl, r9
 8020f50:	f1b8 0f00 	cmp.w	r8, #0
 8020f54:	dc67      	bgt.n	8021026 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020f56:	9b06      	ldr	r3, [sp, #24]
 8020f58:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8020f5c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8020f60:	9b08      	ldr	r3, [sp, #32]
 8020f62:	2b00      	cmp	r3, #0
 8020f64:	f340 80d7 	ble.w	8021116 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8020f68:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020f6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020f6e:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020f72:	eef0 6a48 	vmov.f32	s13, s16
 8020f76:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020f7a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020f7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f82:	ee16 4a90 	vmov	r4, s13
 8020f86:	eef0 6a68 	vmov.f32	s13, s17
 8020f8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f8e:	ee16 6a90 	vmov	r6, s13
 8020f92:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020f96:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020f9a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020f9e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020fa2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020fa6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020faa:	ee18 2a10 	vmov	r2, s16
 8020fae:	eeb0 8a47 	vmov.f32	s16, s14
 8020fb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fb6:	ee18 2a90 	vmov	r2, s17
 8020fba:	9329      	str	r3, [sp, #164]	; 0xa4
 8020fbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020fbe:	eef0 8a67 	vmov.f32	s17, s15
 8020fc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fc6:	932a      	str	r3, [sp, #168]	; 0xa8
 8020fc8:	9b08      	ldr	r3, [sp, #32]
 8020fca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020fcc:	3b01      	subs	r3, #1
 8020fce:	9308      	str	r3, [sp, #32]
 8020fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020fd2:	bf08      	it	eq
 8020fd4:	4613      	moveq	r3, r2
 8020fd6:	9306      	str	r3, [sp, #24]
 8020fd8:	e6e4      	b.n	8020da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020fda:	2900      	cmp	r1, #0
 8020fdc:	f43f af4e 	beq.w	8020e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8020fe0:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8020fe4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8020fea:	e747      	b.n	8020e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8020fec:	f112 0a01 	adds.w	sl, r2, #1
 8020ff0:	d481      	bmi.n	8020ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020ff2:	4553      	cmp	r3, sl
 8020ff4:	f6ff af7f 	blt.w	8020ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020ff8:	f11c 0a01 	adds.w	sl, ip, #1
 8020ffc:	f53f af7b 	bmi.w	8020ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021000:	45d6      	cmp	lr, sl
 8021002:	f6ff af78 	blt.w	8020ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021006:	b21b      	sxth	r3, r3
 8021008:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802100c:	fa0f f28e 	sxth.w	r2, lr
 8021010:	9300      	str	r3, [sp, #0]
 8021012:	463b      	mov	r3, r7
 8021014:	9201      	str	r2, [sp, #4]
 8021016:	9a07      	ldr	r2, [sp, #28]
 8021018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802101c:	4641      	mov	r1, r8
 802101e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021020:	f7ff fdfe 	bl	8020c20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8021024:	e767      	b.n	8020ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021026:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021028:	1422      	asrs	r2, r4, #16
 802102a:	1431      	asrs	r1, r6, #16
 802102c:	9d07      	ldr	r5, [sp, #28]
 802102e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021032:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8021036:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802103a:	fb03 2101 	mla	r1, r3, r1, r2
 802103e:	9a07      	ldr	r2, [sp, #28]
 8021040:	440a      	add	r2, r1
 8021042:	5c69      	ldrb	r1, [r5, r1]
 8021044:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8021048:	f1be 0f00 	cmp.w	lr, #0
 802104c:	d05c      	beq.n	8021108 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 802104e:	f892 c001 	ldrb.w	ip, [r2, #1]
 8021052:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8021056:	950d      	str	r5, [sp, #52]	; 0x34
 8021058:	b150      	cbz	r0, 8021070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802105a:	eb02 0c03 	add.w	ip, r2, r3
 802105e:	5cd3      	ldrb	r3, [r2, r3]
 8021060:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021064:	930a      	str	r3, [sp, #40]	; 0x28
 8021066:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802106a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802106e:	930e      	str	r3, [sp, #56]	; 0x38
 8021070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021072:	fb1e f200 	smulbb	r2, lr, r0
 8021076:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021078:	f108 38ff 	add.w	r8, r8, #4294967295
 802107c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021080:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021084:	10d2      	asrs	r2, r2, #3
 8021086:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 802108a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802108e:	ea4c 0c03 	orr.w	ip, ip, r3
 8021092:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8021096:	9311      	str	r3, [sp, #68]	; 0x44
 8021098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802109a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802109c:	041b      	lsls	r3, r3, #16
 802109e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80210a2:	ea43 030b 	orr.w	r3, r3, fp
 80210a6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80210aa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80210ae:	4353      	muls	r3, r2
 80210b0:	fb05 3c0c 	mla	ip, r5, ip, r3
 80210b4:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80210b8:	ea43 0b01 	orr.w	fp, r3, r1
 80210bc:	f1c0 0110 	rsb	r1, r0, #16
 80210c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210c2:	eba1 0e0e 	sub.w	lr, r1, lr
 80210c6:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80210ca:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80210ce:	fb0e cc0b 	mla	ip, lr, fp, ip
 80210d2:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80210d6:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80210da:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80210de:	ea4b 0e0e 	orr.w	lr, fp, lr
 80210e2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80210e6:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80210ea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80210ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80210f2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80210f6:	ea43 0c0c 	orr.w	ip, r3, ip
 80210fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80210fc:	441c      	add	r4, r3
 80210fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021100:	f82a cb02 	strh.w	ip, [sl], #2
 8021104:	441e      	add	r6, r3
 8021106:	e723      	b.n	8020f50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021108:	2800      	cmp	r0, #0
 802110a:	d0b1      	beq.n	8021070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802110c:	5cd3      	ldrb	r3, [r2, r3]
 802110e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021112:	930a      	str	r3, [sp, #40]	; 0x28
 8021114:	e7ac      	b.n	8021070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8021116:	b013      	add	sp, #76	; 0x4c
 8021118:	ecbd 8b0a 	vpop	{d8-d12}
 802111c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021120 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8021120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021124:	468b      	mov	fp, r1
 8021126:	8809      	ldrh	r1, [r1, #0]
 8021128:	b089      	sub	sp, #36	; 0x24
 802112a:	10cd      	asrs	r5, r1, #3
 802112c:	ea4f 2921 	mov.w	r9, r1, asr #8
 8021130:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8021134:	00c9      	lsls	r1, r1, #3
 8021136:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802113a:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 802113e:	9202      	str	r2, [sp, #8]
 8021140:	b2c9      	uxtb	r1, r1
 8021142:	9500      	str	r5, [sp, #0]
 8021144:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8021148:	9101      	str	r1, [sp, #4]
 802114a:	9900      	ldr	r1, [sp, #0]
 802114c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8021150:	0209      	lsls	r1, r1, #8
 8021152:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8021156:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 802115a:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 802115e:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8021162:	fb04 650e 	mla	r5, r4, lr, r6
 8021166:	2c00      	cmp	r4, #0
 8021168:	eb02 0805 	add.w	r8, r2, r5
 802116c:	9a01      	ldr	r2, [sp, #4]
 802116e:	ea41 0102 	orr.w	r1, r1, r2
 8021172:	9107      	str	r1, [sp, #28]
 8021174:	db43      	blt.n	80211fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8021176:	45a2      	cmp	sl, r4
 8021178:	dd41      	ble.n	80211fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 802117a:	2e00      	cmp	r6, #0
 802117c:	db3d      	blt.n	80211fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 802117e:	45b6      	cmp	lr, r6
 8021180:	dd3b      	ble.n	80211fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8021182:	9a02      	ldr	r2, [sp, #8]
 8021184:	5d55      	ldrb	r5, [r2, r5]
 8021186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802118a:	441d      	add	r5, r3
 802118c:	1c72      	adds	r2, r6, #1
 802118e:	d439      	bmi.n	8021204 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8021190:	4596      	cmp	lr, r2
 8021192:	dd37      	ble.n	8021204 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8021194:	2f00      	cmp	r7, #0
 8021196:	d035      	beq.n	8021204 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8021198:	f898 1001 	ldrb.w	r1, [r8, #1]
 802119c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80211a0:	4419      	add	r1, r3
 80211a2:	3401      	adds	r4, #1
 80211a4:	d432      	bmi.n	802120c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80211a6:	45a2      	cmp	sl, r4
 80211a8:	dd30      	ble.n	802120c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80211aa:	b378      	cbz	r0, 802120c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80211ac:	2e00      	cmp	r6, #0
 80211ae:	db2b      	blt.n	8021208 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 80211b0:	45b6      	cmp	lr, r6
 80211b2:	dd29      	ble.n	8021208 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 80211b4:	f818 400e 	ldrb.w	r4, [r8, lr]
 80211b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80211bc:	441c      	add	r4, r3
 80211be:	3601      	adds	r6, #1
 80211c0:	d427      	bmi.n	8021212 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80211c2:	45b6      	cmp	lr, r6
 80211c4:	dd25      	ble.n	8021212 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80211c6:	b327      	cbz	r7, 8021212 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80211c8:	44c6      	add	lr, r8
 80211ca:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80211ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80211d2:	4413      	add	r3, r2
 80211d4:	782a      	ldrb	r2, [r5, #0]
 80211d6:	2f0f      	cmp	r7, #15
 80211d8:	9202      	str	r2, [sp, #8]
 80211da:	780a      	ldrb	r2, [r1, #0]
 80211dc:	9203      	str	r2, [sp, #12]
 80211de:	7822      	ldrb	r2, [r4, #0]
 80211e0:	9204      	str	r2, [sp, #16]
 80211e2:	781a      	ldrb	r2, [r3, #0]
 80211e4:	9205      	str	r2, [sp, #20]
 80211e6:	d801      	bhi.n	80211ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 80211e8:	280f      	cmp	r0, #15
 80211ea:	d914      	bls.n	8021216 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 80211ec:	4b3f      	ldr	r3, [pc, #252]	; (80212ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 80211ee:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80211f2:	4a3f      	ldr	r2, [pc, #252]	; (80212f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 80211f4:	483f      	ldr	r0, [pc, #252]	; (80212f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 80211f6:	f006 fb31 	bl	802785c <__assert_func>
 80211fa:	ad07      	add	r5, sp, #28
 80211fc:	e7c6      	b.n	802118c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 80211fe:	a907      	add	r1, sp, #28
 8021200:	460d      	mov	r5, r1
 8021202:	e7ce      	b.n	80211a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8021204:	a907      	add	r1, sp, #28
 8021206:	e7cc      	b.n	80211a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8021208:	ac07      	add	r4, sp, #28
 802120a:	e7d8      	b.n	80211be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 802120c:	ab07      	add	r3, sp, #28
 802120e:	461c      	mov	r4, r3
 8021210:	e7e0      	b.n	80211d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8021212:	ab07      	add	r3, sp, #28
 8021214:	e7de      	b.n	80211d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8021216:	b2ba      	uxth	r2, r7
 8021218:	f891 8002 	ldrb.w	r8, [r1, #2]
 802121c:	b280      	uxth	r0, r0
 802121e:	7849      	ldrb	r1, [r1, #1]
 8021220:	78ae      	ldrb	r6, [r5, #2]
 8021222:	fa1f f78c 	uxth.w	r7, ip
 8021226:	fb02 fa00 	mul.w	sl, r2, r0
 802122a:	0112      	lsls	r2, r2, #4
 802122c:	786d      	ldrb	r5, [r5, #1]
 802122e:	ea6f 0c0c 	mvn.w	ip, ip
 8021232:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021236:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 802123a:	eba2 020a 	sub.w	r2, r2, sl
 802123e:	fa5f fc8c 	uxtb.w	ip, ip
 8021242:	b280      	uxth	r0, r0
 8021244:	fb19 f90c 	smulbb	r9, r9, ip
 8021248:	b292      	uxth	r2, r2
 802124a:	ebae 0e00 	sub.w	lr, lr, r0
 802124e:	4351      	muls	r1, r2
 8021250:	fa1f fe8e 	uxth.w	lr, lr
 8021254:	fb02 f808 	mul.w	r8, r2, r8
 8021258:	fb0e 1505 	mla	r5, lr, r5, r1
 802125c:	7861      	ldrb	r1, [r4, #1]
 802125e:	fb0e 8806 	mla	r8, lr, r6, r8
 8021262:	78a6      	ldrb	r6, [r4, #2]
 8021264:	fb00 5501 	mla	r5, r0, r1, r5
 8021268:	7859      	ldrb	r1, [r3, #1]
 802126a:	fb00 8806 	mla	r8, r0, r6, r8
 802126e:	789e      	ldrb	r6, [r3, #2]
 8021270:	9b00      	ldr	r3, [sp, #0]
 8021272:	fb0a 5101 	mla	r1, sl, r1, r5
 8021276:	fb0a 8606 	mla	r6, sl, r6, r8
 802127a:	fb13 f50c 	smulbb	r5, r3, ip
 802127e:	9b03      	ldr	r3, [sp, #12]
 8021280:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021284:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021288:	435a      	muls	r2, r3
 802128a:	9b02      	ldr	r3, [sp, #8]
 802128c:	fb06 9607 	mla	r6, r6, r7, r9
 8021290:	fb0e 2203 	mla	r2, lr, r3, r2
 8021294:	9b04      	ldr	r3, [sp, #16]
 8021296:	b2b6      	uxth	r6, r6
 8021298:	fb01 5107 	mla	r1, r1, r7, r5
 802129c:	fb00 2003 	mla	r0, r0, r3, r2
 80212a0:	9b05      	ldr	r3, [sp, #20]
 80212a2:	f106 0901 	add.w	r9, r6, #1
 80212a6:	b289      	uxth	r1, r1
 80212a8:	fb0a 0a03 	mla	sl, sl, r3, r0
 80212ac:	9b01      	ldr	r3, [sp, #4]
 80212ae:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 80212b2:	1c4d      	adds	r5, r1, #1
 80212b4:	fb13 fc0c 	smulbb	ip, r3, ip
 80212b8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80212bc:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 80212c0:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 80212c4:	fb0a c707 	mla	r7, sl, r7, ip
 80212c8:	0949      	lsrs	r1, r1, #5
 80212ca:	b2bf      	uxth	r7, r7
 80212cc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80212d0:	1c7e      	adds	r6, r7, #1
 80212d2:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80212d6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80212da:	ea46 0609 	orr.w	r6, r6, r9
 80212de:	430e      	orrs	r6, r1
 80212e0:	f8ab 6000 	strh.w	r6, [fp]
 80212e4:	b009      	add	sp, #36	; 0x24
 80212e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212ea:	bf00      	nop
 80212ec:	0802bded 	.word	0x0802bded
 80212f0:	0802c3ba 	.word	0x0802c3ba
 80212f4:	0802be71 	.word	0x0802be71

080212f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80212f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212fc:	ed2d 8b08 	vpush	{d8-d11}
 8021300:	b095      	sub	sp, #84	; 0x54
 8021302:	eeb0 aa40 	vmov.f32	s20, s0
 8021306:	eef0 9a60 	vmov.f32	s19, s1
 802130a:	9212      	str	r2, [sp, #72]	; 0x48
 802130c:	eeb0 9a41 	vmov.f32	s18, s2
 8021310:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021312:	eeb0 8a62 	vmov.f32	s16, s5
 8021316:	9309      	str	r3, [sp, #36]	; 0x24
 8021318:	eef0 8a43 	vmov.f32	s17, s6
 802131c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8021320:	eef0 ba44 	vmov.f32	s23, s8
 8021324:	9013      	str	r0, [sp, #76]	; 0x4c
 8021326:	eeb0 ba64 	vmov.f32	s22, s9
 802132a:	930f      	str	r3, [sp, #60]	; 0x3c
 802132c:	eef0 aa45 	vmov.f32	s21, s10
 8021330:	6850      	ldr	r0, [r2, #4]
 8021332:	910e      	str	r1, [sp, #56]	; 0x38
 8021334:	6812      	ldr	r2, [r2, #0]
 8021336:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802133a:	fb00 1303 	mla	r3, r0, r3, r1
 802133e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021342:	930a      	str	r3, [sp, #40]	; 0x28
 8021344:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	930d      	str	r3, [sp, #52]	; 0x34
 802134a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802134c:	685c      	ldr	r4, [r3, #4]
 802134e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021350:	3404      	adds	r4, #4
 8021352:	43db      	mvns	r3, r3
 8021354:	b2db      	uxtb	r3, r3
 8021356:	930b      	str	r3, [sp, #44]	; 0x2c
 8021358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802135a:	2b00      	cmp	r3, #0
 802135c:	dc03      	bgt.n	8021366 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802135e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021360:	2b00      	cmp	r3, #0
 8021362:	f340 8255 	ble.w	8021810 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8021366:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021368:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802136c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021370:	1e48      	subs	r0, r1, #1
 8021372:	1e55      	subs	r5, r2, #1
 8021374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021376:	2b00      	cmp	r3, #0
 8021378:	f340 80f9 	ble.w	802156e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802137c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802137e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021380:	1436      	asrs	r6, r6, #16
 8021382:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021386:	d406      	bmi.n	8021396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021388:	4286      	cmp	r6, r0
 802138a:	da04      	bge.n	8021396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802138c:	2b00      	cmp	r3, #0
 802138e:	db02      	blt.n	8021396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021390:	42ab      	cmp	r3, r5
 8021392:	f2c0 80ed 	blt.w	8021570 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8021396:	3601      	adds	r6, #1
 8021398:	f100 80da 	bmi.w	8021550 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802139c:	42b1      	cmp	r1, r6
 802139e:	f2c0 80d7 	blt.w	8021550 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80213a2:	3301      	adds	r3, #1
 80213a4:	f100 80d4 	bmi.w	8021550 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80213a8:	429a      	cmp	r2, r3
 80213aa:	f2c0 80d1 	blt.w	8021550 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80213ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213b0:	9311      	str	r3, [sp, #68]	; 0x44
 80213b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80213b4:	930c      	str	r3, [sp, #48]	; 0x30
 80213b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80213b8:	2b00      	cmp	r3, #0
 80213ba:	f340 80fa 	ble.w	80215b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80213be:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80213c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213c2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80213c4:	68c6      	ldr	r6, [r0, #12]
 80213c6:	141d      	asrs	r5, r3, #16
 80213c8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80213ca:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80213ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80213d0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80213d2:	1400      	asrs	r0, r0, #16
 80213d4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80213d8:	6892      	ldr	r2, [r2, #8]
 80213da:	f100 813e 	bmi.w	802165a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80213de:	1e57      	subs	r7, r2, #1
 80213e0:	42b8      	cmp	r0, r7
 80213e2:	f280 813a 	bge.w	802165a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80213e6:	2d00      	cmp	r5, #0
 80213e8:	f2c0 8137 	blt.w	802165a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80213ec:	1e77      	subs	r7, r6, #1
 80213ee:	42bd      	cmp	r5, r7
 80213f0:	f280 8133 	bge.w	802165a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80213f4:	b212      	sxth	r2, r2
 80213f6:	fb05 0002 	mla	r0, r5, r2, r0
 80213fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80213fc:	f815 a000 	ldrb.w	sl, [r5, r0]
 8021400:	182e      	adds	r6, r5, r0
 8021402:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8021406:	eb04 050a 	add.w	r5, r4, sl
 802140a:	2b00      	cmp	r3, #0
 802140c:	f000 8117 	beq.w	802163e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8021410:	f896 c001 	ldrb.w	ip, [r6, #1]
 8021414:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021418:	44a4      	add	ip, r4
 802141a:	2900      	cmp	r1, #0
 802141c:	f000 8117 	beq.w	802164e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021420:	18b0      	adds	r0, r6, r2
 8021422:	5cb2      	ldrb	r2, [r6, r2]
 8021424:	7840      	ldrb	r0, [r0, #1]
 8021426:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802142a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802142e:	4422      	add	r2, r4
 8021430:	4420      	add	r0, r4
 8021432:	b29b      	uxth	r3, r3
 8021434:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8021438:	b289      	uxth	r1, r1
 802143a:	f895 b002 	ldrb.w	fp, [r5, #2]
 802143e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021440:	fb03 f901 	mul.w	r9, r3, r1
 8021444:	011b      	lsls	r3, r3, #4
 8021446:	f8b6 e000 	ldrh.w	lr, [r6]
 802144a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802144e:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8021452:	eba3 0309 	sub.w	r3, r3, r9
 8021456:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 802145a:	b289      	uxth	r1, r1
 802145c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8021460:	b29b      	uxth	r3, r3
 8021462:	eba8 0801 	sub.w	r8, r8, r1
 8021466:	435f      	muls	r7, r3
 8021468:	fa1f f888 	uxth.w	r8, r8
 802146c:	9310      	str	r3, [sp, #64]	; 0x40
 802146e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021470:	fb08 770b 	mla	r7, r8, fp, r7
 8021474:	f892 b002 	ldrb.w	fp, [r2, #2]
 8021478:	fb01 770b 	mla	r7, r1, fp, r7
 802147c:	f890 b002 	ldrb.w	fp, [r0, #2]
 8021480:	fb09 770b 	mla	r7, r9, fp, r7
 8021484:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8021488:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802148c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021490:	fb1b fb03 	smulbb	fp, fp, r3
 8021494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021496:	fb07 b706 	mla	r7, r7, r6, fp
 802149a:	f895 b001 	ldrb.w	fp, [r5, #1]
 802149e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80214a2:	f89c c000 	ldrb.w	ip, [ip]
 80214a6:	b2bf      	uxth	r7, r7
 80214a8:	435d      	muls	r5, r3
 80214aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80214ac:	fb08 550b 	mla	r5, r8, fp, r5
 80214b0:	f892 b001 	ldrb.w	fp, [r2, #1]
 80214b4:	fb01 550b 	mla	r5, r1, fp, r5
 80214b8:	f890 b001 	ldrb.w	fp, [r0, #1]
 80214bc:	fb09 550b 	mla	r5, r9, fp, r5
 80214c0:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80214c4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80214c8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80214cc:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80214d0:	fa5f fe8e 	uxtb.w	lr, lr
 80214d4:	fb1b fb03 	smulbb	fp, fp, r3
 80214d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80214da:	fb03 f30c 	mul.w	r3, r3, ip
 80214de:	f892 c000 	ldrb.w	ip, [r2]
 80214e2:	fb05 b506 	mla	r5, r5, r6, fp
 80214e6:	fb08 330a 	mla	r3, r8, sl, r3
 80214ea:	b2ad      	uxth	r5, r5
 80214ec:	fb01 330c 	mla	r3, r1, ip, r3
 80214f0:	f890 c000 	ldrb.w	ip, [r0]
 80214f4:	f105 0b01 	add.w	fp, r5, #1
 80214f8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80214fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80214fe:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8021502:	fb1e fe03 	smulbb	lr, lr, r3
 8021506:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802150a:	1c7b      	adds	r3, r7, #1
 802150c:	096d      	lsrs	r5, r5, #5
 802150e:	fb0c e606 	mla	r6, ip, r6, lr
 8021512:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021516:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802151a:	b2b6      	uxth	r6, r6
 802151c:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8021520:	1c77      	adds	r7, r6, #1
 8021522:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021526:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802152a:	431f      	orrs	r7, r3
 802152c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802152e:	433d      	orrs	r5, r7
 8021530:	801d      	strh	r5, [r3, #0]
 8021532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021534:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021536:	3302      	adds	r3, #2
 8021538:	930c      	str	r3, [sp, #48]	; 0x30
 802153a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802153c:	4413      	add	r3, r2
 802153e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021540:	9327      	str	r3, [sp, #156]	; 0x9c
 8021542:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021544:	4413      	add	r3, r2
 8021546:	9328      	str	r3, [sp, #160]	; 0xa0
 8021548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802154a:	3b01      	subs	r3, #1
 802154c:	9311      	str	r3, [sp, #68]	; 0x44
 802154e:	e732      	b.n	80213b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8021550:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021552:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8021554:	4433      	add	r3, r6
 8021556:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8021558:	9327      	str	r3, [sp, #156]	; 0x9c
 802155a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802155c:	4433      	add	r3, r6
 802155e:	9328      	str	r3, [sp, #160]	; 0xa0
 8021560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021562:	3b01      	subs	r3, #1
 8021564:	9309      	str	r3, [sp, #36]	; 0x24
 8021566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021568:	3302      	adds	r3, #2
 802156a:	930a      	str	r3, [sp, #40]	; 0x28
 802156c:	e702      	b.n	8021374 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802156e:	d027      	beq.n	80215c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8021570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021572:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8021574:	3b01      	subs	r3, #1
 8021576:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8021578:	fb00 5003 	mla	r0, r0, r3, r5
 802157c:	1400      	asrs	r0, r0, #16
 802157e:	f53f af16 	bmi.w	80213ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021582:	3901      	subs	r1, #1
 8021584:	4288      	cmp	r0, r1
 8021586:	f6bf af12 	bge.w	80213ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802158a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802158c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802158e:	fb01 0303 	mla	r3, r1, r3, r0
 8021592:	141b      	asrs	r3, r3, #16
 8021594:	f53f af0b 	bmi.w	80213ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021598:	3a01      	subs	r2, #1
 802159a:	4293      	cmp	r3, r2
 802159c:	f6bf af07 	bge.w	80213ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80215a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215a2:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80215a6:	9311      	str	r3, [sp, #68]	; 0x44
 80215a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215aa:	930c      	str	r3, [sp, #48]	; 0x30
 80215ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80215ae:	2b00      	cmp	r3, #0
 80215b0:	dc70      	bgt.n	8021694 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80215b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80215b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80215ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80215be:	930a      	str	r3, [sp, #40]	; 0x28
 80215c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	f340 8124 	ble.w	8021810 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80215c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80215cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80215ce:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80215d2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80215d6:	eef0 6a48 	vmov.f32	s13, s16
 80215da:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80215de:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80215e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215e6:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 80215ea:	eef0 6a68 	vmov.f32	s13, s17
 80215ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215f2:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 80215f6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80215fa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80215fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021602:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021606:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802160a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802160e:	ee18 2a10 	vmov	r2, s16
 8021612:	eeb0 8a47 	vmov.f32	s16, s14
 8021616:	fb92 f3f3 	sdiv	r3, r2, r3
 802161a:	ee18 2a90 	vmov	r2, s17
 802161e:	9329      	str	r3, [sp, #164]	; 0xa4
 8021620:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021622:	eef0 8a67 	vmov.f32	s17, s15
 8021626:	fb92 f3f3 	sdiv	r3, r2, r3
 802162a:	932a      	str	r3, [sp, #168]	; 0xa8
 802162c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802162e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021630:	3b01      	subs	r3, #1
 8021632:	930e      	str	r3, [sp, #56]	; 0x38
 8021634:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021636:	bf08      	it	eq
 8021638:	4613      	moveq	r3, r2
 802163a:	9309      	str	r3, [sp, #36]	; 0x24
 802163c:	e68c      	b.n	8021358 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802163e:	b149      	cbz	r1, 8021654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8021640:	5cb2      	ldrb	r2, [r6, r2]
 8021642:	4628      	mov	r0, r5
 8021644:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021648:	4422      	add	r2, r4
 802164a:	46ac      	mov	ip, r5
 802164c:	e6f1      	b.n	8021432 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802164e:	4628      	mov	r0, r5
 8021650:	462a      	mov	r2, r5
 8021652:	e6ee      	b.n	8021432 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8021654:	4628      	mov	r0, r5
 8021656:	462a      	mov	r2, r5
 8021658:	e7f7      	b.n	802164a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802165a:	1c47      	adds	r7, r0, #1
 802165c:	f53f af69 	bmi.w	8021532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021660:	42ba      	cmp	r2, r7
 8021662:	f6ff af66 	blt.w	8021532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021666:	1c6f      	adds	r7, r5, #1
 8021668:	f53f af63 	bmi.w	8021532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802166c:	42be      	cmp	r6, r7
 802166e:	f6ff af60 	blt.w	8021532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021672:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021674:	b236      	sxth	r6, r6
 8021676:	b212      	sxth	r2, r2
 8021678:	9002      	str	r0, [sp, #8]
 802167a:	9601      	str	r6, [sp, #4]
 802167c:	9200      	str	r2, [sp, #0]
 802167e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021680:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8021684:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8021688:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 802168c:	4623      	mov	r3, r4
 802168e:	f7ff fd47 	bl	8021120 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8021692:	e74e      	b.n	8021532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021694:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021696:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8021698:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802169c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 802169e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80216a0:	1400      	asrs	r0, r0, #16
 80216a2:	142d      	asrs	r5, r5, #16
 80216a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80216a6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80216aa:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80216ae:	fb02 5000 	mla	r0, r2, r0, r5
 80216b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80216b4:	f815 9000 	ldrb.w	r9, [r5, r0]
 80216b8:	182e      	adds	r6, r5, r0
 80216ba:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80216be:	eb04 0509 	add.w	r5, r4, r9
 80216c2:	2b00      	cmp	r3, #0
 80216c4:	f000 8096 	beq.w	80217f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 80216c8:	7877      	ldrb	r7, [r6, #1]
 80216ca:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80216ce:	4427      	add	r7, r4
 80216d0:	2900      	cmp	r1, #0
 80216d2:	f000 8097 	beq.w	8021804 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 80216d6:	18b0      	adds	r0, r6, r2
 80216d8:	5cb2      	ldrb	r2, [r6, r2]
 80216da:	7840      	ldrb	r0, [r0, #1]
 80216dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80216e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80216e4:	4422      	add	r2, r4
 80216e6:	4420      	add	r0, r4
 80216e8:	b29b      	uxth	r3, r3
 80216ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80216ec:	b289      	uxth	r1, r1
 80216ee:	f895 b002 	ldrb.w	fp, [r5, #2]
 80216f2:	f8b6 c000 	ldrh.w	ip, [r6]
 80216f6:	fb03 f801 	mul.w	r8, r3, r1
 80216fa:	011b      	lsls	r3, r3, #4
 80216fc:	78be      	ldrb	r6, [r7, #2]
 80216fe:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8021702:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021706:	eba3 0308 	sub.w	r3, r3, r8
 802170a:	f814 9009 	ldrb.w	r9, [r4, r9]
 802170e:	b289      	uxth	r1, r1
 8021710:	b29b      	uxth	r3, r3
 8021712:	ebae 0e01 	sub.w	lr, lr, r1
 8021716:	435e      	muls	r6, r3
 8021718:	fa1f fe8e 	uxth.w	lr, lr
 802171c:	9310      	str	r3, [sp, #64]	; 0x40
 802171e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021720:	fb0e 660b 	mla	r6, lr, fp, r6
 8021724:	f892 b002 	ldrb.w	fp, [r2, #2]
 8021728:	fb01 660b 	mla	r6, r1, fp, r6
 802172c:	f890 b002 	ldrb.w	fp, [r0, #2]
 8021730:	fb08 660b 	mla	r6, r8, fp, r6
 8021734:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8021738:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802173c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021740:	fb1b fb03 	smulbb	fp, fp, r3
 8021744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021746:	fb06 b60a 	mla	r6, r6, sl, fp
 802174a:	f895 b001 	ldrb.w	fp, [r5, #1]
 802174e:	787d      	ldrb	r5, [r7, #1]
 8021750:	783f      	ldrb	r7, [r7, #0]
 8021752:	b2b6      	uxth	r6, r6
 8021754:	435d      	muls	r5, r3
 8021756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021758:	fb0e 550b 	mla	r5, lr, fp, r5
 802175c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021760:	fb01 550b 	mla	r5, r1, fp, r5
 8021764:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021768:	fb08 550b 	mla	r5, r8, fp, r5
 802176c:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8021770:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021774:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8021778:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802177c:	fa5f fc8c 	uxtb.w	ip, ip
 8021780:	fb1b fb03 	smulbb	fp, fp, r3
 8021784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021786:	437b      	muls	r3, r7
 8021788:	7817      	ldrb	r7, [r2, #0]
 802178a:	fb05 b50a 	mla	r5, r5, sl, fp
 802178e:	fb0e 3309 	mla	r3, lr, r9, r3
 8021792:	b2ad      	uxth	r5, r5
 8021794:	fb01 3307 	mla	r3, r1, r7, r3
 8021798:	7807      	ldrb	r7, [r0, #0]
 802179a:	f105 0b01 	add.w	fp, r5, #1
 802179e:	fb08 3707 	mla	r7, r8, r7, r3
 80217a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80217a4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80217a8:	fb1c fc03 	smulbb	ip, ip, r3
 80217ac:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80217b0:	1c73      	adds	r3, r6, #1
 80217b2:	096d      	lsrs	r5, r5, #5
 80217b4:	fb07 c70a 	mla	r7, r7, sl, ip
 80217b8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80217bc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80217c0:	b2bf      	uxth	r7, r7
 80217c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80217c4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80217c8:	1c7a      	adds	r2, r7, #1
 80217ca:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80217ce:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80217d2:	4316      	orrs	r6, r2
 80217d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80217d6:	432e      	orrs	r6, r5
 80217d8:	f823 6b02 	strh.w	r6, [r3], #2
 80217dc:	930c      	str	r3, [sp, #48]	; 0x30
 80217de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80217e0:	4413      	add	r3, r2
 80217e2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80217e4:	9327      	str	r3, [sp, #156]	; 0x9c
 80217e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217e8:	4413      	add	r3, r2
 80217ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80217ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80217ee:	3b01      	subs	r3, #1
 80217f0:	9311      	str	r3, [sp, #68]	; 0x44
 80217f2:	e6db      	b.n	80215ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80217f4:	b149      	cbz	r1, 802180a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80217f6:	5cb2      	ldrb	r2, [r6, r2]
 80217f8:	4628      	mov	r0, r5
 80217fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80217fe:	4422      	add	r2, r4
 8021800:	462f      	mov	r7, r5
 8021802:	e771      	b.n	80216e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8021804:	4628      	mov	r0, r5
 8021806:	462a      	mov	r2, r5
 8021808:	e76e      	b.n	80216e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802180a:	4628      	mov	r0, r5
 802180c:	462a      	mov	r2, r5
 802180e:	e7f7      	b.n	8021800 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8021810:	b015      	add	sp, #84	; 0x54
 8021812:	ecbd 8b08 	vpop	{d8-d11}
 8021816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802181c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 802181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021820:	880e      	ldrh	r6, [r1, #0]
 8021822:	b085      	sub	sp, #20
 8021824:	4691      	mov	r9, r2
 8021826:	0230      	lsls	r0, r6, #8
 8021828:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802182c:	9101      	str	r1, [sp, #4]
 802182e:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8021832:	0170      	lsls	r0, r6, #5
 8021834:	00f6      	lsls	r6, r6, #3
 8021836:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802183a:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 802183e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8021842:	b2f6      	uxtb	r6, r6
 8021844:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8021848:	ea4b 0000 	orr.w	r0, fp, r0
 802184c:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8021850:	4306      	orrs	r6, r0
 8021852:	fb05 7a0c 	mla	sl, r5, ip, r7
 8021856:	2d00      	cmp	r5, #0
 8021858:	9603      	str	r6, [sp, #12]
 802185a:	eb09 0e0a 	add.w	lr, r9, sl
 802185e:	db42      	blt.n	80218e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8021860:	45a8      	cmp	r8, r5
 8021862:	dd40      	ble.n	80218e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8021864:	2f00      	cmp	r7, #0
 8021866:	db3c      	blt.n	80218e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8021868:	45bc      	cmp	ip, r7
 802186a:	dd3a      	ble.n	80218e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 802186c:	f819 600a 	ldrb.w	r6, [r9, sl]
 8021870:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021874:	441e      	add	r6, r3
 8021876:	1c78      	adds	r0, r7, #1
 8021878:	d438      	bmi.n	80218ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 802187a:	4584      	cmp	ip, r0
 802187c:	dd36      	ble.n	80218ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 802187e:	b3aa      	cbz	r2, 80218ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8021880:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8021884:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021888:	4418      	add	r0, r3
 802188a:	3501      	adds	r5, #1
 802188c:	d432      	bmi.n	80218f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 802188e:	45a8      	cmp	r8, r5
 8021890:	dd30      	ble.n	80218f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8021892:	b37c      	cbz	r4, 80218f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8021894:	2f00      	cmp	r7, #0
 8021896:	db2b      	blt.n	80218f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8021898:	45bc      	cmp	ip, r7
 802189a:	dd29      	ble.n	80218f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 802189c:	f81e 500c 	ldrb.w	r5, [lr, ip]
 80218a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80218a4:	441d      	add	r5, r3
 80218a6:	3701      	adds	r7, #1
 80218a8:	d427      	bmi.n	80218fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80218aa:	45bc      	cmp	ip, r7
 80218ac:	dd25      	ble.n	80218fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80218ae:	b322      	cbz	r2, 80218fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80218b0:	44f4      	add	ip, lr
 80218b2:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80218b6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80218ba:	443b      	add	r3, r7
 80218bc:	781f      	ldrb	r7, [r3, #0]
 80218be:	2a0f      	cmp	r2, #15
 80218c0:	f896 9000 	ldrb.w	r9, [r6]
 80218c4:	f890 a000 	ldrb.w	sl, [r0]
 80218c8:	4639      	mov	r1, r7
 80218ca:	f895 8000 	ldrb.w	r8, [r5]
 80218ce:	d801      	bhi.n	80218d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 80218d0:	2c0f      	cmp	r4, #15
 80218d2:	d914      	bls.n	80218fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 80218d4:	4b2c      	ldr	r3, [pc, #176]	; (8021988 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 80218d6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80218da:	4a2c      	ldr	r2, [pc, #176]	; (802198c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 80218dc:	482c      	ldr	r0, [pc, #176]	; (8021990 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 80218de:	f005 ffbd 	bl	802785c <__assert_func>
 80218e2:	ae03      	add	r6, sp, #12
 80218e4:	e7c7      	b.n	8021876 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 80218e6:	a803      	add	r0, sp, #12
 80218e8:	4606      	mov	r6, r0
 80218ea:	e7ce      	b.n	802188a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80218ec:	a803      	add	r0, sp, #12
 80218ee:	e7cc      	b.n	802188a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80218f0:	ad03      	add	r5, sp, #12
 80218f2:	e7d8      	b.n	80218a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 80218f4:	ab03      	add	r3, sp, #12
 80218f6:	461d      	mov	r5, r3
 80218f8:	e7e0      	b.n	80218bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 80218fa:	ab03      	add	r3, sp, #12
 80218fc:	e7de      	b.n	80218bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 80218fe:	b292      	uxth	r2, r2
 8021900:	f890 c002 	ldrb.w	ip, [r0, #2]
 8021904:	b2a4      	uxth	r4, r4
 8021906:	f896 b002 	ldrb.w	fp, [r6, #2]
 802190a:	7840      	ldrb	r0, [r0, #1]
 802190c:	fb02 fe04 	mul.w	lr, r2, r4
 8021910:	0112      	lsls	r2, r2, #4
 8021912:	7876      	ldrb	r6, [r6, #1]
 8021914:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8021918:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802191c:	eba2 020e 	sub.w	r2, r2, lr
 8021920:	b2a4      	uxth	r4, r4
 8021922:	b292      	uxth	r2, r2
 8021924:	1b3f      	subs	r7, r7, r4
 8021926:	fb02 fc0c 	mul.w	ip, r2, ip
 802192a:	b2bf      	uxth	r7, r7
 802192c:	fb07 cc0b 	mla	ip, r7, fp, ip
 8021930:	f895 b002 	ldrb.w	fp, [r5, #2]
 8021934:	fb04 cc0b 	mla	ip, r4, fp, ip
 8021938:	f893 b002 	ldrb.w	fp, [r3, #2]
 802193c:	785b      	ldrb	r3, [r3, #1]
 802193e:	fb0e cc0b 	mla	ip, lr, fp, ip
 8021942:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8021946:	fb02 fc0a 	mul.w	ip, r2, sl
 802194a:	4342      	muls	r2, r0
 802194c:	7868      	ldrb	r0, [r5, #1]
 802194e:	fb07 cc09 	mla	ip, r7, r9, ip
 8021952:	fb07 2206 	mla	r2, r7, r6, r2
 8021956:	fb04 cc08 	mla	ip, r4, r8, ip
 802195a:	fb04 2400 	mla	r4, r4, r0, r2
 802195e:	fb0e cc01 	mla	ip, lr, r1, ip
 8021962:	fb0e 4e03 	mla	lr, lr, r3, r4
 8021966:	9b01      	ldr	r3, [sp, #4]
 8021968:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802196c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021970:	ea4c 0c0b 	orr.w	ip, ip, fp
 8021974:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021978:	ea4c 0c0e 	orr.w	ip, ip, lr
 802197c:	f8a3 c000 	strh.w	ip, [r3]
 8021980:	b005      	add	sp, #20
 8021982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021986:	bf00      	nop
 8021988:	0802bded 	.word	0x0802bded
 802198c:	0802c3ba 	.word	0x0802c3ba
 8021990:	0802be71 	.word	0x0802be71

08021994 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021998:	ed2d 8b08 	vpush	{d8-d11}
 802199c:	b08f      	sub	sp, #60	; 0x3c
 802199e:	eeb0 aa40 	vmov.f32	s20, s0
 80219a2:	eef0 9a60 	vmov.f32	s19, s1
 80219a6:	920c      	str	r2, [sp, #48]	; 0x30
 80219a8:	eeb0 9a41 	vmov.f32	s18, s2
 80219ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80219ae:	eeb0 8a62 	vmov.f32	s16, s5
 80219b2:	900d      	str	r0, [sp, #52]	; 0x34
 80219b4:	eef0 8a43 	vmov.f32	s17, s6
 80219b8:	6850      	ldr	r0, [r2, #4]
 80219ba:	eef0 ba44 	vmov.f32	s23, s8
 80219be:	910a      	str	r1, [sp, #40]	; 0x28
 80219c0:	eeb0 ba64 	vmov.f32	s22, s9
 80219c4:	9306      	str	r3, [sp, #24]
 80219c6:	eef0 aa45 	vmov.f32	s21, s10
 80219ca:	6812      	ldr	r2, [r2, #0]
 80219cc:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80219d0:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 80219d4:	fb00 1303 	mla	r3, r0, r3, r1
 80219d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80219dc:	9307      	str	r3, [sp, #28]
 80219de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80219e0:	681b      	ldr	r3, [r3, #0]
 80219e2:	9308      	str	r3, [sp, #32]
 80219e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80219e6:	685c      	ldr	r4, [r3, #4]
 80219e8:	3404      	adds	r4, #4
 80219ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	dc03      	bgt.n	80219f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80219f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80219f2:	2b00      	cmp	r3, #0
 80219f4:	f340 81d5 	ble.w	8021da2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 80219f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80219fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80219fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021a02:	1e48      	subs	r0, r1, #1
 8021a04:	1e56      	subs	r6, r2, #1
 8021a06:	9b06      	ldr	r3, [sp, #24]
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	f340 80b6 	ble.w	8021b7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021a0e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8021a12:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021a16:	d406      	bmi.n	8021a26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021a18:	4287      	cmp	r7, r0
 8021a1a:	da04      	bge.n	8021a26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	db02      	blt.n	8021a26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021a20:	42b3      	cmp	r3, r6
 8021a22:	f2c0 80ab 	blt.w	8021b7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8021a26:	3701      	adds	r7, #1
 8021a28:	f100 809c 	bmi.w	8021b64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8021a2c:	42b9      	cmp	r1, r7
 8021a2e:	f2c0 8099 	blt.w	8021b64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8021a32:	3301      	adds	r3, #1
 8021a34:	f100 8096 	bmi.w	8021b64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8021a38:	429a      	cmp	r2, r3
 8021a3a:	f2c0 8093 	blt.w	8021b64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8021a3e:	9b06      	ldr	r3, [sp, #24]
 8021a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8021a42:	9b07      	ldr	r3, [sp, #28]
 8021a44:	9309      	str	r3, [sp, #36]	; 0x24
 8021a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	f340 80b4 	ble.w	8021bb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8021a4e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8021a50:	142e      	asrs	r6, r5, #16
 8021a52:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021a54:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8021a58:	68c7      	ldr	r7, [r0, #12]
 8021a5a:	ea5f 402b 	movs.w	r0, fp, asr #16
 8021a5e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021a62:	6892      	ldr	r2, [r2, #8]
 8021a64:	f100 80fb 	bmi.w	8021c5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8021a68:	f102 3cff 	add.w	ip, r2, #4294967295
 8021a6c:	4560      	cmp	r0, ip
 8021a6e:	f280 80f6 	bge.w	8021c5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8021a72:	2e00      	cmp	r6, #0
 8021a74:	f2c0 80f3 	blt.w	8021c5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8021a78:	f107 3cff 	add.w	ip, r7, #4294967295
 8021a7c:	4566      	cmp	r6, ip
 8021a7e:	f280 80ee 	bge.w	8021c5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8021a82:	b212      	sxth	r2, r2
 8021a84:	fb06 0002 	mla	r0, r6, r2, r0
 8021a88:	9e08      	ldr	r6, [sp, #32]
 8021a8a:	1837      	adds	r7, r6, r0
 8021a8c:	5c30      	ldrb	r0, [r6, r0]
 8021a8e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8021a92:	eb04 0c08 	add.w	ip, r4, r8
 8021a96:	2b00      	cmp	r3, #0
 8021a98:	f000 80d3 	beq.w	8021c42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8021a9c:	787e      	ldrb	r6, [r7, #1]
 8021a9e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021aa2:	4426      	add	r6, r4
 8021aa4:	2900      	cmp	r1, #0
 8021aa6:	f000 80d4 	beq.w	8021c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8021aaa:	18b8      	adds	r0, r7, r2
 8021aac:	5cba      	ldrb	r2, [r7, r2]
 8021aae:	7840      	ldrb	r0, [r0, #1]
 8021ab0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021ab4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021ab8:	4422      	add	r2, r4
 8021aba:	4420      	add	r0, r4
 8021abc:	b29b      	uxth	r3, r3
 8021abe:	78b7      	ldrb	r7, [r6, #2]
 8021ac0:	b289      	uxth	r1, r1
 8021ac2:	f89c a002 	ldrb.w	sl, [ip, #2]
 8021ac6:	f89c c001 	ldrb.w	ip, [ip, #1]
 8021aca:	fb03 f901 	mul.w	r9, r3, r1
 8021ace:	011b      	lsls	r3, r3, #4
 8021ad0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021ad4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021ad8:	eba3 0309 	sub.w	r3, r3, r9
 8021adc:	b289      	uxth	r1, r1
 8021ade:	b29b      	uxth	r3, r3
 8021ae0:	ebae 0e01 	sub.w	lr, lr, r1
 8021ae4:	435f      	muls	r7, r3
 8021ae6:	fa1f fe8e 	uxth.w	lr, lr
 8021aea:	fb0e 770a 	mla	r7, lr, sl, r7
 8021aee:	f892 a002 	ldrb.w	sl, [r2, #2]
 8021af2:	fb01 770a 	mla	r7, r1, sl, r7
 8021af6:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021afa:	fb09 7a0a 	mla	sl, r9, sl, r7
 8021afe:	f814 7008 	ldrb.w	r7, [r4, r8]
 8021b02:	f896 8000 	ldrb.w	r8, [r6]
 8021b06:	7876      	ldrb	r6, [r6, #1]
 8021b08:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8021b0c:	fb03 f808 	mul.w	r8, r3, r8
 8021b10:	4373      	muls	r3, r6
 8021b12:	fb0e 8807 	mla	r8, lr, r7, r8
 8021b16:	7817      	ldrb	r7, [r2, #0]
 8021b18:	fb0e 330c 	mla	r3, lr, ip, r3
 8021b1c:	fb01 8807 	mla	r8, r1, r7, r8
 8021b20:	7807      	ldrb	r7, [r0, #0]
 8021b22:	fb09 8707 	mla	r7, r9, r7, r8
 8021b26:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021b2a:	ea47 070a 	orr.w	r7, r7, sl
 8021b2e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8021b32:	fb01 310a 	mla	r1, r1, sl, r3
 8021b36:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b3c:	fb09 1a0a 	mla	sl, r9, sl, r1
 8021b40:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021b44:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021b48:	ea47 070a 	orr.w	r7, r7, sl
 8021b4c:	801f      	strh	r7, [r3, #0]
 8021b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b50:	3302      	adds	r3, #2
 8021b52:	9309      	str	r3, [sp, #36]	; 0x24
 8021b54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021b56:	449b      	add	fp, r3
 8021b58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b5a:	441d      	add	r5, r3
 8021b5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b5e:	3b01      	subs	r3, #1
 8021b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8021b62:	e770      	b.n	8021a46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021b64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021b66:	449b      	add	fp, r3
 8021b68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b6a:	441d      	add	r5, r3
 8021b6c:	9b06      	ldr	r3, [sp, #24]
 8021b6e:	3b01      	subs	r3, #1
 8021b70:	9306      	str	r3, [sp, #24]
 8021b72:	9b07      	ldr	r3, [sp, #28]
 8021b74:	3302      	adds	r3, #2
 8021b76:	9307      	str	r3, [sp, #28]
 8021b78:	e745      	b.n	8021a06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021b7a:	d023      	beq.n	8021bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021b7c:	9b06      	ldr	r3, [sp, #24]
 8021b7e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021b80:	3b01      	subs	r3, #1
 8021b82:	fb00 b003 	mla	r0, r0, r3, fp
 8021b86:	1400      	asrs	r0, r0, #16
 8021b88:	f53f af59 	bmi.w	8021a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021b8c:	3901      	subs	r1, #1
 8021b8e:	4288      	cmp	r0, r1
 8021b90:	f6bf af55 	bge.w	8021a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021b94:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021b96:	fb01 5303 	mla	r3, r1, r3, r5
 8021b9a:	141b      	asrs	r3, r3, #16
 8021b9c:	f53f af4f 	bmi.w	8021a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021ba0:	3a01      	subs	r2, #1
 8021ba2:	4293      	cmp	r3, r2
 8021ba4:	f6bf af4b 	bge.w	8021a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021ba8:	9b06      	ldr	r3, [sp, #24]
 8021baa:	9309      	str	r3, [sp, #36]	; 0x24
 8021bac:	9b07      	ldr	r3, [sp, #28]
 8021bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8021bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021bb2:	2b00      	cmp	r3, #0
 8021bb4:	dc70      	bgt.n	8021c98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8021bb6:	9b06      	ldr	r3, [sp, #24]
 8021bb8:	9a07      	ldr	r2, [sp, #28]
 8021bba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021bbe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021bc2:	9307      	str	r3, [sp, #28]
 8021bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021bc6:	2b00      	cmp	r3, #0
 8021bc8:	f340 80eb 	ble.w	8021da2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8021bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021bd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021bd2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021bd6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021bda:	eef0 6a48 	vmov.f32	s13, s16
 8021bde:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021be2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021be6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021bea:	ee16 ba90 	vmov	fp, s13
 8021bee:	eef0 6a68 	vmov.f32	s13, s17
 8021bf2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021bf6:	ee16 5a90 	vmov	r5, s13
 8021bfa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021bfe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021c02:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021c06:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021c0a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021c0e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021c12:	ee18 2a10 	vmov	r2, s16
 8021c16:	eeb0 8a47 	vmov.f32	s16, s14
 8021c1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c1e:	ee18 2a90 	vmov	r2, s17
 8021c22:	9323      	str	r3, [sp, #140]	; 0x8c
 8021c24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021c26:	eef0 8a67 	vmov.f32	s17, s15
 8021c2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c2e:	9324      	str	r3, [sp, #144]	; 0x90
 8021c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021c34:	3b01      	subs	r3, #1
 8021c36:	930a      	str	r3, [sp, #40]	; 0x28
 8021c38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021c3a:	bf08      	it	eq
 8021c3c:	4613      	moveq	r3, r2
 8021c3e:	9306      	str	r3, [sp, #24]
 8021c40:	e6d3      	b.n	80219ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021c42:	b149      	cbz	r1, 8021c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8021c44:	5cba      	ldrb	r2, [r7, r2]
 8021c46:	4660      	mov	r0, ip
 8021c48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021c4c:	4422      	add	r2, r4
 8021c4e:	4666      	mov	r6, ip
 8021c50:	e734      	b.n	8021abc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021c52:	4660      	mov	r0, ip
 8021c54:	4662      	mov	r2, ip
 8021c56:	e731      	b.n	8021abc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021c58:	4660      	mov	r0, ip
 8021c5a:	4662      	mov	r2, ip
 8021c5c:	e7f7      	b.n	8021c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021c5e:	f110 0c01 	adds.w	ip, r0, #1
 8021c62:	f53f af74 	bmi.w	8021b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021c66:	4562      	cmp	r2, ip
 8021c68:	f6ff af71 	blt.w	8021b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021c6c:	f116 0c01 	adds.w	ip, r6, #1
 8021c70:	f53f af6d 	bmi.w	8021b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021c74:	4567      	cmp	r7, ip
 8021c76:	f6ff af6a 	blt.w	8021b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021c7a:	b23f      	sxth	r7, r7
 8021c7c:	b212      	sxth	r2, r2
 8021c7e:	9701      	str	r7, [sp, #4]
 8021c80:	9200      	str	r2, [sp, #0]
 8021c82:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8021c86:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8021c8a:	4623      	mov	r3, r4
 8021c8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021c8e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8021c92:	f7ff fdc3 	bl	802181c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8021c96:	e75a      	b.n	8021b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021c98:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021c9a:	ea4f 462b 	mov.w	r6, fp, asr #16
 8021c9e:	1428      	asrs	r0, r5, #16
 8021ca0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8021ca4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021ca8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021cac:	fb02 6000 	mla	r0, r2, r0, r6
 8021cb0:	9e08      	ldr	r6, [sp, #32]
 8021cb2:	f816 8000 	ldrb.w	r8, [r6, r0]
 8021cb6:	1837      	adds	r7, r6, r0
 8021cb8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021cbc:	eb04 0c08 	add.w	ip, r4, r8
 8021cc0:	2b00      	cmp	r3, #0
 8021cc2:	d060      	beq.n	8021d86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8021cc4:	787e      	ldrb	r6, [r7, #1]
 8021cc6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021cca:	4426      	add	r6, r4
 8021ccc:	2900      	cmp	r1, #0
 8021cce:	d062      	beq.n	8021d96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8021cd0:	18b8      	adds	r0, r7, r2
 8021cd2:	5cba      	ldrb	r2, [r7, r2]
 8021cd4:	7840      	ldrb	r0, [r0, #1]
 8021cd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021cda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021cde:	4422      	add	r2, r4
 8021ce0:	4420      	add	r0, r4
 8021ce2:	b29b      	uxth	r3, r3
 8021ce4:	78b7      	ldrb	r7, [r6, #2]
 8021ce6:	b289      	uxth	r1, r1
 8021ce8:	f89c a002 	ldrb.w	sl, [ip, #2]
 8021cec:	f89c c001 	ldrb.w	ip, [ip, #1]
 8021cf0:	fb03 f901 	mul.w	r9, r3, r1
 8021cf4:	011b      	lsls	r3, r3, #4
 8021cf6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021cfa:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021cfe:	eba3 0309 	sub.w	r3, r3, r9
 8021d02:	b289      	uxth	r1, r1
 8021d04:	b29b      	uxth	r3, r3
 8021d06:	ebae 0e01 	sub.w	lr, lr, r1
 8021d0a:	435f      	muls	r7, r3
 8021d0c:	fa1f fe8e 	uxth.w	lr, lr
 8021d10:	fb0e 770a 	mla	r7, lr, sl, r7
 8021d14:	f892 a002 	ldrb.w	sl, [r2, #2]
 8021d18:	fb01 770a 	mla	r7, r1, sl, r7
 8021d1c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021d20:	fb09 7a0a 	mla	sl, r9, sl, r7
 8021d24:	f814 7008 	ldrb.w	r7, [r4, r8]
 8021d28:	f896 8000 	ldrb.w	r8, [r6]
 8021d2c:	7876      	ldrb	r6, [r6, #1]
 8021d2e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8021d32:	fb03 f808 	mul.w	r8, r3, r8
 8021d36:	4373      	muls	r3, r6
 8021d38:	7856      	ldrb	r6, [r2, #1]
 8021d3a:	fb0e 8807 	mla	r8, lr, r7, r8
 8021d3e:	7817      	ldrb	r7, [r2, #0]
 8021d40:	fb0e 330c 	mla	r3, lr, ip, r3
 8021d44:	fb01 8807 	mla	r8, r1, r7, r8
 8021d48:	7807      	ldrb	r7, [r0, #0]
 8021d4a:	fb01 3306 	mla	r3, r1, r6, r3
 8021d4e:	fb09 8707 	mla	r7, r9, r7, r8
 8021d52:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021d56:	ea47 070a 	orr.w	r7, r7, sl
 8021d5a:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021d5e:	fb09 3a0a 	mla	sl, r9, sl, r3
 8021d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021d64:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021d68:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021d6c:	ea47 070a 	orr.w	r7, r7, sl
 8021d70:	f823 7b02 	strh.w	r7, [r3], #2
 8021d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8021d76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021d78:	449b      	add	fp, r3
 8021d7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d7c:	441d      	add	r5, r3
 8021d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d80:	3b01      	subs	r3, #1
 8021d82:	9309      	str	r3, [sp, #36]	; 0x24
 8021d84:	e714      	b.n	8021bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8021d86:	b149      	cbz	r1, 8021d9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8021d88:	5cba      	ldrb	r2, [r7, r2]
 8021d8a:	4660      	mov	r0, ip
 8021d8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021d90:	4422      	add	r2, r4
 8021d92:	4666      	mov	r6, ip
 8021d94:	e7a5      	b.n	8021ce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8021d96:	4660      	mov	r0, ip
 8021d98:	4662      	mov	r2, ip
 8021d9a:	e7a2      	b.n	8021ce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8021d9c:	4660      	mov	r0, ip
 8021d9e:	4662      	mov	r2, ip
 8021da0:	e7f7      	b.n	8021d92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8021da2:	b00f      	add	sp, #60	; 0x3c
 8021da4:	ecbd 8b08 	vpop	{d8-d11}
 8021da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021dac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8021dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021db0:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8021db4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8021db8:	2c00      	cmp	r4, #0
 8021dba:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8021dbe:	fb04 560c 	mla	r6, r4, ip, r5
 8021dc2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8021dc6:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8021dca:	eb02 0e06 	add.w	lr, r2, r6
 8021dce:	db3d      	blt.n	8021e4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8021dd0:	45a0      	cmp	r8, r4
 8021dd2:	dd3b      	ble.n	8021e4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8021dd4:	2d00      	cmp	r5, #0
 8021dd6:	db37      	blt.n	8021e48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8021dd8:	45ac      	cmp	ip, r5
 8021dda:	dd35      	ble.n	8021e48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8021ddc:	5d92      	ldrb	r2, [r2, r6]
 8021dde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021de2:	1c6e      	adds	r6, r5, #1
 8021de4:	d435      	bmi.n	8021e52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8021de6:	45b4      	cmp	ip, r6
 8021de8:	dd33      	ble.n	8021e52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8021dea:	b3a0      	cbz	r0, 8021e56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8021dec:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8021df0:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8021df4:	3401      	adds	r4, #1
 8021df6:	d432      	bmi.n	8021e5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8021df8:	45a0      	cmp	r8, r4
 8021dfa:	dd30      	ble.n	8021e5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8021dfc:	b397      	cbz	r7, 8021e64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8021dfe:	2d00      	cmp	r5, #0
 8021e00:	db2b      	blt.n	8021e5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8021e02:	45ac      	cmp	ip, r5
 8021e04:	dd29      	ble.n	8021e5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8021e06:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8021e0a:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8021e0e:	3501      	adds	r5, #1
 8021e10:	d42b      	bmi.n	8021e6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8021e12:	45ac      	cmp	ip, r5
 8021e14:	dd29      	ble.n	8021e6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8021e16:	b350      	cbz	r0, 8021e6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8021e18:	44f4      	add	ip, lr
 8021e1a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8021e1e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8021e22:	280f      	cmp	r0, #15
 8021e24:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021e28:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021e2c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021e30:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021e34:	d801      	bhi.n	8021e3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 8021e36:	2f0f      	cmp	r7, #15
 8021e38:	d91b      	bls.n	8021e72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8021e3a:	4b8d      	ldr	r3, [pc, #564]	; (8022070 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8021e3c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8021e40:	4a8c      	ldr	r2, [pc, #560]	; (8022074 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8021e42:	488d      	ldr	r0, [pc, #564]	; (8022078 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8021e44:	f005 fd0a 	bl	802785c <__assert_func>
 8021e48:	2200      	movs	r2, #0
 8021e4a:	e7ca      	b.n	8021de2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8021e4c:	2600      	movs	r6, #0
 8021e4e:	4632      	mov	r2, r6
 8021e50:	e7d0      	b.n	8021df4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8021e52:	2600      	movs	r6, #0
 8021e54:	e7ce      	b.n	8021df4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8021e56:	4606      	mov	r6, r0
 8021e58:	e7cc      	b.n	8021df4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8021e5a:	2400      	movs	r4, #0
 8021e5c:	e7d7      	b.n	8021e0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 8021e5e:	2300      	movs	r3, #0
 8021e60:	461c      	mov	r4, r3
 8021e62:	e7de      	b.n	8021e22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8021e64:	463b      	mov	r3, r7
 8021e66:	463c      	mov	r4, r7
 8021e68:	e7db      	b.n	8021e22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8021e6a:	2300      	movs	r3, #0
 8021e6c:	e7d9      	b.n	8021e22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8021e6e:	4603      	mov	r3, r0
 8021e70:	e7d7      	b.n	8021e22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8021e72:	b280      	uxth	r0, r0
 8021e74:	b2bf      	uxth	r7, r7
 8021e76:	fb07 fe00 	mul.w	lr, r7, r0
 8021e7a:	0100      	lsls	r0, r0, #4
 8021e7c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021e80:	eba0 0c0e 	sub.w	ip, r0, lr
 8021e84:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8021e88:	b2bf      	uxth	r7, r7
 8021e8a:	fa1f fc8c 	uxth.w	ip, ip
 8021e8e:	1bed      	subs	r5, r5, r7
 8021e90:	fb0a f00c 	mul.w	r0, sl, ip
 8021e94:	b2ad      	uxth	r5, r5
 8021e96:	fb0b 0005 	mla	r0, fp, r5, r0
 8021e9a:	fb07 0009 	mla	r0, r7, r9, r0
 8021e9e:	fb0e 0008 	mla	r0, lr, r8, r0
 8021ea2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021ea6:	9001      	str	r0, [sp, #4]
 8021ea8:	2800      	cmp	r0, #0
 8021eaa:	f000 80de 	beq.w	802206a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8021eae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021eb2:	d018      	beq.n	8021ee6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 8021eb4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021eb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021ebc:	fb0b f000 	mul.w	r0, fp, r0
 8021ec0:	fb0b fb02 	mul.w	fp, fp, r2
 8021ec4:	0a02      	lsrs	r2, r0, #8
 8021ec6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021eca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021ece:	4402      	add	r2, r0
 8021ed0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8021ed4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021ed8:	0a12      	lsrs	r2, r2, #8
 8021eda:	0a00      	lsrs	r0, r0, #8
 8021edc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021ee0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021ee4:	4302      	orrs	r2, r0
 8021ee6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021eea:	d01a      	beq.n	8021f22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8021eec:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8021ef0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021ef4:	fb0a f000 	mul.w	r0, sl, r0
 8021ef8:	fb0a fa06 	mul.w	sl, sl, r6
 8021efc:	0a06      	lsrs	r6, r0, #8
 8021efe:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021f02:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021f06:	4406      	add	r6, r0
 8021f08:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021f0c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8021f10:	0a36      	lsrs	r6, r6, #8
 8021f12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f16:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021f1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f1e:	ea46 060a 	orr.w	r6, r6, sl
 8021f22:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021f26:	d01b      	beq.n	8021f60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8021f28:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021f2c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021f30:	fb09 fa0a 	mul.w	sl, r9, sl
 8021f34:	fb09 f004 	mul.w	r0, r9, r4
 8021f38:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021f3c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021f40:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8021f44:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021f48:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021f4c:	4454      	add	r4, sl
 8021f4e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021f52:	0a24      	lsrs	r4, r4, #8
 8021f54:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021f58:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021f5c:	ea44 0409 	orr.w	r4, r4, r9
 8021f60:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021f64:	d01b      	beq.n	8021f9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 8021f66:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021f6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f6e:	fb08 f909 	mul.w	r9, r8, r9
 8021f72:	fb08 f003 	mul.w	r0, r8, r3
 8021f76:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021f7a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021f7e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8021f82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f86:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8021f8a:	444b      	add	r3, r9
 8021f8c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021f90:	0a1b      	lsrs	r3, r3, #8
 8021f92:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021f96:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f9a:	ea43 0308 	orr.w	r3, r3, r8
 8021f9e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021fa2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021fa6:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8021faa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021fae:	fb0c f808 	mul.w	r8, ip, r8
 8021fb2:	8808      	ldrh	r0, [r1, #0]
 8021fb4:	fb0c f606 	mul.w	r6, ip, r6
 8021fb8:	fb05 8909 	mla	r9, r5, r9, r8
 8021fbc:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8021fc0:	fb05 6502 	mla	r5, r5, r2, r6
 8021fc4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021fc8:	fb07 9908 	mla	r9, r7, r8, r9
 8021fcc:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8021fd0:	fb07 5704 	mla	r7, r7, r4, r5
 8021fd4:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8021fd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021fdc:	b2b6      	uxth	r6, r6
 8021fde:	fb0e 9808 	mla	r8, lr, r8, r9
 8021fe2:	9a01      	ldr	r2, [sp, #4]
 8021fe4:	fb0e 7e03 	mla	lr, lr, r3, r7
 8021fe8:	1205      	asrs	r5, r0, #8
 8021fea:	4372      	muls	r2, r6
 8021fec:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021ff0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ff4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021ff8:	1c53      	adds	r3, r2, #1
 8021ffa:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8021ffe:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022002:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022006:	ea48 0e0e 	orr.w	lr, r8, lr
 802200a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802200e:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8022012:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8022016:	b2db      	uxtb	r3, r3
 8022018:	fb12 f206 	smulbb	r2, r2, r6
 802201c:	fa5f fe8e 	uxtb.w	lr, lr
 8022020:	fb14 f406 	smulbb	r4, r4, r6
 8022024:	fb05 2503 	mla	r5, r5, r3, r2
 8022028:	10c2      	asrs	r2, r0, #3
 802202a:	fb1e fe06 	smulbb	lr, lr, r6
 802202e:	00c0      	lsls	r0, r0, #3
 8022030:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022034:	b2ad      	uxth	r5, r5
 8022036:	b2c0      	uxtb	r0, r0
 8022038:	fb02 4203 	mla	r2, r2, r3, r4
 802203c:	fb00 e303 	mla	r3, r0, r3, lr
 8022040:	b294      	uxth	r4, r2
 8022042:	b298      	uxth	r0, r3
 8022044:	1c6b      	adds	r3, r5, #1
 8022046:	1c62      	adds	r2, r4, #1
 8022048:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802204c:	1c43      	adds	r3, r0, #1
 802204e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022052:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022056:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802205a:	0952      	lsrs	r2, r2, #5
 802205c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022060:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022064:	432b      	orrs	r3, r5
 8022066:	4313      	orrs	r3, r2
 8022068:	800b      	strh	r3, [r1, #0]
 802206a:	b003      	add	sp, #12
 802206c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022070:	0802bded 	.word	0x0802bded
 8022074:	0802c3ba 	.word	0x0802c3ba
 8022078:	0802be71 	.word	0x0802be71

0802207c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022080:	ed2d 8b08 	vpush	{d8-d11}
 8022084:	b09f      	sub	sp, #124	; 0x7c
 8022086:	eeb0 aa40 	vmov.f32	s20, s0
 802208a:	eef0 9a60 	vmov.f32	s19, s1
 802208e:	921b      	str	r2, [sp, #108]	; 0x6c
 8022090:	eeb0 9a41 	vmov.f32	s18, s2
 8022094:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8022096:	eeb0 8a62 	vmov.f32	s16, s5
 802209a:	9309      	str	r3, [sp, #36]	; 0x24
 802209c:	eef0 8a43 	vmov.f32	s17, s6
 80220a0:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80220a4:	eef0 ba44 	vmov.f32	s23, s8
 80220a8:	901d      	str	r0, [sp, #116]	; 0x74
 80220aa:	eeb0 ba64 	vmov.f32	s22, s9
 80220ae:	931c      	str	r3, [sp, #112]	; 0x70
 80220b0:	eef0 aa45 	vmov.f32	s21, s10
 80220b4:	6850      	ldr	r0, [r2, #4]
 80220b6:	9119      	str	r1, [sp, #100]	; 0x64
 80220b8:	6812      	ldr	r2, [r2, #0]
 80220ba:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80220bc:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80220c0:	fb00 1303 	mla	r3, r0, r3, r1
 80220c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80220c8:	930c      	str	r3, [sp, #48]	; 0x30
 80220ca:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80220cc:	681b      	ldr	r3, [r3, #0]
 80220ce:	9312      	str	r3, [sp, #72]	; 0x48
 80220d0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80220d2:	685e      	ldr	r6, [r3, #4]
 80220d4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80220d8:	3604      	adds	r6, #4
 80220da:	930d      	str	r3, [sp, #52]	; 0x34
 80220dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80220de:	2b00      	cmp	r3, #0
 80220e0:	dc03      	bgt.n	80220ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80220e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80220e4:	2b00      	cmp	r3, #0
 80220e6:	f340 8387 	ble.w	80227f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 80220ea:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80220ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80220f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80220f4:	1e48      	subs	r0, r1, #1
 80220f6:	1e57      	subs	r7, r2, #1
 80220f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	f340 8194 	ble.w	8022428 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8022100:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8022102:	142b      	asrs	r3, r5, #16
 8022104:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022108:	d406      	bmi.n	8022118 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802210a:	4584      	cmp	ip, r0
 802210c:	da04      	bge.n	8022118 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802210e:	2b00      	cmp	r3, #0
 8022110:	db02      	blt.n	8022118 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022112:	42bb      	cmp	r3, r7
 8022114:	f2c0 8189 	blt.w	802242a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8022118:	f11c 0c01 	adds.w	ip, ip, #1
 802211c:	f100 8177 	bmi.w	802240e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022120:	4561      	cmp	r1, ip
 8022122:	f2c0 8174 	blt.w	802240e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022126:	3301      	adds	r3, #1
 8022128:	f100 8171 	bmi.w	802240e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802212c:	429a      	cmp	r2, r3
 802212e:	f2c0 816e 	blt.w	802240e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022134:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022136:	931a      	str	r3, [sp, #104]	; 0x68
 8022138:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802213a:	2b00      	cmp	r3, #0
 802213c:	f340 8193 	ble.w	8022466 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022140:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022142:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022146:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802214a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802214e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022150:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8022154:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022156:	141b      	asrs	r3, r3, #16
 8022158:	f100 81d6 	bmi.w	8022508 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802215c:	f100 38ff 	add.w	r8, r0, #4294967295
 8022160:	4543      	cmp	r3, r8
 8022162:	f280 81d1 	bge.w	8022508 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8022166:	f1bc 0f00 	cmp.w	ip, #0
 802216a:	f2c0 81cd 	blt.w	8022508 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802216e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022172:	45c4      	cmp	ip, r8
 8022174:	f280 81c8 	bge.w	8022508 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8022178:	b200      	sxth	r0, r0
 802217a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802217c:	fb0c 3300 	mla	r3, ip, r0, r3
 8022180:	eb04 0803 	add.w	r8, r4, r3
 8022184:	5ce3      	ldrb	r3, [r4, r3]
 8022186:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802218a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802218e:	2a00      	cmp	r2, #0
 8022190:	f000 81af 	beq.w	80224f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022194:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022198:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802219c:	940e      	str	r4, [sp, #56]	; 0x38
 802219e:	0e24      	lsrs	r4, r4, #24
 80221a0:	9415      	str	r4, [sp, #84]	; 0x54
 80221a2:	b179      	cbz	r1, 80221c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80221a4:	eb08 0c00 	add.w	ip, r8, r0
 80221a8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80221ac:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80221b0:	900a      	str	r0, [sp, #40]	; 0x28
 80221b2:	0e00      	lsrs	r0, r0, #24
 80221b4:	9013      	str	r0, [sp, #76]	; 0x4c
 80221b6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80221ba:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80221be:	900f      	str	r0, [sp, #60]	; 0x3c
 80221c0:	0e00      	lsrs	r0, r0, #24
 80221c2:	9016      	str	r0, [sp, #88]	; 0x58
 80221c4:	b292      	uxth	r2, r2
 80221c6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80221c8:	b289      	uxth	r1, r1
 80221ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80221cc:	fb02 f901 	mul.w	r9, r2, r1
 80221d0:	0112      	lsls	r2, r2, #4
 80221d2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80221d6:	eba2 0809 	sub.w	r8, r2, r9
 80221da:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80221de:	b289      	uxth	r1, r1
 80221e0:	fa1f f888 	uxth.w	r8, r8
 80221e4:	1a52      	subs	r2, r2, r1
 80221e6:	fb08 f000 	mul.w	r0, r8, r0
 80221ea:	b292      	uxth	r2, r2
 80221ec:	fb02 000e 	mla	r0, r2, lr, r0
 80221f0:	fb01 0004 	mla	r0, r1, r4, r0
 80221f4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80221f6:	fb09 0004 	mla	r0, r9, r4, r0
 80221fa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80221fe:	2800      	cmp	r0, #0
 8022200:	f000 80fa 	beq.w	80223f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022204:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022208:	d01b      	beq.n	8022242 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802220a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802220e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022212:	fb0e fa0a 	mul.w	sl, lr, sl
 8022216:	fb0e fe03 	mul.w	lr, lr, r3
 802221a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802221e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022222:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022226:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802222a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802222e:	4453      	add	r3, sl
 8022230:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022234:	0a1b      	lsrs	r3, r3, #8
 8022236:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802223a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802223e:	ea43 030c 	orr.w	r3, r3, ip
 8022242:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022244:	2cff      	cmp	r4, #255	; 0xff
 8022246:	d021      	beq.n	802228c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8022248:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802224a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802224e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022250:	fb04 fb0b 	mul.w	fp, r4, fp
 8022254:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022256:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802225a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802225c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022260:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022264:	fb04 fa0a 	mul.w	sl, r4, sl
 8022268:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802226c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022270:	44de      	add	lr, fp
 8022272:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022276:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802227a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802227e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022282:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022286:	ea4e 040a 	orr.w	r4, lr, sl
 802228a:	940e      	str	r4, [sp, #56]	; 0x38
 802228c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802228e:	2cff      	cmp	r4, #255	; 0xff
 8022290:	d021      	beq.n	80222d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8022292:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022294:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022298:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802229a:	fb04 fb0b 	mul.w	fp, r4, fp
 802229e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80222a0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80222a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80222a6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80222aa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80222ae:	fb04 fa0a 	mul.w	sl, r4, sl
 80222b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80222b6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80222ba:	44de      	add	lr, fp
 80222bc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80222c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80222c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80222c8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80222cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80222d0:	ea4e 040a 	orr.w	r4, lr, sl
 80222d4:	940a      	str	r4, [sp, #40]	; 0x28
 80222d6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80222d8:	2cff      	cmp	r4, #255	; 0xff
 80222da:	d021      	beq.n	8022320 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80222dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80222de:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80222e2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80222e4:	fb04 fb0b 	mul.w	fp, r4, fp
 80222e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80222ea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80222ee:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80222f0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80222f4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80222f8:	fb04 fa0a 	mul.w	sl, r4, sl
 80222fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022300:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022304:	44de      	add	lr, fp
 8022306:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802230a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802230e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022312:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022316:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802231a:	ea4e 040a 	orr.w	r4, lr, sl
 802231e:	940f      	str	r4, [sp, #60]	; 0x3c
 8022320:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022322:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802232a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802232e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022330:	fb08 fc0c 	mul.w	ip, r8, ip
 8022334:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022338:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802233c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802233e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022342:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022346:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022348:	fb09 cc0e 	mla	ip, r9, lr, ip
 802234c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022350:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022352:	fb08 f80e 	mul.w	r8, r8, lr
 8022356:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802235a:	fb02 8303 	mla	r3, r2, r3, r8
 802235e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022360:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022364:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802236a:	fb01 330a 	mla	r3, r1, sl, r3
 802236e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022372:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022374:	fb09 3901 	mla	r9, r9, r1, r3
 8022378:	883b      	ldrh	r3, [r7, #0]
 802237a:	4342      	muls	r2, r0
 802237c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022380:	1c50      	adds	r0, r2, #1
 8022382:	1219      	asrs	r1, r3, #8
 8022384:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022388:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802238c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022390:	ea4c 0c09 	orr.w	ip, ip, r9
 8022394:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022398:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802239c:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80223a0:	b2c0      	uxtb	r0, r0
 80223a2:	fb12 f204 	smulbb	r2, r2, r4
 80223a6:	fa5f fc8c 	uxtb.w	ip, ip
 80223aa:	fb1e fe04 	smulbb	lr, lr, r4
 80223ae:	fb01 2100 	mla	r1, r1, r0, r2
 80223b2:	10da      	asrs	r2, r3, #3
 80223b4:	fb1c fc04 	smulbb	ip, ip, r4
 80223b8:	00db      	lsls	r3, r3, #3
 80223ba:	b289      	uxth	r1, r1
 80223bc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80223c0:	b2db      	uxtb	r3, r3
 80223c2:	fb02 e200 	mla	r2, r2, r0, lr
 80223c6:	fb03 c300 	mla	r3, r3, r0, ip
 80223ca:	b292      	uxth	r2, r2
 80223cc:	fa1f fc83 	uxth.w	ip, r3
 80223d0:	1c4b      	adds	r3, r1, #1
 80223d2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80223d6:	f10c 0301 	add.w	r3, ip, #1
 80223da:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80223de:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80223e2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80223e6:	430b      	orrs	r3, r1
 80223e8:	1c51      	adds	r1, r2, #1
 80223ea:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80223ee:	0952      	lsrs	r2, r2, #5
 80223f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80223f4:	4313      	orrs	r3, r2
 80223f6:	803b      	strh	r3, [r7, #0]
 80223f8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80223fa:	3702      	adds	r7, #2
 80223fc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80223fe:	441a      	add	r2, r3
 8022400:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022402:	441d      	add	r5, r3
 8022404:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022406:	9231      	str	r2, [sp, #196]	; 0xc4
 8022408:	3b01      	subs	r3, #1
 802240a:	931a      	str	r3, [sp, #104]	; 0x68
 802240c:	e694      	b.n	8022138 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802240e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8022410:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8022412:	441c      	add	r4, r3
 8022414:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022416:	441d      	add	r5, r3
 8022418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802241a:	9431      	str	r4, [sp, #196]	; 0xc4
 802241c:	3b01      	subs	r3, #1
 802241e:	9309      	str	r3, [sp, #36]	; 0x24
 8022420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022422:	3302      	adds	r3, #2
 8022424:	930c      	str	r3, [sp, #48]	; 0x30
 8022426:	e667      	b.n	80220f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022428:	d024      	beq.n	8022474 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802242a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802242c:	9833      	ldr	r0, [sp, #204]	; 0xcc
 802242e:	3b01      	subs	r3, #1
 8022430:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8022432:	fb00 4003 	mla	r0, r0, r3, r4
 8022436:	1400      	asrs	r0, r0, #16
 8022438:	f53f ae7b 	bmi.w	8022132 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802243c:	3901      	subs	r1, #1
 802243e:	4288      	cmp	r0, r1
 8022440:	f6bf ae77 	bge.w	8022132 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022444:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8022446:	fb01 5303 	mla	r3, r1, r3, r5
 802244a:	141b      	asrs	r3, r3, #16
 802244c:	f53f ae71 	bmi.w	8022132 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022450:	3a01      	subs	r2, #1
 8022452:	4293      	cmp	r3, r2
 8022454:	f6bf ae6d 	bge.w	8022132 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022458:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802245c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8022460:	f1bb 0f00 	cmp.w	fp, #0
 8022464:	dc70      	bgt.n	8022548 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8022466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022468:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802246c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802246e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022472:	930c      	str	r3, [sp, #48]	; 0x30
 8022474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022476:	2b00      	cmp	r3, #0
 8022478:	f340 81be 	ble.w	80227f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 802247c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022480:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022482:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022486:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802248a:	eef0 6a48 	vmov.f32	s13, s16
 802248e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022492:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022496:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802249a:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 802249e:	eef0 6a68 	vmov.f32	s13, s17
 80224a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80224a6:	ee16 5a90 	vmov	r5, s13
 80224aa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80224ae:	ee69 7a27 	vmul.f32	s15, s18, s15
 80224b2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80224b6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80224ba:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80224be:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80224c2:	ee18 2a10 	vmov	r2, s16
 80224c6:	eeb0 8a47 	vmov.f32	s16, s14
 80224ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80224ce:	ee18 2a90 	vmov	r2, s17
 80224d2:	9333      	str	r3, [sp, #204]	; 0xcc
 80224d4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80224d6:	eef0 8a67 	vmov.f32	s17, s15
 80224da:	fb92 f3f3 	sdiv	r3, r2, r3
 80224de:	9334      	str	r3, [sp, #208]	; 0xd0
 80224e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80224e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80224e4:	3b01      	subs	r3, #1
 80224e6:	9319      	str	r3, [sp, #100]	; 0x64
 80224e8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80224ea:	bf08      	it	eq
 80224ec:	4613      	moveq	r3, r2
 80224ee:	9309      	str	r3, [sp, #36]	; 0x24
 80224f0:	e5f4      	b.n	80220dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80224f2:	2900      	cmp	r1, #0
 80224f4:	f43f ae66 	beq.w	80221c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80224f8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80224fc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8022500:	900a      	str	r0, [sp, #40]	; 0x28
 8022502:	0e00      	lsrs	r0, r0, #24
 8022504:	9013      	str	r0, [sp, #76]	; 0x4c
 8022506:	e65d      	b.n	80221c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022508:	f113 0801 	adds.w	r8, r3, #1
 802250c:	f53f af74 	bmi.w	80223f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022510:	4540      	cmp	r0, r8
 8022512:	f6ff af71 	blt.w	80223f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022516:	f11c 0801 	adds.w	r8, ip, #1
 802251a:	f53f af6d 	bmi.w	80223f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802251e:	45c6      	cmp	lr, r8
 8022520:	f6ff af6a 	blt.w	80223f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022524:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8022526:	b200      	sxth	r0, r0
 8022528:	9302      	str	r3, [sp, #8]
 802252a:	fa0f f38e 	sxth.w	r3, lr
 802252e:	9000      	str	r0, [sp, #0]
 8022530:	9301      	str	r3, [sp, #4]
 8022532:	4633      	mov	r3, r6
 8022534:	981d      	ldr	r0, [sp, #116]	; 0x74
 8022536:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802253a:	e9cd c203 	strd	ip, r2, [sp, #12]
 802253e:	4639      	mov	r1, r7
 8022540:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022542:	f7ff fc33 	bl	8021dac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8022546:	e757      	b.n	80223f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022548:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802254a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802254e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8022550:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022554:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022556:	1427      	asrs	r7, r4, #16
 8022558:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802255a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802255e:	142b      	asrs	r3, r5, #16
 8022560:	fb01 7303 	mla	r3, r1, r3, r7
 8022564:	18e7      	adds	r7, r4, r3
 8022566:	5ce3      	ldrb	r3, [r4, r3]
 8022568:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802256c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022570:	2a00      	cmp	r2, #0
 8022572:	f000 8137 	beq.w	80227e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 8022576:	f897 e001 	ldrb.w	lr, [r7, #1]
 802257a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802257e:	9410      	str	r4, [sp, #64]	; 0x40
 8022580:	0e24      	lsrs	r4, r4, #24
 8022582:	9417      	str	r4, [sp, #92]	; 0x5c
 8022584:	b170      	cbz	r0, 80225a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8022586:	eb07 0e01 	add.w	lr, r7, r1
 802258a:	5c79      	ldrb	r1, [r7, r1]
 802258c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022590:	910b      	str	r1, [sp, #44]	; 0x2c
 8022592:	0e09      	lsrs	r1, r1, #24
 8022594:	9114      	str	r1, [sp, #80]	; 0x50
 8022596:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802259a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802259e:	9111      	str	r1, [sp, #68]	; 0x44
 80225a0:	0e09      	lsrs	r1, r1, #24
 80225a2:	9118      	str	r1, [sp, #96]	; 0x60
 80225a4:	b292      	uxth	r2, r2
 80225a6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80225a8:	b280      	uxth	r0, r0
 80225aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80225ac:	fb02 f800 	mul.w	r8, r2, r0
 80225b0:	0112      	lsls	r2, r2, #4
 80225b2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80225b6:	eba2 0e08 	sub.w	lr, r2, r8
 80225ba:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80225be:	b280      	uxth	r0, r0
 80225c0:	fa1f fe8e 	uxth.w	lr, lr
 80225c4:	1a12      	subs	r2, r2, r0
 80225c6:	fb0e f101 	mul.w	r1, lr, r1
 80225ca:	b292      	uxth	r2, r2
 80225cc:	fb02 110c 	mla	r1, r2, ip, r1
 80225d0:	fb00 1104 	mla	r1, r0, r4, r1
 80225d4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80225d6:	fb08 1104 	mla	r1, r8, r4, r1
 80225da:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80225de:	2900      	cmp	r1, #0
 80225e0:	f000 80f5 	beq.w	80227ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 80225e4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80225e8:	d019      	beq.n	802261e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 80225ea:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80225ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80225f2:	fb0c fa0a 	mul.w	sl, ip, sl
 80225f6:	fb0c fc03 	mul.w	ip, ip, r3
 80225fa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80225fe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022602:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022606:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802260a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802260e:	4453      	add	r3, sl
 8022610:	0a3f      	lsrs	r7, r7, #8
 8022612:	0a1b      	lsrs	r3, r3, #8
 8022614:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022618:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802261c:	433b      	orrs	r3, r7
 802261e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022620:	2cff      	cmp	r4, #255	; 0xff
 8022622:	d020      	beq.n	8022666 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8022624:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022626:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802262a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802262c:	4367      	muls	r7, r4
 802262e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022630:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022634:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022638:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802263a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802263e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022642:	fb04 fa0a 	mul.w	sl, r4, sl
 8022646:	44bc      	add	ip, r7
 8022648:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802264c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022650:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022654:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022658:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802265c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022660:	ea4c 040a 	orr.w	r4, ip, sl
 8022664:	9410      	str	r4, [sp, #64]	; 0x40
 8022666:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022668:	2cff      	cmp	r4, #255	; 0xff
 802266a:	d020      	beq.n	80226ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 802266c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802266e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022672:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022674:	4367      	muls	r7, r4
 8022676:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022678:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802267c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022680:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022682:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022686:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802268a:	fb04 fa0a 	mul.w	sl, r4, sl
 802268e:	44bc      	add	ip, r7
 8022690:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022694:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022698:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802269c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80226a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80226a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80226a8:	ea4c 040a 	orr.w	r4, ip, sl
 80226ac:	940b      	str	r4, [sp, #44]	; 0x2c
 80226ae:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80226b0:	2cff      	cmp	r4, #255	; 0xff
 80226b2:	d020      	beq.n	80226f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 80226b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80226b6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80226ba:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80226bc:	4367      	muls	r7, r4
 80226be:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80226c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80226c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80226c8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80226ca:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80226ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80226d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80226d6:	44bc      	add	ip, r7
 80226d8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80226dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80226e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80226e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80226e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80226ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80226f0:	ea4c 040a 	orr.w	r4, ip, sl
 80226f4:	9411      	str	r4, [sp, #68]	; 0x44
 80226f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80226f8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80226fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022700:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022704:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022706:	fb0e f707 	mul.w	r7, lr, r7
 802270a:	fb02 770c 	mla	r7, r2, ip, r7
 802270e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022712:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022714:	fb00 770c 	mla	r7, r0, ip, r7
 8022718:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802271c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802271e:	fb08 770c 	mla	r7, r8, ip, r7
 8022722:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022726:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022728:	fb0e fe0c 	mul.w	lr, lr, ip
 802272c:	0a3f      	lsrs	r7, r7, #8
 802272e:	fb02 e303 	mla	r3, r2, r3, lr
 8022732:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022734:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022738:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802273c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802273e:	fb00 330a 	mla	r3, r0, sl, r3
 8022742:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022746:	f8b9 0000 	ldrh.w	r0, [r9]
 802274a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802274e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022750:	1202      	asrs	r2, r0, #8
 8022752:	434b      	muls	r3, r1
 8022754:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022758:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802275c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022760:	1c59      	adds	r1, r3, #1
 8022762:	ea47 070c 	orr.w	r7, r7, ip
 8022766:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802276a:	0c3b      	lsrs	r3, r7, #16
 802276c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022770:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8022774:	b2ff      	uxtb	r7, r7
 8022776:	fb13 f304 	smulbb	r3, r3, r4
 802277a:	b2c9      	uxtb	r1, r1
 802277c:	fb1c fc04 	smulbb	ip, ip, r4
 8022780:	fb02 3201 	mla	r2, r2, r1, r3
 8022784:	10c3      	asrs	r3, r0, #3
 8022786:	fb17 f704 	smulbb	r7, r7, r4
 802278a:	00c0      	lsls	r0, r0, #3
 802278c:	b292      	uxth	r2, r2
 802278e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8022792:	b2c0      	uxtb	r0, r0
 8022794:	fb03 c301 	mla	r3, r3, r1, ip
 8022798:	f102 0c01 	add.w	ip, r2, #1
 802279c:	fb00 7001 	mla	r0, r0, r1, r7
 80227a0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80227a4:	b280      	uxth	r0, r0
 80227a6:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80227aa:	b29b      	uxth	r3, r3
 80227ac:	1c42      	adds	r2, r0, #1
 80227ae:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80227b2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80227b6:	ea42 020c 	orr.w	r2, r2, ip
 80227ba:	f103 0c01 	add.w	ip, r3, #1
 80227be:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80227c2:	095b      	lsrs	r3, r3, #5
 80227c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80227c8:	431a      	orrs	r2, r3
 80227ca:	f8a9 2000 	strh.w	r2, [r9]
 80227ce:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80227d0:	f109 0902 	add.w	r9, r9, #2
 80227d4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80227d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80227da:	441a      	add	r2, r3
 80227dc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80227de:	9231      	str	r2, [sp, #196]	; 0xc4
 80227e0:	441d      	add	r5, r3
 80227e2:	e63d      	b.n	8022460 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80227e4:	2800      	cmp	r0, #0
 80227e6:	f43f aedd 	beq.w	80225a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 80227ea:	5c79      	ldrb	r1, [r7, r1]
 80227ec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80227f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80227f2:	0e09      	lsrs	r1, r1, #24
 80227f4:	9114      	str	r1, [sp, #80]	; 0x50
 80227f6:	e6d5      	b.n	80225a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 80227f8:	b01f      	add	sp, #124	; 0x7c
 80227fa:	ecbd 8b08 	vpop	{d8-d11}
 80227fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022804 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8022804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022808:	880e      	ldrh	r6, [r1, #0]
 802280a:	b085      	sub	sp, #20
 802280c:	4691      	mov	r9, r2
 802280e:	ea4f 2826 	mov.w	r8, r6, asr #8
 8022812:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8022816:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 802281a:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 802281e:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8022822:	00f6      	lsls	r6, r6, #3
 8022824:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022828:	9200      	str	r2, [sp, #0]
 802282a:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 802282e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8022832:	9201      	str	r2, [sp, #4]
 8022834:	b2f2      	uxtb	r2, r6
 8022836:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 802283a:	9202      	str	r2, [sp, #8]
 802283c:	fb04 560c 	mla	r6, r4, ip, r5
 8022840:	2c00      	cmp	r4, #0
 8022842:	eb09 0806 	add.w	r8, r9, r6
 8022846:	db3f      	blt.n	80228c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8022848:	45a6      	cmp	lr, r4
 802284a:	dd3d      	ble.n	80228c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 802284c:	2d00      	cmp	r5, #0
 802284e:	db39      	blt.n	80228c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8022850:	45ac      	cmp	ip, r5
 8022852:	dd37      	ble.n	80228c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8022854:	f819 2006 	ldrb.w	r2, [r9, r6]
 8022858:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802285c:	1c6e      	adds	r6, r5, #1
 802285e:	d436      	bmi.n	80228ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8022860:	45b4      	cmp	ip, r6
 8022862:	dd34      	ble.n	80228ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8022864:	b3a8      	cbz	r0, 80228d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8022866:	f898 6001 	ldrb.w	r6, [r8, #1]
 802286a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 802286e:	3401      	adds	r4, #1
 8022870:	d433      	bmi.n	80228da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8022872:	45a6      	cmp	lr, r4
 8022874:	dd31      	ble.n	80228da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8022876:	b39f      	cbz	r7, 80228e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8022878:	2d00      	cmp	r5, #0
 802287a:	eb08 0e0c 	add.w	lr, r8, ip
 802287e:	db2a      	blt.n	80228d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8022880:	45ac      	cmp	ip, r5
 8022882:	dd28      	ble.n	80228d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8022884:	f818 400c 	ldrb.w	r4, [r8, ip]
 8022888:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 802288c:	3501      	adds	r5, #1
 802288e:	d42a      	bmi.n	80228e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8022890:	45ac      	cmp	ip, r5
 8022892:	dd28      	ble.n	80228e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8022894:	b348      	cbz	r0, 80228ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8022896:	f89e 5001 	ldrb.w	r5, [lr, #1]
 802289a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802289e:	280f      	cmp	r0, #15
 80228a0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80228a4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80228a8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80228ac:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80228b0:	d801      	bhi.n	80228b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 80228b2:	2f0f      	cmp	r7, #15
 80228b4:	d91b      	bls.n	80228ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 80228b6:	4b7e      	ldr	r3, [pc, #504]	; (8022ab0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 80228b8:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80228bc:	4a7d      	ldr	r2, [pc, #500]	; (8022ab4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 80228be:	487e      	ldr	r0, [pc, #504]	; (8022ab8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 80228c0:	f004 ffcc 	bl	802785c <__assert_func>
 80228c4:	2200      	movs	r2, #0
 80228c6:	e7c9      	b.n	802285c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 80228c8:	2600      	movs	r6, #0
 80228ca:	4632      	mov	r2, r6
 80228cc:	e7cf      	b.n	802286e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80228ce:	2600      	movs	r6, #0
 80228d0:	e7cd      	b.n	802286e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80228d2:	4606      	mov	r6, r0
 80228d4:	e7cb      	b.n	802286e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80228d6:	2400      	movs	r4, #0
 80228d8:	e7d8      	b.n	802288c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 80228da:	2300      	movs	r3, #0
 80228dc:	461c      	mov	r4, r3
 80228de:	e7de      	b.n	802289e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 80228e0:	463b      	mov	r3, r7
 80228e2:	463c      	mov	r4, r7
 80228e4:	e7db      	b.n	802289e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 80228e6:	2300      	movs	r3, #0
 80228e8:	e7d9      	b.n	802289e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 80228ea:	4603      	mov	r3, r0
 80228ec:	e7d7      	b.n	802289e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 80228ee:	b280      	uxth	r0, r0
 80228f0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80228f4:	b2bf      	uxth	r7, r7
 80228f6:	fb00 fe07 	mul.w	lr, r0, r7
 80228fa:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80228fe:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022902:	eba0 0c0e 	sub.w	ip, r0, lr
 8022906:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802290a:	b2bf      	uxth	r7, r7
 802290c:	fa1f fc8c 	uxth.w	ip, ip
 8022910:	eba5 0507 	sub.w	r5, r5, r7
 8022914:	fb0c f00a 	mul.w	r0, ip, sl
 8022918:	b2ad      	uxth	r5, r5
 802291a:	fb05 000b 	mla	r0, r5, fp, r0
 802291e:	fb07 0009 	mla	r0, r7, r9, r0
 8022922:	fb0e 0008 	mla	r0, lr, r8, r0
 8022926:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802292a:	9003      	str	r0, [sp, #12]
 802292c:	d018      	beq.n	8022960 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 802292e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022932:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022936:	fb0b f000 	mul.w	r0, fp, r0
 802293a:	fb0b fb02 	mul.w	fp, fp, r2
 802293e:	0a02      	lsrs	r2, r0, #8
 8022940:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022944:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022948:	4402      	add	r2, r0
 802294a:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802294e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022952:	0a12      	lsrs	r2, r2, #8
 8022954:	0a00      	lsrs	r0, r0, #8
 8022956:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802295a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802295e:	4302      	orrs	r2, r0
 8022960:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022964:	d019      	beq.n	802299a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 8022966:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802296a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802296e:	fb0a fb0b 	mul.w	fp, sl, fp
 8022972:	fb0a fa06 	mul.w	sl, sl, r6
 8022976:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802297a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802297e:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022982:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022986:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802298a:	445e      	add	r6, fp
 802298c:	0a00      	lsrs	r0, r0, #8
 802298e:	0a36      	lsrs	r6, r6, #8
 8022990:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022994:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022998:	4306      	orrs	r6, r0
 802299a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802299e:	d019      	beq.n	80229d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 80229a0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80229a4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80229a8:	fb09 fa0a 	mul.w	sl, r9, sl
 80229ac:	fb09 f904 	mul.w	r9, r9, r4
 80229b0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80229b4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80229b8:	f509 7080 	add.w	r0, r9, #256	; 0x100
 80229bc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80229c0:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80229c4:	4454      	add	r4, sl
 80229c6:	0a00      	lsrs	r0, r0, #8
 80229c8:	0a24      	lsrs	r4, r4, #8
 80229ca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80229ce:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80229d2:	4304      	orrs	r4, r0
 80229d4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80229d8:	d019      	beq.n	8022a0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 80229da:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80229de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80229e2:	fb08 f909 	mul.w	r9, r8, r9
 80229e6:	fb08 f803 	mul.w	r8, r8, r3
 80229ea:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80229ee:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80229f2:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80229f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80229fa:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80229fe:	444b      	add	r3, r9
 8022a00:	0a00      	lsrs	r0, r0, #8
 8022a02:	0a1b      	lsrs	r3, r3, #8
 8022a04:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022a08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a0c:	4303      	orrs	r3, r0
 8022a0e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022a12:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022a16:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022a1a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022a1e:	fb0c f808 	mul.w	r8, ip, r8
 8022a22:	fb0c f606 	mul.w	r6, ip, r6
 8022a26:	fb05 8800 	mla	r8, r5, r0, r8
 8022a2a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022a2e:	fb05 6202 	mla	r2, r5, r2, r6
 8022a32:	9d00      	ldr	r5, [sp, #0]
 8022a34:	fb07 8800 	mla	r8, r7, r0, r8
 8022a38:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022a3c:	fb0e 8000 	mla	r0, lr, r0, r8
 8022a40:	0a00      	lsrs	r0, r0, #8
 8022a42:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8022a46:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8022a4a:	fb07 2700 	mla	r7, r7, r0, r2
 8022a4e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8022a52:	9b03      	ldr	r3, [sp, #12]
 8022a54:	fb0e 7000 	mla	r0, lr, r0, r7
 8022a58:	9a02      	ldr	r2, [sp, #8]
 8022a5a:	43dc      	mvns	r4, r3
 8022a5c:	9b01      	ldr	r3, [sp, #4]
 8022a5e:	0a00      	lsrs	r0, r0, #8
 8022a60:	b2e4      	uxtb	r4, r4
 8022a62:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022a66:	4363      	muls	r3, r4
 8022a68:	4365      	muls	r5, r4
 8022a6a:	ea48 0000 	orr.w	r0, r8, r0
 8022a6e:	4362      	muls	r2, r4
 8022a70:	1c5e      	adds	r6, r3, #1
 8022a72:	4614      	mov	r4, r2
 8022a74:	1c6a      	adds	r2, r5, #1
 8022a76:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8022a7a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8022a7e:	0a03      	lsrs	r3, r0, #8
 8022a80:	0c02      	lsrs	r2, r0, #16
 8022a82:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8022a86:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8022a8a:	00db      	lsls	r3, r3, #3
 8022a8c:	0212      	lsls	r2, r2, #8
 8022a8e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022a92:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8022a96:	4313      	orrs	r3, r2
 8022a98:	1c62      	adds	r2, r4, #1
 8022a9a:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8022a9e:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8022aa2:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8022aa6:	4318      	orrs	r0, r3
 8022aa8:	8008      	strh	r0, [r1, #0]
 8022aaa:	b005      	add	sp, #20
 8022aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ab0:	0802bded 	.word	0x0802bded
 8022ab4:	0802c3ba 	.word	0x0802c3ba
 8022ab8:	0802be71 	.word	0x0802be71

08022abc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ac0:	ed2d 8b08 	vpush	{d8-d11}
 8022ac4:	b09b      	sub	sp, #108	; 0x6c
 8022ac6:	eeb0 aa40 	vmov.f32	s20, s0
 8022aca:	eef0 9a60 	vmov.f32	s19, s1
 8022ace:	9218      	str	r2, [sp, #96]	; 0x60
 8022ad0:	eeb0 9a41 	vmov.f32	s18, s2
 8022ad4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8022ad6:	eeb0 8a62 	vmov.f32	s16, s5
 8022ada:	9019      	str	r0, [sp, #100]	; 0x64
 8022adc:	eef0 8a43 	vmov.f32	s17, s6
 8022ae0:	6850      	ldr	r0, [r2, #4]
 8022ae2:	eef0 ba44 	vmov.f32	s23, s8
 8022ae6:	9116      	str	r1, [sp, #88]	; 0x58
 8022ae8:	eeb0 ba64 	vmov.f32	s22, s9
 8022aec:	9307      	str	r3, [sp, #28]
 8022aee:	eef0 aa45 	vmov.f32	s21, s10
 8022af2:	6812      	ldr	r2, [r2, #0]
 8022af4:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8022af6:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022afa:	fb00 1303 	mla	r3, r0, r3, r1
 8022afe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022b02:	930a      	str	r3, [sp, #40]	; 0x28
 8022b04:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022b06:	681b      	ldr	r3, [r3, #0]
 8022b08:	930f      	str	r3, [sp, #60]	; 0x3c
 8022b0a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022b0c:	685e      	ldr	r6, [r3, #4]
 8022b0e:	3604      	adds	r6, #4
 8022b10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022b12:	2b00      	cmp	r3, #0
 8022b14:	dc03      	bgt.n	8022b1e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022b16:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022b18:	2b00      	cmp	r3, #0
 8022b1a:	f340 8373 	ble.w	8023204 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8022b1e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022b20:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022b24:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022b28:	1e48      	subs	r0, r1, #1
 8022b2a:	1e57      	subs	r7, r2, #1
 8022b2c:	9b07      	ldr	r3, [sp, #28]
 8022b2e:	2b00      	cmp	r3, #0
 8022b30:	f340 818f 	ble.w	8022e52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8022b34:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8022b36:	142b      	asrs	r3, r5, #16
 8022b38:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022b3c:	d406      	bmi.n	8022b4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022b3e:	4584      	cmp	ip, r0
 8022b40:	da04      	bge.n	8022b4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	db02      	blt.n	8022b4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022b46:	42bb      	cmp	r3, r7
 8022b48:	f2c0 8184 	blt.w	8022e54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8022b4c:	f11c 0c01 	adds.w	ip, ip, #1
 8022b50:	f100 8172 	bmi.w	8022e38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022b54:	4561      	cmp	r1, ip
 8022b56:	f2c0 816f 	blt.w	8022e38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022b5a:	3301      	adds	r3, #1
 8022b5c:	f100 816c 	bmi.w	8022e38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022b60:	429a      	cmp	r2, r3
 8022b62:	f2c0 8169 	blt.w	8022e38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022b66:	9b07      	ldr	r3, [sp, #28]
 8022b68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022b6a:	9317      	str	r3, [sp, #92]	; 0x5c
 8022b6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022b6e:	2b00      	cmp	r3, #0
 8022b70:	f340 818e 	ble.w	8022e90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8022b74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022b76:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022b7a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022b7e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022b82:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022b84:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8022b88:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022b8a:	141b      	asrs	r3, r3, #16
 8022b8c:	f100 81d1 	bmi.w	8022f32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022b90:	f101 38ff 	add.w	r8, r1, #4294967295
 8022b94:	4543      	cmp	r3, r8
 8022b96:	f280 81cc 	bge.w	8022f32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022b9a:	f1bc 0f00 	cmp.w	ip, #0
 8022b9e:	f2c0 81c8 	blt.w	8022f32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022ba2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022ba6:	45c4      	cmp	ip, r8
 8022ba8:	f280 81c3 	bge.w	8022f32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022bac:	b209      	sxth	r1, r1
 8022bae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022bb0:	fb0c 3301 	mla	r3, ip, r1, r3
 8022bb4:	eb04 0803 	add.w	r8, r4, r3
 8022bb8:	5ce3      	ldrb	r3, [r4, r3]
 8022bba:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022bbe:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022bc2:	2a00      	cmp	r2, #0
 8022bc4:	f000 81aa 	beq.w	8022f1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8022bc8:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022bcc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8022bd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8022bd2:	0e24      	lsrs	r4, r4, #24
 8022bd4:	9412      	str	r4, [sp, #72]	; 0x48
 8022bd6:	b178      	cbz	r0, 8022bf8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8022bd8:	eb08 0c01 	add.w	ip, r8, r1
 8022bdc:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022be0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022be4:	9108      	str	r1, [sp, #32]
 8022be6:	0e09      	lsrs	r1, r1, #24
 8022be8:	9110      	str	r1, [sp, #64]	; 0x40
 8022bea:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8022bee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022bf2:	910c      	str	r1, [sp, #48]	; 0x30
 8022bf4:	0e09      	lsrs	r1, r1, #24
 8022bf6:	9113      	str	r1, [sp, #76]	; 0x4c
 8022bf8:	b292      	uxth	r2, r2
 8022bfa:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022bfc:	b280      	uxth	r0, r0
 8022bfe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022c00:	fb02 f900 	mul.w	r9, r2, r0
 8022c04:	0112      	lsls	r2, r2, #4
 8022c06:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022c0a:	eba2 0809 	sub.w	r8, r2, r9
 8022c0e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022c12:	b280      	uxth	r0, r0
 8022c14:	fa1f f888 	uxth.w	r8, r8
 8022c18:	1a12      	subs	r2, r2, r0
 8022c1a:	fb08 f101 	mul.w	r1, r8, r1
 8022c1e:	b292      	uxth	r2, r2
 8022c20:	fb02 110e 	mla	r1, r2, lr, r1
 8022c24:	fb00 1104 	mla	r1, r0, r4, r1
 8022c28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022c2a:	fb09 1104 	mla	r1, r9, r4, r1
 8022c2e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022c32:	2900      	cmp	r1, #0
 8022c34:	f000 80f5 	beq.w	8022e22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022c38:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022c3c:	d01b      	beq.n	8022c76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022c3e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022c42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022c46:	fb0e fa0a 	mul.w	sl, lr, sl
 8022c4a:	fb0e fe03 	mul.w	lr, lr, r3
 8022c4e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022c52:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022c56:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022c5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022c5e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022c62:	4453      	add	r3, sl
 8022c64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c68:	0a1b      	lsrs	r3, r3, #8
 8022c6a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022c6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022c72:	ea43 030c 	orr.w	r3, r3, ip
 8022c76:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022c78:	2cff      	cmp	r4, #255	; 0xff
 8022c7a:	d021      	beq.n	8022cc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022c7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022c7e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022c82:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022c84:	fb04 fb0b 	mul.w	fp, r4, fp
 8022c88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022c8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022c8e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022c90:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022c94:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022c98:	fb04 fa0a 	mul.w	sl, r4, sl
 8022c9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ca0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022ca4:	44de      	add	lr, fp
 8022ca6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022caa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022cae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022cb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022cb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022cba:	ea4e 040a 	orr.w	r4, lr, sl
 8022cbe:	940b      	str	r4, [sp, #44]	; 0x2c
 8022cc0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022cc2:	2cff      	cmp	r4, #255	; 0xff
 8022cc4:	d021      	beq.n	8022d0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8022cc6:	9c08      	ldr	r4, [sp, #32]
 8022cc8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022ccc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022cce:	fb04 fb0b 	mul.w	fp, r4, fp
 8022cd2:	9c08      	ldr	r4, [sp, #32]
 8022cd4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022cd8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022cda:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022cde:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022ce2:	fb04 fa0a 	mul.w	sl, r4, sl
 8022ce6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022cea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022cee:	44de      	add	lr, fp
 8022cf0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022cf4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022cf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022cfc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022d00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022d04:	ea4e 040a 	orr.w	r4, lr, sl
 8022d08:	9408      	str	r4, [sp, #32]
 8022d0a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022d0c:	2cff      	cmp	r4, #255	; 0xff
 8022d0e:	d021      	beq.n	8022d54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8022d10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022d12:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022d16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022d18:	fb04 fb0b 	mul.w	fp, r4, fp
 8022d1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022d1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022d22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022d24:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022d28:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022d2c:	fb04 fa0a 	mul.w	sl, r4, sl
 8022d30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022d34:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022d38:	44de      	add	lr, fp
 8022d3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022d3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022d46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022d4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022d4e:	ea4e 040a 	orr.w	r4, lr, sl
 8022d52:	940c      	str	r4, [sp, #48]	; 0x30
 8022d54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022d56:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022d5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022d5e:	43c9      	mvns	r1, r1
 8022d60:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022d64:	9c08      	ldr	r4, [sp, #32]
 8022d66:	fb08 fc0c 	mul.w	ip, r8, ip
 8022d6a:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022d6e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022d72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022d74:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022d78:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022d7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022d7e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022d82:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022d86:	fb08 f80e 	mul.w	r8, r8, lr
 8022d8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d8e:	fa5f fe81 	uxtb.w	lr, r1
 8022d92:	fb02 8303 	mla	r3, r2, r3, r8
 8022d96:	9a08      	ldr	r2, [sp, #32]
 8022d98:	f8b7 8000 	ldrh.w	r8, [r7]
 8022d9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022da0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022da4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022da6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8022daa:	fb00 330a 	mla	r3, r0, sl, r3
 8022dae:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8022db2:	ea4f 2228 	mov.w	r2, r8, asr #8
 8022db6:	fb09 3900 	mla	r9, r9, r0, r3
 8022dba:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8022dbe:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022dc2:	b2c9      	uxtb	r1, r1
 8022dc4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022dc8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022dcc:	fb02 f20e 	mul.w	r2, r2, lr
 8022dd0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022dd4:	fb00 f00e 	mul.w	r0, r0, lr
 8022dd8:	1c53      	adds	r3, r2, #1
 8022dda:	fb01 f10e 	mul.w	r1, r1, lr
 8022dde:	ea4c 0c09 	orr.w	ip, ip, r9
 8022de2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022de6:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8022dea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022dee:	4a60      	ldr	r2, [pc, #384]	; (8022f70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8022df0:	b2db      	uxtb	r3, r3
 8022df2:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8022df6:	1c43      	adds	r3, r0, #1
 8022df8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022dfc:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022e00:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022e04:	00db      	lsls	r3, r3, #3
 8022e06:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e0a:	4313      	orrs	r3, r2
 8022e0c:	1c4a      	adds	r2, r1, #1
 8022e0e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022e12:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8022e16:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8022e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8022e1e:	f8a7 c000 	strh.w	ip, [r7]
 8022e22:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022e24:	3702      	adds	r7, #2
 8022e26:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022e28:	441a      	add	r2, r3
 8022e2a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022e2c:	441d      	add	r5, r3
 8022e2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022e30:	922d      	str	r2, [sp, #180]	; 0xb4
 8022e32:	3b01      	subs	r3, #1
 8022e34:	9317      	str	r3, [sp, #92]	; 0x5c
 8022e36:	e699      	b.n	8022b6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022e38:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022e3a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8022e3c:	441c      	add	r4, r3
 8022e3e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022e40:	441d      	add	r5, r3
 8022e42:	9b07      	ldr	r3, [sp, #28]
 8022e44:	942d      	str	r4, [sp, #180]	; 0xb4
 8022e46:	3b01      	subs	r3, #1
 8022e48:	9307      	str	r3, [sp, #28]
 8022e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e4c:	3302      	adds	r3, #2
 8022e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8022e50:	e66c      	b.n	8022b2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022e52:	d024      	beq.n	8022e9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8022e54:	9b07      	ldr	r3, [sp, #28]
 8022e56:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8022e58:	3b01      	subs	r3, #1
 8022e5a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8022e5c:	fb00 4003 	mla	r0, r0, r3, r4
 8022e60:	1400      	asrs	r0, r0, #16
 8022e62:	f53f ae80 	bmi.w	8022b66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022e66:	3901      	subs	r1, #1
 8022e68:	4288      	cmp	r0, r1
 8022e6a:	f6bf ae7c 	bge.w	8022b66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022e6e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8022e70:	fb01 5303 	mla	r3, r1, r3, r5
 8022e74:	141b      	asrs	r3, r3, #16
 8022e76:	f53f ae76 	bmi.w	8022b66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022e7a:	3a01      	subs	r2, #1
 8022e7c:	4293      	cmp	r3, r2
 8022e7e:	f6bf ae72 	bge.w	8022b66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022e82:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022e86:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8022e8a:	f1bb 0f00 	cmp.w	fp, #0
 8022e8e:	dc71      	bgt.n	8022f74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8022e90:	9b07      	ldr	r3, [sp, #28]
 8022e92:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e98:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8022e9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022ea0:	2b00      	cmp	r3, #0
 8022ea2:	f340 81af 	ble.w	8023204 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8022ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022eaa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022eac:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022eb0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022eb4:	eef0 6a48 	vmov.f32	s13, s16
 8022eb8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022ebc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022ec0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ec4:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8022ec8:	eef0 6a68 	vmov.f32	s13, s17
 8022ecc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ed0:	ee16 5a90 	vmov	r5, s13
 8022ed4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022ed8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022edc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022ee0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022ee4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022ee8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022eec:	ee18 2a10 	vmov	r2, s16
 8022ef0:	eeb0 8a47 	vmov.f32	s16, s14
 8022ef4:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ef8:	ee18 2a90 	vmov	r2, s17
 8022efc:	932f      	str	r3, [sp, #188]	; 0xbc
 8022efe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f00:	eef0 8a67 	vmov.f32	s17, s15
 8022f04:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f08:	9330      	str	r3, [sp, #192]	; 0xc0
 8022f0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022f0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022f0e:	3b01      	subs	r3, #1
 8022f10:	9316      	str	r3, [sp, #88]	; 0x58
 8022f12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f14:	bf08      	it	eq
 8022f16:	4613      	moveq	r3, r2
 8022f18:	9307      	str	r3, [sp, #28]
 8022f1a:	e5f9      	b.n	8022b10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8022f1c:	2800      	cmp	r0, #0
 8022f1e:	f43f ae6b 	beq.w	8022bf8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8022f22:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022f26:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022f2a:	9108      	str	r1, [sp, #32]
 8022f2c:	0e09      	lsrs	r1, r1, #24
 8022f2e:	9110      	str	r1, [sp, #64]	; 0x40
 8022f30:	e662      	b.n	8022bf8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8022f32:	f113 0801 	adds.w	r8, r3, #1
 8022f36:	f53f af74 	bmi.w	8022e22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022f3a:	4541      	cmp	r1, r8
 8022f3c:	f6ff af71 	blt.w	8022e22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022f40:	f11c 0801 	adds.w	r8, ip, #1
 8022f44:	f53f af6d 	bmi.w	8022e22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022f48:	45c6      	cmp	lr, r8
 8022f4a:	f6ff af6a 	blt.w	8022e22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022f4e:	b209      	sxth	r1, r1
 8022f50:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8022f54:	fa0f f38e 	sxth.w	r3, lr
 8022f58:	9100      	str	r1, [sp, #0]
 8022f5a:	4639      	mov	r1, r7
 8022f5c:	9301      	str	r3, [sp, #4]
 8022f5e:	4633      	mov	r3, r6
 8022f60:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8022f64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022f66:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022f68:	f7ff fc4c 	bl	8022804 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8022f6c:	e759      	b.n	8022e22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022f6e:	bf00      	nop
 8022f70:	fffff800 	.word	0xfffff800
 8022f74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022f76:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022f7a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8022f7c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022f80:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022f82:	1427      	asrs	r7, r4, #16
 8022f84:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022f86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022f8a:	142b      	asrs	r3, r5, #16
 8022f8c:	fb01 7303 	mla	r3, r1, r3, r7
 8022f90:	18e7      	adds	r7, r4, r3
 8022f92:	5ce3      	ldrb	r3, [r4, r3]
 8022f94:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022f98:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022f9c:	2a00      	cmp	r2, #0
 8022f9e:	f000 8127 	beq.w	80231f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8022fa2:	f897 e001 	ldrb.w	lr, [r7, #1]
 8022fa6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8022faa:	940d      	str	r4, [sp, #52]	; 0x34
 8022fac:	0e24      	lsrs	r4, r4, #24
 8022fae:	9414      	str	r4, [sp, #80]	; 0x50
 8022fb0:	b170      	cbz	r0, 8022fd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8022fb2:	eb07 0e01 	add.w	lr, r7, r1
 8022fb6:	5c79      	ldrb	r1, [r7, r1]
 8022fb8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022fbc:	9109      	str	r1, [sp, #36]	; 0x24
 8022fbe:	0e09      	lsrs	r1, r1, #24
 8022fc0:	9111      	str	r1, [sp, #68]	; 0x44
 8022fc2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8022fc6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022fca:	910e      	str	r1, [sp, #56]	; 0x38
 8022fcc:	0e09      	lsrs	r1, r1, #24
 8022fce:	9115      	str	r1, [sp, #84]	; 0x54
 8022fd0:	b292      	uxth	r2, r2
 8022fd2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022fd4:	b280      	uxth	r0, r0
 8022fd6:	fb02 f800 	mul.w	r8, r2, r0
 8022fda:	0112      	lsls	r2, r2, #4
 8022fdc:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8022fe0:	eba2 0e08 	sub.w	lr, r2, r8
 8022fe4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022fe8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022fea:	b280      	uxth	r0, r0
 8022fec:	fa1f fe8e 	uxth.w	lr, lr
 8022ff0:	1a09      	subs	r1, r1, r0
 8022ff2:	fb0e f202 	mul.w	r2, lr, r2
 8022ff6:	b289      	uxth	r1, r1
 8022ff8:	fb01 220c 	mla	r2, r1, ip, r2
 8022ffc:	fb00 2204 	mla	r2, r0, r4, r2
 8023000:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023002:	fb08 2204 	mla	r2, r8, r4, r2
 8023006:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802300a:	2a00      	cmp	r2, #0
 802300c:	f000 80e5 	beq.w	80231da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8023010:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023014:	d019      	beq.n	802304a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 8023016:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802301a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802301e:	fb0c fa0a 	mul.w	sl, ip, sl
 8023022:	fb0c fc03 	mul.w	ip, ip, r3
 8023026:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802302a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802302e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023032:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023036:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802303a:	4453      	add	r3, sl
 802303c:	0a3f      	lsrs	r7, r7, #8
 802303e:	0a1b      	lsrs	r3, r3, #8
 8023040:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023044:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023048:	433b      	orrs	r3, r7
 802304a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802304c:	2cff      	cmp	r4, #255	; 0xff
 802304e:	d020      	beq.n	8023092 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 8023050:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023052:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023056:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023058:	4367      	muls	r7, r4
 802305a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802305c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023060:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023064:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023066:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802306a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802306e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023072:	44bc      	add	ip, r7
 8023074:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023078:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802307c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023080:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023084:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023088:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802308c:	ea4c 040a 	orr.w	r4, ip, sl
 8023090:	940d      	str	r4, [sp, #52]	; 0x34
 8023092:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023094:	2cff      	cmp	r4, #255	; 0xff
 8023096:	d020      	beq.n	80230da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8023098:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802309a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802309e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80230a0:	4367      	muls	r7, r4
 80230a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80230a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80230a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80230ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80230ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80230b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80230b6:	fb04 fa0a 	mul.w	sl, r4, sl
 80230ba:	44bc      	add	ip, r7
 80230bc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80230c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80230c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80230cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80230d4:	ea4c 040a 	orr.w	r4, ip, sl
 80230d8:	9409      	str	r4, [sp, #36]	; 0x24
 80230da:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80230dc:	2cff      	cmp	r4, #255	; 0xff
 80230de:	d020      	beq.n	8023122 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 80230e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80230e2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80230e6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80230e8:	4367      	muls	r7, r4
 80230ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80230ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80230f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80230f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80230f6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80230fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80230fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8023102:	44bc      	add	ip, r7
 8023104:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023108:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802310c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023110:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023114:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023118:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802311c:	ea4c 040a 	orr.w	r4, ip, sl
 8023120:	940e      	str	r4, [sp, #56]	; 0x38
 8023122:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023124:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023128:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802312c:	43d2      	mvns	r2, r2
 802312e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023132:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023134:	b2d2      	uxtb	r2, r2
 8023136:	fb0e f707 	mul.w	r7, lr, r7
 802313a:	fb01 770c 	mla	r7, r1, ip, r7
 802313e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023142:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023144:	fb00 770c 	mla	r7, r0, ip, r7
 8023148:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802314c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802314e:	fb08 770c 	mla	r7, r8, ip, r7
 8023152:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8023156:	fb0e fe0c 	mul.w	lr, lr, ip
 802315a:	0a3f      	lsrs	r7, r7, #8
 802315c:	fb01 e303 	mla	r3, r1, r3, lr
 8023160:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023162:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023166:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802316a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802316c:	fb00 330a 	mla	r3, r0, sl, r3
 8023170:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023174:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023178:	f8b9 3000 	ldrh.w	r3, [r9]
 802317c:	1218      	asrs	r0, r3, #8
 802317e:	10d9      	asrs	r1, r3, #3
 8023180:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023184:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023188:	00db      	lsls	r3, r3, #3
 802318a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802318e:	4350      	muls	r0, r2
 8023190:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023194:	b2db      	uxtb	r3, r3
 8023196:	4351      	muls	r1, r2
 8023198:	ea47 070c 	orr.w	r7, r7, ip
 802319c:	4353      	muls	r3, r2
 802319e:	1c42      	adds	r2, r0, #1
 80231a0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80231a4:	0c3a      	lsrs	r2, r7, #16
 80231a6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80231aa:	4a19      	ldr	r2, [pc, #100]	; (8023210 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 80231ac:	b2c0      	uxtb	r0, r0
 80231ae:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80231b2:	1c4a      	adds	r2, r1, #1
 80231b4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80231b8:	0a3a      	lsrs	r2, r7, #8
 80231ba:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80231be:	00c9      	lsls	r1, r1, #3
 80231c0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80231c4:	4301      	orrs	r1, r0
 80231c6:	1c58      	adds	r0, r3, #1
 80231c8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80231cc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80231d0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80231d4:	4308      	orrs	r0, r1
 80231d6:	f8a9 0000 	strh.w	r0, [r9]
 80231da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80231dc:	f109 0902 	add.w	r9, r9, #2
 80231e0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80231e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80231e6:	441a      	add	r2, r3
 80231e8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80231ea:	922d      	str	r2, [sp, #180]	; 0xb4
 80231ec:	441d      	add	r5, r3
 80231ee:	e64c      	b.n	8022e8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80231f0:	2800      	cmp	r0, #0
 80231f2:	f43f aeed 	beq.w	8022fd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80231f6:	5c79      	ldrb	r1, [r7, r1]
 80231f8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80231fc:	9109      	str	r1, [sp, #36]	; 0x24
 80231fe:	0e09      	lsrs	r1, r1, #24
 8023200:	9111      	str	r1, [sp, #68]	; 0x44
 8023202:	e6e5      	b.n	8022fd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8023204:	b01b      	add	sp, #108	; 0x6c
 8023206:	ecbd 8b08 	vpop	{d8-d11}
 802320a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802320e:	bf00      	nop
 8023210:	fffff800 	.word	0xfffff800

08023214 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8023214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023218:	b085      	sub	sp, #20
 802321a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802321e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8023222:	9103      	str	r1, [sp, #12]
 8023224:	2d00      	cmp	r5, #0
 8023226:	fb05 7106 	mla	r1, r5, r6, r7
 802322a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802322e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023232:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8023236:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802323a:	eb03 0901 	add.w	r9, r3, r1
 802323e:	9401      	str	r4, [sp, #4]
 8023240:	f2c0 80c0 	blt.w	80233c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8023244:	45a8      	cmp	r8, r5
 8023246:	f340 80bd 	ble.w	80233c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 802324a:	2f00      	cmp	r7, #0
 802324c:	f2c0 80b6 	blt.w	80233bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8023250:	42be      	cmp	r6, r7
 8023252:	f340 80b3 	ble.w	80233bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8023256:	f813 c001 	ldrb.w	ip, [r3, r1]
 802325a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802325e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023262:	d019      	beq.n	8023298 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8023264:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8023268:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802326c:	435a      	muls	r2, r3
 802326e:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8023272:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8023276:	fb0c f403 	mul.w	r4, ip, r3
 802327a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802327e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8023282:	441a      	add	r2, r3
 8023284:	f104 0320 	add.w	r3, r4, #32
 8023288:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 802328c:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8023290:	0a1b      	lsrs	r3, r3, #8
 8023292:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023296:	4319      	orrs	r1, r3
 8023298:	b289      	uxth	r1, r1
 802329a:	1c7b      	adds	r3, r7, #1
 802329c:	f100 8097 	bmi.w	80233ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80232a0:	429e      	cmp	r6, r3
 80232a2:	f340 8094 	ble.w	80233ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80232a6:	2800      	cmp	r0, #0
 80232a8:	f000 8094 	beq.w	80233d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 80232ac:	f899 4001 	ldrb.w	r4, [r9, #1]
 80232b0:	9b01      	ldr	r3, [sp, #4]
 80232b2:	2cff      	cmp	r4, #255	; 0xff
 80232b4:	885b      	ldrh	r3, [r3, #2]
 80232b6:	d01b      	beq.n	80232f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 80232b8:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80232bc:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80232c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80232c4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80232c8:	fb0a f202 	mul.w	r2, sl, r2
 80232cc:	fb04 fa03 	mul.w	sl, r4, r3
 80232d0:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80232d4:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80232d8:	441a      	add	r2, r3
 80232da:	f10a 0320 	add.w	r3, sl, #32
 80232de:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80232e2:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80232e6:	0a1b      	lsrs	r3, r3, #8
 80232e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80232ec:	ea4b 0303 	orr.w	r3, fp, r3
 80232f0:	b29b      	uxth	r3, r3
 80232f2:	3501      	adds	r5, #1
 80232f4:	d474      	bmi.n	80233e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80232f6:	45a8      	cmp	r8, r5
 80232f8:	dd72      	ble.n	80233e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80232fa:	f1be 0f00 	cmp.w	lr, #0
 80232fe:	f000 8120 	beq.w	8023542 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8023302:	2f00      	cmp	r7, #0
 8023304:	db69      	blt.n	80233da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8023306:	42be      	cmp	r6, r7
 8023308:	dd67      	ble.n	80233da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802330a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802330e:	9a01      	ldr	r2, [sp, #4]
 8023310:	2dff      	cmp	r5, #255	; 0xff
 8023312:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8023316:	d01c      	beq.n	8023352 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8023318:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 802331c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8023320:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023324:	fb08 f802 	mul.w	r8, r8, r2
 8023328:	fb05 fa0b 	mul.w	sl, r5, fp
 802332c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8023330:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8023334:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023338:	4490      	add	r8, r2
 802333a:	f10a 0220 	add.w	r2, sl, #32
 802333e:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8023342:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8023346:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802334a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802334e:	ea4b 0b0a 	orr.w	fp, fp, sl
 8023352:	fa1f fb8b 	uxth.w	fp, fp
 8023356:	3701      	adds	r7, #1
 8023358:	d447      	bmi.n	80233ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 802335a:	42be      	cmp	r6, r7
 802335c:	dd45      	ble.n	80233ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 802335e:	2800      	cmp	r0, #0
 8023360:	d046      	beq.n	80233f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8023362:	3601      	adds	r6, #1
 8023364:	9a01      	ldr	r2, [sp, #4]
 8023366:	f819 7006 	ldrb.w	r7, [r9, r6]
 802336a:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 802336e:	2fff      	cmp	r7, #255	; 0xff
 8023370:	d01a      	beq.n	80233a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8023372:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8023376:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802337a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802337e:	fb08 f806 	mul.w	r8, r8, r6
 8023382:	fb07 f902 	mul.w	r9, r7, r2
 8023386:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802338a:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 802338e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023392:	44b0      	add	r8, r6
 8023394:	f109 0620 	add.w	r6, r9, #32
 8023398:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 802339c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80233a0:	0a36      	lsrs	r6, r6, #8
 80233a2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80233a6:	4332      	orrs	r2, r6
 80233a8:	b292      	uxth	r2, r2
 80233aa:	280f      	cmp	r0, #15
 80233ac:	d922      	bls.n	80233f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 80233ae:	4b69      	ldr	r3, [pc, #420]	; (8023554 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 80233b0:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80233b4:	4a68      	ldr	r2, [pc, #416]	; (8023558 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 80233b6:	4869      	ldr	r0, [pc, #420]	; (802355c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 80233b8:	f004 fa50 	bl	802785c <__assert_func>
 80233bc:	f04f 0c00 	mov.w	ip, #0
 80233c0:	4661      	mov	r1, ip
 80233c2:	e76a      	b.n	802329a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 80233c4:	2400      	movs	r4, #0
 80233c6:	46a4      	mov	ip, r4
 80233c8:	4623      	mov	r3, r4
 80233ca:	4621      	mov	r1, r4
 80233cc:	e791      	b.n	80232f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80233ce:	2400      	movs	r4, #0
 80233d0:	4623      	mov	r3, r4
 80233d2:	e78e      	b.n	80232f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80233d4:	4604      	mov	r4, r0
 80233d6:	4603      	mov	r3, r0
 80233d8:	e78b      	b.n	80232f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80233da:	2500      	movs	r5, #0
 80233dc:	46ab      	mov	fp, r5
 80233de:	e7ba      	b.n	8023356 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 80233e0:	2700      	movs	r7, #0
 80233e2:	463d      	mov	r5, r7
 80233e4:	463a      	mov	r2, r7
 80233e6:	46bb      	mov	fp, r7
 80233e8:	e7df      	b.n	80233aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80233ea:	2700      	movs	r7, #0
 80233ec:	463a      	mov	r2, r7
 80233ee:	e7dc      	b.n	80233aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80233f0:	4607      	mov	r7, r0
 80233f2:	4602      	mov	r2, r0
 80233f4:	f1be 0f0f 	cmp.w	lr, #15
 80233f8:	d8d9      	bhi.n	80233ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80233fa:	b286      	uxth	r6, r0
 80233fc:	fa1f f98e 	uxth.w	r9, lr
 8023400:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023404:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023408:	fb06 f809 	mul.w	r8, r6, r9
 802340c:	0136      	lsls	r6, r6, #4
 802340e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023412:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8023416:	9601      	str	r6, [sp, #4]
 8023418:	ea4a 0101 	orr.w	r1, sl, r1
 802341c:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8023420:	fa1f f689 	uxth.w	r6, r9
 8023424:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023428:	fb10 f90e 	smulbb	r9, r0, lr
 802342c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023430:	9602      	str	r6, [sp, #8]
 8023432:	460e      	mov	r6, r1
 8023434:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8023438:	f1ce 0110 	rsb	r1, lr, #16
 802343c:	ea4a 0303 	orr.w	r3, sl, r3
 8023440:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023444:	1a09      	subs	r1, r1, r0
 8023446:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802344a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802344e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023452:	4343      	muls	r3, r0
 8023454:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8023458:	9801      	ldr	r0, [sp, #4]
 802345a:	ea4a 0202 	orr.w	r2, sl, r2
 802345e:	fb01 3106 	mla	r1, r1, r6, r3
 8023462:	9e02      	ldr	r6, [sp, #8]
 8023464:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8023468:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802346c:	fb09 1302 	mla	r3, r9, r2, r1
 8023470:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8023474:	1b80      	subs	r0, r0, r6
 8023476:	9e01      	ldr	r6, [sp, #4]
 8023478:	9a03      	ldr	r2, [sp, #12]
 802347a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802347e:	eba6 0608 	sub.w	r6, r6, r8
 8023482:	b280      	uxth	r0, r0
 8023484:	8811      	ldrh	r1, [r2, #0]
 8023486:	ea4a 0b0b 	orr.w	fp, sl, fp
 802348a:	b2b6      	uxth	r6, r6
 802348c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8023490:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8023494:	4374      	muls	r4, r6
 8023496:	b292      	uxth	r2, r2
 8023498:	fb0e 3e0b 	mla	lr, lr, fp, r3
 802349c:	fb0c 4400 	mla	r4, ip, r0, r4
 80234a0:	9802      	ldr	r0, [sp, #8]
 80234a2:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80234a6:	fb00 4505 	mla	r5, r0, r5, r4
 80234aa:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80234ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80234b2:	1208      	asrs	r0, r1, #8
 80234b4:	fb08 5707 	mla	r7, r8, r7, r5
 80234b8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80234bc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80234c0:	10cd      	asrs	r5, r1, #3
 80234c2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80234c6:	ea43 0e0e 	orr.w	lr, r3, lr
 80234ca:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80234ce:	4357      	muls	r7, r2
 80234d0:	fa1f f38e 	uxth.w	r3, lr
 80234d4:	f107 0801 	add.w	r8, r7, #1
 80234d8:	121c      	asrs	r4, r3, #8
 80234da:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80234de:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80234e2:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80234e6:	b2ff      	uxtb	r7, r7
 80234e8:	fb10 f007 	smulbb	r0, r0, r7
 80234ec:	fb15 f507 	smulbb	r5, r5, r7
 80234f0:	fb04 0402 	mla	r4, r4, r2, r0
 80234f4:	10d8      	asrs	r0, r3, #3
 80234f6:	00db      	lsls	r3, r3, #3
 80234f8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80234fc:	b2a4      	uxth	r4, r4
 80234fe:	fb00 5002 	mla	r0, r0, r2, r5
 8023502:	b2dd      	uxtb	r5, r3
 8023504:	00cb      	lsls	r3, r1, #3
 8023506:	b280      	uxth	r0, r0
 8023508:	b2db      	uxtb	r3, r3
 802350a:	fb13 f307 	smulbb	r3, r3, r7
 802350e:	fb05 3202 	mla	r2, r5, r2, r3
 8023512:	1c63      	adds	r3, r4, #1
 8023514:	b292      	uxth	r2, r2
 8023516:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802351a:	1c53      	adds	r3, r2, #1
 802351c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8023520:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023524:	1c42      	adds	r2, r0, #1
 8023526:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802352a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802352e:	9a03      	ldr	r2, [sp, #12]
 8023530:	0940      	lsrs	r0, r0, #5
 8023532:	4323      	orrs	r3, r4
 8023534:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023538:	4303      	orrs	r3, r0
 802353a:	8013      	strh	r3, [r2, #0]
 802353c:	b005      	add	sp, #20
 802353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023542:	280f      	cmp	r0, #15
 8023544:	f63f af33 	bhi.w	80233ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8023548:	4677      	mov	r7, lr
 802354a:	4675      	mov	r5, lr
 802354c:	4672      	mov	r2, lr
 802354e:	46f3      	mov	fp, lr
 8023550:	e753      	b.n	80233fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8023552:	bf00      	nop
 8023554:	0802bded 	.word	0x0802bded
 8023558:	0802c3ba 	.word	0x0802c3ba
 802355c:	0802be71 	.word	0x0802be71

08023560 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023564:	ed2d 8b08 	vpush	{d8-d11}
 8023568:	b097      	sub	sp, #92	; 0x5c
 802356a:	eeb0 aa40 	vmov.f32	s20, s0
 802356e:	eef0 9a60 	vmov.f32	s19, s1
 8023572:	9214      	str	r2, [sp, #80]	; 0x50
 8023574:	eeb0 9a41 	vmov.f32	s18, s2
 8023578:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802357a:	eeb0 8a62 	vmov.f32	s16, s5
 802357e:	9308      	str	r3, [sp, #32]
 8023580:	eef0 8a43 	vmov.f32	s17, s6
 8023584:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8023588:	eef0 ba44 	vmov.f32	s23, s8
 802358c:	9015      	str	r0, [sp, #84]	; 0x54
 802358e:	eeb0 ba64 	vmov.f32	s22, s9
 8023592:	9312      	str	r3, [sp, #72]	; 0x48
 8023594:	eef0 aa45 	vmov.f32	s21, s10
 8023598:	6850      	ldr	r0, [r2, #4]
 802359a:	9111      	str	r1, [sp, #68]	; 0x44
 802359c:	6812      	ldr	r2, [r2, #0]
 802359e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80235a2:	fb00 1303 	mla	r3, r0, r3, r1
 80235a6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80235aa:	9309      	str	r3, [sp, #36]	; 0x24
 80235ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80235ae:	681b      	ldr	r3, [r3, #0]
 80235b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80235b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80235b4:	685b      	ldr	r3, [r3, #4]
 80235b6:	930c      	str	r3, [sp, #48]	; 0x30
 80235b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80235bc:	930a      	str	r3, [sp, #40]	; 0x28
 80235be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80235c0:	2b00      	cmp	r3, #0
 80235c2:	dc03      	bgt.n	80235cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80235c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80235c6:	2b00      	cmp	r3, #0
 80235c8:	f340 83cd 	ble.w	8023d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 80235cc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80235ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80235d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80235d6:	1e48      	subs	r0, r1, #1
 80235d8:	1e55      	subs	r5, r2, #1
 80235da:	9b08      	ldr	r3, [sp, #32]
 80235dc:	2b00      	cmp	r3, #0
 80235de:	f340 81a5 	ble.w	802392c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80235e2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80235e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80235e6:	1436      	asrs	r6, r6, #16
 80235e8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80235ec:	d406      	bmi.n	80235fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80235ee:	4286      	cmp	r6, r0
 80235f0:	da04      	bge.n	80235fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	db02      	blt.n	80235fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80235f6:	42ab      	cmp	r3, r5
 80235f8:	f2c0 8199 	blt.w	802392e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80235fc:	3601      	adds	r6, #1
 80235fe:	f100 8186 	bmi.w	802390e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023602:	42b1      	cmp	r1, r6
 8023604:	f2c0 8183 	blt.w	802390e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023608:	3301      	adds	r3, #1
 802360a:	f100 8180 	bmi.w	802390e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802360e:	429a      	cmp	r2, r3
 8023610:	f2c0 817d 	blt.w	802390e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023614:	9b08      	ldr	r3, [sp, #32]
 8023616:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802361a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802361c:	9313      	str	r3, [sp, #76]	; 0x4c
 802361e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023620:	2b00      	cmp	r3, #0
 8023622:	f340 81a6 	ble.w	8023972 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023626:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023628:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 802362a:	1418      	asrs	r0, r3, #16
 802362c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802362e:	142d      	asrs	r5, r5, #16
 8023630:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023634:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023636:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802363a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802363c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8023640:	f100 81fa 	bmi.w	8023a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023644:	f102 3eff 	add.w	lr, r2, #4294967295
 8023648:	4575      	cmp	r5, lr
 802364a:	f280 81f5 	bge.w	8023a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802364e:	2800      	cmp	r0, #0
 8023650:	f2c0 81f2 	blt.w	8023a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023654:	f103 3eff 	add.w	lr, r3, #4294967295
 8023658:	4570      	cmp	r0, lr
 802365a:	f280 81ed 	bge.w	8023a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802365e:	b212      	sxth	r2, r2
 8023660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023662:	fa1f fe81 	uxth.w	lr, r1
 8023666:	fb00 5002 	mla	r0, r0, r2, r5
 802366a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802366e:	eb03 0a00 	add.w	sl, r3, r0
 8023672:	f813 9000 	ldrb.w	r9, [r3, r0]
 8023676:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802367a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802367e:	b29b      	uxth	r3, r3
 8023680:	f1bc 0f00 	cmp.w	ip, #0
 8023684:	f000 81bb 	beq.w	80239fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023688:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802368c:	eb0a 0b02 	add.w	fp, sl, r2
 8023690:	fa1f fa8c 	uxth.w	sl, ip
 8023694:	940d      	str	r4, [sp, #52]	; 0x34
 8023696:	fb0a fe0e 	mul.w	lr, sl, lr
 802369a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802369e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80236a2:	eba5 050e 	sub.w	r5, r5, lr
 80236a6:	940e      	str	r4, [sp, #56]	; 0x38
 80236a8:	fa1f fa8a 	uxth.w	sl, sl
 80236ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80236ae:	b2ad      	uxth	r5, r5
 80236b0:	eba3 030a 	sub.w	r3, r3, sl
 80236b4:	fb08 f505 	mul.w	r5, r8, r5
 80236b8:	b29b      	uxth	r3, r3
 80236ba:	fb09 5303 	mla	r3, r9, r3, r5
 80236be:	fb0a 3304 	mla	r3, sl, r4, r3
 80236c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80236c4:	fb0e 3304 	mla	r3, lr, r4, r3
 80236c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	f000 8111 	beq.w	80238f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80236d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80236d4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80236d8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80236dc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80236e0:	f000 8192 	beq.w	8023a08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80236e4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80236e8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80236ec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80236f0:	fb0a fe0e 	mul.w	lr, sl, lr
 80236f4:	fb09 f000 	mul.w	r0, r9, r0
 80236f8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80236fc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023700:	f100 0b20 	add.w	fp, r0, #32
 8023704:	44ce      	add	lr, r9
 8023706:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802370a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802370e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023712:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023716:	ea4e 0909 	orr.w	r9, lr, r9
 802371a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802371e:	8868      	ldrh	r0, [r5, #2]
 8023720:	d019      	beq.n	8023756 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8023722:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023726:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802372a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802372e:	fb0a fe0e 	mul.w	lr, sl, lr
 8023732:	fb08 f800 	mul.w	r8, r8, r0
 8023736:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802373a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802373e:	f108 0b20 	add.w	fp, r8, #32
 8023742:	4486      	add	lr, r0
 8023744:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8023748:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802374c:	0a00      	lsrs	r0, r0, #8
 802374e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023752:	ea4e 0000 	orr.w	r0, lr, r0
 8023756:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802375a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802375e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8023762:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023766:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802376a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802376e:	ea4e 0909 	orr.w	r9, lr, r9
 8023772:	ea4a 0000 	orr.w	r0, sl, r0
 8023776:	f1bc 0f00 	cmp.w	ip, #0
 802377a:	f000 8147 	beq.w	8023a0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 802377e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8023782:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023784:	3a01      	subs	r2, #1
 8023786:	2cff      	cmp	r4, #255	; 0xff
 8023788:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802378c:	f102 0202 	add.w	r2, r2, #2
 8023790:	eb05 0e02 	add.w	lr, r5, r2
 8023794:	5aaa      	ldrh	r2, [r5, r2]
 8023796:	d018      	beq.n	80237ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8023798:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 802379c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80237a0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80237a4:	fb04 fa02 	mul.w	sl, r4, r2
 80237a8:	fb08 f805 	mul.w	r8, r8, r5
 80237ac:	f10a 0520 	add.w	r5, sl, #32
 80237b0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80237b4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80237b8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80237bc:	4442      	add	r2, r8
 80237be:	0a2d      	lsrs	r5, r5, #8
 80237c0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80237c4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80237c8:	432a      	orrs	r2, r5
 80237ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80237cc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80237d0:	2cff      	cmp	r4, #255	; 0xff
 80237d2:	d01a      	beq.n	802380a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 80237d4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80237d8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80237dc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80237e0:	fb04 fa05 	mul.w	sl, r4, r5
 80237e4:	fb08 f80e 	mul.w	r8, r8, lr
 80237e8:	f10a 0e20 	add.w	lr, sl, #32
 80237ec:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80237f0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80237f4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80237f8:	4445      	add	r5, r8
 80237fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80237fe:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8023802:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8023806:	ea45 050e 	orr.w	r5, r5, lr
 802380a:	fb1c fe01 	smulbb	lr, ip, r1
 802380e:	f1cc 0810 	rsb	r8, ip, #16
 8023812:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023816:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802381a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802381e:	eba8 0801 	sub.w	r8, r8, r1
 8023822:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8023826:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802382a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802382e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023832:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8023836:	ea4a 0202 	orr.w	r2, sl, r2
 802383a:	4341      	muls	r1, r0
 802383c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8023840:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023844:	fb09 1108 	mla	r1, r9, r8, r1
 8023848:	ea4b 0505 	orr.w	r5, fp, r5
 802384c:	fb0c 1102 	mla	r1, ip, r2, r1
 8023850:	fb0e 1e05 	mla	lr, lr, r5, r1
 8023854:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023858:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802385c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023860:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023864:	ea42 0e0e 	orr.w	lr, r2, lr
 8023868:	fa1f f28e 	uxth.w	r2, lr
 802386c:	2bff      	cmp	r3, #255	; 0xff
 802386e:	d103      	bne.n	8023878 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8023870:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023872:	29ff      	cmp	r1, #255	; 0xff
 8023874:	f000 80de 	beq.w	8023a34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8023878:	990a      	ldr	r1, [sp, #40]	; 0x28
 802387a:	1215      	asrs	r5, r2, #8
 802387c:	8838      	ldrh	r0, [r7, #0]
 802387e:	434b      	muls	r3, r1
 8023880:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023884:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023886:	f103 0c01 	add.w	ip, r3, #1
 802388a:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 802388e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8023892:	fa5f fc83 	uxtb.w	ip, r3
 8023896:	1203      	asrs	r3, r0, #8
 8023898:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802389c:	fb13 f30c 	smulbb	r3, r3, ip
 80238a0:	fb05 3501 	mla	r5, r5, r1, r3
 80238a4:	10c3      	asrs	r3, r0, #3
 80238a6:	10d1      	asrs	r1, r2, #3
 80238a8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80238ac:	00d2      	lsls	r2, r2, #3
 80238ae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80238b2:	b2ad      	uxth	r5, r5
 80238b4:	fb13 f30c 	smulbb	r3, r3, ip
 80238b8:	b2d2      	uxtb	r2, r2
 80238ba:	fb01 3104 	mla	r1, r1, r4, r3
 80238be:	00c3      	lsls	r3, r0, #3
 80238c0:	b2db      	uxtb	r3, r3
 80238c2:	b289      	uxth	r1, r1
 80238c4:	fb13 f30c 	smulbb	r3, r3, ip
 80238c8:	fb02 3304 	mla	r3, r2, r4, r3
 80238cc:	b29a      	uxth	r2, r3
 80238ce:	1c6b      	adds	r3, r5, #1
 80238d0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80238d4:	1c53      	adds	r3, r2, #1
 80238d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80238da:	1c4a      	adds	r2, r1, #1
 80238dc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80238e0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80238e4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80238e8:	0949      	lsrs	r1, r1, #5
 80238ea:	432b      	orrs	r3, r5
 80238ec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80238f0:	430b      	orrs	r3, r1
 80238f2:	803b      	strh	r3, [r7, #0]
 80238f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80238f6:	3702      	adds	r7, #2
 80238f8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80238fa:	4413      	add	r3, r2
 80238fc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80238fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8023900:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023902:	441a      	add	r2, r3
 8023904:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023906:	3b01      	subs	r3, #1
 8023908:	922a      	str	r2, [sp, #168]	; 0xa8
 802390a:	9313      	str	r3, [sp, #76]	; 0x4c
 802390c:	e687      	b.n	802361e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802390e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023910:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8023912:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8023914:	4433      	add	r3, r6
 8023916:	9329      	str	r3, [sp, #164]	; 0xa4
 8023918:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802391a:	441c      	add	r4, r3
 802391c:	9b08      	ldr	r3, [sp, #32]
 802391e:	3b01      	subs	r3, #1
 8023920:	942a      	str	r4, [sp, #168]	; 0xa8
 8023922:	9308      	str	r3, [sp, #32]
 8023924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023926:	3302      	adds	r3, #2
 8023928:	9309      	str	r3, [sp, #36]	; 0x24
 802392a:	e656      	b.n	80235da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802392c:	d028      	beq.n	8023980 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802392e:	9b08      	ldr	r3, [sp, #32]
 8023930:	982b      	ldr	r0, [sp, #172]	; 0xac
 8023932:	3b01      	subs	r3, #1
 8023934:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8023936:	fb00 5003 	mla	r0, r0, r3, r5
 802393a:	1400      	asrs	r0, r0, #16
 802393c:	f53f ae6a 	bmi.w	8023614 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023940:	3901      	subs	r1, #1
 8023942:	4288      	cmp	r0, r1
 8023944:	f6bf ae66 	bge.w	8023614 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023948:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802394a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 802394c:	fb01 0303 	mla	r3, r1, r3, r0
 8023950:	141b      	asrs	r3, r3, #16
 8023952:	f53f ae5f 	bmi.w	8023614 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023956:	3a01      	subs	r2, #1
 8023958:	4293      	cmp	r3, r2
 802395a:	f6bf ae5b 	bge.w	8023614 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802395e:	9b08      	ldr	r3, [sp, #32]
 8023960:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023964:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8023968:	9313      	str	r3, [sp, #76]	; 0x4c
 802396a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802396c:	2b00      	cmp	r3, #0
 802396e:	f300 8082 	bgt.w	8023a76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8023972:	9b08      	ldr	r3, [sp, #32]
 8023974:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802397a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802397e:	9309      	str	r3, [sp, #36]	; 0x24
 8023980:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023982:	2b00      	cmp	r3, #0
 8023984:	f340 81ef 	ble.w	8023d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8023988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802398c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802398e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023992:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023996:	eef0 6a48 	vmov.f32	s13, s16
 802399a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802399e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80239a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80239a6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80239aa:	eef0 6a68 	vmov.f32	s13, s17
 80239ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80239b2:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80239b6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80239ba:	ee69 7a27 	vmul.f32	s15, s18, s15
 80239be:	ee37 8a48 	vsub.f32	s16, s14, s16
 80239c2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80239c6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80239ca:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80239ce:	ee18 2a10 	vmov	r2, s16
 80239d2:	eeb0 8a47 	vmov.f32	s16, s14
 80239d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80239da:	ee18 2a90 	vmov	r2, s17
 80239de:	932b      	str	r3, [sp, #172]	; 0xac
 80239e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80239e2:	eef0 8a67 	vmov.f32	s17, s15
 80239e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80239ea:	932c      	str	r3, [sp, #176]	; 0xb0
 80239ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80239ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80239f0:	3b01      	subs	r3, #1
 80239f2:	9311      	str	r3, [sp, #68]	; 0x44
 80239f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80239f6:	bf08      	it	eq
 80239f8:	4613      	moveq	r3, r2
 80239fa:	9308      	str	r3, [sp, #32]
 80239fc:	e5df      	b.n	80235be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80239fe:	fb08 f505 	mul.w	r5, r8, r5
 8023a02:	fb09 5303 	mla	r3, r9, r3, r5
 8023a06:	e65f      	b.n	80236c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8023a08:	4681      	mov	r9, r0
 8023a0a:	e686      	b.n	802371a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023a0c:	f1c1 0210 	rsb	r2, r1, #16
 8023a10:	4341      	muls	r1, r0
 8023a12:	fb09 1902 	mla	r9, r9, r2, r1
 8023a16:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8023a1a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8023a1e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023a22:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023a26:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023a2a:	ea42 0909 	orr.w	r9, r2, r9
 8023a2e:	fa1f f289 	uxth.w	r2, r9
 8023a32:	e71b      	b.n	802386c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023a34:	803a      	strh	r2, [r7, #0]
 8023a36:	e75d      	b.n	80238f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023a38:	f115 0e01 	adds.w	lr, r5, #1
 8023a3c:	f53f af5a 	bmi.w	80238f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023a40:	4572      	cmp	r2, lr
 8023a42:	f6ff af57 	blt.w	80238f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023a46:	f110 0e01 	adds.w	lr, r0, #1
 8023a4a:	f53f af53 	bmi.w	80238f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023a4e:	4573      	cmp	r3, lr
 8023a50:	f6ff af50 	blt.w	80238f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023a54:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023a56:	b21b      	sxth	r3, r3
 8023a58:	b212      	sxth	r2, r2
 8023a5a:	9502      	str	r5, [sp, #8]
 8023a5c:	9301      	str	r3, [sp, #4]
 8023a5e:	9200      	str	r2, [sp, #0]
 8023a60:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8023a64:	e9cd c405 	strd	ip, r4, [sp, #20]
 8023a68:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8023a6c:	4639      	mov	r1, r7
 8023a6e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023a70:	f7ff fbd0 	bl	8023214 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8023a74:	e73e      	b.n	80238f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023a76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a78:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023a7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023a7e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8023a82:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023a84:	fa1f fc82 	uxth.w	ip, r2
 8023a88:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023a8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023a8e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8023a92:	141f      	asrs	r7, r3, #16
 8023a94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a96:	141b      	asrs	r3, r3, #16
 8023a98:	fb01 3707 	mla	r7, r1, r7, r3
 8023a9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a9e:	eb03 0a07 	add.w	sl, r3, r7
 8023aa2:	f813 9007 	ldrb.w	r9, [r3, r7]
 8023aa6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023aaa:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8023aae:	b29b      	uxth	r3, r3
 8023ab0:	2d00      	cmp	r5, #0
 8023ab2:	f000 813d 	beq.w	8023d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8023ab6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8023aba:	eb0a 0b01 	add.w	fp, sl, r1
 8023abe:	fa1f fa85 	uxth.w	sl, r5
 8023ac2:	940f      	str	r4, [sp, #60]	; 0x3c
 8023ac4:	fb0a fc0c 	mul.w	ip, sl, ip
 8023ac8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8023acc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8023ad0:	eba0 000c 	sub.w	r0, r0, ip
 8023ad4:	9410      	str	r4, [sp, #64]	; 0x40
 8023ad6:	fa1f fa8a 	uxth.w	sl, sl
 8023ada:	b280      	uxth	r0, r0
 8023adc:	eba3 030a 	sub.w	r3, r3, sl
 8023ae0:	fb08 f000 	mul.w	r0, r8, r0
 8023ae4:	b29b      	uxth	r3, r3
 8023ae6:	fb09 0303 	mla	r3, r9, r3, r0
 8023aea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023aec:	fb0a 3300 	mla	r3, sl, r0, r3
 8023af0:	fb0c 3304 	mla	r3, ip, r4, r3
 8023af4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023af8:	2b00      	cmp	r3, #0
 8023afa:	f000 810b 	beq.w	8023d14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8023afe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023b00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023b04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b06:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8023b0a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8023b0e:	f000 8114 	beq.w	8023d3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8023b12:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8023b16:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023b1a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023b1e:	fb0a fc0c 	mul.w	ip, sl, ip
 8023b22:	fb09 f707 	mul.w	r7, r9, r7
 8023b26:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8023b2a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8023b2e:	f107 0b20 	add.w	fp, r7, #32
 8023b32:	44cc      	add	ip, r9
 8023b34:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8023b38:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8023b3c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023b40:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023b44:	ea4c 0909 	orr.w	r9, ip, r9
 8023b48:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023b4c:	8847      	ldrh	r7, [r0, #2]
 8023b4e:	d019      	beq.n	8023b84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8023b50:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8023b54:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8023b58:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023b5c:	fb0a fc0c 	mul.w	ip, sl, ip
 8023b60:	fb08 f807 	mul.w	r8, r8, r7
 8023b64:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8023b68:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8023b6c:	f108 0b20 	add.w	fp, r8, #32
 8023b70:	44bc      	add	ip, r7
 8023b72:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8023b76:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8023b7a:	0a3f      	lsrs	r7, r7, #8
 8023b7c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023b80:	ea4c 0707 	orr.w	r7, ip, r7
 8023b84:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8023b88:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023b8c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8023b90:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023b94:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023b98:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023b9c:	ea4c 0909 	orr.w	r9, ip, r9
 8023ba0:	ea4a 0707 	orr.w	r7, sl, r7
 8023ba4:	2d00      	cmp	r5, #0
 8023ba6:	f000 80ca 	beq.w	8023d3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8023baa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8023bae:	3901      	subs	r1, #1
 8023bb0:	0049      	lsls	r1, r1, #1
 8023bb2:	3102      	adds	r1, #2
 8023bb4:	eb00 0c01 	add.w	ip, r0, r1
 8023bb8:	5a41      	ldrh	r1, [r0, r1]
 8023bba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023bbc:	28ff      	cmp	r0, #255	; 0xff
 8023bbe:	d019      	beq.n	8023bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8023bc0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8023bc4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023bc6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023bca:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023bce:	fb04 fa01 	mul.w	sl, r4, r1
 8023bd2:	fb08 f800 	mul.w	r8, r8, r0
 8023bd6:	f10a 0020 	add.w	r0, sl, #32
 8023bda:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8023bde:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023be2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8023be6:	4441      	add	r1, r8
 8023be8:	0a00      	lsrs	r0, r0, #8
 8023bea:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8023bee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023bf2:	4301      	orrs	r1, r0
 8023bf4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023bf6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8023bfa:	2cff      	cmp	r4, #255	; 0xff
 8023bfc:	d01a      	beq.n	8023c34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8023bfe:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8023c02:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023c06:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023c0a:	fb04 fa00 	mul.w	sl, r4, r0
 8023c0e:	fb08 f80c 	mul.w	r8, r8, ip
 8023c12:	f10a 0c20 	add.w	ip, sl, #32
 8023c16:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8023c1a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023c1e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8023c22:	4440      	add	r0, r8
 8023c24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c28:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8023c2c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023c30:	ea40 000c 	orr.w	r0, r0, ip
 8023c34:	fb15 fc02 	smulbb	ip, r5, r2
 8023c38:	f1c5 0810 	rsb	r8, r5, #16
 8023c3c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023c40:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023c44:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8023c48:	eba8 0802 	sub.w	r8, r8, r2
 8023c4c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023c50:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023c54:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8023c58:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023c5c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8023c60:	ea4a 0101 	orr.w	r1, sl, r1
 8023c64:	437a      	muls	r2, r7
 8023c66:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8023c6a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023c6e:	fb09 2208 	mla	r2, r9, r8, r2
 8023c72:	ea4b 0000 	orr.w	r0, fp, r0
 8023c76:	fb05 2201 	mla	r2, r5, r1, r2
 8023c7a:	fb0c 2200 	mla	r2, ip, r0, r2
 8023c7e:	0d57      	lsrs	r7, r2, #21
 8023c80:	0952      	lsrs	r2, r2, #5
 8023c82:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023c86:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023c8a:	433a      	orrs	r2, r7
 8023c8c:	2bff      	cmp	r3, #255	; 0xff
 8023c8e:	b292      	uxth	r2, r2
 8023c90:	d102      	bne.n	8023c98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8023c92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023c94:	29ff      	cmp	r1, #255	; 0xff
 8023c96:	d063      	beq.n	8023d60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8023c98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023c9a:	1215      	asrs	r5, r2, #8
 8023c9c:	f8be 1000 	ldrh.w	r1, [lr]
 8023ca0:	4343      	muls	r3, r0
 8023ca2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023ca4:	10cf      	asrs	r7, r1, #3
 8023ca6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023caa:	1c58      	adds	r0, r3, #1
 8023cac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023cb0:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8023cb4:	1208      	asrs	r0, r1, #8
 8023cb6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8023cba:	00c9      	lsls	r1, r1, #3
 8023cbc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023cc0:	b2db      	uxtb	r3, r3
 8023cc2:	b2c9      	uxtb	r1, r1
 8023cc4:	fb10 f003 	smulbb	r0, r0, r3
 8023cc8:	fb11 f103 	smulbb	r1, r1, r3
 8023ccc:	fb05 0504 	mla	r5, r5, r4, r0
 8023cd0:	10d0      	asrs	r0, r2, #3
 8023cd2:	fb17 f703 	smulbb	r7, r7, r3
 8023cd6:	00d2      	lsls	r2, r2, #3
 8023cd8:	b2ad      	uxth	r5, r5
 8023cda:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023cde:	b2d2      	uxtb	r2, r2
 8023ce0:	fb00 7004 	mla	r0, r0, r4, r7
 8023ce4:	1c6b      	adds	r3, r5, #1
 8023ce6:	fb02 1204 	mla	r2, r2, r4, r1
 8023cea:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023cee:	b292      	uxth	r2, r2
 8023cf0:	b280      	uxth	r0, r0
 8023cf2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023cf6:	1c57      	adds	r7, r2, #1
 8023cf8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8023cfc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023d00:	433d      	orrs	r5, r7
 8023d02:	1c47      	adds	r7, r0, #1
 8023d04:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8023d08:	097f      	lsrs	r7, r7, #5
 8023d0a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023d0e:	433d      	orrs	r5, r7
 8023d10:	f8ae 5000 	strh.w	r5, [lr]
 8023d14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d16:	f10e 0e02 	add.w	lr, lr, #2
 8023d1a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023d1c:	4413      	add	r3, r2
 8023d1e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023d20:	9329      	str	r3, [sp, #164]	; 0xa4
 8023d22:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d24:	441a      	add	r2, r3
 8023d26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023d28:	3b01      	subs	r3, #1
 8023d2a:	922a      	str	r2, [sp, #168]	; 0xa8
 8023d2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8023d2e:	e61c      	b.n	802396a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8023d30:	fb08 f000 	mul.w	r0, r8, r0
 8023d34:	fb09 0303 	mla	r3, r9, r3, r0
 8023d38:	e6dc      	b.n	8023af4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8023d3a:	46b9      	mov	r9, r7
 8023d3c:	e704      	b.n	8023b48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 8023d3e:	f1c2 0110 	rsb	r1, r2, #16
 8023d42:	437a      	muls	r2, r7
 8023d44:	fb09 2901 	mla	r9, r9, r1, r2
 8023d48:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8023d4c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8023d50:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8023d54:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023d58:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023d5c:	4302      	orrs	r2, r0
 8023d5e:	e795      	b.n	8023c8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8023d60:	f8ae 2000 	strh.w	r2, [lr]
 8023d64:	e7d6      	b.n	8023d14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8023d66:	b017      	add	sp, #92	; 0x5c
 8023d68:	ecbd 8b08 	vpop	{d8-d11}
 8023d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8023d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d74:	b085      	sub	sp, #20
 8023d76:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8023d7a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8023d7e:	9103      	str	r1, [sp, #12]
 8023d80:	2d00      	cmp	r5, #0
 8023d82:	fb05 7106 	mla	r1, r5, r6, r7
 8023d86:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8023d8a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023d8e:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8023d92:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8023d96:	eb02 0901 	add.w	r9, r2, r1
 8023d9a:	9401      	str	r4, [sp, #4]
 8023d9c:	f2c0 80c0 	blt.w	8023f20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8023da0:	45a8      	cmp	r8, r5
 8023da2:	f340 80bd 	ble.w	8023f20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8023da6:	2f00      	cmp	r7, #0
 8023da8:	f2c0 80b6 	blt.w	8023f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8023dac:	42be      	cmp	r6, r7
 8023dae:	f340 80b3 	ble.w	8023f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8023db2:	f812 c001 	ldrb.w	ip, [r2, r1]
 8023db6:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8023dba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023dbe:	d019      	beq.n	8023df4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8023dc0:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8023dc4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8023dc8:	435a      	muls	r2, r3
 8023dca:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8023dce:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8023dd2:	fb0c f403 	mul.w	r4, ip, r3
 8023dd6:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8023dda:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8023dde:	441a      	add	r2, r3
 8023de0:	f104 0320 	add.w	r3, r4, #32
 8023de4:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8023de8:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8023dec:	0a1b      	lsrs	r3, r3, #8
 8023dee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023df2:	4319      	orrs	r1, r3
 8023df4:	b289      	uxth	r1, r1
 8023df6:	1c7b      	adds	r3, r7, #1
 8023df8:	f100 8097 	bmi.w	8023f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8023dfc:	429e      	cmp	r6, r3
 8023dfe:	f340 8094 	ble.w	8023f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8023e02:	2800      	cmp	r0, #0
 8023e04:	f000 8094 	beq.w	8023f30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8023e08:	f899 4001 	ldrb.w	r4, [r9, #1]
 8023e0c:	9b01      	ldr	r3, [sp, #4]
 8023e0e:	2cff      	cmp	r4, #255	; 0xff
 8023e10:	885b      	ldrh	r3, [r3, #2]
 8023e12:	d01b      	beq.n	8023e4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8023e14:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8023e18:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8023e1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023e20:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8023e24:	fb0a f202 	mul.w	r2, sl, r2
 8023e28:	fb04 fa03 	mul.w	sl, r4, r3
 8023e2c:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8023e30:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8023e34:	441a      	add	r2, r3
 8023e36:	f10a 0320 	add.w	r3, sl, #32
 8023e3a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023e3e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8023e42:	0a1b      	lsrs	r3, r3, #8
 8023e44:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023e48:	ea4b 0303 	orr.w	r3, fp, r3
 8023e4c:	b29b      	uxth	r3, r3
 8023e4e:	3501      	adds	r5, #1
 8023e50:	d474      	bmi.n	8023f3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8023e52:	45a8      	cmp	r8, r5
 8023e54:	dd72      	ble.n	8023f3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8023e56:	f1be 0f00 	cmp.w	lr, #0
 8023e5a:	f000 8110 	beq.w	802407e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8023e5e:	2f00      	cmp	r7, #0
 8023e60:	db69      	blt.n	8023f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8023e62:	42be      	cmp	r6, r7
 8023e64:	dd67      	ble.n	8023f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8023e66:	f819 5006 	ldrb.w	r5, [r9, r6]
 8023e6a:	9a01      	ldr	r2, [sp, #4]
 8023e6c:	2dff      	cmp	r5, #255	; 0xff
 8023e6e:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8023e72:	d01c      	beq.n	8023eae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8023e74:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8023e78:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8023e7c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023e80:	fb08 f802 	mul.w	r8, r8, r2
 8023e84:	fb05 fa0b 	mul.w	sl, r5, fp
 8023e88:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8023e8c:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8023e90:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023e94:	4490      	add	r8, r2
 8023e96:	f10a 0220 	add.w	r2, sl, #32
 8023e9a:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8023e9e:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8023ea2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ea6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023eaa:	ea4b 0b0a 	orr.w	fp, fp, sl
 8023eae:	fa1f fb8b 	uxth.w	fp, fp
 8023eb2:	3701      	adds	r7, #1
 8023eb4:	d447      	bmi.n	8023f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8023eb6:	42be      	cmp	r6, r7
 8023eb8:	dd45      	ble.n	8023f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8023eba:	2800      	cmp	r0, #0
 8023ebc:	d046      	beq.n	8023f4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8023ebe:	3601      	adds	r6, #1
 8023ec0:	9a01      	ldr	r2, [sp, #4]
 8023ec2:	f819 7006 	ldrb.w	r7, [r9, r6]
 8023ec6:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8023eca:	2fff      	cmp	r7, #255	; 0xff
 8023ecc:	d01a      	beq.n	8023f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8023ece:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8023ed2:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8023ed6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023eda:	fb08 f806 	mul.w	r8, r8, r6
 8023ede:	fb07 f902 	mul.w	r9, r7, r2
 8023ee2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8023ee6:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8023eea:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023eee:	44b0      	add	r8, r6
 8023ef0:	f109 0620 	add.w	r6, r9, #32
 8023ef4:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8023ef8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8023efc:	0a36      	lsrs	r6, r6, #8
 8023efe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023f02:	4332      	orrs	r2, r6
 8023f04:	b292      	uxth	r2, r2
 8023f06:	280f      	cmp	r0, #15
 8023f08:	d922      	bls.n	8023f50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8023f0a:	4b61      	ldr	r3, [pc, #388]	; (8024090 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8023f0c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8023f10:	4a60      	ldr	r2, [pc, #384]	; (8024094 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8023f12:	4861      	ldr	r0, [pc, #388]	; (8024098 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8023f14:	f003 fca2 	bl	802785c <__assert_func>
 8023f18:	f04f 0c00 	mov.w	ip, #0
 8023f1c:	4661      	mov	r1, ip
 8023f1e:	e76a      	b.n	8023df6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023f20:	2400      	movs	r4, #0
 8023f22:	46a4      	mov	ip, r4
 8023f24:	4623      	mov	r3, r4
 8023f26:	4621      	mov	r1, r4
 8023f28:	e791      	b.n	8023e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8023f2a:	2400      	movs	r4, #0
 8023f2c:	4623      	mov	r3, r4
 8023f2e:	e78e      	b.n	8023e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8023f30:	4604      	mov	r4, r0
 8023f32:	4603      	mov	r3, r0
 8023f34:	e78b      	b.n	8023e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8023f36:	2500      	movs	r5, #0
 8023f38:	46ab      	mov	fp, r5
 8023f3a:	e7ba      	b.n	8023eb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8023f3c:	2700      	movs	r7, #0
 8023f3e:	463d      	mov	r5, r7
 8023f40:	463a      	mov	r2, r7
 8023f42:	46bb      	mov	fp, r7
 8023f44:	e7df      	b.n	8023f06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8023f46:	2700      	movs	r7, #0
 8023f48:	463a      	mov	r2, r7
 8023f4a:	e7dc      	b.n	8023f06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8023f4c:	4607      	mov	r7, r0
 8023f4e:	4602      	mov	r2, r0
 8023f50:	f1be 0f0f 	cmp.w	lr, #15
 8023f54:	d8d9      	bhi.n	8023f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8023f56:	b286      	uxth	r6, r0
 8023f58:	fa1f f98e 	uxth.w	r9, lr
 8023f5c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023f60:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023f64:	fb06 f809 	mul.w	r8, r6, r9
 8023f68:	0136      	lsls	r6, r6, #4
 8023f6a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023f6e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8023f72:	9601      	str	r6, [sp, #4]
 8023f74:	ea4a 0101 	orr.w	r1, sl, r1
 8023f78:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8023f7c:	fa1f f689 	uxth.w	r6, r9
 8023f80:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023f84:	fb10 f90e 	smulbb	r9, r0, lr
 8023f88:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023f8c:	9602      	str	r6, [sp, #8]
 8023f8e:	460e      	mov	r6, r1
 8023f90:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8023f94:	f1ce 0110 	rsb	r1, lr, #16
 8023f98:	ea4a 0303 	orr.w	r3, sl, r3
 8023f9c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023fa0:	1a09      	subs	r1, r1, r0
 8023fa2:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8023fa6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023faa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023fae:	4343      	muls	r3, r0
 8023fb0:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8023fb4:	ea4a 0202 	orr.w	r2, sl, r2
 8023fb8:	9802      	ldr	r0, [sp, #8]
 8023fba:	fb01 3106 	mla	r1, r1, r6, r3
 8023fbe:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8023fc2:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8023fc6:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8023fca:	fb09 1302 	mla	r3, r9, r2, r1
 8023fce:	9a03      	ldr	r2, [sp, #12]
 8023fd0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023fd4:	8811      	ldrh	r1, [r2, #0]
 8023fd6:	9a01      	ldr	r2, [sp, #4]
 8023fd8:	ea4a 0b0b 	orr.w	fp, sl, fp
 8023fdc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023fe0:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8023fe4:	1a12      	subs	r2, r2, r0
 8023fe6:	9801      	ldr	r0, [sp, #4]
 8023fe8:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8023fec:	eba0 0608 	sub.w	r6, r0, r8
 8023ff0:	b292      	uxth	r2, r2
 8023ff2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023ff6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023ffa:	b2b6      	uxth	r6, r6
 8023ffc:	10c8      	asrs	r0, r1, #3
 8023ffe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024002:	4374      	muls	r4, r6
 8024004:	ea43 0e0e 	orr.w	lr, r3, lr
 8024008:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802400c:	fb0c 4402 	mla	r4, ip, r2, r4
 8024010:	9a02      	ldr	r2, [sp, #8]
 8024012:	fa1f f38e 	uxth.w	r3, lr
 8024016:	fb02 4505 	mla	r5, r2, r5, r4
 802401a:	120a      	asrs	r2, r1, #8
 802401c:	00c9      	lsls	r1, r1, #3
 802401e:	fb08 5707 	mla	r7, r8, r7, r5
 8024022:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024026:	b2c9      	uxtb	r1, r1
 8024028:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802402c:	b2ff      	uxtb	r7, r7
 802402e:	437a      	muls	r2, r7
 8024030:	4378      	muls	r0, r7
 8024032:	434f      	muls	r7, r1
 8024034:	1c51      	adds	r1, r2, #1
 8024036:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802403a:	121a      	asrs	r2, r3, #8
 802403c:	f022 0207 	bic.w	r2, r2, #7
 8024040:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024044:	1c41      	adds	r1, r0, #1
 8024046:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802404a:	10d9      	asrs	r1, r3, #3
 802404c:	0212      	lsls	r2, r2, #8
 802404e:	f021 0103 	bic.w	r1, r1, #3
 8024052:	00db      	lsls	r3, r3, #3
 8024054:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024058:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802405c:	00c9      	lsls	r1, r1, #3
 802405e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024062:	430a      	orrs	r2, r1
 8024064:	1c79      	adds	r1, r7, #1
 8024066:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802406a:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802406e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8024072:	4313      	orrs	r3, r2
 8024074:	9a03      	ldr	r2, [sp, #12]
 8024076:	8013      	strh	r3, [r2, #0]
 8024078:	b005      	add	sp, #20
 802407a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802407e:	280f      	cmp	r0, #15
 8024080:	f63f af43 	bhi.w	8023f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8024084:	4677      	mov	r7, lr
 8024086:	4675      	mov	r5, lr
 8024088:	4672      	mov	r2, lr
 802408a:	46f3      	mov	fp, lr
 802408c:	e763      	b.n	8023f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 802408e:	bf00      	nop
 8024090:	0802bded 	.word	0x0802bded
 8024094:	0802c3ba 	.word	0x0802c3ba
 8024098:	0802be71 	.word	0x0802be71

0802409c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240a0:	ed2d 8b08 	vpush	{d8-d11}
 80240a4:	b093      	sub	sp, #76	; 0x4c
 80240a6:	eeb0 aa40 	vmov.f32	s20, s0
 80240aa:	eef0 9a60 	vmov.f32	s19, s1
 80240ae:	9210      	str	r2, [sp, #64]	; 0x40
 80240b0:	eeb0 9a41 	vmov.f32	s18, s2
 80240b4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80240b6:	eeb0 8a62 	vmov.f32	s16, s5
 80240ba:	9011      	str	r0, [sp, #68]	; 0x44
 80240bc:	eef0 8a43 	vmov.f32	s17, s6
 80240c0:	6850      	ldr	r0, [r2, #4]
 80240c2:	eef0 ba44 	vmov.f32	s23, s8
 80240c6:	910e      	str	r1, [sp, #56]	; 0x38
 80240c8:	eeb0 ba64 	vmov.f32	s22, s9
 80240cc:	9306      	str	r3, [sp, #24]
 80240ce:	eef0 aa45 	vmov.f32	s21, s10
 80240d2:	6812      	ldr	r2, [r2, #0]
 80240d4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80240d8:	fb00 1303 	mla	r3, r0, r3, r1
 80240dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80240e0:	9307      	str	r3, [sp, #28]
 80240e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80240e4:	681b      	ldr	r3, [r3, #0]
 80240e6:	9308      	str	r3, [sp, #32]
 80240e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80240ea:	685b      	ldr	r3, [r3, #4]
 80240ec:	9309      	str	r3, [sp, #36]	; 0x24
 80240ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80240f0:	2b00      	cmp	r3, #0
 80240f2:	dc03      	bgt.n	80240fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80240f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80240f6:	2b00      	cmp	r3, #0
 80240f8:	f340 83b6 	ble.w	8024868 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80240fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80240fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024102:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024106:	1e48      	subs	r0, r1, #1
 8024108:	1e55      	subs	r5, r2, #1
 802410a:	9b06      	ldr	r3, [sp, #24]
 802410c:	2b00      	cmp	r3, #0
 802410e:	f340 8165 	ble.w	80243dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8024112:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8024114:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024116:	1436      	asrs	r6, r6, #16
 8024118:	ea4f 4323 	mov.w	r3, r3, asr #16
 802411c:	d406      	bmi.n	802412c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802411e:	4286      	cmp	r6, r0
 8024120:	da04      	bge.n	802412c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024122:	2b00      	cmp	r3, #0
 8024124:	db02      	blt.n	802412c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024126:	42ab      	cmp	r3, r5
 8024128:	f2c0 8159 	blt.w	80243de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802412c:	3601      	adds	r6, #1
 802412e:	f100 8146 	bmi.w	80243be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024132:	42b1      	cmp	r1, r6
 8024134:	f2c0 8143 	blt.w	80243be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024138:	3301      	adds	r3, #1
 802413a:	f100 8140 	bmi.w	80243be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802413e:	429a      	cmp	r2, r3
 8024140:	f2c0 813d 	blt.w	80243be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024144:	9b06      	ldr	r3, [sp, #24]
 8024146:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802414a:	9f07      	ldr	r7, [sp, #28]
 802414c:	930f      	str	r3, [sp, #60]	; 0x3c
 802414e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024150:	2b00      	cmp	r3, #0
 8024152:	f340 8166 	ble.w	8024422 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8024156:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024158:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802415a:	1418      	asrs	r0, r3, #16
 802415c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802415e:	142d      	asrs	r5, r5, #16
 8024160:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024164:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024166:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802416a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802416c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024170:	f100 81f0 	bmi.w	8024554 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8024174:	f102 3eff 	add.w	lr, r2, #4294967295
 8024178:	4575      	cmp	r5, lr
 802417a:	f280 81eb 	bge.w	8024554 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802417e:	2800      	cmp	r0, #0
 8024180:	f2c0 81e8 	blt.w	8024554 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8024184:	f103 3eff 	add.w	lr, r3, #4294967295
 8024188:	4570      	cmp	r0, lr
 802418a:	f280 81e3 	bge.w	8024554 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802418e:	b212      	sxth	r2, r2
 8024190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024192:	fa1f fe81 	uxth.w	lr, r1
 8024196:	fb00 5002 	mla	r0, r0, r2, r5
 802419a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802419e:	eb03 0a00 	add.w	sl, r3, r0
 80241a2:	f813 9000 	ldrb.w	r9, [r3, r0]
 80241a6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80241aa:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80241ae:	b29b      	uxth	r3, r3
 80241b0:	f1bc 0f00 	cmp.w	ip, #0
 80241b4:	f000 817b 	beq.w	80244ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80241b8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80241bc:	eb0a 0b02 	add.w	fp, sl, r2
 80241c0:	fa1f fa8c 	uxth.w	sl, ip
 80241c4:	940a      	str	r4, [sp, #40]	; 0x28
 80241c6:	fb0a fe0e 	mul.w	lr, sl, lr
 80241ca:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80241ce:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80241d2:	eba5 050e 	sub.w	r5, r5, lr
 80241d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80241d8:	fa1f fa8a 	uxth.w	sl, sl
 80241dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80241de:	b2ad      	uxth	r5, r5
 80241e0:	eba3 030a 	sub.w	r3, r3, sl
 80241e4:	fb08 f505 	mul.w	r5, r8, r5
 80241e8:	b29b      	uxth	r3, r3
 80241ea:	fb09 5303 	mla	r3, r9, r3, r5
 80241ee:	fb0a 3304 	mla	r3, sl, r4, r3
 80241f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80241f4:	fb0e 3304 	mla	r3, lr, r4, r3
 80241f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80241fc:	2b00      	cmp	r3, #0
 80241fe:	f000 80d1 	beq.w	80243a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8024202:	9c08      	ldr	r4, [sp, #32]
 8024204:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024208:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802420c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024210:	f000 8152 	beq.w	80244b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8024214:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024218:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802421c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024220:	fb0a fe0e 	mul.w	lr, sl, lr
 8024224:	fb09 f000 	mul.w	r0, r9, r0
 8024228:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802422c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024230:	f100 0b20 	add.w	fp, r0, #32
 8024234:	44ce      	add	lr, r9
 8024236:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802423a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802423e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024242:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8024246:	ea4e 0909 	orr.w	r9, lr, r9
 802424a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802424e:	8868      	ldrh	r0, [r5, #2]
 8024250:	d019      	beq.n	8024286 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024252:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024256:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802425a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802425e:	fb0a fe0e 	mul.w	lr, sl, lr
 8024262:	fb08 f800 	mul.w	r8, r8, r0
 8024266:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802426a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802426e:	f108 0b20 	add.w	fp, r8, #32
 8024272:	4486      	add	lr, r0
 8024274:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8024278:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802427c:	0a00      	lsrs	r0, r0, #8
 802427e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024282:	ea4e 0000 	orr.w	r0, lr, r0
 8024286:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802428a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802428e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024292:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024296:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802429a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802429e:	ea4e 0909 	orr.w	r9, lr, r9
 80242a2:	ea4a 0000 	orr.w	r0, sl, r0
 80242a6:	f1bc 0f00 	cmp.w	ip, #0
 80242aa:	f000 8107 	beq.w	80244bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80242ae:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80242b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80242b4:	3a01      	subs	r2, #1
 80242b6:	2cff      	cmp	r4, #255	; 0xff
 80242b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80242bc:	f102 0202 	add.w	r2, r2, #2
 80242c0:	eb05 0e02 	add.w	lr, r5, r2
 80242c4:	5aaa      	ldrh	r2, [r5, r2]
 80242c6:	d018      	beq.n	80242fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80242c8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80242cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80242d0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80242d4:	fb04 fa02 	mul.w	sl, r4, r2
 80242d8:	fb08 f805 	mul.w	r8, r8, r5
 80242dc:	f10a 0520 	add.w	r5, sl, #32
 80242e0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80242e4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80242e8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80242ec:	4442      	add	r2, r8
 80242ee:	0a2d      	lsrs	r5, r5, #8
 80242f0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80242f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80242f8:	432a      	orrs	r2, r5
 80242fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80242fc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024300:	2cff      	cmp	r4, #255	; 0xff
 8024302:	d01a      	beq.n	802433a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8024304:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8024308:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802430c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024310:	fb04 fa05 	mul.w	sl, r4, r5
 8024314:	fb08 f80e 	mul.w	r8, r8, lr
 8024318:	f10a 0e20 	add.w	lr, sl, #32
 802431c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8024320:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024324:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024328:	4445      	add	r5, r8
 802432a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802432e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8024332:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024336:	ea45 050e 	orr.w	r5, r5, lr
 802433a:	fb1c fe01 	smulbb	lr, ip, r1
 802433e:	f1cc 0810 	rsb	r8, ip, #16
 8024342:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024346:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802434a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802434e:	eba8 0801 	sub.w	r8, r8, r1
 8024352:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8024356:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802435a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802435e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024362:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8024366:	ea4a 0202 	orr.w	r2, sl, r2
 802436a:	4341      	muls	r1, r0
 802436c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8024370:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024374:	fb09 1108 	mla	r1, r9, r8, r1
 8024378:	ea4b 0505 	orr.w	r5, fp, r5
 802437c:	fb0c 1102 	mla	r1, ip, r2, r1
 8024380:	fb0e 1e05 	mla	lr, lr, r5, r1
 8024384:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024388:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802438c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024390:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024394:	ea42 0e0e 	orr.w	lr, r2, lr
 8024398:	fa1f f28e 	uxth.w	r2, lr
 802439c:	2bff      	cmp	r3, #255	; 0xff
 802439e:	f040 80a1 	bne.w	80244e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 80243a2:	803a      	strh	r2, [r7, #0]
 80243a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80243a6:	3702      	adds	r7, #2
 80243a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80243aa:	4413      	add	r3, r2
 80243ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80243ae:	9325      	str	r3, [sp, #148]	; 0x94
 80243b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243b2:	441a      	add	r2, r3
 80243b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80243b6:	3b01      	subs	r3, #1
 80243b8:	9226      	str	r2, [sp, #152]	; 0x98
 80243ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80243bc:	e6c7      	b.n	802414e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80243be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80243c0:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80243c2:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80243c4:	4433      	add	r3, r6
 80243c6:	9325      	str	r3, [sp, #148]	; 0x94
 80243c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243ca:	441c      	add	r4, r3
 80243cc:	9b06      	ldr	r3, [sp, #24]
 80243ce:	3b01      	subs	r3, #1
 80243d0:	9426      	str	r4, [sp, #152]	; 0x98
 80243d2:	9306      	str	r3, [sp, #24]
 80243d4:	9b07      	ldr	r3, [sp, #28]
 80243d6:	3302      	adds	r3, #2
 80243d8:	9307      	str	r3, [sp, #28]
 80243da:	e696      	b.n	802410a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80243dc:	d028      	beq.n	8024430 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80243de:	9b06      	ldr	r3, [sp, #24]
 80243e0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80243e2:	3b01      	subs	r3, #1
 80243e4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80243e6:	fb00 5003 	mla	r0, r0, r3, r5
 80243ea:	1400      	asrs	r0, r0, #16
 80243ec:	f53f aeaa 	bmi.w	8024144 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80243f0:	3901      	subs	r1, #1
 80243f2:	4288      	cmp	r0, r1
 80243f4:	f6bf aea6 	bge.w	8024144 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80243f8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80243fa:	9826      	ldr	r0, [sp, #152]	; 0x98
 80243fc:	fb01 0303 	mla	r3, r1, r3, r0
 8024400:	141b      	asrs	r3, r3, #16
 8024402:	f53f ae9f 	bmi.w	8024144 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8024406:	3a01      	subs	r2, #1
 8024408:	4293      	cmp	r3, r2
 802440a:	f6bf ae9b 	bge.w	8024144 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802440e:	9b06      	ldr	r3, [sp, #24]
 8024410:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8024414:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8024418:	930f      	str	r3, [sp, #60]	; 0x3c
 802441a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802441c:	2b00      	cmp	r3, #0
 802441e:	f300 80b6 	bgt.w	802458e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8024422:	9b06      	ldr	r3, [sp, #24]
 8024424:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024428:	9b07      	ldr	r3, [sp, #28]
 802442a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802442e:	9307      	str	r3, [sp, #28]
 8024430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024432:	2b00      	cmp	r3, #0
 8024434:	f340 8218 	ble.w	8024868 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8024438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802443c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802443e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024442:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024446:	eef0 6a48 	vmov.f32	s13, s16
 802444a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802444e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024452:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024456:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802445a:	eef0 6a68 	vmov.f32	s13, s17
 802445e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024462:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8024466:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802446a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802446e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024472:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024476:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802447a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802447e:	ee18 2a10 	vmov	r2, s16
 8024482:	eeb0 8a47 	vmov.f32	s16, s14
 8024486:	fb92 f3f3 	sdiv	r3, r2, r3
 802448a:	ee18 2a90 	vmov	r2, s17
 802448e:	9327      	str	r3, [sp, #156]	; 0x9c
 8024490:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024492:	eef0 8a67 	vmov.f32	s17, s15
 8024496:	fb92 f3f3 	sdiv	r3, r2, r3
 802449a:	9328      	str	r3, [sp, #160]	; 0xa0
 802449c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802449e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80244a0:	3b01      	subs	r3, #1
 80244a2:	930e      	str	r3, [sp, #56]	; 0x38
 80244a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80244a6:	bf08      	it	eq
 80244a8:	4613      	moveq	r3, r2
 80244aa:	9306      	str	r3, [sp, #24]
 80244ac:	e61f      	b.n	80240ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80244ae:	fb08 f505 	mul.w	r5, r8, r5
 80244b2:	fb09 5303 	mla	r3, r9, r3, r5
 80244b6:	e69f      	b.n	80241f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80244b8:	4681      	mov	r9, r0
 80244ba:	e6c6      	b.n	802424a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80244bc:	f1c1 0210 	rsb	r2, r1, #16
 80244c0:	4341      	muls	r1, r0
 80244c2:	fb09 1902 	mla	r9, r9, r2, r1
 80244c6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80244ca:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80244ce:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80244d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80244d6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80244da:	ea42 0909 	orr.w	r9, r2, r9
 80244de:	fa1f f289 	uxth.w	r2, r9
 80244e2:	e75b      	b.n	802439c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80244e4:	f8b7 c000 	ldrh.w	ip, [r7]
 80244e8:	43db      	mvns	r3, r3
 80244ea:	ea4f 202c 	mov.w	r0, ip, asr #8
 80244ee:	fa5f fe83 	uxtb.w	lr, r3
 80244f2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80244f6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80244fa:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80244fe:	fb00 f00e 	mul.w	r0, r0, lr
 8024502:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024506:	b2db      	uxtb	r3, r3
 8024508:	1c41      	adds	r1, r0, #1
 802450a:	fb05 f50e 	mul.w	r5, r5, lr
 802450e:	fb03 f30e 	mul.w	r3, r3, lr
 8024512:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024516:	1211      	asrs	r1, r2, #8
 8024518:	f021 0107 	bic.w	r1, r1, #7
 802451c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024520:	48d4      	ldr	r0, [pc, #848]	; (8024874 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8024522:	b2c9      	uxtb	r1, r1
 8024524:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8024528:	1c69      	adds	r1, r5, #1
 802452a:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802452e:	10d1      	asrs	r1, r2, #3
 8024530:	00d2      	lsls	r2, r2, #3
 8024532:	f021 0103 	bic.w	r1, r1, #3
 8024536:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802453a:	00c9      	lsls	r1, r1, #3
 802453c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024540:	4301      	orrs	r1, r0
 8024542:	1c58      	adds	r0, r3, #1
 8024544:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024548:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802454c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024550:	430a      	orrs	r2, r1
 8024552:	e726      	b.n	80243a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024554:	f115 0e01 	adds.w	lr, r5, #1
 8024558:	f53f af24 	bmi.w	80243a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802455c:	4572      	cmp	r2, lr
 802455e:	f6ff af21 	blt.w	80243a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8024562:	f110 0e01 	adds.w	lr, r0, #1
 8024566:	f53f af1d 	bmi.w	80243a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802456a:	4573      	cmp	r3, lr
 802456c:	f6ff af1a 	blt.w	80243a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8024570:	b21b      	sxth	r3, r3
 8024572:	b212      	sxth	r2, r2
 8024574:	9301      	str	r3, [sp, #4]
 8024576:	9200      	str	r2, [sp, #0]
 8024578:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 802457c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8024580:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8024584:	4639      	mov	r1, r7
 8024586:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024588:	f7ff fbf2 	bl	8023d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802458c:	e70a      	b.n	80243a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802458e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024590:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024594:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024596:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802459a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802459c:	fa1f fc82 	uxth.w	ip, r2
 80245a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80245a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80245a6:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80245aa:	141f      	asrs	r7, r3, #16
 80245ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80245ae:	141b      	asrs	r3, r3, #16
 80245b0:	fb01 3707 	mla	r7, r1, r7, r3
 80245b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245b6:	eb03 0a07 	add.w	sl, r3, r7
 80245ba:	f813 9007 	ldrb.w	r9, [r3, r7]
 80245be:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80245c2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80245c6:	b29b      	uxth	r3, r3
 80245c8:	2d00      	cmp	r5, #0
 80245ca:	f000 80fe 	beq.w	80247ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80245ce:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80245d2:	eb0a 0b01 	add.w	fp, sl, r1
 80245d6:	fa1f fa85 	uxth.w	sl, r5
 80245da:	940c      	str	r4, [sp, #48]	; 0x30
 80245dc:	fb0a fc0c 	mul.w	ip, sl, ip
 80245e0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80245e4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80245e8:	eba0 000c 	sub.w	r0, r0, ip
 80245ec:	940d      	str	r4, [sp, #52]	; 0x34
 80245ee:	fa1f fa8a 	uxth.w	sl, sl
 80245f2:	b280      	uxth	r0, r0
 80245f4:	eba3 030a 	sub.w	r3, r3, sl
 80245f8:	fb08 f000 	mul.w	r0, r8, r0
 80245fc:	b29b      	uxth	r3, r3
 80245fe:	fb09 0303 	mla	r3, r9, r3, r0
 8024602:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024604:	fb0a 3300 	mla	r3, sl, r0, r3
 8024608:	fb0c 3304 	mla	r3, ip, r4, r3
 802460c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024610:	2b00      	cmp	r3, #0
 8024612:	f000 80cc 	beq.w	80247ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8024616:	9808      	ldr	r0, [sp, #32]
 8024618:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802461c:	9c08      	ldr	r4, [sp, #32]
 802461e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8024622:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8024626:	f000 80d5 	beq.w	80247d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 802462a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802462e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024632:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024636:	fb0a fc0c 	mul.w	ip, sl, ip
 802463a:	fb09 f707 	mul.w	r7, r9, r7
 802463e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8024642:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8024646:	f107 0b20 	add.w	fp, r7, #32
 802464a:	44cc      	add	ip, r9
 802464c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8024650:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8024654:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024658:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802465c:	ea4c 0909 	orr.w	r9, ip, r9
 8024660:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024664:	8847      	ldrh	r7, [r0, #2]
 8024666:	d019      	beq.n	802469c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8024668:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802466c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024670:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024674:	fb0a fc0c 	mul.w	ip, sl, ip
 8024678:	fb08 f807 	mul.w	r8, r8, r7
 802467c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8024680:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8024684:	f108 0b20 	add.w	fp, r8, #32
 8024688:	44bc      	add	ip, r7
 802468a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802468e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8024692:	0a3f      	lsrs	r7, r7, #8
 8024694:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024698:	ea4c 0707 	orr.w	r7, ip, r7
 802469c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80246a0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80246a4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80246a8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80246ac:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80246b0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80246b4:	ea4c 0909 	orr.w	r9, ip, r9
 80246b8:	ea4a 0707 	orr.w	r7, sl, r7
 80246bc:	2d00      	cmp	r5, #0
 80246be:	f000 808b 	beq.w	80247d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80246c2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80246c6:	3901      	subs	r1, #1
 80246c8:	0049      	lsls	r1, r1, #1
 80246ca:	3102      	adds	r1, #2
 80246cc:	eb00 0c01 	add.w	ip, r0, r1
 80246d0:	5a41      	ldrh	r1, [r0, r1]
 80246d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80246d4:	28ff      	cmp	r0, #255	; 0xff
 80246d6:	d019      	beq.n	802470c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80246d8:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80246dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80246de:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80246e2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80246e6:	fb04 fa01 	mul.w	sl, r4, r1
 80246ea:	fb08 f800 	mul.w	r8, r8, r0
 80246ee:	f10a 0020 	add.w	r0, sl, #32
 80246f2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80246f6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80246fa:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80246fe:	4441      	add	r1, r8
 8024700:	0a00      	lsrs	r0, r0, #8
 8024702:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8024706:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802470a:	4301      	orrs	r1, r0
 802470c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802470e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8024712:	2cff      	cmp	r4, #255	; 0xff
 8024714:	d01a      	beq.n	802474c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8024716:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802471a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802471e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024722:	fb04 fa00 	mul.w	sl, r4, r0
 8024726:	fb08 f80c 	mul.w	r8, r8, ip
 802472a:	f10a 0c20 	add.w	ip, sl, #32
 802472e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8024732:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024736:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802473a:	4440      	add	r0, r8
 802473c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024740:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8024744:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024748:	ea40 000c 	orr.w	r0, r0, ip
 802474c:	fb15 fc02 	smulbb	ip, r5, r2
 8024750:	f1c5 0810 	rsb	r8, r5, #16
 8024754:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024758:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802475c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8024760:	eba8 0802 	sub.w	r8, r8, r2
 8024764:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024768:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802476c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8024770:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024774:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8024778:	ea4a 0101 	orr.w	r1, sl, r1
 802477c:	437a      	muls	r2, r7
 802477e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8024782:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024786:	fb09 2208 	mla	r2, r9, r8, r2
 802478a:	ea4b 0000 	orr.w	r0, fp, r0
 802478e:	fb05 2201 	mla	r2, r5, r1, r2
 8024792:	fb0c 2200 	mla	r2, ip, r0, r2
 8024796:	0d57      	lsrs	r7, r2, #21
 8024798:	0952      	lsrs	r2, r2, #5
 802479a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802479e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80247a2:	433a      	orrs	r2, r7
 80247a4:	2bff      	cmp	r3, #255	; 0xff
 80247a6:	b292      	uxth	r2, r2
 80247a8:	d127      	bne.n	80247fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 80247aa:	f8ae 2000 	strh.w	r2, [lr]
 80247ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80247b0:	f10e 0e02 	add.w	lr, lr, #2
 80247b4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80247b6:	4413      	add	r3, r2
 80247b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80247ba:	9325      	str	r3, [sp, #148]	; 0x94
 80247bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247be:	441a      	add	r2, r3
 80247c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80247c2:	3b01      	subs	r3, #1
 80247c4:	9226      	str	r2, [sp, #152]	; 0x98
 80247c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80247c8:	e627      	b.n	802441a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80247ca:	fb08 f000 	mul.w	r0, r8, r0
 80247ce:	fb09 0303 	mla	r3, r9, r3, r0
 80247d2:	e71b      	b.n	802460c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 80247d4:	46b9      	mov	r9, r7
 80247d6:	e743      	b.n	8024660 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 80247d8:	f1c2 0110 	rsb	r1, r2, #16
 80247dc:	437a      	muls	r2, r7
 80247de:	fb09 2901 	mla	r9, r9, r1, r2
 80247e2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80247e6:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80247ea:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80247ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80247f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80247f6:	4302      	orrs	r2, r0
 80247f8:	e7d4      	b.n	80247a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 80247fa:	f8be 7000 	ldrh.w	r7, [lr]
 80247fe:	43db      	mvns	r3, r3
 8024800:	4c1c      	ldr	r4, [pc, #112]	; (8024874 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8024802:	1238      	asrs	r0, r7, #8
 8024804:	fa5f fc83 	uxtb.w	ip, r3
 8024808:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802480c:	10fd      	asrs	r5, r7, #3
 802480e:	00fb      	lsls	r3, r7, #3
 8024810:	fb00 f00c 	mul.w	r0, r0, ip
 8024814:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024818:	b2db      	uxtb	r3, r3
 802481a:	fb05 f10c 	mul.w	r1, r5, ip
 802481e:	1c45      	adds	r5, r0, #1
 8024820:	fb03 f30c 	mul.w	r3, r3, ip
 8024824:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024828:	1215      	asrs	r5, r2, #8
 802482a:	f025 0507 	bic.w	r5, r5, #7
 802482e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024832:	1c4d      	adds	r5, r1, #1
 8024834:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8024838:	10d1      	asrs	r1, r2, #3
 802483a:	b2c0      	uxtb	r0, r0
 802483c:	f021 0103 	bic.w	r1, r1, #3
 8024840:	00d2      	lsls	r2, r2, #3
 8024842:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8024846:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802484a:	00c9      	lsls	r1, r1, #3
 802484c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024850:	4308      	orrs	r0, r1
 8024852:	1c59      	adds	r1, r3, #1
 8024854:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024858:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802485c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8024860:	4318      	orrs	r0, r3
 8024862:	f8ae 0000 	strh.w	r0, [lr]
 8024866:	e7a2      	b.n	80247ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8024868:	b013      	add	sp, #76	; 0x4c
 802486a:	ecbd 8b08 	vpop	{d8-d11}
 802486e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024872:	bf00      	nop
 8024874:	fffff800 	.word	0xfffff800

08024878 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8024878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802487c:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8024880:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8024884:	fb0c 4e03 	mla	lr, ip, r3, r4
 8024888:	f1bc 0f00 	cmp.w	ip, #0
 802488c:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8024890:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8024894:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8024898:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 802489c:	8808      	ldrh	r0, [r1, #0]
 802489e:	db2f      	blt.n	8024900 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80248a0:	45e2      	cmp	sl, ip
 80248a2:	dd2d      	ble.n	8024900 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80248a4:	2c00      	cmp	r4, #0
 80248a6:	db29      	blt.n	80248fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80248a8:	42a3      	cmp	r3, r4
 80248aa:	dd27      	ble.n	80248fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80248ac:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 80248b0:	1c62      	adds	r2, r4, #1
 80248b2:	d428      	bmi.n	8024906 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80248b4:	4293      	cmp	r3, r2
 80248b6:	dd26      	ble.n	8024906 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80248b8:	b32f      	cbz	r7, 8024906 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80248ba:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 80248be:	f11c 0c01 	adds.w	ip, ip, #1
 80248c2:	d424      	bmi.n	802490e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80248c4:	45e2      	cmp	sl, ip
 80248c6:	dd22      	ble.n	802490e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80248c8:	2e00      	cmp	r6, #0
 80248ca:	f000 809d 	beq.w	8024a08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 80248ce:	2c00      	cmp	r4, #0
 80248d0:	db1b      	blt.n	802490a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80248d2:	42a3      	cmp	r3, r4
 80248d4:	dd19      	ble.n	802490a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80248d6:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 80248da:	3401      	adds	r4, #1
 80248dc:	d41a      	bmi.n	8024914 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80248de:	42a3      	cmp	r3, r4
 80248e0:	dd18      	ble.n	8024914 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80248e2:	b1cf      	cbz	r7, 8024918 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 80248e4:	3301      	adds	r3, #1
 80248e6:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 80248ea:	2f0f      	cmp	r7, #15
 80248ec:	d915      	bls.n	802491a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 80248ee:	4b49      	ldr	r3, [pc, #292]	; (8024a14 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 80248f0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80248f4:	4a48      	ldr	r2, [pc, #288]	; (8024a18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 80248f6:	4849      	ldr	r0, [pc, #292]	; (8024a1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 80248f8:	f002 ffb0 	bl	802785c <__assert_func>
 80248fc:	4681      	mov	r9, r0
 80248fe:	e7d7      	b.n	80248b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8024900:	4686      	mov	lr, r0
 8024902:	4681      	mov	r9, r0
 8024904:	e7db      	b.n	80248be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8024906:	4686      	mov	lr, r0
 8024908:	e7d9      	b.n	80248be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802490a:	4684      	mov	ip, r0
 802490c:	e7e5      	b.n	80248da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 802490e:	4603      	mov	r3, r0
 8024910:	4684      	mov	ip, r0
 8024912:	e7ea      	b.n	80248ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8024914:	4603      	mov	r3, r0
 8024916:	e7e8      	b.n	80248ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8024918:	4603      	mov	r3, r0
 802491a:	2e0f      	cmp	r6, #15
 802491c:	d8e7      	bhi.n	80248ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802491e:	fb17 f806 	smulbb	r8, r7, r6
 8024922:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8024926:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 802492a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802492e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024932:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8024936:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802493a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802493e:	ea44 0909 	orr.w	r9, r4, r9
 8024942:	f1c6 0410 	rsb	r4, r6, #16
 8024946:	041a      	lsls	r2, r3, #16
 8024948:	ea4a 0e0e 	orr.w	lr, sl, lr
 802494c:	1be4      	subs	r4, r4, r7
 802494e:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8024952:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024956:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802495a:	fb07 fe0e 	mul.w	lr, r7, lr
 802495e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8024962:	4313      	orrs	r3, r2
 8024964:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8024968:	fb04 e409 	mla	r4, r4, r9, lr
 802496c:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8024970:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024974:	b2af      	uxth	r7, r5
 8024976:	fb08 4303 	mla	r3, r8, r3, r4
 802497a:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 802497e:	43ed      	mvns	r5, r5
 8024980:	4322      	orrs	r2, r4
 8024982:	b2ed      	uxtb	r5, r5
 8024984:	fb06 3202 	mla	r2, r6, r2, r3
 8024988:	10c6      	asrs	r6, r0, #3
 802498a:	0d53      	lsrs	r3, r2, #21
 802498c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024990:	0952      	lsrs	r2, r2, #5
 8024992:	fb16 f605 	smulbb	r6, r6, r5
 8024996:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802499a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802499e:	431a      	orrs	r2, r3
 80249a0:	b293      	uxth	r3, r2
 80249a2:	1202      	asrs	r2, r0, #8
 80249a4:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80249a8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80249ac:	00dc      	lsls	r4, r3, #3
 80249ae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80249b2:	fb12 f205 	smulbb	r2, r2, r5
 80249b6:	b2e4      	uxtb	r4, r4
 80249b8:	fb0c 2c07 	mla	ip, ip, r7, r2
 80249bc:	10da      	asrs	r2, r3, #3
 80249be:	00c3      	lsls	r3, r0, #3
 80249c0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80249c4:	fa1f fc8c 	uxth.w	ip, ip
 80249c8:	b2db      	uxtb	r3, r3
 80249ca:	fb02 6207 	mla	r2, r2, r7, r6
 80249ce:	fb13 f305 	smulbb	r3, r3, r5
 80249d2:	b296      	uxth	r6, r2
 80249d4:	fb04 3307 	mla	r3, r4, r7, r3
 80249d8:	b29a      	uxth	r2, r3
 80249da:	f10c 0301 	add.w	r3, ip, #1
 80249de:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80249e2:	1c53      	adds	r3, r2, #1
 80249e4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80249e8:	1c72      	adds	r2, r6, #1
 80249ea:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80249ee:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80249f2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80249f6:	0952      	lsrs	r2, r2, #5
 80249f8:	ea43 030c 	orr.w	r3, r3, ip
 80249fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024a00:	4313      	orrs	r3, r2
 8024a02:	800b      	strh	r3, [r1, #0]
 8024a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024a08:	2f0f      	cmp	r7, #15
 8024a0a:	f63f af70 	bhi.w	80248ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8024a0e:	4603      	mov	r3, r0
 8024a10:	4684      	mov	ip, r0
 8024a12:	e784      	b.n	802491e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8024a14:	0802bded 	.word	0x0802bded
 8024a18:	0802c463 	.word	0x0802c463
 8024a1c:	0802be71 	.word	0x0802be71

08024a20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a24:	ed2d 8b08 	vpush	{d8-d11}
 8024a28:	b093      	sub	sp, #76	; 0x4c
 8024a2a:	461d      	mov	r5, r3
 8024a2c:	eeb0 aa40 	vmov.f32	s20, s0
 8024a30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024a32:	eef0 9a60 	vmov.f32	s19, s1
 8024a36:	9210      	str	r2, [sp, #64]	; 0x40
 8024a38:	eeb0 9a41 	vmov.f32	s18, s2
 8024a3c:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8024a40:	eeb0 8a62 	vmov.f32	s16, s5
 8024a44:	910a      	str	r1, [sp, #40]	; 0x28
 8024a46:	eef0 8a43 	vmov.f32	s17, s6
 8024a4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8024a4c:	eef0 ba44 	vmov.f32	s23, s8
 8024a50:	6859      	ldr	r1, [r3, #4]
 8024a52:	eeb0 ba64 	vmov.f32	s22, s9
 8024a56:	681b      	ldr	r3, [r3, #0]
 8024a58:	eef0 aa45 	vmov.f32	s21, s10
 8024a5c:	9011      	str	r0, [sp, #68]	; 0x44
 8024a5e:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8024a62:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8024a66:	fb01 2707 	mla	r7, r1, r7, r2
 8024a6a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8024a6e:	9307      	str	r3, [sp, #28]
 8024a70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024a72:	681b      	ldr	r3, [r3, #0]
 8024a74:	9309      	str	r3, [sp, #36]	; 0x24
 8024a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024a78:	43db      	mvns	r3, r3
 8024a7a:	b2db      	uxtb	r3, r3
 8024a7c:	9308      	str	r3, [sp, #32]
 8024a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a80:	2b00      	cmp	r3, #0
 8024a82:	dc03      	bgt.n	8024a8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024a86:	2b00      	cmp	r3, #0
 8024a88:	f340 8205 	ble.w	8024e96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8024a8c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024a8e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024a92:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024a96:	1e48      	subs	r0, r1, #1
 8024a98:	f102 3cff 	add.w	ip, r2, #4294967295
 8024a9c:	2d00      	cmp	r5, #0
 8024a9e:	f340 80da 	ble.w	8024c56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8024aa2:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024aa6:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024aaa:	d406      	bmi.n	8024aba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024aac:	4586      	cmp	lr, r0
 8024aae:	da04      	bge.n	8024aba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024ab0:	2b00      	cmp	r3, #0
 8024ab2:	db02      	blt.n	8024aba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024ab4:	4563      	cmp	r3, ip
 8024ab6:	f2c0 80cf 	blt.w	8024c58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024aba:	f11e 0e01 	adds.w	lr, lr, #1
 8024abe:	f100 80c1 	bmi.w	8024c44 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8024ac2:	4571      	cmp	r1, lr
 8024ac4:	f2c0 80be 	blt.w	8024c44 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8024ac8:	3301      	adds	r3, #1
 8024aca:	f100 80bb 	bmi.w	8024c44 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8024ace:	429a      	cmp	r2, r3
 8024ad0:	f2c0 80b8 	blt.w	8024c44 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8024ad4:	46a9      	mov	r9, r5
 8024ad6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8024ada:	f1b9 0f00 	cmp.w	r9, #0
 8024ade:	f340 80d8 	ble.w	8024c92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8024ae2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024ae4:	1421      	asrs	r1, r4, #16
 8024ae6:	ea4f 4026 	mov.w	r0, r6, asr #16
 8024aea:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024aee:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024af2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8024af6:	f100 8112 	bmi.w	8024d1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024afa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8024afe:	4551      	cmp	r1, sl
 8024b00:	f280 810d 	bge.w	8024d1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024b04:	2800      	cmp	r0, #0
 8024b06:	f2c0 810a 	blt.w	8024d1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024b0a:	f103 3aff 	add.w	sl, r3, #4294967295
 8024b0e:	4550      	cmp	r0, sl
 8024b10:	f280 8105 	bge.w	8024d1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024b14:	fa0f f38e 	sxth.w	r3, lr
 8024b18:	fb00 1103 	mla	r1, r0, r3, r1
 8024b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024b1e:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8024b22:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8024b26:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8024b2a:	f1bc 0f00 	cmp.w	ip, #0
 8024b2e:	d007      	beq.n	8024b40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8024b30:	005b      	lsls	r3, r3, #1
 8024b32:	eb0a 0003 	add.w	r0, sl, r3
 8024b36:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8024b3a:	930c      	str	r3, [sp, #48]	; 0x30
 8024b3c:	8843      	ldrh	r3, [r0, #2]
 8024b3e:	930d      	str	r3, [sp, #52]	; 0x34
 8024b40:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8024b44:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024b48:	fb12 f30c 	smulbb	r3, r2, ip
 8024b4c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024b50:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024b54:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024b58:	10db      	asrs	r3, r3, #3
 8024b5a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024b5e:	ea40 000e 	orr.w	r0, r0, lr
 8024b62:	f1cc 0e10 	rsb	lr, ip, #16
 8024b66:	ea4a 0101 	orr.w	r1, sl, r1
 8024b6a:	9f08      	ldr	r7, [sp, #32]
 8024b6c:	ebae 0e02 	sub.w	lr, lr, r2
 8024b70:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024b74:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8024b78:	4351      	muls	r1, r2
 8024b7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024b7c:	fb0e 1e00 	mla	lr, lr, r0, r1
 8024b80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024b82:	0410      	lsls	r0, r2, #16
 8024b84:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024b88:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024b8c:	4310      	orrs	r0, r2
 8024b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024b90:	0412      	lsls	r2, r2, #16
 8024b92:	fb03 e000 	mla	r0, r3, r0, lr
 8024b96:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8024b9a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8024b9e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024ba2:	ea42 020e 	orr.w	r2, r2, lr
 8024ba6:	fb03 0302 	mla	r3, r3, r2, r0
 8024baa:	f8b8 0000 	ldrh.w	r0, [r8]
 8024bae:	0d5a      	lsrs	r2, r3, #21
 8024bb0:	095b      	lsrs	r3, r3, #5
 8024bb2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024bb6:	1201      	asrs	r1, r0, #8
 8024bb8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024bbc:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8024bc0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024bc4:	00c0      	lsls	r0, r0, #3
 8024bc6:	4313      	orrs	r3, r2
 8024bc8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8024bcc:	fb11 f107 	smulbb	r1, r1, r7
 8024bd0:	b2c0      	uxtb	r0, r0
 8024bd2:	b29b      	uxth	r3, r3
 8024bd4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024bd8:	fb10 f007 	smulbb	r0, r0, r7
 8024bdc:	fb1e fe07 	smulbb	lr, lr, r7
 8024be0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8024be4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024be8:	fb0c 1c02 	mla	ip, ip, r2, r1
 8024bec:	10d9      	asrs	r1, r3, #3
 8024bee:	00db      	lsls	r3, r3, #3
 8024bf0:	fa1f fc8c 	uxth.w	ip, ip
 8024bf4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024bf8:	b2db      	uxtb	r3, r3
 8024bfa:	fb01 e102 	mla	r1, r1, r2, lr
 8024bfe:	fb03 0302 	mla	r3, r3, r2, r0
 8024c02:	b289      	uxth	r1, r1
 8024c04:	b29a      	uxth	r2, r3
 8024c06:	f10c 0301 	add.w	r3, ip, #1
 8024c0a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024c0e:	1c53      	adds	r3, r2, #1
 8024c10:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024c14:	1c4a      	adds	r2, r1, #1
 8024c16:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024c1a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024c1e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024c22:	0949      	lsrs	r1, r1, #5
 8024c24:	ea43 030c 	orr.w	r3, r3, ip
 8024c28:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024c2c:	430b      	orrs	r3, r1
 8024c2e:	f8a8 3000 	strh.w	r3, [r8]
 8024c32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024c34:	f108 0802 	add.w	r8, r8, #2
 8024c38:	f109 39ff 	add.w	r9, r9, #4294967295
 8024c3c:	441c      	add	r4, r3
 8024c3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024c40:	441e      	add	r6, r3
 8024c42:	e74a      	b.n	8024ada <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024c44:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024c46:	3d01      	subs	r5, #1
 8024c48:	441c      	add	r4, r3
 8024c4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024c4c:	441e      	add	r6, r3
 8024c4e:	9b07      	ldr	r3, [sp, #28]
 8024c50:	3302      	adds	r3, #2
 8024c52:	9307      	str	r3, [sp, #28]
 8024c54:	e722      	b.n	8024a9c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024c56:	d022      	beq.n	8024c9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024c58:	1e6b      	subs	r3, r5, #1
 8024c5a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024c5c:	fb00 4003 	mla	r0, r0, r3, r4
 8024c60:	1400      	asrs	r0, r0, #16
 8024c62:	f53f af37 	bmi.w	8024ad4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8024c66:	3901      	subs	r1, #1
 8024c68:	4288      	cmp	r0, r1
 8024c6a:	f6bf af33 	bge.w	8024ad4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8024c6e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024c70:	fb01 6303 	mla	r3, r1, r3, r6
 8024c74:	141b      	asrs	r3, r3, #16
 8024c76:	f53f af2d 	bmi.w	8024ad4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8024c7a:	3a01      	subs	r2, #1
 8024c7c:	4293      	cmp	r3, r2
 8024c7e:	f6bf af29 	bge.w	8024ad4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8024c82:	46a8      	mov	r8, r5
 8024c84:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8024c88:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8024c8c:	f1b8 0f00 	cmp.w	r8, #0
 8024c90:	dc60      	bgt.n	8024d54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8024c92:	9b07      	ldr	r3, [sp, #28]
 8024c94:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024c98:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8024c9c:	9307      	str	r3, [sp, #28]
 8024c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	f340 80f8 	ble.w	8024e96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8024ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024caa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024cac:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024cb0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024cb4:	eef0 6a48 	vmov.f32	s13, s16
 8024cb8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024cbc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024cc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024cc4:	ee16 4a90 	vmov	r4, s13
 8024cc8:	eef0 6a68 	vmov.f32	s13, s17
 8024ccc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024cd0:	ee16 6a90 	vmov	r6, s13
 8024cd4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024cd8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024cdc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024ce0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024ce4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024ce8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024cec:	ee18 2a10 	vmov	r2, s16
 8024cf0:	eeb0 8a47 	vmov.f32	s16, s14
 8024cf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8024cf8:	ee18 2a90 	vmov	r2, s17
 8024cfc:	9327      	str	r3, [sp, #156]	; 0x9c
 8024cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024d00:	eef0 8a67 	vmov.f32	s17, s15
 8024d04:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d08:	9328      	str	r3, [sp, #160]	; 0xa0
 8024d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024d0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024d0e:	3b01      	subs	r3, #1
 8024d10:	930a      	str	r3, [sp, #40]	; 0x28
 8024d12:	bf08      	it	eq
 8024d14:	4615      	moveq	r5, r2
 8024d16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024d18:	bf18      	it	ne
 8024d1a:	461d      	movne	r5, r3
 8024d1c:	e6af      	b.n	8024a7e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024d1e:	f111 0a01 	adds.w	sl, r1, #1
 8024d22:	d486      	bmi.n	8024c32 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024d24:	45d6      	cmp	lr, sl
 8024d26:	db84      	blt.n	8024c32 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024d28:	f110 0a01 	adds.w	sl, r0, #1
 8024d2c:	d481      	bmi.n	8024c32 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024d2e:	4553      	cmp	r3, sl
 8024d30:	f6ff af7f 	blt.w	8024c32 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024d34:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024d36:	b21b      	sxth	r3, r3
 8024d38:	9101      	str	r1, [sp, #4]
 8024d3a:	4641      	mov	r1, r8
 8024d3c:	9300      	str	r3, [sp, #0]
 8024d3e:	fa0f f38e 	sxth.w	r3, lr
 8024d42:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8024d46:	e9cd c704 	strd	ip, r7, [sp, #16]
 8024d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024d4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024d4e:	f7ff fd93 	bl	8024878 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8024d52:	e76e      	b.n	8024c32 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024d54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024d56:	1430      	asrs	r0, r6, #16
 8024d58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024d5a:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8024d5e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024d62:	1423      	asrs	r3, r4, #16
 8024d64:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024d68:	fb01 3000 	mla	r0, r1, r0, r3
 8024d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d6e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8024d72:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8024d76:	8858      	ldrh	r0, [r3, #2]
 8024d78:	f1be 0f00 	cmp.w	lr, #0
 8024d7c:	d00b      	beq.n	8024d96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8024d7e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8024d82:	3901      	subs	r1, #1
 8024d84:	0049      	lsls	r1, r1, #1
 8024d86:	3102      	adds	r1, #2
 8024d88:	eb03 0b01 	add.w	fp, r3, r1
 8024d8c:	5a5b      	ldrh	r3, [r3, r1]
 8024d8e:	930e      	str	r3, [sp, #56]	; 0x38
 8024d90:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8024d94:	930f      	str	r3, [sp, #60]	; 0x3c
 8024d96:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8024d9a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024d9e:	fb12 f30e 	smulbb	r3, r2, lr
 8024da2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024da6:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8024daa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024dae:	10db      	asrs	r3, r3, #3
 8024db0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024db4:	ea41 010c 	orr.w	r1, r1, ip
 8024db8:	f1ce 0c10 	rsb	ip, lr, #16
 8024dbc:	ea4b 0000 	orr.w	r0, fp, r0
 8024dc0:	9f08      	ldr	r7, [sp, #32]
 8024dc2:	ebac 0c02 	sub.w	ip, ip, r2
 8024dc6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024dca:	f108 38ff 	add.w	r8, r8, #4294967295
 8024dce:	4350      	muls	r0, r2
 8024dd0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8024dd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024dd6:	fb0c 0c01 	mla	ip, ip, r1, r0
 8024dda:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024ddc:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8024de0:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8024de4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024de6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024dea:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024dee:	0412      	lsls	r2, r2, #16
 8024df0:	ea4b 0101 	orr.w	r1, fp, r1
 8024df4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024df8:	fb03 c101 	mla	r1, r3, r1, ip
 8024dfc:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8024e00:	4302      	orrs	r2, r0
 8024e02:	fb03 1202 	mla	r2, r3, r2, r1
 8024e06:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8024e0a:	0952      	lsrs	r2, r2, #5
 8024e0c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8024e10:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8024e14:	f8b9 2000 	ldrh.w	r2, [r9]
 8024e18:	ea4b 0303 	orr.w	r3, fp, r3
 8024e1c:	1211      	asrs	r1, r2, #8
 8024e1e:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8024e22:	b29b      	uxth	r3, r3
 8024e24:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024e28:	00d2      	lsls	r2, r2, #3
 8024e2a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8024e2e:	fb11 f107 	smulbb	r1, r1, r7
 8024e32:	1218      	asrs	r0, r3, #8
 8024e34:	fb1c fc07 	smulbb	ip, ip, r7
 8024e38:	b2d2      	uxtb	r2, r2
 8024e3a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024e3e:	fb12 f207 	smulbb	r2, r2, r7
 8024e42:	fb00 100a 	mla	r0, r0, sl, r1
 8024e46:	10d9      	asrs	r1, r3, #3
 8024e48:	00db      	lsls	r3, r3, #3
 8024e4a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024e4e:	b280      	uxth	r0, r0
 8024e50:	b2db      	uxtb	r3, r3
 8024e52:	fb01 c10a 	mla	r1, r1, sl, ip
 8024e56:	fb03 230a 	mla	r3, r3, sl, r2
 8024e5a:	1c42      	adds	r2, r0, #1
 8024e5c:	b289      	uxth	r1, r1
 8024e5e:	b29b      	uxth	r3, r3
 8024e60:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024e64:	f101 0c01 	add.w	ip, r1, #1
 8024e68:	1c5a      	adds	r2, r3, #1
 8024e6a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8024e6e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024e72:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024e76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024e78:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024e7c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024e80:	441c      	add	r4, r3
 8024e82:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024e86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024e88:	4310      	orrs	r0, r2
 8024e8a:	441e      	add	r6, r3
 8024e8c:	ea40 000c 	orr.w	r0, r0, ip
 8024e90:	f829 0b02 	strh.w	r0, [r9], #2
 8024e94:	e6fa      	b.n	8024c8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8024e96:	b013      	add	sp, #76	; 0x4c
 8024e98:	ecbd 8b08 	vpop	{d8-d11}
 8024e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024ea0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8024ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024ea4:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8024ea8:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8024eac:	fb06 5c03 	mla	ip, r6, r3, r5
 8024eb0:	2e00      	cmp	r6, #0
 8024eb2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8024eb6:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8024eba:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8024ebe:	8808      	ldrh	r0, [r1, #0]
 8024ec0:	db2e      	blt.n	8024f20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8024ec2:	45b0      	cmp	r8, r6
 8024ec4:	dd2c      	ble.n	8024f20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8024ec6:	2d00      	cmp	r5, #0
 8024ec8:	db28      	blt.n	8024f1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8024eca:	42ab      	cmp	r3, r5
 8024ecc:	dd26      	ble.n	8024f1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8024ece:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8024ed2:	1c6a      	adds	r2, r5, #1
 8024ed4:	d427      	bmi.n	8024f26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8024ed6:	4293      	cmp	r3, r2
 8024ed8:	dd25      	ble.n	8024f26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8024eda:	b324      	cbz	r4, 8024f26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8024edc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8024ee0:	3601      	adds	r6, #1
 8024ee2:	d424      	bmi.n	8024f2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8024ee4:	45b0      	cmp	r8, r6
 8024ee6:	dd22      	ble.n	8024f2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8024ee8:	b31f      	cbz	r7, 8024f32 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8024eea:	2d00      	cmp	r5, #0
 8024eec:	db1d      	blt.n	8024f2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8024eee:	42ab      	cmp	r3, r5
 8024ef0:	dd1b      	ble.n	8024f2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8024ef2:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8024ef6:	3501      	adds	r5, #1
 8024ef8:	d405      	bmi.n	8024f06 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8024efa:	42ab      	cmp	r3, r5
 8024efc:	dd03      	ble.n	8024f06 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8024efe:	b124      	cbz	r4, 8024f0a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8024f00:	3301      	adds	r3, #1
 8024f02:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8024f06:	2c0f      	cmp	r4, #15
 8024f08:	d801      	bhi.n	8024f0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024f0a:	2f0f      	cmp	r7, #15
 8024f0c:	d914      	bls.n	8024f38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8024f0e:	4b27      	ldr	r3, [pc, #156]	; (8024fac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8024f10:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8024f14:	4a26      	ldr	r2, [pc, #152]	; (8024fb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8024f16:	4827      	ldr	r0, [pc, #156]	; (8024fb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8024f18:	f002 fca0 	bl	802785c <__assert_func>
 8024f1c:	4684      	mov	ip, r0
 8024f1e:	e7d8      	b.n	8024ed2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8024f20:	4602      	mov	r2, r0
 8024f22:	4684      	mov	ip, r0
 8024f24:	e7dc      	b.n	8024ee0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8024f26:	4602      	mov	r2, r0
 8024f28:	e7da      	b.n	8024ee0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8024f2a:	4606      	mov	r6, r0
 8024f2c:	e7e3      	b.n	8024ef6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8024f2e:	4606      	mov	r6, r0
 8024f30:	e7e9      	b.n	8024f06 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8024f32:	2c0f      	cmp	r4, #15
 8024f34:	d8eb      	bhi.n	8024f0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024f36:	4606      	mov	r6, r0
 8024f38:	fb14 f307 	smulbb	r3, r4, r7
 8024f3c:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8024f40:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8024f44:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024f48:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8024f4c:	10db      	asrs	r3, r3, #3
 8024f4e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024f52:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024f56:	ea45 0c0c 	orr.w	ip, r5, ip
 8024f5a:	f1c7 0510 	rsb	r5, r7, #16
 8024f5e:	ea4e 0202 	orr.w	r2, lr, r2
 8024f62:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8024f66:	1b2d      	subs	r5, r5, r4
 8024f68:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8024f6c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8024f70:	4354      	muls	r4, r2
 8024f72:	fb05 450c 	mla	r5, r5, ip, r4
 8024f76:	0404      	lsls	r4, r0, #16
 8024f78:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024f7c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024f80:	4320      	orrs	r0, r4
 8024f82:	fb03 5400 	mla	r4, r3, r0, r5
 8024f86:	0430      	lsls	r0, r6, #16
 8024f88:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8024f8c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024f90:	4330      	orrs	r0, r6
 8024f92:	fb07 4000 	mla	r0, r7, r0, r4
 8024f96:	0d43      	lsrs	r3, r0, #21
 8024f98:	0940      	lsrs	r0, r0, #5
 8024f9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024f9e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024fa2:	4318      	orrs	r0, r3
 8024fa4:	8008      	strh	r0, [r1, #0]
 8024fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024faa:	bf00      	nop
 8024fac:	0802bded 	.word	0x0802bded
 8024fb0:	0802c463 	.word	0x0802c463
 8024fb4:	0802be71 	.word	0x0802be71

08024fb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fbc:	ed2d 8b08 	vpush	{d8-d11}
 8024fc0:	b08f      	sub	sp, #60	; 0x3c
 8024fc2:	461d      	mov	r5, r3
 8024fc4:	eeb0 aa40 	vmov.f32	s20, s0
 8024fc8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024fca:	eef0 9a60 	vmov.f32	s19, s1
 8024fce:	9107      	str	r1, [sp, #28]
 8024fd0:	eeb0 9a41 	vmov.f32	s18, s2
 8024fd4:	6859      	ldr	r1, [r3, #4]
 8024fd6:	eeb0 8a62 	vmov.f32	s16, s5
 8024fda:	920c      	str	r2, [sp, #48]	; 0x30
 8024fdc:	eef0 8a43 	vmov.f32	s17, s6
 8024fe0:	681b      	ldr	r3, [r3, #0]
 8024fe2:	eef0 ba44 	vmov.f32	s23, s8
 8024fe6:	eeb0 ba64 	vmov.f32	s22, s9
 8024fea:	900d      	str	r0, [sp, #52]	; 0x34
 8024fec:	eef0 aa45 	vmov.f32	s21, s10
 8024ff0:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8024ff4:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8024ff8:	fb01 2707 	mla	r7, r1, r7, r2
 8024ffc:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8025000:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025002:	f8d3 8000 	ldr.w	r8, [r3]
 8025006:	9b07      	ldr	r3, [sp, #28]
 8025008:	2b00      	cmp	r3, #0
 802500a:	dc03      	bgt.n	8025014 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802500c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802500e:	2b00      	cmp	r3, #0
 8025010:	f340 8182 	ble.w	8025318 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8025014:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025016:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802501a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802501e:	1e48      	subs	r0, r1, #1
 8025020:	f102 3cff 	add.w	ip, r2, #4294967295
 8025024:	2d00      	cmp	r5, #0
 8025026:	f340 809b 	ble.w	8025160 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 802502a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802502e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025032:	d406      	bmi.n	8025042 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025034:	4586      	cmp	lr, r0
 8025036:	da04      	bge.n	8025042 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025038:	2b00      	cmp	r3, #0
 802503a:	db02      	blt.n	8025042 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802503c:	4563      	cmp	r3, ip
 802503e:	f2c0 8090 	blt.w	8025162 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025042:	f11e 0e01 	adds.w	lr, lr, #1
 8025046:	f100 8084 	bmi.w	8025152 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802504a:	4571      	cmp	r1, lr
 802504c:	f2c0 8081 	blt.w	8025152 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025050:	3301      	adds	r3, #1
 8025052:	d47e      	bmi.n	8025152 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025054:	429a      	cmp	r2, r3
 8025056:	db7c      	blt.n	8025152 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025058:	46aa      	mov	sl, r5
 802505a:	46b9      	mov	r9, r7
 802505c:	f1ba 0f00 	cmp.w	sl, #0
 8025060:	f340 8099 	ble.w	8025196 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8025064:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025066:	1421      	asrs	r1, r4, #16
 8025068:	ea4f 4026 	mov.w	r0, r6, asr #16
 802506c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025070:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025074:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025078:	f100 80d1 	bmi.w	802521e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802507c:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025080:	4559      	cmp	r1, fp
 8025082:	f280 80cc 	bge.w	802521e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8025086:	2800      	cmp	r0, #0
 8025088:	f2c0 80c9 	blt.w	802521e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802508c:	f103 3bff 	add.w	fp, r3, #4294967295
 8025090:	4558      	cmp	r0, fp
 8025092:	f280 80c4 	bge.w	802521e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8025096:	fa0f fe8e 	sxth.w	lr, lr
 802509a:	fb00 110e 	mla	r1, r0, lr, r1
 802509e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80250a2:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80250a6:	8841      	ldrh	r1, [r0, #2]
 80250a8:	f1bc 0f00 	cmp.w	ip, #0
 80250ac:	d00b      	beq.n	80250c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80250ae:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80250b2:	3b01      	subs	r3, #1
 80250b4:	005b      	lsls	r3, r3, #1
 80250b6:	3302      	adds	r3, #2
 80250b8:	eb00 0e03 	add.w	lr, r0, r3
 80250bc:	5ac3      	ldrh	r3, [r0, r3]
 80250be:	9308      	str	r3, [sp, #32]
 80250c0:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80250c4:	9309      	str	r3, [sp, #36]	; 0x24
 80250c6:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80250ca:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80250ce:	fb12 f30c 	smulbb	r3, r2, ip
 80250d2:	f1cc 0e10 	rsb	lr, ip, #16
 80250d6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80250da:	10db      	asrs	r3, r3, #3
 80250dc:	ebae 0e02 	sub.w	lr, lr, r2
 80250e0:	ea40 000b 	orr.w	r0, r0, fp
 80250e4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80250e8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80250ec:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80250f0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80250f4:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80250f8:	ea4b 0101 	orr.w	r1, fp, r1
 80250fc:	4351      	muls	r1, r2
 80250fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025100:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025104:	0410      	lsls	r0, r2, #16
 8025106:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802510a:	9908      	ldr	r1, [sp, #32]
 802510c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025110:	4310      	orrs	r0, r2
 8025112:	9a08      	ldr	r2, [sp, #32]
 8025114:	0412      	lsls	r2, r2, #16
 8025116:	fb03 e000 	mla	r0, r3, r0, lr
 802511a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802511e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025122:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025126:	ea42 020e 	orr.w	r2, r2, lr
 802512a:	fb03 0302 	mla	r3, r3, r2, r0
 802512e:	0d5a      	lsrs	r2, r3, #21
 8025130:	095b      	lsrs	r3, r3, #5
 8025132:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025136:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802513a:	4313      	orrs	r3, r2
 802513c:	f8a9 3000 	strh.w	r3, [r9]
 8025140:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025142:	f109 0902 	add.w	r9, r9, #2
 8025146:	f10a 3aff 	add.w	sl, sl, #4294967295
 802514a:	441c      	add	r4, r3
 802514c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802514e:	441e      	add	r6, r3
 8025150:	e784      	b.n	802505c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8025152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025154:	3d01      	subs	r5, #1
 8025156:	3702      	adds	r7, #2
 8025158:	441c      	add	r4, r3
 802515a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802515c:	441e      	add	r6, r3
 802515e:	e761      	b.n	8025024 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025160:	d01d      	beq.n	802519e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025162:	1e6b      	subs	r3, r5, #1
 8025164:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025166:	fb00 4003 	mla	r0, r0, r3, r4
 802516a:	1400      	asrs	r0, r0, #16
 802516c:	f53f af74 	bmi.w	8025058 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025170:	3901      	subs	r1, #1
 8025172:	4288      	cmp	r0, r1
 8025174:	f6bf af70 	bge.w	8025058 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025178:	9924      	ldr	r1, [sp, #144]	; 0x90
 802517a:	fb01 6303 	mla	r3, r1, r3, r6
 802517e:	141b      	asrs	r3, r3, #16
 8025180:	f53f af6a 	bmi.w	8025058 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025184:	3a01      	subs	r2, #1
 8025186:	4293      	cmp	r3, r2
 8025188:	f6bf af66 	bge.w	8025058 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802518c:	46a9      	mov	r9, r5
 802518e:	46ba      	mov	sl, r7
 8025190:	f1b9 0f00 	cmp.w	r9, #0
 8025194:	dc5b      	bgt.n	802524e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8025196:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802519a:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802519e:	9b07      	ldr	r3, [sp, #28]
 80251a0:	2b00      	cmp	r3, #0
 80251a2:	f340 80b9 	ble.w	8025318 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80251a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80251aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80251ac:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80251b0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80251b4:	eef0 6a48 	vmov.f32	s13, s16
 80251b8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80251bc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80251c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80251c4:	ee16 4a90 	vmov	r4, s13
 80251c8:	eef0 6a68 	vmov.f32	s13, s17
 80251cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80251d0:	ee16 6a90 	vmov	r6, s13
 80251d4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80251d8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80251dc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80251e0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80251e4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80251e8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80251ec:	ee18 2a10 	vmov	r2, s16
 80251f0:	eeb0 8a47 	vmov.f32	s16, s14
 80251f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80251f8:	ee18 2a90 	vmov	r2, s17
 80251fc:	9323      	str	r3, [sp, #140]	; 0x8c
 80251fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025200:	eef0 8a67 	vmov.f32	s17, s15
 8025204:	fb92 f3f3 	sdiv	r3, r2, r3
 8025208:	9324      	str	r3, [sp, #144]	; 0x90
 802520a:	9b07      	ldr	r3, [sp, #28]
 802520c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802520e:	3b01      	subs	r3, #1
 8025210:	9307      	str	r3, [sp, #28]
 8025212:	bf08      	it	eq
 8025214:	4615      	moveq	r5, r2
 8025216:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025218:	bf18      	it	ne
 802521a:	461d      	movne	r5, r3
 802521c:	e6f3      	b.n	8025006 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802521e:	f111 0b01 	adds.w	fp, r1, #1
 8025222:	d48d      	bmi.n	8025140 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8025224:	45de      	cmp	lr, fp
 8025226:	db8b      	blt.n	8025140 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8025228:	f110 0b01 	adds.w	fp, r0, #1
 802522c:	d488      	bmi.n	8025140 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802522e:	455b      	cmp	r3, fp
 8025230:	db86      	blt.n	8025140 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8025232:	b21b      	sxth	r3, r3
 8025234:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8025238:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802523c:	9300      	str	r3, [sp, #0]
 802523e:	4642      	mov	r2, r8
 8025240:	fa0f f38e 	sxth.w	r3, lr
 8025244:	4649      	mov	r1, r9
 8025246:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025248:	f7ff fe2a 	bl	8024ea0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802524c:	e778      	b.n	8025140 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802524e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025250:	1420      	asrs	r0, r4, #16
 8025252:	1431      	asrs	r1, r6, #16
 8025254:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8025258:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802525c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025260:	fb03 0101 	mla	r1, r3, r1, r0
 8025264:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8025268:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802526c:	8841      	ldrh	r1, [r0, #2]
 802526e:	f1be 0f00 	cmp.w	lr, #0
 8025272:	d00b      	beq.n	802528c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8025274:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8025278:	3b01      	subs	r3, #1
 802527a:	005b      	lsls	r3, r3, #1
 802527c:	3302      	adds	r3, #2
 802527e:	eb00 0b03 	add.w	fp, r0, r3
 8025282:	5ac3      	ldrh	r3, [r0, r3]
 8025284:	930a      	str	r3, [sp, #40]	; 0x28
 8025286:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802528a:	930b      	str	r3, [sp, #44]	; 0x2c
 802528c:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8025290:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025294:	fb12 f30e 	smulbb	r3, r2, lr
 8025298:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802529c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80252a0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80252a4:	10db      	asrs	r3, r3, #3
 80252a6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80252aa:	ea40 000c 	orr.w	r0, r0, ip
 80252ae:	f1ce 0c10 	rsb	ip, lr, #16
 80252b2:	ea4b 0101 	orr.w	r1, fp, r1
 80252b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80252ba:	ebac 0c02 	sub.w	ip, ip, r2
 80252be:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80252c2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80252c6:	4351      	muls	r1, r2
 80252c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80252ca:	fb0c 1c00 	mla	ip, ip, r0, r1
 80252ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80252d0:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80252d4:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80252d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80252da:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80252de:	0412      	lsls	r2, r2, #16
 80252e0:	ea4b 0000 	orr.w	r0, fp, r0
 80252e4:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80252e8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80252ec:	fb03 c000 	mla	r0, r3, r0, ip
 80252f0:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80252f4:	ea42 0b0b 	orr.w	fp, r2, fp
 80252f8:	fb03 000b 	mla	r0, r3, fp, r0
 80252fc:	0d43      	lsrs	r3, r0, #21
 80252fe:	0940      	lsrs	r0, r0, #5
 8025300:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025304:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025308:	4318      	orrs	r0, r3
 802530a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802530c:	441c      	add	r4, r3
 802530e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025310:	f82a 0b02 	strh.w	r0, [sl], #2
 8025314:	441e      	add	r6, r3
 8025316:	e73b      	b.n	8025190 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8025318:	b00f      	add	sp, #60	; 0x3c
 802531a:	ecbd 8b08 	vpop	{d8-d11}
 802531e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025324 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8025324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025328:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 802532c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8025330:	fb04 5603 	mla	r6, r4, r3, r5
 8025334:	2c00      	cmp	r4, #0
 8025336:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802533a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802533e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8025342:	db36      	blt.n	80253b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8025344:	45a6      	cmp	lr, r4
 8025346:	dd34      	ble.n	80253b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8025348:	2d00      	cmp	r5, #0
 802534a:	db30      	blt.n	80253ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 802534c:	42ab      	cmp	r3, r5
 802534e:	dd2e      	ble.n	80253ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8025350:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8025354:	1c6e      	adds	r6, r5, #1
 8025356:	d42f      	bmi.n	80253b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8025358:	42b3      	cmp	r3, r6
 802535a:	dd2d      	ble.n	80253b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 802535c:	b370      	cbz	r0, 80253bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802535e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8025362:	3401      	adds	r4, #1
 8025364:	d42e      	bmi.n	80253c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8025366:	45a6      	cmp	lr, r4
 8025368:	dd2c      	ble.n	80253c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 802536a:	b377      	cbz	r7, 80253ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 802536c:	2d00      	cmp	r5, #0
 802536e:	db27      	blt.n	80253c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8025370:	42ab      	cmp	r3, r5
 8025372:	dd25      	ble.n	80253c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8025374:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8025378:	3501      	adds	r5, #1
 802537a:	d429      	bmi.n	80253d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 802537c:	42ab      	cmp	r3, r5
 802537e:	dd27      	ble.n	80253d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8025380:	b340      	cbz	r0, 80253d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8025382:	3301      	adds	r3, #1
 8025384:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8025388:	280f      	cmp	r0, #15
 802538a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802538e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025392:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025396:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802539a:	d801      	bhi.n	80253a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 802539c:	2f0f      	cmp	r7, #15
 802539e:	d91b      	bls.n	80253d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 80253a0:	4b8d      	ldr	r3, [pc, #564]	; (80255d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 80253a2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80253a6:	4a8d      	ldr	r2, [pc, #564]	; (80255dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 80253a8:	488d      	ldr	r0, [pc, #564]	; (80255e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 80253aa:	f002 fa57 	bl	802785c <__assert_func>
 80253ae:	2200      	movs	r2, #0
 80253b0:	e7d0      	b.n	8025354 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 80253b2:	2600      	movs	r6, #0
 80253b4:	4632      	mov	r2, r6
 80253b6:	e7d4      	b.n	8025362 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80253b8:	2600      	movs	r6, #0
 80253ba:	e7d2      	b.n	8025362 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80253bc:	4606      	mov	r6, r0
 80253be:	e7d0      	b.n	8025362 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80253c0:	2400      	movs	r4, #0
 80253c2:	e7d9      	b.n	8025378 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 80253c4:	2300      	movs	r3, #0
 80253c6:	461c      	mov	r4, r3
 80253c8:	e7de      	b.n	8025388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80253ca:	463b      	mov	r3, r7
 80253cc:	463c      	mov	r4, r7
 80253ce:	e7db      	b.n	8025388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80253d0:	2300      	movs	r3, #0
 80253d2:	e7d9      	b.n	8025388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80253d4:	4603      	mov	r3, r0
 80253d6:	e7d7      	b.n	8025388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80253d8:	b280      	uxth	r0, r0
 80253da:	b2bf      	uxth	r7, r7
 80253dc:	fb07 fe00 	mul.w	lr, r7, r0
 80253e0:	0100      	lsls	r0, r0, #4
 80253e2:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80253e6:	eba0 0c0e 	sub.w	ip, r0, lr
 80253ea:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80253ee:	b2bf      	uxth	r7, r7
 80253f0:	fa1f fc8c 	uxth.w	ip, ip
 80253f4:	1bed      	subs	r5, r5, r7
 80253f6:	fb0a f00c 	mul.w	r0, sl, ip
 80253fa:	b2ad      	uxth	r5, r5
 80253fc:	fb0b 0005 	mla	r0, fp, r5, r0
 8025400:	fb07 0009 	mla	r0, r7, r9, r0
 8025404:	fb0e 0008 	mla	r0, lr, r8, r0
 8025408:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802540c:	9001      	str	r0, [sp, #4]
 802540e:	2800      	cmp	r0, #0
 8025410:	f000 80de 	beq.w	80255d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8025414:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8025418:	d018      	beq.n	802544c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 802541a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802541e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025422:	fb0b f000 	mul.w	r0, fp, r0
 8025426:	fb0b fb02 	mul.w	fp, fp, r2
 802542a:	0a02      	lsrs	r2, r0, #8
 802542c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025430:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025434:	4402      	add	r2, r0
 8025436:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802543a:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802543e:	0a12      	lsrs	r2, r2, #8
 8025440:	0a00      	lsrs	r0, r0, #8
 8025442:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025446:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802544a:	4302      	orrs	r2, r0
 802544c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8025450:	d01a      	beq.n	8025488 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 8025452:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8025456:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802545a:	fb0a f000 	mul.w	r0, sl, r0
 802545e:	fb0a fa06 	mul.w	sl, sl, r6
 8025462:	0a06      	lsrs	r6, r0, #8
 8025464:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025468:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802546c:	4406      	add	r6, r0
 802546e:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8025472:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8025476:	0a36      	lsrs	r6, r6, #8
 8025478:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802547c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025480:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025484:	ea46 060a 	orr.w	r6, r6, sl
 8025488:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802548c:	d01b      	beq.n	80254c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 802548e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8025492:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025496:	fb09 fa0a 	mul.w	sl, r9, sl
 802549a:	fb09 f004 	mul.w	r0, r9, r4
 802549e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80254a2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80254a6:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80254aa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80254ae:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80254b2:	4454      	add	r4, sl
 80254b4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80254b8:	0a24      	lsrs	r4, r4, #8
 80254ba:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80254be:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80254c2:	ea44 0409 	orr.w	r4, r4, r9
 80254c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80254ca:	d01b      	beq.n	8025504 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 80254cc:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80254d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80254d4:	fb08 f909 	mul.w	r9, r8, r9
 80254d8:	fb08 f003 	mul.w	r0, r8, r3
 80254dc:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80254e0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80254e4:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80254e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80254ec:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80254f0:	444b      	add	r3, r9
 80254f2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80254f6:	0a1b      	lsrs	r3, r3, #8
 80254f8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80254fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025500:	ea43 0308 	orr.w	r3, r3, r8
 8025504:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025508:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802550c:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8025510:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025514:	fb0c f808 	mul.w	r8, ip, r8
 8025518:	8808      	ldrh	r0, [r1, #0]
 802551a:	fb0c f606 	mul.w	r6, ip, r6
 802551e:	fb05 8909 	mla	r9, r5, r9, r8
 8025522:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8025526:	fb05 6502 	mla	r5, r5, r2, r6
 802552a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802552e:	fb07 9908 	mla	r9, r7, r8, r9
 8025532:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8025536:	fb07 5704 	mla	r7, r7, r4, r5
 802553a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802553e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025542:	b2b6      	uxth	r6, r6
 8025544:	fb0e 9808 	mla	r8, lr, r8, r9
 8025548:	9a01      	ldr	r2, [sp, #4]
 802554a:	fb0e 7e03 	mla	lr, lr, r3, r7
 802554e:	1205      	asrs	r5, r0, #8
 8025550:	4372      	muls	r2, r6
 8025552:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025556:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802555a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802555e:	1c53      	adds	r3, r2, #1
 8025560:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8025564:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025568:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802556c:	ea48 0e0e 	orr.w	lr, r8, lr
 8025570:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8025574:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8025578:	f3ce 2407 	ubfx	r4, lr, #8, #8
 802557c:	b2db      	uxtb	r3, r3
 802557e:	fb12 f206 	smulbb	r2, r2, r6
 8025582:	fa5f fe8e 	uxtb.w	lr, lr
 8025586:	fb14 f406 	smulbb	r4, r4, r6
 802558a:	fb05 2503 	mla	r5, r5, r3, r2
 802558e:	10c2      	asrs	r2, r0, #3
 8025590:	fb1e fe06 	smulbb	lr, lr, r6
 8025594:	00c0      	lsls	r0, r0, #3
 8025596:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802559a:	b2ad      	uxth	r5, r5
 802559c:	b2c0      	uxtb	r0, r0
 802559e:	fb02 4203 	mla	r2, r2, r3, r4
 80255a2:	fb00 e303 	mla	r3, r0, r3, lr
 80255a6:	b294      	uxth	r4, r2
 80255a8:	b298      	uxth	r0, r3
 80255aa:	1c6b      	adds	r3, r5, #1
 80255ac:	1c62      	adds	r2, r4, #1
 80255ae:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80255b2:	1c43      	adds	r3, r0, #1
 80255b4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80255b8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80255bc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80255c0:	0952      	lsrs	r2, r2, #5
 80255c2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80255c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80255ca:	432b      	orrs	r3, r5
 80255cc:	4313      	orrs	r3, r2
 80255ce:	800b      	strh	r3, [r1, #0]
 80255d0:	b003      	add	sp, #12
 80255d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255d6:	bf00      	nop
 80255d8:	0802bded 	.word	0x0802bded
 80255dc:	0802c3ba 	.word	0x0802c3ba
 80255e0:	0802be71 	.word	0x0802be71

080255e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80255e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255e8:	ed2d 8b08 	vpush	{d8-d11}
 80255ec:	b09d      	sub	sp, #116	; 0x74
 80255ee:	eeb0 aa40 	vmov.f32	s20, s0
 80255f2:	eef0 9a60 	vmov.f32	s19, s1
 80255f6:	9219      	str	r2, [sp, #100]	; 0x64
 80255f8:	eeb0 9a41 	vmov.f32	s18, s2
 80255fc:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80255fe:	eeb0 8a62 	vmov.f32	s16, s5
 8025602:	9307      	str	r3, [sp, #28]
 8025604:	eef0 8a43 	vmov.f32	s17, s6
 8025608:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 802560c:	eef0 ba44 	vmov.f32	s23, s8
 8025610:	901b      	str	r0, [sp, #108]	; 0x6c
 8025612:	eeb0 ba64 	vmov.f32	s22, s9
 8025616:	931a      	str	r3, [sp, #104]	; 0x68
 8025618:	eef0 aa45 	vmov.f32	s21, s10
 802561c:	6850      	ldr	r0, [r2, #4]
 802561e:	9117      	str	r1, [sp, #92]	; 0x5c
 8025620:	6812      	ldr	r2, [r2, #0]
 8025622:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8025626:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 802562a:	fb00 1303 	mla	r3, r0, r3, r1
 802562e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025632:	930a      	str	r3, [sp, #40]	; 0x28
 8025634:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8025636:	681b      	ldr	r3, [r3, #0]
 8025638:	9310      	str	r3, [sp, #64]	; 0x40
 802563a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 802563e:	930b      	str	r3, [sp, #44]	; 0x2c
 8025640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025642:	2b00      	cmp	r3, #0
 8025644:	dc03      	bgt.n	802564e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025646:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025648:	2b00      	cmp	r3, #0
 802564a:	f340 8375 	ble.w	8025d38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 802564e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8025650:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025654:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025658:	1e48      	subs	r0, r1, #1
 802565a:	1e57      	subs	r7, r2, #1
 802565c:	9b07      	ldr	r3, [sp, #28]
 802565e:	2b00      	cmp	r3, #0
 8025660:	f340 818e 	ble.w	8025980 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025664:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025668:	ea4f 4326 	mov.w	r3, r6, asr #16
 802566c:	d406      	bmi.n	802567c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802566e:	4584      	cmp	ip, r0
 8025670:	da04      	bge.n	802567c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025672:	2b00      	cmp	r3, #0
 8025674:	db02      	blt.n	802567c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025676:	42bb      	cmp	r3, r7
 8025678:	f2c0 8183 	blt.w	8025982 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802567c:	f11c 0c01 	adds.w	ip, ip, #1
 8025680:	f100 8173 	bmi.w	802596a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8025684:	4561      	cmp	r1, ip
 8025686:	f2c0 8170 	blt.w	802596a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802568a:	3301      	adds	r3, #1
 802568c:	f100 816d 	bmi.w	802596a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8025690:	429a      	cmp	r2, r3
 8025692:	f2c0 816a 	blt.w	802596a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8025696:	9b07      	ldr	r3, [sp, #28]
 8025698:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802569a:	9318      	str	r3, [sp, #96]	; 0x60
 802569c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802569e:	2b00      	cmp	r3, #0
 80256a0:	f340 818c 	ble.w	80259bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 80256a4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80256a6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80256aa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80256ac:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80256b0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80256b4:	1422      	asrs	r2, r4, #16
 80256b6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80256ba:	689b      	ldr	r3, [r3, #8]
 80256bc:	f100 81cd 	bmi.w	8025a5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80256c0:	f103 38ff 	add.w	r8, r3, #4294967295
 80256c4:	4542      	cmp	r2, r8
 80256c6:	f280 81c8 	bge.w	8025a5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80256ca:	f1bc 0f00 	cmp.w	ip, #0
 80256ce:	f2c0 81c4 	blt.w	8025a5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80256d2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80256d6:	45c4      	cmp	ip, r8
 80256d8:	f280 81bf 	bge.w	8025a5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80256dc:	b21b      	sxth	r3, r3
 80256de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80256e0:	fb0c 2203 	mla	r2, ip, r3, r2
 80256e4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80256e8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80256ec:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80256f0:	2800      	cmp	r0, #0
 80256f2:	f000 81a9 	beq.w	8025a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 80256f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80256fa:	950c      	str	r5, [sp, #48]	; 0x30
 80256fc:	0e2d      	lsrs	r5, r5, #24
 80256fe:	9513      	str	r5, [sp, #76]	; 0x4c
 8025700:	b181      	cbz	r1, 8025724 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025702:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025706:	3b01      	subs	r3, #1
 8025708:	009b      	lsls	r3, r3, #2
 802570a:	3304      	adds	r3, #4
 802570c:	eb08 0c03 	add.w	ip, r8, r3
 8025710:	f858 3003 	ldr.w	r3, [r8, r3]
 8025714:	9308      	str	r3, [sp, #32]
 8025716:	0e1b      	lsrs	r3, r3, #24
 8025718:	9311      	str	r3, [sp, #68]	; 0x44
 802571a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802571e:	930d      	str	r3, [sp, #52]	; 0x34
 8025720:	0e1b      	lsrs	r3, r3, #24
 8025722:	9314      	str	r3, [sp, #80]	; 0x50
 8025724:	b280      	uxth	r0, r0
 8025726:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025728:	b289      	uxth	r1, r1
 802572a:	fb00 f901 	mul.w	r9, r0, r1
 802572e:	0100      	lsls	r0, r0, #4
 8025730:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025734:	eba0 0809 	sub.w	r8, r0, r9
 8025738:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802573c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802573e:	b289      	uxth	r1, r1
 8025740:	fa1f f888 	uxth.w	r8, r8
 8025744:	1a5b      	subs	r3, r3, r1
 8025746:	fb08 f000 	mul.w	r0, r8, r0
 802574a:	b29b      	uxth	r3, r3
 802574c:	fb03 000e 	mla	r0, r3, lr, r0
 8025750:	fb01 0005 	mla	r0, r1, r5, r0
 8025754:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025756:	fb09 0005 	mla	r0, r9, r5, r0
 802575a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802575e:	2800      	cmp	r0, #0
 8025760:	f000 80fa 	beq.w	8025958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025764:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025768:	d01b      	beq.n	80257a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802576a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802576e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025772:	fb0e fa0a 	mul.w	sl, lr, sl
 8025776:	fb0e fe02 	mul.w	lr, lr, r2
 802577a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802577e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025782:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025786:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802578a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802578e:	4452      	add	r2, sl
 8025790:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025794:	0a12      	lsrs	r2, r2, #8
 8025796:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802579a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802579e:	ea42 020c 	orr.w	r2, r2, ip
 80257a2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80257a4:	2dff      	cmp	r5, #255	; 0xff
 80257a6:	d021      	beq.n	80257ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80257a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80257aa:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80257ae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80257b0:	fb05 fb0b 	mul.w	fp, r5, fp
 80257b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80257b6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80257ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80257bc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80257c0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80257c4:	fb05 fa0a 	mul.w	sl, r5, sl
 80257c8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80257cc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80257d0:	44de      	add	lr, fp
 80257d2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80257d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80257da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80257e2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80257e6:	ea4e 050a 	orr.w	r5, lr, sl
 80257ea:	950c      	str	r5, [sp, #48]	; 0x30
 80257ec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80257ee:	2dff      	cmp	r5, #255	; 0xff
 80257f0:	d021      	beq.n	8025836 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80257f2:	9d08      	ldr	r5, [sp, #32]
 80257f4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80257f8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80257fa:	fb05 fb0b 	mul.w	fp, r5, fp
 80257fe:	9d08      	ldr	r5, [sp, #32]
 8025800:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025804:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025806:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802580a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802580e:	fb05 fa0a 	mul.w	sl, r5, sl
 8025812:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025816:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802581a:	44de      	add	lr, fp
 802581c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025820:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025824:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025828:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802582c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025830:	ea4e 050a 	orr.w	r5, lr, sl
 8025834:	9508      	str	r5, [sp, #32]
 8025836:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025838:	2dff      	cmp	r5, #255	; 0xff
 802583a:	d021      	beq.n	8025880 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802583c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802583e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025842:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025844:	fb05 fb0b 	mul.w	fp, r5, fp
 8025848:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802584a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802584e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025850:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025854:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025858:	fb05 fa0a 	mul.w	sl, r5, sl
 802585c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025860:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025864:	44de      	add	lr, fp
 8025866:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802586a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802586e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025872:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025876:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802587a:	ea4e 050a 	orr.w	r5, lr, sl
 802587e:	950d      	str	r5, [sp, #52]	; 0x34
 8025880:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025882:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025886:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802588a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802588e:	9d08      	ldr	r5, [sp, #32]
 8025890:	fb08 fc0c 	mul.w	ip, r8, ip
 8025894:	fb03 cc0e 	mla	ip, r3, lr, ip
 8025898:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802589c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802589e:	fb01 cc0e 	mla	ip, r1, lr, ip
 80258a2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80258a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80258a8:	fb09 cc0e 	mla	ip, r9, lr, ip
 80258ac:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80258b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80258b2:	fb08 f80e 	mul.w	r8, r8, lr
 80258b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80258ba:	fb03 8202 	mla	r2, r3, r2, r8
 80258be:	9b08      	ldr	r3, [sp, #32]
 80258c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80258c4:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80258c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80258ca:	fb01 220a 	mla	r2, r1, sl, r2
 80258ce:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80258d2:	883b      	ldrh	r3, [r7, #0]
 80258d4:	fb09 2901 	mla	r9, r9, r1, r2
 80258d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80258da:	1219      	asrs	r1, r3, #8
 80258dc:	4342      	muls	r2, r0
 80258de:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80258e2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80258e6:	1c50      	adds	r0, r2, #1
 80258e8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80258ec:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80258f0:	ea4c 0c09 	orr.w	ip, ip, r9
 80258f4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80258f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80258fc:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025900:	fa5f fc8c 	uxtb.w	ip, ip
 8025904:	fb12 f205 	smulbb	r2, r2, r5
 8025908:	b2c0      	uxtb	r0, r0
 802590a:	fb1c fc05 	smulbb	ip, ip, r5
 802590e:	fb01 2100 	mla	r1, r1, r0, r2
 8025912:	10da      	asrs	r2, r3, #3
 8025914:	fb1e fe05 	smulbb	lr, lr, r5
 8025918:	00db      	lsls	r3, r3, #3
 802591a:	b289      	uxth	r1, r1
 802591c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025920:	b2db      	uxtb	r3, r3
 8025922:	fb02 e200 	mla	r2, r2, r0, lr
 8025926:	fb03 c300 	mla	r3, r3, r0, ip
 802592a:	b292      	uxth	r2, r2
 802592c:	fa1f fc83 	uxth.w	ip, r3
 8025930:	1c4b      	adds	r3, r1, #1
 8025932:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025936:	f10c 0301 	add.w	r3, ip, #1
 802593a:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802593e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8025942:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025946:	430b      	orrs	r3, r1
 8025948:	1c51      	adds	r1, r2, #1
 802594a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802594e:	0952      	lsrs	r2, r2, #5
 8025950:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025954:	4313      	orrs	r3, r2
 8025956:	803b      	strh	r3, [r7, #0]
 8025958:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802595a:	3702      	adds	r7, #2
 802595c:	441c      	add	r4, r3
 802595e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025960:	441e      	add	r6, r3
 8025962:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025964:	3b01      	subs	r3, #1
 8025966:	9318      	str	r3, [sp, #96]	; 0x60
 8025968:	e698      	b.n	802569c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802596a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802596c:	441c      	add	r4, r3
 802596e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025970:	441e      	add	r6, r3
 8025972:	9b07      	ldr	r3, [sp, #28]
 8025974:	3b01      	subs	r3, #1
 8025976:	9307      	str	r3, [sp, #28]
 8025978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802597a:	3302      	adds	r3, #2
 802597c:	930a      	str	r3, [sp, #40]	; 0x28
 802597e:	e66d      	b.n	802565c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025980:	d023      	beq.n	80259ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8025982:	9b07      	ldr	r3, [sp, #28]
 8025984:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8025986:	3b01      	subs	r3, #1
 8025988:	fb00 4003 	mla	r0, r0, r3, r4
 802598c:	1400      	asrs	r0, r0, #16
 802598e:	f53f ae82 	bmi.w	8025696 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025992:	3901      	subs	r1, #1
 8025994:	4288      	cmp	r0, r1
 8025996:	f6bf ae7e 	bge.w	8025696 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802599a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 802599c:	fb01 6303 	mla	r3, r1, r3, r6
 80259a0:	141b      	asrs	r3, r3, #16
 80259a2:	f53f ae78 	bmi.w	8025696 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80259a6:	3a01      	subs	r2, #1
 80259a8:	4293      	cmp	r3, r2
 80259aa:	f6bf ae74 	bge.w	8025696 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80259ae:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80259b2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80259b6:	f1bb 0f00 	cmp.w	fp, #0
 80259ba:	dc6c      	bgt.n	8025a96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 80259bc:	9b07      	ldr	r3, [sp, #28]
 80259be:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80259c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80259c4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80259c8:	930a      	str	r3, [sp, #40]	; 0x28
 80259ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80259cc:	2b00      	cmp	r3, #0
 80259ce:	f340 81b3 	ble.w	8025d38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 80259d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80259d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80259d8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80259dc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80259e0:	eef0 6a48 	vmov.f32	s13, s16
 80259e4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80259e8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80259ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80259f0:	ee16 4a90 	vmov	r4, s13
 80259f4:	eef0 6a68 	vmov.f32	s13, s17
 80259f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80259fc:	ee16 6a90 	vmov	r6, s13
 8025a00:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025a04:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025a08:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025a0c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025a10:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025a14:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025a18:	ee18 2a10 	vmov	r2, s16
 8025a1c:	eeb0 8a47 	vmov.f32	s16, s14
 8025a20:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a24:	ee18 2a90 	vmov	r2, s17
 8025a28:	9331      	str	r3, [sp, #196]	; 0xc4
 8025a2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025a2c:	eef0 8a67 	vmov.f32	s17, s15
 8025a30:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a34:	9332      	str	r3, [sp, #200]	; 0xc8
 8025a36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025a38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8025a3a:	3b01      	subs	r3, #1
 8025a3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8025a3e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025a40:	bf08      	it	eq
 8025a42:	4613      	moveq	r3, r2
 8025a44:	9307      	str	r3, [sp, #28]
 8025a46:	e5fb      	b.n	8025640 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8025a48:	2900      	cmp	r1, #0
 8025a4a:	f43f ae6b 	beq.w	8025724 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025a4e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8025a52:	9308      	str	r3, [sp, #32]
 8025a54:	0e1b      	lsrs	r3, r3, #24
 8025a56:	9311      	str	r3, [sp, #68]	; 0x44
 8025a58:	e664      	b.n	8025724 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025a5a:	f112 0801 	adds.w	r8, r2, #1
 8025a5e:	f53f af7b 	bmi.w	8025958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025a62:	4543      	cmp	r3, r8
 8025a64:	f6ff af78 	blt.w	8025958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025a68:	f11c 0801 	adds.w	r8, ip, #1
 8025a6c:	f53f af74 	bmi.w	8025958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025a70:	45c6      	cmp	lr, r8
 8025a72:	f6ff af71 	blt.w	8025958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025a76:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8025a78:	b21b      	sxth	r3, r3
 8025a7a:	9201      	str	r2, [sp, #4]
 8025a7c:	fa0f f28e 	sxth.w	r2, lr
 8025a80:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8025a84:	e9cd c002 	strd	ip, r0, [sp, #8]
 8025a88:	9200      	str	r2, [sp, #0]
 8025a8a:	4639      	mov	r1, r7
 8025a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025a8e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025a90:	f7ff fc48 	bl	8025324 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8025a94:	e760      	b.n	8025958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025a96:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8025a98:	1427      	asrs	r7, r4, #16
 8025a9a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025a9c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025aa0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025aa4:	1433      	asrs	r3, r6, #16
 8025aa6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025aaa:	fb01 7303 	mla	r3, r1, r3, r7
 8025aae:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8025ab2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8025ab6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025aba:	2a00      	cmp	r2, #0
 8025abc:	f000 8133 	beq.w	8025d26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8025ac0:	687d      	ldr	r5, [r7, #4]
 8025ac2:	950e      	str	r5, [sp, #56]	; 0x38
 8025ac4:	0e2d      	lsrs	r5, r5, #24
 8025ac6:	9515      	str	r5, [sp, #84]	; 0x54
 8025ac8:	b178      	cbz	r0, 8025aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8025aca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8025ace:	3901      	subs	r1, #1
 8025ad0:	0089      	lsls	r1, r1, #2
 8025ad2:	3104      	adds	r1, #4
 8025ad4:	eb07 0e01 	add.w	lr, r7, r1
 8025ad8:	5879      	ldr	r1, [r7, r1]
 8025ada:	9109      	str	r1, [sp, #36]	; 0x24
 8025adc:	0e09      	lsrs	r1, r1, #24
 8025ade:	9112      	str	r1, [sp, #72]	; 0x48
 8025ae0:	f8de 1004 	ldr.w	r1, [lr, #4]
 8025ae4:	910f      	str	r1, [sp, #60]	; 0x3c
 8025ae6:	0e09      	lsrs	r1, r1, #24
 8025ae8:	9116      	str	r1, [sp, #88]	; 0x58
 8025aea:	b292      	uxth	r2, r2
 8025aec:	9915      	ldr	r1, [sp, #84]	; 0x54
 8025aee:	b280      	uxth	r0, r0
 8025af0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025af2:	fb02 f800 	mul.w	r8, r2, r0
 8025af6:	0112      	lsls	r2, r2, #4
 8025af8:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025afc:	eba2 0e08 	sub.w	lr, r2, r8
 8025b00:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025b04:	b280      	uxth	r0, r0
 8025b06:	fa1f fe8e 	uxth.w	lr, lr
 8025b0a:	1a12      	subs	r2, r2, r0
 8025b0c:	fb0e f101 	mul.w	r1, lr, r1
 8025b10:	b292      	uxth	r2, r2
 8025b12:	fb02 110c 	mla	r1, r2, ip, r1
 8025b16:	fb00 1105 	mla	r1, r0, r5, r1
 8025b1a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025b1c:	fb08 1105 	mla	r1, r8, r5, r1
 8025b20:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025b24:	2900      	cmp	r1, #0
 8025b26:	f000 80f5 	beq.w	8025d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8025b2a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025b2e:	d019      	beq.n	8025b64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8025b30:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025b34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b38:	fb0c fa0a 	mul.w	sl, ip, sl
 8025b3c:	fb0c fc03 	mul.w	ip, ip, r3
 8025b40:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025b44:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025b48:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025b4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025b50:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025b54:	4453      	add	r3, sl
 8025b56:	0a3f      	lsrs	r7, r7, #8
 8025b58:	0a1b      	lsrs	r3, r3, #8
 8025b5a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025b5e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025b62:	433b      	orrs	r3, r7
 8025b64:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025b66:	2dff      	cmp	r5, #255	; 0xff
 8025b68:	d020      	beq.n	8025bac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8025b6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025b6c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025b70:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025b72:	436f      	muls	r7, r5
 8025b74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025b76:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025b7a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025b7e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025b80:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025b84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b88:	fb05 fa0a 	mul.w	sl, r5, sl
 8025b8c:	44bc      	add	ip, r7
 8025b8e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025b92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b96:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025b9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ba2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ba6:	ea4c 050a 	orr.w	r5, ip, sl
 8025baa:	950e      	str	r5, [sp, #56]	; 0x38
 8025bac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025bae:	2dff      	cmp	r5, #255	; 0xff
 8025bb0:	d020      	beq.n	8025bf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8025bb2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025bb4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025bb8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025bba:	436f      	muls	r7, r5
 8025bbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025bbe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025bc2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025bc6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025bc8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025bcc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025bd0:	fb05 fa0a 	mul.w	sl, r5, sl
 8025bd4:	44bc      	add	ip, r7
 8025bd6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025bda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025bde:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025be2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025be6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025bea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025bee:	ea4c 050a 	orr.w	r5, ip, sl
 8025bf2:	9509      	str	r5, [sp, #36]	; 0x24
 8025bf4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025bf6:	2dff      	cmp	r5, #255	; 0xff
 8025bf8:	d020      	beq.n	8025c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8025bfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025bfc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025c00:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025c02:	436f      	muls	r7, r5
 8025c04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025c06:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025c0a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025c0e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025c10:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025c14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c18:	fb05 fa0a 	mul.w	sl, r5, sl
 8025c1c:	44bc      	add	ip, r7
 8025c1e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025c22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c26:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025c2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025c32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025c36:	ea4c 050a 	orr.w	r5, ip, sl
 8025c3a:	950f      	str	r5, [sp, #60]	; 0x3c
 8025c3c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025c3e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025c42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c46:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025c4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025c4c:	fb0e f707 	mul.w	r7, lr, r7
 8025c50:	fb02 770c 	mla	r7, r2, ip, r7
 8025c54:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025c58:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025c5a:	fb00 770c 	mla	r7, r0, ip, r7
 8025c5e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025c62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025c64:	fb08 770c 	mla	r7, r8, ip, r7
 8025c68:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8025c6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025c6e:	fb0e fe0c 	mul.w	lr, lr, ip
 8025c72:	0a3f      	lsrs	r7, r7, #8
 8025c74:	fb02 e303 	mla	r3, r2, r3, lr
 8025c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025c7a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025c7e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025c82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025c84:	fb00 330a 	mla	r3, r0, sl, r3
 8025c88:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025c8c:	f8b9 0000 	ldrh.w	r0, [r9]
 8025c90:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025c96:	1202      	asrs	r2, r0, #8
 8025c98:	4359      	muls	r1, r3
 8025c9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c9e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025ca2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025ca6:	1c4b      	adds	r3, r1, #1
 8025ca8:	ea47 070c 	orr.w	r7, r7, ip
 8025cac:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025cb0:	0c3b      	lsrs	r3, r7, #16
 8025cb2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025cb6:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025cba:	b2ff      	uxtb	r7, r7
 8025cbc:	fb13 f305 	smulbb	r3, r3, r5
 8025cc0:	b2c9      	uxtb	r1, r1
 8025cc2:	fb17 f705 	smulbb	r7, r7, r5
 8025cc6:	fb02 3201 	mla	r2, r2, r1, r3
 8025cca:	10c3      	asrs	r3, r0, #3
 8025ccc:	fb1c fc05 	smulbb	ip, ip, r5
 8025cd0:	00c0      	lsls	r0, r0, #3
 8025cd2:	b292      	uxth	r2, r2
 8025cd4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025cd8:	b2c0      	uxtb	r0, r0
 8025cda:	fb03 c301 	mla	r3, r3, r1, ip
 8025cde:	fb00 7001 	mla	r0, r0, r1, r7
 8025ce2:	1c51      	adds	r1, r2, #1
 8025ce4:	b29b      	uxth	r3, r3
 8025ce6:	b280      	uxth	r0, r0
 8025ce8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025cec:	f100 0c01 	add.w	ip, r0, #1
 8025cf0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8025cf4:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8025cf8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8025d00:	f103 0c01 	add.w	ip, r3, #1
 8025d04:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025d08:	095b      	lsrs	r3, r3, #5
 8025d0a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025d0e:	431a      	orrs	r2, r3
 8025d10:	f8a9 2000 	strh.w	r2, [r9]
 8025d14:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8025d16:	f109 0902 	add.w	r9, r9, #2
 8025d1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025d1e:	441c      	add	r4, r3
 8025d20:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025d22:	441e      	add	r6, r3
 8025d24:	e647      	b.n	80259b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8025d26:	2800      	cmp	r0, #0
 8025d28:	f43f aedf 	beq.w	8025aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8025d2c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8025d30:	9109      	str	r1, [sp, #36]	; 0x24
 8025d32:	0e09      	lsrs	r1, r1, #24
 8025d34:	9112      	str	r1, [sp, #72]	; 0x48
 8025d36:	e6d8      	b.n	8025aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8025d38:	b01d      	add	sp, #116	; 0x74
 8025d3a:	ecbd 8b08 	vpop	{d8-d11}
 8025d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025d44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8025d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d48:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8025d4c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8025d50:	fb04 5603 	mla	r6, r4, r3, r5
 8025d54:	2c00      	cmp	r4, #0
 8025d56:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8025d5a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8025d5e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8025d62:	db37      	blt.n	8025dd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8025d64:	45a6      	cmp	lr, r4
 8025d66:	dd35      	ble.n	8025dd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8025d68:	2d00      	cmp	r5, #0
 8025d6a:	db31      	blt.n	8025dd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8025d6c:	42ab      	cmp	r3, r5
 8025d6e:	dd2f      	ble.n	8025dd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8025d70:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8025d74:	1c6e      	adds	r6, r5, #1
 8025d76:	d430      	bmi.n	8025dda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8025d78:	42b3      	cmp	r3, r6
 8025d7a:	dd2e      	ble.n	8025dda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8025d7c:	b378      	cbz	r0, 8025dde <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8025d7e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8025d82:	3401      	adds	r4, #1
 8025d84:	d42f      	bmi.n	8025de6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8025d86:	45a6      	cmp	lr, r4
 8025d88:	dd2d      	ble.n	8025de6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8025d8a:	b37f      	cbz	r7, 8025dec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8025d8c:	2d00      	cmp	r5, #0
 8025d8e:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 8025d92:	db26      	blt.n	8025de2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8025d94:	42ab      	cmp	r3, r5
 8025d96:	dd24      	ble.n	8025de2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8025d98:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8025d9c:	3501      	adds	r5, #1
 8025d9e:	d428      	bmi.n	8025df2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8025da0:	42ab      	cmp	r3, r5
 8025da2:	dd26      	ble.n	8025df2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8025da4:	b338      	cbz	r0, 8025df6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 8025da6:	f8de 3004 	ldr.w	r3, [lr, #4]
 8025daa:	280f      	cmp	r0, #15
 8025dac:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025db0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025db4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025db8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025dbc:	d801      	bhi.n	8025dc2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 8025dbe:	2f0f      	cmp	r7, #15
 8025dc0:	d91b      	bls.n	8025dfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 8025dc2:	4b87      	ldr	r3, [pc, #540]	; (8025fe0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8025dc4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025dc8:	4a86      	ldr	r2, [pc, #536]	; (8025fe4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8025dca:	4887      	ldr	r0, [pc, #540]	; (8025fe8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8025dcc:	f001 fd46 	bl	802785c <__assert_func>
 8025dd0:	2200      	movs	r2, #0
 8025dd2:	e7cf      	b.n	8025d74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8025dd4:	2600      	movs	r6, #0
 8025dd6:	4632      	mov	r2, r6
 8025dd8:	e7d3      	b.n	8025d82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8025dda:	2600      	movs	r6, #0
 8025ddc:	e7d1      	b.n	8025d82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8025dde:	4606      	mov	r6, r0
 8025de0:	e7cf      	b.n	8025d82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8025de2:	2400      	movs	r4, #0
 8025de4:	e7da      	b.n	8025d9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 8025de6:	2300      	movs	r3, #0
 8025de8:	461c      	mov	r4, r3
 8025dea:	e7de      	b.n	8025daa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8025dec:	463b      	mov	r3, r7
 8025dee:	463c      	mov	r4, r7
 8025df0:	e7db      	b.n	8025daa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8025df2:	2300      	movs	r3, #0
 8025df4:	e7d9      	b.n	8025daa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8025df6:	4603      	mov	r3, r0
 8025df8:	e7d7      	b.n	8025daa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8025dfa:	b280      	uxth	r0, r0
 8025dfc:	b2bf      	uxth	r7, r7
 8025dfe:	fb07 fe00 	mul.w	lr, r7, r0
 8025e02:	0100      	lsls	r0, r0, #4
 8025e04:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025e08:	eba0 0c0e 	sub.w	ip, r0, lr
 8025e0c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8025e10:	b2bf      	uxth	r7, r7
 8025e12:	fa1f fc8c 	uxth.w	ip, ip
 8025e16:	1bed      	subs	r5, r5, r7
 8025e18:	fb0c f00a 	mul.w	r0, ip, sl
 8025e1c:	b2ad      	uxth	r5, r5
 8025e1e:	fb0b 0005 	mla	r0, fp, r5, r0
 8025e22:	fb07 0009 	mla	r0, r7, r9, r0
 8025e26:	fb0e 0008 	mla	r0, lr, r8, r0
 8025e2a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025e2e:	9001      	str	r0, [sp, #4]
 8025e30:	2800      	cmp	r0, #0
 8025e32:	f000 80d1 	beq.w	8025fd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 8025e36:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8025e3a:	d018      	beq.n	8025e6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8025e3c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025e40:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025e44:	fb0b f000 	mul.w	r0, fp, r0
 8025e48:	fb0b fb02 	mul.w	fp, fp, r2
 8025e4c:	0a02      	lsrs	r2, r0, #8
 8025e4e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025e52:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025e56:	4402      	add	r2, r0
 8025e58:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8025e5c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025e60:	0a12      	lsrs	r2, r2, #8
 8025e62:	0a00      	lsrs	r0, r0, #8
 8025e64:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025e68:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025e6c:	4302      	orrs	r2, r0
 8025e6e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8025e72:	d01a      	beq.n	8025eaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 8025e74:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8025e78:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025e7c:	fb0a f000 	mul.w	r0, sl, r0
 8025e80:	fb0a fa06 	mul.w	sl, sl, r6
 8025e84:	0a06      	lsrs	r6, r0, #8
 8025e86:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025e8a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025e8e:	4406      	add	r6, r0
 8025e90:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8025e94:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8025e98:	0a36      	lsrs	r6, r6, #8
 8025e9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e9e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025ea2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ea6:	ea46 060a 	orr.w	r6, r6, sl
 8025eaa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025eae:	d01b      	beq.n	8025ee8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 8025eb0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8025eb4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025eb8:	fb09 fa0a 	mul.w	sl, r9, sl
 8025ebc:	fb09 f004 	mul.w	r0, r9, r4
 8025ec0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025ec4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025ec8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8025ecc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025ed0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8025ed4:	4454      	add	r4, sl
 8025ed6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025eda:	0a24      	lsrs	r4, r4, #8
 8025edc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025ee0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025ee4:	ea44 0409 	orr.w	r4, r4, r9
 8025ee8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025eec:	d01b      	beq.n	8025f26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8025eee:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8025ef2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025ef6:	fb08 f909 	mul.w	r9, r8, r9
 8025efa:	fb08 f003 	mul.w	r0, r8, r3
 8025efe:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025f02:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025f06:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8025f0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025f0e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8025f12:	444b      	add	r3, r9
 8025f14:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025f18:	0a1b      	lsrs	r3, r3, #8
 8025f1a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025f1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025f22:	ea43 0308 	orr.w	r3, r3, r8
 8025f26:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025f2a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025f2e:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8025f32:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025f36:	fb0c f808 	mul.w	r8, ip, r8
 8025f3a:	8808      	ldrh	r0, [r1, #0]
 8025f3c:	fb0c f606 	mul.w	r6, ip, r6
 8025f40:	fb05 8909 	mla	r9, r5, r9, r8
 8025f44:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8025f48:	fb05 6502 	mla	r5, r5, r2, r6
 8025f4c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025f50:	fb07 9908 	mla	r9, r7, r8, r9
 8025f54:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8025f58:	fb07 5704 	mla	r7, r7, r4, r5
 8025f5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025f60:	fb0e 9808 	mla	r8, lr, r8, r9
 8025f64:	10c4      	asrs	r4, r0, #3
 8025f66:	fb0e 7e03 	mla	lr, lr, r3, r7
 8025f6a:	9b01      	ldr	r3, [sp, #4]
 8025f6c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025f70:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8025f74:	43da      	mvns	r2, r3
 8025f76:	1203      	asrs	r3, r0, #8
 8025f78:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f7c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8025f80:	b2d2      	uxtb	r2, r2
 8025f82:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025f86:	00c0      	lsls	r0, r0, #3
 8025f88:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025f8c:	4353      	muls	r3, r2
 8025f8e:	b2c0      	uxtb	r0, r0
 8025f90:	ea48 0e0e 	orr.w	lr, r8, lr
 8025f94:	4354      	muls	r4, r2
 8025f96:	4350      	muls	r0, r2
 8025f98:	1c5a      	adds	r2, r3, #1
 8025f9a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025f9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8025fa2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025fa6:	1c62      	adds	r2, r4, #1
 8025fa8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025fac:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8025fb0:	021b      	lsls	r3, r3, #8
 8025fb2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8025fb6:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8025fba:	00d2      	lsls	r2, r2, #3
 8025fbc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025fc0:	4313      	orrs	r3, r2
 8025fc2:	1c42      	adds	r2, r0, #1
 8025fc4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025fc8:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 8025fcc:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 8025fd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8025fd4:	f8a1 e000 	strh.w	lr, [r1]
 8025fd8:	b003      	add	sp, #12
 8025fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025fde:	bf00      	nop
 8025fe0:	0802bded 	.word	0x0802bded
 8025fe4:	0802c3ba 	.word	0x0802c3ba
 8025fe8:	0802be71 	.word	0x0802be71

08025fec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ff0:	ed2d 8b08 	vpush	{d8-d11}
 8025ff4:	b09b      	sub	sp, #108	; 0x6c
 8025ff6:	eeb0 aa40 	vmov.f32	s20, s0
 8025ffa:	eef0 9a60 	vmov.f32	s19, s1
 8025ffe:	9218      	str	r2, [sp, #96]	; 0x60
 8026000:	eeb0 9a41 	vmov.f32	s18, s2
 8026004:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026006:	eeb0 8a62 	vmov.f32	s16, s5
 802600a:	9019      	str	r0, [sp, #100]	; 0x64
 802600c:	eef0 8a43 	vmov.f32	s17, s6
 8026010:	6850      	ldr	r0, [r2, #4]
 8026012:	eef0 ba44 	vmov.f32	s23, s8
 8026016:	9116      	str	r1, [sp, #88]	; 0x58
 8026018:	eeb0 ba64 	vmov.f32	s22, s9
 802601c:	9307      	str	r3, [sp, #28]
 802601e:	eef0 aa45 	vmov.f32	s21, s10
 8026022:	6812      	ldr	r2, [r2, #0]
 8026024:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8026028:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 802602c:	fb00 1303 	mla	r3, r0, r3, r1
 8026030:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026034:	930a      	str	r3, [sp, #40]	; 0x28
 8026036:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026038:	681b      	ldr	r3, [r3, #0]
 802603a:	930f      	str	r3, [sp, #60]	; 0x3c
 802603c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802603e:	2b00      	cmp	r3, #0
 8026040:	dc03      	bgt.n	802604a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8026042:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026044:	2b00      	cmp	r3, #0
 8026046:	f340 8387 	ble.w	8026758 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 802604a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802604c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026050:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026054:	1e48      	subs	r0, r1, #1
 8026056:	1e57      	subs	r7, r2, #1
 8026058:	9b07      	ldr	r3, [sp, #28]
 802605a:	2b00      	cmp	r3, #0
 802605c:	f340 8166 	ble.w	802632c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8026060:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026064:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026068:	d406      	bmi.n	8026078 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802606a:	4584      	cmp	ip, r0
 802606c:	da04      	bge.n	8026078 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802606e:	2b00      	cmp	r3, #0
 8026070:	db02      	blt.n	8026078 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026072:	42bb      	cmp	r3, r7
 8026074:	f2c0 815b 	blt.w	802632e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026078:	f11c 0c01 	adds.w	ip, ip, #1
 802607c:	f100 814b 	bmi.w	8026316 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8026080:	4561      	cmp	r1, ip
 8026082:	f2c0 8148 	blt.w	8026316 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8026086:	3301      	adds	r3, #1
 8026088:	f100 8145 	bmi.w	8026316 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802608c:	429a      	cmp	r2, r3
 802608e:	f2c0 8142 	blt.w	8026316 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8026092:	9b07      	ldr	r3, [sp, #28]
 8026094:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026096:	9317      	str	r3, [sp, #92]	; 0x5c
 8026098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802609a:	2b00      	cmp	r3, #0
 802609c:	f340 8165 	ble.w	802636a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80260a0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80260a2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80260a6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80260a8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80260ac:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80260b0:	1422      	asrs	r2, r4, #16
 80260b2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80260b6:	689b      	ldr	r3, [r3, #8]
 80260b8:	f100 81d5 	bmi.w	8026466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80260bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80260c0:	4542      	cmp	r2, r8
 80260c2:	f280 81d0 	bge.w	8026466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80260c6:	f1bc 0f00 	cmp.w	ip, #0
 80260ca:	f2c0 81cc 	blt.w	8026466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80260ce:	f10e 38ff 	add.w	r8, lr, #4294967295
 80260d2:	45c4      	cmp	ip, r8
 80260d4:	f280 81c7 	bge.w	8026466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80260d8:	b21b      	sxth	r3, r3
 80260da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80260dc:	fb0c 2203 	mla	r2, ip, r3, r2
 80260e0:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80260e4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80260e8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80260ec:	2900      	cmp	r1, #0
 80260ee:	f000 8182 	beq.w	80263f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80260f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80260f6:	950b      	str	r5, [sp, #44]	; 0x2c
 80260f8:	0e2d      	lsrs	r5, r5, #24
 80260fa:	9512      	str	r5, [sp, #72]	; 0x48
 80260fc:	b180      	cbz	r0, 8026120 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80260fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026102:	3b01      	subs	r3, #1
 8026104:	009b      	lsls	r3, r3, #2
 8026106:	3304      	adds	r3, #4
 8026108:	eb08 0c03 	add.w	ip, r8, r3
 802610c:	f858 3003 	ldr.w	r3, [r8, r3]
 8026110:	9308      	str	r3, [sp, #32]
 8026112:	0e1b      	lsrs	r3, r3, #24
 8026114:	9310      	str	r3, [sp, #64]	; 0x40
 8026116:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802611a:	930c      	str	r3, [sp, #48]	; 0x30
 802611c:	0e1b      	lsrs	r3, r3, #24
 802611e:	9313      	str	r3, [sp, #76]	; 0x4c
 8026120:	b289      	uxth	r1, r1
 8026122:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026124:	b280      	uxth	r0, r0
 8026126:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026128:	fb01 f900 	mul.w	r9, r1, r0
 802612c:	0109      	lsls	r1, r1, #4
 802612e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026132:	eba1 0809 	sub.w	r8, r1, r9
 8026136:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802613a:	b280      	uxth	r0, r0
 802613c:	fa1f f888 	uxth.w	r8, r8
 8026140:	1a09      	subs	r1, r1, r0
 8026142:	fb08 f303 	mul.w	r3, r8, r3
 8026146:	b289      	uxth	r1, r1
 8026148:	fb01 330e 	mla	r3, r1, lr, r3
 802614c:	fb00 3305 	mla	r3, r0, r5, r3
 8026150:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026152:	fb09 3305 	mla	r3, r9, r5, r3
 8026156:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802615a:	2b00      	cmp	r3, #0
 802615c:	f000 80d2 	beq.w	8026304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8026160:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026164:	d01b      	beq.n	802619e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8026166:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802616a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802616e:	fb0e fa0a 	mul.w	sl, lr, sl
 8026172:	fb0e fe02 	mul.w	lr, lr, r2
 8026176:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802617a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802617e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026182:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026186:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802618a:	4452      	add	r2, sl
 802618c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026190:	0a12      	lsrs	r2, r2, #8
 8026192:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026196:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802619a:	ea42 020c 	orr.w	r2, r2, ip
 802619e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80261a0:	2dff      	cmp	r5, #255	; 0xff
 80261a2:	d021      	beq.n	80261e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80261a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80261a6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80261aa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80261ac:	fb05 fb0b 	mul.w	fp, r5, fp
 80261b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80261b2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80261b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80261b8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80261bc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80261c0:	fb05 fa0a 	mul.w	sl, r5, sl
 80261c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80261c8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80261cc:	44de      	add	lr, fp
 80261ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80261d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80261d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80261da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80261de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80261e2:	ea4e 050a 	orr.w	r5, lr, sl
 80261e6:	950b      	str	r5, [sp, #44]	; 0x2c
 80261e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80261ea:	2dff      	cmp	r5, #255	; 0xff
 80261ec:	d021      	beq.n	8026232 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80261ee:	9d08      	ldr	r5, [sp, #32]
 80261f0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80261f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80261f6:	fb05 fb0b 	mul.w	fp, r5, fp
 80261fa:	9d08      	ldr	r5, [sp, #32]
 80261fc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8026200:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026202:	fb05 fa0e 	mul.w	sl, r5, lr
 8026206:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802620a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802620e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026212:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026216:	44de      	add	lr, fp
 8026218:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802621c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026220:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026224:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026228:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802622c:	ea4e 050a 	orr.w	r5, lr, sl
 8026230:	9508      	str	r5, [sp, #32]
 8026232:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026234:	2dff      	cmp	r5, #255	; 0xff
 8026236:	d021      	beq.n	802627c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8026238:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802623a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802623e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026240:	fb05 fb0b 	mul.w	fp, r5, fp
 8026244:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026246:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802624a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802624c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026250:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026254:	fb05 fa0a 	mul.w	sl, r5, sl
 8026258:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802625c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026260:	44de      	add	lr, fp
 8026262:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026266:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802626a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802626e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026272:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026276:	ea4e 050a 	orr.w	r5, lr, sl
 802627a:	950c      	str	r5, [sp, #48]	; 0x30
 802627c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802627e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026282:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026286:	2bff      	cmp	r3, #255	; 0xff
 8026288:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802628c:	9d08      	ldr	r5, [sp, #32]
 802628e:	fb08 fc0c 	mul.w	ip, r8, ip
 8026292:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026296:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802629a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802629c:	fb00 cc0e 	mla	ip, r0, lr, ip
 80262a0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80262a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80262a6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80262aa:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80262ae:	fb08 f80e 	mul.w	r8, r8, lr
 80262b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262b6:	fb01 8202 	mla	r2, r1, r2, r8
 80262ba:	9908      	ldr	r1, [sp, #32]
 80262bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262c0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80262c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80262c6:	fb00 220a 	mla	r2, r0, sl, r2
 80262ca:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80262ce:	fb09 2900 	mla	r9, r9, r0, r2
 80262d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80262d6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80262da:	ea4c 0c09 	orr.w	ip, ip, r9
 80262de:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80262e2:	f040 8091 	bne.w	8026408 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80262e6:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80262ea:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80262ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80262f2:	f022 0207 	bic.w	r2, r2, #7
 80262f6:	431a      	orrs	r2, r3
 80262f8:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80262fc:	ea4c 0c02 	orr.w	ip, ip, r2
 8026300:	f8a7 c000 	strh.w	ip, [r7]
 8026304:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026306:	3702      	adds	r7, #2
 8026308:	441c      	add	r4, r3
 802630a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802630c:	441e      	add	r6, r3
 802630e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026310:	3b01      	subs	r3, #1
 8026312:	9317      	str	r3, [sp, #92]	; 0x5c
 8026314:	e6c0      	b.n	8026098 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026316:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026318:	441c      	add	r4, r3
 802631a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802631c:	441e      	add	r6, r3
 802631e:	9b07      	ldr	r3, [sp, #28]
 8026320:	3b01      	subs	r3, #1
 8026322:	9307      	str	r3, [sp, #28]
 8026324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026326:	3302      	adds	r3, #2
 8026328:	930a      	str	r3, [sp, #40]	; 0x28
 802632a:	e695      	b.n	8026058 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802632c:	d024      	beq.n	8026378 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802632e:	9b07      	ldr	r3, [sp, #28]
 8026330:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8026332:	3b01      	subs	r3, #1
 8026334:	fb00 4003 	mla	r0, r0, r3, r4
 8026338:	1400      	asrs	r0, r0, #16
 802633a:	f53f aeaa 	bmi.w	8026092 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802633e:	3901      	subs	r1, #1
 8026340:	4288      	cmp	r0, r1
 8026342:	f6bf aea6 	bge.w	8026092 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8026346:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8026348:	fb01 6303 	mla	r3, r1, r3, r6
 802634c:	141b      	asrs	r3, r3, #16
 802634e:	f53f aea0 	bmi.w	8026092 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8026352:	3a01      	subs	r2, #1
 8026354:	4293      	cmp	r3, r2
 8026356:	f6bf ae9c 	bge.w	8026092 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802635a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802635e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8026362:	f1bb 0f00 	cmp.w	fp, #0
 8026366:	f300 809a 	bgt.w	802649e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 802636a:	9b07      	ldr	r3, [sp, #28]
 802636c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026372:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026376:	930a      	str	r3, [sp, #40]	; 0x28
 8026378:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802637a:	2b00      	cmp	r3, #0
 802637c:	f340 81ec 	ble.w	8026758 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8026380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026384:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026386:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802638a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802638e:	eef0 6a48 	vmov.f32	s13, s16
 8026392:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026396:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802639a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802639e:	ee16 4a90 	vmov	r4, s13
 80263a2:	eef0 6a68 	vmov.f32	s13, s17
 80263a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80263aa:	ee16 6a90 	vmov	r6, s13
 80263ae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80263b2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80263b6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80263ba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80263be:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80263c2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80263c6:	ee18 2a10 	vmov	r2, s16
 80263ca:	eeb0 8a47 	vmov.f32	s16, s14
 80263ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80263d2:	ee18 2a90 	vmov	r2, s17
 80263d6:	932f      	str	r3, [sp, #188]	; 0xbc
 80263d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80263da:	eef0 8a67 	vmov.f32	s17, s15
 80263de:	fb92 f3f3 	sdiv	r3, r2, r3
 80263e2:	9330      	str	r3, [sp, #192]	; 0xc0
 80263e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80263e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80263e8:	3b01      	subs	r3, #1
 80263ea:	9316      	str	r3, [sp, #88]	; 0x58
 80263ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80263ee:	bf08      	it	eq
 80263f0:	4613      	moveq	r3, r2
 80263f2:	9307      	str	r3, [sp, #28]
 80263f4:	e622      	b.n	802603c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80263f6:	2800      	cmp	r0, #0
 80263f8:	f43f ae92 	beq.w	8026120 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80263fc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8026400:	9308      	str	r3, [sp, #32]
 8026402:	0e1b      	lsrs	r3, r3, #24
 8026404:	9310      	str	r3, [sp, #64]	; 0x40
 8026406:	e68b      	b.n	8026120 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8026408:	8839      	ldrh	r1, [r7, #0]
 802640a:	43db      	mvns	r3, r3
 802640c:	4dd5      	ldr	r5, [pc, #852]	; (8026764 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 802640e:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8026412:	fa5f f883 	uxtb.w	r8, r3
 8026416:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802641a:	10c8      	asrs	r0, r1, #3
 802641c:	00cb      	lsls	r3, r1, #3
 802641e:	fb0e fe08 	mul.w	lr, lr, r8
 8026422:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026426:	b2db      	uxtb	r3, r3
 8026428:	f10e 0101 	add.w	r1, lr, #1
 802642c:	fb00 f008 	mul.w	r0, r0, r8
 8026430:	fb03 f308 	mul.w	r3, r3, r8
 8026434:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8026438:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802643c:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8026440:	f100 0e01 	add.w	lr, r0, #1
 8026444:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8026448:	b2c9      	uxtb	r1, r1
 802644a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802644e:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8026452:	00d2      	lsls	r2, r2, #3
 8026454:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026458:	430a      	orrs	r2, r1
 802645a:	1c59      	adds	r1, r3, #1
 802645c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026460:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8026464:	e748      	b.n	80262f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8026466:	f112 0801 	adds.w	r8, r2, #1
 802646a:	f53f af4b 	bmi.w	8026304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802646e:	4543      	cmp	r3, r8
 8026470:	f6ff af48 	blt.w	8026304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8026474:	f11c 0801 	adds.w	r8, ip, #1
 8026478:	f53f af44 	bmi.w	8026304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802647c:	45c6      	cmp	lr, r8
 802647e:	f6ff af41 	blt.w	8026304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8026482:	b21b      	sxth	r3, r3
 8026484:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8026488:	fa0f f28e 	sxth.w	r2, lr
 802648c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026490:	9200      	str	r2, [sp, #0]
 8026492:	4639      	mov	r1, r7
 8026494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026496:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026498:	f7ff fc54 	bl	8025d44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802649c:	e732      	b.n	8026304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802649e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80264a0:	1421      	asrs	r1, r4, #16
 80264a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80264a4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80264a8:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80264ac:	1433      	asrs	r3, r6, #16
 80264ae:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80264b2:	fb07 1303 	mla	r3, r7, r3, r1
 80264b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80264b8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80264bc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80264c0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80264c4:	2a00      	cmp	r2, #0
 80264c6:	f000 8108 	beq.w	80266da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80264ca:	684d      	ldr	r5, [r1, #4]
 80264cc:	950d      	str	r5, [sp, #52]	; 0x34
 80264ce:	0e2d      	lsrs	r5, r5, #24
 80264d0:	9514      	str	r5, [sp, #80]	; 0x50
 80264d2:	b178      	cbz	r0, 80264f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80264d4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80264d8:	3f01      	subs	r7, #1
 80264da:	00bf      	lsls	r7, r7, #2
 80264dc:	3704      	adds	r7, #4
 80264de:	eb01 0e07 	add.w	lr, r1, r7
 80264e2:	59c9      	ldr	r1, [r1, r7]
 80264e4:	9109      	str	r1, [sp, #36]	; 0x24
 80264e6:	0e09      	lsrs	r1, r1, #24
 80264e8:	9111      	str	r1, [sp, #68]	; 0x44
 80264ea:	f8de 1004 	ldr.w	r1, [lr, #4]
 80264ee:	910e      	str	r1, [sp, #56]	; 0x38
 80264f0:	0e09      	lsrs	r1, r1, #24
 80264f2:	9115      	str	r1, [sp, #84]	; 0x54
 80264f4:	b292      	uxth	r2, r2
 80264f6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80264f8:	b280      	uxth	r0, r0
 80264fa:	fb02 f900 	mul.w	r9, r2, r0
 80264fe:	0112      	lsls	r2, r2, #4
 8026500:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026504:	eba2 0e09 	sub.w	lr, r2, r9
 8026508:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802650c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802650e:	b280      	uxth	r0, r0
 8026510:	fa1f fe8e 	uxth.w	lr, lr
 8026514:	1a09      	subs	r1, r1, r0
 8026516:	fb0e f202 	mul.w	r2, lr, r2
 802651a:	b289      	uxth	r1, r1
 802651c:	fb01 220c 	mla	r2, r1, ip, r2
 8026520:	fb00 2205 	mla	r2, r0, r5, r2
 8026524:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026526:	fb09 2205 	mla	r2, r9, r5, r2
 802652a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802652e:	2a00      	cmp	r2, #0
 8026530:	f000 80ca 	beq.w	80266c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8026534:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026538:	d019      	beq.n	802656e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 802653a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802653e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026542:	fb0c fa0a 	mul.w	sl, ip, sl
 8026546:	fb0c fc03 	mul.w	ip, ip, r3
 802654a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802654e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026552:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026556:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802655a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802655e:	4453      	add	r3, sl
 8026560:	0a3f      	lsrs	r7, r7, #8
 8026562:	0a1b      	lsrs	r3, r3, #8
 8026564:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026568:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802656c:	433b      	orrs	r3, r7
 802656e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026570:	2dff      	cmp	r5, #255	; 0xff
 8026572:	d020      	beq.n	80265b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8026574:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026576:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802657a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802657c:	436f      	muls	r7, r5
 802657e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026580:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026584:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026588:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802658a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802658e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026592:	fb05 fa0a 	mul.w	sl, r5, sl
 8026596:	44bc      	add	ip, r7
 8026598:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802659c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80265a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80265a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80265ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80265b0:	ea4c 050a 	orr.w	r5, ip, sl
 80265b4:	950d      	str	r5, [sp, #52]	; 0x34
 80265b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80265b8:	2dff      	cmp	r5, #255	; 0xff
 80265ba:	d020      	beq.n	80265fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 80265bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80265be:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80265c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80265c4:	436f      	muls	r7, r5
 80265c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80265c8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80265cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80265ce:	fb05 fa0c 	mul.w	sl, r5, ip
 80265d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80265d6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80265da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80265de:	44bc      	add	ip, r7
 80265e0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80265e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80265e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80265f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80265f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80265f8:	ea4c 050a 	orr.w	r5, ip, sl
 80265fc:	9509      	str	r5, [sp, #36]	; 0x24
 80265fe:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026600:	2dff      	cmp	r5, #255	; 0xff
 8026602:	d020      	beq.n	8026646 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8026604:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026606:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802660a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802660c:	436f      	muls	r7, r5
 802660e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026610:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026614:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026618:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802661a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802661e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026622:	fb05 fa0a 	mul.w	sl, r5, sl
 8026626:	44bc      	add	ip, r7
 8026628:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802662c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026630:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026634:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026638:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802663c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026640:	ea4c 050a 	orr.w	r5, ip, sl
 8026644:	950e      	str	r5, [sp, #56]	; 0x38
 8026646:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026648:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802664c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026650:	2aff      	cmp	r2, #255	; 0xff
 8026652:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8026656:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026658:	fb0e f707 	mul.w	r7, lr, r7
 802665c:	fb01 770c 	mla	r7, r1, ip, r7
 8026660:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026664:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026666:	fb00 770c 	mla	r7, r0, ip, r7
 802666a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802666e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026670:	fb09 770c 	mla	r7, r9, ip, r7
 8026674:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8026678:	fb0e fe0c 	mul.w	lr, lr, ip
 802667c:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8026680:	fb01 e303 	mla	r3, r1, r3, lr
 8026684:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026686:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802668a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802668e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026690:	fb00 330a 	mla	r3, r0, sl, r3
 8026694:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8026698:	fb09 3c0c 	mla	ip, r9, ip, r3
 802669c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80266a0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80266a4:	ea47 070c 	orr.w	r7, r7, ip
 80266a8:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80266ac:	d11e      	bne.n	80266ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 80266ae:	097a      	lsrs	r2, r7, #5
 80266b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80266b4:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80266b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80266bc:	f023 0307 	bic.w	r3, r3, #7
 80266c0:	4313      	orrs	r3, r2
 80266c2:	431f      	orrs	r7, r3
 80266c4:	f8a8 7000 	strh.w	r7, [r8]
 80266c8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80266ca:	f108 0802 	add.w	r8, r8, #2
 80266ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80266d2:	441c      	add	r4, r3
 80266d4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80266d6:	441e      	add	r6, r3
 80266d8:	e643      	b.n	8026362 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 80266da:	2800      	cmp	r0, #0
 80266dc:	f43f af0a 	beq.w	80264f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80266e0:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80266e4:	9109      	str	r1, [sp, #36]	; 0x24
 80266e6:	0e09      	lsrs	r1, r1, #24
 80266e8:	9111      	str	r1, [sp, #68]	; 0x44
 80266ea:	e703      	b.n	80264f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80266ec:	f8b8 1000 	ldrh.w	r1, [r8]
 80266f0:	43d2      	mvns	r2, r2
 80266f2:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80266f6:	fa5f fe82 	uxtb.w	lr, r2
 80266fa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80266fe:	10c8      	asrs	r0, r1, #3
 8026700:	00ca      	lsls	r2, r1, #3
 8026702:	fb0c fc0e 	mul.w	ip, ip, lr
 8026706:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802670a:	b2d2      	uxtb	r2, r2
 802670c:	f10c 0101 	add.w	r1, ip, #1
 8026710:	fb00 f00e 	mul.w	r0, r0, lr
 8026714:	fb02 f20e 	mul.w	r2, r2, lr
 8026718:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802671c:	0c39      	lsrs	r1, r7, #16
 802671e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8026722:	4910      	ldr	r1, [pc, #64]	; (8026764 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8026724:	fa5f fc8c 	uxtb.w	ip, ip
 8026728:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802672c:	1c41      	adds	r1, r0, #1
 802672e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026732:	1c51      	adds	r1, r2, #1
 8026734:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026738:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802673c:	00c0      	lsls	r0, r0, #3
 802673e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026742:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026746:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802674a:	ea4c 0c00 	orr.w	ip, ip, r0
 802674e:	ea47 0c0c 	orr.w	ip, r7, ip
 8026752:	f8a8 c000 	strh.w	ip, [r8]
 8026756:	e7b7      	b.n	80266c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8026758:	b01b      	add	sp, #108	; 0x6c
 802675a:	ecbd 8b08 	vpop	{d8-d11}
 802675e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026762:	bf00      	nop
 8026764:	fffff800 	.word	0xfffff800

08026768 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8026768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802676c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8026770:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8026774:	2c00      	cmp	r4, #0
 8026776:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802677a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802677e:	fb04 ce03 	mla	lr, r4, r3, ip
 8026782:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8026786:	db60      	blt.n	802684a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8026788:	45a1      	cmp	r9, r4
 802678a:	dd5e      	ble.n	802684a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802678c:	f1bc 0f00 	cmp.w	ip, #0
 8026790:	db59      	blt.n	8026846 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8026792:	45e0      	cmp	r8, ip
 8026794:	dd57      	ble.n	8026846 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8026796:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802679a:	f01e 0f01 	tst.w	lr, #1
 802679e:	5c16      	ldrb	r6, [r2, r0]
 80267a0:	bf0c      	ite	eq
 80267a2:	f006 060f 	andeq.w	r6, r6, #15
 80267a6:	1136      	asrne	r6, r6, #4
 80267a8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80267ac:	b2f6      	uxtb	r6, r6
 80267ae:	f11c 0001 	adds.w	r0, ip, #1
 80267b2:	d44d      	bmi.n	8026850 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80267b4:	4580      	cmp	r8, r0
 80267b6:	dd4b      	ble.n	8026850 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80267b8:	2d00      	cmp	r5, #0
 80267ba:	d04b      	beq.n	8026854 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 80267bc:	f10e 0a01 	add.w	sl, lr, #1
 80267c0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80267c4:	f01a 0f01 	tst.w	sl, #1
 80267c8:	5c10      	ldrb	r0, [r2, r0]
 80267ca:	bf0c      	ite	eq
 80267cc:	f000 000f 	andeq.w	r0, r0, #15
 80267d0:	1100      	asrne	r0, r0, #4
 80267d2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80267d6:	b2c0      	uxtb	r0, r0
 80267d8:	3401      	adds	r4, #1
 80267da:	d43f      	bmi.n	802685c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80267dc:	45a1      	cmp	r9, r4
 80267de:	dd3d      	ble.n	802685c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80267e0:	2f00      	cmp	r7, #0
 80267e2:	f000 80a8 	beq.w	8026936 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 80267e6:	f1bc 0f00 	cmp.w	ip, #0
 80267ea:	db35      	blt.n	8026858 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80267ec:	45e0      	cmp	r8, ip
 80267ee:	dd33      	ble.n	8026858 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80267f0:	eb03 090e 	add.w	r9, r3, lr
 80267f4:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80267f8:	f019 0f01 	tst.w	r9, #1
 80267fc:	5d14      	ldrb	r4, [r2, r4]
 80267fe:	bf0c      	ite	eq
 8026800:	f004 040f 	andeq.w	r4, r4, #15
 8026804:	1124      	asrne	r4, r4, #4
 8026806:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802680a:	b2e4      	uxtb	r4, r4
 802680c:	f11c 0c01 	adds.w	ip, ip, #1
 8026810:	d427      	bmi.n	8026862 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8026812:	45e0      	cmp	r8, ip
 8026814:	dd25      	ble.n	8026862 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8026816:	b335      	cbz	r5, 8026866 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8026818:	3301      	adds	r3, #1
 802681a:	449e      	add	lr, r3
 802681c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026820:	f01e 0f01 	tst.w	lr, #1
 8026824:	5cd2      	ldrb	r2, [r2, r3]
 8026826:	bf0c      	ite	eq
 8026828:	f002 020f 	andeq.w	r2, r2, #15
 802682c:	1112      	asrne	r2, r2, #4
 802682e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026832:	b2d3      	uxtb	r3, r2
 8026834:	2d0f      	cmp	r5, #15
 8026836:	d917      	bls.n	8026868 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8026838:	4b42      	ldr	r3, [pc, #264]	; (8026944 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 802683a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802683e:	4a42      	ldr	r2, [pc, #264]	; (8026948 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8026840:	4842      	ldr	r0, [pc, #264]	; (802694c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8026842:	f001 f80b 	bl	802785c <__assert_func>
 8026846:	2600      	movs	r6, #0
 8026848:	e7b1      	b.n	80267ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802684a:	2000      	movs	r0, #0
 802684c:	4606      	mov	r6, r0
 802684e:	e7c3      	b.n	80267d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8026850:	2000      	movs	r0, #0
 8026852:	e7c1      	b.n	80267d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8026854:	4628      	mov	r0, r5
 8026856:	e7bf      	b.n	80267d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8026858:	2400      	movs	r4, #0
 802685a:	e7d7      	b.n	802680c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 802685c:	2300      	movs	r3, #0
 802685e:	461c      	mov	r4, r3
 8026860:	e7e8      	b.n	8026834 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8026862:	2300      	movs	r3, #0
 8026864:	e7e6      	b.n	8026834 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8026866:	462b      	mov	r3, r5
 8026868:	2f0f      	cmp	r7, #15
 802686a:	d8e5      	bhi.n	8026838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802686c:	b2ad      	uxth	r5, r5
 802686e:	b2bf      	uxth	r7, r7
 8026870:	fb05 fc07 	mul.w	ip, r5, r7
 8026874:	012d      	lsls	r5, r5, #4
 8026876:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802687a:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802687e:	eba5 050c 	sub.w	r5, r5, ip
 8026882:	b2bf      	uxth	r7, r7
 8026884:	b2ad      	uxth	r5, r5
 8026886:	1bd2      	subs	r2, r2, r7
 8026888:	4368      	muls	r0, r5
 802688a:	b292      	uxth	r2, r2
 802688c:	fb06 0002 	mla	r0, r6, r2, r0
 8026890:	fb07 0404 	mla	r4, r7, r4, r0
 8026894:	fb0c 4303 	mla	r3, ip, r3, r4
 8026898:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802689c:	b1b3      	cbz	r3, 80268cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802689e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80268a2:	435a      	muls	r2, r3
 80268a4:	1c53      	adds	r3, r2, #1
 80268a6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80268aa:	4a29      	ldr	r2, [pc, #164]	; (8026950 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 80268ac:	121b      	asrs	r3, r3, #8
 80268ae:	6812      	ldr	r2, [r2, #0]
 80268b0:	2bff      	cmp	r3, #255	; 0xff
 80268b2:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80268b6:	d10b      	bne.n	80268d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 80268b8:	0950      	lsrs	r0, r2, #5
 80268ba:	4b26      	ldr	r3, [pc, #152]	; (8026954 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 80268bc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80268c0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80268c4:	4033      	ands	r3, r6
 80268c6:	4318      	orrs	r0, r3
 80268c8:	4302      	orrs	r2, r0
 80268ca:	800a      	strh	r2, [r1, #0]
 80268cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80268d0:	880d      	ldrh	r5, [r1, #0]
 80268d2:	b29f      	uxth	r7, r3
 80268d4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80268d8:	43db      	mvns	r3, r3
 80268da:	122c      	asrs	r4, r5, #8
 80268dc:	fb10 f007 	smulbb	r0, r0, r7
 80268e0:	b2db      	uxtb	r3, r3
 80268e2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80268e6:	b2f6      	uxtb	r6, r6
 80268e8:	b2d2      	uxtb	r2, r2
 80268ea:	fb04 0403 	mla	r4, r4, r3, r0
 80268ee:	10e8      	asrs	r0, r5, #3
 80268f0:	fb12 f207 	smulbb	r2, r2, r7
 80268f4:	00ed      	lsls	r5, r5, #3
 80268f6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80268fa:	b2a4      	uxth	r4, r4
 80268fc:	fb16 f607 	smulbb	r6, r6, r7
 8026900:	b2ed      	uxtb	r5, r5
 8026902:	fb00 6603 	mla	r6, r0, r3, r6
 8026906:	fb05 2303 	mla	r3, r5, r3, r2
 802690a:	b2b0      	uxth	r0, r6
 802690c:	b29a      	uxth	r2, r3
 802690e:	1c63      	adds	r3, r4, #1
 8026910:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026914:	1c53      	adds	r3, r2, #1
 8026916:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802691a:	1c42      	adds	r2, r0, #1
 802691c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8026920:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026924:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026928:	0940      	lsrs	r0, r0, #5
 802692a:	4323      	orrs	r3, r4
 802692c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026930:	4303      	orrs	r3, r0
 8026932:	800b      	strh	r3, [r1, #0]
 8026934:	e7ca      	b.n	80268cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8026936:	2d0f      	cmp	r5, #15
 8026938:	f63f af7e 	bhi.w	8026838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802693c:	463b      	mov	r3, r7
 802693e:	463c      	mov	r4, r7
 8026940:	e794      	b.n	802686c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8026942:	bf00      	nop
 8026944:	0802bded 	.word	0x0802bded
 8026948:	0802c3ba 	.word	0x0802c3ba
 802694c:	0802be71 	.word	0x0802be71
 8026950:	2400aef4 	.word	0x2400aef4
 8026954:	00fff800 	.word	0x00fff800

08026958 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802695c:	ed2d 8b08 	vpush	{d8-d11}
 8026960:	b097      	sub	sp, #92	; 0x5c
 8026962:	eeb0 aa40 	vmov.f32	s20, s0
 8026966:	eef0 9a60 	vmov.f32	s19, s1
 802696a:	9214      	str	r2, [sp, #80]	; 0x50
 802696c:	eeb0 9a41 	vmov.f32	s18, s2
 8026970:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026972:	eeb0 8a62 	vmov.f32	s16, s5
 8026976:	9309      	str	r3, [sp, #36]	; 0x24
 8026978:	eef0 8a43 	vmov.f32	s17, s6
 802697c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8026980:	eef0 ba44 	vmov.f32	s23, s8
 8026984:	9015      	str	r0, [sp, #84]	; 0x54
 8026986:	eeb0 ba64 	vmov.f32	s22, s9
 802698a:	6850      	ldr	r0, [r2, #4]
 802698c:	eef0 aa45 	vmov.f32	s21, s10
 8026990:	910d      	str	r1, [sp, #52]	; 0x34
 8026992:	930f      	str	r3, [sp, #60]	; 0x3c
 8026994:	6812      	ldr	r2, [r2, #0]
 8026996:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802699a:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 802699e:	fb00 1303 	mla	r3, r0, r3, r1
 80269a2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80269a6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80269a8:	689b      	ldr	r3, [r3, #8]
 80269aa:	3301      	adds	r3, #1
 80269ac:	f023 0301 	bic.w	r3, r3, #1
 80269b0:	930a      	str	r3, [sp, #40]	; 0x28
 80269b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80269b4:	681f      	ldr	r7, [r3, #0]
 80269b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80269b8:	2b00      	cmp	r3, #0
 80269ba:	dc03      	bgt.n	80269c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80269bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80269be:	2b00      	cmp	r3, #0
 80269c0:	f340 8289 	ble.w	8026ed6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80269c4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80269c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80269ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80269ce:	1e48      	subs	r0, r1, #1
 80269d0:	f102 3cff 	add.w	ip, r2, #4294967295
 80269d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80269d6:	2b00      	cmp	r3, #0
 80269d8:	f340 80c5 	ble.w	8026b66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80269dc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80269e0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80269e4:	d406      	bmi.n	80269f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80269e6:	4586      	cmp	lr, r0
 80269e8:	da04      	bge.n	80269f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80269ea:	2b00      	cmp	r3, #0
 80269ec:	db02      	blt.n	80269f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80269ee:	4563      	cmp	r3, ip
 80269f0:	f2c0 80ba 	blt.w	8026b68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80269f4:	f11e 0e01 	adds.w	lr, lr, #1
 80269f8:	f100 80ab 	bmi.w	8026b52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80269fc:	4571      	cmp	r1, lr
 80269fe:	f2c0 80a8 	blt.w	8026b52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026a02:	3301      	adds	r3, #1
 8026a04:	f100 80a5 	bmi.w	8026b52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026a08:	429a      	cmp	r2, r3
 8026a0a:	f2c0 80a2 	blt.w	8026b52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a10:	46c8      	mov	r8, r9
 8026a12:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8026a16:	930e      	str	r3, [sp, #56]	; 0x38
 8026a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026a1a:	2b00      	cmp	r3, #0
 8026a1c:	f340 80c4 	ble.w	8026ba8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8026a20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026a22:	1430      	asrs	r0, r6, #16
 8026a24:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026a28:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026a2c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026a30:	1423      	asrs	r3, r4, #16
 8026a32:	f100 814f 	bmi.w	8026cd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026a36:	f10c 3bff 	add.w	fp, ip, #4294967295
 8026a3a:	455b      	cmp	r3, fp
 8026a3c:	f280 814a 	bge.w	8026cd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026a40:	2800      	cmp	r0, #0
 8026a42:	f2c0 8147 	blt.w	8026cd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026a46:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026a4a:	4558      	cmp	r0, fp
 8026a4c:	f280 8142 	bge.w	8026cd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026a50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026a52:	fb00 3305 	mla	r3, r0, r5, r3
 8026a56:	0858      	lsrs	r0, r3, #1
 8026a58:	07dd      	lsls	r5, r3, #31
 8026a5a:	f817 c000 	ldrb.w	ip, [r7, r0]
 8026a5e:	bf54      	ite	pl
 8026a60:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026a64:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026a68:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026a6c:	fa5f fc8c 	uxtb.w	ip, ip
 8026a70:	2a00      	cmp	r2, #0
 8026a72:	f000 80dd 	beq.w	8026c30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026a76:	1c58      	adds	r0, r3, #1
 8026a78:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026a7c:	07c0      	lsls	r0, r0, #31
 8026a7e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026a82:	bf54      	ite	pl
 8026a84:	f00e 0e0f 	andpl.w	lr, lr, #15
 8026a88:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026a8c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026a90:	fa5f f08e 	uxtb.w	r0, lr
 8026a94:	9010      	str	r0, [sp, #64]	; 0x40
 8026a96:	b1d9      	cbz	r1, 8026ad0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8026a98:	4453      	add	r3, sl
 8026a9a:	0858      	lsrs	r0, r3, #1
 8026a9c:	07dd      	lsls	r5, r3, #31
 8026a9e:	f103 0301 	add.w	r3, r3, #1
 8026aa2:	5c38      	ldrb	r0, [r7, r0]
 8026aa4:	bf54      	ite	pl
 8026aa6:	f000 000f 	andpl.w	r0, r0, #15
 8026aaa:	1100      	asrmi	r0, r0, #4
 8026aac:	07dd      	lsls	r5, r3, #31
 8026aae:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026ab2:	b2c0      	uxtb	r0, r0
 8026ab4:	900b      	str	r0, [sp, #44]	; 0x2c
 8026ab6:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8026aba:	f817 e000 	ldrb.w	lr, [r7, r0]
 8026abe:	bf54      	ite	pl
 8026ac0:	f00e 030f 	andpl.w	r3, lr, #15
 8026ac4:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8026ac8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026acc:	b2db      	uxtb	r3, r3
 8026ace:	9311      	str	r3, [sp, #68]	; 0x44
 8026ad0:	b292      	uxth	r2, r2
 8026ad2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026ad4:	b289      	uxth	r1, r1
 8026ad6:	fb02 f301 	mul.w	r3, r2, r1
 8026ada:	0112      	lsls	r2, r2, #4
 8026adc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8026ae0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8026ae4:	1ad2      	subs	r2, r2, r3
 8026ae6:	b289      	uxth	r1, r1
 8026ae8:	b292      	uxth	r2, r2
 8026aea:	1a40      	subs	r0, r0, r1
 8026aec:	436a      	muls	r2, r5
 8026aee:	b280      	uxth	r0, r0
 8026af0:	fb0c 2c00 	mla	ip, ip, r0, r2
 8026af4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026af6:	fb01 c102 	mla	r1, r1, r2, ip
 8026afa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026afc:	fb03 1302 	mla	r3, r3, r2, r1
 8026b00:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026b04:	b1db      	cbz	r3, 8026b3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026b06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026b08:	4353      	muls	r3, r2
 8026b0a:	1c5a      	adds	r2, r3, #1
 8026b0c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026b10:	4ac6      	ldr	r2, [pc, #792]	; (8026e2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8026b12:	121b      	asrs	r3, r3, #8
 8026b14:	6812      	ldr	r2, [r2, #0]
 8026b16:	2bff      	cmp	r3, #255	; 0xff
 8026b18:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8026b1c:	f040 8099 	bne.w	8026c52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8026b20:	0953      	lsrs	r3, r2, #5
 8026b22:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8026b26:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026b2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026b2e:	f02c 0c07 	bic.w	ip, ip, #7
 8026b32:	ea43 0c0c 	orr.w	ip, r3, ip
 8026b36:	ea4c 0202 	orr.w	r2, ip, r2
 8026b3a:	f8a8 2000 	strh.w	r2, [r8]
 8026b3e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026b40:	f108 0802 	add.w	r8, r8, #2
 8026b44:	441c      	add	r4, r3
 8026b46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026b48:	441e      	add	r6, r3
 8026b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026b4c:	3b01      	subs	r3, #1
 8026b4e:	930e      	str	r3, [sp, #56]	; 0x38
 8026b50:	e762      	b.n	8026a18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8026b52:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026b54:	f109 0902 	add.w	r9, r9, #2
 8026b58:	441c      	add	r4, r3
 8026b5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026b5c:	441e      	add	r6, r3
 8026b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b60:	3b01      	subs	r3, #1
 8026b62:	9309      	str	r3, [sp, #36]	; 0x24
 8026b64:	e736      	b.n	80269d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026b66:	d024      	beq.n	8026bb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b6a:	982b      	ldr	r0, [sp, #172]	; 0xac
 8026b6c:	3b01      	subs	r3, #1
 8026b6e:	fb00 4003 	mla	r0, r0, r3, r4
 8026b72:	1400      	asrs	r0, r0, #16
 8026b74:	f53f af4b 	bmi.w	8026a0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026b78:	3901      	subs	r1, #1
 8026b7a:	4288      	cmp	r0, r1
 8026b7c:	f6bf af47 	bge.w	8026a0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026b80:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026b82:	fb01 6303 	mla	r3, r1, r3, r6
 8026b86:	141b      	asrs	r3, r3, #16
 8026b88:	f53f af41 	bmi.w	8026a0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026b8c:	3a01      	subs	r2, #1
 8026b8e:	4293      	cmp	r3, r2
 8026b90:	f6bf af3d 	bge.w	8026a0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026b94:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8026b98:	46c8      	mov	r8, r9
 8026b9a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8026b9e:	930e      	str	r3, [sp, #56]	; 0x38
 8026ba0:	f1bb 0f00 	cmp.w	fp, #0
 8026ba4:	f300 80b7 	bgt.w	8026d16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8026ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026baa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026bae:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8026bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026bb4:	2b00      	cmp	r3, #0
 8026bb6:	f340 818e 	ble.w	8026ed6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8026bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026bbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026bc0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026bc4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026bc8:	eef0 6a48 	vmov.f32	s13, s16
 8026bcc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026bd0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026bd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026bd8:	ee16 4a90 	vmov	r4, s13
 8026bdc:	eef0 6a68 	vmov.f32	s13, s17
 8026be0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026be4:	ee16 6a90 	vmov	r6, s13
 8026be8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026bec:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026bf0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026bf4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026bf8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026bfc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026c00:	ee18 2a10 	vmov	r2, s16
 8026c04:	eeb0 8a47 	vmov.f32	s16, s14
 8026c08:	fb92 f3f3 	sdiv	r3, r2, r3
 8026c0c:	ee18 2a90 	vmov	r2, s17
 8026c10:	932b      	str	r3, [sp, #172]	; 0xac
 8026c12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026c14:	eef0 8a67 	vmov.f32	s17, s15
 8026c18:	fb92 f3f3 	sdiv	r3, r2, r3
 8026c1c:	932c      	str	r3, [sp, #176]	; 0xb0
 8026c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026c20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026c22:	3b01      	subs	r3, #1
 8026c24:	930d      	str	r3, [sp, #52]	; 0x34
 8026c26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026c28:	bf08      	it	eq
 8026c2a:	4613      	moveq	r3, r2
 8026c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8026c2e:	e6c2      	b.n	80269b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8026c30:	2900      	cmp	r1, #0
 8026c32:	f43f af4d 	beq.w	8026ad0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8026c36:	eb0a 0003 	add.w	r0, sl, r3
 8026c3a:	0843      	lsrs	r3, r0, #1
 8026c3c:	07c0      	lsls	r0, r0, #31
 8026c3e:	5cfb      	ldrb	r3, [r7, r3]
 8026c40:	bf54      	ite	pl
 8026c42:	f003 030f 	andpl.w	r3, r3, #15
 8026c46:	111b      	asrmi	r3, r3, #4
 8026c48:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026c4c:	b2db      	uxtb	r3, r3
 8026c4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8026c50:	e73e      	b.n	8026ad0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8026c52:	f8b8 e000 	ldrh.w	lr, [r8]
 8026c56:	fa1f fb83 	uxth.w	fp, r3
 8026c5a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8026c5e:	43db      	mvns	r3, r3
 8026c60:	ea4f 202e 	mov.w	r0, lr, asr #8
 8026c64:	fb11 f10b 	smulbb	r1, r1, fp
 8026c68:	b2db      	uxtb	r3, r3
 8026c6a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026c6e:	fa5f fc8c 	uxtb.w	ip, ip
 8026c72:	b2d2      	uxtb	r2, r2
 8026c74:	fb00 1003 	mla	r0, r0, r3, r1
 8026c78:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8026c7c:	fb1c fc0b 	smulbb	ip, ip, fp
 8026c80:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026c84:	b280      	uxth	r0, r0
 8026c86:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026c8a:	fb12 fb0b 	smulbb	fp, r2, fp
 8026c8e:	fa5f fe8e 	uxtb.w	lr, lr
 8026c92:	fb01 cc03 	mla	ip, r1, r3, ip
 8026c96:	fb0e bb03 	mla	fp, lr, r3, fp
 8026c9a:	1c43      	adds	r3, r0, #1
 8026c9c:	fa1f fc8c 	uxth.w	ip, ip
 8026ca0:	fa1f fb8b 	uxth.w	fp, fp
 8026ca4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026ca8:	f10c 0101 	add.w	r1, ip, #1
 8026cac:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8026cb0:	f10b 0001 	add.w	r0, fp, #1
 8026cb4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8026cb8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8026cbc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026cc0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8026cc4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026cc8:	4318      	orrs	r0, r3
 8026cca:	ea40 000c 	orr.w	r0, r0, ip
 8026cce:	f8a8 0000 	strh.w	r0, [r8]
 8026cd2:	e734      	b.n	8026b3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026cd4:	f113 0b01 	adds.w	fp, r3, #1
 8026cd8:	f53f af31 	bmi.w	8026b3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026cdc:	45dc      	cmp	ip, fp
 8026cde:	f6ff af2e 	blt.w	8026b3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026ce2:	f110 0b01 	adds.w	fp, r0, #1
 8026ce6:	f53f af2a 	bmi.w	8026b3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026cea:	45de      	cmp	lr, fp
 8026cec:	f6ff af27 	blt.w	8026b3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026cf0:	9302      	str	r3, [sp, #8]
 8026cf2:	fa0f f38e 	sxth.w	r3, lr
 8026cf6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026cf8:	9301      	str	r3, [sp, #4]
 8026cfa:	fa0f f38c 	sxth.w	r3, ip
 8026cfe:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026d02:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8026d06:	9300      	str	r3, [sp, #0]
 8026d08:	463a      	mov	r2, r7
 8026d0a:	4653      	mov	r3, sl
 8026d0c:	4641      	mov	r1, r8
 8026d0e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026d10:	f7ff fd2a 	bl	8026768 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8026d14:	e713      	b.n	8026b3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026d16:	1422      	asrs	r2, r4, #16
 8026d18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026d1a:	1433      	asrs	r3, r6, #16
 8026d1c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8026d20:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026d24:	fb05 2303 	mla	r3, r5, r3, r2
 8026d28:	085a      	lsrs	r2, r3, #1
 8026d2a:	07dd      	lsls	r5, r3, #31
 8026d2c:	5cba      	ldrb	r2, [r7, r2]
 8026d2e:	bf54      	ite	pl
 8026d30:	f002 020f 	andpl.w	r2, r2, #15
 8026d34:	1112      	asrmi	r2, r2, #4
 8026d36:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026d3a:	b2d2      	uxtb	r2, r2
 8026d3c:	2900      	cmp	r1, #0
 8026d3e:	d077      	beq.n	8026e30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026d40:	f103 0e01 	add.w	lr, r3, #1
 8026d44:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8026d48:	f01e 0f01 	tst.w	lr, #1
 8026d4c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026d50:	bf0c      	ite	eq
 8026d52:	f00c 0c0f 	andeq.w	ip, ip, #15
 8026d56:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8026d5a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026d5e:	fa5f f58c 	uxtb.w	r5, ip
 8026d62:	9512      	str	r5, [sp, #72]	; 0x48
 8026d64:	b308      	cbz	r0, 8026daa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026d66:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026d68:	442b      	add	r3, r5
 8026d6a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026d6e:	07dd      	lsls	r5, r3, #31
 8026d70:	f103 0301 	add.w	r3, r3, #1
 8026d74:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026d78:	bf54      	ite	pl
 8026d7a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026d7e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026d82:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026d86:	fa5f f58c 	uxtb.w	r5, ip
 8026d8a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026d8e:	950c      	str	r5, [sp, #48]	; 0x30
 8026d90:	07dd      	lsls	r5, r3, #31
 8026d92:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026d96:	bf54      	ite	pl
 8026d98:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026d9c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026da0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026da4:	fa5f f38c 	uxtb.w	r3, ip
 8026da8:	9313      	str	r3, [sp, #76]	; 0x4c
 8026daa:	b289      	uxth	r1, r1
 8026dac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026dae:	b280      	uxth	r0, r0
 8026db0:	fb01 f300 	mul.w	r3, r1, r0
 8026db4:	0109      	lsls	r1, r1, #4
 8026db6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8026dba:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8026dbe:	1ac9      	subs	r1, r1, r3
 8026dc0:	b280      	uxth	r0, r0
 8026dc2:	b289      	uxth	r1, r1
 8026dc4:	ebac 0c00 	sub.w	ip, ip, r0
 8026dc8:	4369      	muls	r1, r5
 8026dca:	fa1f fc8c 	uxth.w	ip, ip
 8026dce:	fb02 120c 	mla	r2, r2, ip, r1
 8026dd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026dd4:	fb00 2001 	mla	r0, r0, r1, r2
 8026dd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026dda:	fb03 0302 	mla	r3, r3, r2, r0
 8026dde:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026de2:	b1d3      	cbz	r3, 8026e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8026de4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026de6:	4353      	muls	r3, r2
 8026de8:	1c5a      	adds	r2, r3, #1
 8026dea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026dee:	4a0f      	ldr	r2, [pc, #60]	; (8026e2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8026df0:	121b      	asrs	r3, r3, #8
 8026df2:	6812      	ldr	r2, [r2, #0]
 8026df4:	2bff      	cmp	r3, #255	; 0xff
 8026df6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8026dfa:	d12d      	bne.n	8026e58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8026dfc:	0953      	lsrs	r3, r2, #5
 8026dfe:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8026e02:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026e06:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026e0a:	f02c 0c07 	bic.w	ip, ip, #7
 8026e0e:	ea43 0c0c 	orr.w	ip, r3, ip
 8026e12:	ea4c 0202 	orr.w	r2, ip, r2
 8026e16:	f8a8 2000 	strh.w	r2, [r8]
 8026e1a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026e1c:	f108 0802 	add.w	r8, r8, #2
 8026e20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026e24:	441c      	add	r4, r3
 8026e26:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026e28:	441e      	add	r6, r3
 8026e2a:	e6b9      	b.n	8026ba0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8026e2c:	2400aef4 	.word	0x2400aef4
 8026e30:	2800      	cmp	r0, #0
 8026e32:	d0ba      	beq.n	8026daa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026e34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026e36:	442b      	add	r3, r5
 8026e38:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026e3c:	07db      	lsls	r3, r3, #31
 8026e3e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026e42:	bf54      	ite	pl
 8026e44:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026e48:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026e4c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026e50:	fa5f f38c 	uxtb.w	r3, ip
 8026e54:	930c      	str	r3, [sp, #48]	; 0x30
 8026e56:	e7a8      	b.n	8026daa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026e58:	f8b8 e000 	ldrh.w	lr, [r8]
 8026e5c:	fa1f fa83 	uxth.w	sl, r3
 8026e60:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8026e64:	43db      	mvns	r3, r3
 8026e66:	ea4f 202e 	mov.w	r0, lr, asr #8
 8026e6a:	fb11 f10a 	smulbb	r1, r1, sl
 8026e6e:	b2db      	uxtb	r3, r3
 8026e70:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026e74:	b2d2      	uxtb	r2, r2
 8026e76:	fa5f fc8c 	uxtb.w	ip, ip
 8026e7a:	fb00 1003 	mla	r0, r0, r3, r1
 8026e7e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8026e82:	fb12 f20a 	smulbb	r2, r2, sl
 8026e86:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026e8a:	b280      	uxth	r0, r0
 8026e8c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026e90:	fb1c fc0a 	smulbb	ip, ip, sl
 8026e94:	fa5f fe8e 	uxtb.w	lr, lr
 8026e98:	fb0e 2203 	mla	r2, lr, r3, r2
 8026e9c:	fb01 cc03 	mla	ip, r1, r3, ip
 8026ea0:	1c43      	adds	r3, r0, #1
 8026ea2:	b292      	uxth	r2, r2
 8026ea4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026ea8:	1c51      	adds	r1, r2, #1
 8026eaa:	fa1f fc8c 	uxth.w	ip, ip
 8026eae:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026eb2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8026eb6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8026eba:	4308      	orrs	r0, r1
 8026ebc:	f10c 0101 	add.w	r1, ip, #1
 8026ec0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8026ec4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026ec8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026ecc:	ea40 000c 	orr.w	r0, r0, ip
 8026ed0:	f8a8 0000 	strh.w	r0, [r8]
 8026ed4:	e7a1      	b.n	8026e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8026ed6:	b017      	add	sp, #92	; 0x5c
 8026ed8:	ecbd 8b08 	vpop	{d8-d11}
 8026edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026ee0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8026ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026ee4:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8026ee8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8026eec:	2c00      	cmp	r4, #0
 8026eee:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8026ef2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8026ef6:	fb04 ce03 	mla	lr, r4, r3, ip
 8026efa:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8026efe:	db60      	blt.n	8026fc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8026f00:	45a1      	cmp	r9, r4
 8026f02:	dd5e      	ble.n	8026fc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8026f04:	f1bc 0f00 	cmp.w	ip, #0
 8026f08:	db59      	blt.n	8026fbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8026f0a:	45e0      	cmp	r8, ip
 8026f0c:	dd57      	ble.n	8026fbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8026f0e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8026f12:	f01e 0f01 	tst.w	lr, #1
 8026f16:	5c16      	ldrb	r6, [r2, r0]
 8026f18:	bf0c      	ite	eq
 8026f1a:	f006 060f 	andeq.w	r6, r6, #15
 8026f1e:	1136      	asrne	r6, r6, #4
 8026f20:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026f24:	b2f6      	uxtb	r6, r6
 8026f26:	f11c 0001 	adds.w	r0, ip, #1
 8026f2a:	d44d      	bmi.n	8026fc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8026f2c:	4580      	cmp	r8, r0
 8026f2e:	dd4b      	ble.n	8026fc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8026f30:	2d00      	cmp	r5, #0
 8026f32:	d04b      	beq.n	8026fcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8026f34:	f10e 0a01 	add.w	sl, lr, #1
 8026f38:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8026f3c:	f01a 0f01 	tst.w	sl, #1
 8026f40:	5c10      	ldrb	r0, [r2, r0]
 8026f42:	bf0c      	ite	eq
 8026f44:	f000 000f 	andeq.w	r0, r0, #15
 8026f48:	1100      	asrne	r0, r0, #4
 8026f4a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026f4e:	b2c0      	uxtb	r0, r0
 8026f50:	3401      	adds	r4, #1
 8026f52:	d43f      	bmi.n	8026fd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8026f54:	45a1      	cmp	r9, r4
 8026f56:	dd3d      	ble.n	8026fd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8026f58:	2f00      	cmp	r7, #0
 8026f5a:	f000 8093 	beq.w	8027084 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8026f5e:	f1bc 0f00 	cmp.w	ip, #0
 8026f62:	db35      	blt.n	8026fd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8026f64:	45e0      	cmp	r8, ip
 8026f66:	dd33      	ble.n	8026fd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8026f68:	eb03 090e 	add.w	r9, r3, lr
 8026f6c:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8026f70:	f019 0f01 	tst.w	r9, #1
 8026f74:	5d14      	ldrb	r4, [r2, r4]
 8026f76:	bf0c      	ite	eq
 8026f78:	f004 040f 	andeq.w	r4, r4, #15
 8026f7c:	1124      	asrne	r4, r4, #4
 8026f7e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026f82:	b2e4      	uxtb	r4, r4
 8026f84:	f11c 0c01 	adds.w	ip, ip, #1
 8026f88:	d427      	bmi.n	8026fda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8026f8a:	45e0      	cmp	r8, ip
 8026f8c:	dd25      	ble.n	8026fda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8026f8e:	b335      	cbz	r5, 8026fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8026f90:	3301      	adds	r3, #1
 8026f92:	449e      	add	lr, r3
 8026f94:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026f98:	f01e 0f01 	tst.w	lr, #1
 8026f9c:	5cd2      	ldrb	r2, [r2, r3]
 8026f9e:	bf0c      	ite	eq
 8026fa0:	f002 020f 	andeq.w	r2, r2, #15
 8026fa4:	1112      	asrne	r2, r2, #4
 8026fa6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026faa:	b2d3      	uxtb	r3, r2
 8026fac:	2d0f      	cmp	r5, #15
 8026fae:	d917      	bls.n	8026fe0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8026fb0:	4b37      	ldr	r3, [pc, #220]	; (8027090 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 8026fb2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8026fb6:	4a37      	ldr	r2, [pc, #220]	; (8027094 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 8026fb8:	4837      	ldr	r0, [pc, #220]	; (8027098 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8026fba:	f000 fc4f 	bl	802785c <__assert_func>
 8026fbe:	2600      	movs	r6, #0
 8026fc0:	e7b1      	b.n	8026f26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8026fc2:	2000      	movs	r0, #0
 8026fc4:	4606      	mov	r6, r0
 8026fc6:	e7c3      	b.n	8026f50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8026fc8:	2000      	movs	r0, #0
 8026fca:	e7c1      	b.n	8026f50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8026fcc:	4628      	mov	r0, r5
 8026fce:	e7bf      	b.n	8026f50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8026fd0:	2400      	movs	r4, #0
 8026fd2:	e7d7      	b.n	8026f84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8026fd4:	2300      	movs	r3, #0
 8026fd6:	461c      	mov	r4, r3
 8026fd8:	e7e8      	b.n	8026fac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8026fda:	2300      	movs	r3, #0
 8026fdc:	e7e6      	b.n	8026fac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8026fde:	462b      	mov	r3, r5
 8026fe0:	2f0f      	cmp	r7, #15
 8026fe2:	d8e5      	bhi.n	8026fb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8026fe4:	b2ad      	uxth	r5, r5
 8026fe6:	b2bf      	uxth	r7, r7
 8026fe8:	fb05 fc07 	mul.w	ip, r5, r7
 8026fec:	012d      	lsls	r5, r5, #4
 8026fee:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8026ff2:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8026ff6:	eba5 050c 	sub.w	r5, r5, ip
 8026ffa:	b2bf      	uxth	r7, r7
 8026ffc:	b2ad      	uxth	r5, r5
 8026ffe:	1bd2      	subs	r2, r2, r7
 8027000:	4368      	muls	r0, r5
 8027002:	b292      	uxth	r2, r2
 8027004:	fb06 0002 	mla	r0, r6, r2, r0
 8027008:	fb07 0404 	mla	r4, r7, r4, r0
 802700c:	fb0c 4303 	mla	r3, ip, r3, r4
 8027010:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027014:	b3a3      	cbz	r3, 8027080 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8027016:	4a21      	ldr	r2, [pc, #132]	; (802709c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8027018:	880e      	ldrh	r6, [r1, #0]
 802701a:	6815      	ldr	r5, [r2, #0]
 802701c:	b29a      	uxth	r2, r3
 802701e:	1234      	asrs	r4, r6, #8
 8027020:	43db      	mvns	r3, r3
 8027022:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8027026:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802702a:	b2db      	uxtb	r3, r3
 802702c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8027030:	fb10 f002 	smulbb	r0, r0, r2
 8027034:	b2ed      	uxtb	r5, r5
 8027036:	fb17 f702 	smulbb	r7, r7, r2
 802703a:	fb04 0403 	mla	r4, r4, r3, r0
 802703e:	10f0      	asrs	r0, r6, #3
 8027040:	fb15 f202 	smulbb	r2, r5, r2
 8027044:	00f6      	lsls	r6, r6, #3
 8027046:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802704a:	b2a4      	uxth	r4, r4
 802704c:	b2f6      	uxtb	r6, r6
 802704e:	fb00 7003 	mla	r0, r0, r3, r7
 8027052:	fb06 2303 	mla	r3, r6, r3, r2
 8027056:	b280      	uxth	r0, r0
 8027058:	b29a      	uxth	r2, r3
 802705a:	1c63      	adds	r3, r4, #1
 802705c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027060:	1c53      	adds	r3, r2, #1
 8027062:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027066:	1c42      	adds	r2, r0, #1
 8027068:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802706c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027070:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027074:	0940      	lsrs	r0, r0, #5
 8027076:	4323      	orrs	r3, r4
 8027078:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802707c:	4303      	orrs	r3, r0
 802707e:	800b      	strh	r3, [r1, #0]
 8027080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027084:	2d0f      	cmp	r5, #15
 8027086:	d893      	bhi.n	8026fb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8027088:	463b      	mov	r3, r7
 802708a:	463c      	mov	r4, r7
 802708c:	e7aa      	b.n	8026fe4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802708e:	bf00      	nop
 8027090:	0802bded 	.word	0x0802bded
 8027094:	0802c3ba 	.word	0x0802c3ba
 8027098:	0802be71 	.word	0x0802be71
 802709c:	2400aef4 	.word	0x2400aef4

080270a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80270a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270a4:	ed2d 8b08 	vpush	{d8-d11}
 80270a8:	b093      	sub	sp, #76	; 0x4c
 80270aa:	461d      	mov	r5, r3
 80270ac:	eeb0 aa40 	vmov.f32	s20, s0
 80270b0:	920c      	str	r2, [sp, #48]	; 0x30
 80270b2:	eef0 9a60 	vmov.f32	s19, s1
 80270b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80270b8:	eeb0 9a41 	vmov.f32	s18, s2
 80270bc:	9011      	str	r0, [sp, #68]	; 0x44
 80270be:	eeb0 8a62 	vmov.f32	s16, s5
 80270c2:	6850      	ldr	r0, [r2, #4]
 80270c4:	eef0 8a43 	vmov.f32	s17, s6
 80270c8:	9107      	str	r1, [sp, #28]
 80270ca:	eef0 ba44 	vmov.f32	s23, s8
 80270ce:	6812      	ldr	r2, [r2, #0]
 80270d0:	eeb0 ba64 	vmov.f32	s22, s9
 80270d4:	eef0 aa45 	vmov.f32	s21, s10
 80270d8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80270dc:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80270e0:	fb00 1303 	mla	r3, r0, r3, r1
 80270e4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80270e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80270ea:	689b      	ldr	r3, [r3, #8]
 80270ec:	3301      	adds	r3, #1
 80270ee:	f023 0301 	bic.w	r3, r3, #1
 80270f2:	9306      	str	r3, [sp, #24]
 80270f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80270f6:	681f      	ldr	r7, [r3, #0]
 80270f8:	9b07      	ldr	r3, [sp, #28]
 80270fa:	2b00      	cmp	r3, #0
 80270fc:	dc03      	bgt.n	8027106 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80270fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027100:	2b00      	cmp	r3, #0
 8027102:	f340 8267 	ble.w	80275d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8027106:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027108:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802710c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027110:	1e48      	subs	r0, r1, #1
 8027112:	f102 3cff 	add.w	ip, r2, #4294967295
 8027116:	2d00      	cmp	r5, #0
 8027118:	f340 80b7 	ble.w	802728a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802711c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027120:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027124:	d406      	bmi.n	8027134 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027126:	4586      	cmp	lr, r0
 8027128:	da04      	bge.n	8027134 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802712a:	2b00      	cmp	r3, #0
 802712c:	db02      	blt.n	8027134 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802712e:	4563      	cmp	r3, ip
 8027130:	f2c0 80ac 	blt.w	802728c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8027134:	f11e 0e01 	adds.w	lr, lr, #1
 8027138:	f100 809f 	bmi.w	802727a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802713c:	4571      	cmp	r1, lr
 802713e:	f2c0 809c 	blt.w	802727a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8027142:	3301      	adds	r3, #1
 8027144:	f100 8099 	bmi.w	802727a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8027148:	429a      	cmp	r2, r3
 802714a:	f2c0 8096 	blt.w	802727a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802714e:	46c8      	mov	r8, r9
 8027150:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8027154:	9509      	str	r5, [sp, #36]	; 0x24
 8027156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027158:	2b00      	cmp	r3, #0
 802715a:	f340 80b5 	ble.w	80272c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802715e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8027162:	1430      	asrs	r0, r6, #16
 8027164:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027168:	9308      	str	r3, [sp, #32]
 802716a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802716c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027170:	1423      	asrs	r3, r4, #16
 8027172:	f100 813f 	bmi.w	80273f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8027176:	f10c 3bff 	add.w	fp, ip, #4294967295
 802717a:	455b      	cmp	r3, fp
 802717c:	f280 813a 	bge.w	80273f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8027180:	2800      	cmp	r0, #0
 8027182:	f2c0 8137 	blt.w	80273f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8027186:	f10e 3bff 	add.w	fp, lr, #4294967295
 802718a:	4558      	cmp	r0, fp
 802718c:	f280 8132 	bge.w	80273f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8027190:	9a06      	ldr	r2, [sp, #24]
 8027192:	fb00 3302 	mla	r3, r0, r2, r3
 8027196:	0858      	lsrs	r0, r3, #1
 8027198:	07da      	lsls	r2, r3, #31
 802719a:	9a08      	ldr	r2, [sp, #32]
 802719c:	f817 c000 	ldrb.w	ip, [r7, r0]
 80271a0:	bf54      	ite	pl
 80271a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80271a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80271aa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80271ae:	fa5f fc8c 	uxtb.w	ip, ip
 80271b2:	2a00      	cmp	r2, #0
 80271b4:	f000 80cc 	beq.w	8027350 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80271b8:	1c58      	adds	r0, r3, #1
 80271ba:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80271be:	07c0      	lsls	r0, r0, #31
 80271c0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80271c4:	bf54      	ite	pl
 80271c6:	f00e 0e0f 	andpl.w	lr, lr, #15
 80271ca:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80271ce:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80271d2:	fa5f fe8e 	uxtb.w	lr, lr
 80271d6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80271da:	b1b9      	cbz	r1, 802720c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80271dc:	4453      	add	r3, sl
 80271de:	0858      	lsrs	r0, r3, #1
 80271e0:	07da      	lsls	r2, r3, #31
 80271e2:	5c38      	ldrb	r0, [r7, r0]
 80271e4:	bf54      	ite	pl
 80271e6:	f000 000f 	andpl.w	r0, r0, #15
 80271ea:	1100      	asrmi	r0, r0, #4
 80271ec:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80271f0:	b2c0      	uxtb	r0, r0
 80271f2:	900a      	str	r0, [sp, #40]	; 0x28
 80271f4:	1c58      	adds	r0, r3, #1
 80271f6:	0843      	lsrs	r3, r0, #1
 80271f8:	07c2      	lsls	r2, r0, #31
 80271fa:	5cfb      	ldrb	r3, [r7, r3]
 80271fc:	bf54      	ite	pl
 80271fe:	f003 030f 	andpl.w	r3, r3, #15
 8027202:	111b      	asrmi	r3, r3, #4
 8027204:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027208:	b2db      	uxtb	r3, r3
 802720a:	930e      	str	r3, [sp, #56]	; 0x38
 802720c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8027210:	b289      	uxth	r1, r1
 8027212:	fb02 f301 	mul.w	r3, r2, r1
 8027216:	0112      	lsls	r2, r2, #4
 8027218:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802721c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8027220:	1ad2      	subs	r2, r2, r3
 8027222:	b289      	uxth	r1, r1
 8027224:	b292      	uxth	r2, r2
 8027226:	1a40      	subs	r0, r0, r1
 8027228:	fa1f fe80 	uxth.w	lr, r0
 802722c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802722e:	4342      	muls	r2, r0
 8027230:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8027234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027236:	fb01 c102 	mla	r1, r1, r2, ip
 802723a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802723c:	fb03 1302 	mla	r3, r3, r2, r1
 8027240:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027244:	2bff      	cmp	r3, #255	; 0xff
 8027246:	f040 8094 	bne.w	8027372 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802724a:	4bbf      	ldr	r3, [pc, #764]	; (8027548 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802724c:	681a      	ldr	r2, [r3, #0]
 802724e:	4bbf      	ldr	r3, [pc, #764]	; (802754c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8027250:	0951      	lsrs	r1, r2, #5
 8027252:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8027256:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802725a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802725e:	430b      	orrs	r3, r1
 8027260:	4313      	orrs	r3, r2
 8027262:	f8a8 3000 	strh.w	r3, [r8]
 8027266:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027268:	f108 0802 	add.w	r8, r8, #2
 802726c:	441c      	add	r4, r3
 802726e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027270:	441e      	add	r6, r3
 8027272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027274:	3b01      	subs	r3, #1
 8027276:	9309      	str	r3, [sp, #36]	; 0x24
 8027278:	e76d      	b.n	8027156 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802727a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802727c:	3d01      	subs	r5, #1
 802727e:	f109 0902 	add.w	r9, r9, #2
 8027282:	441c      	add	r4, r3
 8027284:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027286:	441e      	add	r6, r3
 8027288:	e745      	b.n	8027116 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802728a:	d021      	beq.n	80272d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802728c:	1e6b      	subs	r3, r5, #1
 802728e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027290:	fb00 4003 	mla	r0, r0, r3, r4
 8027294:	1400      	asrs	r0, r0, #16
 8027296:	f53f af5a 	bmi.w	802714e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802729a:	3901      	subs	r1, #1
 802729c:	4288      	cmp	r0, r1
 802729e:	f6bf af56 	bge.w	802714e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80272a2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80272a4:	fb01 6303 	mla	r3, r1, r3, r6
 80272a8:	141b      	asrs	r3, r3, #16
 80272aa:	f53f af50 	bmi.w	802714e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80272ae:	3a01      	subs	r2, #1
 80272b0:	4293      	cmp	r3, r2
 80272b2:	f6bf af4c 	bge.w	802714e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80272b6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80272ba:	46a8      	mov	r8, r5
 80272bc:	46ce      	mov	lr, r9
 80272be:	9308      	str	r3, [sp, #32]
 80272c0:	f1b8 0f00 	cmp.w	r8, #0
 80272c4:	f300 80b6 	bgt.w	8027434 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80272c8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80272cc:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80272d0:	9b07      	ldr	r3, [sp, #28]
 80272d2:	2b00      	cmp	r3, #0
 80272d4:	f340 817e 	ble.w	80275d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 80272d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80272dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80272de:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80272e2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80272e6:	eef0 6a48 	vmov.f32	s13, s16
 80272ea:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80272ee:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80272f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80272f6:	ee16 4a90 	vmov	r4, s13
 80272fa:	eef0 6a68 	vmov.f32	s13, s17
 80272fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027302:	ee16 6a90 	vmov	r6, s13
 8027306:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802730a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802730e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027312:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027316:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802731a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802731e:	ee18 2a10 	vmov	r2, s16
 8027322:	eeb0 8a47 	vmov.f32	s16, s14
 8027326:	fb92 f3f3 	sdiv	r3, r2, r3
 802732a:	ee18 2a90 	vmov	r2, s17
 802732e:	9327      	str	r3, [sp, #156]	; 0x9c
 8027330:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027332:	eef0 8a67 	vmov.f32	s17, s15
 8027336:	fb92 f3f3 	sdiv	r3, r2, r3
 802733a:	9328      	str	r3, [sp, #160]	; 0xa0
 802733c:	9b07      	ldr	r3, [sp, #28]
 802733e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027340:	3b01      	subs	r3, #1
 8027342:	9307      	str	r3, [sp, #28]
 8027344:	bf08      	it	eq
 8027346:	4615      	moveq	r5, r2
 8027348:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802734a:	bf18      	it	ne
 802734c:	461d      	movne	r5, r3
 802734e:	e6d3      	b.n	80270f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8027350:	2900      	cmp	r1, #0
 8027352:	f43f af5b 	beq.w	802720c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8027356:	eb0a 0003 	add.w	r0, sl, r3
 802735a:	0843      	lsrs	r3, r0, #1
 802735c:	07c0      	lsls	r0, r0, #31
 802735e:	5cfb      	ldrb	r3, [r7, r3]
 8027360:	bf54      	ite	pl
 8027362:	f003 030f 	andpl.w	r3, r3, #15
 8027366:	111b      	asrmi	r3, r3, #4
 8027368:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802736c:	b2db      	uxtb	r3, r3
 802736e:	930a      	str	r3, [sp, #40]	; 0x28
 8027370:	e74c      	b.n	802720c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8027372:	2b00      	cmp	r3, #0
 8027374:	f43f af77 	beq.w	8027266 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8027378:	4a73      	ldr	r2, [pc, #460]	; (8027548 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802737a:	fa1f fe83 	uxth.w	lr, r3
 802737e:	f8b8 c000 	ldrh.w	ip, [r8]
 8027382:	43db      	mvns	r3, r3
 8027384:	6810      	ldr	r0, [r2, #0]
 8027386:	ea4f 212c 	mov.w	r1, ip, asr #8
 802738a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802738e:	b2db      	uxtb	r3, r3
 8027390:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027394:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8027398:	fb12 f20e 	smulbb	r2, r2, lr
 802739c:	b2c0      	uxtb	r0, r0
 802739e:	fb1b fb0e 	smulbb	fp, fp, lr
 80273a2:	fb01 2103 	mla	r1, r1, r3, r2
 80273a6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80273aa:	fb10 fe0e 	smulbb	lr, r0, lr
 80273ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80273b2:	b289      	uxth	r1, r1
 80273b4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80273b8:	fa5f fc8c 	uxtb.w	ip, ip
 80273bc:	fb02 b203 	mla	r2, r2, r3, fp
 80273c0:	1c48      	adds	r0, r1, #1
 80273c2:	fb0c e303 	mla	r3, ip, r3, lr
 80273c6:	b292      	uxth	r2, r2
 80273c8:	b29b      	uxth	r3, r3
 80273ca:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80273ce:	f102 0b01 	add.w	fp, r2, #1
 80273d2:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80273d6:	1c59      	adds	r1, r3, #1
 80273d8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80273dc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80273e0:	0952      	lsrs	r2, r2, #5
 80273e2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80273e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80273ea:	4301      	orrs	r1, r0
 80273ec:	4311      	orrs	r1, r2
 80273ee:	f8a8 1000 	strh.w	r1, [r8]
 80273f2:	e738      	b.n	8027266 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80273f4:	f113 0b01 	adds.w	fp, r3, #1
 80273f8:	f53f af35 	bmi.w	8027266 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80273fc:	45dc      	cmp	ip, fp
 80273fe:	f6ff af32 	blt.w	8027266 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8027402:	f110 0b01 	adds.w	fp, r0, #1
 8027406:	f53f af2e 	bmi.w	8027266 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802740a:	45de      	cmp	lr, fp
 802740c:	f6ff af2b 	blt.w	8027266 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8027410:	9302      	str	r3, [sp, #8]
 8027412:	fa0f f38e 	sxth.w	r3, lr
 8027416:	9a08      	ldr	r2, [sp, #32]
 8027418:	9301      	str	r3, [sp, #4]
 802741a:	fa0f f38c 	sxth.w	r3, ip
 802741e:	9105      	str	r1, [sp, #20]
 8027420:	4641      	mov	r1, r8
 8027422:	9300      	str	r3, [sp, #0]
 8027424:	4653      	mov	r3, sl
 8027426:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802742a:	463a      	mov	r2, r7
 802742c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802742e:	f7ff fd57 	bl	8026ee0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8027432:	e718      	b.n	8027266 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8027434:	1422      	asrs	r2, r4, #16
 8027436:	9906      	ldr	r1, [sp, #24]
 8027438:	1433      	asrs	r3, r6, #16
 802743a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802743e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027442:	fb01 2303 	mla	r3, r1, r3, r2
 8027446:	085a      	lsrs	r2, r3, #1
 8027448:	07d9      	lsls	r1, r3, #31
 802744a:	5cba      	ldrb	r2, [r7, r2]
 802744c:	bf54      	ite	pl
 802744e:	f002 020f 	andpl.w	r2, r2, #15
 8027452:	1112      	asrmi	r2, r2, #4
 8027454:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027458:	b2d2      	uxtb	r2, r2
 802745a:	2800      	cmp	r0, #0
 802745c:	d063      	beq.n	8027526 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802745e:	f103 0a01 	add.w	sl, r3, #1
 8027462:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8027466:	f01a 0f01 	tst.w	sl, #1
 802746a:	5c79      	ldrb	r1, [r7, r1]
 802746c:	bf0c      	ite	eq
 802746e:	f001 010f 	andeq.w	r1, r1, #15
 8027472:	1109      	asrne	r1, r1, #4
 8027474:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027478:	b2c9      	uxtb	r1, r1
 802747a:	910f      	str	r1, [sp, #60]	; 0x3c
 802747c:	f1bc 0f00 	cmp.w	ip, #0
 8027480:	d01a      	beq.n	80274b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8027482:	9908      	ldr	r1, [sp, #32]
 8027484:	440b      	add	r3, r1
 8027486:	0859      	lsrs	r1, r3, #1
 8027488:	f013 0f01 	tst.w	r3, #1
 802748c:	f103 0301 	add.w	r3, r3, #1
 8027490:	5c79      	ldrb	r1, [r7, r1]
 8027492:	bf0c      	ite	eq
 8027494:	f001 010f 	andeq.w	r1, r1, #15
 8027498:	1109      	asrne	r1, r1, #4
 802749a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802749e:	b2c9      	uxtb	r1, r1
 80274a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80274a2:	0859      	lsrs	r1, r3, #1
 80274a4:	07db      	lsls	r3, r3, #31
 80274a6:	5c79      	ldrb	r1, [r7, r1]
 80274a8:	bf54      	ite	pl
 80274aa:	f001 010f 	andpl.w	r1, r1, #15
 80274ae:	1109      	asrmi	r1, r1, #4
 80274b0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80274b4:	b2c9      	uxtb	r1, r1
 80274b6:	9110      	str	r1, [sp, #64]	; 0x40
 80274b8:	b280      	uxth	r0, r0
 80274ba:	fa1f fc8c 	uxth.w	ip, ip
 80274be:	fb00 f30c 	mul.w	r3, r0, ip
 80274c2:	0100      	lsls	r0, r0, #4
 80274c4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80274c8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80274cc:	1ac0      	subs	r0, r0, r3
 80274ce:	fa1f fc8c 	uxth.w	ip, ip
 80274d2:	b280      	uxth	r0, r0
 80274d4:	eba1 010c 	sub.w	r1, r1, ip
 80274d8:	fa1f fa81 	uxth.w	sl, r1
 80274dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80274de:	4348      	muls	r0, r1
 80274e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80274e2:	fb02 020a 	mla	r2, r2, sl, r0
 80274e6:	fb0c 2c01 	mla	ip, ip, r1, r2
 80274ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80274ec:	fb03 c302 	mla	r3, r3, r2, ip
 80274f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80274f4:	2bff      	cmp	r3, #255	; 0xff
 80274f6:	d12b      	bne.n	8027550 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80274f8:	4b13      	ldr	r3, [pc, #76]	; (8027548 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 80274fa:	681a      	ldr	r2, [r3, #0]
 80274fc:	4b13      	ldr	r3, [pc, #76]	; (802754c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80274fe:	0951      	lsrs	r1, r2, #5
 8027500:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8027504:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027508:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802750c:	430b      	orrs	r3, r1
 802750e:	4313      	orrs	r3, r2
 8027510:	f8ae 3000 	strh.w	r3, [lr]
 8027514:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027516:	f10e 0e02 	add.w	lr, lr, #2
 802751a:	f108 38ff 	add.w	r8, r8, #4294967295
 802751e:	441c      	add	r4, r3
 8027520:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027522:	441e      	add	r6, r3
 8027524:	e6cc      	b.n	80272c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8027526:	f1bc 0f00 	cmp.w	ip, #0
 802752a:	d0c5      	beq.n	80274b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802752c:	9908      	ldr	r1, [sp, #32]
 802752e:	440b      	add	r3, r1
 8027530:	0859      	lsrs	r1, r3, #1
 8027532:	07db      	lsls	r3, r3, #31
 8027534:	5c79      	ldrb	r1, [r7, r1]
 8027536:	bf54      	ite	pl
 8027538:	f001 010f 	andpl.w	r1, r1, #15
 802753c:	1109      	asrmi	r1, r1, #4
 802753e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027542:	b2c9      	uxtb	r1, r1
 8027544:	910b      	str	r1, [sp, #44]	; 0x2c
 8027546:	e7b7      	b.n	80274b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8027548:	2400aef4 	.word	0x2400aef4
 802754c:	fffff800 	.word	0xfffff800
 8027550:	2b00      	cmp	r3, #0
 8027552:	d0df      	beq.n	8027514 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8027554:	4a22      	ldr	r2, [pc, #136]	; (80275e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 8027556:	fa1f fa83 	uxth.w	sl, r3
 802755a:	f8be c000 	ldrh.w	ip, [lr]
 802755e:	43db      	mvns	r3, r3
 8027560:	6810      	ldr	r0, [r2, #0]
 8027562:	ea4f 212c 	mov.w	r1, ip, asr #8
 8027566:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802756a:	b2db      	uxtb	r3, r3
 802756c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027570:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8027574:	fb12 f20a 	smulbb	r2, r2, sl
 8027578:	b2c0      	uxtb	r0, r0
 802757a:	fb1b fb0a 	smulbb	fp, fp, sl
 802757e:	fb01 2103 	mla	r1, r1, r3, r2
 8027582:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027586:	fb10 f00a 	smulbb	r0, r0, sl
 802758a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802758e:	b289      	uxth	r1, r1
 8027590:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027594:	fa5f fc8c 	uxtb.w	ip, ip
 8027598:	fb02 b203 	mla	r2, r2, r3, fp
 802759c:	fb0c 0003 	mla	r0, ip, r3, r0
 80275a0:	1c4b      	adds	r3, r1, #1
 80275a2:	b292      	uxth	r2, r2
 80275a4:	b280      	uxth	r0, r0
 80275a6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80275aa:	f100 0b01 	add.w	fp, r0, #1
 80275ae:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80275b2:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80275b6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80275ba:	ea4b 0101 	orr.w	r1, fp, r1
 80275be:	f102 0b01 	add.w	fp, r2, #1
 80275c2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80275c6:	0952      	lsrs	r2, r2, #5
 80275c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80275cc:	4311      	orrs	r1, r2
 80275ce:	f8ae 1000 	strh.w	r1, [lr]
 80275d2:	e79f      	b.n	8027514 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 80275d4:	b013      	add	sp, #76	; 0x4c
 80275d6:	ecbd 8b08 	vpop	{d8-d11}
 80275da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275de:	bf00      	nop
 80275e0:	2400aef4 	.word	0x2400aef4

080275e4 <CRC_Lock>:
 80275e4:	4a20      	ldr	r2, [pc, #128]	; (8027668 <CRC_Lock+0x84>)
 80275e6:	b530      	push	{r4, r5, lr}
 80275e8:	6813      	ldr	r3, [r2, #0]
 80275ea:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80275ee:	f24c 2540 	movw	r5, #49728	; 0xc240
 80275f2:	f023 0301 	bic.w	r3, r3, #1
 80275f6:	6013      	str	r3, [r2, #0]
 80275f8:	4b1c      	ldr	r3, [pc, #112]	; (802766c <CRC_Lock+0x88>)
 80275fa:	681a      	ldr	r2, [r3, #0]
 80275fc:	4022      	ands	r2, r4
 80275fe:	42aa      	cmp	r2, r5
 8027600:	d005      	beq.n	802760e <CRC_Lock+0x2a>
 8027602:	681b      	ldr	r3, [r3, #0]
 8027604:	f24c 2270 	movw	r2, #49776	; 0xc270
 8027608:	4023      	ands	r3, r4
 802760a:	4293      	cmp	r3, r2
 802760c:	d124      	bne.n	8027658 <CRC_Lock+0x74>
 802760e:	4b18      	ldr	r3, [pc, #96]	; (8027670 <CRC_Lock+0x8c>)
 8027610:	681b      	ldr	r3, [r3, #0]
 8027612:	bb0b      	cbnz	r3, 8027658 <CRC_Lock+0x74>
 8027614:	4b17      	ldr	r3, [pc, #92]	; (8027674 <CRC_Lock+0x90>)
 8027616:	681a      	ldr	r2, [r3, #0]
 8027618:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802761c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8027620:	d00d      	beq.n	802763e <CRC_Lock+0x5a>
 8027622:	681a      	ldr	r2, [r3, #0]
 8027624:	f240 4483 	movw	r4, #1155	; 0x483
 8027628:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802762c:	42a2      	cmp	r2, r4
 802762e:	d006      	beq.n	802763e <CRC_Lock+0x5a>
 8027630:	681b      	ldr	r3, [r3, #0]
 8027632:	f240 4285 	movw	r2, #1157	; 0x485
 8027636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802763a:	4293      	cmp	r3, r2
 802763c:	d10c      	bne.n	8027658 <CRC_Lock+0x74>
 802763e:	4b0e      	ldr	r3, [pc, #56]	; (8027678 <CRC_Lock+0x94>)
 8027640:	2201      	movs	r2, #1
 8027642:	601a      	str	r2, [r3, #0]
 8027644:	681a      	ldr	r2, [r3, #0]
 8027646:	2a00      	cmp	r2, #0
 8027648:	d1fc      	bne.n	8027644 <CRC_Lock+0x60>
 802764a:	4b0c      	ldr	r3, [pc, #48]	; (802767c <CRC_Lock+0x98>)
 802764c:	6018      	str	r0, [r3, #0]
 802764e:	6818      	ldr	r0, [r3, #0]
 8027650:	1a43      	subs	r3, r0, r1
 8027652:	4258      	negs	r0, r3
 8027654:	4158      	adcs	r0, r3
 8027656:	bd30      	pop	{r4, r5, pc}
 8027658:	4b09      	ldr	r3, [pc, #36]	; (8027680 <CRC_Lock+0x9c>)
 802765a:	2201      	movs	r2, #1
 802765c:	601a      	str	r2, [r3, #0]
 802765e:	681a      	ldr	r2, [r3, #0]
 8027660:	2a00      	cmp	r2, #0
 8027662:	d1fc      	bne.n	802765e <CRC_Lock+0x7a>
 8027664:	4b07      	ldr	r3, [pc, #28]	; (8027684 <CRC_Lock+0xa0>)
 8027666:	e7f1      	b.n	802764c <CRC_Lock+0x68>
 8027668:	e0002000 	.word	0xe0002000
 802766c:	e000ed00 	.word	0xe000ed00
 8027670:	e0042000 	.word	0xe0042000
 8027674:	5c001000 	.word	0x5c001000
 8027678:	58024c08 	.word	0x58024c08
 802767c:	58024c00 	.word	0x58024c00
 8027680:	40023008 	.word	0x40023008
 8027684:	40023000 	.word	0x40023000

08027688 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8027688:	6101      	str	r1, [r0, #16]
 802768a:	4770      	bx	lr

0802768c <_ZN8touchgfx8Gestures4tickEv>:
 802768c:	7b83      	ldrb	r3, [r0, #14]
 802768e:	b14b      	cbz	r3, 80276a4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8027690:	8903      	ldrh	r3, [r0, #8]
 8027692:	3301      	adds	r3, #1
 8027694:	b29b      	uxth	r3, r3
 8027696:	2b07      	cmp	r3, #7
 8027698:	8103      	strh	r3, [r0, #8]
 802769a:	bf81      	itttt	hi
 802769c:	2300      	movhi	r3, #0
 802769e:	8143      	strhhi	r3, [r0, #10]
 80276a0:	8183      	strhhi	r3, [r0, #12]
 80276a2:	7383      	strbhi	r3, [r0, #14]
 80276a4:	4770      	bx	lr
	...

080276a8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80276a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80276ac:	4604      	mov	r4, r0
 80276ae:	4698      	mov	r8, r3
 80276b0:	8880      	ldrh	r0, [r0, #4]
 80276b2:	4617      	mov	r7, r2
 80276b4:	4b1d      	ldr	r3, [pc, #116]	; (802772c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80276b6:	460e      	mov	r6, r1
 80276b8:	f8ad 0006 	strh.w	r0, [sp, #6]
 80276bc:	eba8 0000 	sub.w	r0, r8, r0
 80276c0:	9300      	str	r3, [sp, #0]
 80276c2:	2300      	movs	r3, #0
 80276c4:	b280      	uxth	r0, r0
 80276c6:	8aa2      	ldrh	r2, [r4, #20]
 80276c8:	f88d 3004 	strb.w	r3, [sp, #4]
 80276cc:	b203      	sxth	r3, r0
 80276ce:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80276d2:	88e1      	ldrh	r1, [r4, #6]
 80276d4:	2b00      	cmp	r3, #0
 80276d6:	f8ad 800a 	strh.w	r8, [sp, #10]
 80276da:	f8ad 1008 	strh.w	r1, [sp, #8]
 80276de:	bfb8      	it	lt
 80276e0:	4240      	neglt	r0, r0
 80276e2:	f8ad 500c 	strh.w	r5, [sp, #12]
 80276e6:	bfb8      	it	lt
 80276e8:	b203      	sxthlt	r3, r0
 80276ea:	4293      	cmp	r3, r2
 80276ec:	dc08      	bgt.n	8027700 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80276ee:	1a69      	subs	r1, r5, r1
 80276f0:	b289      	uxth	r1, r1
 80276f2:	b20b      	sxth	r3, r1
 80276f4:	2b00      	cmp	r3, #0
 80276f6:	bfbc      	itt	lt
 80276f8:	4249      	neglt	r1, r1
 80276fa:	b20b      	sxthlt	r3, r1
 80276fc:	429a      	cmp	r2, r3
 80276fe:	da13      	bge.n	8027728 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8027700:	6920      	ldr	r0, [r4, #16]
 8027702:	4669      	mov	r1, sp
 8027704:	eba8 0606 	sub.w	r6, r8, r6
 8027708:	1bef      	subs	r7, r5, r7
 802770a:	6803      	ldr	r3, [r0, #0]
 802770c:	685b      	ldr	r3, [r3, #4]
 802770e:	4798      	blx	r3
 8027710:	2300      	movs	r3, #0
 8027712:	2001      	movs	r0, #1
 8027714:	8166      	strh	r6, [r4, #10]
 8027716:	8123      	strh	r3, [r4, #8]
 8027718:	81a7      	strh	r7, [r4, #12]
 802771a:	f8a4 8004 	strh.w	r8, [r4, #4]
 802771e:	80e5      	strh	r5, [r4, #6]
 8027720:	73a0      	strb	r0, [r4, #14]
 8027722:	b004      	add	sp, #16
 8027724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027728:	2000      	movs	r0, #0
 802772a:	e7fa      	b.n	8027722 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802772c:	0802a1c8 	.word	0x0802a1c8

08027730 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8027730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027732:	461e      	mov	r6, r3
 8027734:	1e4b      	subs	r3, r1, #1
 8027736:	b085      	sub	sp, #20
 8027738:	4604      	mov	r4, r0
 802773a:	2b01      	cmp	r3, #1
 802773c:	460d      	mov	r5, r1
 802773e:	4617      	mov	r7, r2
 8027740:	d84b      	bhi.n	80277da <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8027742:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8027746:	1cd3      	adds	r3, r2, #3
 8027748:	b29b      	uxth	r3, r3
 802774a:	2b06      	cmp	r3, #6
 802774c:	d916      	bls.n	802777c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802774e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80277f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8027752:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8027756:	f8cd c004 	str.w	ip, [sp, #4]
 802775a:	f04f 0c00 	mov.w	ip, #0
 802775e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8027762:	6900      	ldr	r0, [r0, #16]
 8027764:	f8ad 100c 	strh.w	r1, [sp, #12]
 8027768:	a901      	add	r1, sp, #4
 802776a:	f88d c008 	strb.w	ip, [sp, #8]
 802776e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8027772:	f8ad 300e 	strh.w	r3, [sp, #14]
 8027776:	6803      	ldr	r3, [r0, #0]
 8027778:	689b      	ldr	r3, [r3, #8]
 802777a:	4798      	blx	r3
 802777c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027780:	1cd3      	adds	r3, r2, #3
 8027782:	b29b      	uxth	r3, r3
 8027784:	2b06      	cmp	r3, #6
 8027786:	d916      	bls.n	80277b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8027788:	f8df c064 	ldr.w	ip, [pc, #100]	; 80277f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802778c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8027790:	f8cd c004 	str.w	ip, [sp, #4]
 8027794:	f04f 0c01 	mov.w	ip, #1
 8027798:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802779c:	6920      	ldr	r0, [r4, #16]
 802779e:	f8ad 100c 	strh.w	r1, [sp, #12]
 80277a2:	a901      	add	r1, sp, #4
 80277a4:	f88d c008 	strb.w	ip, [sp, #8]
 80277a8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80277ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80277b0:	6803      	ldr	r3, [r0, #0]
 80277b2:	689b      	ldr	r3, [r3, #8]
 80277b4:	4798      	blx	r3
 80277b6:	4b0d      	ldr	r3, [pc, #52]	; (80277ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80277b8:	a901      	add	r1, sp, #4
 80277ba:	6920      	ldr	r0, [r4, #16]
 80277bc:	9301      	str	r3, [sp, #4]
 80277be:	2300      	movs	r3, #0
 80277c0:	f88d 5008 	strb.w	r5, [sp, #8]
 80277c4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80277c8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80277cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80277d0:	6803      	ldr	r3, [r0, #0]
 80277d2:	681b      	ldr	r3, [r3, #0]
 80277d4:	4798      	blx	r3
 80277d6:	b005      	add	sp, #20
 80277d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80277da:	2900      	cmp	r1, #0
 80277dc:	d1eb      	bne.n	80277b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80277de:	80a2      	strh	r2, [r4, #4]
 80277e0:	80c6      	strh	r6, [r0, #6]
 80277e2:	60a1      	str	r1, [r4, #8]
 80277e4:	81a1      	strh	r1, [r4, #12]
 80277e6:	73a1      	strb	r1, [r4, #14]
 80277e8:	e7e5      	b.n	80277b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80277ea:	bf00      	nop
 80277ec:	0802a1b4 	.word	0x0802a1b4
 80277f0:	0802b254 	.word	0x0802b254

080277f4 <__aeabi_atexit>:
 80277f4:	460b      	mov	r3, r1
 80277f6:	4601      	mov	r1, r0
 80277f8:	4618      	mov	r0, r3
 80277fa:	f000 b853 	b.w	80278a4 <__cxa_atexit>

080277fe <_ZdlPvj>:
 80277fe:	f000 b812 	b.w	8027826 <_ZdlPv>

08027802 <__cxa_guard_acquire>:
 8027802:	6803      	ldr	r3, [r0, #0]
 8027804:	07db      	lsls	r3, r3, #31
 8027806:	d406      	bmi.n	8027816 <__cxa_guard_acquire+0x14>
 8027808:	7843      	ldrb	r3, [r0, #1]
 802780a:	b103      	cbz	r3, 802780e <__cxa_guard_acquire+0xc>
 802780c:	deff      	udf	#255	; 0xff
 802780e:	2301      	movs	r3, #1
 8027810:	7043      	strb	r3, [r0, #1]
 8027812:	4618      	mov	r0, r3
 8027814:	4770      	bx	lr
 8027816:	2000      	movs	r0, #0
 8027818:	4770      	bx	lr

0802781a <__cxa_guard_release>:
 802781a:	2301      	movs	r3, #1
 802781c:	6003      	str	r3, [r0, #0]
 802781e:	4770      	bx	lr

08027820 <__cxa_pure_virtual>:
 8027820:	b508      	push	{r3, lr}
 8027822:	f000 f80f 	bl	8027844 <_ZSt9terminatev>

08027826 <_ZdlPv>:
 8027826:	f000 b88f 	b.w	8027948 <free>

0802782a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802782a:	b508      	push	{r3, lr}
 802782c:	4780      	blx	r0
 802782e:	f000 f80e 	bl	802784e <abort>
	...

08027834 <_ZSt13get_terminatev>:
 8027834:	4b02      	ldr	r3, [pc, #8]	; (8027840 <_ZSt13get_terminatev+0xc>)
 8027836:	6818      	ldr	r0, [r3, #0]
 8027838:	f3bf 8f5b 	dmb	ish
 802783c:	4770      	bx	lr
 802783e:	bf00      	nop
 8027840:	240000c0 	.word	0x240000c0

08027844 <_ZSt9terminatev>:
 8027844:	b508      	push	{r3, lr}
 8027846:	f7ff fff5 	bl	8027834 <_ZSt13get_terminatev>
 802784a:	f7ff ffee 	bl	802782a <_ZN10__cxxabiv111__terminateEPFvvE>

0802784e <abort>:
 802784e:	b508      	push	{r3, lr}
 8027850:	2006      	movs	r0, #6
 8027852:	f000 fc67 	bl	8028124 <raise>
 8027856:	2001      	movs	r0, #1
 8027858:	f7da f8da 	bl	8001a10 <_exit>

0802785c <__assert_func>:
 802785c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802785e:	4614      	mov	r4, r2
 8027860:	461a      	mov	r2, r3
 8027862:	4b09      	ldr	r3, [pc, #36]	; (8027888 <__assert_func+0x2c>)
 8027864:	681b      	ldr	r3, [r3, #0]
 8027866:	4605      	mov	r5, r0
 8027868:	68d8      	ldr	r0, [r3, #12]
 802786a:	b14c      	cbz	r4, 8027880 <__assert_func+0x24>
 802786c:	4b07      	ldr	r3, [pc, #28]	; (802788c <__assert_func+0x30>)
 802786e:	9100      	str	r1, [sp, #0]
 8027870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027874:	4906      	ldr	r1, [pc, #24]	; (8027890 <__assert_func+0x34>)
 8027876:	462b      	mov	r3, r5
 8027878:	f000 f828 	bl	80278cc <fiprintf>
 802787c:	f7ff ffe7 	bl	802784e <abort>
 8027880:	4b04      	ldr	r3, [pc, #16]	; (8027894 <__assert_func+0x38>)
 8027882:	461c      	mov	r4, r3
 8027884:	e7f3      	b.n	802786e <__assert_func+0x12>
 8027886:	bf00      	nop
 8027888:	240000c4 	.word	0x240000c4
 802788c:	0802c5f5 	.word	0x0802c5f5
 8027890:	0802c602 	.word	0x0802c602
 8027894:	0802c630 	.word	0x0802c630

08027898 <atexit>:
 8027898:	2300      	movs	r3, #0
 802789a:	4601      	mov	r1, r0
 802789c:	461a      	mov	r2, r3
 802789e:	4618      	mov	r0, r3
 80278a0:	f000 bd1c 	b.w	80282dc <__register_exitproc>

080278a4 <__cxa_atexit>:
 80278a4:	b510      	push	{r4, lr}
 80278a6:	4c05      	ldr	r4, [pc, #20]	; (80278bc <__cxa_atexit+0x18>)
 80278a8:	4613      	mov	r3, r2
 80278aa:	b12c      	cbz	r4, 80278b8 <__cxa_atexit+0x14>
 80278ac:	460a      	mov	r2, r1
 80278ae:	4601      	mov	r1, r0
 80278b0:	2002      	movs	r0, #2
 80278b2:	f000 fd13 	bl	80282dc <__register_exitproc>
 80278b6:	bd10      	pop	{r4, pc}
 80278b8:	4620      	mov	r0, r4
 80278ba:	e7fc      	b.n	80278b6 <__cxa_atexit+0x12>
 80278bc:	080282dd 	.word	0x080282dd

080278c0 <__errno>:
 80278c0:	4b01      	ldr	r3, [pc, #4]	; (80278c8 <__errno+0x8>)
 80278c2:	6818      	ldr	r0, [r3, #0]
 80278c4:	4770      	bx	lr
 80278c6:	bf00      	nop
 80278c8:	240000c4 	.word	0x240000c4

080278cc <fiprintf>:
 80278cc:	b40e      	push	{r1, r2, r3}
 80278ce:	b503      	push	{r0, r1, lr}
 80278d0:	4601      	mov	r1, r0
 80278d2:	ab03      	add	r3, sp, #12
 80278d4:	4805      	ldr	r0, [pc, #20]	; (80278ec <fiprintf+0x20>)
 80278d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80278da:	6800      	ldr	r0, [r0, #0]
 80278dc:	9301      	str	r3, [sp, #4]
 80278de:	f000 f925 	bl	8027b2c <_vfiprintf_r>
 80278e2:	b002      	add	sp, #8
 80278e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80278e8:	b003      	add	sp, #12
 80278ea:	4770      	bx	lr
 80278ec:	240000c4 	.word	0x240000c4

080278f0 <__libc_init_array>:
 80278f0:	b570      	push	{r4, r5, r6, lr}
 80278f2:	4d0d      	ldr	r5, [pc, #52]	; (8027928 <__libc_init_array+0x38>)
 80278f4:	4c0d      	ldr	r4, [pc, #52]	; (802792c <__libc_init_array+0x3c>)
 80278f6:	1b64      	subs	r4, r4, r5
 80278f8:	10a4      	asrs	r4, r4, #2
 80278fa:	2600      	movs	r6, #0
 80278fc:	42a6      	cmp	r6, r4
 80278fe:	d109      	bne.n	8027914 <__libc_init_array+0x24>
 8027900:	4d0b      	ldr	r5, [pc, #44]	; (8027930 <__libc_init_array+0x40>)
 8027902:	4c0c      	ldr	r4, [pc, #48]	; (8027934 <__libc_init_array+0x44>)
 8027904:	f001 f824 	bl	8028950 <_init>
 8027908:	1b64      	subs	r4, r4, r5
 802790a:	10a4      	asrs	r4, r4, #2
 802790c:	2600      	movs	r6, #0
 802790e:	42a6      	cmp	r6, r4
 8027910:	d105      	bne.n	802791e <__libc_init_array+0x2e>
 8027912:	bd70      	pop	{r4, r5, r6, pc}
 8027914:	f855 3b04 	ldr.w	r3, [r5], #4
 8027918:	4798      	blx	r3
 802791a:	3601      	adds	r6, #1
 802791c:	e7ee      	b.n	80278fc <__libc_init_array+0xc>
 802791e:	f855 3b04 	ldr.w	r3, [r5], #4
 8027922:	4798      	blx	r3
 8027924:	3601      	adds	r6, #1
 8027926:	e7f2      	b.n	802790e <__libc_init_array+0x1e>
 8027928:	0802c72c 	.word	0x0802c72c
 802792c:	0802c72c 	.word	0x0802c72c
 8027930:	0802c72c 	.word	0x0802c72c
 8027934:	0802c740 	.word	0x0802c740

08027938 <malloc>:
 8027938:	4b02      	ldr	r3, [pc, #8]	; (8027944 <malloc+0xc>)
 802793a:	4601      	mov	r1, r0
 802793c:	6818      	ldr	r0, [r3, #0]
 802793e:	f000 b871 	b.w	8027a24 <_malloc_r>
 8027942:	bf00      	nop
 8027944:	240000c4 	.word	0x240000c4

08027948 <free>:
 8027948:	4b02      	ldr	r3, [pc, #8]	; (8027954 <free+0xc>)
 802794a:	4601      	mov	r1, r0
 802794c:	6818      	ldr	r0, [r3, #0]
 802794e:	f000 b819 	b.w	8027984 <_free_r>
 8027952:	bf00      	nop
 8027954:	240000c4 	.word	0x240000c4

08027958 <memcpy>:
 8027958:	440a      	add	r2, r1
 802795a:	4291      	cmp	r1, r2
 802795c:	f100 33ff 	add.w	r3, r0, #4294967295
 8027960:	d100      	bne.n	8027964 <memcpy+0xc>
 8027962:	4770      	bx	lr
 8027964:	b510      	push	{r4, lr}
 8027966:	f811 4b01 	ldrb.w	r4, [r1], #1
 802796a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802796e:	4291      	cmp	r1, r2
 8027970:	d1f9      	bne.n	8027966 <memcpy+0xe>
 8027972:	bd10      	pop	{r4, pc}

08027974 <memset>:
 8027974:	4402      	add	r2, r0
 8027976:	4603      	mov	r3, r0
 8027978:	4293      	cmp	r3, r2
 802797a:	d100      	bne.n	802797e <memset+0xa>
 802797c:	4770      	bx	lr
 802797e:	f803 1b01 	strb.w	r1, [r3], #1
 8027982:	e7f9      	b.n	8027978 <memset+0x4>

08027984 <_free_r>:
 8027984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027986:	2900      	cmp	r1, #0
 8027988:	d048      	beq.n	8027a1c <_free_r+0x98>
 802798a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802798e:	9001      	str	r0, [sp, #4]
 8027990:	2b00      	cmp	r3, #0
 8027992:	f1a1 0404 	sub.w	r4, r1, #4
 8027996:	bfb8      	it	lt
 8027998:	18e4      	addlt	r4, r4, r3
 802799a:	f000 ff21 	bl	80287e0 <__malloc_lock>
 802799e:	4a20      	ldr	r2, [pc, #128]	; (8027a20 <_free_r+0x9c>)
 80279a0:	9801      	ldr	r0, [sp, #4]
 80279a2:	6813      	ldr	r3, [r2, #0]
 80279a4:	4615      	mov	r5, r2
 80279a6:	b933      	cbnz	r3, 80279b6 <_free_r+0x32>
 80279a8:	6063      	str	r3, [r4, #4]
 80279aa:	6014      	str	r4, [r2, #0]
 80279ac:	b003      	add	sp, #12
 80279ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80279b2:	f000 bf1b 	b.w	80287ec <__malloc_unlock>
 80279b6:	42a3      	cmp	r3, r4
 80279b8:	d90b      	bls.n	80279d2 <_free_r+0x4e>
 80279ba:	6821      	ldr	r1, [r4, #0]
 80279bc:	1862      	adds	r2, r4, r1
 80279be:	4293      	cmp	r3, r2
 80279c0:	bf04      	itt	eq
 80279c2:	681a      	ldreq	r2, [r3, #0]
 80279c4:	685b      	ldreq	r3, [r3, #4]
 80279c6:	6063      	str	r3, [r4, #4]
 80279c8:	bf04      	itt	eq
 80279ca:	1852      	addeq	r2, r2, r1
 80279cc:	6022      	streq	r2, [r4, #0]
 80279ce:	602c      	str	r4, [r5, #0]
 80279d0:	e7ec      	b.n	80279ac <_free_r+0x28>
 80279d2:	461a      	mov	r2, r3
 80279d4:	685b      	ldr	r3, [r3, #4]
 80279d6:	b10b      	cbz	r3, 80279dc <_free_r+0x58>
 80279d8:	42a3      	cmp	r3, r4
 80279da:	d9fa      	bls.n	80279d2 <_free_r+0x4e>
 80279dc:	6811      	ldr	r1, [r2, #0]
 80279de:	1855      	adds	r5, r2, r1
 80279e0:	42a5      	cmp	r5, r4
 80279e2:	d10b      	bne.n	80279fc <_free_r+0x78>
 80279e4:	6824      	ldr	r4, [r4, #0]
 80279e6:	4421      	add	r1, r4
 80279e8:	1854      	adds	r4, r2, r1
 80279ea:	42a3      	cmp	r3, r4
 80279ec:	6011      	str	r1, [r2, #0]
 80279ee:	d1dd      	bne.n	80279ac <_free_r+0x28>
 80279f0:	681c      	ldr	r4, [r3, #0]
 80279f2:	685b      	ldr	r3, [r3, #4]
 80279f4:	6053      	str	r3, [r2, #4]
 80279f6:	4421      	add	r1, r4
 80279f8:	6011      	str	r1, [r2, #0]
 80279fa:	e7d7      	b.n	80279ac <_free_r+0x28>
 80279fc:	d902      	bls.n	8027a04 <_free_r+0x80>
 80279fe:	230c      	movs	r3, #12
 8027a00:	6003      	str	r3, [r0, #0]
 8027a02:	e7d3      	b.n	80279ac <_free_r+0x28>
 8027a04:	6825      	ldr	r5, [r4, #0]
 8027a06:	1961      	adds	r1, r4, r5
 8027a08:	428b      	cmp	r3, r1
 8027a0a:	bf04      	itt	eq
 8027a0c:	6819      	ldreq	r1, [r3, #0]
 8027a0e:	685b      	ldreq	r3, [r3, #4]
 8027a10:	6063      	str	r3, [r4, #4]
 8027a12:	bf04      	itt	eq
 8027a14:	1949      	addeq	r1, r1, r5
 8027a16:	6021      	streq	r1, [r4, #0]
 8027a18:	6054      	str	r4, [r2, #4]
 8027a1a:	e7c7      	b.n	80279ac <_free_r+0x28>
 8027a1c:	b003      	add	sp, #12
 8027a1e:	bd30      	pop	{r4, r5, pc}
 8027a20:	2400afe8 	.word	0x2400afe8

08027a24 <_malloc_r>:
 8027a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027a26:	1ccd      	adds	r5, r1, #3
 8027a28:	f025 0503 	bic.w	r5, r5, #3
 8027a2c:	3508      	adds	r5, #8
 8027a2e:	2d0c      	cmp	r5, #12
 8027a30:	bf38      	it	cc
 8027a32:	250c      	movcc	r5, #12
 8027a34:	2d00      	cmp	r5, #0
 8027a36:	4606      	mov	r6, r0
 8027a38:	db01      	blt.n	8027a3e <_malloc_r+0x1a>
 8027a3a:	42a9      	cmp	r1, r5
 8027a3c:	d903      	bls.n	8027a46 <_malloc_r+0x22>
 8027a3e:	230c      	movs	r3, #12
 8027a40:	6033      	str	r3, [r6, #0]
 8027a42:	2000      	movs	r0, #0
 8027a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027a46:	f000 fecb 	bl	80287e0 <__malloc_lock>
 8027a4a:	4921      	ldr	r1, [pc, #132]	; (8027ad0 <_malloc_r+0xac>)
 8027a4c:	680a      	ldr	r2, [r1, #0]
 8027a4e:	4614      	mov	r4, r2
 8027a50:	b99c      	cbnz	r4, 8027a7a <_malloc_r+0x56>
 8027a52:	4f20      	ldr	r7, [pc, #128]	; (8027ad4 <_malloc_r+0xb0>)
 8027a54:	683b      	ldr	r3, [r7, #0]
 8027a56:	b923      	cbnz	r3, 8027a62 <_malloc_r+0x3e>
 8027a58:	4621      	mov	r1, r4
 8027a5a:	4630      	mov	r0, r6
 8027a5c:	f000 fb2a 	bl	80280b4 <_sbrk_r>
 8027a60:	6038      	str	r0, [r7, #0]
 8027a62:	4629      	mov	r1, r5
 8027a64:	4630      	mov	r0, r6
 8027a66:	f000 fb25 	bl	80280b4 <_sbrk_r>
 8027a6a:	1c43      	adds	r3, r0, #1
 8027a6c:	d123      	bne.n	8027ab6 <_malloc_r+0x92>
 8027a6e:	230c      	movs	r3, #12
 8027a70:	6033      	str	r3, [r6, #0]
 8027a72:	4630      	mov	r0, r6
 8027a74:	f000 feba 	bl	80287ec <__malloc_unlock>
 8027a78:	e7e3      	b.n	8027a42 <_malloc_r+0x1e>
 8027a7a:	6823      	ldr	r3, [r4, #0]
 8027a7c:	1b5b      	subs	r3, r3, r5
 8027a7e:	d417      	bmi.n	8027ab0 <_malloc_r+0x8c>
 8027a80:	2b0b      	cmp	r3, #11
 8027a82:	d903      	bls.n	8027a8c <_malloc_r+0x68>
 8027a84:	6023      	str	r3, [r4, #0]
 8027a86:	441c      	add	r4, r3
 8027a88:	6025      	str	r5, [r4, #0]
 8027a8a:	e004      	b.n	8027a96 <_malloc_r+0x72>
 8027a8c:	6863      	ldr	r3, [r4, #4]
 8027a8e:	42a2      	cmp	r2, r4
 8027a90:	bf0c      	ite	eq
 8027a92:	600b      	streq	r3, [r1, #0]
 8027a94:	6053      	strne	r3, [r2, #4]
 8027a96:	4630      	mov	r0, r6
 8027a98:	f000 fea8 	bl	80287ec <__malloc_unlock>
 8027a9c:	f104 000b 	add.w	r0, r4, #11
 8027aa0:	1d23      	adds	r3, r4, #4
 8027aa2:	f020 0007 	bic.w	r0, r0, #7
 8027aa6:	1ac2      	subs	r2, r0, r3
 8027aa8:	d0cc      	beq.n	8027a44 <_malloc_r+0x20>
 8027aaa:	1a1b      	subs	r3, r3, r0
 8027aac:	50a3      	str	r3, [r4, r2]
 8027aae:	e7c9      	b.n	8027a44 <_malloc_r+0x20>
 8027ab0:	4622      	mov	r2, r4
 8027ab2:	6864      	ldr	r4, [r4, #4]
 8027ab4:	e7cc      	b.n	8027a50 <_malloc_r+0x2c>
 8027ab6:	1cc4      	adds	r4, r0, #3
 8027ab8:	f024 0403 	bic.w	r4, r4, #3
 8027abc:	42a0      	cmp	r0, r4
 8027abe:	d0e3      	beq.n	8027a88 <_malloc_r+0x64>
 8027ac0:	1a21      	subs	r1, r4, r0
 8027ac2:	4630      	mov	r0, r6
 8027ac4:	f000 faf6 	bl	80280b4 <_sbrk_r>
 8027ac8:	3001      	adds	r0, #1
 8027aca:	d1dd      	bne.n	8027a88 <_malloc_r+0x64>
 8027acc:	e7cf      	b.n	8027a6e <_malloc_r+0x4a>
 8027ace:	bf00      	nop
 8027ad0:	2400afe8 	.word	0x2400afe8
 8027ad4:	2400afec 	.word	0x2400afec

08027ad8 <__sfputc_r>:
 8027ad8:	6893      	ldr	r3, [r2, #8]
 8027ada:	3b01      	subs	r3, #1
 8027adc:	2b00      	cmp	r3, #0
 8027ade:	b410      	push	{r4}
 8027ae0:	6093      	str	r3, [r2, #8]
 8027ae2:	da08      	bge.n	8027af6 <__sfputc_r+0x1e>
 8027ae4:	6994      	ldr	r4, [r2, #24]
 8027ae6:	42a3      	cmp	r3, r4
 8027ae8:	db01      	blt.n	8027aee <__sfputc_r+0x16>
 8027aea:	290a      	cmp	r1, #10
 8027aec:	d103      	bne.n	8027af6 <__sfputc_r+0x1e>
 8027aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027af2:	f000 bb33 	b.w	802815c <__swbuf_r>
 8027af6:	6813      	ldr	r3, [r2, #0]
 8027af8:	1c58      	adds	r0, r3, #1
 8027afa:	6010      	str	r0, [r2, #0]
 8027afc:	7019      	strb	r1, [r3, #0]
 8027afe:	4608      	mov	r0, r1
 8027b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027b04:	4770      	bx	lr

08027b06 <__sfputs_r>:
 8027b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b08:	4606      	mov	r6, r0
 8027b0a:	460f      	mov	r7, r1
 8027b0c:	4614      	mov	r4, r2
 8027b0e:	18d5      	adds	r5, r2, r3
 8027b10:	42ac      	cmp	r4, r5
 8027b12:	d101      	bne.n	8027b18 <__sfputs_r+0x12>
 8027b14:	2000      	movs	r0, #0
 8027b16:	e007      	b.n	8027b28 <__sfputs_r+0x22>
 8027b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027b1c:	463a      	mov	r2, r7
 8027b1e:	4630      	mov	r0, r6
 8027b20:	f7ff ffda 	bl	8027ad8 <__sfputc_r>
 8027b24:	1c43      	adds	r3, r0, #1
 8027b26:	d1f3      	bne.n	8027b10 <__sfputs_r+0xa>
 8027b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027b2c <_vfiprintf_r>:
 8027b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b30:	460d      	mov	r5, r1
 8027b32:	b09d      	sub	sp, #116	; 0x74
 8027b34:	4614      	mov	r4, r2
 8027b36:	4698      	mov	r8, r3
 8027b38:	4606      	mov	r6, r0
 8027b3a:	b118      	cbz	r0, 8027b44 <_vfiprintf_r+0x18>
 8027b3c:	6983      	ldr	r3, [r0, #24]
 8027b3e:	b90b      	cbnz	r3, 8027b44 <_vfiprintf_r+0x18>
 8027b40:	f000 fd48 	bl	80285d4 <__sinit>
 8027b44:	4b89      	ldr	r3, [pc, #548]	; (8027d6c <_vfiprintf_r+0x240>)
 8027b46:	429d      	cmp	r5, r3
 8027b48:	d11b      	bne.n	8027b82 <_vfiprintf_r+0x56>
 8027b4a:	6875      	ldr	r5, [r6, #4]
 8027b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027b4e:	07d9      	lsls	r1, r3, #31
 8027b50:	d405      	bmi.n	8027b5e <_vfiprintf_r+0x32>
 8027b52:	89ab      	ldrh	r3, [r5, #12]
 8027b54:	059a      	lsls	r2, r3, #22
 8027b56:	d402      	bmi.n	8027b5e <_vfiprintf_r+0x32>
 8027b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027b5a:	f000 fdd9 	bl	8028710 <__retarget_lock_acquire_recursive>
 8027b5e:	89ab      	ldrh	r3, [r5, #12]
 8027b60:	071b      	lsls	r3, r3, #28
 8027b62:	d501      	bpl.n	8027b68 <_vfiprintf_r+0x3c>
 8027b64:	692b      	ldr	r3, [r5, #16]
 8027b66:	b9eb      	cbnz	r3, 8027ba4 <_vfiprintf_r+0x78>
 8027b68:	4629      	mov	r1, r5
 8027b6a:	4630      	mov	r0, r6
 8027b6c:	f000 fb48 	bl	8028200 <__swsetup_r>
 8027b70:	b1c0      	cbz	r0, 8027ba4 <_vfiprintf_r+0x78>
 8027b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027b74:	07dc      	lsls	r4, r3, #31
 8027b76:	d50e      	bpl.n	8027b96 <_vfiprintf_r+0x6a>
 8027b78:	f04f 30ff 	mov.w	r0, #4294967295
 8027b7c:	b01d      	add	sp, #116	; 0x74
 8027b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b82:	4b7b      	ldr	r3, [pc, #492]	; (8027d70 <_vfiprintf_r+0x244>)
 8027b84:	429d      	cmp	r5, r3
 8027b86:	d101      	bne.n	8027b8c <_vfiprintf_r+0x60>
 8027b88:	68b5      	ldr	r5, [r6, #8]
 8027b8a:	e7df      	b.n	8027b4c <_vfiprintf_r+0x20>
 8027b8c:	4b79      	ldr	r3, [pc, #484]	; (8027d74 <_vfiprintf_r+0x248>)
 8027b8e:	429d      	cmp	r5, r3
 8027b90:	bf08      	it	eq
 8027b92:	68f5      	ldreq	r5, [r6, #12]
 8027b94:	e7da      	b.n	8027b4c <_vfiprintf_r+0x20>
 8027b96:	89ab      	ldrh	r3, [r5, #12]
 8027b98:	0598      	lsls	r0, r3, #22
 8027b9a:	d4ed      	bmi.n	8027b78 <_vfiprintf_r+0x4c>
 8027b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027b9e:	f000 fdb9 	bl	8028714 <__retarget_lock_release_recursive>
 8027ba2:	e7e9      	b.n	8027b78 <_vfiprintf_r+0x4c>
 8027ba4:	2300      	movs	r3, #0
 8027ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8027ba8:	2320      	movs	r3, #32
 8027baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8027bb2:	2330      	movs	r3, #48	; 0x30
 8027bb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027d78 <_vfiprintf_r+0x24c>
 8027bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027bbc:	f04f 0901 	mov.w	r9, #1
 8027bc0:	4623      	mov	r3, r4
 8027bc2:	469a      	mov	sl, r3
 8027bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027bc8:	b10a      	cbz	r2, 8027bce <_vfiprintf_r+0xa2>
 8027bca:	2a25      	cmp	r2, #37	; 0x25
 8027bcc:	d1f9      	bne.n	8027bc2 <_vfiprintf_r+0x96>
 8027bce:	ebba 0b04 	subs.w	fp, sl, r4
 8027bd2:	d00b      	beq.n	8027bec <_vfiprintf_r+0xc0>
 8027bd4:	465b      	mov	r3, fp
 8027bd6:	4622      	mov	r2, r4
 8027bd8:	4629      	mov	r1, r5
 8027bda:	4630      	mov	r0, r6
 8027bdc:	f7ff ff93 	bl	8027b06 <__sfputs_r>
 8027be0:	3001      	adds	r0, #1
 8027be2:	f000 80aa 	beq.w	8027d3a <_vfiprintf_r+0x20e>
 8027be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027be8:	445a      	add	r2, fp
 8027bea:	9209      	str	r2, [sp, #36]	; 0x24
 8027bec:	f89a 3000 	ldrb.w	r3, [sl]
 8027bf0:	2b00      	cmp	r3, #0
 8027bf2:	f000 80a2 	beq.w	8027d3a <_vfiprintf_r+0x20e>
 8027bf6:	2300      	movs	r3, #0
 8027bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8027bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027c00:	f10a 0a01 	add.w	sl, sl, #1
 8027c04:	9304      	str	r3, [sp, #16]
 8027c06:	9307      	str	r3, [sp, #28]
 8027c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8027c0e:	4654      	mov	r4, sl
 8027c10:	2205      	movs	r2, #5
 8027c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027c16:	4858      	ldr	r0, [pc, #352]	; (8027d78 <_vfiprintf_r+0x24c>)
 8027c18:	f7d8 fb6a 	bl	80002f0 <memchr>
 8027c1c:	9a04      	ldr	r2, [sp, #16]
 8027c1e:	b9d8      	cbnz	r0, 8027c58 <_vfiprintf_r+0x12c>
 8027c20:	06d1      	lsls	r1, r2, #27
 8027c22:	bf44      	itt	mi
 8027c24:	2320      	movmi	r3, #32
 8027c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027c2a:	0713      	lsls	r3, r2, #28
 8027c2c:	bf44      	itt	mi
 8027c2e:	232b      	movmi	r3, #43	; 0x2b
 8027c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027c34:	f89a 3000 	ldrb.w	r3, [sl]
 8027c38:	2b2a      	cmp	r3, #42	; 0x2a
 8027c3a:	d015      	beq.n	8027c68 <_vfiprintf_r+0x13c>
 8027c3c:	9a07      	ldr	r2, [sp, #28]
 8027c3e:	4654      	mov	r4, sl
 8027c40:	2000      	movs	r0, #0
 8027c42:	f04f 0c0a 	mov.w	ip, #10
 8027c46:	4621      	mov	r1, r4
 8027c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027c4c:	3b30      	subs	r3, #48	; 0x30
 8027c4e:	2b09      	cmp	r3, #9
 8027c50:	d94e      	bls.n	8027cf0 <_vfiprintf_r+0x1c4>
 8027c52:	b1b0      	cbz	r0, 8027c82 <_vfiprintf_r+0x156>
 8027c54:	9207      	str	r2, [sp, #28]
 8027c56:	e014      	b.n	8027c82 <_vfiprintf_r+0x156>
 8027c58:	eba0 0308 	sub.w	r3, r0, r8
 8027c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8027c60:	4313      	orrs	r3, r2
 8027c62:	9304      	str	r3, [sp, #16]
 8027c64:	46a2      	mov	sl, r4
 8027c66:	e7d2      	b.n	8027c0e <_vfiprintf_r+0xe2>
 8027c68:	9b03      	ldr	r3, [sp, #12]
 8027c6a:	1d19      	adds	r1, r3, #4
 8027c6c:	681b      	ldr	r3, [r3, #0]
 8027c6e:	9103      	str	r1, [sp, #12]
 8027c70:	2b00      	cmp	r3, #0
 8027c72:	bfbb      	ittet	lt
 8027c74:	425b      	neglt	r3, r3
 8027c76:	f042 0202 	orrlt.w	r2, r2, #2
 8027c7a:	9307      	strge	r3, [sp, #28]
 8027c7c:	9307      	strlt	r3, [sp, #28]
 8027c7e:	bfb8      	it	lt
 8027c80:	9204      	strlt	r2, [sp, #16]
 8027c82:	7823      	ldrb	r3, [r4, #0]
 8027c84:	2b2e      	cmp	r3, #46	; 0x2e
 8027c86:	d10c      	bne.n	8027ca2 <_vfiprintf_r+0x176>
 8027c88:	7863      	ldrb	r3, [r4, #1]
 8027c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8027c8c:	d135      	bne.n	8027cfa <_vfiprintf_r+0x1ce>
 8027c8e:	9b03      	ldr	r3, [sp, #12]
 8027c90:	1d1a      	adds	r2, r3, #4
 8027c92:	681b      	ldr	r3, [r3, #0]
 8027c94:	9203      	str	r2, [sp, #12]
 8027c96:	2b00      	cmp	r3, #0
 8027c98:	bfb8      	it	lt
 8027c9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8027c9e:	3402      	adds	r4, #2
 8027ca0:	9305      	str	r3, [sp, #20]
 8027ca2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027d88 <_vfiprintf_r+0x25c>
 8027ca6:	7821      	ldrb	r1, [r4, #0]
 8027ca8:	2203      	movs	r2, #3
 8027caa:	4650      	mov	r0, sl
 8027cac:	f7d8 fb20 	bl	80002f0 <memchr>
 8027cb0:	b140      	cbz	r0, 8027cc4 <_vfiprintf_r+0x198>
 8027cb2:	2340      	movs	r3, #64	; 0x40
 8027cb4:	eba0 000a 	sub.w	r0, r0, sl
 8027cb8:	fa03 f000 	lsl.w	r0, r3, r0
 8027cbc:	9b04      	ldr	r3, [sp, #16]
 8027cbe:	4303      	orrs	r3, r0
 8027cc0:	3401      	adds	r4, #1
 8027cc2:	9304      	str	r3, [sp, #16]
 8027cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027cc8:	482c      	ldr	r0, [pc, #176]	; (8027d7c <_vfiprintf_r+0x250>)
 8027cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027cce:	2206      	movs	r2, #6
 8027cd0:	f7d8 fb0e 	bl	80002f0 <memchr>
 8027cd4:	2800      	cmp	r0, #0
 8027cd6:	d03f      	beq.n	8027d58 <_vfiprintf_r+0x22c>
 8027cd8:	4b29      	ldr	r3, [pc, #164]	; (8027d80 <_vfiprintf_r+0x254>)
 8027cda:	bb1b      	cbnz	r3, 8027d24 <_vfiprintf_r+0x1f8>
 8027cdc:	9b03      	ldr	r3, [sp, #12]
 8027cde:	3307      	adds	r3, #7
 8027ce0:	f023 0307 	bic.w	r3, r3, #7
 8027ce4:	3308      	adds	r3, #8
 8027ce6:	9303      	str	r3, [sp, #12]
 8027ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027cea:	443b      	add	r3, r7
 8027cec:	9309      	str	r3, [sp, #36]	; 0x24
 8027cee:	e767      	b.n	8027bc0 <_vfiprintf_r+0x94>
 8027cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8027cf4:	460c      	mov	r4, r1
 8027cf6:	2001      	movs	r0, #1
 8027cf8:	e7a5      	b.n	8027c46 <_vfiprintf_r+0x11a>
 8027cfa:	2300      	movs	r3, #0
 8027cfc:	3401      	adds	r4, #1
 8027cfe:	9305      	str	r3, [sp, #20]
 8027d00:	4619      	mov	r1, r3
 8027d02:	f04f 0c0a 	mov.w	ip, #10
 8027d06:	4620      	mov	r0, r4
 8027d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027d0c:	3a30      	subs	r2, #48	; 0x30
 8027d0e:	2a09      	cmp	r2, #9
 8027d10:	d903      	bls.n	8027d1a <_vfiprintf_r+0x1ee>
 8027d12:	2b00      	cmp	r3, #0
 8027d14:	d0c5      	beq.n	8027ca2 <_vfiprintf_r+0x176>
 8027d16:	9105      	str	r1, [sp, #20]
 8027d18:	e7c3      	b.n	8027ca2 <_vfiprintf_r+0x176>
 8027d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8027d1e:	4604      	mov	r4, r0
 8027d20:	2301      	movs	r3, #1
 8027d22:	e7f0      	b.n	8027d06 <_vfiprintf_r+0x1da>
 8027d24:	ab03      	add	r3, sp, #12
 8027d26:	9300      	str	r3, [sp, #0]
 8027d28:	462a      	mov	r2, r5
 8027d2a:	4b16      	ldr	r3, [pc, #88]	; (8027d84 <_vfiprintf_r+0x258>)
 8027d2c:	a904      	add	r1, sp, #16
 8027d2e:	4630      	mov	r0, r6
 8027d30:	f3af 8000 	nop.w
 8027d34:	4607      	mov	r7, r0
 8027d36:	1c78      	adds	r0, r7, #1
 8027d38:	d1d6      	bne.n	8027ce8 <_vfiprintf_r+0x1bc>
 8027d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027d3c:	07d9      	lsls	r1, r3, #31
 8027d3e:	d405      	bmi.n	8027d4c <_vfiprintf_r+0x220>
 8027d40:	89ab      	ldrh	r3, [r5, #12]
 8027d42:	059a      	lsls	r2, r3, #22
 8027d44:	d402      	bmi.n	8027d4c <_vfiprintf_r+0x220>
 8027d46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027d48:	f000 fce4 	bl	8028714 <__retarget_lock_release_recursive>
 8027d4c:	89ab      	ldrh	r3, [r5, #12]
 8027d4e:	065b      	lsls	r3, r3, #25
 8027d50:	f53f af12 	bmi.w	8027b78 <_vfiprintf_r+0x4c>
 8027d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027d56:	e711      	b.n	8027b7c <_vfiprintf_r+0x50>
 8027d58:	ab03      	add	r3, sp, #12
 8027d5a:	9300      	str	r3, [sp, #0]
 8027d5c:	462a      	mov	r2, r5
 8027d5e:	4b09      	ldr	r3, [pc, #36]	; (8027d84 <_vfiprintf_r+0x258>)
 8027d60:	a904      	add	r1, sp, #16
 8027d62:	4630      	mov	r0, r6
 8027d64:	f000 f880 	bl	8027e68 <_printf_i>
 8027d68:	e7e4      	b.n	8027d34 <_vfiprintf_r+0x208>
 8027d6a:	bf00      	nop
 8027d6c:	0802c690 	.word	0x0802c690
 8027d70:	0802c6b0 	.word	0x0802c6b0
 8027d74:	0802c670 	.word	0x0802c670
 8027d78:	0802c638 	.word	0x0802c638
 8027d7c:	0802c642 	.word	0x0802c642
 8027d80:	00000000 	.word	0x00000000
 8027d84:	08027b07 	.word	0x08027b07
 8027d88:	0802c63e 	.word	0x0802c63e

08027d8c <_printf_common>:
 8027d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027d90:	4616      	mov	r6, r2
 8027d92:	4699      	mov	r9, r3
 8027d94:	688a      	ldr	r2, [r1, #8]
 8027d96:	690b      	ldr	r3, [r1, #16]
 8027d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027d9c:	4293      	cmp	r3, r2
 8027d9e:	bfb8      	it	lt
 8027da0:	4613      	movlt	r3, r2
 8027da2:	6033      	str	r3, [r6, #0]
 8027da4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027da8:	4607      	mov	r7, r0
 8027daa:	460c      	mov	r4, r1
 8027dac:	b10a      	cbz	r2, 8027db2 <_printf_common+0x26>
 8027dae:	3301      	adds	r3, #1
 8027db0:	6033      	str	r3, [r6, #0]
 8027db2:	6823      	ldr	r3, [r4, #0]
 8027db4:	0699      	lsls	r1, r3, #26
 8027db6:	bf42      	ittt	mi
 8027db8:	6833      	ldrmi	r3, [r6, #0]
 8027dba:	3302      	addmi	r3, #2
 8027dbc:	6033      	strmi	r3, [r6, #0]
 8027dbe:	6825      	ldr	r5, [r4, #0]
 8027dc0:	f015 0506 	ands.w	r5, r5, #6
 8027dc4:	d106      	bne.n	8027dd4 <_printf_common+0x48>
 8027dc6:	f104 0a19 	add.w	sl, r4, #25
 8027dca:	68e3      	ldr	r3, [r4, #12]
 8027dcc:	6832      	ldr	r2, [r6, #0]
 8027dce:	1a9b      	subs	r3, r3, r2
 8027dd0:	42ab      	cmp	r3, r5
 8027dd2:	dc26      	bgt.n	8027e22 <_printf_common+0x96>
 8027dd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027dd8:	1e13      	subs	r3, r2, #0
 8027dda:	6822      	ldr	r2, [r4, #0]
 8027ddc:	bf18      	it	ne
 8027dde:	2301      	movne	r3, #1
 8027de0:	0692      	lsls	r2, r2, #26
 8027de2:	d42b      	bmi.n	8027e3c <_printf_common+0xb0>
 8027de4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027de8:	4649      	mov	r1, r9
 8027dea:	4638      	mov	r0, r7
 8027dec:	47c0      	blx	r8
 8027dee:	3001      	adds	r0, #1
 8027df0:	d01e      	beq.n	8027e30 <_printf_common+0xa4>
 8027df2:	6823      	ldr	r3, [r4, #0]
 8027df4:	68e5      	ldr	r5, [r4, #12]
 8027df6:	6832      	ldr	r2, [r6, #0]
 8027df8:	f003 0306 	and.w	r3, r3, #6
 8027dfc:	2b04      	cmp	r3, #4
 8027dfe:	bf08      	it	eq
 8027e00:	1aad      	subeq	r5, r5, r2
 8027e02:	68a3      	ldr	r3, [r4, #8]
 8027e04:	6922      	ldr	r2, [r4, #16]
 8027e06:	bf0c      	ite	eq
 8027e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027e0c:	2500      	movne	r5, #0
 8027e0e:	4293      	cmp	r3, r2
 8027e10:	bfc4      	itt	gt
 8027e12:	1a9b      	subgt	r3, r3, r2
 8027e14:	18ed      	addgt	r5, r5, r3
 8027e16:	2600      	movs	r6, #0
 8027e18:	341a      	adds	r4, #26
 8027e1a:	42b5      	cmp	r5, r6
 8027e1c:	d11a      	bne.n	8027e54 <_printf_common+0xc8>
 8027e1e:	2000      	movs	r0, #0
 8027e20:	e008      	b.n	8027e34 <_printf_common+0xa8>
 8027e22:	2301      	movs	r3, #1
 8027e24:	4652      	mov	r2, sl
 8027e26:	4649      	mov	r1, r9
 8027e28:	4638      	mov	r0, r7
 8027e2a:	47c0      	blx	r8
 8027e2c:	3001      	adds	r0, #1
 8027e2e:	d103      	bne.n	8027e38 <_printf_common+0xac>
 8027e30:	f04f 30ff 	mov.w	r0, #4294967295
 8027e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e38:	3501      	adds	r5, #1
 8027e3a:	e7c6      	b.n	8027dca <_printf_common+0x3e>
 8027e3c:	18e1      	adds	r1, r4, r3
 8027e3e:	1c5a      	adds	r2, r3, #1
 8027e40:	2030      	movs	r0, #48	; 0x30
 8027e42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027e46:	4422      	add	r2, r4
 8027e48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027e4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027e50:	3302      	adds	r3, #2
 8027e52:	e7c7      	b.n	8027de4 <_printf_common+0x58>
 8027e54:	2301      	movs	r3, #1
 8027e56:	4622      	mov	r2, r4
 8027e58:	4649      	mov	r1, r9
 8027e5a:	4638      	mov	r0, r7
 8027e5c:	47c0      	blx	r8
 8027e5e:	3001      	adds	r0, #1
 8027e60:	d0e6      	beq.n	8027e30 <_printf_common+0xa4>
 8027e62:	3601      	adds	r6, #1
 8027e64:	e7d9      	b.n	8027e1a <_printf_common+0x8e>
	...

08027e68 <_printf_i>:
 8027e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027e6c:	460c      	mov	r4, r1
 8027e6e:	4691      	mov	r9, r2
 8027e70:	7e27      	ldrb	r7, [r4, #24]
 8027e72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027e74:	2f78      	cmp	r7, #120	; 0x78
 8027e76:	4680      	mov	r8, r0
 8027e78:	469a      	mov	sl, r3
 8027e7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027e7e:	d807      	bhi.n	8027e90 <_printf_i+0x28>
 8027e80:	2f62      	cmp	r7, #98	; 0x62
 8027e82:	d80a      	bhi.n	8027e9a <_printf_i+0x32>
 8027e84:	2f00      	cmp	r7, #0
 8027e86:	f000 80d8 	beq.w	802803a <_printf_i+0x1d2>
 8027e8a:	2f58      	cmp	r7, #88	; 0x58
 8027e8c:	f000 80a3 	beq.w	8027fd6 <_printf_i+0x16e>
 8027e90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027e94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027e98:	e03a      	b.n	8027f10 <_printf_i+0xa8>
 8027e9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8027e9e:	2b15      	cmp	r3, #21
 8027ea0:	d8f6      	bhi.n	8027e90 <_printf_i+0x28>
 8027ea2:	a001      	add	r0, pc, #4	; (adr r0, 8027ea8 <_printf_i+0x40>)
 8027ea4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8027ea8:	08027f01 	.word	0x08027f01
 8027eac:	08027f15 	.word	0x08027f15
 8027eb0:	08027e91 	.word	0x08027e91
 8027eb4:	08027e91 	.word	0x08027e91
 8027eb8:	08027e91 	.word	0x08027e91
 8027ebc:	08027e91 	.word	0x08027e91
 8027ec0:	08027f15 	.word	0x08027f15
 8027ec4:	08027e91 	.word	0x08027e91
 8027ec8:	08027e91 	.word	0x08027e91
 8027ecc:	08027e91 	.word	0x08027e91
 8027ed0:	08027e91 	.word	0x08027e91
 8027ed4:	08028021 	.word	0x08028021
 8027ed8:	08027f45 	.word	0x08027f45
 8027edc:	08028003 	.word	0x08028003
 8027ee0:	08027e91 	.word	0x08027e91
 8027ee4:	08027e91 	.word	0x08027e91
 8027ee8:	08028043 	.word	0x08028043
 8027eec:	08027e91 	.word	0x08027e91
 8027ef0:	08027f45 	.word	0x08027f45
 8027ef4:	08027e91 	.word	0x08027e91
 8027ef8:	08027e91 	.word	0x08027e91
 8027efc:	0802800b 	.word	0x0802800b
 8027f00:	680b      	ldr	r3, [r1, #0]
 8027f02:	1d1a      	adds	r2, r3, #4
 8027f04:	681b      	ldr	r3, [r3, #0]
 8027f06:	600a      	str	r2, [r1, #0]
 8027f08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027f10:	2301      	movs	r3, #1
 8027f12:	e0a3      	b.n	802805c <_printf_i+0x1f4>
 8027f14:	6825      	ldr	r5, [r4, #0]
 8027f16:	6808      	ldr	r0, [r1, #0]
 8027f18:	062e      	lsls	r6, r5, #24
 8027f1a:	f100 0304 	add.w	r3, r0, #4
 8027f1e:	d50a      	bpl.n	8027f36 <_printf_i+0xce>
 8027f20:	6805      	ldr	r5, [r0, #0]
 8027f22:	600b      	str	r3, [r1, #0]
 8027f24:	2d00      	cmp	r5, #0
 8027f26:	da03      	bge.n	8027f30 <_printf_i+0xc8>
 8027f28:	232d      	movs	r3, #45	; 0x2d
 8027f2a:	426d      	negs	r5, r5
 8027f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027f30:	485e      	ldr	r0, [pc, #376]	; (80280ac <_printf_i+0x244>)
 8027f32:	230a      	movs	r3, #10
 8027f34:	e019      	b.n	8027f6a <_printf_i+0x102>
 8027f36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8027f3a:	6805      	ldr	r5, [r0, #0]
 8027f3c:	600b      	str	r3, [r1, #0]
 8027f3e:	bf18      	it	ne
 8027f40:	b22d      	sxthne	r5, r5
 8027f42:	e7ef      	b.n	8027f24 <_printf_i+0xbc>
 8027f44:	680b      	ldr	r3, [r1, #0]
 8027f46:	6825      	ldr	r5, [r4, #0]
 8027f48:	1d18      	adds	r0, r3, #4
 8027f4a:	6008      	str	r0, [r1, #0]
 8027f4c:	0628      	lsls	r0, r5, #24
 8027f4e:	d501      	bpl.n	8027f54 <_printf_i+0xec>
 8027f50:	681d      	ldr	r5, [r3, #0]
 8027f52:	e002      	b.n	8027f5a <_printf_i+0xf2>
 8027f54:	0669      	lsls	r1, r5, #25
 8027f56:	d5fb      	bpl.n	8027f50 <_printf_i+0xe8>
 8027f58:	881d      	ldrh	r5, [r3, #0]
 8027f5a:	4854      	ldr	r0, [pc, #336]	; (80280ac <_printf_i+0x244>)
 8027f5c:	2f6f      	cmp	r7, #111	; 0x6f
 8027f5e:	bf0c      	ite	eq
 8027f60:	2308      	moveq	r3, #8
 8027f62:	230a      	movne	r3, #10
 8027f64:	2100      	movs	r1, #0
 8027f66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027f6a:	6866      	ldr	r6, [r4, #4]
 8027f6c:	60a6      	str	r6, [r4, #8]
 8027f6e:	2e00      	cmp	r6, #0
 8027f70:	bfa2      	ittt	ge
 8027f72:	6821      	ldrge	r1, [r4, #0]
 8027f74:	f021 0104 	bicge.w	r1, r1, #4
 8027f78:	6021      	strge	r1, [r4, #0]
 8027f7a:	b90d      	cbnz	r5, 8027f80 <_printf_i+0x118>
 8027f7c:	2e00      	cmp	r6, #0
 8027f7e:	d04d      	beq.n	802801c <_printf_i+0x1b4>
 8027f80:	4616      	mov	r6, r2
 8027f82:	fbb5 f1f3 	udiv	r1, r5, r3
 8027f86:	fb03 5711 	mls	r7, r3, r1, r5
 8027f8a:	5dc7      	ldrb	r7, [r0, r7]
 8027f8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027f90:	462f      	mov	r7, r5
 8027f92:	42bb      	cmp	r3, r7
 8027f94:	460d      	mov	r5, r1
 8027f96:	d9f4      	bls.n	8027f82 <_printf_i+0x11a>
 8027f98:	2b08      	cmp	r3, #8
 8027f9a:	d10b      	bne.n	8027fb4 <_printf_i+0x14c>
 8027f9c:	6823      	ldr	r3, [r4, #0]
 8027f9e:	07df      	lsls	r7, r3, #31
 8027fa0:	d508      	bpl.n	8027fb4 <_printf_i+0x14c>
 8027fa2:	6923      	ldr	r3, [r4, #16]
 8027fa4:	6861      	ldr	r1, [r4, #4]
 8027fa6:	4299      	cmp	r1, r3
 8027fa8:	bfde      	ittt	le
 8027faa:	2330      	movle	r3, #48	; 0x30
 8027fac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027fb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8027fb4:	1b92      	subs	r2, r2, r6
 8027fb6:	6122      	str	r2, [r4, #16]
 8027fb8:	f8cd a000 	str.w	sl, [sp]
 8027fbc:	464b      	mov	r3, r9
 8027fbe:	aa03      	add	r2, sp, #12
 8027fc0:	4621      	mov	r1, r4
 8027fc2:	4640      	mov	r0, r8
 8027fc4:	f7ff fee2 	bl	8027d8c <_printf_common>
 8027fc8:	3001      	adds	r0, #1
 8027fca:	d14c      	bne.n	8028066 <_printf_i+0x1fe>
 8027fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8027fd0:	b004      	add	sp, #16
 8027fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027fd6:	4835      	ldr	r0, [pc, #212]	; (80280ac <_printf_i+0x244>)
 8027fd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8027fdc:	6823      	ldr	r3, [r4, #0]
 8027fde:	680e      	ldr	r6, [r1, #0]
 8027fe0:	061f      	lsls	r7, r3, #24
 8027fe2:	f856 5b04 	ldr.w	r5, [r6], #4
 8027fe6:	600e      	str	r6, [r1, #0]
 8027fe8:	d514      	bpl.n	8028014 <_printf_i+0x1ac>
 8027fea:	07d9      	lsls	r1, r3, #31
 8027fec:	bf44      	itt	mi
 8027fee:	f043 0320 	orrmi.w	r3, r3, #32
 8027ff2:	6023      	strmi	r3, [r4, #0]
 8027ff4:	b91d      	cbnz	r5, 8027ffe <_printf_i+0x196>
 8027ff6:	6823      	ldr	r3, [r4, #0]
 8027ff8:	f023 0320 	bic.w	r3, r3, #32
 8027ffc:	6023      	str	r3, [r4, #0]
 8027ffe:	2310      	movs	r3, #16
 8028000:	e7b0      	b.n	8027f64 <_printf_i+0xfc>
 8028002:	6823      	ldr	r3, [r4, #0]
 8028004:	f043 0320 	orr.w	r3, r3, #32
 8028008:	6023      	str	r3, [r4, #0]
 802800a:	2378      	movs	r3, #120	; 0x78
 802800c:	4828      	ldr	r0, [pc, #160]	; (80280b0 <_printf_i+0x248>)
 802800e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8028012:	e7e3      	b.n	8027fdc <_printf_i+0x174>
 8028014:	065e      	lsls	r6, r3, #25
 8028016:	bf48      	it	mi
 8028018:	b2ad      	uxthmi	r5, r5
 802801a:	e7e6      	b.n	8027fea <_printf_i+0x182>
 802801c:	4616      	mov	r6, r2
 802801e:	e7bb      	b.n	8027f98 <_printf_i+0x130>
 8028020:	680b      	ldr	r3, [r1, #0]
 8028022:	6826      	ldr	r6, [r4, #0]
 8028024:	6960      	ldr	r0, [r4, #20]
 8028026:	1d1d      	adds	r5, r3, #4
 8028028:	600d      	str	r5, [r1, #0]
 802802a:	0635      	lsls	r5, r6, #24
 802802c:	681b      	ldr	r3, [r3, #0]
 802802e:	d501      	bpl.n	8028034 <_printf_i+0x1cc>
 8028030:	6018      	str	r0, [r3, #0]
 8028032:	e002      	b.n	802803a <_printf_i+0x1d2>
 8028034:	0671      	lsls	r1, r6, #25
 8028036:	d5fb      	bpl.n	8028030 <_printf_i+0x1c8>
 8028038:	8018      	strh	r0, [r3, #0]
 802803a:	2300      	movs	r3, #0
 802803c:	6123      	str	r3, [r4, #16]
 802803e:	4616      	mov	r6, r2
 8028040:	e7ba      	b.n	8027fb8 <_printf_i+0x150>
 8028042:	680b      	ldr	r3, [r1, #0]
 8028044:	1d1a      	adds	r2, r3, #4
 8028046:	600a      	str	r2, [r1, #0]
 8028048:	681e      	ldr	r6, [r3, #0]
 802804a:	6862      	ldr	r2, [r4, #4]
 802804c:	2100      	movs	r1, #0
 802804e:	4630      	mov	r0, r6
 8028050:	f7d8 f94e 	bl	80002f0 <memchr>
 8028054:	b108      	cbz	r0, 802805a <_printf_i+0x1f2>
 8028056:	1b80      	subs	r0, r0, r6
 8028058:	6060      	str	r0, [r4, #4]
 802805a:	6863      	ldr	r3, [r4, #4]
 802805c:	6123      	str	r3, [r4, #16]
 802805e:	2300      	movs	r3, #0
 8028060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028064:	e7a8      	b.n	8027fb8 <_printf_i+0x150>
 8028066:	6923      	ldr	r3, [r4, #16]
 8028068:	4632      	mov	r2, r6
 802806a:	4649      	mov	r1, r9
 802806c:	4640      	mov	r0, r8
 802806e:	47d0      	blx	sl
 8028070:	3001      	adds	r0, #1
 8028072:	d0ab      	beq.n	8027fcc <_printf_i+0x164>
 8028074:	6823      	ldr	r3, [r4, #0]
 8028076:	079b      	lsls	r3, r3, #30
 8028078:	d413      	bmi.n	80280a2 <_printf_i+0x23a>
 802807a:	68e0      	ldr	r0, [r4, #12]
 802807c:	9b03      	ldr	r3, [sp, #12]
 802807e:	4298      	cmp	r0, r3
 8028080:	bfb8      	it	lt
 8028082:	4618      	movlt	r0, r3
 8028084:	e7a4      	b.n	8027fd0 <_printf_i+0x168>
 8028086:	2301      	movs	r3, #1
 8028088:	4632      	mov	r2, r6
 802808a:	4649      	mov	r1, r9
 802808c:	4640      	mov	r0, r8
 802808e:	47d0      	blx	sl
 8028090:	3001      	adds	r0, #1
 8028092:	d09b      	beq.n	8027fcc <_printf_i+0x164>
 8028094:	3501      	adds	r5, #1
 8028096:	68e3      	ldr	r3, [r4, #12]
 8028098:	9903      	ldr	r1, [sp, #12]
 802809a:	1a5b      	subs	r3, r3, r1
 802809c:	42ab      	cmp	r3, r5
 802809e:	dcf2      	bgt.n	8028086 <_printf_i+0x21e>
 80280a0:	e7eb      	b.n	802807a <_printf_i+0x212>
 80280a2:	2500      	movs	r5, #0
 80280a4:	f104 0619 	add.w	r6, r4, #25
 80280a8:	e7f5      	b.n	8028096 <_printf_i+0x22e>
 80280aa:	bf00      	nop
 80280ac:	0802c649 	.word	0x0802c649
 80280b0:	0802c65a 	.word	0x0802c65a

080280b4 <_sbrk_r>:
 80280b4:	b538      	push	{r3, r4, r5, lr}
 80280b6:	4d06      	ldr	r5, [pc, #24]	; (80280d0 <_sbrk_r+0x1c>)
 80280b8:	2300      	movs	r3, #0
 80280ba:	4604      	mov	r4, r0
 80280bc:	4608      	mov	r0, r1
 80280be:	602b      	str	r3, [r5, #0]
 80280c0:	f7d9 fd1e 	bl	8001b00 <_sbrk>
 80280c4:	1c43      	adds	r3, r0, #1
 80280c6:	d102      	bne.n	80280ce <_sbrk_r+0x1a>
 80280c8:	682b      	ldr	r3, [r5, #0]
 80280ca:	b103      	cbz	r3, 80280ce <_sbrk_r+0x1a>
 80280cc:	6023      	str	r3, [r4, #0]
 80280ce:	bd38      	pop	{r3, r4, r5, pc}
 80280d0:	2400b4fc 	.word	0x2400b4fc

080280d4 <_raise_r>:
 80280d4:	291f      	cmp	r1, #31
 80280d6:	b538      	push	{r3, r4, r5, lr}
 80280d8:	4604      	mov	r4, r0
 80280da:	460d      	mov	r5, r1
 80280dc:	d904      	bls.n	80280e8 <_raise_r+0x14>
 80280de:	2316      	movs	r3, #22
 80280e0:	6003      	str	r3, [r0, #0]
 80280e2:	f04f 30ff 	mov.w	r0, #4294967295
 80280e6:	bd38      	pop	{r3, r4, r5, pc}
 80280e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80280ea:	b112      	cbz	r2, 80280f2 <_raise_r+0x1e>
 80280ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80280f0:	b94b      	cbnz	r3, 8028106 <_raise_r+0x32>
 80280f2:	4620      	mov	r0, r4
 80280f4:	f000 f830 	bl	8028158 <_getpid_r>
 80280f8:	462a      	mov	r2, r5
 80280fa:	4601      	mov	r1, r0
 80280fc:	4620      	mov	r0, r4
 80280fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028102:	f000 b817 	b.w	8028134 <_kill_r>
 8028106:	2b01      	cmp	r3, #1
 8028108:	d00a      	beq.n	8028120 <_raise_r+0x4c>
 802810a:	1c59      	adds	r1, r3, #1
 802810c:	d103      	bne.n	8028116 <_raise_r+0x42>
 802810e:	2316      	movs	r3, #22
 8028110:	6003      	str	r3, [r0, #0]
 8028112:	2001      	movs	r0, #1
 8028114:	e7e7      	b.n	80280e6 <_raise_r+0x12>
 8028116:	2400      	movs	r4, #0
 8028118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802811c:	4628      	mov	r0, r5
 802811e:	4798      	blx	r3
 8028120:	2000      	movs	r0, #0
 8028122:	e7e0      	b.n	80280e6 <_raise_r+0x12>

08028124 <raise>:
 8028124:	4b02      	ldr	r3, [pc, #8]	; (8028130 <raise+0xc>)
 8028126:	4601      	mov	r1, r0
 8028128:	6818      	ldr	r0, [r3, #0]
 802812a:	f7ff bfd3 	b.w	80280d4 <_raise_r>
 802812e:	bf00      	nop
 8028130:	240000c4 	.word	0x240000c4

08028134 <_kill_r>:
 8028134:	b538      	push	{r3, r4, r5, lr}
 8028136:	4d07      	ldr	r5, [pc, #28]	; (8028154 <_kill_r+0x20>)
 8028138:	2300      	movs	r3, #0
 802813a:	4604      	mov	r4, r0
 802813c:	4608      	mov	r0, r1
 802813e:	4611      	mov	r1, r2
 8028140:	602b      	str	r3, [r5, #0]
 8028142:	f7d9 fc55 	bl	80019f0 <_kill>
 8028146:	1c43      	adds	r3, r0, #1
 8028148:	d102      	bne.n	8028150 <_kill_r+0x1c>
 802814a:	682b      	ldr	r3, [r5, #0]
 802814c:	b103      	cbz	r3, 8028150 <_kill_r+0x1c>
 802814e:	6023      	str	r3, [r4, #0]
 8028150:	bd38      	pop	{r3, r4, r5, pc}
 8028152:	bf00      	nop
 8028154:	2400b4fc 	.word	0x2400b4fc

08028158 <_getpid_r>:
 8028158:	f7d9 bc42 	b.w	80019e0 <_getpid>

0802815c <__swbuf_r>:
 802815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802815e:	460e      	mov	r6, r1
 8028160:	4614      	mov	r4, r2
 8028162:	4605      	mov	r5, r0
 8028164:	b118      	cbz	r0, 802816e <__swbuf_r+0x12>
 8028166:	6983      	ldr	r3, [r0, #24]
 8028168:	b90b      	cbnz	r3, 802816e <__swbuf_r+0x12>
 802816a:	f000 fa33 	bl	80285d4 <__sinit>
 802816e:	4b21      	ldr	r3, [pc, #132]	; (80281f4 <__swbuf_r+0x98>)
 8028170:	429c      	cmp	r4, r3
 8028172:	d12b      	bne.n	80281cc <__swbuf_r+0x70>
 8028174:	686c      	ldr	r4, [r5, #4]
 8028176:	69a3      	ldr	r3, [r4, #24]
 8028178:	60a3      	str	r3, [r4, #8]
 802817a:	89a3      	ldrh	r3, [r4, #12]
 802817c:	071a      	lsls	r2, r3, #28
 802817e:	d52f      	bpl.n	80281e0 <__swbuf_r+0x84>
 8028180:	6923      	ldr	r3, [r4, #16]
 8028182:	b36b      	cbz	r3, 80281e0 <__swbuf_r+0x84>
 8028184:	6923      	ldr	r3, [r4, #16]
 8028186:	6820      	ldr	r0, [r4, #0]
 8028188:	1ac0      	subs	r0, r0, r3
 802818a:	6963      	ldr	r3, [r4, #20]
 802818c:	b2f6      	uxtb	r6, r6
 802818e:	4283      	cmp	r3, r0
 8028190:	4637      	mov	r7, r6
 8028192:	dc04      	bgt.n	802819e <__swbuf_r+0x42>
 8028194:	4621      	mov	r1, r4
 8028196:	4628      	mov	r0, r5
 8028198:	f000 f988 	bl	80284ac <_fflush_r>
 802819c:	bb30      	cbnz	r0, 80281ec <__swbuf_r+0x90>
 802819e:	68a3      	ldr	r3, [r4, #8]
 80281a0:	3b01      	subs	r3, #1
 80281a2:	60a3      	str	r3, [r4, #8]
 80281a4:	6823      	ldr	r3, [r4, #0]
 80281a6:	1c5a      	adds	r2, r3, #1
 80281a8:	6022      	str	r2, [r4, #0]
 80281aa:	701e      	strb	r6, [r3, #0]
 80281ac:	6963      	ldr	r3, [r4, #20]
 80281ae:	3001      	adds	r0, #1
 80281b0:	4283      	cmp	r3, r0
 80281b2:	d004      	beq.n	80281be <__swbuf_r+0x62>
 80281b4:	89a3      	ldrh	r3, [r4, #12]
 80281b6:	07db      	lsls	r3, r3, #31
 80281b8:	d506      	bpl.n	80281c8 <__swbuf_r+0x6c>
 80281ba:	2e0a      	cmp	r6, #10
 80281bc:	d104      	bne.n	80281c8 <__swbuf_r+0x6c>
 80281be:	4621      	mov	r1, r4
 80281c0:	4628      	mov	r0, r5
 80281c2:	f000 f973 	bl	80284ac <_fflush_r>
 80281c6:	b988      	cbnz	r0, 80281ec <__swbuf_r+0x90>
 80281c8:	4638      	mov	r0, r7
 80281ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80281cc:	4b0a      	ldr	r3, [pc, #40]	; (80281f8 <__swbuf_r+0x9c>)
 80281ce:	429c      	cmp	r4, r3
 80281d0:	d101      	bne.n	80281d6 <__swbuf_r+0x7a>
 80281d2:	68ac      	ldr	r4, [r5, #8]
 80281d4:	e7cf      	b.n	8028176 <__swbuf_r+0x1a>
 80281d6:	4b09      	ldr	r3, [pc, #36]	; (80281fc <__swbuf_r+0xa0>)
 80281d8:	429c      	cmp	r4, r3
 80281da:	bf08      	it	eq
 80281dc:	68ec      	ldreq	r4, [r5, #12]
 80281de:	e7ca      	b.n	8028176 <__swbuf_r+0x1a>
 80281e0:	4621      	mov	r1, r4
 80281e2:	4628      	mov	r0, r5
 80281e4:	f000 f80c 	bl	8028200 <__swsetup_r>
 80281e8:	2800      	cmp	r0, #0
 80281ea:	d0cb      	beq.n	8028184 <__swbuf_r+0x28>
 80281ec:	f04f 37ff 	mov.w	r7, #4294967295
 80281f0:	e7ea      	b.n	80281c8 <__swbuf_r+0x6c>
 80281f2:	bf00      	nop
 80281f4:	0802c690 	.word	0x0802c690
 80281f8:	0802c6b0 	.word	0x0802c6b0
 80281fc:	0802c670 	.word	0x0802c670

08028200 <__swsetup_r>:
 8028200:	4b32      	ldr	r3, [pc, #200]	; (80282cc <__swsetup_r+0xcc>)
 8028202:	b570      	push	{r4, r5, r6, lr}
 8028204:	681d      	ldr	r5, [r3, #0]
 8028206:	4606      	mov	r6, r0
 8028208:	460c      	mov	r4, r1
 802820a:	b125      	cbz	r5, 8028216 <__swsetup_r+0x16>
 802820c:	69ab      	ldr	r3, [r5, #24]
 802820e:	b913      	cbnz	r3, 8028216 <__swsetup_r+0x16>
 8028210:	4628      	mov	r0, r5
 8028212:	f000 f9df 	bl	80285d4 <__sinit>
 8028216:	4b2e      	ldr	r3, [pc, #184]	; (80282d0 <__swsetup_r+0xd0>)
 8028218:	429c      	cmp	r4, r3
 802821a:	d10f      	bne.n	802823c <__swsetup_r+0x3c>
 802821c:	686c      	ldr	r4, [r5, #4]
 802821e:	89a3      	ldrh	r3, [r4, #12]
 8028220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028224:	0719      	lsls	r1, r3, #28
 8028226:	d42c      	bmi.n	8028282 <__swsetup_r+0x82>
 8028228:	06dd      	lsls	r5, r3, #27
 802822a:	d411      	bmi.n	8028250 <__swsetup_r+0x50>
 802822c:	2309      	movs	r3, #9
 802822e:	6033      	str	r3, [r6, #0]
 8028230:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028234:	81a3      	strh	r3, [r4, #12]
 8028236:	f04f 30ff 	mov.w	r0, #4294967295
 802823a:	e03e      	b.n	80282ba <__swsetup_r+0xba>
 802823c:	4b25      	ldr	r3, [pc, #148]	; (80282d4 <__swsetup_r+0xd4>)
 802823e:	429c      	cmp	r4, r3
 8028240:	d101      	bne.n	8028246 <__swsetup_r+0x46>
 8028242:	68ac      	ldr	r4, [r5, #8]
 8028244:	e7eb      	b.n	802821e <__swsetup_r+0x1e>
 8028246:	4b24      	ldr	r3, [pc, #144]	; (80282d8 <__swsetup_r+0xd8>)
 8028248:	429c      	cmp	r4, r3
 802824a:	bf08      	it	eq
 802824c:	68ec      	ldreq	r4, [r5, #12]
 802824e:	e7e6      	b.n	802821e <__swsetup_r+0x1e>
 8028250:	0758      	lsls	r0, r3, #29
 8028252:	d512      	bpl.n	802827a <__swsetup_r+0x7a>
 8028254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028256:	b141      	cbz	r1, 802826a <__swsetup_r+0x6a>
 8028258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802825c:	4299      	cmp	r1, r3
 802825e:	d002      	beq.n	8028266 <__swsetup_r+0x66>
 8028260:	4630      	mov	r0, r6
 8028262:	f7ff fb8f 	bl	8027984 <_free_r>
 8028266:	2300      	movs	r3, #0
 8028268:	6363      	str	r3, [r4, #52]	; 0x34
 802826a:	89a3      	ldrh	r3, [r4, #12]
 802826c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028270:	81a3      	strh	r3, [r4, #12]
 8028272:	2300      	movs	r3, #0
 8028274:	6063      	str	r3, [r4, #4]
 8028276:	6923      	ldr	r3, [r4, #16]
 8028278:	6023      	str	r3, [r4, #0]
 802827a:	89a3      	ldrh	r3, [r4, #12]
 802827c:	f043 0308 	orr.w	r3, r3, #8
 8028280:	81a3      	strh	r3, [r4, #12]
 8028282:	6923      	ldr	r3, [r4, #16]
 8028284:	b94b      	cbnz	r3, 802829a <__swsetup_r+0x9a>
 8028286:	89a3      	ldrh	r3, [r4, #12]
 8028288:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802828c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028290:	d003      	beq.n	802829a <__swsetup_r+0x9a>
 8028292:	4621      	mov	r1, r4
 8028294:	4630      	mov	r0, r6
 8028296:	f000 fa63 	bl	8028760 <__smakebuf_r>
 802829a:	89a0      	ldrh	r0, [r4, #12]
 802829c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80282a0:	f010 0301 	ands.w	r3, r0, #1
 80282a4:	d00a      	beq.n	80282bc <__swsetup_r+0xbc>
 80282a6:	2300      	movs	r3, #0
 80282a8:	60a3      	str	r3, [r4, #8]
 80282aa:	6963      	ldr	r3, [r4, #20]
 80282ac:	425b      	negs	r3, r3
 80282ae:	61a3      	str	r3, [r4, #24]
 80282b0:	6923      	ldr	r3, [r4, #16]
 80282b2:	b943      	cbnz	r3, 80282c6 <__swsetup_r+0xc6>
 80282b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80282b8:	d1ba      	bne.n	8028230 <__swsetup_r+0x30>
 80282ba:	bd70      	pop	{r4, r5, r6, pc}
 80282bc:	0781      	lsls	r1, r0, #30
 80282be:	bf58      	it	pl
 80282c0:	6963      	ldrpl	r3, [r4, #20]
 80282c2:	60a3      	str	r3, [r4, #8]
 80282c4:	e7f4      	b.n	80282b0 <__swsetup_r+0xb0>
 80282c6:	2000      	movs	r0, #0
 80282c8:	e7f7      	b.n	80282ba <__swsetup_r+0xba>
 80282ca:	bf00      	nop
 80282cc:	240000c4 	.word	0x240000c4
 80282d0:	0802c690 	.word	0x0802c690
 80282d4:	0802c6b0 	.word	0x0802c6b0
 80282d8:	0802c670 	.word	0x0802c670

080282dc <__register_exitproc>:
 80282dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80282e0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802839c <__register_exitproc+0xc0>
 80282e4:	4606      	mov	r6, r0
 80282e6:	f8d8 0000 	ldr.w	r0, [r8]
 80282ea:	461f      	mov	r7, r3
 80282ec:	460d      	mov	r5, r1
 80282ee:	4691      	mov	r9, r2
 80282f0:	f000 fa0e 	bl	8028710 <__retarget_lock_acquire_recursive>
 80282f4:	4b25      	ldr	r3, [pc, #148]	; (802838c <__register_exitproc+0xb0>)
 80282f6:	681c      	ldr	r4, [r3, #0]
 80282f8:	b934      	cbnz	r4, 8028308 <__register_exitproc+0x2c>
 80282fa:	4c25      	ldr	r4, [pc, #148]	; (8028390 <__register_exitproc+0xb4>)
 80282fc:	601c      	str	r4, [r3, #0]
 80282fe:	4b25      	ldr	r3, [pc, #148]	; (8028394 <__register_exitproc+0xb8>)
 8028300:	b113      	cbz	r3, 8028308 <__register_exitproc+0x2c>
 8028302:	681b      	ldr	r3, [r3, #0]
 8028304:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028308:	6863      	ldr	r3, [r4, #4]
 802830a:	2b1f      	cmp	r3, #31
 802830c:	dd07      	ble.n	802831e <__register_exitproc+0x42>
 802830e:	f8d8 0000 	ldr.w	r0, [r8]
 8028312:	f000 f9ff 	bl	8028714 <__retarget_lock_release_recursive>
 8028316:	f04f 30ff 	mov.w	r0, #4294967295
 802831a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802831e:	b34e      	cbz	r6, 8028374 <__register_exitproc+0x98>
 8028320:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028324:	b988      	cbnz	r0, 802834a <__register_exitproc+0x6e>
 8028326:	4b1c      	ldr	r3, [pc, #112]	; (8028398 <__register_exitproc+0xbc>)
 8028328:	b923      	cbnz	r3, 8028334 <__register_exitproc+0x58>
 802832a:	f8d8 0000 	ldr.w	r0, [r8]
 802832e:	f000 f9f0 	bl	8028712 <__retarget_lock_release>
 8028332:	e7f0      	b.n	8028316 <__register_exitproc+0x3a>
 8028334:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028338:	f7ff fafe 	bl	8027938 <malloc>
 802833c:	2800      	cmp	r0, #0
 802833e:	d0f4      	beq.n	802832a <__register_exitproc+0x4e>
 8028340:	2300      	movs	r3, #0
 8028342:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8028346:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802834a:	6863      	ldr	r3, [r4, #4]
 802834c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028350:	2201      	movs	r2, #1
 8028352:	409a      	lsls	r2, r3
 8028354:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028358:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802835c:	4313      	orrs	r3, r2
 802835e:	2e02      	cmp	r6, #2
 8028360:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028364:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028368:	bf02      	ittt	eq
 802836a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802836e:	431a      	orreq	r2, r3
 8028370:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8028374:	6863      	ldr	r3, [r4, #4]
 8028376:	f8d8 0000 	ldr.w	r0, [r8]
 802837a:	1c5a      	adds	r2, r3, #1
 802837c:	3302      	adds	r3, #2
 802837e:	6062      	str	r2, [r4, #4]
 8028380:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028384:	f000 f9c6 	bl	8028714 <__retarget_lock_release_recursive>
 8028388:	2000      	movs	r0, #0
 802838a:	e7c6      	b.n	802831a <__register_exitproc+0x3e>
 802838c:	2400b184 	.word	0x2400b184
 8028390:	2400b0f8 	.word	0x2400b0f8
 8028394:	0802c66c 	.word	0x0802c66c
 8028398:	08027939 	.word	0x08027939
 802839c:	24000128 	.word	0x24000128

080283a0 <__sflush_r>:
 80283a0:	898a      	ldrh	r2, [r1, #12]
 80283a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80283a6:	4605      	mov	r5, r0
 80283a8:	0710      	lsls	r0, r2, #28
 80283aa:	460c      	mov	r4, r1
 80283ac:	d458      	bmi.n	8028460 <__sflush_r+0xc0>
 80283ae:	684b      	ldr	r3, [r1, #4]
 80283b0:	2b00      	cmp	r3, #0
 80283b2:	dc05      	bgt.n	80283c0 <__sflush_r+0x20>
 80283b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80283b6:	2b00      	cmp	r3, #0
 80283b8:	dc02      	bgt.n	80283c0 <__sflush_r+0x20>
 80283ba:	2000      	movs	r0, #0
 80283bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80283c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80283c2:	2e00      	cmp	r6, #0
 80283c4:	d0f9      	beq.n	80283ba <__sflush_r+0x1a>
 80283c6:	2300      	movs	r3, #0
 80283c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80283cc:	682f      	ldr	r7, [r5, #0]
 80283ce:	602b      	str	r3, [r5, #0]
 80283d0:	d032      	beq.n	8028438 <__sflush_r+0x98>
 80283d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80283d4:	89a3      	ldrh	r3, [r4, #12]
 80283d6:	075a      	lsls	r2, r3, #29
 80283d8:	d505      	bpl.n	80283e6 <__sflush_r+0x46>
 80283da:	6863      	ldr	r3, [r4, #4]
 80283dc:	1ac0      	subs	r0, r0, r3
 80283de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80283e0:	b10b      	cbz	r3, 80283e6 <__sflush_r+0x46>
 80283e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80283e4:	1ac0      	subs	r0, r0, r3
 80283e6:	2300      	movs	r3, #0
 80283e8:	4602      	mov	r2, r0
 80283ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80283ec:	6a21      	ldr	r1, [r4, #32]
 80283ee:	4628      	mov	r0, r5
 80283f0:	47b0      	blx	r6
 80283f2:	1c43      	adds	r3, r0, #1
 80283f4:	89a3      	ldrh	r3, [r4, #12]
 80283f6:	d106      	bne.n	8028406 <__sflush_r+0x66>
 80283f8:	6829      	ldr	r1, [r5, #0]
 80283fa:	291d      	cmp	r1, #29
 80283fc:	d82c      	bhi.n	8028458 <__sflush_r+0xb8>
 80283fe:	4a2a      	ldr	r2, [pc, #168]	; (80284a8 <__sflush_r+0x108>)
 8028400:	40ca      	lsrs	r2, r1
 8028402:	07d6      	lsls	r6, r2, #31
 8028404:	d528      	bpl.n	8028458 <__sflush_r+0xb8>
 8028406:	2200      	movs	r2, #0
 8028408:	6062      	str	r2, [r4, #4]
 802840a:	04d9      	lsls	r1, r3, #19
 802840c:	6922      	ldr	r2, [r4, #16]
 802840e:	6022      	str	r2, [r4, #0]
 8028410:	d504      	bpl.n	802841c <__sflush_r+0x7c>
 8028412:	1c42      	adds	r2, r0, #1
 8028414:	d101      	bne.n	802841a <__sflush_r+0x7a>
 8028416:	682b      	ldr	r3, [r5, #0]
 8028418:	b903      	cbnz	r3, 802841c <__sflush_r+0x7c>
 802841a:	6560      	str	r0, [r4, #84]	; 0x54
 802841c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802841e:	602f      	str	r7, [r5, #0]
 8028420:	2900      	cmp	r1, #0
 8028422:	d0ca      	beq.n	80283ba <__sflush_r+0x1a>
 8028424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028428:	4299      	cmp	r1, r3
 802842a:	d002      	beq.n	8028432 <__sflush_r+0x92>
 802842c:	4628      	mov	r0, r5
 802842e:	f7ff faa9 	bl	8027984 <_free_r>
 8028432:	2000      	movs	r0, #0
 8028434:	6360      	str	r0, [r4, #52]	; 0x34
 8028436:	e7c1      	b.n	80283bc <__sflush_r+0x1c>
 8028438:	6a21      	ldr	r1, [r4, #32]
 802843a:	2301      	movs	r3, #1
 802843c:	4628      	mov	r0, r5
 802843e:	47b0      	blx	r6
 8028440:	1c41      	adds	r1, r0, #1
 8028442:	d1c7      	bne.n	80283d4 <__sflush_r+0x34>
 8028444:	682b      	ldr	r3, [r5, #0]
 8028446:	2b00      	cmp	r3, #0
 8028448:	d0c4      	beq.n	80283d4 <__sflush_r+0x34>
 802844a:	2b1d      	cmp	r3, #29
 802844c:	d001      	beq.n	8028452 <__sflush_r+0xb2>
 802844e:	2b16      	cmp	r3, #22
 8028450:	d101      	bne.n	8028456 <__sflush_r+0xb6>
 8028452:	602f      	str	r7, [r5, #0]
 8028454:	e7b1      	b.n	80283ba <__sflush_r+0x1a>
 8028456:	89a3      	ldrh	r3, [r4, #12]
 8028458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802845c:	81a3      	strh	r3, [r4, #12]
 802845e:	e7ad      	b.n	80283bc <__sflush_r+0x1c>
 8028460:	690f      	ldr	r7, [r1, #16]
 8028462:	2f00      	cmp	r7, #0
 8028464:	d0a9      	beq.n	80283ba <__sflush_r+0x1a>
 8028466:	0793      	lsls	r3, r2, #30
 8028468:	680e      	ldr	r6, [r1, #0]
 802846a:	bf08      	it	eq
 802846c:	694b      	ldreq	r3, [r1, #20]
 802846e:	600f      	str	r7, [r1, #0]
 8028470:	bf18      	it	ne
 8028472:	2300      	movne	r3, #0
 8028474:	eba6 0807 	sub.w	r8, r6, r7
 8028478:	608b      	str	r3, [r1, #8]
 802847a:	f1b8 0f00 	cmp.w	r8, #0
 802847e:	dd9c      	ble.n	80283ba <__sflush_r+0x1a>
 8028480:	6a21      	ldr	r1, [r4, #32]
 8028482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028484:	4643      	mov	r3, r8
 8028486:	463a      	mov	r2, r7
 8028488:	4628      	mov	r0, r5
 802848a:	47b0      	blx	r6
 802848c:	2800      	cmp	r0, #0
 802848e:	dc06      	bgt.n	802849e <__sflush_r+0xfe>
 8028490:	89a3      	ldrh	r3, [r4, #12]
 8028492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028496:	81a3      	strh	r3, [r4, #12]
 8028498:	f04f 30ff 	mov.w	r0, #4294967295
 802849c:	e78e      	b.n	80283bc <__sflush_r+0x1c>
 802849e:	4407      	add	r7, r0
 80284a0:	eba8 0800 	sub.w	r8, r8, r0
 80284a4:	e7e9      	b.n	802847a <__sflush_r+0xda>
 80284a6:	bf00      	nop
 80284a8:	20400001 	.word	0x20400001

080284ac <_fflush_r>:
 80284ac:	b538      	push	{r3, r4, r5, lr}
 80284ae:	690b      	ldr	r3, [r1, #16]
 80284b0:	4605      	mov	r5, r0
 80284b2:	460c      	mov	r4, r1
 80284b4:	b913      	cbnz	r3, 80284bc <_fflush_r+0x10>
 80284b6:	2500      	movs	r5, #0
 80284b8:	4628      	mov	r0, r5
 80284ba:	bd38      	pop	{r3, r4, r5, pc}
 80284bc:	b118      	cbz	r0, 80284c6 <_fflush_r+0x1a>
 80284be:	6983      	ldr	r3, [r0, #24]
 80284c0:	b90b      	cbnz	r3, 80284c6 <_fflush_r+0x1a>
 80284c2:	f000 f887 	bl	80285d4 <__sinit>
 80284c6:	4b14      	ldr	r3, [pc, #80]	; (8028518 <_fflush_r+0x6c>)
 80284c8:	429c      	cmp	r4, r3
 80284ca:	d11b      	bne.n	8028504 <_fflush_r+0x58>
 80284cc:	686c      	ldr	r4, [r5, #4]
 80284ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80284d2:	2b00      	cmp	r3, #0
 80284d4:	d0ef      	beq.n	80284b6 <_fflush_r+0xa>
 80284d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80284d8:	07d0      	lsls	r0, r2, #31
 80284da:	d404      	bmi.n	80284e6 <_fflush_r+0x3a>
 80284dc:	0599      	lsls	r1, r3, #22
 80284de:	d402      	bmi.n	80284e6 <_fflush_r+0x3a>
 80284e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80284e2:	f000 f915 	bl	8028710 <__retarget_lock_acquire_recursive>
 80284e6:	4628      	mov	r0, r5
 80284e8:	4621      	mov	r1, r4
 80284ea:	f7ff ff59 	bl	80283a0 <__sflush_r>
 80284ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80284f0:	07da      	lsls	r2, r3, #31
 80284f2:	4605      	mov	r5, r0
 80284f4:	d4e0      	bmi.n	80284b8 <_fflush_r+0xc>
 80284f6:	89a3      	ldrh	r3, [r4, #12]
 80284f8:	059b      	lsls	r3, r3, #22
 80284fa:	d4dd      	bmi.n	80284b8 <_fflush_r+0xc>
 80284fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80284fe:	f000 f909 	bl	8028714 <__retarget_lock_release_recursive>
 8028502:	e7d9      	b.n	80284b8 <_fflush_r+0xc>
 8028504:	4b05      	ldr	r3, [pc, #20]	; (802851c <_fflush_r+0x70>)
 8028506:	429c      	cmp	r4, r3
 8028508:	d101      	bne.n	802850e <_fflush_r+0x62>
 802850a:	68ac      	ldr	r4, [r5, #8]
 802850c:	e7df      	b.n	80284ce <_fflush_r+0x22>
 802850e:	4b04      	ldr	r3, [pc, #16]	; (8028520 <_fflush_r+0x74>)
 8028510:	429c      	cmp	r4, r3
 8028512:	bf08      	it	eq
 8028514:	68ec      	ldreq	r4, [r5, #12]
 8028516:	e7da      	b.n	80284ce <_fflush_r+0x22>
 8028518:	0802c690 	.word	0x0802c690
 802851c:	0802c6b0 	.word	0x0802c6b0
 8028520:	0802c670 	.word	0x0802c670

08028524 <std>:
 8028524:	2300      	movs	r3, #0
 8028526:	b510      	push	{r4, lr}
 8028528:	4604      	mov	r4, r0
 802852a:	e9c0 3300 	strd	r3, r3, [r0]
 802852e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028532:	6083      	str	r3, [r0, #8]
 8028534:	8181      	strh	r1, [r0, #12]
 8028536:	6643      	str	r3, [r0, #100]	; 0x64
 8028538:	81c2      	strh	r2, [r0, #14]
 802853a:	6183      	str	r3, [r0, #24]
 802853c:	4619      	mov	r1, r3
 802853e:	2208      	movs	r2, #8
 8028540:	305c      	adds	r0, #92	; 0x5c
 8028542:	f7ff fa17 	bl	8027974 <memset>
 8028546:	4b05      	ldr	r3, [pc, #20]	; (802855c <std+0x38>)
 8028548:	6263      	str	r3, [r4, #36]	; 0x24
 802854a:	4b05      	ldr	r3, [pc, #20]	; (8028560 <std+0x3c>)
 802854c:	62a3      	str	r3, [r4, #40]	; 0x28
 802854e:	4b05      	ldr	r3, [pc, #20]	; (8028564 <std+0x40>)
 8028550:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028552:	4b05      	ldr	r3, [pc, #20]	; (8028568 <std+0x44>)
 8028554:	6224      	str	r4, [r4, #32]
 8028556:	6323      	str	r3, [r4, #48]	; 0x30
 8028558:	bd10      	pop	{r4, pc}
 802855a:	bf00      	nop
 802855c:	080287f9 	.word	0x080287f9
 8028560:	0802881b 	.word	0x0802881b
 8028564:	08028853 	.word	0x08028853
 8028568:	08028877 	.word	0x08028877

0802856c <_cleanup_r>:
 802856c:	4901      	ldr	r1, [pc, #4]	; (8028574 <_cleanup_r+0x8>)
 802856e:	f000 b8af 	b.w	80286d0 <_fwalk_reent>
 8028572:	bf00      	nop
 8028574:	080284ad 	.word	0x080284ad

08028578 <__sfmoreglue>:
 8028578:	b570      	push	{r4, r5, r6, lr}
 802857a:	1e4a      	subs	r2, r1, #1
 802857c:	2568      	movs	r5, #104	; 0x68
 802857e:	4355      	muls	r5, r2
 8028580:	460e      	mov	r6, r1
 8028582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028586:	f7ff fa4d 	bl	8027a24 <_malloc_r>
 802858a:	4604      	mov	r4, r0
 802858c:	b140      	cbz	r0, 80285a0 <__sfmoreglue+0x28>
 802858e:	2100      	movs	r1, #0
 8028590:	e9c0 1600 	strd	r1, r6, [r0]
 8028594:	300c      	adds	r0, #12
 8028596:	60a0      	str	r0, [r4, #8]
 8028598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802859c:	f7ff f9ea 	bl	8027974 <memset>
 80285a0:	4620      	mov	r0, r4
 80285a2:	bd70      	pop	{r4, r5, r6, pc}

080285a4 <__sfp_lock_acquire>:
 80285a4:	4801      	ldr	r0, [pc, #4]	; (80285ac <__sfp_lock_acquire+0x8>)
 80285a6:	f000 b8b3 	b.w	8028710 <__retarget_lock_acquire_recursive>
 80285aa:	bf00      	nop
 80285ac:	2400b4f8 	.word	0x2400b4f8

080285b0 <__sfp_lock_release>:
 80285b0:	4801      	ldr	r0, [pc, #4]	; (80285b8 <__sfp_lock_release+0x8>)
 80285b2:	f000 b8af 	b.w	8028714 <__retarget_lock_release_recursive>
 80285b6:	bf00      	nop
 80285b8:	2400b4f8 	.word	0x2400b4f8

080285bc <__sinit_lock_acquire>:
 80285bc:	4801      	ldr	r0, [pc, #4]	; (80285c4 <__sinit_lock_acquire+0x8>)
 80285be:	f000 b8a7 	b.w	8028710 <__retarget_lock_acquire_recursive>
 80285c2:	bf00      	nop
 80285c4:	2400b4f3 	.word	0x2400b4f3

080285c8 <__sinit_lock_release>:
 80285c8:	4801      	ldr	r0, [pc, #4]	; (80285d0 <__sinit_lock_release+0x8>)
 80285ca:	f000 b8a3 	b.w	8028714 <__retarget_lock_release_recursive>
 80285ce:	bf00      	nop
 80285d0:	2400b4f3 	.word	0x2400b4f3

080285d4 <__sinit>:
 80285d4:	b510      	push	{r4, lr}
 80285d6:	4604      	mov	r4, r0
 80285d8:	f7ff fff0 	bl	80285bc <__sinit_lock_acquire>
 80285dc:	69a3      	ldr	r3, [r4, #24]
 80285de:	b11b      	cbz	r3, 80285e8 <__sinit+0x14>
 80285e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80285e4:	f7ff bff0 	b.w	80285c8 <__sinit_lock_release>
 80285e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80285ec:	6523      	str	r3, [r4, #80]	; 0x50
 80285ee:	4b13      	ldr	r3, [pc, #76]	; (802863c <__sinit+0x68>)
 80285f0:	4a13      	ldr	r2, [pc, #76]	; (8028640 <__sinit+0x6c>)
 80285f2:	681b      	ldr	r3, [r3, #0]
 80285f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80285f6:	42a3      	cmp	r3, r4
 80285f8:	bf04      	itt	eq
 80285fa:	2301      	moveq	r3, #1
 80285fc:	61a3      	streq	r3, [r4, #24]
 80285fe:	4620      	mov	r0, r4
 8028600:	f000 f820 	bl	8028644 <__sfp>
 8028604:	6060      	str	r0, [r4, #4]
 8028606:	4620      	mov	r0, r4
 8028608:	f000 f81c 	bl	8028644 <__sfp>
 802860c:	60a0      	str	r0, [r4, #8]
 802860e:	4620      	mov	r0, r4
 8028610:	f000 f818 	bl	8028644 <__sfp>
 8028614:	2200      	movs	r2, #0
 8028616:	60e0      	str	r0, [r4, #12]
 8028618:	2104      	movs	r1, #4
 802861a:	6860      	ldr	r0, [r4, #4]
 802861c:	f7ff ff82 	bl	8028524 <std>
 8028620:	68a0      	ldr	r0, [r4, #8]
 8028622:	2201      	movs	r2, #1
 8028624:	2109      	movs	r1, #9
 8028626:	f7ff ff7d 	bl	8028524 <std>
 802862a:	68e0      	ldr	r0, [r4, #12]
 802862c:	2202      	movs	r2, #2
 802862e:	2112      	movs	r1, #18
 8028630:	f7ff ff78 	bl	8028524 <std>
 8028634:	2301      	movs	r3, #1
 8028636:	61a3      	str	r3, [r4, #24]
 8028638:	e7d2      	b.n	80285e0 <__sinit+0xc>
 802863a:	bf00      	nop
 802863c:	0802c634 	.word	0x0802c634
 8028640:	0802856d 	.word	0x0802856d

08028644 <__sfp>:
 8028644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028646:	4607      	mov	r7, r0
 8028648:	f7ff ffac 	bl	80285a4 <__sfp_lock_acquire>
 802864c:	4b1e      	ldr	r3, [pc, #120]	; (80286c8 <__sfp+0x84>)
 802864e:	681e      	ldr	r6, [r3, #0]
 8028650:	69b3      	ldr	r3, [r6, #24]
 8028652:	b913      	cbnz	r3, 802865a <__sfp+0x16>
 8028654:	4630      	mov	r0, r6
 8028656:	f7ff ffbd 	bl	80285d4 <__sinit>
 802865a:	3648      	adds	r6, #72	; 0x48
 802865c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028660:	3b01      	subs	r3, #1
 8028662:	d503      	bpl.n	802866c <__sfp+0x28>
 8028664:	6833      	ldr	r3, [r6, #0]
 8028666:	b30b      	cbz	r3, 80286ac <__sfp+0x68>
 8028668:	6836      	ldr	r6, [r6, #0]
 802866a:	e7f7      	b.n	802865c <__sfp+0x18>
 802866c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028670:	b9d5      	cbnz	r5, 80286a8 <__sfp+0x64>
 8028672:	4b16      	ldr	r3, [pc, #88]	; (80286cc <__sfp+0x88>)
 8028674:	60e3      	str	r3, [r4, #12]
 8028676:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802867a:	6665      	str	r5, [r4, #100]	; 0x64
 802867c:	f000 f847 	bl	802870e <__retarget_lock_init_recursive>
 8028680:	f7ff ff96 	bl	80285b0 <__sfp_lock_release>
 8028684:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8028688:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802868c:	6025      	str	r5, [r4, #0]
 802868e:	61a5      	str	r5, [r4, #24]
 8028690:	2208      	movs	r2, #8
 8028692:	4629      	mov	r1, r5
 8028694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8028698:	f7ff f96c 	bl	8027974 <memset>
 802869c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80286a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80286a4:	4620      	mov	r0, r4
 80286a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80286a8:	3468      	adds	r4, #104	; 0x68
 80286aa:	e7d9      	b.n	8028660 <__sfp+0x1c>
 80286ac:	2104      	movs	r1, #4
 80286ae:	4638      	mov	r0, r7
 80286b0:	f7ff ff62 	bl	8028578 <__sfmoreglue>
 80286b4:	4604      	mov	r4, r0
 80286b6:	6030      	str	r0, [r6, #0]
 80286b8:	2800      	cmp	r0, #0
 80286ba:	d1d5      	bne.n	8028668 <__sfp+0x24>
 80286bc:	f7ff ff78 	bl	80285b0 <__sfp_lock_release>
 80286c0:	230c      	movs	r3, #12
 80286c2:	603b      	str	r3, [r7, #0]
 80286c4:	e7ee      	b.n	80286a4 <__sfp+0x60>
 80286c6:	bf00      	nop
 80286c8:	0802c634 	.word	0x0802c634
 80286cc:	ffff0001 	.word	0xffff0001

080286d0 <_fwalk_reent>:
 80286d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80286d4:	4606      	mov	r6, r0
 80286d6:	4688      	mov	r8, r1
 80286d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80286dc:	2700      	movs	r7, #0
 80286de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80286e2:	f1b9 0901 	subs.w	r9, r9, #1
 80286e6:	d505      	bpl.n	80286f4 <_fwalk_reent+0x24>
 80286e8:	6824      	ldr	r4, [r4, #0]
 80286ea:	2c00      	cmp	r4, #0
 80286ec:	d1f7      	bne.n	80286de <_fwalk_reent+0xe>
 80286ee:	4638      	mov	r0, r7
 80286f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80286f4:	89ab      	ldrh	r3, [r5, #12]
 80286f6:	2b01      	cmp	r3, #1
 80286f8:	d907      	bls.n	802870a <_fwalk_reent+0x3a>
 80286fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80286fe:	3301      	adds	r3, #1
 8028700:	d003      	beq.n	802870a <_fwalk_reent+0x3a>
 8028702:	4629      	mov	r1, r5
 8028704:	4630      	mov	r0, r6
 8028706:	47c0      	blx	r8
 8028708:	4307      	orrs	r7, r0
 802870a:	3568      	adds	r5, #104	; 0x68
 802870c:	e7e9      	b.n	80286e2 <_fwalk_reent+0x12>

0802870e <__retarget_lock_init_recursive>:
 802870e:	4770      	bx	lr

08028710 <__retarget_lock_acquire_recursive>:
 8028710:	4770      	bx	lr

08028712 <__retarget_lock_release>:
 8028712:	4770      	bx	lr

08028714 <__retarget_lock_release_recursive>:
 8028714:	4770      	bx	lr

08028716 <__swhatbuf_r>:
 8028716:	b570      	push	{r4, r5, r6, lr}
 8028718:	460e      	mov	r6, r1
 802871a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802871e:	2900      	cmp	r1, #0
 8028720:	b096      	sub	sp, #88	; 0x58
 8028722:	4614      	mov	r4, r2
 8028724:	461d      	mov	r5, r3
 8028726:	da07      	bge.n	8028738 <__swhatbuf_r+0x22>
 8028728:	2300      	movs	r3, #0
 802872a:	602b      	str	r3, [r5, #0]
 802872c:	89b3      	ldrh	r3, [r6, #12]
 802872e:	061a      	lsls	r2, r3, #24
 8028730:	d410      	bmi.n	8028754 <__swhatbuf_r+0x3e>
 8028732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028736:	e00e      	b.n	8028756 <__swhatbuf_r+0x40>
 8028738:	466a      	mov	r2, sp
 802873a:	f000 f8c3 	bl	80288c4 <_fstat_r>
 802873e:	2800      	cmp	r0, #0
 8028740:	dbf2      	blt.n	8028728 <__swhatbuf_r+0x12>
 8028742:	9a01      	ldr	r2, [sp, #4]
 8028744:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028748:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802874c:	425a      	negs	r2, r3
 802874e:	415a      	adcs	r2, r3
 8028750:	602a      	str	r2, [r5, #0]
 8028752:	e7ee      	b.n	8028732 <__swhatbuf_r+0x1c>
 8028754:	2340      	movs	r3, #64	; 0x40
 8028756:	2000      	movs	r0, #0
 8028758:	6023      	str	r3, [r4, #0]
 802875a:	b016      	add	sp, #88	; 0x58
 802875c:	bd70      	pop	{r4, r5, r6, pc}
	...

08028760 <__smakebuf_r>:
 8028760:	898b      	ldrh	r3, [r1, #12]
 8028762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028764:	079d      	lsls	r5, r3, #30
 8028766:	4606      	mov	r6, r0
 8028768:	460c      	mov	r4, r1
 802876a:	d507      	bpl.n	802877c <__smakebuf_r+0x1c>
 802876c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028770:	6023      	str	r3, [r4, #0]
 8028772:	6123      	str	r3, [r4, #16]
 8028774:	2301      	movs	r3, #1
 8028776:	6163      	str	r3, [r4, #20]
 8028778:	b002      	add	sp, #8
 802877a:	bd70      	pop	{r4, r5, r6, pc}
 802877c:	ab01      	add	r3, sp, #4
 802877e:	466a      	mov	r2, sp
 8028780:	f7ff ffc9 	bl	8028716 <__swhatbuf_r>
 8028784:	9900      	ldr	r1, [sp, #0]
 8028786:	4605      	mov	r5, r0
 8028788:	4630      	mov	r0, r6
 802878a:	f7ff f94b 	bl	8027a24 <_malloc_r>
 802878e:	b948      	cbnz	r0, 80287a4 <__smakebuf_r+0x44>
 8028790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028794:	059a      	lsls	r2, r3, #22
 8028796:	d4ef      	bmi.n	8028778 <__smakebuf_r+0x18>
 8028798:	f023 0303 	bic.w	r3, r3, #3
 802879c:	f043 0302 	orr.w	r3, r3, #2
 80287a0:	81a3      	strh	r3, [r4, #12]
 80287a2:	e7e3      	b.n	802876c <__smakebuf_r+0xc>
 80287a4:	4b0d      	ldr	r3, [pc, #52]	; (80287dc <__smakebuf_r+0x7c>)
 80287a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80287a8:	89a3      	ldrh	r3, [r4, #12]
 80287aa:	6020      	str	r0, [r4, #0]
 80287ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80287b0:	81a3      	strh	r3, [r4, #12]
 80287b2:	9b00      	ldr	r3, [sp, #0]
 80287b4:	6163      	str	r3, [r4, #20]
 80287b6:	9b01      	ldr	r3, [sp, #4]
 80287b8:	6120      	str	r0, [r4, #16]
 80287ba:	b15b      	cbz	r3, 80287d4 <__smakebuf_r+0x74>
 80287bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80287c0:	4630      	mov	r0, r6
 80287c2:	f000 f891 	bl	80288e8 <_isatty_r>
 80287c6:	b128      	cbz	r0, 80287d4 <__smakebuf_r+0x74>
 80287c8:	89a3      	ldrh	r3, [r4, #12]
 80287ca:	f023 0303 	bic.w	r3, r3, #3
 80287ce:	f043 0301 	orr.w	r3, r3, #1
 80287d2:	81a3      	strh	r3, [r4, #12]
 80287d4:	89a0      	ldrh	r0, [r4, #12]
 80287d6:	4305      	orrs	r5, r0
 80287d8:	81a5      	strh	r5, [r4, #12]
 80287da:	e7cd      	b.n	8028778 <__smakebuf_r+0x18>
 80287dc:	0802856d 	.word	0x0802856d

080287e0 <__malloc_lock>:
 80287e0:	4801      	ldr	r0, [pc, #4]	; (80287e8 <__malloc_lock+0x8>)
 80287e2:	f7ff bf95 	b.w	8028710 <__retarget_lock_acquire_recursive>
 80287e6:	bf00      	nop
 80287e8:	2400b4f4 	.word	0x2400b4f4

080287ec <__malloc_unlock>:
 80287ec:	4801      	ldr	r0, [pc, #4]	; (80287f4 <__malloc_unlock+0x8>)
 80287ee:	f7ff bf91 	b.w	8028714 <__retarget_lock_release_recursive>
 80287f2:	bf00      	nop
 80287f4:	2400b4f4 	.word	0x2400b4f4

080287f8 <__sread>:
 80287f8:	b510      	push	{r4, lr}
 80287fa:	460c      	mov	r4, r1
 80287fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028800:	f000 f894 	bl	802892c <_read_r>
 8028804:	2800      	cmp	r0, #0
 8028806:	bfab      	itete	ge
 8028808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802880a:	89a3      	ldrhlt	r3, [r4, #12]
 802880c:	181b      	addge	r3, r3, r0
 802880e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8028812:	bfac      	ite	ge
 8028814:	6563      	strge	r3, [r4, #84]	; 0x54
 8028816:	81a3      	strhlt	r3, [r4, #12]
 8028818:	bd10      	pop	{r4, pc}

0802881a <__swrite>:
 802881a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802881e:	461f      	mov	r7, r3
 8028820:	898b      	ldrh	r3, [r1, #12]
 8028822:	05db      	lsls	r3, r3, #23
 8028824:	4605      	mov	r5, r0
 8028826:	460c      	mov	r4, r1
 8028828:	4616      	mov	r6, r2
 802882a:	d505      	bpl.n	8028838 <__swrite+0x1e>
 802882c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028830:	2302      	movs	r3, #2
 8028832:	2200      	movs	r2, #0
 8028834:	f000 f868 	bl	8028908 <_lseek_r>
 8028838:	89a3      	ldrh	r3, [r4, #12]
 802883a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802883e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028842:	81a3      	strh	r3, [r4, #12]
 8028844:	4632      	mov	r2, r6
 8028846:	463b      	mov	r3, r7
 8028848:	4628      	mov	r0, r5
 802884a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802884e:	f000 b817 	b.w	8028880 <_write_r>

08028852 <__sseek>:
 8028852:	b510      	push	{r4, lr}
 8028854:	460c      	mov	r4, r1
 8028856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802885a:	f000 f855 	bl	8028908 <_lseek_r>
 802885e:	1c43      	adds	r3, r0, #1
 8028860:	89a3      	ldrh	r3, [r4, #12]
 8028862:	bf15      	itete	ne
 8028864:	6560      	strne	r0, [r4, #84]	; 0x54
 8028866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802886a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802886e:	81a3      	strheq	r3, [r4, #12]
 8028870:	bf18      	it	ne
 8028872:	81a3      	strhne	r3, [r4, #12]
 8028874:	bd10      	pop	{r4, pc}

08028876 <__sclose>:
 8028876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802887a:	f000 b813 	b.w	80288a4 <_close_r>
	...

08028880 <_write_r>:
 8028880:	b538      	push	{r3, r4, r5, lr}
 8028882:	4d07      	ldr	r5, [pc, #28]	; (80288a0 <_write_r+0x20>)
 8028884:	4604      	mov	r4, r0
 8028886:	4608      	mov	r0, r1
 8028888:	4611      	mov	r1, r2
 802888a:	2200      	movs	r2, #0
 802888c:	602a      	str	r2, [r5, #0]
 802888e:	461a      	mov	r2, r3
 8028890:	f7d9 f8e5 	bl	8001a5e <_write>
 8028894:	1c43      	adds	r3, r0, #1
 8028896:	d102      	bne.n	802889e <_write_r+0x1e>
 8028898:	682b      	ldr	r3, [r5, #0]
 802889a:	b103      	cbz	r3, 802889e <_write_r+0x1e>
 802889c:	6023      	str	r3, [r4, #0]
 802889e:	bd38      	pop	{r3, r4, r5, pc}
 80288a0:	2400b4fc 	.word	0x2400b4fc

080288a4 <_close_r>:
 80288a4:	b538      	push	{r3, r4, r5, lr}
 80288a6:	4d06      	ldr	r5, [pc, #24]	; (80288c0 <_close_r+0x1c>)
 80288a8:	2300      	movs	r3, #0
 80288aa:	4604      	mov	r4, r0
 80288ac:	4608      	mov	r0, r1
 80288ae:	602b      	str	r3, [r5, #0]
 80288b0:	f7d9 f8f1 	bl	8001a96 <_close>
 80288b4:	1c43      	adds	r3, r0, #1
 80288b6:	d102      	bne.n	80288be <_close_r+0x1a>
 80288b8:	682b      	ldr	r3, [r5, #0]
 80288ba:	b103      	cbz	r3, 80288be <_close_r+0x1a>
 80288bc:	6023      	str	r3, [r4, #0]
 80288be:	bd38      	pop	{r3, r4, r5, pc}
 80288c0:	2400b4fc 	.word	0x2400b4fc

080288c4 <_fstat_r>:
 80288c4:	b538      	push	{r3, r4, r5, lr}
 80288c6:	4d07      	ldr	r5, [pc, #28]	; (80288e4 <_fstat_r+0x20>)
 80288c8:	2300      	movs	r3, #0
 80288ca:	4604      	mov	r4, r0
 80288cc:	4608      	mov	r0, r1
 80288ce:	4611      	mov	r1, r2
 80288d0:	602b      	str	r3, [r5, #0]
 80288d2:	f7d9 f8ec 	bl	8001aae <_fstat>
 80288d6:	1c43      	adds	r3, r0, #1
 80288d8:	d102      	bne.n	80288e0 <_fstat_r+0x1c>
 80288da:	682b      	ldr	r3, [r5, #0]
 80288dc:	b103      	cbz	r3, 80288e0 <_fstat_r+0x1c>
 80288de:	6023      	str	r3, [r4, #0]
 80288e0:	bd38      	pop	{r3, r4, r5, pc}
 80288e2:	bf00      	nop
 80288e4:	2400b4fc 	.word	0x2400b4fc

080288e8 <_isatty_r>:
 80288e8:	b538      	push	{r3, r4, r5, lr}
 80288ea:	4d06      	ldr	r5, [pc, #24]	; (8028904 <_isatty_r+0x1c>)
 80288ec:	2300      	movs	r3, #0
 80288ee:	4604      	mov	r4, r0
 80288f0:	4608      	mov	r0, r1
 80288f2:	602b      	str	r3, [r5, #0]
 80288f4:	f7d9 f8eb 	bl	8001ace <_isatty>
 80288f8:	1c43      	adds	r3, r0, #1
 80288fa:	d102      	bne.n	8028902 <_isatty_r+0x1a>
 80288fc:	682b      	ldr	r3, [r5, #0]
 80288fe:	b103      	cbz	r3, 8028902 <_isatty_r+0x1a>
 8028900:	6023      	str	r3, [r4, #0]
 8028902:	bd38      	pop	{r3, r4, r5, pc}
 8028904:	2400b4fc 	.word	0x2400b4fc

08028908 <_lseek_r>:
 8028908:	b538      	push	{r3, r4, r5, lr}
 802890a:	4d07      	ldr	r5, [pc, #28]	; (8028928 <_lseek_r+0x20>)
 802890c:	4604      	mov	r4, r0
 802890e:	4608      	mov	r0, r1
 8028910:	4611      	mov	r1, r2
 8028912:	2200      	movs	r2, #0
 8028914:	602a      	str	r2, [r5, #0]
 8028916:	461a      	mov	r2, r3
 8028918:	f7d9 f8e4 	bl	8001ae4 <_lseek>
 802891c:	1c43      	adds	r3, r0, #1
 802891e:	d102      	bne.n	8028926 <_lseek_r+0x1e>
 8028920:	682b      	ldr	r3, [r5, #0]
 8028922:	b103      	cbz	r3, 8028926 <_lseek_r+0x1e>
 8028924:	6023      	str	r3, [r4, #0]
 8028926:	bd38      	pop	{r3, r4, r5, pc}
 8028928:	2400b4fc 	.word	0x2400b4fc

0802892c <_read_r>:
 802892c:	b538      	push	{r3, r4, r5, lr}
 802892e:	4d07      	ldr	r5, [pc, #28]	; (802894c <_read_r+0x20>)
 8028930:	4604      	mov	r4, r0
 8028932:	4608      	mov	r0, r1
 8028934:	4611      	mov	r1, r2
 8028936:	2200      	movs	r2, #0
 8028938:	602a      	str	r2, [r5, #0]
 802893a:	461a      	mov	r2, r3
 802893c:	f7d9 f872 	bl	8001a24 <_read>
 8028940:	1c43      	adds	r3, r0, #1
 8028942:	d102      	bne.n	802894a <_read_r+0x1e>
 8028944:	682b      	ldr	r3, [r5, #0]
 8028946:	b103      	cbz	r3, 802894a <_read_r+0x1e>
 8028948:	6023      	str	r3, [r4, #0]
 802894a:	bd38      	pop	{r3, r4, r5, pc}
 802894c:	2400b4fc 	.word	0x2400b4fc

08028950 <_init>:
 8028950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028952:	bf00      	nop
 8028954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028956:	bc08      	pop	{r3}
 8028958:	469e      	mov	lr, r3
 802895a:	4770      	bx	lr

0802895c <_fini>:
 802895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802895e:	bf00      	nop
 8028960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028962:	bc08      	pop	{r3}
 8028964:	469e      	mov	lr, r3
 8028966:	4770      	bx	lr
