
stm32h745i_disco_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026b04  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d30  08026da4  08026da4  00036da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000054  0802aad4  0802aad4  0003aad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802ab28  0802ab28  00050f58  2**0
                  CONTENTS
  5 .ARM          00000000  0802ab28  0802ab28  00050f58  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802ab28  0802ab28  00050f58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0802ab28  0802ab28  0003ab28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802ab3c  0802ab3c  0003ab3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  0802ab44  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b344  2400012c  0802ac70  0004012c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b470  0802ac70  0004b470  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00050f58  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000a44  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000514  90000a44  90000a44  00050a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00000000  90000f58  90000f58  00050f86  2**0
                  CONTENTS
 16 .debug_info   000b78f9  00000000  00000000  00050f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00012f51  00000000  00000000  0010887f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003e60  00000000  00000000  0011b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000039b8  00000000  00000000  0011f630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000128c2  00000000  00000000  00122fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00049b84  00000000  00000000  001358aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001b3ee9  00000000  00000000  0017f42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  00333317  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00010fc4  00000000  00000000  003333ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08026d8c 	.word	0x08026d8c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	08026d8c 	.word	0x08026d8c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000386:	f000 fbd5 	bl	8000b34 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b64      	ldr	r3, [pc, #400]	; (800051c <main+0x19c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b5e      	ldr	r3, [pc, #376]	; (800051c <main+0x19c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b59      	ldr	r3, [pc, #356]	; (800051c <main+0x19c>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a58      	ldr	r2, [pc, #352]	; (800051c <main+0x19c>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b52      	ldr	r3, [pc, #328]	; (800051c <main+0x19c>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b4f      	ldr	r3, [pc, #316]	; (800051c <main+0x19c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b4c      	ldr	r3, [pc, #304]	; (800051c <main+0x19c>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	4941      	ldr	r1, [pc, #260]	; (800051c <main+0x19c>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	60ba      	str	r2, [r7, #8]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x86>
    } while(sets-- != 0U);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60fa      	str	r2, [r7, #12]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b39      	ldr	r3, [pc, #228]	; (800051c <main+0x19c>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a38      	ldr	r2, [pc, #224]	; (800051c <main+0x19c>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000454:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000456:	bf00      	nop
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <main+0x1a0>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d004      	beq.n	800046e <main+0xee>
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	1e5a      	subs	r2, r3, #1
 8000468:	617a      	str	r2, [r7, #20]
 800046a:	2b00      	cmp	r3, #0
 800046c:	dcf4      	bgt.n	8000458 <main+0xd8>
  if ( timeout < 0 )
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	2b00      	cmp	r3, #0
 8000472:	da01      	bge.n	8000478 <main+0xf8>
  {
  Error_Handler();
 8000474:	f000 fba8 	bl	8000bc8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f00c fde0 	bl	800d03c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f85e 	bl	800053c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000480:	4b27      	ldr	r3, [pc, #156]	; (8000520 <main+0x1a0>)
 8000482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000486:	4a26      	ldr	r2, [pc, #152]	; (8000520 <main+0x1a0>)
 8000488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <main+0x1a0>)
 8000492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800049e:	2000      	movs	r0, #0
 80004a0:	f00d fd0e 	bl	800dec0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004a4:	2100      	movs	r1, #0
 80004a6:	2000      	movs	r0, #0
 80004a8:	f00d fd24 	bl	800def4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004b2:	bf00      	nop
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <main+0x1a0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d104      	bne.n	80004ca <main+0x14a>
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	617a      	str	r2, [r7, #20]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dcf4      	bgt.n	80004b4 <main+0x134>
if ( timeout < 0 )
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	da01      	bge.n	80004d4 <main+0x154>
{
Error_Handler();
 80004d0:	f000 fb7a 	bl	8000bc8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa08 	bl	80008e8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f982 	bl	80007e0 <MX_QUADSPI_Init>
  MX_FMC_Init();
 80004dc:	f000 f9ae 	bl	800083c <MX_FMC_Init>
  MX_LTDC_Init();
 80004e0:	f000 f8fa 	bl	80006d8 <MX_LTDC_Init>
  MX_CRC_Init();
 80004e4:	f000 f8b8 	bl	8000658 <MX_CRC_Init>
  MX_DMA2D_Init();
 80004e8:	f000 f8d8 	bl	800069c <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 80004ec:	f001 f921 	bl	8001732 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f006 fda6 	bl	8007040 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <main+0x1a4>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <main+0x1a8>)
 80004fa:	f006 fdeb 	bl	80070d4 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <main+0x1ac>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000504:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <main+0x1b0>)
 8000506:	2100      	movs	r1, #0
 8000508:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0x1b4>)
 800050a:	f006 fde3 	bl	80070d4 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <main+0x1b8>)
 8000512:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f006 fdb8 	bl	8007088 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x198>
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	58024400 	.word	0x58024400
 8000524:	080277f0 	.word	0x080277f0
 8000528:	08000afd 	.word	0x08000afd
 800052c:	2400b188 	.word	0x2400b188
 8000530:	08027814 	.word	0x08027814
 8000534:	0800173f 	.word	0x0800173f
 8000538:	2400b28c 	.word	0x2400b28c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b09c      	sub	sp, #112	; 0x70
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000546:	224c      	movs	r2, #76	; 0x4c
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f025 fc30 	bl	8025db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2220      	movs	r2, #32
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f025 fc2a 	bl	8025db0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800055c:	2004      	movs	r0, #4
 800055e:	f00f f833 	bl	800f5c8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	4b39      	ldr	r3, [pc, #228]	; (800064c <SystemClock_Config+0x110>)
 8000568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056a:	4a38      	ldr	r2, [pc, #224]	; (800064c <SystemClock_Config+0x110>)
 800056c:	f023 0301 	bic.w	r3, r3, #1
 8000570:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <SystemClock_Config+0x110>)
 8000574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b34      	ldr	r3, [pc, #208]	; (8000650 <SystemClock_Config+0x114>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a33      	ldr	r2, [pc, #204]	; (8000650 <SystemClock_Config+0x114>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <SystemClock_Config+0x114>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000594:	bf00      	nop
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <SystemClock_Config+0x114>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800059e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005a2:	d1f8      	bne.n	8000596 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <SystemClock_Config+0x118>)
 80005a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a8:	f023 0303 	bic.w	r3, r3, #3
 80005ac:	4a29      	ldr	r2, [pc, #164]	; (8000654 <SystemClock_Config+0x118>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005be:	2301      	movs	r3, #1
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2340      	movs	r3, #64	; 0x40
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ce:	2305      	movs	r3, #5
 80005d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80005d2:	23a0      	movs	r3, #160	; 0xa0
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005da:	2304      	movs	r3, #4
 80005dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005e2:	2308      	movs	r3, #8
 80005e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	4618      	mov	r0, r3
 80005f4:	f00f ff24 	bl	8010440 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fe:	f000 fae3 	bl	8000bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	233f      	movs	r3, #63	; 0x3f
 8000604:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2303      	movs	r3, #3
 8000608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800060e:	2308      	movs	r3, #8
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000612:	2340      	movs	r3, #64	; 0x40
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2102      	movs	r1, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f010 fb35 	bl	8010c98 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000634:	f000 fac8 	bl	8000bc8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000638:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800063c:	2100      	movs	r1, #0
 800063e:	2000      	movs	r0, #0
 8000640:	f010 fce0 	bl	8011004 <HAL_RCC_MCOConfig>
}
 8000644:	bf00      	nop
 8000646:	3770      	adds	r7, #112	; 0x70
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	58000400 	.word	0x58000400
 8000650:	58024800 	.word	0x58024800
 8000654:	58024400 	.word	0x58024400

08000658 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_CRC_Init+0x3c>)
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <MX_CRC_Init+0x40>)
 8000660:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_CRC_Init+0x3c>)
 8000664:	2200      	movs	r2, #0
 8000666:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_CRC_Init+0x3c>)
 800066a:	2200      	movs	r2, #0
 800066c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_CRC_Init+0x3c>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_CRC_Init+0x3c>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_CRC_Init+0x3c>)
 800067c:	2201      	movs	r2, #1
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_CRC_Init+0x3c>)
 8000682:	f00c fed1 	bl	800d428 <HAL_CRC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800068c:	f000 fa9c 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2400b18c 	.word	0x2400b18c
 8000698:	58024c00 	.word	0x58024c00

0800069c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_DMA2D_Init+0x38>)
 80006a4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006ac:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006bc:	f00c ff9e 	bl	800d5fc <HAL_DMA2D_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80006c6:	f000 fa7f 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2400b290 	.word	0x2400b290
 80006d4:	52001000 	.word	0x52001000

080006d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 80006de:	f000 fa79 	bl	8000bd4 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2234      	movs	r2, #52	; 0x34
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f025 fb61 	bl	8025db0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80006ee:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006f0:	4a3a      	ldr	r2, [pc, #232]	; (80007dc <MX_LTDC_Init+0x104>)
 80006f2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80006f4:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80006fa:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000700:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_LTDC_Init+0x100>)
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000714:	2209      	movs	r2, #9
 8000716:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_LTDC_Init+0x100>)
 800071a:	2235      	movs	r2, #53	; 0x35
 800071c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000720:	220b      	movs	r2, #11
 8000722:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000726:	f240 2215 	movw	r2, #533	; 0x215
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_LTDC_Init+0x100>)
 800072e:	f240 121b 	movw	r2, #283	; 0x11b
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000736:	f240 2235 	movw	r2, #565	; 0x235
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_LTDC_Init+0x100>)
 800073e:	f240 121d 	movw	r2, #285	; 0x11d
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_LTDC_Init+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800075c:	481e      	ldr	r0, [pc, #120]	; (80007d8 <MX_LTDC_Init+0x100>)
 800075e:	f00e fa37 	bl	800ebd0 <HAL_LTDC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000768:	f000 fa2e 	bl	8000bc8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000770:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000774:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800077a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800077e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000784:	23ff      	movs	r3, #255	; 0xff
 8000786:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800078c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000790:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000792:	2305      	movs	r3, #5
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000796:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800079c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80007a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_LTDC_Init+0x100>)
 80007c2:	f00e fb8d 	bl	800eee0 <HAL_LTDC_ConfigLayer>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80007cc:	f000 f9fc 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3738      	adds	r7, #56	; 0x38
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2400b1b0 	.word	0x2400b1b0
 80007dc:	50001000 	.word	0x50001000

080007e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_QUADSPI_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007fe:	221a      	movs	r2, #26
 8000800:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_QUADSPI_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000812:	2240      	movs	r2, #64	; 0x40
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000818:	f00e ff30 	bl	800f67c <HAL_QSPI_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f9d1 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_QUADSPI_Init+0x58>)
 8000828:	f000 fa48 	bl	8000cbc <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2400b2f8 	.word	0x2400b2f8
 8000834:	52005000 	.word	0x52005000
 8000838:	08000bc9 	.word	0x08000bc9

0800083c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_FMC_Init+0xa0>)
 8000856:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <MX_FMC_Init+0xa4>)
 8000858:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_FMC_Init+0xa0>)
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_FMC_Init+0xa0>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_FMC_Init+0xa0>)
 8000868:	2204      	movs	r2, #4
 800086a:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_FMC_Init+0xa0>)
 800086e:	2210      	movs	r2, #16
 8000870:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_FMC_Init+0xa0>)
 8000874:	2240      	movs	r2, #64	; 0x40
 8000876:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_FMC_Init+0xa0>)
 800087a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800087e:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_FMC_Init+0xa0>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_FMC_Init+0xa0>)
 8000888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088c:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_FMC_Init+0xa0>)
 8000890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_FMC_Init+0xa0>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80008a0:	2306      	movs	r3, #6
 80008a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80008a8:	2306      	movs	r3, #6
 80008aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_FMC_Init+0xa0>)
 80008be:	f011 fec7 	bl	8012650 <HAL_SDRAM_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80008c8:	f000 f97e 	bl	8000bc8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_FMC_Init+0xa8>)
 80008ce:	f000 fa16 	bl	8000cfe <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2400b258 	.word	0x2400b258
 80008e0:	52004140 	.word	0x52004140
 80008e4:	08000bc9 	.word	0x08000bc9

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b090      	sub	sp, #64	; 0x40
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008fe:	4b79      	ldr	r3, [pc, #484]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a77      	ldr	r2, [pc, #476]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b75      	ldr	r3, [pc, #468]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
 800091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091c:	4b71      	ldr	r3, [pc, #452]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	4a70      	ldr	r2, [pc, #448]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092c:	4b6d      	ldr	r3, [pc, #436]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800093a:	4b6a      	ldr	r3, [pc, #424]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	4a68      	ldr	r2, [pc, #416]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094a:	4b66      	ldr	r3, [pc, #408]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000958:	4b62      	ldr	r3, [pc, #392]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	4a61      	ldr	r2, [pc, #388]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000968:	4b5e      	ldr	r3, [pc, #376]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000976:	4b5b      	ldr	r3, [pc, #364]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a59      	ldr	r2, [pc, #356]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 800097e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b57      	ldr	r3, [pc, #348]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000994:	4b53      	ldr	r3, [pc, #332]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	4a52      	ldr	r2, [pc, #328]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a4:	4b4f      	ldr	r3, [pc, #316]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b4c      	ldr	r3, [pc, #304]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a4a      	ldr	r2, [pc, #296]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b48      	ldr	r3, [pc, #288]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b44      	ldr	r3, [pc, #272]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	4a43      	ldr	r2, [pc, #268]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e0:	4b40      	ldr	r3, [pc, #256]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	4b3d      	ldr	r3, [pc, #244]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a3b      	ldr	r2, [pc, #236]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 80009f6:	f043 0320 	orr.w	r3, r3, #32
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0c:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a34      	ldr	r2, [pc, #208]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_2_GPIO_Port, GREEN_LED_2_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	482e      	ldr	r0, [pc, #184]	; (8000ae8 <MX_GPIO_Init+0x200>)
 8000a30:	f00d fa12 	bl	800de58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3a:	482c      	ldr	r0, [pc, #176]	; (8000aec <MX_GPIO_Init+0x204>)
 8000a3c:	f00d fa0c 	bl	800de58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_1_GPIO_Port, GREEN_LED_1_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2104      	movs	r1, #4
 8000a44:	482a      	ldr	r0, [pc, #168]	; (8000af0 <MX_GPIO_Init+0x208>)
 8000a46:	f00d fa07 	bl	800de58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_2_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_2_Pin;
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a56:	2301      	movs	r3, #1
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GREEN_LED_2_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4821      	ldr	r0, [pc, #132]	; (8000ae8 <MX_GPIO_Init+0x200>)
 8000a62:	f00c ff3f 	bl	800d8e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a70:	2302      	movs	r3, #2
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481e      	ldr	r0, [pc, #120]	; (8000af4 <MX_GPIO_Init+0x20c>)
 8000a7c:	f00c ff32 	bl	800d8e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4816      	ldr	r0, [pc, #88]	; (8000af8 <MX_GPIO_Init+0x210>)
 8000a9e:	f00c ff21 	bl	800d8e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_GPIO_Init+0x204>)
 8000abc:	f00c ff12 	bl	800d8e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_1_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_1_Pin;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000acc:	2301      	movs	r3, #1
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GREEN_LED_1_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_GPIO_Init+0x208>)
 8000ad8:	f00c ff04 	bl	800d8e4 <HAL_GPIO_Init>

}
 8000adc:	bf00      	nop
 8000ade:	3740      	adds	r7, #64	; 0x40
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	58020c00 	.word	0x58020c00
 8000aec:	58022000 	.word	0x58022000
 8000af0:	58022400 	.word	0x58022400
 8000af4:	58020800 	.word	0x58020800
 8000af8:	58020000 	.word	0x58020000

08000afc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <StartDefaultTask+0x2c>)
 8000b0a:	f00d f9be 	bl	800de8a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GREEN_LED_1_GPIO_Port, GREEN_LED_1_Pin);
 8000b0e:	2104      	movs	r1, #4
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <StartDefaultTask+0x30>)
 8000b12:	f00d f9ba 	bl	800de8a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GREEN_LED_2_GPIO_Port, GREEN_LED_2_Pin);
 8000b16:	2108      	movs	r1, #8
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <StartDefaultTask+0x34>)
 8000b1a:	f00d f9b6 	bl	800de8a <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000b1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b22:	f006 fb69 	bl	80071f8 <osDelay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000b26:	e7ed      	b.n	8000b04 <StartDefaultTask+0x8>
 8000b28:	58022000 	.word	0x58022000
 8000b2c:	58022400 	.word	0x58022400
 8000b30:	58020c00 	.word	0x58020c00

08000b34 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b46:	f00c fbf3 	bl	800d330 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000b52:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000b56:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000b58:	2313      	movs	r3, #19
 8000b5a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b64:	2303      	movs	r3, #3
 8000b66:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b74:	2301      	movs	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f00c fc10 	bl	800d3a0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000b84:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000b88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000b8a:	231a      	movs	r3, #26
 8000b8c:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4618      	mov	r0, r3
 8000b92:	f00c fc05 	bl	800d3a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b96:	2004      	movs	r0, #4
 8000b98:	f00c fbe2 	bl	800d360 <HAL_MPU_Enable>

}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d101      	bne.n	8000bba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bb6:	f00c fa7d 	bl	800d0b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40001000 	.word	0x40001000

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000bda:	4b36      	ldr	r3, [pc, #216]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000bdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000be0:	4a34      	ldr	r2, [pc, #208]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000bea:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000bec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	4a2d      	ldr	r2, [pc, #180]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c08:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a25      	ldr	r2, [pc, #148]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <initLtdcClocks+0xe0>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <initLtdcClocks+0xe4>)
 8000c9e:	f00c fe21 	bl	800d8e4 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <initLtdcClocks+0xe4>)
 8000ca8:	f00d f8d6 	bl	800de58 <HAL_GPIO_WritePin>
}
 8000cac:	bf00      	nop
 8000cae:	3730      	adds	r7, #48	; 0x30
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	58020c00 	.word	0x58020c00

08000cbc <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f00b f96a 	bl	800bfb0 <BSP_QSPI_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f00b fa3c 	bl	800c164 <BSP_QSPI_EnableMemoryMappedMode>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4798      	blx	r3
   }
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f00b fd9a 	bl	800c840 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f00b fd3b 	bl	800c788 <BSP_SDRAM_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <initBspSdRam+0x1e>
   {
      error_handler();
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4798      	blx	r3
   }
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x38>)
 8000d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_MspInit+0x38>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_MspInit+0x38>)
 8000d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f06f 0001 	mvn.w	r0, #1
 8000d50:	f00c fab8 	bl	800d2c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	58024400 	.word	0x58024400

08000d60 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <HAL_CRC_MspInit+0x3c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d10e      	bne.n	8000d90 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_CRC_MspInit+0x40>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <HAL_CRC_MspInit+0x40>)
 8000d7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <HAL_CRC_MspInit+0x40>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	58024c00 	.word	0x58024c00
 8000da0:	58024400 	.word	0x58024400

08000da4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_DMA2D_MspInit+0x48>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d116      	bne.n	8000de4 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_DMA2D_MspInit+0x4c>)
 8000db8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <HAL_DMA2D_MspInit+0x4c>)
 8000dbe:	f043 0310 	orr.w	r3, r3, #16
 8000dc2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_DMA2D_MspInit+0x4c>)
 8000dc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2105      	movs	r1, #5
 8000dd8:	205a      	movs	r0, #90	; 0x5a
 8000dda:	f00c fa73 	bl	800d2c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000dde:	205a      	movs	r0, #90	; 0x5a
 8000de0:	f00c fa8a 	bl	800d2f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	52001000 	.word	0x52001000
 8000df0:	58024400 	.word	0x58024400

08000df4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0bc      	sub	sp, #240	; 0xf0
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	22bc      	movs	r2, #188	; 0xbc
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f024 ffcb 	bl	8025db0 <memset>
  if(hltdc->Instance==LTDC)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a68      	ldr	r2, [pc, #416]	; (8000fc0 <HAL_LTDC_MspInit+0x1cc>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	f040 80c8 	bne.w	8000fb6 <HAL_LTDC_MspInit+0x1c2>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e2a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000e30:	23a0      	movs	r3, #160	; 0xa0
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000e3c:	2353      	movs	r3, #83	; 0x53
 8000e3e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000e40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e44:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	4618      	mov	r0, r3
 8000e54:	f010 fb58 	bl	8011508 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000e5e:	f7ff feb3 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e62:	4b58      	ldr	r3, [pc, #352]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000e64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000e68:	4a56      	ldr	r2, [pc, #344]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000e72:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000e74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e80:	4b50      	ldr	r3, [pc, #320]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	4a4f      	ldr	r2, [pc, #316]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000e88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e90:	4b4c      	ldr	r3, [pc, #304]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e9e:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	4a47      	ldr	r2, [pc, #284]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eae:	4b45      	ldr	r3, [pc, #276]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ebc:	4b41      	ldr	r3, [pc, #260]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	4a40      	ldr	r2, [pc, #256]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000ec4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ecc:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	4a38      	ldr	r2, [pc, #224]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eea:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_LTDC_MspInit+0x1d0>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000ef8:	23fc      	movs	r3, #252	; 0xfc
 8000efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f10:	230e      	movs	r3, #14
 8000f12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f16:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	482a      	ldr	r0, [pc, #168]	; (8000fc8 <HAL_LTDC_MspInit+0x1d4>)
 8000f1e:	f00c fce1 	bl	800d8e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000f22:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f3c:	230e      	movs	r3, #14
 8000f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f42:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f46:	4619      	mov	r1, r3
 8000f48:	4820      	ldr	r0, [pc, #128]	; (8000fcc <HAL_LTDC_MspInit+0x1d8>)
 8000f4a:	f00c fccb 	bl	800d8e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000f4e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000f52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f68:	230e      	movs	r3, #14
 8000f6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f72:	4619      	mov	r1, r3
 8000f74:	4816      	ldr	r0, [pc, #88]	; (8000fd0 <HAL_LTDC_MspInit+0x1dc>)
 8000f76:	f00c fcb5 	bl	800d8e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f94:	230e      	movs	r3, #14
 8000f96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f9a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <HAL_LTDC_MspInit+0x1e0>)
 8000fa2:	f00c fc9f 	bl	800d8e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2105      	movs	r1, #5
 8000faa:	2058      	movs	r0, #88	; 0x58
 8000fac:	f00c f98a 	bl	800d2c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000fb0:	2058      	movs	r0, #88	; 0x58
 8000fb2:	f00c f9a1 	bl	800d2f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	37f0      	adds	r7, #240	; 0xf0
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	50001000 	.word	0x50001000
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	58022800 	.word	0x58022800
 8000fcc:	58022000 	.word	0x58022000
 8000fd0:	58022400 	.word	0x58022400
 8000fd4:	58021c00 	.word	0x58021c00

08000fd8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0bc      	sub	sp, #240	; 0xf0
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	22bc      	movs	r2, #188	; 0xbc
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f024 fed9 	bl	8025db0 <memset>
  if(hqspi->Instance==QUADSPI)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a76      	ldr	r2, [pc, #472]	; (80011dc <HAL_QSPI_MspInit+0x204>)
 8001004:	4293      	cmp	r3, r2
 8001006:	f040 80e4 	bne.w	80011d2 <HAL_QSPI_MspInit+0x1fa>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800100a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800100e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001010:	2300      	movs	r3, #0
 8001012:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4618      	mov	r0, r3
 800101a:	f010 fa75 	bl	8011508 <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8001024:	f7ff fdd0 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001028:	4b6d      	ldr	r3, [pc, #436]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 800102a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800102e:	4a6c      	ldr	r2, [pc, #432]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001038:	4b69      	ldr	r3, [pc, #420]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 800103a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001046:	4b66      	ldr	r3, [pc, #408]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	4a64      	ldr	r2, [pc, #400]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 800104e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001056:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001064:	4b5e      	ldr	r3, [pc, #376]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	4a5d      	ldr	r2, [pc, #372]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 800106c:	f043 0320 	orr.w	r3, r3, #32
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001074:	4b5a      	ldr	r3, [pc, #360]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107a:	f003 0320 	and.w	r3, r3, #32
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	4b57      	ldr	r3, [pc, #348]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	4a55      	ldr	r2, [pc, #340]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 800108a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001092:	4b53      	ldr	r3, [pc, #332]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a0:	4b4f      	ldr	r3, [pc, #316]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	4a4e      	ldr	r2, [pc, #312]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b0:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <HAL_QSPI_MspInit+0x208>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80010be:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80010c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010d8:	2309      	movs	r3, #9
 80010da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010e2:	4619      	mov	r1, r3
 80010e4:	483f      	ldr	r0, [pc, #252]	; (80011e4 <HAL_QSPI_MspInit+0x20c>)
 80010e6:	f00c fbfd 	bl	800d8e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001102:	230a      	movs	r3, #10
 8001104:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001108:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800110c:	4619      	mov	r1, r3
 800110e:	4835      	ldr	r0, [pc, #212]	; (80011e4 <HAL_QSPI_MspInit+0x20c>)
 8001110:	f00c fbe8 	bl	800d8e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001114:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001118:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800112e:	2309      	movs	r3, #9
 8001130:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001134:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001138:	4619      	mov	r1, r3
 800113a:	482b      	ldr	r0, [pc, #172]	; (80011e8 <HAL_QSPI_MspInit+0x210>)
 800113c:	f00c fbd2 	bl	800d8e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001144:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800115a:	230a      	movs	r3, #10
 800115c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001160:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001164:	4619      	mov	r1, r3
 8001166:	4820      	ldr	r0, [pc, #128]	; (80011e8 <HAL_QSPI_MspInit+0x210>)
 8001168:	f00c fbbc 	bl	800d8e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800116c:	230c      	movs	r3, #12
 800116e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001184:	2309      	movs	r3, #9
 8001186:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800118a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800118e:	4619      	mov	r1, r3
 8001190:	4816      	ldr	r0, [pc, #88]	; (80011ec <HAL_QSPI_MspInit+0x214>)
 8001192:	f00c fba7 	bl	800d8e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800119a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011b0:	2309      	movs	r3, #9
 80011b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <HAL_QSPI_MspInit+0x218>)
 80011be:	f00c fb91 	bl	800d8e4 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2105      	movs	r1, #5
 80011c6:	205c      	movs	r0, #92	; 0x5c
 80011c8:	f00c f87c 	bl	800d2c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80011cc:	205c      	movs	r0, #92	; 0x5c
 80011ce:	f00c f893 	bl	800d2f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	37f0      	adds	r7, #240	; 0xf0
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	52005000 	.word	0x52005000
 80011e0:	58024400 	.word	0x58024400
 80011e4:	58021800 	.word	0x58021800
 80011e8:	58021400 	.word	0x58021400
 80011ec:	58021c00 	.word	0x58021c00
 80011f0:	58020c00 	.word	0x58020c00

080011f4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0b6      	sub	sp, #216	; 0xd8
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80011fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800120a:	4b4f      	ldr	r3, [pc, #316]	; (8001348 <HAL_FMC_MspInit+0x154>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f040 8096 	bne.w	8001340 <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 8001214:	4b4c      	ldr	r3, [pc, #304]	; (8001348 <HAL_FMC_MspInit+0x154>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	22bc      	movs	r2, #188	; 0xbc
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f024 fdc4 	bl	8025db0 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800122c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800122e:	2300      	movs	r3, #0
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4618      	mov	r0, r3
 8001238:	f010 f966 	bl	8011508 <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 8001242:	f7ff fcc1 	bl	8000bc8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <HAL_FMC_MspInit+0x158>)
 8001248:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800124c:	4a3f      	ldr	r2, [pc, #252]	; (800134c <HAL_FMC_MspInit+0x158>)
 800124e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001252:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <HAL_FMC_MspInit+0x158>)
 8001258:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800125c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001264:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001268:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800127e:	230c      	movs	r3, #12
 8001280:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001284:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001288:	4619      	mov	r1, r3
 800128a:	4831      	ldr	r0, [pc, #196]	; (8001350 <HAL_FMC_MspInit+0x15c>)
 800128c:	f00c fb2a 	bl	800d8e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001290:	f248 1333 	movw	r3, #33075	; 0x8133
 8001294:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012aa:	230c      	movs	r3, #12
 80012ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4827      	ldr	r0, [pc, #156]	; (8001354 <HAL_FMC_MspInit+0x160>)
 80012b8:	f00c fb14 	bl	800d8e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80012bc:	f24c 7303 	movw	r3, #50947	; 0xc703
 80012c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012d6:	230c      	movs	r3, #12
 80012d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012e0:	4619      	mov	r1, r3
 80012e2:	481d      	ldr	r0, [pc, #116]	; (8001358 <HAL_FMC_MspInit+0x164>)
 80012e4:	f00c fafe 	bl	800d8e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80012e8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001302:	230c      	movs	r3, #12
 8001304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001308:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800130c:	4619      	mov	r1, r3
 800130e:	4813      	ldr	r0, [pc, #76]	; (800135c <HAL_FMC_MspInit+0x168>)
 8001310:	f00c fae8 	bl	800d8e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001314:	23e0      	movs	r3, #224	; 0xe0
 8001316:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800132c:	230c      	movs	r3, #12
 800132e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001332:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001336:	4619      	mov	r1, r3
 8001338:	4809      	ldr	r0, [pc, #36]	; (8001360 <HAL_FMC_MspInit+0x16c>)
 800133a:	f00c fad3 	bl	800d8e4 <HAL_GPIO_Init>
 800133e:	e000      	b.n	8001342 <HAL_FMC_MspInit+0x14e>
    return;
 8001340:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001342:	37d8      	adds	r7, #216	; 0xd8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	24000148 	.word	0x24000148
 800134c:	58024400 	.word	0x58024400
 8001350:	58021000 	.word	0x58021000
 8001354:	58021800 	.word	0x58021800
 8001358:	58020c00 	.word	0x58020c00
 800135c:	58021400 	.word	0x58021400
 8001360:	58021c00 	.word	0x58021c00

08001364 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800136c:	f7ff ff42 	bl	80011f4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_FMC_MspDeInit+0x58>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d123      	bne.n	80013cc <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_FMC_MspDeInit+0x58>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_FMC_MspDeInit+0x5c>)
 800138c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001390:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <HAL_FMC_MspDeInit+0x5c>)
 8001392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001396:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800139a:	f64f 7183 	movw	r1, #65411	; 0xff83
 800139e:	480e      	ldr	r0, [pc, #56]	; (80013d8 <HAL_FMC_MspDeInit+0x60>)
 80013a0:	f00c fc50 	bl	800dc44 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80013a4:	f248 1133 	movw	r1, #33075	; 0x8133
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <HAL_FMC_MspDeInit+0x64>)
 80013aa:	f00c fc4b 	bl	800dc44 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80013ae:	f24c 7103 	movw	r1, #50947	; 0xc703
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <HAL_FMC_MspDeInit+0x68>)
 80013b4:	f00c fc46 	bl	800dc44 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80013b8:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80013bc:	4809      	ldr	r0, [pc, #36]	; (80013e4 <HAL_FMC_MspDeInit+0x6c>)
 80013be:	f00c fc41 	bl	800dc44 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80013c2:	21e0      	movs	r1, #224	; 0xe0
 80013c4:	4808      	ldr	r0, [pc, #32]	; (80013e8 <HAL_FMC_MspDeInit+0x70>)
 80013c6:	f00c fc3d 	bl	800dc44 <HAL_GPIO_DeInit>
 80013ca:	e000      	b.n	80013ce <HAL_FMC_MspDeInit+0x56>
    return;
 80013cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2400014c 	.word	0x2400014c
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58021000 	.word	0x58021000
 80013dc:	58021800 	.word	0x58021800
 80013e0:	58020c00 	.word	0x58020c00
 80013e4:	58021400 	.word	0x58021400
 80013e8:	58021c00 	.word	0x58021c00

080013ec <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 80013f4:	f7ff ffc0 	bl	8001378 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b090      	sub	sp, #64	; 0x40
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	d827      	bhi.n	800145e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800140e:	2200      	movs	r2, #0
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	2036      	movs	r0, #54	; 0x36
 8001414:	f00b ff56 	bl	800d2c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001418:	2036      	movs	r0, #54	; 0x36
 800141a:	f00b ff6d 	bl	800d2f8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800141e:	4a29      	ldr	r2, [pc, #164]	; (80014c4 <HAL_InitTick+0xc4>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <HAL_InitTick+0xc8>)
 8001426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800142a:	4a27      	ldr	r2, [pc, #156]	; (80014c8 <HAL_InitTick+0xc8>)
 800142c:	f043 0310 	orr.w	r3, r3, #16
 8001430:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_InitTick+0xc8>)
 8001436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001442:	f107 0210 	add.w	r2, r7, #16
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f010 f819 	bl	8011484 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001458:	2b00      	cmp	r3, #0
 800145a:	d106      	bne.n	800146a <HAL_InitTick+0x6a>
 800145c:	e001      	b.n	8001462 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e02b      	b.n	80014ba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001462:	f00f ffe3 	bl	801142c <HAL_RCC_GetPCLK1Freq>
 8001466:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001468:	e004      	b.n	8001474 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146a:	f00f ffdf 	bl	801142c <HAL_RCC_GetPCLK1Freq>
 800146e:	4603      	mov	r3, r0
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_InitTick+0xcc>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	0c9b      	lsrs	r3, r3, #18
 800147e:	3b01      	subs	r3, #1
 8001480:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_InitTick+0xd0>)
 8001484:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <HAL_InitTick+0xd4>)
 8001486:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_InitTick+0xd0>)
 800148a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800148e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001490:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <HAL_InitTick+0xd0>)
 8001492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001494:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_InitTick+0xd0>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_InitTick+0xd0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80014a2:	480b      	ldr	r0, [pc, #44]	; (80014d0 <HAL_InitTick+0xd0>)
 80014a4:	f011 f989 	bl	80127ba <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d104      	bne.n	80014b8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <HAL_InitTick+0xd0>)
 80014b0:	f011 f9e4 	bl	801287c <HAL_TIM_Base_Start_IT>
 80014b4:	4603      	mov	r3, r0
 80014b6:	e000      	b.n	80014ba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3740      	adds	r7, #64	; 0x40
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	24000048 	.word	0x24000048
 80014c8:	58024400 	.word	0x58024400
 80014cc:	431bde83 	.word	0x431bde83
 80014d0:	2400b344 	.word	0x2400b344
 80014d4:	40001000 	.word	0x40001000

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <TIM6_DAC_IRQHandler+0x10>)
 800150a:	f011 fa2f 	bl	801296c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2400b344 	.word	0x2400b344

08001518 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <LTDC_IRQHandler+0x10>)
 800151e:	f00d fc27 	bl	800ed70 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2400b1b0 	.word	0x2400b1b0

0800152c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <DMA2D_IRQHandler+0x10>)
 8001532:	f00c f8c7 	bl	800d6c4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2400b290 	.word	0x2400b290

08001540 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <QUADSPI_IRQHandler+0x10>)
 8001546:	f00e f90d 	bl	800f764 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2400b2f8 	.word	0x2400b2f8

08001554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	return 1;
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_kill>:

int _kill(int pid, int sig)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800156e:	f024 fbc5 	bl	8025cfc <__errno>
 8001572:	4603      	mov	r3, r0
 8001574:	2216      	movs	r2, #22
 8001576:	601a      	str	r2, [r3, #0]
	return -1;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_exit>:

void _exit (int status)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ffe7 	bl	8001564 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001596:	e7fe      	b.n	8001596 <_exit+0x12>

08001598 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e00a      	b.n	80015c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015aa:	f3af 8000 	nop.w
 80015ae:	4601      	mov	r1, r0
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	b2ca      	uxtb	r2, r1
 80015b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbf0      	blt.n	80015aa <_read+0x12>
	}

return len;
 80015c8:	687b      	ldr	r3, [r7, #4]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e009      	b.n	80015f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	60ba      	str	r2, [r7, #8]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf1      	blt.n	80015e4 <_write+0x12>
	}
	return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_close>:

int _close(int file)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	return -1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001632:	605a      	str	r2, [r3, #4]
	return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_isatty>:

int _isatty(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
	return 1;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
	return 0;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <_sbrk+0x5c>)
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <_sbrk+0x60>)
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <_sbrk+0x64>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <_sbrk+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d207      	bcs.n	80016b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a4:	f024 fb2a 	bl	8025cfc <__errno>
 80016a8:	4603      	mov	r3, r0
 80016aa:	220c      	movs	r2, #12
 80016ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	e009      	b.n	80016c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <_sbrk+0x64>)
 80016c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	24080000 	.word	0x24080000
 80016d4:	00001000 	.word	0x00001000
 80016d8:	24000150 	.word	0x24000150
 80016dc:	2400b470 	.word	0x2400b470

080016e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001718 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016e4:	f009 f870 	bl	800a7c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ea:	490d      	ldr	r1, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001700:	4c0a      	ldr	r4, [pc, #40]	; (800172c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800170e:	f024 fb0d 	bl	8025d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001712:	f7fe fe35 	bl	8000380 <main>
  bx  lr
 8001716:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001718:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800171c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001720:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 8001724:	0802ab44 	.word	0x0802ab44
  ldr r2, =_sbss
 8001728:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 800172c:	2400b470 	.word	0x2400b470

08001730 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001730:	e7fe      	b.n	8001730 <ADC3_IRQHandler>

08001732 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001736:	f001 fc69 	bl	800300c <touchgfx_init>
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}

0800173e <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001746:	f001 fc8b 	bl	8003060 <touchgfx_taskEntry>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    {
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
    }
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	08027858 	.word	0x08027858

08001774 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    }
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffe9 	bl	8001754 <_ZN8touchgfx15TouchControllerD1Ev>
 8001782:	2104      	movs	r1, #4
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f024 fa58 	bl	8025c3a <_ZdlPvj>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 800179c:	f000 faa8 	bl	8001cf0 <_ZN25STM32H745ITouchController4initEv>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	68b8      	ldr	r0, [r7, #8]
 80017b8:	f000 fabe 	bl	8001d38 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ffbb 	bl	8001754 <_ZN8touchgfx15TouchControllerD1Ev>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	08027840 	.word	0x08027840

080017ec <_ZN20STM32TouchControllerD0Ev>:
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffe7 	bl	80017c8 <_ZN20STM32TouchControllerD1Ev>
 80017fa:	2104      	movs	r1, #4
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f024 fa1c 	bl	8025c3a <_ZdlPvj>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d80c      	bhi.n	8001836 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800181c:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001822:	bf00      	nop
 8001824:	08001835 	.word	0x08001835
 8001828:	08001835 	.word	0x08001835
 800182c:	08001835 	.word	0x08001835
 8001830:	08001835 	.word	0x08001835
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 8001834:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop

08001844 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d80c      	bhi.n	800186e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8001854:	a201      	add	r2, pc, #4	; (adr r2, 800185c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	0800186d 	.word	0x0800186d
 8001860:	0800186d 	.word	0x0800186d
 8001864:	0800186d 	.word	0x0800186d
 8001868:	0800186d 	.word	0x0800186d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 800186c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d80c      	bhi.n	80018a6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080018a5 	.word	0x080018a5
 800189c:	080018a5 	.word	0x080018a5
 80018a0:	080018a5 	.word	0x080018a5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80018a4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop

080018b4 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    {
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	601a      	str	r2, [r3, #0]
    }
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	080288d8 	.word	0x080288d8

080018d4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    }
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ffe9 	bl	80018b4 <_ZN8touchgfx3HALD1Ev>
 80018e2:	217c      	movs	r1, #124	; 0x7c
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f024 f9a8 	bl	8025c3a <_ZdlPvj>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
 8001928:	4613      	mov	r3, r2
 800192a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	429a      	cmp	r2, r3
 8001934:	d304      	bcc.n	8001940 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	883a      	ldrh	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d205      	bcs.n	800194c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001944:	219e      	movs	r1, #158	; 0x9e
 8001946:	480a      	ldr	r0, [pc, #40]	; (8001970 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001948:	f024 f9a6 	bl	8025c98 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800194c:	4a09      	ldr	r2, [pc, #36]	; (8001974 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001954:	883b      	ldrh	r3, [r7, #0]
 8001956:	8013      	strh	r3, [r2, #0]
    }
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2400aee0 	.word	0x2400aee0
 8001964:	2400aee2 	.word	0x2400aee2
 8001968:	08026dc0 	.word	0x08026dc0
 800196c:	08026e24 	.word	0x08026e24
 8001970:	08026e68 	.word	0x08026e68
 8001974:	2400aee6 	.word	0x2400aee6
 8001978:	2400aee8 	.word	0x2400aee8

0800197c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4610      	mov	r0, r2
 800199c:	4798      	blx	r3
 800199e:	4603      	mov	r3, r0
 80019a0:	e000      	b.n	80019a4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80019a2:	2300      	movs	r3, #0
    }
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f013 fadb 	bl	8014f70 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	33a4      	adds	r3, #164	; 0xa4
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	4798      	blx	r3
    }
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
    {
        return false;
 80019d8:	2300      	movs	r3, #0
    }
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d106      	bne.n	8001a0a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001a00:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001a04:	4811      	ldr	r0, [pc, #68]	; (8001a4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001a06:	f024 f947 	bl	8025c98 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf14      	ite	ne
 8001a22:	2301      	movne	r3, #1
 8001a24:	2300      	moveq	r3, #0
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001a2a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001a3a:	701a      	strb	r2, [r3, #0]
    }
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	08026ebc 	.word	0x08026ebc
 8001a48:	08026ef4 	.word	0x08026ef4
 8001a4c:	08026e68 	.word	0x08026e68
 8001a50:	2400aeea 	.word	0x2400aeea
 8001a54:	2400aeeb 	.word	0x2400aeeb

08001a58 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001a60:	2300      	movs	r3, #0
    }
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	460b      	mov	r3, r1
 8001a78:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4798      	blx	r3
        }
    }
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3318      	adds	r3, #24
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4798      	blx	r3
 8001ac6:	4603      	mov	r3, r0
    }
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d011      	beq.n	8001b0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d11e      	bne.n	8001b2e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001af8:	881a      	ldrh	r2, [r3, #0]
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001afc:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001afe:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001b00:	89bb      	ldrh	r3, [r7, #12]
 8001b02:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001b0a:	e010      	b.n	8001b2e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00c      	beq.n	8001b2e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001b1c:	881a      	ldrh	r2, [r3, #0]
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001b20:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001b22:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001b24:	89fb      	ldrh	r3, [r7, #14]
 8001b26:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
    }
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	2400aee4 	.word	0x2400aee4
 8001b40:	2400aee2 	.word	0x2400aee2
 8001b44:	2400aee0 	.word	0x2400aee0

08001b48 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f012 fbc1 	bl	80142da <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fe9f 	bl	80018b4 <_ZN8touchgfx3HALD1Ev>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	08027bc0 	.word	0x08027bc0

08001b84 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffe7 	bl	8001b60 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001b92:	217c      	movs	r1, #124	; 0x7c
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f024 f850 	bl	8025c3a <_ZdlPvj>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ffca 	bl	8001b48 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fd3a 	bl	8003640 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 fdc6 	bl	8003770 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 fdc5 	bl	800378c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6839      	ldr	r1, [r7, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 fdcd 	bl	80037b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	f001 fe14 	bl	8003868 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 fd17 	bl	8003688 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 fd1b 	bl	80036a8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 fd1d 	bl	80036c4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 fd1f 	bl	80036e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_ZN11TouchGFXHALD1Ev+0x20>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff4f 	bl	8001b60 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	08027870 	.word	0x08027870

08001cd0 <_ZN11TouchGFXHALD0Ev>:
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ffe7 	bl	8001cac <_ZN11TouchGFXHALD1Ev>
 8001cde:	217c      	movs	r1, #124	; 0x7c
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f023 ffaa 	bl	8025c3a <_ZdlPvj>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001cf6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001cfa:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001cfc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001d00:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001d02:	2308      	movs	r3, #8
 8001d04:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f00a ff1c 	bl	800cb4c <BSP_TS_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bf14      	ite	ne
 8001d1a:	2301      	movne	r3, #1
 8001d1c:	2300      	moveq	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e000      	b.n	8001d2e <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001d2c:	bf00      	nop
}
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	24000154 	.word	0x24000154

08001d38 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	f083 0301 	eor.w	r3, r3, #1
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e014      	b.n	8001d7e <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001d54:	490d      	ldr	r1, [pc, #52]	; (8001d8c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001d56:	2000      	movs	r0, #0
 8001d58:	f00a ffb4 	bl	800ccc4 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e00a      	b.n	8001d7e <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	461a      	mov	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	601a      	str	r2, [r3, #0]
    return true;
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	24000154 	.word	0x24000154
 8001d8c:	24000158 	.word	0x24000158

08001d90 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001d94:	2200      	movs	r2, #0
 8001d96:	2101      	movs	r1, #1
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f005 fa48 	bl	800722e <osSemaphoreNew>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001da2:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001dae:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001db0:	2128      	movs	r1, #40	; 0x28
 8001db2:	480e      	ldr	r0, [pc, #56]	; (8001dec <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001db4:	f023 ff70 	bl	8025c98 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2104      	movs	r1, #4
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f005 fb55 	bl	800746c <osMessageQueueNew>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001dc6:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001dd4:	212c      	movs	r1, #44	; 0x2c
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001dd8:	f023 ff5e 	bl	8025c98 <__assert_func>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	24000164 	.word	0x24000164
 8001de4:	08026f44 	.word	0x08026f44
 8001de8:	08026f90 	.word	0x08026f90
 8001dec:	08026fc0 	.word	0x08026fc0
 8001df0:	24000168 	.word	0x24000168
 8001df4:	08027010 	.word	0x08027010

08001df8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 fa9b 	bl	8007340 <osSemaphoreAcquire>
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	24000164 	.word	0x24000164

08001e14 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f005 fae1 	bl	80073e4 <osSemaphoreRelease>
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	24000164 	.word	0x24000164

08001e2c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f005 fa82 	bl	8007340 <osSemaphoreAcquire>
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	24000164 	.word	0x24000164

08001e44 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f005 fac9 	bl	80073e4 <osSemaphoreRelease>
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	24000164 	.word	0x24000164

08001e5c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	2300      	movs	r3, #0
 8001e66:	2200      	movs	r2, #0
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001e6a:	f005 fb73 	bl	8007554 <osMessageQueuePut>
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	24000168 	.word	0x24000168
 8001e78:	24000004 	.word	0x24000004

08001e7c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	1d39      	adds	r1, r7, #4
 8001e88:	2300      	movs	r3, #0
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f005 fbc2 	bl	8007614 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	1d39      	adds	r1, r7, #4
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f005 fbba 	bl	8007614 <osMessageQueueGet>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	24000168 	.word	0x24000168

08001eac <__NVIC_EnableIRQ>:
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4907      	ldr	r1, [pc, #28]	; (8001ee4 <__NVIC_EnableIRQ+0x38>)
 8001ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_DisableIRQ>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db12      	blt.n	8001f20 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	490a      	ldr	r1, [pc, #40]	; (8001f2c <__NVIC_DisableIRQ+0x44>)
 8001f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	3320      	adds	r3, #32
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f14:	f3bf 8f4f 	dsb	sy
}
 8001f18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f1a:	f3bf 8f6f 	isb	sy
}
 8001f1e:	bf00      	nop
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
        : color(0)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
    {
    }
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
    {
        return color;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
    }
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    {
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	601a      	str	r2, [r3, #0]
    }
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	08027990 	.word	0x08027990

08001f84 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
    }
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ffe9 	bl	8001f64 <_ZN8touchgfx9DMA_QueueD1Ev>
 8001f92:	2104      	movs	r1, #4
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f023 fe50 	bl	8025c3a <_ZdlPvj>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3344      	adds	r3, #68	; 0x44
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
    }
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
    {
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	601a      	str	r2, [r3, #0]
    }
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	08028e30 	.word	0x08028e30

08001fe0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
    }
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ffe9 	bl	8001fc0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8001fee:	210c      	movs	r1, #12
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f023 fe22 	bl	8025c3a <_ZdlPvj>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	721a      	strb	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	725a      	strb	r2, [r3, #9]
    {
    }
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	08028e30 	.word	0x08028e30

08002034 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800203c:	2301      	movs	r3, #1
    }
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3328      	adds	r3, #40	; 0x28
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4610      	mov	r0, r2
 800205e:	4798      	blx	r3
    }
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
        return instance;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
    }
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	2400aeec 	.word	0x2400aeec

08002080 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3314      	adds	r3, #20
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4610      	mov	r0, r2
 8002098:	4798      	blx	r3
    }
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80020aa:	f7ff ffdd 	bl	8002068 <_ZN8touchgfx3HAL11getInstanceEv>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ffe5 	bl	8002080 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	330c      	adds	r3, #12
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff30 	bl	8001f30 <_ZN8touchgfx9colortypeC1Ev>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 80020dc:	b5b0      	push	{r4, r5, r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	330c      	adds	r3, #12
 80020ea:	4619      	mov	r1, r3
 80020ec:	4610      	mov	r0, r2
 80020ee:	f7ff ff87 	bl	8002000 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <_ZN8STM32DMAC1Ev+0x50>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f103 000c 	add.w	r0, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3320      	adds	r3, #32
 8002102:	2260      	movs	r2, #96	; 0x60
 8002104:	4619      	mov	r1, r3
 8002106:	f013 f899 	bl	801523c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3320      	adds	r3, #32
 800210e:	245f      	movs	r4, #95	; 0x5f
 8002110:	461d      	mov	r5, r3
 8002112:	2c00      	cmp	r4, #0
 8002114:	db05      	blt.n	8002122 <_ZN8STM32DMAC1Ev+0x46>
 8002116:	4628      	mov	r0, r5
 8002118:	f7ff ffd1 	bl	80020be <_ZN8touchgfx6BlitOpC1Ev>
 800211c:	3520      	adds	r5, #32
 800211e:	3c01      	subs	r4, #1
 8002120:	e7f7      	b.n	8002112 <_ZN8STM32DMAC1Ev+0x36>
{
}
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bdb0      	pop	{r4, r5, r7, pc}
 800212c:	08027940 	.word	0x08027940

08002130 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	4a09      	ldr	r2, [pc, #36]	; (8002160 <_ZN8STM32DMAD1Ev+0x30>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800213e:	205a      	movs	r0, #90	; 0x5a
 8002140:	f7ff fed2 	bl	8001ee8 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	330c      	adds	r3, #12
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fac7 	bl	80026dc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff35 	bl	8001fc0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	08027940 	.word	0x08027940

08002164 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
}
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ffdf 	bl	8002130 <_ZN8STM32DMAD1Ev>
 8002172:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f023 fd5f 	bl	8025c3a <_ZdlPvj>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <_ZN8STM32DMA10initializeEv+0x54>)
 8002192:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002196:	4a11      	ldr	r2, [pc, #68]	; (80021dc <_ZN8STM32DMA10initializeEv+0x54>)
 8002198:	f043 0310 	orr.w	r3, r3, #16
 800219c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <_ZN8STM32DMA10initializeEv+0x54>)
 80021a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <_ZN8STM32DMA10initializeEv+0x54>)
 80021b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <_ZN8STM32DMA10initializeEv+0x54>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <_ZN8STM32DMA10initializeEv+0x54>)
 80021bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021be:	4a07      	ldr	r2, [pc, #28]	; (80021dc <_ZN8STM32DMA10initializeEv+0x54>)
 80021c0:	f023 0310 	bic.w	r3, r3, #16
 80021c4:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <_ZN8STM32DMA10initializeEv+0x58>)
 80021c8:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <_ZN8STM32DMA10initializeEv+0x5c>)
 80021ca:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80021cc:	205a      	movs	r0, #90	; 0x5a
 80021ce:	f7ff fe6d 	bl	8001eac <__NVIC_EnableIRQ>
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	58024400 	.word	0x58024400
 80021e0:	2400b290 	.word	0x2400b290
 80021e4:	080020a3 	.word	0x080020a3

080021e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]

    switch (format)
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	2b0b      	cmp	r3, #11
 80021fc:	d826      	bhi.n	800224c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80021fe:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	08002241 	.word	0x08002241
 8002208:	0800223b 	.word	0x0800223b
 800220c:	08002235 	.word	0x08002235
 8002210:	0800224d 	.word	0x0800224d
 8002214:	0800224d 	.word	0x0800224d
 8002218:	0800224d 	.word	0x0800224d
 800221c:	0800224d 	.word	0x0800224d
 8002220:	08002247 	.word	0x08002247
 8002224:	08002247 	.word	0x08002247
 8002228:	08002247 	.word	0x08002247
 800222c:	08002247 	.word	0x08002247
 8002230:	08002247 	.word	0x08002247
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
        break;
 8002238:	e00e      	b.n	8002258 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800223a:	2301      	movs	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
        break;
 800223e:	e00b      	b.n	8002258 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002240:	2302      	movs	r3, #2
 8002242:	60fb      	str	r3, [r7, #12]
        break;
 8002244:	e008      	b.n	8002258 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002246:	2305      	movs	r3, #5
 8002248:	60fb      	str	r3, [r7, #12]
        break;
 800224a:	e005      	b.n	8002258 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800224e:	4a06      	ldr	r2, [pc, #24]	; (8002268 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8002250:	2166      	movs	r1, #102	; 0x66
 8002252:	4806      	ldr	r0, [pc, #24]	; (800226c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002254:	f023 fd20 	bl	8025c98 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002258:	68fb      	ldr	r3, [r7, #12]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	08027054 	.word	0x08027054
 8002268:	08027070 	.word	0x08027070
 800226c:	080270bc 	.word	0x080270bc

08002270 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	2b0a      	cmp	r3, #10
 8002284:	d821      	bhi.n	80022ca <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002286:	a201      	add	r2, pc, #4	; (adr r2, 800228c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	080022c5 	.word	0x080022c5
 8002290:	080022bf 	.word	0x080022bf
 8002294:	080022b9 	.word	0x080022b9
 8002298:	080022cb 	.word	0x080022cb
 800229c:	080022cb 	.word	0x080022cb
 80022a0:	080022cb 	.word	0x080022cb
 80022a4:	080022cb 	.word	0x080022cb
 80022a8:	080022bf 	.word	0x080022bf
 80022ac:	080022bf 	.word	0x080022bf
 80022b0:	080022bf 	.word	0x080022bf
 80022b4:	080022bf 	.word	0x080022bf
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
        break;
 80022bc:	e00b      	b.n	80022d6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80022be:	2301      	movs	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
        break;
 80022c2:	e008      	b.n	80022d6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80022c4:	2302      	movs	r3, #2
 80022c6:	60fb      	str	r3, [r7, #12]
        break;
 80022c8:	e005      	b.n	80022d6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80022cc:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80022ce:	2187      	movs	r1, #135	; 0x87
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80022d2:	f023 fce1 	bl	8025c98 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	08027054 	.word	0x08027054
 80022e4:	08027108 	.word	0x08027108
 80022e8:	080270bc 	.word	0x080270bc

080022ec <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80022f4:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	7f5b      	ldrb	r3, [r3, #29]
 8002312:	4619      	mov	r1, r3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff67 	bl	80021e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800231a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	7f9b      	ldrb	r3, [r3, #30]
 8002320:	4619      	mov	r1, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ff60 	bl	80021e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002328:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	7f9b      	ldrb	r3, [r3, #30]
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff9d 	bl	8002270 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002336:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	8b5b      	ldrh	r3, [r3, #26]
 800233c:	461a      	mov	r2, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	8a9b      	ldrh	r3, [r3, #20]
 8002342:	1ad2      	subs	r2, r2, r3
 8002344:	4b96      	ldr	r3, [pc, #600]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002346:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	8b5b      	ldrh	r3, [r3, #26]
 800234c:	461a      	mov	r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	8a9b      	ldrh	r3, [r3, #20]
 8002352:	1ad2      	subs	r2, r2, r3
 8002354:	4b92      	ldr	r3, [pc, #584]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002356:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	8b1b      	ldrh	r3, [r3, #24]
 800235c:	461a      	mov	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	8a9b      	ldrh	r3, [r3, #20]
 8002362:	1ad2      	subs	r2, r2, r3
 8002364:	4b8e      	ldr	r3, [pc, #568]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002366:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002368:	4a8d      	ldr	r2, [pc, #564]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	8adb      	ldrh	r3, [r3, #22]
 8002372:	461a      	mov	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	8a9b      	ldrh	r3, [r3, #20]
 8002378:	041b      	lsls	r3, r3, #16
 800237a:	431a      	orrs	r2, r3
 800237c:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800237e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	4b86      	ldr	r3, [pc, #536]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4b84      	ldr	r3, [pc, #528]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800238e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002398:	d036      	beq.n	8002408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 800239a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800239e:	f200 80e2 	bhi.w	8002566 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80023a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a6:	d014      	beq.n	80023d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 80023a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ac:	f200 80db 	bhi.w	8002566 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d059      	beq.n	8002468 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	f200 80d6 	bhi.w	8002566 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80023ba:	2b40      	cmp	r3, #64	; 0x40
 80023bc:	f000 80be 	beq.w	800253c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	f200 80d0 	bhi.w	8002566 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d039      	beq.n	800243e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	f000 80b6 	beq.w	800253c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80023d0:	e0c9      	b.n	8002566 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	7f1b      	ldrb	r3, [r3, #28]
 80023d6:	061b      	lsls	r3, r3, #24
 80023d8:	4619      	mov	r1, r3
 80023da:	4a71      	ldr	r2, [pc, #452]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023dc:	4b71      	ldr	r3, [pc, #452]	; (80025a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80023de:	430b      	orrs	r3, r1
 80023e0:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	330c      	adds	r3, #12
 80023e6:	4c6e      	ldr	r4, [pc, #440]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fdaf 	bl	8001f4c <_ZNK8touchgfx9colortypecvmEv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80023f2:	4a6b      	ldr	r2, [pc, #428]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	4b68      	ldr	r3, [pc, #416]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80023fe:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002400:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002402:	4a69      	ldr	r2, [pc, #420]	; (80025a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002404:	601a      	str	r2, [r3, #0]
        break;
 8002406:	e0c7      	b.n	8002598 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	7f1b      	ldrb	r3, [r3, #28]
 800240c:	061b      	lsls	r3, r3, #24
 800240e:	4619      	mov	r1, r3
 8002410:	4a63      	ldr	r2, [pc, #396]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002412:	4b66      	ldr	r3, [pc, #408]	; (80025ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002414:	430b      	orrs	r3, r1
 8002416:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	330c      	adds	r3, #12
 800241c:	4c60      	ldr	r4, [pc, #384]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fd94 	bl	8001f4c <_ZNK8touchgfx9colortypecvmEv>
 8002424:	4603      	mov	r3, r0
 8002426:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002428:	4a5d      	ldr	r2, [pc, #372]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002434:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002436:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002438:	4a5b      	ldr	r2, [pc, #364]	; (80025a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800243a:	601a      	str	r2, [r3, #0]
        break;
 800243c:	e0ac      	b.n	8002598 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	7f1b      	ldrb	r3, [r3, #28]
 8002442:	061b      	lsls	r3, r3, #24
 8002444:	461a      	mov	r2, r3
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	4a55      	ldr	r2, [pc, #340]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800244c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002450:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002452:	4a53      	ldr	r2, [pc, #332]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800245e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002460:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002462:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002464:	601a      	str	r2, [r3, #0]
        break;
 8002466:	e097      	b.n	8002598 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8002468:	2301      	movs	r3, #1
 800246a:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1d1a      	adds	r2, r3, #4
 8002476:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	7f1b      	ldrb	r3, [r3, #28]
 800247e:	061b      	lsls	r3, r3, #24
 8002480:	461a      	mov	r2, r3
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	4a46      	ldr	r2, [pc, #280]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800248e:	4a44      	ldr	r2, [pc, #272]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800249a:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d00d      	beq.n	80024c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 80024aa:	e020      	b.n	80024ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80024ac:	4b3c      	ldr	r3, [pc, #240]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	8852      	ldrh	r2, [r2, #2]
 80024b8:	3a01      	subs	r2, #1
 80024ba:	0212      	lsls	r2, r2, #8
 80024bc:	4611      	mov	r1, r2
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024c0:	430b      	orrs	r3, r1
 80024c2:	61d3      	str	r3, [r2, #28]
                break;
 80024c4:	e01a      	b.n	80024fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	7f1b      	ldrb	r3, [r3, #28]
 80024ca:	2bff      	cmp	r3, #255	; 0xff
 80024cc:	d101      	bne.n	80024d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                  blend = false;
 80024ce:	2300      	movs	r3, #0
 80024d0:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80024d2:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80024d8:	4013      	ands	r3, r2
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	8852      	ldrh	r2, [r2, #2]
 80024de:	3a01      	subs	r2, #1
 80024e0:	0212      	lsls	r2, r2, #8
 80024e2:	4313      	orrs	r3, r2
 80024e4:	4a2e      	ldr	r2, [pc, #184]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024e6:	f043 0310 	orr.w	r3, r3, #16
 80024ea:	61d3      	str	r3, [r2, #28]
                break;
 80024ec:	e006      	b.n	80024fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80024ee:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80024f0:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 80024f2:	f240 1111 	movw	r1, #273	; 0x111
 80024f6:	4831      	ldr	r0, [pc, #196]	; (80025bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 80024f8:	f023 fbce 	bl	8025c98 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002502:	f043 0320 	orr.w	r3, r3, #32
 8002506:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf14      	ite	ne
 8002514:	2301      	movne	r3, #1
 8002516:	2300      	moveq	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d000      	beq.n	8002520 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 800251e:	e7f3      	b.n	8002508 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002520:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002522:	2210      	movs	r2, #16
 8002524:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8002526:	7ffb      	ldrb	r3, [r7, #31]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800252c:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800252e:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002530:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 8002532:	e031      	b.n	8002598 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002536:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8002538:	601a      	str	r2, [r3, #0]
      break;
 800253a:	e02d      	b.n	8002598 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7f1b      	ldrb	r3, [r3, #28]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	461a      	mov	r2, r3
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800254a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002550:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800255c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002560:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002562:	601a      	str	r2, [r3, #0]
        break;
 8002564:	e018      	b.n	8002598 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	7f1b      	ldrb	r3, [r3, #28]
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	461a      	mov	r2, r3
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002578:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	7f5a      	ldrb	r2, [r3, #29]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	7f9b      	ldrb	r3, [r3, #30]
 8002582:	429a      	cmp	r2, r3
 8002584:	d003      	beq.n	800258e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002588:	4a0d      	ldr	r2, [pc, #52]	; (80025c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 800258a:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 800258c:	e003      	b.n	8002596 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002590:	f240 2201 	movw	r2, #513	; 0x201
 8002594:	601a      	str	r2, [r3, #0]
        break;
 8002596:	bf00      	nop
    }
}
 8002598:	bf00      	nop
 800259a:	3724      	adds	r7, #36	; 0x24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd90      	pop	{r4, r7, pc}
 80025a0:	52001000 	.word	0x52001000
 80025a4:	0002000a 	.word	0x0002000a
 80025a8:	00020201 	.word	0x00020201
 80025ac:	00020009 	.word	0x00020009
 80025b0:	ffff00ef 	.word	0xffff00ef
 80025b4:	08027154 	.word	0x08027154
 80025b8:	08027170 	.word	0x08027170
 80025bc:	080270bc 	.word	0x080270bc
 80025c0:	00010201 	.word	0x00010201

080025c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	7f9b      	ldrb	r3, [r3, #30]
 80025d2:	4619      	mov	r1, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fe4b 	bl	8002270 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80025da:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80025dc:	4a3b      	ldr	r2, [pc, #236]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	8adb      	ldrh	r3, [r3, #22]
 80025e6:	461a      	mov	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	8a9b      	ldrh	r3, [r3, #20]
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	431a      	orrs	r2, r3
 80025f0:	4b36      	ldr	r3, [pc, #216]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	4b34      	ldr	r3, [pc, #208]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80025fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	8b5b      	ldrh	r3, [r3, #26]
 8002600:	461a      	mov	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	8a9b      	ldrh	r3, [r3, #20]
 8002606:	1ad2      	subs	r2, r2, r3
 8002608:	4b30      	ldr	r3, [pc, #192]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800260a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b08      	cmp	r3, #8
 8002612:	d12e      	bne.n	8002672 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	8b5b      	ldrh	r3, [r3, #26]
 8002618:	461a      	mov	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	8a9b      	ldrh	r3, [r3, #20]
 800261e:	1ad2      	subs	r2, r2, r3
 8002620:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002622:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	8b5b      	ldrh	r3, [r3, #26]
 8002628:	461a      	mov	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	8a9b      	ldrh	r3, [r3, #20]
 800262e:	1ad2      	subs	r2, r2, r3
 8002630:	4b26      	ldr	r3, [pc, #152]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002632:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002634:	4a25      	ldr	r2, [pc, #148]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	7f1b      	ldrb	r3, [r3, #28]
 800263e:	061b      	lsls	r3, r3, #24
 8002640:	4619      	mov	r1, r3
 8002642:	4a22      	ldr	r2, [pc, #136]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002644:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8002646:	430b      	orrs	r3, r1
 8002648:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	330c      	adds	r3, #12
 800264e:	4c1f      	ldr	r4, [pc, #124]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fc7b 	bl	8001f4c <_ZNK8touchgfx9colortypecvmEv>
 8002656:	4603      	mov	r3, r0
 8002658:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002660:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002668:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800266e:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8002670:	e027      	b.n	80026c2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002672:	4a16      	ldr	r2, [pc, #88]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	330c      	adds	r3, #12
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fc62 	bl	8001f4c <_ZNK8touchgfx9colortypecvmEv>
 8002688:	4603      	mov	r3, r0
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fc59 	bl	8001f4c <_ZNK8touchgfx9colortypecvmEv>
 800269a:	4603      	mov	r3, r0
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80026a2:	431c      	orrs	r4, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fc4f 	bl	8001f4c <_ZNK8touchgfx9colortypecvmEv>
 80026ae:	4603      	mov	r3, r0
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026b8:	4323      	orrs	r3, r4
 80026ba:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026be:	4a06      	ldr	r2, [pc, #24]	; (80026d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 80026c0:	601a      	str	r2, [r3, #0]
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd90      	pop	{r4, r7, pc}
 80026ca:	bf00      	nop
 80026cc:	52001000 	.word	0x52001000
 80026d0:	00010009 	.word	0x00010009
 80026d4:	00020201 	.word	0x00020201
 80026d8:	00030201 	.word	0x00030201

080026dc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	4a05      	ldr	r2, [pc, #20]	; (80026fc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fc39 	bl	8001f64 <_ZN8touchgfx9DMA_QueueD1Ev>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	08028e80 	.word	0x08028e80

08002700 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ffe7 	bl	80026dc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800270e:	2114      	movs	r1, #20
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f023 fa92 	bl	8025c3a <_ZdlPvj>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	805a      	strh	r2, [r3, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	809a      	strh	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	80da      	strh	r2, [r3, #6]
    {
    }
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6013      	str	r3, [r2, #0]
    }
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	2400af48 	.word	0x2400af48

08002770 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
    {
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	601a      	str	r2, [r3, #0]
    }
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	08027bac 	.word	0x08027bac

08002790 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
    }
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ffe9 	bl	8002770 <_ZN8touchgfx12FontProviderD1Ev>
 800279e:	2104      	movs	r1, #4
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f023 fa4a 	bl	8025c3a <_ZdlPvj>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	611a      	str	r2, [r3, #16]
    {
    }
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	08027b9c 	.word	0x08027b9c

080027f0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    {
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	601a      	str	r2, [r3, #0]
    }
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	08027b9c 	.word	0x08027b9c

08002810 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
    }
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ffe9 	bl	80027f0 <_ZN8touchgfx7MVPHeapD1Ev>
 800281e:	2114      	movs	r1, #20
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f023 fa0a 	bl	8025c3a <_ZdlPvj>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
    {
    }
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
    {
    }
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
    {
    }
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
    {
    }
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
    {
    }
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
    {
 80028bc:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	601a      	str	r2, [r3, #0]
    }
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	08027b74 	.word	0x08027b74

080028d4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
    }
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ffe9 	bl	80028b4 <_ZN8touchgfx15UIEventListenerD1Ev>
 80028e2:	2104      	movs	r1, #4
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f023 f9a8 	bl	8025c3a <_ZdlPvj>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
    {
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	601a      	str	r2, [r3, #0]
    }
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	08029228 	.word	0x08029228

08002914 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
    }
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ffe9 	bl	80028f4 <_ZN8touchgfx3LCDD1Ev>
 8002922:	2108      	movs	r1, #8
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f023 f988 	bl	8025c3a <_ZdlPvj>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800295e:	6810      	ldr	r0, [r2, #0]
 8002960:	6851      	ldr	r1, [r2, #4]
 8002962:	c303      	stmia	r3!, {r0, r1}
    }
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    {
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	601a      	str	r2, [r3, #0]
    }
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	08027b5c 	.word	0x08027b5c

08002990 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
    }
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ffe9 	bl	8002970 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800299e:	2104      	movs	r1, #4
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f023 f94a 	bl	8025c3a <_ZdlPvj>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	801a      	strh	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	805a      	strh	r2, [r3, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	809a      	strh	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	80da      	strh	r2, [r3, #6]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	811a      	strh	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	815a      	strh	r2, [r3, #10]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	819a      	strh	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	739a      	strb	r2, [r3, #14]
        {
        }
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ffd5 	bl	80029b0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	829a      	strh	r2, [r3, #20]
    {
    }
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002a2a:	4a55      	ldr	r2, [pc, #340]	; (8002b80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	615a      	str	r2, [r3, #20]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	331c      	adds	r3, #28
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ffcc 	bl	80029f6 <_ZN8touchgfx8GesturesC1Ev>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	64da      	str	r2, [r3, #76]	; 0x4c
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3350      	adds	r3, #80	; 0x50
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fe39 	bl	8002720 <_ZN8touchgfx4RectC1Ev>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	661a      	str	r2, [r3, #96]	; 0x60
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	671a      	str	r2, [r3, #112]	; 0x70
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8002b36:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002b3c:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002b3e:	8b3b      	ldrh	r3, [r7, #24]
 8002b40:	8013      	strh	r3, [r2, #0]
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002b44:	881a      	ldrh	r2, [r3, #0]
 8002b46:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002b48:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002b4a:	4a11      	ldr	r2, [pc, #68]	; (8002b90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002b4c:	8bbb      	ldrh	r3, [r7, #28]
 8002b4e:	8013      	strh	r3, [r2, #0]
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002b52:	881a      	ldrh	r2, [r3, #0]
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002b56:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002b5e:	8b3a      	ldrh	r2, [r7, #24]
 8002b60:	8bbb      	ldrh	r3, [r7, #28]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	bf34      	ite	cc
 8002b66:	2301      	movcc	r3, #1
 8002b68:	2300      	movcs	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	080288d8 	.word	0x080288d8
 8002b84:	2400aeec 	.word	0x2400aeec
 8002b88:	2400aee0 	.word	0x2400aee0
 8002b8c:	2400aee6 	.word	0x2400aee6
 8002b90:	2400aee2 	.word	0x2400aee2
 8002b94:	2400aee8 	.word	0x2400aee8
 8002b98:	2400aee4 	.word	0x2400aee4

08002b9c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe81 	bl	80028b4 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	0802933c 	.word	0x0802933c

08002bc0 <_ZN8touchgfx11ApplicationD0Ev>:
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ffe7 	bl	8002b9c <_ZN8touchgfx11ApplicationD1Ev>
 8002bce:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f023 f831 	bl	8025c3a <_ZdlPvj>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f804 	bl	8002bf8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00f      	beq.n	8002c2a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4798      	blx	r3
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4610      	mov	r0, r2
 8002c44:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff97 	bl	8002b9c <_ZN8touchgfx11ApplicationD1Ev>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	08027b18 	.word	0x08027b18

08002c7c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ffe7 	bl	8002c58 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002c8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f022 ffd3 	bl	8025c3a <_ZdlPvj>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fae9 	bl	800328c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ffcb 	bl	8002c58 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	08027abc 	.word	0x08027abc

08002cd0 <_ZN23FrontendApplicationBaseD0Ev>:
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ffe1 	bl	8002ca0 <_ZN23FrontendApplicationBaseD1Ev>
 8002cde:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f022 ffa9 	bl	8025c3a <_ZdlPvj>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	4a05      	ldr	r2, [pc, #20]	; (8002d14 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ffcb 	bl	8002ca0 <_ZN23FrontendApplicationBaseD1Ev>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	08027a78 	.word	0x08027a78

08002d18 <_ZN19FrontendApplicationD0Ev>:
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ffe7 	bl	8002cf4 <_ZN19FrontendApplicationD1Ev>
 8002d26:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f022 ff85 	bl	8025c3a <_ZdlPvj>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f003 fffd 	bl	8006d48 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f014 f997 	bl	8017084 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 f8ee 	bl	8003f4c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	f7ff fd0d 	bl	80027b0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002d96:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]
    {

    }
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	08027a64 	.word	0x08027a64

08002dac <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4801      	ldr	r0, [pc, #4]	; (8002db8 <__tcf_0+0xc>)
 8002db2:	f000 f95f 	bl	8003074 <_ZN12FrontendHeapD1Ev>
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	2400016c 	.word	0x2400016c

08002dbc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f3bf 8f5b 	dmb	ish
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002ddc:	480b      	ldr	r0, [pc, #44]	; (8002e0c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002dde:	f022 ff2e 	bl	8025c3e <__cxa_guard_acquire>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002df2:	4807      	ldr	r0, [pc, #28]	; (8002e10 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002df4:	f000 f868 	bl	8002ec8 <_ZN12FrontendHeapC1Ev>
 8002df8:	4804      	ldr	r0, [pc, #16]	; (8002e0c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002dfa:	f022 ff2c 	bl	8025c56 <__cxa_guard_release>
 8002dfe:	4805      	ldr	r0, [pc, #20]	; (8002e14 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8002e00:	f022 ff68 	bl	8025cd4 <atexit>
        return instance;
 8002e04:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8002e06:	4618      	mov	r0, r3
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	24000874 	.word	0x24000874
 8002e10:	2400016c 	.word	0x2400016c
 8002e14:	08002dad 	.word	0x08002dad

08002e18 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	4a05      	ldr	r2, [pc, #20]	; (8002e38 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fce1 	bl	80027f0 <_ZN8touchgfx7MVPHeapD1Ev>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	08027a64 	.word	0x08027a64

08002e3c <_ZN16FrontendHeapBaseD0Ev>:
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ffe7 	bl	8002e18 <_ZN16FrontendHeapBaseD1Ev>
 8002e4a:	2114      	movs	r1, #20
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f022 fef4 	bl	8025c3a <_ZdlPvj>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f010 f92a 	bl	80130c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002e6c:	4a03      	ldr	r2, [pc, #12]	; (8002e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	08027a30 	.word	0x08027a30

08002e80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f010 f918 	bl	80130c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002e90:	4a03      	ldr	r2, [pc, #12]	; (8002ea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	080279fc 	.word	0x080279fc

08002ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f010 f906 	bl	80130c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002eb4:	4a03      	ldr	r2, [pc, #12]	; (8002ec4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	080279c8 	.word	0x080279c8

08002ec8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f103 0114 	add.w	r1, r3, #20
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f503 64b3 	add.w	r4, r3, #1432	; 0x598
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
                     app(model, *this)
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	4623      	mov	r3, r4
 8002eee:	f7ff ff43 	bl	8002d78 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8002ef2:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <_ZN12FrontendHeapC1Ev+0x8c>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3314      	adds	r3, #20
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ffad 	bl	8002e5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	332c      	adds	r3, #44	; 0x2c
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ffba 	bl	8002e80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ffc6 	bl	8002ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f003 ff04 	bl	8006d2c <_ZN5ModelC1Ev>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f503 60b6 	add.w	r0, r3, #1456	; 0x5b0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4619      	mov	r1, r3
 8002f34:	f003 fee4 	bl	8006d00 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f7ff ff0b 	bl	8002d5e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd90      	pop	{r4, r7, pc}
 8002f52:	bf00      	nop
 8002f54:	080279b4 	.word	0x080279b4

08002f58 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	8bbb      	ldrh	r3, [r7, #28]
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	8b3b      	ldrh	r3, [r7, #24]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	f7ff fd51 	bl	8002a1c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	601a      	str	r2, [r3, #0]
    }
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	08027bc0 	.word	0x08027bc0

08002f90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	8bbb      	ldrh	r3, [r7, #28]
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	8b3b      	ldrh	r3, [r7, #24]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	f7ff ffd3 	bl	8002f58 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8002fb2:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	601a      	str	r2, [r3, #0]
    }
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	08027870 	.word	0x08027870

08002fc8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	08027858 	.word	0x08027858

08002fe8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ffe8 	bl	8002fc8 <_ZN8touchgfx15TouchControllerC1Ev>
 8002ff8:	4a03      	ldr	r2, [pc, #12]	; (8003008 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	08027840 	.word	0x08027840

0800300c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b085      	sub	sp, #20
 8003010:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003012:	f000 fd51 	bl	8003ab8 <_ZN14BitmapDatabase11getInstanceEv>
 8003016:	4604      	mov	r4, r0
 8003018:	f000 fd58 	bl	8003acc <_ZN14BitmapDatabase15getInstanceSizeEv>
 800301c:	4603      	mov	r3, r0
 800301e:	4619      	mov	r1, r3
 8003020:	2300      	movs	r3, #0
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2300      	movs	r3, #0
 8003026:	2200      	movs	r2, #0
 8003028:	4620      	mov	r0, r4
 800302a:	f016 fdaf 	bl	8019b8c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800302e:	4809      	ldr	r0, [pc, #36]	; (8003054 <touchgfx_init+0x48>)
 8003030:	f7ff fb8e 	bl	8002750 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003034:	2000      	movs	r0, #0
 8003036:	f003 fdb1 	bl	8006b9c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800303a:	4807      	ldr	r0, [pc, #28]	; (8003058 <touchgfx_init+0x4c>)
 800303c:	f016 fce8 	bl	8019a10 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003040:	f7ff febc 	bl	8002dbc <_ZN12FrontendHeap11getInstanceEv>
 8003044:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003046:	4805      	ldr	r0, [pc, #20]	; (800305c <touchgfx_init+0x50>)
 8003048:	f7fe fdb8 	bl	8001bbc <_ZN11TouchGFXHAL10initializeEv>
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bd90      	pop	{r4, r7, pc}
 8003054:	24001514 	.word	0x24001514
 8003058:	24000008 	.word	0x24000008
 800305c:	24001518 	.word	0x24001518

08003060 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <touchgfx_taskEntry+0x10>)
 8003066:	f011 f9a0 	bl	80143aa <_ZN8touchgfx3HAL9taskEntryEv>
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	24001518 	.word	0x24001518

08003074 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <_ZN12FrontendHeapD1Ev+0x4c>)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fe33 	bl	8002cf4 <_ZN19FrontendApplicationD1Ev>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8003094:	4618      	mov	r0, r3
 8003096:	f000 f827 	bl	80030e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	332c      	adds	r3, #44	; 0x2c
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f844 	bl	800312c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3314      	adds	r3, #20
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f863 	bl	8003174 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff feb1 	bl	8002e18 <_ZN16FrontendHeapBaseD1Ev>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	080279b4 	.word	0x080279b4

080030c4 <_ZN12FrontendHeapD0Ev>:
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ffd1 	bl	8003074 <_ZN12FrontendHeapD1Ev>
 80030d2:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f022 fdaf 	bl	8025c3a <_ZdlPvj>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	4a05      	ldr	r2, [pc, #20]	; (8003108 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00f ffdf 	bl	80130bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	080279c8 	.word	0x080279c8

0800310c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ffe7 	bl	80030e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800311a:	2114      	movs	r1, #20
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f022 fd8c 	bl	8025c3a <_ZdlPvj>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	4a05      	ldr	r2, [pc, #20]	; (800314c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	f00f ffbd 	bl	80130bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	080279fc 	.word	0x080279fc

08003150 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ffe7 	bl	800312c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800315e:	f240 516c 	movw	r1, #1388	; 0x56c
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f022 fd69 	bl	8025c3a <_ZdlPvj>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	4a05      	ldr	r2, [pc, #20]	; (8003194 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	f00f ff99 	bl	80130bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	08027a30 	.word	0x08027a30

08003198 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff ffe7 	bl	8003174 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031a6:	2118      	movs	r1, #24
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f022 fd46 	bl	8025c3a <_ZdlPvj>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fb93 	bl	80028f4 <_ZN8touchgfx3LCDD1Ev>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	0802a4e0 	.word	0x0802a4e0

080031dc <_ZN8touchgfx8LCD16bppD0Ev>:
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ffe7 	bl	80031b8 <_ZN8touchgfx8LCD16bppD1Ev>
 80031ea:	2178      	movs	r1, #120	; 0x78
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f022 fd24 	bl	8025c3a <_ZdlPvj>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_Z41__static_initialization_and_destruction_0ii>:
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af02      	add	r7, sp, #8
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d119      	bne.n	8003240 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003212:	4293      	cmp	r3, r2
 8003214:	d114      	bne.n	8003240 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003216:	4818      	ldr	r0, [pc, #96]	; (8003278 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003218:	f7ff fee6 	bl	8002fe8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800321c:	4817      	ldr	r0, [pc, #92]	; (800327c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800321e:	f7fe ff5d 	bl	80020dc <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8003222:	4817      	ldr	r0, [pc, #92]	; (8003280 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003224:	f019 fd7a 	bl	801cd1c <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003228:	f44f 7388 	mov.w	r3, #272	; 0x110
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4b10      	ldr	r3, [pc, #64]	; (8003278 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003236:	4a12      	ldr	r2, [pc, #72]	; (8003280 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003238:	4910      	ldr	r1, [pc, #64]	; (800327c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800323a:	4812      	ldr	r0, [pc, #72]	; (8003284 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800323c:	f7ff fea8 	bl	8002f90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d113      	bne.n	800326e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800324c:	4293      	cmp	r3, r2
 800324e:	d10e      	bne.n	800326e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003250:	480c      	ldr	r0, [pc, #48]	; (8003284 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003252:	f7fe fd2b 	bl	8001cac <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003256:	480c      	ldr	r0, [pc, #48]	; (8003288 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003258:	f000 f83a 	bl	80032d0 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800325c:	4808      	ldr	r0, [pc, #32]	; (8003280 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800325e:	f7ff ffab 	bl	80031b8 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8003262:	4806      	ldr	r0, [pc, #24]	; (800327c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003264:	f7fe ff64 	bl	8002130 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003268:	4803      	ldr	r0, [pc, #12]	; (8003278 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800326a:	f7fe faad 	bl	80017c8 <_ZN20STM32TouchControllerD1Ev>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	24000878 	.word	0x24000878
 800327c:	2400087c 	.word	0x2400087c
 8003280:	2400149c 	.word	0x2400149c
 8003284:	24001518 	.word	0x24001518
 8003288:	24000008 	.word	0x24000008

0800328c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	4a05      	ldr	r2, [pc, #20]	; (80032ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fb67 	bl	8002970 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	08027b00 	.word	0x08027b00

080032b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ffe7 	bl	800328c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80032be:	2110      	movs	r1, #16
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f022 fcba 	bl	8025c3a <_ZdlPvj>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId MEDIUM = 3;  // verdana_14_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fa45 	bl	8002770 <_ZN8touchgfx12FontProviderD1Ev>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	08027c90 	.word	0x08027c90

080032f4 <_ZN23ApplicationFontProviderD0Ev>:
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ffe7 	bl	80032d0 <_ZN23ApplicationFontProviderD1Ev>
 8003302:	2104      	movs	r1, #4
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f022 fc98 	bl	8025c3a <_ZdlPvj>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800331c:	2301      	movs	r3, #1
    }
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003332:	230c      	movs	r3, #12
    }
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800334c:	887a      	ldrh	r2, [r7, #2]
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	3308      	adds	r3, #8
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	4413      	add	r3, r2
    }
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003374:	887a      	ldrh	r2, [r7, #2]
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	3308      	adds	r3, #8
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
    }
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003398:	2301      	movs	r3, #1
    }
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80033ae:	f240 5364 	movw	r3, #1380	; 0x564
    }
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80033ca:	887b      	ldrh	r3, [r7, #2]
 80033cc:	f240 5264 	movw	r2, #1380	; 0x564
 80033d0:	fb02 f303 	mul.w	r3, r2, r3
 80033d4:	3308      	adds	r3, #8
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
    }
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	f240 5264 	movw	r2, #1380	; 0x564
 80033f8:	fb02 f303 	mul.w	r3, r2, r3
 80033fc:	3308      	adds	r3, #8
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4413      	add	r3, r2
    }
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003416:	2301      	movs	r3, #1
    }
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800342c:	2310      	movs	r3, #16
    }
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003446:	887b      	ldrh	r3, [r7, #2]
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	3308      	adds	r3, #8
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4413      	add	r3, r2
    }
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003468:	887b      	ldrh	r3, [r7, #2]
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	3308      	adds	r3, #8
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4413      	add	r3, r2
    }
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68d2      	ldr	r2, [r2, #12]
 800348e:	1052      	asrs	r2, r2, #1
 8003490:	1899      	adds	r1, r3, r2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	e00a      	b.n	80034ba <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	68d2      	ldr	r2, [r2, #12]
 80034ac:	1052      	asrs	r2, r2, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	4413      	add	r3, r2
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4608      	mov	r0, r1
 80034bc:	4798      	blx	r3
    }
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d010      	beq.n	80034f8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d001      	beq.n	80034f8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80034f8:	2300      	movs	r3, #0
    }
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <_GLOBAL__sub_I_touchgfx_init>:
 8003506:	b580      	push	{r7, lr}
 8003508:	af00      	add	r7, sp, #0
 800350a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800350e:	2001      	movs	r0, #1
 8003510:	f7ff fe74 	bl	80031fc <_Z41__static_initialization_and_destruction_0ii>
 8003514:	bd80      	pop	{r7, pc}

08003516 <_GLOBAL__sub_D_touchgfx_init>:
 8003516:	b580      	push	{r7, lr}
 8003518:	af00      	add	r7, sp, #0
 800351a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800351e:	2000      	movs	r0, #0
 8003520:	f7ff fe6c 	bl	80031fc <_Z41__static_initialization_and_destruction_0ii>
 8003524:	bd80      	pop	{r7, pc}

08003526 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3320      	adds	r3, #32
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
    }
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003550:	3301      	adds	r3, #1
 8003552:	b2da      	uxtb	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <__NVIC_EnableIRQ>:
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db0b      	blt.n	8003592 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4907      	ldr	r1, [pc, #28]	; (80035a0 <__NVIC_EnableIRQ+0x38>)
 8003582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2001      	movs	r0, #1
 800358a:	fa00 f202 	lsl.w	r2, r0, r2
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <__NVIC_DisableIRQ>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	db12      	blt.n	80035dc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	490a      	ldr	r1, [pc, #40]	; (80035e8 <__NVIC_DisableIRQ+0x44>)
 80035be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2001      	movs	r0, #1
 80035c6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ca:	3320      	adds	r3, #32
 80035cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80035d0:	f3bf 8f4f 	dsb	sy
}
 80035d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035d6:	f3bf 8f6f 	isb	sy
}
 80035da:	bf00      	nop
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	e000e100 	.word	0xe000e100

080035ec <__NVIC_SetPriority>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	db0a      	blt.n	8003616 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	490c      	ldr	r1, [pc, #48]	; (8003638 <__NVIC_SetPriority+0x4c>)
 8003606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800360a:	0112      	lsls	r2, r2, #4
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	440b      	add	r3, r1
 8003610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003614:	e00a      	b.n	800362c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4908      	ldr	r1, [pc, #32]	; (800363c <__NVIC_SetPriority+0x50>)
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	3b04      	subs	r3, #4
 8003624:	0112      	lsls	r2, r2, #4
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	440b      	add	r3, r1
 800362a:	761a      	strb	r2, [r3, #24]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000e100 	.word	0xe000e100
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8003640:	b5b0      	push	{r4, r5, r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4618      	mov	r0, r3
 800364c:	f010 fe9b 	bl	8014386 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003650:	687d      	ldr	r5, [r7, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3360      	adds	r3, #96	; 0x60
 8003658:	681c      	ldr	r4, [r3, #0]
 800365a:	f013 fdf9 	bl	8017250 <_ZN8touchgfx11Application11getInstanceEv>
 800365e:	4603      	mov	r3, r0
 8003660:	4619      	mov	r1, r3
 8003662:	4628      	mov	r0, r5
 8003664:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3384      	adds	r3, #132	; 0x84
 800366e:	681c      	ldr	r4, [r3, #0]
 8003670:	2300      	movs	r3, #0
 8003672:	4a04      	ldr	r2, [pc, #16]	; (8003684 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003674:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003678:	47a0      	blx	r4
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bdb0      	pop	{r4, r5, r7, pc}
 8003682:	bf00      	nop
 8003684:	d0200000 	.word	0xd0200000

08003688 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8003690:	2109      	movs	r1, #9
 8003692:	205a      	movs	r0, #90	; 0x5a
 8003694:	f7ff ffaa 	bl	80035ec <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8003698:	2109      	movs	r1, #9
 800369a:	2058      	movs	r0, #88	; 0x58
 800369c:	f7ff ffa6 	bl	80035ec <__NVIC_SetPriority>
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80036b0:	205a      	movs	r0, #90	; 0x5a
 80036b2:	f7ff ff59 	bl	8003568 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80036b6:	2058      	movs	r0, #88	; 0x58
 80036b8:	f7ff ff56 	bl	8003568 <__NVIC_EnableIRQ>
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80036cc:	205a      	movs	r0, #90	; 0x5a
 80036ce:	f7ff ff69 	bl	80035a4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80036d2:	2058      	movs	r0, #88	; 0x58
 80036d4:	f7ff ff66 	bl	80035a4 <__NVIC_DisableIRQ>
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80036fa:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800370e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003712:	881a      	ldrh	r2, [r3, #0]
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800371a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	50001000 	.word	0x50001000
 8003734:	24001594 	.word	0x24001594
 8003738:	24001596 	.word	0x24001596

0800373c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4618      	mov	r0, r3
 8003748:	f010 fe04 	bl	8014354 <_ZN8touchgfx3HAL10beginFrameEv>
 800374c:	4603      	mov	r3, r0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4618      	mov	r0, r3
 8003762:	f010 fe03 	bl	801436c <_ZN8touchgfx3HAL8endFrameEv>

}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	50001084 	.word	0x50001084

0800378c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8003796:	4a06      	ldr	r2, [pc, #24]	; (80037b0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800379e:	2201      	movs	r2, #1
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	50001084 	.word	0x50001084
 80037b4:	50001000 	.word	0x50001000

080037b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6839      	ldr	r1, [r7, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f010 fd8d 	bl	80142e6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d03c      	beq.n	800385c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80037ea:	f3bf 8f4f 	dsb	sy
}
 80037ee:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80037f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037f6:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	0b5b      	lsrs	r3, r3, #13
 80037fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003800:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	08db      	lsrs	r3, r3, #3
 8003806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800380a:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003814:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800381a:	4912      	ldr	r1, [pc, #72]	; (8003864 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1e5a      	subs	r2, r3, #1
 8003826:	60fa      	str	r2, [r7, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d000      	beq.n	8003838 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 8003836:	e7e9      	b.n	800380c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1e5a      	subs	r2, r3, #1
 800383c:	613a      	str	r2, [r7, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d000      	beq.n	800384e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 800384c:	e7d9      	b.n	8003802 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800384e:	f3bf 8f4f 	dsb	sy
}
 8003852:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003854:	f3bf 8f6f 	isb	sy
}
 8003858:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800385a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800385c:	bf00      	nop
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	f010 fe9e 	bl	80145be <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8003882:	4603      	mov	r3, r0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003894:	4b26      	ldr	r3, [pc, #152]	; (8003930 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d03c      	beq.n	8003924 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80038aa:	4b21      	ldr	r3, [pc, #132]	; (8003930 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80038b2:	f3bf 8f4f 	dsb	sy
}
 80038b6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80038ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038be:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	0b5b      	lsrs	r3, r3, #13
 80038c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80038c8:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	08db      	lsrs	r3, r3, #3
 80038ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d2:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80038dc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038e2:	4913      	ldr	r1, [pc, #76]	; (8003930 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1e5a      	subs	r2, r3, #1
 80038ee:	60fa      	str	r2, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf14      	ite	ne
 80038f4:	2301      	movne	r3, #1
 80038f6:	2300      	moveq	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d000      	beq.n	8003900 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 80038fe:	e7e9      	b.n	80038d4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1e5a      	subs	r2, r3, #1
 8003904:	613a      	str	r2, [r7, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf14      	ite	ne
 800390a:	2301      	movne	r3, #1
 800390c:	2300      	moveq	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d000      	beq.n	8003916 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8003914:	e7d9      	b.n	80038ca <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003916:	f3bf 8f4f 	dsb	sy
}
 800391a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800391c:	f3bf 8f6f 	isb	sy
}
 8003920:	bf00      	nop
}
 8003922:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003924:	bf00      	nop
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800393c:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d03c      	beq.n	80039cc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003952:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003954:	2200      	movs	r2, #0
 8003956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800395a:	f3bf 8f4f 	dsb	sy
}
 800395e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003966:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	0b5b      	lsrs	r3, r3, #13
 800396c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003970:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	08db      	lsrs	r3, r3, #3
 8003976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800397a:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003984:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800398a:	4913      	ldr	r1, [pc, #76]	; (80039d8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1e5a      	subs	r2, r3, #1
 8003996:	60fa      	str	r2, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d000      	beq.n	80039a8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 80039a6:	e7e9      	b.n	800397c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1e5a      	subs	r2, r3, #1
 80039ac:	613a      	str	r2, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bf14      	ite	ne
 80039b2:	2301      	movne	r3, #1
 80039b4:	2300      	moveq	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d000      	beq.n	80039be <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 80039bc:	e7d9      	b.n	8003972 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80039be:	f3bf 8f4f 	dsb	sy
}
 80039c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039c4:	f3bf 8f6f 	isb	sy
}
 80039c8:	bf00      	nop
}
 80039ca:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80039cc:	bf00      	nop
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <HAL_LTDC_LineEventCallback+0x74>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <HAL_LTDC_LineEventCallback+0x78>)
 80039ea:	8812      	ldrh	r2, [r2, #0]
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d017      	beq.n	8003a2a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <HAL_LTDC_LineEventCallback+0x7c>)
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	4619      	mov	r1, r3
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f00b faab 	bl	800ef5c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003a06:	f7fe fb2f 	bl	8002068 <_ZN8touchgfx3HAL11getInstanceEv>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fd98 	bl	8003542 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003a12:	f7fe fa23 	bl	8001e5c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003a16:	f7fe fb27 	bl	8002068 <_ZN8touchgfx3HAL11getInstanceEv>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f011 faa7 	bl	8014f70 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003a22:	2000      	movs	r0, #0
 8003a24:	f7fd fef2 	bl	800180c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003a28:	e00e      	b.n	8003a48 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <HAL_LTDC_LineEventCallback+0x78>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f00b fa93 	bl	800ef5c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003a36:	2000      	movs	r0, #0
 8003a38:	f7fd ff04 	bl	8001844 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003a3c:	f7fe fb14 	bl	8002068 <_ZN8touchgfx3HAL11getInstanceEv>
 8003a40:	4603      	mov	r3, r0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fd6f 	bl	8003526 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	50001000 	.word	0x50001000
 8003a54:	24001594 	.word	0x24001594
 8003a58:	24001596 	.word	0x24001596

08003a5c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d81e      	bhi.n	8003aac <_ZN23ApplicationFontProvider7getFontEt+0x50>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003a85 	.word	0x08003a85
 8003a78:	08003a8f 	.word	0x08003a8f
 8003a7c:	08003a99 	.word	0x08003a99
 8003a80:	08003aa3 	.word	0x08003aa3
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003a84:	f003 f902 	bl	8006c8c <_ZN17TypedTextDatabase8getFontsEv>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	e00f      	b.n	8003aae <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003a8e:	f003 f8fd 	bl	8006c8c <_ZN17TypedTextDatabase8getFontsEv>
 8003a92:	4603      	mov	r3, r0
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	e00a      	b.n	8003aae <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003a98:	f003 f8f8 	bl	8006c8c <_ZN17TypedTextDatabase8getFontsEv>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	e005      	b.n	8003aae <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::MEDIUM:
        // verdana_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003aa2:	f003 f8f3 	bl	8006c8c <_ZN17TypedTextDatabase8getFontsEv>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	e000      	b.n	8003aae <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 8003aac:	2300      	movs	r3, #0
    }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop

08003ab8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003abc:	4b02      	ldr	r3, [pc, #8]	; (8003ac8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	08027c9c 	.word	0x08027c9c

08003acc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003ad0:	2301      	movs	r3, #1
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
    {
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	601a      	str	r2, [r3, #0]
    }
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	080280c4 	.word	0x080280c4

08003afc <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
    }
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ffe9 	bl	8003adc <_ZN8touchgfx4FontD1Ev>
 8003b0a:	2110      	movs	r1, #16
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f022 f894 	bl	8025c3a <_ZdlPvj>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003b1c:	b590      	push	{r4, r7, lr}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e010      	b.n	8003b54 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3308      	adds	r3, #8
 8003b40:	681c      	ldr	r4, [r3, #0]
 8003b42:	f107 030f 	add.w	r3, r7, #15
 8003b46:	f107 0210 	add.w	r2, r7, #16
 8003b4a:	8879      	ldrh	r1, [r7, #2]
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	47a0      	blx	r4
 8003b50:	6178      	str	r0, [r7, #20]
        return glyph;
 8003b52:	697b      	ldr	r3, [r7, #20]
    }
 8003b54:	4618      	mov	r0, r3
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd90      	pop	{r4, r7, pc}

08003b5c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	895b      	ldrh	r3, [r3, #10]
    }
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	899b      	ldrh	r3, [r3, #12]
    }
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	889b      	ldrh	r3, [r3, #4]
    }
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	889a      	ldrh	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	799b      	ldrb	r3, [r3, #6]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	b29b      	uxth	r3, r3
    }
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	79db      	ldrb	r3, [r3, #7]
 8003bd2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003bd6:	b2db      	uxtb	r3, r3
    }
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	79db      	ldrb	r3, [r3, #7]
 8003bf0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003bf4:	b2db      	uxtb	r3, r3
    }
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	4a05      	ldr	r2, [pc, #20]	; (8003c24 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff61 	bl	8003adc <_ZN8touchgfx4FontD1Ev>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	08029600 	.word	0x08029600

08003c28 <_ZN8touchgfx9ConstFontD0Ev>:
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ffe7 	bl	8003c04 <_ZN8touchgfx9ConstFontD1Ev>
 8003c36:	2118      	movs	r1, #24
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f021 fffe 	bl	8025c3a <_ZdlPvj>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	4a05      	ldr	r2, [pc, #20]	; (8003c68 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff ffd3 	bl	8003c04 <_ZN8touchgfx9ConstFontD1Ev>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	08027d10 	.word	0x08027d10

08003c6c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff ffe7 	bl	8003c48 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003c7a:	2128      	movs	r1, #40	; 0x28
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f021 ffdc 	bl	8025c3a <_ZdlPvj>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
    {
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
    }
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	08027cb8 	.word	0x08027cb8

08003cac <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
    }
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ffe9 	bl	8003c8c <_ZN8touchgfx9TypedTextD1Ev>
 8003cba:	2108      	movs	r1, #8
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f021 ffbc 	bl	8025c3a <_ZdlPvj>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d04:	e002      	b.n	8003d0c <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003d06:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
    }
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	2400aeec 	.word	0x2400aeec

08003d1c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8003d24:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	721a      	strb	r2, [r3, #8]
    {
    }
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	08027cec 	.word	0x08027cec

08003d48 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
    {
 8003d50:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
    }
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	08027cec 	.word	0x08027cec

08003d68 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
    }
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ffe9 	bl	8003d48 <_ZN8touchgfx10TransitionD1Ev>
 8003d76:	210c      	movs	r1, #12
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f021 ff5e 	bl	8025c3a <_ZdlPvj>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
    {
    }
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
    {
    }
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
    {
    }
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8003dcc:	f013 fa40 	bl	8017250 <_ZN8touchgfx11Application11getInstanceEv>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	3230      	adds	r2, #48	; 0x30
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	4790      	blx	r2
    }
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	605a      	str	r2, [r3, #4]
    }
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f013 fa8a 	bl	8017324 <_ZN8touchgfx11ApplicationC1Ev>
 8003e10:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8003e2a:	6013      	str	r3, [r2, #0]
    }
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	08027b18 	.word	0x08027b18
 8003e3c:	2400af38 	.word	0x2400af38

08003e40 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	601a      	str	r2, [r3, #0]
    }
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	721a      	strb	r2, [r3, #8]
    }
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	605a      	str	r2, [r3, #4]
    }
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff ffac 	bl	8003e00 <_ZN8touchgfx14MVPApplicationC1Ev>
 8003ea8:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f89f 	bl	8003ff8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003eca:	f7fe f8cd 	bl	8002068 <_ZN8touchgfx3HAL11getInstanceEv>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	3208      	adds	r2, #8
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8003edc:	2000      	movs	r0, #0
 8003ede:	f002 fe5d 	bl	8006b9c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003ee2:	f7ff feff 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f01a fd62 	bl	801e9b2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	08027abc 	.word	0x08027abc

08003efc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ffe9 	bl	8003efc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	3308      	adds	r3, #8
 8003f38:	3208      	adds	r2, #8
 8003f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b089      	sub	sp, #36	; 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	f107 0008 	add.w	r0, r7, #8
 8003f66:	f107 0318 	add.w	r3, r7, #24
 8003f6a:	cb0c      	ldmia	r3, {r2, r3}
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	f000 f85f 	bl	8004030 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8003f72:	f107 0308 	add.w	r3, r7, #8
 8003f76:	4619      	mov	r1, r3
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f7ff ffcb 	bl	8003f14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8003f7e:	f107 0308 	add.w	r3, r7, #8
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff f982 	bl	800328c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8003f94:	bf00      	nop
 8003f96:	3724      	adds	r7, #36	; 0x24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd90      	pop	{r4, r7, pc}
 8003f9c:	08003fa1 	.word	0x08003fa1

08003fa0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8003fc0:	4804      	ldr	r0, [pc, #16]	; (8003fd4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8003fc2:	f000 f867 	bl	8004094 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	2400af2c 	.word	0x2400af2c
 8003fd4:	2400af28 	.word	0x2400af28

08003fd8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	08027b5c 	.word	0x08027b5c

08003ff8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff ffe8 	bl	8003fd8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004008:	4a08      	ldr	r2, [pc, #32]	; (800402c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	605a      	str	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	60da      	str	r2, [r3, #12]
    }
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	08027b00 	.word	0x08027b00

08004030 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4639      	mov	r1, r7
 800403c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ffc8 	bl	8003fd8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004048:	4a08      	ldr	r2, [pc, #32]	; (800406c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3308      	adds	r3, #8
 8004058:	463a      	mov	r2, r7
 800405a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800405e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	08027b00 	.word	0x08027b00

08004070 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fe4e 	bl	8003d1c <_ZN8touchgfx10TransitionC1Ev>
 8004080:	4a03      	ldr	r2, [pc, #12]	; (8004090 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	08027cc8 	.word	0x08027cc8

08004094 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b08f      	sub	sp, #60	; 0x3c
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3320      	adds	r3, #32
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4610      	mov	r0, r2
 80040b2:	4798      	blx	r3
 80040b4:	4603      	mov	r3, r0
 80040b6:	f240 5263 	movw	r2, #1379	; 0x563
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d805      	bhi.n	80040ca <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80040be:	4b7f      	ldr	r3, [pc, #508]	; (80042bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80040c0:	4a7f      	ldr	r2, [pc, #508]	; (80042c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80040c2:	21a3      	movs	r1, #163	; 0xa3
 80040c4:	487f      	ldr	r0, [pc, #508]	; (80042c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80040c6:	f021 fde7 	bl	8025c98 <__assert_func>
 80040ca:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3320      	adds	r3, #32
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4610      	mov	r0, r2
 80040dc:	4798      	blx	r3
 80040de:	4603      	mov	r3, r0
 80040e0:	2b0f      	cmp	r3, #15
 80040e2:	d805      	bhi.n	80040f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80040e4:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80040e6:	4a76      	ldr	r2, [pc, #472]	; (80042c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80040e8:	21a4      	movs	r1, #164	; 0xa4
 80040ea:	4876      	ldr	r0, [pc, #472]	; (80042c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80040ec:	f021 fdd4 	bl	8025c98 <__assert_func>
 80040f0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3320      	adds	r3, #32
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4610      	mov	r0, r2
 8004102:	4798      	blx	r3
 8004104:	4603      	mov	r3, r0
 8004106:	2b0b      	cmp	r3, #11
 8004108:	d805      	bhi.n	8004116 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800410a:	4b70      	ldr	r3, [pc, #448]	; (80042cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800410c:	4a6c      	ldr	r2, [pc, #432]	; (80042c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800410e:	21a5      	movs	r1, #165	; 0xa5
 8004110:	486c      	ldr	r0, [pc, #432]	; (80042c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004112:	f021 fdc1 	bl	8025c98 <__assert_func>
 8004116:	bf00      	nop
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004124:	f013 f894 	bl	8017250 <_ZN8touchgfx11Application11getInstanceEv>
 8004128:	4603      	mov	r3, r0
 800412a:	4618      	mov	r0, r3
 800412c:	f013 f8de 	bl	80172ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4610      	mov	r0, r2
 8004148:	4798      	blx	r3
    if (*currentTrans)
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4610      	mov	r0, r2
 8004160:	4798      	blx	r3
    if (*currentScreen)
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4610      	mov	r0, r2
 800417a:	4798      	blx	r3
    if (*currentPresenter)
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3304      	adds	r3, #4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4610      	mov	r0, r2
 8004194:	4798      	blx	r3
    if (*currentScreen)
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4610      	mov	r0, r2
 80041ac:	4798      	blx	r3
    if (*currentPresenter)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3308      	adds	r3, #8
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4610      	mov	r0, r2
 80041c6:	4798      	blx	r3
}
 80041c8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 f87d 	bl	80042d0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4619      	mov	r1, r3
 80041da:	200c      	movs	r0, #12
 80041dc:	f7ff fd76 	bl	8003ccc <_ZnwjPv>
 80041e0:	4604      	mov	r4, r0
 80041e2:	4620      	mov	r0, r4
 80041e4:	f7ff ff44 	bl	8004070 <_ZN8touchgfx12NoTransitionC1Ev>
 80041e8:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f880 	bl	80042f6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80041f6:	4603      	mov	r3, r0
 80041f8:	4619      	mov	r1, r3
 80041fa:	f240 5064 	movw	r0, #1380	; 0x564
 80041fe:	f7ff fd65 	bl	8003ccc <_ZnwjPv>
 8004202:	4604      	mov	r4, r0
 8004204:	4620      	mov	r0, r4
 8004206:	f002 fead 	bl	8006f64 <_ZN11Screen1ViewC1Ev>
 800420a:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f882 	bl	800431c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004218:	4603      	mov	r3, r0
 800421a:	4619      	mov	r1, r3
 800421c:	2010      	movs	r0, #16
 800421e:	f7ff fd55 	bl	8003ccc <_ZnwjPv>
 8004222:	4604      	mov	r4, r0
 8004224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004226:	4620      	mov	r0, r4
 8004228:	f002 fe44 	bl	8006eb4 <_ZN16Screen1PresenterC1ER11Screen1View>
 800422c:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004232:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004238:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	3304      	adds	r3, #4
 800424a:	e000      	b.n	800424e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800424c:	2300      	movs	r3, #0
 800424e:	4619      	mov	r1, r3
 8004250:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004252:	f7ff fdf5 	bl	8003e40 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	3304      	adds	r3, #4
 800425a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fe0a 	bl	8003e76 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004266:	4618      	mov	r0, r3
 8004268:	f000 f86b 	bl	8004342 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69f8      	ldr	r0, [r7, #28]
 8004282:	4798      	blx	r3
    newPresenter->activate();
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69b8      	ldr	r0, [r7, #24]
 800428c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800428e:	6979      	ldr	r1, [r7, #20]
 8004290:	69f8      	ldr	r0, [r7, #28]
 8004292:	f014 fbd5 	bl	8018a40 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3310      	adds	r3, #16
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	4798      	blx	r3
    newTransition->invalidate();
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3314      	adds	r3, #20
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6978      	ldr	r0, [r7, #20]
 80042ac:	4798      	blx	r3
}
 80042ae:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	373c      	adds	r7, #60	; 0x3c
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd90      	pop	{r4, r7, pc}
 80042ba:	bf00      	nop
 80042bc:	080271b0 	.word	0x080271b0
 80042c0:	08027240 	.word	0x08027240
 80042c4:	08027344 	.word	0x08027344
 80042c8:	0802739c 	.word	0x0802739c
 80042cc:	08027440 	.word	0x08027440

080042d0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3324      	adds	r3, #36	; 0x24
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	887a      	ldrh	r2, [r7, #2]
 80042e6:	4611      	mov	r1, r2
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
 80042ec:	4603      	mov	r3, r0
    }
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	460b      	mov	r3, r1
 8004300:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3324      	adds	r3, #36	; 0x24
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	887a      	ldrh	r2, [r7, #2]
 800430c:	4611      	mov	r1, r2
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	4798      	blx	r3
 8004312:	4603      	mov	r3, r0
    }
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3324      	adds	r3, #36	; 0x24
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	887a      	ldrh	r2, [r7, #2]
 8004332:	4611      	mov	r1, r2
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4798      	blx	r3
 8004338:	4603      	mov	r3, r0
    }
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <_ZN8touchgfx12NoTransitionD1Ev>:
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	4a05      	ldr	r2, [pc, #20]	; (8004380 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fce9 	bl	8003d48 <_ZN8touchgfx10TransitionD1Ev>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	08027cc8 	.word	0x08027cc8

08004384 <_ZN8touchgfx12NoTransitionD0Ev>:
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ffe7 	bl	8004360 <_ZN8touchgfx12NoTransitionD1Ev>
 8004392:	210c      	movs	r1, #12
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f021 fc50 	bl	8025c3a <_ZdlPvj>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
    }
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08c      	sub	sp, #48	; 0x30
 80043d8:	af08      	add	r7, sp, #32
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4611      	mov	r1, r2
 80043e0:	461a      	mov	r2, r3
 80043e2:	460b      	mov	r3, r1
 80043e4:	80fb      	strh	r3, [r7, #6]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	88b9      	ldrh	r1, [r7, #4]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80043f2:	9306      	str	r3, [sp, #24]
 80043f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80043f6:	9305      	str	r3, [sp, #20]
 80043f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043fc:	9304      	str	r3, [sp, #16]
 80043fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004402:	9303      	str	r3, [sp, #12]
 8004404:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004408:	9302      	str	r3, [sp, #8]
 800440a:	7f3b      	ldrb	r3, [r7, #28]
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	7e3b      	ldrb	r3, [r7, #24]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	460b      	mov	r3, r1
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	f013 ff8f 	bl	8018338 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800441a:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004424:	619a      	str	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442a:	61da      	str	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004430:	621a      	str	r2, [r3, #32]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004436:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	08027d10 	.word	0x08027d10

08004448 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	889b      	ldrh	r3, [r3, #4]
 800445c:	0adb      	lsrs	r3, r3, #11
 800445e:	b29b      	uxth	r3, r3
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4413      	add	r3, r2
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4413      	add	r3, r2
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800447a:	b480      	push	{r7}
 800447c:	b089      	sub	sp, #36	; 0x24
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	460b      	mov	r3, r1
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	7b1b      	ldrb	r3, [r3, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8004496:	2300      	movs	r3, #0
 8004498:	e030      	b.n	80044fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	7b5b      	ldrb	r3, [r3, #13]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	b21b      	sxth	r3, r3
 80044aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044ae:	b219      	sxth	r1, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	7adb      	ldrb	r3, [r3, #11]
 80044b4:	b21b      	sxth	r3, r3
 80044b6:	430b      	orrs	r3, r1
 80044b8:	b21b      	sxth	r3, r3
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	7b1b      	ldrb	r3, [r3, #12]
 80044c6:	837b      	strh	r3, [r7, #26]
 80044c8:	8b7b      	ldrh	r3, [r7, #26]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d015      	beq.n	80044fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	897a      	ldrh	r2, [r7, #10]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d103      	bne.n	80044e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80044de:	e00d      	b.n	80044fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	897a      	ldrh	r2, [r7, #10]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d306      	bcc.n	80044f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80044ea:	8b7b      	ldrh	r3, [r7, #26]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	837b      	strh	r3, [r7, #26]
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3304      	adds	r3, #4
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	e7e7      	b.n	80044c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80044f8:	bf00      	nop
        }
    }
    return 0;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3724      	adds	r7, #36	; 0x24
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
        : color(col)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	601a      	str	r2, [r3, #0]
    }
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	791b      	ldrb	r3, [r3, #4]
    }
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8004548:	4a14      	ldr	r2, [pc, #80]	; (800459c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe f8e4 	bl	8002720 <_ZN8touchgfx4RectC1Ev>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	330c      	adds	r3, #12
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe f8df 	bl	8002720 <_ZN8touchgfx4RectC1Ev>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	615a      	str	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	619a      	str	r2, [r3, #24]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	61da      	str	r2, [r3, #28]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	841a      	strh	r2, [r3, #32]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	845a      	strh	r2, [r3, #34]	; 0x22
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	0802959c 	.word	0x0802959c

080045a0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
    {
 80045a8:	4a04      	ldr	r2, [pc, #16]	; (80045bc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	601a      	str	r2, [r3, #0]
    }
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	0802959c 	.word	0x0802959c

080045c0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
    }
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ffe9 	bl	80045a0 <_ZN8touchgfx8DrawableD1Ev>
 80045ce:	2128      	movs	r1, #40	; 0x28
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f021 fb32 	bl	8025c3a <_ZdlPvj>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4618      	mov	r0, r3
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80045e8:	2300      	movs	r3, #0
    }
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	4608      	mov	r0, r1
 8004600:	4611      	mov	r1, r2
 8004602:	461a      	mov	r2, r3
 8004604:	4603      	mov	r3, r0
 8004606:	817b      	strh	r3, [r7, #10]
 8004608:	460b      	mov	r3, r1
 800460a:	813b      	strh	r3, [r7, #8]
 800460c:	4613      	mov	r3, r2
 800460e:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8004610:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004614:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004618:	4619      	mov	r1, r3
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f844 	bl	80046a8 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8004620:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004628:	4619      	mov	r1, r3
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f898 	bl	8004760 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	887a      	ldrh	r2, [r7, #2]
 800467c:	809a      	strh	r2, [r3, #4]
    }
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	887a      	ldrh	r2, [r7, #2]
 800469a:	80da      	strh	r2, [r3, #6]
    }
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	807b      	strh	r3, [r7, #2]
 80046b4:	4613      	mov	r3, r2
 80046b6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	332c      	adds	r3, #44	; 0x2c
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80046c4:	4611      	mov	r1, r2
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	4798      	blx	r3
        setY(y);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3330      	adds	r3, #48	; 0x30
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80046d6:	4611      	mov	r1, r2
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
    }
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	887a      	ldrh	r2, [r7, #2]
 80046f4:	811a      	strh	r2, [r3, #8]
    }
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	460b      	mov	r3, r1
 800470c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	887a      	ldrh	r2, [r7, #2]
 8004712:	815a      	strh	r2, [r3, #10]
    }
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
    {
    }
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
    {
    }
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
    {
    }
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
 800476c:	4613      	mov	r3, r2
 800476e:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3334      	adds	r3, #52	; 0x34
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800477c:	4611      	mov	r1, r2
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
        setHeight(height);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3338      	adds	r3, #56	; 0x38
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800478e:	4611      	mov	r1, r2
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	4798      	blx	r3
    }
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>:
     *
     * @param  drawable The Drawable to copy the width and height from.
     *
     * @see setWidthHeight(int16_t,int16_t)
     */
    void setWidthHeight(const Drawable& drawable)
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
    {
        setWidthHeight(drawable.getWidth(), drawable.getHeight());
 80047a6:	6838      	ldr	r0, [r7, #0]
 80047a8:	f7ff ff46 	bl	8004638 <_ZNK8touchgfx8Drawable8getWidthEv>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461c      	mov	r4, r3
 80047b0:	6838      	ldr	r0, [r7, #0]
 80047b2:	f7ff ff4e 	bl	8004652 <_ZNK8touchgfx8Drawable9getHeightEv>
 80047b6:	4603      	mov	r3, r0
 80047b8:	461a      	mov	r2, r3
 80047ba:	4621      	mov	r1, r4
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff ffcf 	bl	8004760 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd90      	pop	{r4, r7, pc}

080047ca <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
    {
    }
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
    {
    }
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @param  vis true if this Drawable should be visible. By default, drawables are visible
     *             unless this function has been called with false as argument.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setVisible(bool vis)
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	807b      	strh	r3, [r7, #2]
 8004874:	4613      	mov	r3, r2
 8004876:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3350      	adds	r3, #80	; 0x50
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	8879      	ldrh	r1, [r7, #2]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004888:	b292      	uxth	r2, r2
 800488a:	1a8a      	subs	r2, r1, r2
 800488c:	b292      	uxth	r2, r2
 800488e:	b210      	sxth	r0, r2
 8004890:	8839      	ldrh	r1, [r7, #0]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004898:	b292      	uxth	r2, r2
 800489a:	1a8a      	subs	r2, r1, r2
 800489c:	b292      	uxth	r2, r2
 800489e:	b212      	sxth	r2, r2
 80048a0:	4601      	mov	r1, r0
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
    }
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048bc:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048c4:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048cc:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff ffe1 	bl	80048ae <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]
    }
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fe16 	bl	8004540 <_ZN8touchgfx8DrawableC1Ev>
 8004914:	4a05      	ldr	r2, [pc, #20]	; (800492c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	080284f0 	.word	0x080284f0

08004930 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
    {
 8004950:	4a06      	ldr	r2, [pc, #24]	; (800496c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f8f4 	bl	8004b48 <_ZN8touchgfx9ContainerD1Ev>
    }
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	0802966c 	.word	0x0802966c

08004970 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
    }
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff ffe5 	bl	8004948 <_ZN8touchgfx6ScreenD1Ev>
 800497e:	213c      	movs	r1, #60	; 0x3c
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f021 f95a 	bl	8025c3a <_ZdlPvj>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
    {
    }
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
    {
    }
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
    {
    }
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
    {
    }
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
    {
    }
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3304      	adds	r3, #4
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f00e fbc9 	bl	80131a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	607b      	str	r3, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	817b      	strh	r3, [r7, #10]
 8004a24:	4613      	mov	r3, r2
 8004a26:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff ff02 	bl	8004834 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff ff08 	bl	800484e <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]
        }
    }
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff fd6a 	bl	8004540 <_ZN8touchgfx8DrawableC1Ev>
 8004a6c:	4a03      	ldr	r2, [pc, #12]	; (8004a7c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	08028060 	.word	0x08028060

08004a80 <_ZN8touchgfx6WidgetD1Ev>:
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fd85 	bl	80045a0 <_ZN8touchgfx8DrawableD1Ev>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	08028060 	.word	0x08028060

08004aa4 <_ZN8touchgfx6WidgetD0Ev>:
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ffe7 	bl	8004a80 <_ZN8touchgfx6WidgetD1Ev>
 8004ab2:	2128      	movs	r1, #40	; 0x28
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f021 f8c0 	bl	8025c3a <_ZdlPvj>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	2326      	movs	r3, #38	; 0x26
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f021 f96b 	bl	8025db0 <memset>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff ffbd 	bl	8004a5c <_ZN8touchgfx6WidgetC1Ev>
 8004ae2:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	22ff      	movs	r2, #255	; 0xff
 8004aec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3328      	adds	r3, #40	; 0x28
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fd06 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	080290b8 	.word	0x080290b8

08004b0c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	4a05      	ldr	r2, [pc, #20]	; (8004b68 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff fd21 	bl	80045a0 <_ZN8touchgfx8DrawableD1Ev>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	080284f0 	.word	0x080284f0

08004b6c <_ZN8touchgfx9ContainerD0Ev>:
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff ffe7 	bl	8004b48 <_ZN8touchgfx9ContainerD1Ev>
 8004b7a:	212c      	movs	r1, #44	; 0x2c
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f021 f85c 	bl	8025c3a <_ZdlPvj>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff feb4 	bl	8004904 <_ZN8touchgfx9ContainerC1Ev>
 8004b9c:	4a0b      	ldr	r2, [pc, #44]	; (8004bcc <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	22ff      	movs	r2, #255	; 0xff
 8004bae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2101      	movs	r1, #1
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fe29 	bl	8004814 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	08027fc8 	.word	0x08027fc8

08004bd0 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3388      	adds	r3, #136	; 0x88
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4798      	blx	r3
    }
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
        alpha = newAlpha;
        handleAlphaUpdated();
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @param  callback The callback.
     *
     * @see executeAction
     */
    void setAction(GenericCallback<const AbstractButtonContainer&>& callback)
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00d      	beq.n	8004c74 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4610      	mov	r0, r2
 8004c68:	4798      	blx	r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3308      	adds	r3, #8
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4798      	blx	r3
        }
    }
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
    {
    }
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
    {
    }
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	4a05      	ldr	r2, [pc, #20]	; (8004ce0 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff fed5 	bl	8004a80 <_ZN8touchgfx6WidgetD1Ev>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	080290b8 	.word	0x080290b8

08004ce4 <_ZN8touchgfx3BoxD0Ev>:
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ffe7 	bl	8004cc0 <_ZN8touchgfx3BoxD1Ev>
 8004cf2:	212c      	movs	r1, #44	; 0x2c
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f020 ffa0 	bl	8025c3a <_ZdlPvj>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fed8 	bl	8004ac4 <_ZN8touchgfx3BoxC1Ev>
 8004d14:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	332c      	adds	r3, #44	; 0x2c
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fbf1 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	080291c4 	.word	0x080291c4

08004d3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	887a      	ldrh	r2, [r7, #2]
 8004d68:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff ff38 	bl	8004bf8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8004d8c:	6838      	ldr	r0, [r7, #0]
 8004d8e:	f7ff fbca 	bl	8004526 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf0c      	ite	eq
 8004d98:	2301      	moveq	r3, #1
 8004d9a:	2300      	movne	r3, #0
 8004d9c:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004d9e:	7bbb      	ldrb	r3, [r7, #14]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	f083 0301 	eor.w	r3, r3, #1
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d108      	bne.n	8004dc2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8004db0:	7bbb      	ldrb	r3, [r7, #14]
 8004db2:	f083 0301 	eor.w	r3, r3, #1
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00f      	beq.n	8004ddc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00c      	beq.n	8004ddc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7bba      	ldrb	r2, [r7, #14]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff ff01 	bl	8004bd0 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3314      	adds	r3, #20
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 8004de2:	6838      	ldr	r0, [r7, #0]
 8004de4:	f7ff fb9f 	bl	8004526 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 8004df2:	2300      	movs	r3, #0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d006      	beq.n	8004e06 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3384      	adds	r3, #132	; 0x84
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4610      	mov	r0, r2
 8004e04:	4798      	blx	r3
        }
    }
 8004e06:	bf00      	nop
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fe91 	bl	8004b48 <_ZN8touchgfx9ContainerD1Ev>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	08027fc8 	.word	0x08027fc8

08004e34 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff ffe7 	bl	8004e10 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8004e42:	2134      	movs	r1, #52	; 0x34
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f020 fef8 	bl	8025c3a <_ZdlPvj>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8004e60:	4a06      	ldr	r2, [pc, #24]	; (8004e7c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	887a      	ldrh	r2, [r7, #2]
 8004e6a:	809a      	strh	r2, [r3, #4]
    }
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	08027cb8 	.word	0x08027cb8

08004e80 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	2326      	movs	r3, #38	; 0x26
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2100      	movs	r1, #0
 8004e92:	f020 ff8d 	bl	8025db0 <memset>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff fddf 	bl	8004a5c <_ZN8touchgfx6WidgetC1Ev>
 8004e9e:	4a14      	ldr	r2, [pc, #80]	; (8004ef0 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3328      	adds	r3, #40	; 0x28
 8004ea8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff ffd1 	bl	8004e54 <_ZN8touchgfx9TypedTextC1Et>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3330      	adds	r3, #48	; 0x30
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fb25 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	869a      	strh	r2, [r3, #52]	; 0x34
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	22ff      	movs	r2, #255	; 0xff
 8004ec8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	08029010 	.word	0x08029010

08004ef4 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3328      	adds	r3, #40	; 0x28
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe feb0 	bl	8003c8c <_ZN8touchgfx9TypedTextD1Ev>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fda6 	bl	8004a80 <_ZN8touchgfx6WidgetD1Ev>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	08029010 	.word	0x08029010

08004f44 <_ZN8touchgfx8TextAreaD0Ev>:
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ffe1 	bl	8004f14 <_ZN8touchgfx8TextAreaD1Ev>
 8004f52:	213c      	movs	r1, #60	; 0x3c
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f020 fe70 	bl	8025c3a <_ZdlPvj>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff ff86 	bl	8004e80 <_ZN8touchgfx8TextAreaC1Ev>
 8004f74:	4a05      	ldr	r2, [pc, #20]	; (8004f8c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	0802911c 	.word	0x0802911c

08004f90 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fcd1 	bl	8004948 <_ZN8touchgfx6ScreenD1Ev>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	08027ee4 	.word	0x08027ee4

08004fb4 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ffe7 	bl	8004f90 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8004fc2:	2140      	movs	r1, #64	; 0x40
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f020 fe38 	bl	8025c3a <_ZdlPvj>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	4a2b      	ldr	r2, [pc, #172]	; (800508c <_ZN15Screen1ViewBaseD1Ev+0xb8>)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 fa13 	bl	8006414 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 faa5 	bl	8006544 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8005000:	4618      	mov	r0, r3
 8005002:	f001 fa29 	bl	8006458 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800500c:	4618      	mov	r0, r3
 800500e:	f001 fa23 	bl	8006458 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8005018:	4618      	mov	r0, r3
 800501a:	f001 fa45 	bl	80064a8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fd8f 	bl	8004b48 <_ZN8touchgfx9ContainerD1Ev>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff ff6f 	bl	8004f14 <_ZN8touchgfx8TextAreaD1Ev>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800503c:	4618      	mov	r0, r3
 800503e:	f001 fa55 	bl	80064ec <_ZN8touchgfx19ScrollableContainerD1Ev>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005048:	4618      	mov	r0, r3
 800504a:	f001 fa2d 	bl	80064a8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005054:	4618      	mov	r0, r3
 8005056:	f001 f9ff 	bl	8006458 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3398      	adds	r3, #152	; 0x98
 800505e:	4618      	mov	r0, r3
 8005060:	f001 f9fa 	bl	8006458 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	336c      	adds	r3, #108	; 0x6c
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fe29 	bl	8004cc0 <_ZN8touchgfx3BoxD1Ev>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3340      	adds	r3, #64	; 0x40
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff fe24 	bl	8004cc0 <_ZN8touchgfx3BoxD1Ev>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff ff88 	bl	8004f90 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	08027d68 	.word	0x08027d68

08005090 <_ZN15Screen1ViewBaseD0Ev>:
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ff9b 	bl	8004fd4 <_ZN15Screen1ViewBaseD1Ev>
 800509e:	f240 5164 	movw	r1, #1380	; 0x564
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f020 fdc9 	bl	8025c3a <_ZdlPvj>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 80050b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b8:	b0d6      	sub	sp, #344	; 0x158
 80050ba:	af02      	add	r7, sp, #8
 80050bc:	1d3b      	adds	r3, r7, #4
 80050be:	6018      	str	r0, [r3, #0]
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
 80050c0:	1d3b      	adds	r3, r7, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 ff89 	bl	8005fdc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 80050ca:	4aeb      	ldr	r2, [pc, #940]	; (8005478 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 80050cc:	1d3b      	adds	r3, r7, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	1d3b      	adds	r3, r7, #4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3340      	adds	r3, #64	; 0x40
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fcf3 	bl	8004ac4 <_ZN8touchgfx3BoxC1Ev>
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	336c      	adds	r3, #108	; 0x6c
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff fced 	bl	8004ac4 <_ZN8touchgfx3BoxC1Ev>
 80050ea:	1d3b      	adds	r3, r7, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3398      	adds	r3, #152	; 0x98
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 ffd3 	bl	800609c <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 ffcc 	bl	800609c <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8005104:	1d3b      	adds	r3, r7, #4
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff fdf9 	bl	8004d04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005112:	1d3b      	adds	r3, r7, #4
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800511a:	4618      	mov	r0, r3
 800511c:	f00e fdae 	bl	8013c7c <_ZN8touchgfx19ScrollableContainerC1Ev>
 8005120:	1d3b      	adds	r3, r7, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fea9 	bl	8004e80 <_ZN8touchgfx8TextAreaC1Ev>
 800512e:	1d3b      	adds	r3, r7, #4
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fbe4 	bl	8004904 <_ZN8touchgfx9ContainerC1Ev>
 800513c:	1d3b      	adds	r3, r7, #4
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fddd 	bl	8004d04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800514a:	1d3b      	adds	r3, r7, #4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8005152:	4618      	mov	r0, r3
 8005154:	f000 ffa2 	bl	800609c <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8005160:	4618      	mov	r0, r3
 8005162:	f000 ff9b 	bl	800609c <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8005166:	1d3b      	adds	r3, r7, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f203 5314 	addw	r3, r3, #1300	; 0x514
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff fef8 	bl	8004f64 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8005174:	1d3b      	adds	r3, r7, #4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f203 5054 	addw	r0, r3, #1364	; 0x554
 800517c:	f107 0314 	add.w	r3, r7, #20
 8005180:	4abe      	ldr	r2, [pc, #760]	; (800547c <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	2200      	movs	r2, #0
 800518a:	605a      	str	r2, [r3, #4]
 800518c:	f107 0314 	add.w	r3, r7, #20
 8005190:	1d39      	adds	r1, r7, #4
 8005192:	cb0c      	ldmia	r3, {r2, r3}
 8005194:	6809      	ldr	r1, [r1, #0]
 8005196:	f000 ffb9 	bl	800610c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 800519a:	1d3b      	adds	r3, r7, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80051a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80051ac:	2200      	movs	r2, #0
 80051ae:	2100      	movs	r1, #0
 80051b0:	f7ff fa21 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 80051c2:	2300      	movs	r3, #0
 80051c4:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80051ce:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	461a      	mov	r2, r3
 80051d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	431a      	orrs	r2, r3
 80051de:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80051e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80051ec:	4611      	mov	r1, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff f98a 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 80051f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051f8:	4619      	mov	r1, r3
 80051fa:	4620      	mov	r0, r4
 80051fc:	f7ff fc86 	bl	8004b0c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    background.setPosition(0, 0, 480, 272);
 8005200:	1d3b      	adds	r3, r7, #4
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8005208:	f44f 7388 	mov.w	r3, #272	; 0x110
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005212:	2200      	movs	r2, #0
 8005214:	2100      	movs	r1, #0
 8005216:	f7ff f9ee 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFromRGB(255, 163, 59));
 800521a:	1d3b      	adds	r3, r7, #4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005222:	23ff      	movs	r3, #255	; 0xff
 8005224:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005228:	23a3      	movs	r3, #163	; 0xa3
 800522a:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 800522e:	233b      	movs	r3, #59	; 0x3b
 8005230:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8005234:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	461a      	mov	r2, r3
 800523c:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	431a      	orrs	r2, r3
 8005244:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8005248:	4313      	orrs	r3, r2
 800524a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800524e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005252:	4611      	mov	r1, r2
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff f957 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 800525a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800525e:	4619      	mov	r1, r3
 8005260:	4620      	mov	r0, r4
 8005262:	f7ff fc53 	bl	8004b0c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    txButton.setBoxWithBorderPosition(0, 0, 69, 48);
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800526e:	2330      	movs	r3, #48	; 0x30
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	2345      	movs	r3, #69	; 0x45
 8005274:	2200      	movs	r2, #0
 8005276:	2100      	movs	r1, #0
 8005278:	f000 ff68 	bl	800614c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    txButton.setBorderSize(5);
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3398      	adds	r3, #152	; 0x98
 8005282:	2105      	movs	r1, #5
 8005284:	4618      	mov	r0, r3
 8005286:	f000 ff81 	bl	800618c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    txButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8005292:	2300      	movs	r3, #0
 8005294:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8005298:	2366      	movs	r3, #102	; 0x66
 800529a:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 800529e:	2399      	movs	r3, #153	; 0x99
 80052a0:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80052a4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80052a8:	041b      	lsls	r3, r3, #16
 80052aa:	461a      	mov	r2, r3
 80052ac:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	431a      	orrs	r2, r3
 80052b4:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80052be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80052c2:	4611      	mov	r1, r2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff f91f 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 80052ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052ce:	461d      	mov	r5, r3
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 80052d6:	2399      	movs	r3, #153	; 0x99
 80052d8:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 80052dc:	23cc      	movs	r3, #204	; 0xcc
 80052de:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80052e2:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	461a      	mov	r2, r3
 80052ea:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	431a      	orrs	r2, r3
 80052f2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80052fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005300:	4611      	mov	r1, r2
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff f900 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005308:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800530c:	461e      	mov	r6, r3
 800530e:	2300      	movs	r3, #0
 8005310:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 8005314:	2333      	movs	r3, #51	; 0x33
 8005316:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800531a:	2366      	movs	r3, #102	; 0x66
 800531c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8005320:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8005324:	041b      	lsls	r3, r3, #16
 8005326:	461a      	mov	r2, r3
 8005328:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	431a      	orrs	r2, r3
 8005330:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8005334:	4313      	orrs	r3, r2
 8005336:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800533a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff f8e1 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005346:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800534a:	4698      	mov	r8, r3
 800534c:	2333      	movs	r3, #51	; 0x33
 800534e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 8005352:	2366      	movs	r3, #102	; 0x66
 8005354:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8005358:	2399      	movs	r3, #153	; 0x99
 800535a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
 800535e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	461a      	mov	r2, r3
 8005366:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	431a      	orrs	r2, r3
 800536e:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8005372:	4313      	orrs	r3, r2
 8005374:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005378:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800537c:	4611      	mov	r1, r2
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff f8c2 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005384:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	4643      	mov	r3, r8
 800538c:	4632      	mov	r2, r6
 800538e:	4629      	mov	r1, r5
 8005390:	4620      	mov	r0, r4
 8005392:	f000 ff0d 	bl	80061b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    txButton.setText(TypedText(T___SINGLEUSE_C6V9));
 8005396:	1d3b      	adds	r3, r7, #4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800539e:	f107 031c 	add.w	r3, r7, #28
 80053a2:	2100      	movs	r1, #0
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff fd55 	bl	8004e54 <_ZN8touchgfx9TypedTextC1Et>
 80053aa:	f107 031c 	add.w	r3, r7, #28
 80053ae:	4619      	mov	r1, r3
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 ff1a 	bl	80061ea <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 80053b6:	f107 031c 	add.w	r3, r7, #28
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe fc66 	bl	8003c8c <_ZN8touchgfx9TypedTextD1Ev>
    txButton.setTextPosition(0, 11, 69, 48);
 80053c0:	1d3b      	adds	r3, r7, #4
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80053c8:	2330      	movs	r3, #48	; 0x30
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	2345      	movs	r3, #69	; 0x45
 80053ce:	220b      	movs	r2, #11
 80053d0:	2100      	movs	r1, #0
 80053d2:	f000 ff20 	bl	8006216 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    txButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80053de:	23ff      	movs	r3, #255	; 0xff
 80053e0:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 80053e4:	23ff      	movs	r3, #255	; 0xff
 80053e6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 80053ea:	23ff      	movs	r3, #255	; 0xff
 80053ec:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 80053f0:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	461a      	mov	r2, r3
 80053f8:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	431a      	orrs	r2, r3
 8005400:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8005404:	4313      	orrs	r3, r2
 8005406:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800540a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff f879 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005416:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800541a:	461d      	mov	r5, r3
 800541c:	23ff      	movs	r3, #255	; 0xff
 800541e:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
 8005422:	23ff      	movs	r3, #255	; 0xff
 8005424:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
 8005428:	23ff      	movs	r3, #255	; 0xff
 800542a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800542e:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8005432:	041b      	lsls	r3, r3, #16
 8005434:	461a      	mov	r2, r3
 8005436:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	431a      	orrs	r2, r3
 800543e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8005442:	4313      	orrs	r3, r2
 8005444:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005448:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800544c:	4611      	mov	r1, r2
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff f85a 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005454:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005458:	461a      	mov	r2, r3
 800545a:	4629      	mov	r1, r5
 800545c:	4620      	mov	r0, r4
 800545e:	f000 fefa 	bl	8006256 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    txButton.setPosition(23, 18, 69, 48);
 8005462:	1d3b      	adds	r3, r7, #4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800546a:	2330      	movs	r3, #48	; 0x30
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	2345      	movs	r3, #69	; 0x45
 8005470:	2212      	movs	r2, #18
 8005472:	2117      	movs	r1, #23
 8005474:	e004      	b.n	8005480 <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 8005476:	bf00      	nop
 8005478:	08027d68 	.word	0x08027d68
 800547c:	08005f7d 	.word	0x08005f7d
 8005480:	f7ff f8b9 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    txButton.setAction(flexButtonCallback);
 8005484:	1d3b      	adds	r3, r7, #4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800548c:	1d3b      	adds	r3, r7, #4
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f7ff fbc8 	bl	8004c2c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    rxButton.setBoxWithBorderPosition(0, 0, 69, 48);
 800549c:	1d3b      	adds	r3, r7, #4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 80054a4:	2330      	movs	r3, #48	; 0x30
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	2345      	movs	r3, #69	; 0x45
 80054aa:	2200      	movs	r2, #0
 80054ac:	2100      	movs	r1, #0
 80054ae:	f000 fe4d 	bl	800614c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    rxButton.setBorderSize(5);
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80054ba:	2105      	movs	r1, #5
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fe65 	bl	800618c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    rxButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 80054c2:	1d3b      	adds	r3, r7, #4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80054ca:	2300      	movs	r3, #0
 80054cc:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
 80054d0:	2366      	movs	r3, #102	; 0x66
 80054d2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80054d6:	2399      	movs	r3, #153	; 0x99
 80054d8:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
 80054dc:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	461a      	mov	r2, r3
 80054e4:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	431a      	orrs	r2, r3
 80054ec:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80054f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80054fa:	4611      	mov	r1, r2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff f803 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005506:	461d      	mov	r5, r3
 8005508:	2300      	movs	r3, #0
 800550a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800550e:	2399      	movs	r3, #153	; 0x99
 8005510:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 8005514:	23cc      	movs	r3, #204	; 0xcc
 8005516:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
 800551a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800551e:	041b      	lsls	r3, r3, #16
 8005520:	461a      	mov	r2, r3
 8005522:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	431a      	orrs	r2, r3
 800552a:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800552e:	4313      	orrs	r3, r2
 8005530:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005534:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe ffe4 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005544:	461e      	mov	r6, r3
 8005546:	2300      	movs	r3, #0
 8005548:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 800554c:	2333      	movs	r3, #51	; 0x33
 800554e:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8005552:	2366      	movs	r3, #102	; 0x66
 8005554:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8005558:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	461a      	mov	r2, r3
 8005560:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8005564:	021b      	lsls	r3, r3, #8
 8005566:	431a      	orrs	r2, r3
 8005568:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800556c:	4313      	orrs	r3, r2
 800556e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005572:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005576:	4611      	mov	r1, r2
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe ffc5 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 800557e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005582:	4698      	mov	r8, r3
 8005584:	2333      	movs	r3, #51	; 0x33
 8005586:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
 800558a:	2366      	movs	r3, #102	; 0x66
 800558c:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
 8005590:	2399      	movs	r3, #153	; 0x99
 8005592:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8005596:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 800559a:	041b      	lsls	r3, r3, #16
 800559c:	461a      	mov	r2, r3
 800559e:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	431a      	orrs	r2, r3
 80055a6:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80055b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80055b4:	4611      	mov	r1, r2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe ffa6 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 80055bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	4643      	mov	r3, r8
 80055c4:	4632      	mov	r2, r6
 80055c6:	4629      	mov	r1, r5
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 fdf1 	bl	80061b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    rxButton.setText(TypedText(T___SINGLEUSE_NCFE));
 80055ce:	1d3b      	adds	r3, r7, #4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80055d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055da:	2101      	movs	r1, #1
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fc39 	bl	8004e54 <_ZN8touchgfx9TypedTextC1Et>
 80055e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e6:	4619      	mov	r1, r3
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 fdfe 	bl	80061ea <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 80055ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe fb4a 	bl	8003c8c <_ZN8touchgfx9TypedTextD1Ev>
    rxButton.setTextPosition(0, 11, 69, 48);
 80055f8:	1d3b      	adds	r3, r7, #4
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 8005600:	2330      	movs	r3, #48	; 0x30
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2345      	movs	r3, #69	; 0x45
 8005606:	220b      	movs	r2, #11
 8005608:	2100      	movs	r1, #0
 800560a:	f000 fe04 	bl	8006216 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    rxButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8005616:	23ff      	movs	r3, #255	; 0xff
 8005618:	f887 30f8 	strb.w	r3, [r7, #248]	; 0xf8
 800561c:	23ff      	movs	r3, #255	; 0xff
 800561e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8005622:	23ff      	movs	r3, #255	; 0xff
 8005624:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
 8005628:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 800562c:	041b      	lsls	r3, r3, #16
 800562e:	461a      	mov	r2, r3
 8005630:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	431a      	orrs	r2, r3
 8005638:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 800563c:	4313      	orrs	r3, r2
 800563e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005642:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe ff5d 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 800564e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005652:	461d      	mov	r5, r3
 8005654:	23ff      	movs	r3, #255	; 0xff
 8005656:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 800565a:	23ff      	movs	r3, #255	; 0xff
 800565c:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 8005660:	23ff      	movs	r3, #255	; 0xff
 8005662:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
 8005666:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	461a      	mov	r2, r3
 800566e:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8005672:	021b      	lsls	r3, r3, #8
 8005674:	431a      	orrs	r2, r3
 8005676:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 800567a:	4313      	orrs	r3, r2
 800567c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005680:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005684:	4611      	mov	r1, r2
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe ff3e 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 800568c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005690:	461a      	mov	r2, r3
 8005692:	4629      	mov	r1, r5
 8005694:	4620      	mov	r0, r4
 8005696:	f000 fdde 	bl	8006256 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    rxButton.setPosition(112, 18, 69, 48);
 800569a:	1d3b      	adds	r3, r7, #4
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 80056a2:	2330      	movs	r3, #48	; 0x30
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	2345      	movs	r3, #69	; 0x45
 80056a8:	2212      	movs	r2, #18
 80056aa:	2170      	movs	r1, #112	; 0x70
 80056ac:	f7fe ffa3 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    rxButton.setAction(flexButtonCallback);
 80056b0:	1d3b      	adds	r3, r7, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f503 72aa 	add.w	r2, r3, #340	; 0x154
 80056b8:	1d3b      	adds	r3, r7, #4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f203 5354 	addw	r3, r3, #1364	; 0x554
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f7ff fab2 	bl	8004c2c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    scrollBackgroundBox.setPosition(208, 0, 272, 272);
 80056c8:	1d3b      	adds	r3, r7, #4
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f503 7004 	add.w	r0, r3, #528	; 0x210
 80056d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80056da:	2200      	movs	r2, #0
 80056dc:	21d0      	movs	r1, #208	; 0xd0
 80056de:	f7fe ff8a 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollBackgroundBox.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f503 7404 	add.w	r4, r3, #528	; 0x210
 80056ea:	23ff      	movs	r3, #255	; 0xff
 80056ec:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
 80056f0:	23ff      	movs	r3, #255	; 0xff
 80056f2:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 80056f6:	23ff      	movs	r3, #255	; 0xff
 80056f8:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80056fc:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8005700:	041b      	lsls	r3, r3, #16
 8005702:	461a      	mov	r2, r3
 8005704:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	431a      	orrs	r2, r3
 800570c:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005710:	4313      	orrs	r3, r2
 8005712:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005716:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800571a:	4611      	mov	r1, r2
 800571c:	4618      	mov	r0, r3
 800571e:	f7fe fef3 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005722:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005726:	4619      	mov	r1, r3
 8005728:	4620      	mov	r0, r4
 800572a:	f7ff f9ef 	bl	8004b0c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    scrollBackgroundBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8005736:	2300      	movs	r3, #0
 8005738:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
 800573c:	2300      	movs	r3, #0
 800573e:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
 8005742:	2300      	movs	r3, #0
 8005744:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8005748:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	461a      	mov	r2, r3
 8005750:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	431a      	orrs	r2, r3
 8005758:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800575c:	4313      	orrs	r3, r2
 800575e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005762:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005766:	4611      	mov	r1, r2
 8005768:	4618      	mov	r0, r3
 800576a:	f7fe fecd 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 800576e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005772:	4619      	mov	r1, r3
 8005774:	4620      	mov	r0, r4
 8005776:	f7ff fae1 	bl	8004d3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    scrollBackgroundBox.setBorderSize(5);
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005782:	2105      	movs	r1, #5
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fae7 	bl	8004d58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    scrollableContainer.setPosition(219, 11, 250, 250);
 800578a:	1d3b      	adds	r3, r7, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f503 7011 	add.w	r0, r3, #580	; 0x244
 8005792:	23fa      	movs	r3, #250	; 0xfa
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	23fa      	movs	r3, #250	; 0xfa
 8005798:	220b      	movs	r2, #11
 800579a:	21db      	movs	r1, #219	; 0xdb
 800579c:	f7fe ff2b 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80057a0:	1d3b      	adds	r3, r7, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f503 7411 	add.w	r4, r3, #580	; 0x244
 80057a8:	2300      	movs	r3, #0
 80057aa:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 80057ae:	2300      	movs	r3, #0
 80057b0:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 80057b4:	2300      	movs	r3, #0
 80057b6:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 80057ba:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80057be:	041b      	lsls	r3, r3, #16
 80057c0:	461a      	mov	r2, r3
 80057c2:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	431a      	orrs	r2, r3
 80057ca:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80057d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80057d8:	4611      	mov	r1, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe fe94 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 80057e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057e4:	4619      	mov	r1, r3
 80057e6:	4620      	mov	r0, r4
 80057e8:	f00e fd5c 	bl	80142a4 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>

    feedbackTextArea.setXY(0, 0);
 80057ec:	1d3b      	adds	r3, r7, #4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80057f4:	2200      	movs	r2, #0
 80057f6:	2100      	movs	r1, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe ff55 	bl	80046a8 <_ZN8touchgfx8Drawable5setXYEss>
    feedbackTextArea.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8005806:	2300      	movs	r3, #0
 8005808:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 800580c:	2300      	movs	r3, #0
 800580e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8005812:	2300      	movs	r3, #0
 8005814:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8005818:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	461a      	mov	r2, r3
 8005820:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	431a      	orrs	r2, r3
 8005828:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800582c:	4313      	orrs	r3, r2
 800582e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005832:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f7fe fe65 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 800583e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005842:	461a      	mov	r2, r3
 8005844:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8005848:	f107 0310 	add.w	r3, r7, #16
 800584c:	601a      	str	r2, [r3, #0]
        this->color = color;
 800584e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005852:	f107 0210 	add.w	r2, r7, #16
 8005856:	6812      	ldr	r2, [r2, #0]
 8005858:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800585a:	bf00      	nop
    feedbackTextArea.setLinespacing(0);
 800585c:	1d3b      	adds	r3, r7, #4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005864:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005868:	2300      	movs	r3, #0
 800586a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800586e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005872:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005876:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8005878:	bf00      	nop
    feedbackTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X7DN));
 800587a:	1d3b      	adds	r3, r7, #4
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8005882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005886:	2102      	movs	r1, #2
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff fae3 	bl	8004e54 <_ZN8touchgfx9TypedTextC1Et>
 800588e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005892:	4619      	mov	r1, r3
 8005894:	4620      	mov	r0, r4
 8005896:	f00f fec6 	bl	8015626 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800589a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe f9f4 	bl	8003c8c <_ZN8touchgfx9TypedTextD1Ev>
    scrollableContainer.add(feedbackTextArea);
 80058a4:	1d3b      	adds	r3, r7, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f503 7211 	add.w	r2, r3, #580	; 0x244
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f00d ff05 	bl	80136c6 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    scrollableContainer.setScrollbarsPermanentlyVisible();
 80058bc:	1d3b      	adds	r3, r7, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80058c4:	2101      	movs	r1, #1
 80058c6:	4618      	mov	r0, r3
 80058c8:	f00e fcf1 	bl	80142ae <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>

    txInfoContainer.setPosition(7, 77, 190, 184);
 80058cc:	1d3b      	adds	r3, r7, #4
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 80058d4:	23b8      	movs	r3, #184	; 0xb8
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	23be      	movs	r3, #190	; 0xbe
 80058da:	224d      	movs	r2, #77	; 0x4d
 80058dc:	2107      	movs	r1, #7
 80058de:	f7fe fe8a 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>

    txInfoBackgroundBox.setPosition(0, 0, 190, 184);
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f503 705a 	add.w	r0, r3, #872	; 0x368
 80058ea:	23b8      	movs	r3, #184	; 0xb8
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	23be      	movs	r3, #190	; 0xbe
 80058f0:	2200      	movs	r2, #0
 80058f2:	2100      	movs	r1, #0
 80058f4:	f7fe fe7f 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoBackgroundBox.setColor(touchgfx::Color::getColorFromRGB(255, 201, 143));
 80058f8:	1d3b      	adds	r3, r7, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f503 745a 	add.w	r4, r3, #872	; 0x368
 8005900:	23ff      	movs	r3, #255	; 0xff
 8005902:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8005906:	23c9      	movs	r3, #201	; 0xc9
 8005908:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 800590c:	238f      	movs	r3, #143	; 0x8f
 800590e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8005912:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8005916:	041b      	lsls	r3, r3, #16
 8005918:	461a      	mov	r2, r3
 800591a:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	431a      	orrs	r2, r3
 8005922:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005926:	4313      	orrs	r3, r2
 8005928:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800592c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005930:	4611      	mov	r1, r2
 8005932:	4618      	mov	r0, r3
 8005934:	f7fe fde8 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800593c:	4619      	mov	r1, r3
 800593e:	4620      	mov	r0, r4
 8005940:	f7ff f8e4 	bl	8004b0c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    txInfoBackgroundBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005944:	1d3b      	adds	r3, r7, #4
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f503 745a 	add.w	r4, r3, #872	; 0x368
 800594c:	2300      	movs	r3, #0
 800594e:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8005952:	2300      	movs	r3, #0
 8005954:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8005958:	2300      	movs	r3, #0
 800595a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800595e:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	461a      	mov	r2, r3
 8005966:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	431a      	orrs	r2, r3
 800596e:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8005972:	4313      	orrs	r3, r2
 8005974:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005978:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800597c:	4611      	mov	r1, r2
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fdc2 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005988:	4619      	mov	r1, r3
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff f9d6 	bl	8004d3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    txInfoBackgroundBox.setBorderSize(5);
 8005990:	1d3b      	adds	r3, r7, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8005998:	2105      	movs	r1, #5
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff f9dc 	bl	8004d58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    txInfoContainer.add(txInfoBackgroundBox);
 80059a0:	1d3b      	adds	r3, r7, #4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f00d fbf4 	bl	80131a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    sendValButton.setBoxWithBorderPosition(0, 0, 158, 32);
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 80059c0:	2320      	movs	r3, #32
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	239e      	movs	r3, #158	; 0x9e
 80059c6:	2200      	movs	r2, #0
 80059c8:	2100      	movs	r1, #0
 80059ca:	f000 fbbf 	bl	800614c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    sendValButton.setBorderSize(5);
 80059ce:	1d3b      	adds	r3, r7, #4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80059d6:	2105      	movs	r1, #5
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fbd7 	bl	800618c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    sendValButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 80059de:	1d3b      	adds	r3, r7, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 80059e6:	2300      	movs	r3, #0
 80059e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80059ec:	2366      	movs	r3, #102	; 0x66
 80059ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80059f2:	2399      	movs	r3, #153	; 0x99
 80059f4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80059f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059fc:	041b      	lsls	r3, r3, #16
 80059fe:	461a      	mov	r2, r3
 8005a00:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	431a      	orrs	r2, r3
 8005a08:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005a16:	4611      	mov	r1, r2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe fd75 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005a1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a20:	461d      	mov	r5, r3
 8005a22:	2300      	movs	r3, #0
 8005a24:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
 8005a28:	2399      	movs	r3, #153	; 0x99
 8005a2a:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
 8005a2e:	23cc      	movs	r3, #204	; 0xcc
 8005a30:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
 8005a34:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	431a      	orrs	r2, r3
 8005a44:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a4e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005a52:	4611      	mov	r1, r2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fe fd57 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5c:	461e      	mov	r6, r3
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
 8005a64:	2333      	movs	r3, #51	; 0x33
 8005a66:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
 8005a6a:	2366      	movs	r3, #102	; 0x66
 8005a6c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
 8005a70:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8005a74:	041b      	lsls	r3, r3, #16
 8005a76:	461a      	mov	r2, r3
 8005a78:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe fd39 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a98:	4698      	mov	r8, r3
 8005a9a:	2333      	movs	r3, #51	; 0x33
 8005a9c:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
 8005aa0:	2366      	movs	r3, #102	; 0x66
 8005aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8005aa6:	2399      	movs	r3, #153	; 0x99
 8005aa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005aac:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	431a      	orrs	r2, r3
 8005abc:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005ac6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fd1b 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	4643      	mov	r3, r8
 8005ad8:	4632      	mov	r2, r6
 8005ada:	4629      	mov	r1, r5
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 fb67 	bl	80061b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    sendValButton.setText(TypedText(T___SINGLEUSE_N3IE));
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8005aea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005aee:	2105      	movs	r1, #5
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff f9af 	bl	8004e54 <_ZN8touchgfx9TypedTextC1Et>
 8005af6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005afa:	4619      	mov	r1, r3
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fb74 	bl	80061ea <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8005b02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fe f8c0 	bl	8003c8c <_ZN8touchgfx9TypedTextD1Ev>
    sendValButton.setTextPosition(0, 6, 158, 32);
 8005b0c:	1d3b      	adds	r3, r7, #4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8005b14:	2320      	movs	r3, #32
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	239e      	movs	r3, #158	; 0x9e
 8005b1a:	2206      	movs	r2, #6
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	f000 fb7a 	bl	8006216 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    sendValButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f503 7467 	add.w	r4, r3, #924	; 0x39c
 8005b2a:	23ff      	movs	r3, #255	; 0xff
 8005b2c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
 8005b30:	23ff      	movs	r3, #255	; 0xff
 8005b32:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
 8005b36:	23ff      	movs	r3, #255	; 0xff
 8005b38:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
 8005b3c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005b40:	041b      	lsls	r3, r3, #16
 8005b42:	461a      	mov	r2, r3
 8005b44:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005b56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe fcd3 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b64:	461d      	mov	r5, r3
 8005b66:	23ff      	movs	r3, #255	; 0xff
 8005b68:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8005b6c:	23ff      	movs	r3, #255	; 0xff
 8005b6e:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 8005b72:	23ff      	movs	r3, #255	; 0xff
 8005b74:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 8005b78:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8005b7c:	041b      	lsls	r3, r3, #16
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8005b84:	021b      	lsls	r3, r3, #8
 8005b86:	431a      	orrs	r2, r3
 8005b88:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005b92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005b96:	4611      	mov	r1, r2
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fe fcb5 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 fb56 	bl	8006256 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    sendValButton.setPosition(16, 68, 158, 32);
 8005baa:	1d3b      	adds	r3, r7, #4
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8005bb2:	2320      	movs	r3, #32
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	239e      	movs	r3, #158	; 0x9e
 8005bb8:	2244      	movs	r2, #68	; 0x44
 8005bba:	2110      	movs	r1, #16
 8005bbc:	f7fe fd1b 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoContainer.add(sendValButton);
 8005bc0:	1d3b      	adds	r3, r7, #4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f00d fae4 	bl	80131a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    newValButton.setBoxWithBorderPosition(0, 0, 69, 47);
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 8005be0:	232f      	movs	r3, #47	; 0x2f
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2345      	movs	r3, #69	; 0x45
 8005be6:	2200      	movs	r2, #0
 8005be8:	2100      	movs	r1, #0
 8005bea:	f000 faaf 	bl	800614c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    newValButton.setBorderSize(5);
 8005bee:	1d3b      	adds	r3, r7, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8005bf6:	2105      	movs	r1, #5
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fac7 	bl	800618c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    newValButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 8005bfe:	1d3b      	adds	r3, r7, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
 8005c0c:	2366      	movs	r3, #102	; 0x66
 8005c0e:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
 8005c12:	2399      	movs	r3, #153	; 0x99
 8005c14:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8005c18:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	431a      	orrs	r2, r3
 8005c28:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005c32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005c36:	4611      	mov	r1, r2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fe fc65 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005c3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c40:	461d      	mov	r5, r3
 8005c42:	2300      	movs	r3, #0
 8005c44:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
 8005c48:	2399      	movs	r3, #153	; 0x99
 8005c4a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 8005c4e:	23cc      	movs	r3, #204	; 0xcc
 8005c50:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
 8005c54:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 8005c58:	041b      	lsls	r3, r3, #16
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	431a      	orrs	r2, r3
 8005c64:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005c6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fe fc47 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c7c:	461e      	mov	r6, r3
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005c84:	2333      	movs	r3, #51	; 0x33
 8005c86:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8005c8a:	2366      	movs	r3, #102	; 0x66
 8005c8c:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
 8005c90:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005c94:	041b      	lsls	r3, r3, #16
 8005c96:	461a      	mov	r2, r3
 8005c98:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005caa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fe fc29 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb8:	4698      	mov	r8, r3
 8005cba:	2333      	movs	r3, #51	; 0x33
 8005cbc:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 8005cc0:	2366      	movs	r3, #102	; 0x66
 8005cc2:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
 8005cc6:	2399      	movs	r3, #153	; 0x99
 8005cc8:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
 8005ccc:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 8005cd0:	041b      	lsls	r3, r3, #16
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005ce6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fe fc0b 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	4643      	mov	r3, r8
 8005cf8:	4632      	mov	r2, r6
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f000 fa57 	bl	80061b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    newValButton.setText(TypedText(T___SINGLEUSE_TVNT));
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8005d0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d0e:	2104      	movs	r1, #4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff f89f 	bl	8004e54 <_ZN8touchgfx9TypedTextC1Et>
 8005d16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 fa64 	bl	80061ea <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
 8005d22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fd ffb0 	bl	8003c8c <_ZN8touchgfx9TypedTextD1Ev>
    newValButton.setTextPosition(0, 6, 69, 47);
 8005d2c:	1d3b      	adds	r3, r7, #4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 8005d34:	232f      	movs	r3, #47	; 0x2f
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	2345      	movs	r3, #69	; 0x45
 8005d3a:	2206      	movs	r2, #6
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	f000 fa6a 	bl	8006216 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>
    newValButton.setTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f503 648b 	add.w	r4, r3, #1112	; 0x458
 8005d4a:	23ff      	movs	r3, #255	; 0xff
 8005d4c:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
 8005d50:	23ff      	movs	r3, #255	; 0xff
 8005d52:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
 8005d56:	23ff      	movs	r3, #255	; 0xff
 8005d58:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005d5c:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 8005d60:	041b      	lsls	r3, r3, #16
 8005d62:	461a      	mov	r2, r3
 8005d64:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8005d68:	021b      	lsls	r3, r3, #8
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005d76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fe fbc3 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d84:	461d      	mov	r5, r3
 8005d86:	23ff      	movs	r3, #255	; 0xff
 8005d88:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
 8005d8c:	23ff      	movs	r3, #255	; 0xff
 8005d8e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005d92:	23ff      	movs	r3, #255	; 0xff
 8005d94:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 8005d98:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8005d9c:	041b      	lsls	r3, r3, #16
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	431a      	orrs	r2, r3
 8005da8:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005db2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005db6:	4611      	mov	r1, r2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe fba5 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005dbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f000 fa44 	bl	8006256 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    newValButton.setPosition(16, 12, 69, 47);
 8005dce:	1d3b      	adds	r3, r7, #4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f503 608b 	add.w	r0, r3, #1112	; 0x458
 8005dd6:	232f      	movs	r3, #47	; 0x2f
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	2345      	movs	r3, #69	; 0x45
 8005ddc:	220c      	movs	r2, #12
 8005dde:	2110      	movs	r1, #16
 8005de0:	f7fe fc09 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    txInfoContainer.add(newValButton);
 8005de4:	1d3b      	adds	r3, r7, #4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8005dec:	1d3b      	adds	r3, r7, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f00d f9d2 	bl	80131a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    sendValTextArea.setPosition(95, 26, 79, 19);
 8005dfc:	1d3b      	adds	r3, r7, #4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f203 5014 	addw	r0, r3, #1300	; 0x514
 8005e04:	2313      	movs	r3, #19
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	234f      	movs	r3, #79	; 0x4f
 8005e0a:	221a      	movs	r2, #26
 8005e0c:	215f      	movs	r1, #95	; 0x5f
 8005e0e:	f7fe fbf2 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    sendValTextArea.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005e12:	1d3b      	adds	r3, r7, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f203 5414 	addw	r4, r3, #1300	; 0x514
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
 8005e26:	2300      	movs	r3, #0
 8005e28:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
 8005e2c:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8005e30:	041b      	lsls	r3, r3, #16
 8005e32:	461a      	mov	r2, r3
 8005e34:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 8005e38:	021b      	lsls	r3, r3, #8
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005e46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe fb5b 	bl	8004508 <_ZN8touchgfx9colortypeC1Em>
 8005e52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 8005e5e:	f107 030c 	add.w	r3, r7, #12
 8005e62:	601a      	str	r2, [r3, #0]
        this->color = color;
 8005e64:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005e68:	f107 020c 	add.w	r2, r7, #12
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8005e70:	bf00      	nop
    sendValTextArea.setLinespacing(0);
 8005e72:	1d3b      	adds	r3, r7, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8005e7a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
        linespace = space;
 8005e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e88:	f8b7 214a 	ldrh.w	r2, [r7, #330]	; 0x14a
 8005e8c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8005e8e:	bf00      	nop
    sendValTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NA10));
 8005e90:	1d3b      	adds	r3, r7, #4
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f203 5414 	addw	r4, r3, #1300	; 0x514
 8005e98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e9c:	2103      	movs	r1, #3
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe ffd8 	bl	8004e54 <_ZN8touchgfx9TypedTextC1Et>
 8005ea4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f00f fbbb 	bl	8015626 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005eb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fd fee9 	bl	8003c8c <_ZN8touchgfx9TypedTextD1Ev>
    txInfoContainer.add(sendValTextArea);
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8005ec2:	1d3b      	adds	r3, r7, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f203 5314 	addw	r3, r3, #1300	; 0x514
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f00d f967 	bl	80131a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 8005ed2:	1d3b      	adds	r3, r7, #4
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3340      	adds	r3, #64	; 0x40
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f7fe fd8a 	bl	80049f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(background);
 8005ee4:	1d3b      	adds	r3, r7, #4
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	1d3b      	adds	r3, r7, #4
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	336c      	adds	r3, #108	; 0x6c
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f7fe fd81 	bl	80049f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(txButton);
 8005ef6:	1d3b      	adds	r3, r7, #4
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	1d3b      	adds	r3, r7, #4
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3398      	adds	r3, #152	; 0x98
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f7fe fd78 	bl	80049f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rxButton);
 8005f08:	1d3b      	adds	r3, r7, #4
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	1d3b      	adds	r3, r7, #4
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7fe fd6e 	bl	80049f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollBackgroundBox);
 8005f1c:	1d3b      	adds	r3, r7, #4
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	1d3b      	adds	r3, r7, #4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	f7fe fd64 	bl	80049f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollableContainer);
 8005f30:	1d3b      	adds	r3, r7, #4
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	f7fe fd5a 	bl	80049f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(txInfoContainer);
 8005f44:	1d3b      	adds	r3, r7, #4
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	1d3b      	adds	r3, r7, #4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f7fe fd50 	bl	80049f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8005f58:	1d3b      	adds	r3, r7, #4
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8005f62:	46bd      	mov	sp, r7
 8005f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f68 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
    if (&src == &txButton)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3398      	adds	r3, #152	; 0x98
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d10d      	bne.n	8005fac <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x30>
    {
        //showTxInfo
        //When txButton clicked show txInfoContainer
        //Show txInfoContainer
        txInfoContainer.setVisible(true);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005f96:	2101      	movs	r1, #1
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fc2b 	bl	80047f4 <_ZN8touchgfx8Drawable10setVisibleEb>
        txInfoContainer.invalidate();
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f012 f91d 	bl	80181e4 <_ZNK8touchgfx8Drawable10invalidateEv>
        //When rxButton clicked hide txInfoContainer
        //Hide txInfoContainer
        txInfoContainer.setVisible(false);
        txInfoContainer.invalidate();
    }
}
 8005faa:	e012      	b.n	8005fd2 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x56>
    else if (&src == &rxButton)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d10c      	bne.n	8005fd2 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x56>
        txInfoContainer.setVisible(false);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fc17 	bl	80047f4 <_ZN8touchgfx8Drawable10setVisibleEb>
        txInfoContainer.invalidate();
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f012 f909 	bl	80181e4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8005fd2:	bf00      	nop
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f012 fb7e 	bl	80186e8 <_ZN8touchgfx6ScreenC1Ev>
 8005fec:	4a05      	ldr	r2, [pc, #20]	; (8006004 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	08027ee4 	.word	0x08027ee4

08006008 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	4a05      	ldr	r2, [pc, #20]	; (8006028 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fef9 	bl	8004e10 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	08027f18 	.word	0x08027f18

0800602c <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff ffe7 	bl	8006008 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800603a:	2134      	movs	r1, #52	; 0x34
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f01f fdfc 	bl	8025c3a <_ZdlPvj>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	4a08      	ldr	r2, [pc, #32]	; (8006078 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3334      	adds	r3, #52	; 0x34
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fa22 	bl	80064a8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff ffce 	bl	8006008 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	08027e4c 	.word	0x08027e4c

0800607c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff ffe1 	bl	800604c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800608a:	2178      	movs	r1, #120	; 0x78
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f01f fdd4 	bl	8025c3a <_ZdlPvj>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
 */
template <class T>
class TextButtonStyle : public T
{
public:
    TextButtonStyle()
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
        : T()
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f900 	bl	80062ac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 80060ac:	4a0e      	ldr	r2, [pc, #56]	; (80060e8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x4c>)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3378      	adds	r3, #120	; 0x78
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fe fee2 	bl	8004e80 <_ZN8touchgfx8TextAreaC1Ev>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	33b4      	adds	r3, #180	; 0xb4
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fb ff35 	bl	8001f30 <_ZN8touchgfx9colortypeC1Ev>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	33b8      	adds	r3, #184	; 0xb8
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fb ff30 	bl	8001f30 <_ZN8touchgfx9colortypeC1Ev>
    {
        T::add(text);
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3378      	adds	r3, #120	; 0x78
 80060d6:	4619      	mov	r1, r3
 80060d8:	4610      	mov	r0, r2
 80060da:	f00d f861 	bl	80131a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	08027db4 	.word	0x08027db4

080060ec <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	4a04      	ldr	r2, [pc, #16]	; (8006108 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	08027fb0 	.word	0x08027fb0

0800610c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	4639      	mov	r1, r7
 8006118:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff ffe4 	bl	80060ec <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8006124:	4a08      	ldr	r2, [pc, #32]	; (8006148 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	605a      	str	r2, [r3, #4]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3308      	adds	r3, #8
 8006134:	463a      	mov	r2, r7
 8006136:	e892 0003 	ldmia.w	r2, {r0, r1}
 800613a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	08027d9c 	.word	0x08027d9c

0800614c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800614c:	b590      	push	{r4, r7, lr}
 800614e:	b087      	sub	sp, #28
 8006150:	af02      	add	r7, sp, #8
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	4608      	mov	r0, r1
 8006156:	4611      	mov	r1, r2
 8006158:	461a      	mov	r2, r3
 800615a:	4603      	mov	r3, r0
 800615c:	817b      	strh	r3, [r7, #10]
 800615e:	460b      	mov	r3, r1
 8006160:	813b      	strh	r3, [r7, #8]
 8006162:	4613      	mov	r3, r2
 8006164:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800616c:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8006170:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006174:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8006178:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	4623      	mov	r3, r4
 8006180:	f7fe fa39 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	bd90      	pop	{r4, r7, pc}

0800618c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3334      	adds	r3, #52	; 0x34
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	b292      	uxth	r2, r2
 80061a0:	4611      	mov	r1, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe fdd8 	bl	8004d58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 80061a8:	bf00      	nop
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3388      	adds	r3, #136	; 0x88
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	4798      	blx	r3
    }
 80061e2:	bf00      	nop
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>:
    /**
     * Sets a text.
     *
     * @param  t A TypedText to process.
     */
    void setText(TypedText t)
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
    {
        text.setTypedText(t);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3378      	adds	r3, #120	; 0x78
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f00f fa13 	bl	8015626 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        text.setWidthHeight(*this);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3378      	adds	r3, #120	; 0x78
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe fac7 	bl	800479c <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>
    }
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE15setTextPositionEssss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width of the text.
     * @param  height The height of the text.
     */
    void setTextPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8006216:	b590      	push	{r4, r7, lr}
 8006218:	b087      	sub	sp, #28
 800621a:	af02      	add	r7, sp, #8
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	4608      	mov	r0, r1
 8006220:	4611      	mov	r1, r2
 8006222:	461a      	mov	r2, r3
 8006224:	4603      	mov	r3, r0
 8006226:	817b      	strh	r3, [r7, #10]
 8006228:	460b      	mov	r3, r1
 800622a:	813b      	strh	r3, [r7, #8]
 800622c:	4613      	mov	r3, r2
 800622e:	80fb      	strh	r3, [r7, #6]
    {
        text.setPosition(x, y, width, height);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8006236:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800623a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800623e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8006242:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	4623      	mov	r3, r4
 800624a:	f7fe f9d4 	bl	80045f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	bd90      	pop	{r4, r7, pc}

08006256 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>:
     * Sets text colors.
     *
     * @param  newColorReleased The new color released.
     * @param  newColorPressed  The new color pressed.
     */
    void setTextColors(colortype newColorReleased, colortype newColorPressed)
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	607a      	str	r2, [r7, #4]
    {
        colorReleased = newColorReleased;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        colorPressed = newColorPressed;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        handlePressedUpdated();
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3388      	adds	r3, #136	; 0x88
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	4798      	blx	r3
    }
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fc7a 	bl	8004b8c <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8006298:	4a03      	ldr	r2, [pc, #12]	; (80062a8 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	08027f18 	.word	0x08027f18

080062ac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle()
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4618      	mov	r0, r3
 80062b8:	2334      	movs	r3, #52	; 0x34
 80062ba:	461a      	mov	r2, r3
 80062bc:	2100      	movs	r1, #0
 80062be:	f01f fd77 	bl	8025db0 <memset>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff ffdf 	bl	8006288 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 80062ca:	4a17      	ldr	r2, [pc, #92]	; (8006328 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x7c>)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3334      	adds	r3, #52	; 0x34
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe fd15 	bl	8004d04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3368      	adds	r3, #104	; 0x68
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fb fe26 	bl	8001f30 <_ZN8touchgfx9colortypeC1Ev>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	336c      	adds	r3, #108	; 0x6c
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fb fe21 	bl	8001f30 <_ZN8touchgfx9colortypeC1Ev>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3370      	adds	r3, #112	; 0x70
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fb fe1c 	bl	8001f30 <_ZN8touchgfx9colortypeC1Ev>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3374      	adds	r3, #116	; 0x74
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fb fe17 	bl	8001f30 <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3334      	adds	r3, #52	; 0x34
 8006306:	2200      	movs	r2, #0
 8006308:	2100      	movs	r1, #0
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe f9cc 	bl	80046a8 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3334      	adds	r3, #52	; 0x34
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f00c ff41 	bl	80131a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4618      	mov	r0, r3
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	08027e4c 	.word	0x08027e4c

0800632c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
    }
 8006334:	4a04      	ldr	r2, [pc, #16]	; (8006348 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	08027fb0 	.word	0x08027fb0

0800634c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
    }
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff ffe9 	bl	800632c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 800635a:	2104      	movs	r1, #4
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f01f fc6c 	bl	8025c3a <_ZdlPvj>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 800636c:	b590      	push	{r4, r7, lr}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fc3b 	bl	8004bf8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	336c      	adds	r3, #108	; 0x6c
 800638c:	e001      	b.n	8006392 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3368      	adds	r3, #104	; 0x68
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	4620      	mov	r0, r4
 8006396:	f7fe fbb9 	bl	8004b0c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fc28 	bl	8004bf8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3374      	adds	r3, #116	; 0x74
 80063b2:	e001      	b.n	80063b8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3370      	adds	r3, #112	; 0x70
 80063b8:	6819      	ldr	r1, [r3, #0]
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7fe fcbe 	bl	8004d3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe fc67 	bl	8004c96 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd90      	pop	{r4, r7, pc}

080063d0 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    TextArea text;           ///< The text
    colortype colorReleased; ///< The color released
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 80063d0:	b590      	push	{r4, r7, lr}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe fc09 	bl	8004bf8 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	33b8      	adds	r3, #184	; 0xb8
 80063f0:	e001      	b.n	80063f6 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	33b4      	adds	r3, #180	; 0xb4
 80063f6:	60fc      	str	r4, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60bb      	str	r3, [r7, #8]
        this->color = color;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006402:	bf00      	nop
        T::handlePressedUpdated();
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff ffb0 	bl	800636c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	bd90      	pop	{r4, r7, pc}

08006414 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	4a05      	ldr	r2, [pc, #20]	; (8006434 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff ff81 	bl	800632c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	08027d9c 	.word	0x08027d9c

08006438 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff ffe7 	bl	8006414 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8006446:	2110      	movs	r1, #16
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f01f fbf6 	bl	8025c3a <_ZdlPvj>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
class TextButtonStyle : public T
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	4a08      	ldr	r2, [pc, #32]	; (8006484 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev+0x2c>)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3378      	adds	r3, #120	; 0x78
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe fd52 	bl	8004f14 <_ZN8touchgfx8TextAreaD1Ev>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff fdea 	bl	800604c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	08027db4 	.word	0x08027db4

08006488 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff ffe1 	bl	8006458 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 8006496:	21bc      	movs	r1, #188	; 0xbc
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f01f fbce 	bl	8025c3a <_ZdlPvj>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	4a05      	ldr	r2, [pc, #20]	; (80064c8 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fe fc01 	bl	8004cc0 <_ZN8touchgfx3BoxD1Ev>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	080291c4 	.word	0x080291c4

080064cc <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ffe7 	bl	80064a8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80064da:	2134      	movs	r1, #52	; 0x34
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f01f fbac 	bl	8025c3a <_ZdlPvj>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <_ZN8touchgfx19ScrollableContainerD1Ev>:
 * @see Container
 *
 * @note The ScrollableContainer will consume all DragEvents in the area covered by the
 *       container.
 */
class ScrollableContainer : public Container
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <_ZN8touchgfx19ScrollableContainerD1Ev+0x34>)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3364      	adds	r3, #100	; 0x64
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe fbde 	bl	8004cc0 <_ZN8touchgfx3BoxD1Ev>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3338      	adds	r3, #56	; 0x38
 8006508:	4618      	mov	r0, r3
 800650a:	f7fe fbd9 	bl	8004cc0 <_ZN8touchgfx3BoxD1Ev>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe fb19 	bl	8004b48 <_ZN8touchgfx9ContainerD1Ev>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	080285e0 	.word	0x080285e0

08006524 <_ZN8touchgfx19ScrollableContainerD0Ev>:
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ffdd 	bl	80064ec <_ZN8touchgfx19ScrollableContainerD1Ev>
 8006532:	21bc      	movs	r1, #188	; 0xbc
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f01f fb80 	bl	8025c3a <_ZdlPvj>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	4a05      	ldr	r2, [pc, #20]	; (8006564 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4618      	mov	r0, r3
 8006556:	f7fe fcdd 	bl	8004f14 <_ZN8touchgfx8TextAreaD1Ev>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	0802911c 	.word	0x0802911c

08006568 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff ffe7 	bl	8006544 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006576:	2140      	movs	r1, #64	; 0x40
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f01f fb5e 	bl	8025c3a <_ZdlPvj>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	68d2      	ldr	r2, [r2, #12]
 800659a:	1052      	asrs	r2, r2, #1
 800659c:	1898      	adds	r0, r3, r2
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d102      	bne.n	80065b0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	e00a      	b.n	80065c6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	68d2      	ldr	r2, [r2, #12]
 80065b8:	1052      	asrs	r2, r2, #1
 80065ba:	4413      	add	r3, r2
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6892      	ldr	r2, [r2, #8]
 80065c2:	4413      	add	r3, r2
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	4798      	blx	r3
    }
 80065ca:	bf00      	nop
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d010      	beq.n	8006604 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d107      	bne.n	80065fa <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 80065fa:	2300      	movs	r3, #0
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d001      	beq.n	8006604 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8006604:	2300      	movs	r3, #0
    }
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 8006612:	b590      	push	{r4, r7, lr}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
    {
        text.setAlpha(T::getAlpha());
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe faf5 	bl	8004c12 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8006628:	4603      	mov	r3, r0
 800662a:	4619      	mov	r1, r3
 800662c:	4620      	mov	r0, r4
 800662e:	f7fe fc61 	bl	8004ef4 <_ZN8touchgfx8TextArea8setAlphaEh>
        T::handleAlphaUpdated();
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 f804 	bl	8006642 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>
    }
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	bd90      	pop	{r4, r7, pc}

08006642 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 8006642:	b590      	push	{r4, r7, lr}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fadd 	bl	8004c12 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8006658:	4603      	mov	r3, r0
 800665a:	4619      	mov	r1, r3
 800665c:	4620      	mov	r0, r4
 800665e:	f7fe fa63 	bl	8004b28 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe fb20 	bl	8004caa <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	bd90      	pop	{r4, r7, pc}
	...

08006674 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 0, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
 8006678:	4801      	ldr	r0, [pc, #4]	; (8006680 <__tcf_0+0xc>)
 800667a:	f7fd fae5 	bl	8003c48 <_ZN8touchgfx13GeneratedFontD1Ev>
 800667e:	bd80      	pop	{r7, pc}
 8006680:	24001598 	.word	0x24001598

08006684 <_Z23getFont_verdana_10_4bppv>:
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08c      	sub	sp, #48	; 0x30
 8006688:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 0, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800668a:	4b1f      	ldr	r3, [pc, #124]	; (8006708 <_Z23getFont_verdana_10_4bppv+0x84>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	f3bf 8f5b 	dmb	ish
 8006692:	b2db      	uxtb	r3, r3
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d02c      	beq.n	8006700 <_Z23getFont_verdana_10_4bppv+0x7c>
 80066a6:	4818      	ldr	r0, [pc, #96]	; (8006708 <_Z23getFont_verdana_10_4bppv+0x84>)
 80066a8:	f01f fac9 	bl	8025c3e <__cxa_guard_acquire>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	bf14      	ite	ne
 80066b2:	2301      	movne	r3, #1
 80066b4:	2300      	moveq	r3, #0
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d021      	beq.n	8006700 <_Z23getFont_verdana_10_4bppv+0x7c>
 80066bc:	2300      	movs	r3, #0
 80066be:	930a      	str	r3, [sp, #40]	; 0x28
 80066c0:	2300      	movs	r3, #0
 80066c2:	9309      	str	r3, [sp, #36]	; 0x24
 80066c4:	2300      	movs	r3, #0
 80066c6:	9308      	str	r3, [sp, #32]
 80066c8:	233f      	movs	r3, #63	; 0x3f
 80066ca:	9307      	str	r3, [sp, #28]
 80066cc:	4b0f      	ldr	r3, [pc, #60]	; (800670c <_Z23getFont_verdana_10_4bppv+0x88>)
 80066ce:	9306      	str	r3, [sp, #24]
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80066d2:	9305      	str	r3, [sp, #20]
 80066d4:	2300      	movs	r3, #0
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	2300      	movs	r3, #0
 80066da:	9303      	str	r3, [sp, #12]
 80066dc:	2300      	movs	r3, #0
 80066de:	9302      	str	r3, [sp, #8]
 80066e0:	2304      	movs	r3, #4
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	2300      	movs	r3, #0
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	230a      	movs	r3, #10
 80066ea:	2201      	movs	r2, #1
 80066ec:	4909      	ldr	r1, [pc, #36]	; (8006714 <_Z23getFont_verdana_10_4bppv+0x90>)
 80066ee:	480a      	ldr	r0, [pc, #40]	; (8006718 <_Z23getFont_verdana_10_4bppv+0x94>)
 80066f0:	f7fd fe70 	bl	80043d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80066f4:	4804      	ldr	r0, [pc, #16]	; (8006708 <_Z23getFont_verdana_10_4bppv+0x84>)
 80066f6:	f01f faae 	bl	8025c56 <__cxa_guard_release>
 80066fa:	4808      	ldr	r0, [pc, #32]	; (800671c <_Z23getFont_verdana_10_4bppv+0x98>)
 80066fc:	f01f faea 	bl	8025cd4 <atexit>
    return verdana_10_4bpp;
 8006700:	4b05      	ldr	r3, [pc, #20]	; (8006718 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8006702:	4618      	mov	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	240015c0 	.word	0x240015c0
 800670c:	0802aad4 	.word	0x0802aad4
 8006710:	0802ab18 	.word	0x0802ab18
 8006714:	900007ac 	.word	0x900007ac
 8006718:	24001598 	.word	0x24001598
 800671c:	08006675 	.word	0x08006675

08006720 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_14_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_14_4bpp();

touchgfx::GeneratedFont& getFont_verdana_14_4bpp()
{
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 41, 14, 3, 4, 0, 1, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
 8006724:	4801      	ldr	r0, [pc, #4]	; (800672c <__tcf_0+0xc>)
 8006726:	f7fd fa8f 	bl	8003c48 <_ZN8touchgfx13GeneratedFontD1Ev>
 800672a:	bd80      	pop	{r7, pc}
 800672c:	240015c4 	.word	0x240015c4

08006730 <_Z23getFont_verdana_14_4bppv>:
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08c      	sub	sp, #48	; 0x30
 8006734:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 41, 14, 3, 4, 0, 1, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 8006736:	4b1f      	ldr	r3, [pc, #124]	; (80067b4 <_Z23getFont_verdana_14_4bppv+0x84>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f3bf 8f5b 	dmb	ish
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	bf0c      	ite	eq
 8006748:	2301      	moveq	r3, #1
 800674a:	2300      	movne	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d02c      	beq.n	80067ac <_Z23getFont_verdana_14_4bppv+0x7c>
 8006752:	4818      	ldr	r0, [pc, #96]	; (80067b4 <_Z23getFont_verdana_14_4bppv+0x84>)
 8006754:	f01f fa73 	bl	8025c3e <__cxa_guard_acquire>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	bf14      	ite	ne
 800675e:	2301      	movne	r3, #1
 8006760:	2300      	moveq	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d021      	beq.n	80067ac <_Z23getFont_verdana_14_4bppv+0x7c>
 8006768:	2300      	movs	r3, #0
 800676a:	930a      	str	r3, [sp, #40]	; 0x28
 800676c:	2300      	movs	r3, #0
 800676e:	9309      	str	r3, [sp, #36]	; 0x24
 8006770:	2300      	movs	r3, #0
 8006772:	9308      	str	r3, [sp, #32]
 8006774:	233f      	movs	r3, #63	; 0x3f
 8006776:	9307      	str	r3, [sp, #28]
 8006778:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <_Z23getFont_verdana_14_4bppv+0x88>)
 800677a:	9306      	str	r3, [sp, #24]
 800677c:	4b0f      	ldr	r3, [pc, #60]	; (80067bc <_Z23getFont_verdana_14_4bppv+0x8c>)
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	2300      	movs	r3, #0
 8006782:	9304      	str	r3, [sp, #16]
 8006784:	2301      	movs	r3, #1
 8006786:	9303      	str	r3, [sp, #12]
 8006788:	2300      	movs	r3, #0
 800678a:	9302      	str	r3, [sp, #8]
 800678c:	2304      	movs	r3, #4
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	2303      	movs	r3, #3
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	230e      	movs	r3, #14
 8006796:	2229      	movs	r2, #41	; 0x29
 8006798:	4909      	ldr	r1, [pc, #36]	; (80067c0 <_Z23getFont_verdana_14_4bppv+0x90>)
 800679a:	480a      	ldr	r0, [pc, #40]	; (80067c4 <_Z23getFont_verdana_14_4bppv+0x94>)
 800679c:	f7fd fe1a 	bl	80043d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80067a0:	4804      	ldr	r0, [pc, #16]	; (80067b4 <_Z23getFont_verdana_14_4bppv+0x84>)
 80067a2:	f01f fa58 	bl	8025c56 <__cxa_guard_release>
 80067a6:	4808      	ldr	r0, [pc, #32]	; (80067c8 <_Z23getFont_verdana_14_4bppv+0x98>)
 80067a8:	f01f fa94 	bl	8025cd4 <atexit>
    return verdana_14_4bpp;
 80067ac:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <_Z23getFont_verdana_14_4bppv+0x94>)
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	240015ec 	.word	0x240015ec
 80067b8:	0802aad8 	.word	0x0802aad8
 80067bc:	0802ab1c 	.word	0x0802ab1c
 80067c0:	900007bc 	.word	0x900007bc
 80067c4:	240015c4 	.word	0x240015c4
 80067c8:	08006721 	.word	0x08006721

080067cc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 20, 0, 4, 0, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	4801      	ldr	r0, [pc, #4]	; (80067d8 <__tcf_0+0xc>)
 80067d2:	f7fd fa39 	bl	8003c48 <_ZN8touchgfx13GeneratedFontD1Ev>
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	240015f0 	.word	0x240015f0

080067dc <_Z23getFont_verdana_20_4bppv>:
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08c      	sub	sp, #48	; 0x30
 80067e0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 4, 20, 0, 4, 0, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80067e2:	4b1f      	ldr	r3, [pc, #124]	; (8006860 <_Z23getFont_verdana_20_4bppv+0x84>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	f3bf 8f5b 	dmb	ish
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d02c      	beq.n	8006858 <_Z23getFont_verdana_20_4bppv+0x7c>
 80067fe:	4818      	ldr	r0, [pc, #96]	; (8006860 <_Z23getFont_verdana_20_4bppv+0x84>)
 8006800:	f01f fa1d 	bl	8025c3e <__cxa_guard_acquire>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	bf14      	ite	ne
 800680a:	2301      	movne	r3, #1
 800680c:	2300      	moveq	r3, #0
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d021      	beq.n	8006858 <_Z23getFont_verdana_20_4bppv+0x7c>
 8006814:	2300      	movs	r3, #0
 8006816:	930a      	str	r3, [sp, #40]	; 0x28
 8006818:	2300      	movs	r3, #0
 800681a:	9309      	str	r3, [sp, #36]	; 0x24
 800681c:	2300      	movs	r3, #0
 800681e:	9308      	str	r3, [sp, #32]
 8006820:	233f      	movs	r3, #63	; 0x3f
 8006822:	9307      	str	r3, [sp, #28]
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <_Z23getFont_verdana_20_4bppv+0x88>)
 8006826:	9306      	str	r3, [sp, #24]
 8006828:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800682a:	9305      	str	r3, [sp, #20]
 800682c:	2301      	movs	r3, #1
 800682e:	9304      	str	r3, [sp, #16]
 8006830:	2300      	movs	r3, #0
 8006832:	9303      	str	r3, [sp, #12]
 8006834:	2300      	movs	r3, #0
 8006836:	9302      	str	r3, [sp, #8]
 8006838:	2304      	movs	r3, #4
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	2300      	movs	r3, #0
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	2314      	movs	r3, #20
 8006842:	2204      	movs	r2, #4
 8006844:	4909      	ldr	r1, [pc, #36]	; (800686c <_Z23getFont_verdana_20_4bppv+0x90>)
 8006846:	480a      	ldr	r0, [pc, #40]	; (8006870 <_Z23getFont_verdana_20_4bppv+0x94>)
 8006848:	f7fd fdc4 	bl	80043d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800684c:	4804      	ldr	r0, [pc, #16]	; (8006860 <_Z23getFont_verdana_20_4bppv+0x84>)
 800684e:	f01f fa02 	bl	8025c56 <__cxa_guard_release>
 8006852:	4808      	ldr	r0, [pc, #32]	; (8006874 <_Z23getFont_verdana_20_4bppv+0x98>)
 8006854:	f01f fa3e 	bl	8025cd4 <atexit>
    return verdana_20_4bpp;
 8006858:	4b05      	ldr	r3, [pc, #20]	; (8006870 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800685a:	4618      	mov	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	24001618 	.word	0x24001618
 8006864:	0802ab10 	.word	0x0802ab10
 8006868:	0802ab20 	.word	0x0802ab20
 800686c:	900009fc 	.word	0x900009fc
 8006870:	240015f0 	.word	0x240015f0
 8006874:	080067cd 	.word	0x080067cd

08006878 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 0, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
 800687c:	4801      	ldr	r0, [pc, #4]	; (8006884 <__tcf_0+0xc>)
 800687e:	f7fd f9e3 	bl	8003c48 <_ZN8touchgfx13GeneratedFontD1Ev>
 8006882:	bd80      	pop	{r7, pc}
 8006884:	2400161c 	.word	0x2400161c

08006888 <_Z23getFont_verdana_40_4bppv>:
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08c      	sub	sp, #48	; 0x30
 800688c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 0, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800688e:	4b1f      	ldr	r3, [pc, #124]	; (800690c <_Z23getFont_verdana_40_4bppv+0x84>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	f3bf 8f5b 	dmb	ish
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d02c      	beq.n	8006904 <_Z23getFont_verdana_40_4bppv+0x7c>
 80068aa:	4818      	ldr	r0, [pc, #96]	; (800690c <_Z23getFont_verdana_40_4bppv+0x84>)
 80068ac:	f01f f9c7 	bl	8025c3e <__cxa_guard_acquire>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bf14      	ite	ne
 80068b6:	2301      	movne	r3, #1
 80068b8:	2300      	moveq	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d021      	beq.n	8006904 <_Z23getFont_verdana_40_4bppv+0x7c>
 80068c0:	2300      	movs	r3, #0
 80068c2:	930a      	str	r3, [sp, #40]	; 0x28
 80068c4:	2300      	movs	r3, #0
 80068c6:	9309      	str	r3, [sp, #36]	; 0x24
 80068c8:	2300      	movs	r3, #0
 80068ca:	9308      	str	r3, [sp, #32]
 80068cc:	233f      	movs	r3, #63	; 0x3f
 80068ce:	9307      	str	r3, [sp, #28]
 80068d0:	4b0f      	ldr	r3, [pc, #60]	; (8006910 <_Z23getFont_verdana_40_4bppv+0x88>)
 80068d2:	9306      	str	r3, [sp, #24]
 80068d4:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80068d6:	9305      	str	r3, [sp, #20]
 80068d8:	2300      	movs	r3, #0
 80068da:	9304      	str	r3, [sp, #16]
 80068dc:	2300      	movs	r3, #0
 80068de:	9303      	str	r3, [sp, #12]
 80068e0:	2300      	movs	r3, #0
 80068e2:	9302      	str	r3, [sp, #8]
 80068e4:	2304      	movs	r3, #4
 80068e6:	9301      	str	r3, [sp, #4]
 80068e8:	2300      	movs	r3, #0
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	2328      	movs	r3, #40	; 0x28
 80068ee:	2201      	movs	r2, #1
 80068f0:	4909      	ldr	r1, [pc, #36]	; (8006918 <_Z23getFont_verdana_40_4bppv+0x90>)
 80068f2:	480a      	ldr	r0, [pc, #40]	; (800691c <_Z23getFont_verdana_40_4bppv+0x94>)
 80068f4:	f7fd fd6e 	bl	80043d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80068f8:	4804      	ldr	r0, [pc, #16]	; (800690c <_Z23getFont_verdana_40_4bppv+0x84>)
 80068fa:	f01f f9ac 	bl	8025c56 <__cxa_guard_release>
 80068fe:	4808      	ldr	r0, [pc, #32]	; (8006920 <_Z23getFont_verdana_40_4bppv+0x98>)
 8006900:	f01f f9e8 	bl	8025cd4 <atexit>
    return verdana_40_4bpp;
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8006906:	4618      	mov	r0, r3
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	24001644 	.word	0x24001644
 8006910:	0802ab14 	.word	0x0802ab14
 8006914:	0802ab24 	.word	0x0802ab24
 8006918:	90000a34 	.word	0x90000a34
 800691c:	2400161c 	.word	0x2400161c
 8006920:	08006879 	.word	0x08006879

08006924 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	460b      	mov	r3, r1
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8006932:	2300      	movs	r3, #0
    }
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8006948:	2300      	movs	r3, #0
    }
 800694a:	4618      	mov	r0, r3
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800695e:	2300      	movs	r3, #0
    }
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800697a:	4a07      	ldr	r2, [pc, #28]	; (8006998 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8006980:	4a06      	ldr	r2, [pc, #24]	; (800699c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8006986:	4a06      	ldr	r2, [pc, #24]	; (80069a0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8006988:	88fb      	ldrh	r3, [r7, #6]
 800698a:	8013      	strh	r3, [r2, #0]
    }
 800698c:	bf00      	nop
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	2400af3c 	.word	0x2400af3c
 800699c:	2400af44 	.word	0x2400af44
 80069a0:	2400af40 	.word	0x2400af40

080069a4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80069a4:	b40e      	push	{r1, r2, r3}
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80069ae:	f107 0320 	add.w	r3, r7, #32
 80069b2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	2100      	movs	r1, #0
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f011 faf0 	bl	8017fa0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80069c0:	4603      	mov	r3, r0
 80069c2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80069c4:	89fb      	ldrh	r3, [r7, #14]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069d0:	b003      	add	sp, #12
 80069d2:	4770      	bx	lr

080069d4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80069d4:	b40c      	push	{r2, r3}
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80069e2:	f107 031c 	add.w	r3, r7, #28
 80069e6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80069e8:	78f9      	ldrb	r1, [r7, #3]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f011 fad6 	bl	8017fa0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80069f4:	4603      	mov	r3, r0
 80069f6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80069f8:	89fb      	ldrh	r3, [r7, #14]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a04:	b002      	add	sp, #8
 8006a06:	4770      	bx	lr

08006a08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08a      	sub	sp, #40	; 0x28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d016      	beq.n	8006a4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3322      	adds	r3, #34	; 0x22
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	8adb      	ldrh	r3, [r3, #22]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8006a2a:	4b43      	ldr	r3, [pc, #268]	; (8006b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8006a2c:	4a43      	ldr	r2, [pc, #268]	; (8006b3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8006a2e:	21c0      	movs	r1, #192	; 0xc0
 8006a30:	4843      	ldr	r0, [pc, #268]	; (8006b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006a32:	f01f f931 	bl	8025c98 <__assert_func>
            return buffer[pos];
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	8a9b      	ldrh	r3, [r3, #20]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d06a      	beq.n	8006b26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f012 fd97 	bl	8019584 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3322      	adds	r3, #34	; 0x22
 8006a5a:	623b      	str	r3, [r7, #32]
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	8adb      	ldrh	r3, [r3, #22]
 8006a64:	8bfa      	ldrh	r2, [r7, #30]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d305      	bcc.n	8006a76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8006a6a:	4b36      	ldr	r3, [pc, #216]	; (8006b44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8006a6c:	4a36      	ldr	r2, [pc, #216]	; (8006b48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8006a6e:	21c5      	movs	r1, #197	; 0xc5
 8006a70:	4833      	ldr	r0, [pc, #204]	; (8006b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006a72:	f01f f911 	bl	8025c98 <__assert_func>
            const uint16_t index = pos + offset;
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	8a9a      	ldrh	r2, [r3, #20]
 8006a7a:	8bfb      	ldrh	r3, [r7, #30]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8006a80:	8bbb      	ldrh	r3, [r7, #28]
 8006a82:	2b09      	cmp	r3, #9
 8006a84:	d801      	bhi.n	8006a8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8006a86:	8bbb      	ldrh	r3, [r7, #28]
 8006a88:	e001      	b.n	8006a8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8006a8a:	8bbb      	ldrh	r3, [r7, #28]
 8006a8c:	3b0a      	subs	r3, #10
 8006a8e:	6a3a      	ldr	r2, [r7, #32]
 8006a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a94:	f640 123f 	movw	r2, #2367	; 0x93f
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	bf0c      	ite	eq
 8006a9c:	2301      	moveq	r3, #1
 8006a9e:	2300      	movne	r3, #0
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d03f      	beq.n	8006b26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3322      	adds	r3, #34	; 0x22
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	3222      	adds	r2, #34	; 0x22
 8006aae:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	8ad2      	ldrh	r2, [r2, #22]
 8006ab4:	2a00      	cmp	r2, #0
 8006ab6:	d105      	bne.n	8006ac4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8006ab8:	4b1f      	ldr	r3, [pc, #124]	; (8006b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8006aba:	4a20      	ldr	r2, [pc, #128]	; (8006b3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8006abc:	21c0      	movs	r1, #192	; 0xc0
 8006abe:	4820      	ldr	r0, [pc, #128]	; (8006b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006ac0:	f01f f8ea 	bl	8025c98 <__assert_func>
            return buffer[pos];
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	8a92      	ldrh	r2, [r2, #20]
 8006ac8:	4611      	mov	r1, r2
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	8adb      	ldrh	r3, [r3, #22]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d806      	bhi.n	8006aec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8006ade:	4b1b      	ldr	r3, [pc, #108]	; (8006b4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8006ae0:	4a1b      	ldr	r2, [pc, #108]	; (8006b50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8006ae2:	f240 110d 	movw	r1, #269	; 0x10d
 8006ae6:	4816      	ldr	r0, [pc, #88]	; (8006b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006ae8:	f01f f8d6 	bl	8025c98 <__assert_func>
            const uint16_t index = pos + 1;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	8a9b      	ldrh	r3, [r3, #20]
 8006af0:	3301      	adds	r3, #1
 8006af2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8006af4:	89bb      	ldrh	r3, [r7, #12]
 8006af6:	2b09      	cmp	r3, #9
 8006af8:	d801      	bhi.n	8006afe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8006afa:	89bb      	ldrh	r3, [r7, #12]
 8006afc:	e000      	b.n	8006b00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8006afe:	2300      	movs	r3, #0
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	89f9      	ldrh	r1, [r7, #14]
 8006b04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8006b08:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3322      	adds	r3, #34	; 0x22
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	f640 133f 	movw	r3, #2367	; 0x93f
 8006b14:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	8a9b      	ldrh	r3, [r3, #20]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	8afa      	ldrh	r2, [r7, #22]
 8006b20:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8006b24:	bf00      	nop
        }
    }
    return getNextChar();
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f012 fc10 	bl	801934c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006b2c:	4603      	mov	r3, r0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3728      	adds	r7, #40	; 0x28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	080274e4 	.word	0x080274e4
 8006b3c:	080274f0 	.word	0x080274f0
 8006b40:	0802759c 	.word	0x0802759c
 8006b44:	080275f4 	.word	0x080275f4
 8006b48:	08027604 	.word	0x08027604
 8006b4c:	080276d8 	.word	0x080276d8
 8006b50:	080276e4 	.word	0x080276e4

08006b54 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f012 fbad 	bl	80192bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b088      	sub	sp, #32
 8006b6e:	af02      	add	r7, sp, #8
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	1d38      	adds	r0, r7, #4
 8006b74:	e880 0006 	stmia.w	r0, {r1, r2}
 8006b78:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8006b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b7e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8006b80:	1d39      	adds	r1, r7, #4
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	9301      	str	r3, [sp, #4]
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f00f ff24 	bl	80169dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8006b94:	bf00      	nop
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8006b9c:	b590      	push	{r4, r7, lr}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8006baa:	88fb      	ldrh	r3, [r7, #6]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d127      	bne.n	8006c00 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8006bb0:	88fb      	ldrh	r3, [r7, #6]
 8006bb2:	4a1e      	ldr	r2, [pc, #120]	; (8006c2c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8006bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d016      	beq.n	8006bea <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8006bbc:	88fb      	ldrh	r3, [r7, #6]
 8006bbe:	4a1b      	ldr	r2, [pc, #108]	; (8006c2c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8006bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	4413      	add	r3, r2
 8006bce:	4a18      	ldr	r2, [pc, #96]	; (8006c30 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8006bd0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4413      	add	r3, r2
 8006bda:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8006bdc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	4413      	add	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	e00a      	b.n	8006c00 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8006bea:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8006bec:	4a12      	ldr	r2, [pc, #72]	; (8006c38 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8006bee:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006bf0:	4a12      	ldr	r2, [pc, #72]	; (8006c3c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8006bf2:	4b10      	ldr	r3, [pc, #64]	; (8006c34 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8006bf4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	4a11      	ldr	r2, [pc, #68]	; (8006c40 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8006bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bfe:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00d      	beq.n	8006c22 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8006c06:	4a0f      	ldr	r2, [pc, #60]	; (8006c44 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8006c0c:	f000 f83e 	bl	8006c8c <_ZN17TypedTextDatabase8getFontsEv>
 8006c10:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8006c12:	f000 f833 	bl	8006c7c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8006c16:	4603      	mov	r3, r0
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f7ff fea5 	bl	800696c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8006c22:	bf00      	nop
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd90      	pop	{r4, r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	24001648 	.word	0x24001648
 8006c30:	24001650 	.word	0x24001650
 8006c34:	24001654 	.word	0x24001654
 8006c38:	90000a5c 	.word	0x90000a5c
 8006c3c:	90000a44 	.word	0x90000a44
 8006c40:	90000f54 	.word	0x90000f54
 8006c44:	2400164c 	.word	0x2400164c

08006c48 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8006c54:	4b07      	ldr	r3, [pc, #28]	; (8006c74 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8006c5a:	6819      	ldr	r1, [r3, #0]
 8006c5c:	887b      	ldrh	r3, [r7, #2]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	4413      	add	r3, r2
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	24001650 	.word	0x24001650
 8006c78:	24001654 	.word	0x24001654

08006c7c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8006c80:	2306      	movs	r3, #6
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8006c90:	4b02      	ldr	r3, [pc, #8]	; (8006c9c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	24001658 	.word	0x24001658

08006ca0 <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_14_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d118      	bne.n	8006ce2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d113      	bne.n	8006ce2 <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 8006cba:	f7ff fd8f 	bl	80067dc <_Z23getFont_verdana_20_4bppv>
 8006cbe:	4603      	mov	r3, r0
};
 8006cc0:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006cc2:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8006cc4:	f7ff fde0 	bl	8006888 <_Z23getFont_verdana_40_4bppv>
 8006cc8:	4603      	mov	r3, r0
};
 8006cca:	4a08      	ldr	r2, [pc, #32]	; (8006cec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006ccc:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 8006cce:	f7ff fcd9 	bl	8006684 <_Z23getFont_verdana_10_4bppv>
 8006cd2:	4603      	mov	r3, r0
};
 8006cd4:	4a05      	ldr	r2, [pc, #20]	; (8006cec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006cd6:	6093      	str	r3, [r2, #8]
    &(getFont_verdana_14_4bpp())
 8006cd8:	f7ff fd2a 	bl	8006730 <_Z23getFont_verdana_14_4bppv>
 8006cdc:	4603      	mov	r3, r0
};
 8006cde:	4a03      	ldr	r2, [pc, #12]	; (8006cec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006ce0:	60d3      	str	r3, [r2, #12]
} // namespace TypedTextDatabase
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	24001658 	.word	0x24001658

08006cf0 <_GLOBAL__sub_I_touchgfx_fonts>:
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	f7ff ffd1 	bl	8006ca0 <_Z41__static_initialization_and_destruction_0ii>
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fd f8be 	bl	8003e94 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8006d18:	4a03      	ldr	r2, [pc, #12]	; (8006d28 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	601a      	str	r2, [r3, #0]
{

}
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	08027a78 	.word	0x08027a78

08006d2c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
{

}
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <_ZN5Model4tickEv>:

void Model::tick()
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
    {
    }
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
    {
    }
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
    {
 8006d8c:	4a04      	ldr	r2, [pc, #16]	; (8006da0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	601a      	str	r2, [r3, #0]
    }
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	08028150 	.word	0x08028150

08006da4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
    }
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff ffe9 	bl	8006d84 <_ZN8touchgfx9PresenterD1Ev>
 8006db2:	2104      	movs	r1, #4
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f01e ff40 	bl	8025c3a <_ZdlPvj>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
    {
 8006dcc:	4a04      	ldr	r2, [pc, #16]	; (8006de0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	601a      	str	r2, [r3, #0]
    }
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	08028150 	.word	0x08028150

08006de4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	4a06      	ldr	r2, [pc, #24]	; (8006e08 <_ZN13ModelListenerC1Ev+0x24>)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	605a      	str	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	08028140 	.word	0x08028140

08006e0c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	4a04      	ldr	r2, [pc, #16]	; (8006e28 <_ZN13ModelListenerD1Ev+0x1c>)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	08028140 	.word	0x08028140

08006e2c <_ZN13ModelListenerD0Ev>:
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff ffe9 	bl	8006e0c <_ZN13ModelListenerD1Ev>
 8006e3a:	2108      	movs	r1, #8
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f01e fefc 	bl	8025c3a <_ZdlPvj>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	4a09      	ldr	r2, [pc, #36]	; (8006e7c <_ZN16Screen1PresenterD1Ev+0x30>)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	4a09      	ldr	r2, [pc, #36]	; (8006e80 <_ZN16Screen1PresenterD1Ev+0x34>)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	605a      	str	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff ffd1 	bl	8006e0c <_ZN13ModelListenerD1Ev>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff ff89 	bl	8006d84 <_ZN8touchgfx9PresenterD1Ev>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	08028118 	.word	0x08028118
 8006e80:	08028130 	.word	0x08028130

08006e84 <_ZThn4_N16Screen1PresenterD1Ev>:
 8006e84:	f1a0 0004 	sub.w	r0, r0, #4
 8006e88:	e7e0      	b.n	8006e4c <_ZN16Screen1PresenterD1Ev>
 8006e8a:	bf00      	nop

08006e8c <_ZN16Screen1PresenterD0Ev>:
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff ffd9 	bl	8006e4c <_ZN16Screen1PresenterD1Ev>
 8006e9a:	2110      	movs	r1, #16
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f01e fecc 	bl	8025c3a <_ZdlPvj>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <_ZThn4_N16Screen1PresenterD0Ev>:
 8006eac:	f1a0 0004 	sub.w	r0, r0, #4
 8006eb0:	e7ec      	b.n	8006e8c <_ZN16Screen1PresenterD0Ev>
	...

08006eb4 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
    : view(v)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff ff7f 	bl	8006dc4 <_ZN8touchgfx9PresenterC1Ev>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff ff8a 	bl	8006de4 <_ZN13ModelListenerC1Ev>
 8006ed0:	4a06      	ldr	r2, [pc, #24]	; (8006eec <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	4a06      	ldr	r2, [pc, #24]	; (8006ef0 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	605a      	str	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	60da      	str	r2, [r3, #12]
{

}
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	08028118 	.word	0x08028118
 8006ef0:	08028130 	.word	0x08028130

08006ef4 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]

}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]

}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	4a05      	ldr	r2, [pc, #20]	; (8006f3c <_ZN11Screen1ViewD1Ev+0x20>)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe f851 	bl	8004fd4 <_ZN15Screen1ViewBaseD1Ev>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	08028168 	.word	0x08028168

08006f40 <_ZN11Screen1ViewD0Ev>:
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff ffe7 	bl	8006f1c <_ZN11Screen1ViewD1Ev>
 8006f4e:	f240 5164 	movw	r1, #1380	; 0x564
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f01e fe71 	bl	8025c3a <_ZdlPvj>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fe f8a0 	bl	80050b4 <_ZN15Screen1ViewBaseC1Ev>
 8006f74:	4a03      	ldr	r2, [pc, #12]	; (8006f84 <_ZN11Screen1ViewC1Ev+0x20>)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	601a      	str	r2, [r3, #0]
{

}
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	08028168 	.word	0x08028168

08006f88 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe ffe8 	bl	8005f68 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8006f98:	bf00      	nop
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fd fd04 	bl	80049b8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <__NVIC_SetPriority>:
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	6039      	str	r1, [r7, #0]
 8006fc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	db0a      	blt.n	8006fe2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	490c      	ldr	r1, [pc, #48]	; (8007004 <__NVIC_SetPriority+0x4c>)
 8006fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fd6:	0112      	lsls	r2, r2, #4
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	440b      	add	r3, r1
 8006fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006fe0:	e00a      	b.n	8006ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	4908      	ldr	r1, [pc, #32]	; (8007008 <__NVIC_SetPriority+0x50>)
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	3b04      	subs	r3, #4
 8006ff0:	0112      	lsls	r2, r2, #4
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	761a      	strb	r2, [r3, #24]
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	e000e100 	.word	0xe000e100
 8007008:	e000ed00 	.word	0xe000ed00

0800700c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007010:	4b05      	ldr	r3, [pc, #20]	; (8007028 <SysTick_Handler+0x1c>)
 8007012:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007014:	f002 feac 	bl	8009d70 <xTaskGetSchedulerState>
 8007018:	4603      	mov	r3, r0
 800701a:	2b01      	cmp	r3, #1
 800701c:	d001      	beq.n	8007022 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800701e:	f000 ffeb 	bl	8007ff8 <xPortSysTickHandler>
  }
}
 8007022:	bf00      	nop
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	e000e010 	.word	0xe000e010

0800702c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007030:	2100      	movs	r1, #0
 8007032:	f06f 0004 	mvn.w	r0, #4
 8007036:	f7ff ffbf 	bl	8006fb8 <__NVIC_SetPriority>
#endif
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007046:	f3ef 8305 	mrs	r3, IPSR
 800704a:	603b      	str	r3, [r7, #0]
  return(result);
 800704c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007052:	f06f 0305 	mvn.w	r3, #5
 8007056:	607b      	str	r3, [r7, #4]
 8007058:	e00c      	b.n	8007074 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800705a:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <osKernelInitialize+0x44>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d105      	bne.n	800706e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007062:	4b08      	ldr	r3, [pc, #32]	; (8007084 <osKernelInitialize+0x44>)
 8007064:	2201      	movs	r2, #1
 8007066:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007068:	2300      	movs	r3, #0
 800706a:	607b      	str	r3, [r7, #4]
 800706c:	e002      	b.n	8007074 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800706e:	f04f 33ff 	mov.w	r3, #4294967295
 8007072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007074:	687b      	ldr	r3, [r7, #4]
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	24001668 	.word	0x24001668

08007088 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800708e:	f3ef 8305 	mrs	r3, IPSR
 8007092:	603b      	str	r3, [r7, #0]
  return(result);
 8007094:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800709a:	f06f 0305 	mvn.w	r3, #5
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	e010      	b.n	80070c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <osKernelStart+0x48>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d109      	bne.n	80070be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80070aa:	f7ff ffbf 	bl	800702c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80070ae:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <osKernelStart+0x48>)
 80070b0:	2202      	movs	r2, #2
 80070b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80070b4:	f002 fa14 	bl	80094e0 <vTaskStartScheduler>
      stat = osOK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	607b      	str	r3, [r7, #4]
 80070bc:	e002      	b.n	80070c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80070be:	f04f 33ff 	mov.w	r3, #4294967295
 80070c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070c4:	687b      	ldr	r3, [r7, #4]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	24001668 	.word	0x24001668

080070d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08e      	sub	sp, #56	; 0x38
 80070d8:	af04      	add	r7, sp, #16
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070e4:	f3ef 8305 	mrs	r3, IPSR
 80070e8:	617b      	str	r3, [r7, #20]
  return(result);
 80070ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d17e      	bne.n	80071ee <osThreadNew+0x11a>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d07b      	beq.n	80071ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80070f6:	2380      	movs	r3, #128	; 0x80
 80070f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80070fa:	2318      	movs	r3, #24
 80070fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007102:	f04f 33ff 	mov.w	r3, #4294967295
 8007106:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d045      	beq.n	800719a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <osThreadNew+0x48>
        name = attr->name;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d008      	beq.n	8007142 <osThreadNew+0x6e>
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	2b38      	cmp	r3, #56	; 0x38
 8007134:	d805      	bhi.n	8007142 <osThreadNew+0x6e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <osThreadNew+0x72>
        return (NULL);
 8007142:	2300      	movs	r3, #0
 8007144:	e054      	b.n	80071f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	089b      	lsrs	r3, r3, #2
 8007154:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00e      	beq.n	800717c <osThreadNew+0xa8>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	2b5b      	cmp	r3, #91	; 0x5b
 8007164:	d90a      	bls.n	800717c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800716a:	2b00      	cmp	r3, #0
 800716c:	d006      	beq.n	800717c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <osThreadNew+0xa8>
        mem = 1;
 8007176:	2301      	movs	r3, #1
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	e010      	b.n	800719e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10c      	bne.n	800719e <osThreadNew+0xca>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d108      	bne.n	800719e <osThreadNew+0xca>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d104      	bne.n	800719e <osThreadNew+0xca>
          mem = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	61bb      	str	r3, [r7, #24]
 8007198:	e001      	b.n	800719e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d110      	bne.n	80071c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071ac:	9202      	str	r2, [sp, #8]
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	6a3a      	ldr	r2, [r7, #32]
 80071b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f001 ffba 	bl	8009134 <xTaskCreateStatic>
 80071c0:	4603      	mov	r3, r0
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	e013      	b.n	80071ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d110      	bne.n	80071ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	f107 0310 	add.w	r3, r7, #16
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f002 f805 	bl	80091ee <xTaskCreate>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d001      	beq.n	80071ee <osThreadNew+0x11a>
            hTask = NULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80071ee:	693b      	ldr	r3, [r7, #16]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3728      	adds	r7, #40	; 0x28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007200:	f3ef 8305 	mrs	r3, IPSR
 8007204:	60bb      	str	r3, [r7, #8]
  return(result);
 8007206:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <osDelay+0x1c>
    stat = osErrorISR;
 800720c:	f06f 0305 	mvn.w	r3, #5
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	e007      	b.n	8007224 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <osDelay+0x2c>
      vTaskDelay(ticks);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f002 f92a 	bl	8009478 <vTaskDelay>
    }
  }

  return (stat);
 8007224:	68fb      	ldr	r3, [r7, #12]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800722e:	b580      	push	{r7, lr}
 8007230:	b08a      	sub	sp, #40	; 0x28
 8007232:	af02      	add	r7, sp, #8
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800723e:	f3ef 8305 	mrs	r3, IPSR
 8007242:	613b      	str	r3, [r7, #16]
  return(result);
 8007244:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007246:	2b00      	cmp	r3, #0
 8007248:	d175      	bne.n	8007336 <osSemaphoreNew+0x108>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d072      	beq.n	8007336 <osSemaphoreNew+0x108>
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	429a      	cmp	r2, r3
 8007256:	d86e      	bhi.n	8007336 <osSemaphoreNew+0x108>
    mem = -1;
 8007258:	f04f 33ff 	mov.w	r3, #4294967295
 800725c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d015      	beq.n	8007290 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d006      	beq.n	800727a <osSemaphoreNew+0x4c>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	2b4f      	cmp	r3, #79	; 0x4f
 8007272:	d902      	bls.n	800727a <osSemaphoreNew+0x4c>
        mem = 1;
 8007274:	2301      	movs	r3, #1
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	e00c      	b.n	8007294 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d108      	bne.n	8007294 <osSemaphoreNew+0x66>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d104      	bne.n	8007294 <osSemaphoreNew+0x66>
          mem = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	e001      	b.n	8007294 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729a:	d04c      	beq.n	8007336 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d128      	bne.n	80072f4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d10a      	bne.n	80072be <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2203      	movs	r2, #3
 80072ae:	9200      	str	r2, [sp, #0]
 80072b0:	2200      	movs	r2, #0
 80072b2:	2100      	movs	r1, #0
 80072b4:	2001      	movs	r0, #1
 80072b6:	f000 ff97 	bl	80081e8 <xQueueGenericCreateStatic>
 80072ba:	61f8      	str	r0, [r7, #28]
 80072bc:	e005      	b.n	80072ca <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80072be:	2203      	movs	r2, #3
 80072c0:	2100      	movs	r1, #0
 80072c2:	2001      	movs	r0, #1
 80072c4:	f001 f808 	bl	80082d8 <xQueueGenericCreate>
 80072c8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d022      	beq.n	8007316 <osSemaphoreNew+0xe8>
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d01f      	beq.n	8007316 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80072d6:	2300      	movs	r3, #0
 80072d8:	2200      	movs	r2, #0
 80072da:	2100      	movs	r1, #0
 80072dc:	69f8      	ldr	r0, [r7, #28]
 80072de:	f001 f8c3 	bl	8008468 <xQueueGenericSend>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d016      	beq.n	8007316 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80072e8:	69f8      	ldr	r0, [r7, #28]
 80072ea:	f001 fd4f 	bl	8008d8c <vQueueDelete>
            hSemaphore = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	61fb      	str	r3, [r7, #28]
 80072f2:	e010      	b.n	8007316 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d108      	bne.n	800730c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	461a      	mov	r2, r3
 8007300:	68b9      	ldr	r1, [r7, #8]
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 f845 	bl	8008392 <xQueueCreateCountingSemaphoreStatic>
 8007308:	61f8      	str	r0, [r7, #28]
 800730a:	e004      	b.n	8007316 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f001 f876 	bl	8008400 <xQueueCreateCountingSemaphore>
 8007314:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00c      	beq.n	8007336 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <osSemaphoreNew+0xfc>
          name = attr->name;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	e001      	b.n	800732e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800732a:	2300      	movs	r3, #0
 800732c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800732e:	6979      	ldr	r1, [r7, #20]
 8007330:	69f8      	ldr	r0, [r7, #28]
 8007332:	f001 fe77 	bl	8009024 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007336:	69fb      	ldr	r3, [r7, #28]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3720      	adds	r7, #32
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800734e:	2300      	movs	r3, #0
 8007350:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d103      	bne.n	8007360 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007358:	f06f 0303 	mvn.w	r3, #3
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	e039      	b.n	80073d4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007360:	f3ef 8305 	mrs	r3, IPSR
 8007364:	60fb      	str	r3, [r7, #12]
  return(result);
 8007366:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007368:	2b00      	cmp	r3, #0
 800736a:	d022      	beq.n	80073b2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007372:	f06f 0303 	mvn.w	r3, #3
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	e02c      	b.n	80073d4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800737a:	2300      	movs	r3, #0
 800737c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800737e:	f107 0308 	add.w	r3, r7, #8
 8007382:	461a      	mov	r2, r3
 8007384:	2100      	movs	r1, #0
 8007386:	6938      	ldr	r0, [r7, #16]
 8007388:	f001 fc80 	bl	8008c8c <xQueueReceiveFromISR>
 800738c:	4603      	mov	r3, r0
 800738e:	2b01      	cmp	r3, #1
 8007390:	d003      	beq.n	800739a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007392:	f06f 0302 	mvn.w	r3, #2
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	e01c      	b.n	80073d4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d019      	beq.n	80073d4 <osSemaphoreAcquire+0x94>
 80073a0:	4b0f      	ldr	r3, [pc, #60]	; (80073e0 <osSemaphoreAcquire+0xa0>)
 80073a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	e010      	b.n	80073d4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6938      	ldr	r0, [r7, #16]
 80073b6:	f001 fb5d 	bl	8008a74 <xQueueSemaphoreTake>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d009      	beq.n	80073d4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80073c6:	f06f 0301 	mvn.w	r3, #1
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	e002      	b.n	80073d4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80073ce:	f06f 0302 	mvn.w	r3, #2
 80073d2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80073d4:	697b      	ldr	r3, [r7, #20]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	e000ed04 	.word	0xe000ed04

080073e4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80073fa:	f06f 0303 	mvn.w	r3, #3
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	e02c      	b.n	800745c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007402:	f3ef 8305 	mrs	r3, IPSR
 8007406:	60fb      	str	r3, [r7, #12]
  return(result);
 8007408:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01a      	beq.n	8007444 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007412:	f107 0308 	add.w	r3, r7, #8
 8007416:	4619      	mov	r1, r3
 8007418:	6938      	ldr	r0, [r7, #16]
 800741a:	f001 f9be 	bl	800879a <xQueueGiveFromISR>
 800741e:	4603      	mov	r3, r0
 8007420:	2b01      	cmp	r3, #1
 8007422:	d003      	beq.n	800742c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007424:	f06f 0302 	mvn.w	r3, #2
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	e017      	b.n	800745c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d014      	beq.n	800745c <osSemaphoreRelease+0x78>
 8007432:	4b0d      	ldr	r3, [pc, #52]	; (8007468 <osSemaphoreRelease+0x84>)
 8007434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	e00b      	b.n	800745c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007444:	2300      	movs	r3, #0
 8007446:	2200      	movs	r2, #0
 8007448:	2100      	movs	r1, #0
 800744a:	6938      	ldr	r0, [r7, #16]
 800744c:	f001 f80c 	bl	8008468 <xQueueGenericSend>
 8007450:	4603      	mov	r3, r0
 8007452:	2b01      	cmp	r3, #1
 8007454:	d002      	beq.n	800745c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007456:	f06f 0302 	mvn.w	r3, #2
 800745a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800745c:	697b      	ldr	r3, [r7, #20]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800746c:	b580      	push	{r7, lr}
 800746e:	b08a      	sub	sp, #40	; 0x28
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007478:	2300      	movs	r3, #0
 800747a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800747c:	f3ef 8305 	mrs	r3, IPSR
 8007480:	613b      	str	r3, [r7, #16]
  return(result);
 8007482:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007484:	2b00      	cmp	r3, #0
 8007486:	d15f      	bne.n	8007548 <osMessageQueueNew+0xdc>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d05c      	beq.n	8007548 <osMessageQueueNew+0xdc>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d059      	beq.n	8007548 <osMessageQueueNew+0xdc>
    mem = -1;
 8007494:	f04f 33ff 	mov.w	r3, #4294967295
 8007498:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d029      	beq.n	80074f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d012      	beq.n	80074ce <osMessageQueueNew+0x62>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b4f      	cmp	r3, #79	; 0x4f
 80074ae:	d90e      	bls.n	80074ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	695a      	ldr	r2, [r3, #20]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	fb01 f303 	mul.w	r3, r1, r3
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d302      	bcc.n	80074ce <osMessageQueueNew+0x62>
        mem = 1;
 80074c8:	2301      	movs	r3, #1
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	e014      	b.n	80074f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d110      	bne.n	80074f8 <osMessageQueueNew+0x8c>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10c      	bne.n	80074f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d108      	bne.n	80074f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d104      	bne.n	80074f8 <osMessageQueueNew+0x8c>
          mem = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	e001      	b.n	80074f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d10b      	bne.n	8007516 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2100      	movs	r1, #0
 8007508:	9100      	str	r1, [sp, #0]
 800750a:	68b9      	ldr	r1, [r7, #8]
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 fe6b 	bl	80081e8 <xQueueGenericCreateStatic>
 8007512:	61f8      	str	r0, [r7, #28]
 8007514:	e008      	b.n	8007528 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d105      	bne.n	8007528 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800751c:	2200      	movs	r2, #0
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fed9 	bl	80082d8 <xQueueGenericCreate>
 8007526:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00c      	beq.n	8007548 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <osMessageQueueNew+0xd0>
        name = attr->name;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	e001      	b.n	8007540 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800753c:	2300      	movs	r3, #0
 800753e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007540:	6979      	ldr	r1, [r7, #20]
 8007542:	69f8      	ldr	r0, [r7, #28]
 8007544:	f001 fd6e 	bl	8009024 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007548:	69fb      	ldr	r3, [r7, #28]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3720      	adds	r7, #32
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007568:	2300      	movs	r3, #0
 800756a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800756c:	f3ef 8305 	mrs	r3, IPSR
 8007570:	617b      	str	r3, [r7, #20]
  return(result);
 8007572:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007574:	2b00      	cmp	r3, #0
 8007576:	d028      	beq.n	80075ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <osMessageQueuePut+0x36>
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <osMessageQueuePut+0x36>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800758a:	f06f 0303 	mvn.w	r3, #3
 800758e:	61fb      	str	r3, [r7, #28]
 8007590:	e038      	b.n	8007604 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007592:	2300      	movs	r3, #0
 8007594:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007596:	f107 0210 	add.w	r2, r7, #16
 800759a:	2300      	movs	r3, #0
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	69b8      	ldr	r0, [r7, #24]
 80075a0:	f001 f860 	bl	8008664 <xQueueGenericSendFromISR>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d003      	beq.n	80075b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80075aa:	f06f 0302 	mvn.w	r3, #2
 80075ae:	61fb      	str	r3, [r7, #28]
 80075b0:	e028      	b.n	8007604 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d025      	beq.n	8007604 <osMessageQueuePut+0xb0>
 80075b8:	4b15      	ldr	r3, [pc, #84]	; (8007610 <osMessageQueuePut+0xbc>)
 80075ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	e01c      	b.n	8007604 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <osMessageQueuePut+0x82>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d103      	bne.n	80075de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80075d6:	f06f 0303 	mvn.w	r3, #3
 80075da:	61fb      	str	r3, [r7, #28]
 80075dc:	e012      	b.n	8007604 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80075de:	2300      	movs	r3, #0
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	69b8      	ldr	r0, [r7, #24]
 80075e6:	f000 ff3f 	bl	8008468 <xQueueGenericSend>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d009      	beq.n	8007604 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80075f6:	f06f 0301 	mvn.w	r3, #1
 80075fa:	61fb      	str	r3, [r7, #28]
 80075fc:	e002      	b.n	8007604 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80075fe:	f06f 0302 	mvn.w	r3, #2
 8007602:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007604:	69fb      	ldr	r3, [r7, #28]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3720      	adds	r7, #32
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007626:	2300      	movs	r3, #0
 8007628:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800762a:	f3ef 8305 	mrs	r3, IPSR
 800762e:	617b      	str	r3, [r7, #20]
  return(result);
 8007630:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007632:	2b00      	cmp	r3, #0
 8007634:	d028      	beq.n	8007688 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d005      	beq.n	8007648 <osMessageQueueGet+0x34>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <osMessageQueueGet+0x34>
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007648:	f06f 0303 	mvn.w	r3, #3
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	e037      	b.n	80076c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007650:	2300      	movs	r3, #0
 8007652:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007654:	f107 0310 	add.w	r3, r7, #16
 8007658:	461a      	mov	r2, r3
 800765a:	68b9      	ldr	r1, [r7, #8]
 800765c:	69b8      	ldr	r0, [r7, #24]
 800765e:	f001 fb15 	bl	8008c8c <xQueueReceiveFromISR>
 8007662:	4603      	mov	r3, r0
 8007664:	2b01      	cmp	r3, #1
 8007666:	d003      	beq.n	8007670 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007668:	f06f 0302 	mvn.w	r3, #2
 800766c:	61fb      	str	r3, [r7, #28]
 800766e:	e027      	b.n	80076c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d024      	beq.n	80076c0 <osMessageQueueGet+0xac>
 8007676:	4b15      	ldr	r3, [pc, #84]	; (80076cc <osMessageQueueGet+0xb8>)
 8007678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	e01b      	b.n	80076c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <osMessageQueueGet+0x80>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d103      	bne.n	800769c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007694:	f06f 0303 	mvn.w	r3, #3
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	e011      	b.n	80076c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	69b8      	ldr	r0, [r7, #24]
 80076a2:	f001 f907 	bl	80088b4 <xQueueReceive>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d009      	beq.n	80076c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80076b2:	f06f 0301 	mvn.w	r3, #1
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	e002      	b.n	80076c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80076ba:	f06f 0302 	mvn.w	r3, #2
 80076be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80076c0:	69fb      	ldr	r3, [r7, #28]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3720      	adds	r7, #32
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4a07      	ldr	r2, [pc, #28]	; (80076fc <vApplicationGetIdleTaskMemory+0x2c>)
 80076e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	4a06      	ldr	r2, [pc, #24]	; (8007700 <vApplicationGetIdleTaskMemory+0x30>)
 80076e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2280      	movs	r2, #128	; 0x80
 80076ec:	601a      	str	r2, [r3, #0]
}
 80076ee:	bf00      	nop
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	2400166c 	.word	0x2400166c
 8007700:	240016c8 	.word	0x240016c8

08007704 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4a07      	ldr	r2, [pc, #28]	; (8007730 <vApplicationGetTimerTaskMemory+0x2c>)
 8007714:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4a06      	ldr	r2, [pc, #24]	; (8007734 <vApplicationGetTimerTaskMemory+0x30>)
 800771a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007722:	601a      	str	r2, [r3, #0]
}
 8007724:	bf00      	nop
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	240018c8 	.word	0x240018c8
 8007734:	24001924 	.word	0x24001924

08007738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007744:	f001 ff32 	bl	80095ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007748:	4b5b      	ldr	r3, [pc, #364]	; (80078b8 <pvPortMalloc+0x180>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007750:	f000 f920 	bl	8007994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007754:	4b59      	ldr	r3, [pc, #356]	; (80078bc <pvPortMalloc+0x184>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	f040 8093 	bne.w	8007888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01d      	beq.n	80077a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007768:	2208      	movs	r2, #8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4413      	add	r3, r2
 800776e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	2b00      	cmp	r3, #0
 8007778:	d014      	beq.n	80077a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f023 0307 	bic.w	r3, r3, #7
 8007780:	3308      	adds	r3, #8
 8007782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d06e      	beq.n	8007888 <pvPortMalloc+0x150>
 80077aa:	4b45      	ldr	r3, [pc, #276]	; (80078c0 <pvPortMalloc+0x188>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d869      	bhi.n	8007888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077b4:	4b43      	ldr	r3, [pc, #268]	; (80078c4 <pvPortMalloc+0x18c>)
 80077b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077b8:	4b42      	ldr	r3, [pc, #264]	; (80078c4 <pvPortMalloc+0x18c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077be:	e004      	b.n	80077ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d903      	bls.n	80077dc <pvPortMalloc+0xa4>
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f1      	bne.n	80077c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077dc:	4b36      	ldr	r3, [pc, #216]	; (80078b8 <pvPortMalloc+0x180>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d050      	beq.n	8007888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2208      	movs	r2, #8
 80077ec:	4413      	add	r3, r2
 80077ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	1ad2      	subs	r2, r2, r3
 8007800:	2308      	movs	r3, #8
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	429a      	cmp	r2, r3
 8007806:	d91f      	bls.n	8007848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <pvPortMalloc+0xf8>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	613b      	str	r3, [r7, #16]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007842:	69b8      	ldr	r0, [r7, #24]
 8007844:	f000 f908 	bl	8007a58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007848:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <pvPortMalloc+0x188>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	4a1b      	ldr	r2, [pc, #108]	; (80078c0 <pvPortMalloc+0x188>)
 8007854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007856:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <pvPortMalloc+0x188>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <pvPortMalloc+0x190>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d203      	bcs.n	800786a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007862:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <pvPortMalloc+0x188>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a18      	ldr	r2, [pc, #96]	; (80078c8 <pvPortMalloc+0x190>)
 8007868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <pvPortMalloc+0x184>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	431a      	orrs	r2, r3
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800787e:	4b13      	ldr	r3, [pc, #76]	; (80078cc <pvPortMalloc+0x194>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3301      	adds	r3, #1
 8007884:	4a11      	ldr	r2, [pc, #68]	; (80078cc <pvPortMalloc+0x194>)
 8007886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007888:	f001 fe9e 	bl	80095c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <pvPortMalloc+0x174>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	60fb      	str	r3, [r7, #12]
}
 80078a8:	bf00      	nop
 80078aa:	e7fe      	b.n	80078aa <pvPortMalloc+0x172>
	return pvReturn;
 80078ac:	69fb      	ldr	r3, [r7, #28]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3728      	adds	r7, #40	; 0x28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	24009d2c 	.word	0x24009d2c
 80078bc:	24009d40 	.word	0x24009d40
 80078c0:	24009d30 	.word	0x24009d30
 80078c4:	24009d24 	.word	0x24009d24
 80078c8:	24009d34 	.word	0x24009d34
 80078cc:	24009d38 	.word	0x24009d38

080078d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d04d      	beq.n	800797e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078e2:	2308      	movs	r3, #8
 80078e4:	425b      	negs	r3, r3
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4413      	add	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	4b24      	ldr	r3, [pc, #144]	; (8007988 <vPortFree+0xb8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <vPortFree+0x44>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	60fb      	str	r3, [r7, #12]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <vPortFree+0x62>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	60bb      	str	r3, [r7, #8]
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	4b14      	ldr	r3, [pc, #80]	; (8007988 <vPortFree+0xb8>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4013      	ands	r3, r2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01e      	beq.n	800797e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d11a      	bne.n	800797e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <vPortFree+0xb8>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	43db      	mvns	r3, r3
 8007952:	401a      	ands	r2, r3
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007958:	f001 fe28 	bl	80095ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <vPortFree+0xbc>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4413      	add	r3, r2
 8007966:	4a09      	ldr	r2, [pc, #36]	; (800798c <vPortFree+0xbc>)
 8007968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800796a:	6938      	ldr	r0, [r7, #16]
 800796c:	f000 f874 	bl	8007a58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <vPortFree+0xc0>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	4a06      	ldr	r2, [pc, #24]	; (8007990 <vPortFree+0xc0>)
 8007978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800797a:	f001 fe25 	bl	80095c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800797e:	bf00      	nop
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	24009d40 	.word	0x24009d40
 800798c:	24009d30 	.word	0x24009d30
 8007990:	24009d3c 	.word	0x24009d3c

08007994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800799a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800799e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079a0:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <prvHeapInit+0xac>)
 80079a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00c      	beq.n	80079c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3307      	adds	r3, #7
 80079b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0307 	bic.w	r3, r3, #7
 80079ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <prvHeapInit+0xac>)
 80079c4:	4413      	add	r3, r2
 80079c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079cc:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <prvHeapInit+0xb0>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079d2:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <prvHeapInit+0xb0>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	4413      	add	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079e0:	2208      	movs	r2, #8
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0307 	bic.w	r3, r3, #7
 80079ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a15      	ldr	r2, [pc, #84]	; (8007a48 <prvHeapInit+0xb4>)
 80079f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <prvHeapInit+0xb4>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2200      	movs	r2, #0
 80079fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079fe:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <prvHeapInit+0xb4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	1ad2      	subs	r2, r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a14:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <prvHeapInit+0xb4>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4a0a      	ldr	r2, [pc, #40]	; (8007a4c <prvHeapInit+0xb8>)
 8007a22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <prvHeapInit+0xbc>)
 8007a2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <prvHeapInit+0xc0>)
 8007a2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a32:	601a      	str	r2, [r3, #0]
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	24001d24 	.word	0x24001d24
 8007a44:	24009d24 	.word	0x24009d24
 8007a48:	24009d2c 	.word	0x24009d2c
 8007a4c:	24009d34 	.word	0x24009d34
 8007a50:	24009d30 	.word	0x24009d30
 8007a54:	24009d40 	.word	0x24009d40

08007a58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a60:	4b28      	ldr	r3, [pc, #160]	; (8007b04 <prvInsertBlockIntoFreeList+0xac>)
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	e002      	b.n	8007a6c <prvInsertBlockIntoFreeList+0x14>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d8f7      	bhi.n	8007a66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	4413      	add	r3, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d108      	bne.n	8007a9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	441a      	add	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	441a      	add	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d118      	bne.n	8007ae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b15      	ldr	r3, [pc, #84]	; (8007b08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d00d      	beq.n	8007ad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e008      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	e003      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d002      	beq.n	8007af6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	24009d24 	.word	0x24009d24
 8007b08:	24009d2c 	.word	0x24009d2c

08007b0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f103 0208 	add.w	r2, r3, #8
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f04f 32ff 	mov.w	r2, #4294967295
 8007b24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f103 0208 	add.w	r2, r3, #8
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f103 0208 	add.w	r2, r3, #8
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	601a      	str	r2, [r3, #0]
}
 8007ba2:	bf00      	nop
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc4:	d103      	bne.n	8007bce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	e00c      	b.n	8007be8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	e002      	b.n	8007bdc <vListInsert+0x2e>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d2f6      	bcs.n	8007bd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6892      	ldr	r2, [r2, #8]
 8007c36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6852      	ldr	r2, [r2, #4]
 8007c40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d103      	bne.n	8007c54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	1e5a      	subs	r2, r3, #1
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3b04      	subs	r3, #4
 8007c84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3b04      	subs	r3, #4
 8007c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f023 0201 	bic.w	r2, r3, #1
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3b04      	subs	r3, #4
 8007ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ca4:	4a0c      	ldr	r2, [pc, #48]	; (8007cd8 <pxPortInitialiseStack+0x64>)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3b14      	subs	r3, #20
 8007cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3b04      	subs	r3, #4
 8007cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f06f 0202 	mvn.w	r2, #2
 8007cc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3b20      	subs	r3, #32
 8007cc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007cca:	68fb      	ldr	r3, [r7, #12]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	08007cdd 	.word	0x08007cdd

08007cdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ce6:	4b12      	ldr	r3, [pc, #72]	; (8007d30 <prvTaskExitError+0x54>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cee:	d00a      	beq.n	8007d06 <prvTaskExitError+0x2a>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	60fb      	str	r3, [r7, #12]
}
 8007d02:	bf00      	nop
 8007d04:	e7fe      	b.n	8007d04 <prvTaskExitError+0x28>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	60bb      	str	r3, [r7, #8]
}
 8007d18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d1a:	bf00      	nop
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0fc      	beq.n	8007d1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	2400000c 	.word	0x2400000c
	...

08007d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d40:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <pxCurrentTCBConst2>)
 8007d42:	6819      	ldr	r1, [r3, #0]
 8007d44:	6808      	ldr	r0, [r1, #0]
 8007d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4a:	f380 8809 	msr	PSP, r0
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f04f 0000 	mov.w	r0, #0
 8007d56:	f380 8811 	msr	BASEPRI, r0
 8007d5a:	4770      	bx	lr
 8007d5c:	f3af 8000 	nop.w

08007d60 <pxCurrentTCBConst2>:
 8007d60:	24009d4c 	.word	0x24009d4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop

08007d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d68:	4808      	ldr	r0, [pc, #32]	; (8007d8c <prvPortStartFirstTask+0x24>)
 8007d6a:	6800      	ldr	r0, [r0, #0]
 8007d6c:	6800      	ldr	r0, [r0, #0]
 8007d6e:	f380 8808 	msr	MSP, r0
 8007d72:	f04f 0000 	mov.w	r0, #0
 8007d76:	f380 8814 	msr	CONTROL, r0
 8007d7a:	b662      	cpsie	i
 8007d7c:	b661      	cpsie	f
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	df00      	svc	0
 8007d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d8a:	bf00      	nop
 8007d8c:	e000ed08 	.word	0xe000ed08

08007d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d96:	4b46      	ldr	r3, [pc, #280]	; (8007eb0 <xPortStartScheduler+0x120>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a46      	ldr	r2, [pc, #280]	; (8007eb4 <xPortStartScheduler+0x124>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d10a      	bne.n	8007db6 <xPortStartScheduler+0x26>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	613b      	str	r3, [r7, #16]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007db6:	4b3e      	ldr	r3, [pc, #248]	; (8007eb0 <xPortStartScheduler+0x120>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a3f      	ldr	r2, [pc, #252]	; (8007eb8 <xPortStartScheduler+0x128>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d10a      	bne.n	8007dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	60fb      	str	r3, [r7, #12]
}
 8007dd2:	bf00      	nop
 8007dd4:	e7fe      	b.n	8007dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dd6:	4b39      	ldr	r3, [pc, #228]	; (8007ebc <xPortStartScheduler+0x12c>)
 8007dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	22ff      	movs	r2, #255	; 0xff
 8007de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	4b31      	ldr	r3, [pc, #196]	; (8007ec0 <xPortStartScheduler+0x130>)
 8007dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007dfe:	4b31      	ldr	r3, [pc, #196]	; (8007ec4 <xPortStartScheduler+0x134>)
 8007e00:	2207      	movs	r2, #7
 8007e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e04:	e009      	b.n	8007e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e06:	4b2f      	ldr	r3, [pc, #188]	; (8007ec4 <xPortStartScheduler+0x134>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	4a2d      	ldr	r2, [pc, #180]	; (8007ec4 <xPortStartScheduler+0x134>)
 8007e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e1a:	78fb      	ldrb	r3, [r7, #3]
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e22:	2b80      	cmp	r3, #128	; 0x80
 8007e24:	d0ef      	beq.n	8007e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e26:	4b27      	ldr	r3, [pc, #156]	; (8007ec4 <xPortStartScheduler+0x134>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f1c3 0307 	rsb	r3, r3, #7
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d00a      	beq.n	8007e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	60bb      	str	r3, [r7, #8]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e48:	4b1e      	ldr	r3, [pc, #120]	; (8007ec4 <xPortStartScheduler+0x134>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	021b      	lsls	r3, r3, #8
 8007e4e:	4a1d      	ldr	r2, [pc, #116]	; (8007ec4 <xPortStartScheduler+0x134>)
 8007e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e52:	4b1c      	ldr	r3, [pc, #112]	; (8007ec4 <xPortStartScheduler+0x134>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e5a:	4a1a      	ldr	r2, [pc, #104]	; (8007ec4 <xPortStartScheduler+0x134>)
 8007e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e66:	4b18      	ldr	r3, [pc, #96]	; (8007ec8 <xPortStartScheduler+0x138>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a17      	ldr	r2, [pc, #92]	; (8007ec8 <xPortStartScheduler+0x138>)
 8007e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e72:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <xPortStartScheduler+0x138>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a14      	ldr	r2, [pc, #80]	; (8007ec8 <xPortStartScheduler+0x138>)
 8007e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e7e:	f000 f8dd 	bl	800803c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e82:	4b12      	ldr	r3, [pc, #72]	; (8007ecc <xPortStartScheduler+0x13c>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e88:	f000 f8fc 	bl	8008084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e8c:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <xPortStartScheduler+0x140>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a0f      	ldr	r2, [pc, #60]	; (8007ed0 <xPortStartScheduler+0x140>)
 8007e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e98:	f7ff ff66 	bl	8007d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e9c:	f001 fcfc 	bl	8009898 <vTaskSwitchContext>
	prvTaskExitError();
 8007ea0:	f7ff ff1c 	bl	8007cdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	e000ed00 	.word	0xe000ed00
 8007eb4:	410fc271 	.word	0x410fc271
 8007eb8:	410fc270 	.word	0x410fc270
 8007ebc:	e000e400 	.word	0xe000e400
 8007ec0:	24009d44 	.word	0x24009d44
 8007ec4:	24009d48 	.word	0x24009d48
 8007ec8:	e000ed20 	.word	0xe000ed20
 8007ecc:	2400000c 	.word	0x2400000c
 8007ed0:	e000ef34 	.word	0xe000ef34

08007ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	607b      	str	r3, [r7, #4]
}
 8007eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007eee:	4b0f      	ldr	r3, [pc, #60]	; (8007f2c <vPortEnterCritical+0x58>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	4a0d      	ldr	r2, [pc, #52]	; (8007f2c <vPortEnterCritical+0x58>)
 8007ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ef8:	4b0c      	ldr	r3, [pc, #48]	; (8007f2c <vPortEnterCritical+0x58>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d10f      	bne.n	8007f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f00:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <vPortEnterCritical+0x5c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	603b      	str	r3, [r7, #0]
}
 8007f1c:	bf00      	nop
 8007f1e:	e7fe      	b.n	8007f1e <vPortEnterCritical+0x4a>
	}
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	2400000c 	.word	0x2400000c
 8007f30:	e000ed04 	.word	0xe000ed04

08007f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f3a:	4b12      	ldr	r3, [pc, #72]	; (8007f84 <vPortExitCritical+0x50>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <vPortExitCritical+0x24>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	607b      	str	r3, [r7, #4]
}
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f58:	4b0a      	ldr	r3, [pc, #40]	; (8007f84 <vPortExitCritical+0x50>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	4a09      	ldr	r2, [pc, #36]	; (8007f84 <vPortExitCritical+0x50>)
 8007f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f62:	4b08      	ldr	r3, [pc, #32]	; (8007f84 <vPortExitCritical+0x50>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d105      	bne.n	8007f76 <vPortExitCritical+0x42>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	2400000c 	.word	0x2400000c
	...

08007f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f90:	f3ef 8009 	mrs	r0, PSP
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	4b15      	ldr	r3, [pc, #84]	; (8007ff0 <pxCurrentTCBConst>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	f01e 0f10 	tst.w	lr, #16
 8007fa0:	bf08      	it	eq
 8007fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007faa:	6010      	str	r0, [r2, #0]
 8007fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007fb4:	f380 8811 	msr	BASEPRI, r0
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f001 fc6a 	bl	8009898 <vTaskSwitchContext>
 8007fc4:	f04f 0000 	mov.w	r0, #0
 8007fc8:	f380 8811 	msr	BASEPRI, r0
 8007fcc:	bc09      	pop	{r0, r3}
 8007fce:	6819      	ldr	r1, [r3, #0]
 8007fd0:	6808      	ldr	r0, [r1, #0]
 8007fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd6:	f01e 0f10 	tst.w	lr, #16
 8007fda:	bf08      	it	eq
 8007fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007fe0:	f380 8809 	msr	PSP, r0
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	f3af 8000 	nop.w

08007ff0 <pxCurrentTCBConst>:
 8007ff0:	24009d4c 	.word	0x24009d4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop

08007ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	607b      	str	r3, [r7, #4]
}
 8008010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008012:	f001 fb87 	bl	8009724 <xTaskIncrementTick>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800801c:	4b06      	ldr	r3, [pc, #24]	; (8008038 <xPortSysTickHandler+0x40>)
 800801e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	2300      	movs	r3, #0
 8008026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	f383 8811 	msr	BASEPRI, r3
}
 800802e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800803c:	b480      	push	{r7}
 800803e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008040:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <vPortSetupTimerInterrupt+0x34>)
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008046:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <vPortSetupTimerInterrupt+0x38>)
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800804c:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <vPortSetupTimerInterrupt+0x3c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a0a      	ldr	r2, [pc, #40]	; (800807c <vPortSetupTimerInterrupt+0x40>)
 8008052:	fba2 2303 	umull	r2, r3, r2, r3
 8008056:	099b      	lsrs	r3, r3, #6
 8008058:	4a09      	ldr	r2, [pc, #36]	; (8008080 <vPortSetupTimerInterrupt+0x44>)
 800805a:	3b01      	subs	r3, #1
 800805c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800805e:	4b04      	ldr	r3, [pc, #16]	; (8008070 <vPortSetupTimerInterrupt+0x34>)
 8008060:	2207      	movs	r2, #7
 8008062:	601a      	str	r2, [r3, #0]
}
 8008064:	bf00      	nop
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	e000e010 	.word	0xe000e010
 8008074:	e000e018 	.word	0xe000e018
 8008078:	24000010 	.word	0x24000010
 800807c:	10624dd3 	.word	0x10624dd3
 8008080:	e000e014 	.word	0xe000e014

08008084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008094 <vPortEnableVFP+0x10>
 8008088:	6801      	ldr	r1, [r0, #0]
 800808a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800808e:	6001      	str	r1, [r0, #0]
 8008090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008092:	bf00      	nop
 8008094:	e000ed88 	.word	0xe000ed88

08008098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800809e:	f3ef 8305 	mrs	r3, IPSR
 80080a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2b0f      	cmp	r3, #15
 80080a8:	d914      	bls.n	80080d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080aa:	4a17      	ldr	r2, [pc, #92]	; (8008108 <vPortValidateInterruptPriority+0x70>)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4413      	add	r3, r2
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080b4:	4b15      	ldr	r3, [pc, #84]	; (800810c <vPortValidateInterruptPriority+0x74>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	7afa      	ldrb	r2, [r7, #11]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d20a      	bcs.n	80080d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	607b      	str	r3, [r7, #4]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080d4:	4b0e      	ldr	r3, [pc, #56]	; (8008110 <vPortValidateInterruptPriority+0x78>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080dc:	4b0d      	ldr	r3, [pc, #52]	; (8008114 <vPortValidateInterruptPriority+0x7c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d90a      	bls.n	80080fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	603b      	str	r3, [r7, #0]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <vPortValidateInterruptPriority+0x60>
	}
 80080fa:	bf00      	nop
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	e000e3f0 	.word	0xe000e3f0
 800810c:	24009d44 	.word	0x24009d44
 8008110:	e000ed0c 	.word	0xe000ed0c
 8008114:	24009d48 	.word	0x24009d48

08008118 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <xQueueGenericReset+0x2a>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60bb      	str	r3, [r7, #8]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008142:	f7ff fec7 	bl	8007ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814e:	68f9      	ldr	r1, [r7, #12]
 8008150:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008152:	fb01 f303 	mul.w	r3, r1, r3
 8008156:	441a      	add	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008172:	3b01      	subs	r3, #1
 8008174:	68f9      	ldr	r1, [r7, #12]
 8008176:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008178:	fb01 f303 	mul.w	r3, r1, r3
 800817c:	441a      	add	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	22ff      	movs	r2, #255	; 0xff
 8008186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	22ff      	movs	r2, #255	; 0xff
 800818e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d114      	bne.n	80081c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01a      	beq.n	80081d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3310      	adds	r3, #16
 80081a4:	4618      	mov	r0, r3
 80081a6:	f001 fc25 	bl	80099f4 <xTaskRemoveFromEventList>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d012      	beq.n	80081d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081b0:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <xQueueGenericReset+0xcc>)
 80081b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	e009      	b.n	80081d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3310      	adds	r3, #16
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff fca0 	bl	8007b0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3324      	adds	r3, #36	; 0x24
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7ff fc9b 	bl	8007b0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80081d6:	f7ff fead 	bl	8007f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80081da:	2301      	movs	r3, #1
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	e000ed04 	.word	0xe000ed04

080081e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08e      	sub	sp, #56	; 0x38
 80081ec:	af02      	add	r7, sp, #8
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10a      	bne.n	800822e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
}
 800822a:	bf00      	nop
 800822c:	e7fe      	b.n	800822c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <xQueueGenericCreateStatic+0x52>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <xQueueGenericCreateStatic+0x56>
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <xQueueGenericCreateStatic+0x58>
 800823e:	2300      	movs	r3, #0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	623b      	str	r3, [r7, #32]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <xQueueGenericCreateStatic+0x7e>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <xQueueGenericCreateStatic+0x82>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <xQueueGenericCreateStatic+0x84>
 800826a:	2300      	movs	r3, #0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	61fb      	str	r3, [r7, #28]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008286:	2350      	movs	r3, #80	; 0x50
 8008288:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2b50      	cmp	r3, #80	; 0x50
 800828e:	d00a      	beq.n	80082a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	61bb      	str	r3, [r7, #24]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00d      	beq.n	80082ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	4613      	mov	r3, r2
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f83f 	bl	800834c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3730      	adds	r7, #48	; 0x30
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08a      	sub	sp, #40	; 0x28
 80082dc:	af02      	add	r7, sp, #8
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	4613      	mov	r3, r2
 80082e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10a      	bne.n	8008302 <xQueueGenericCreate+0x2a>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	613b      	str	r3, [r7, #16]
}
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	fb02 f303 	mul.w	r3, r2, r3
 800830a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	3350      	adds	r3, #80	; 0x50
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff fa11 	bl	8007738 <pvPortMalloc>
 8008316:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d011      	beq.n	8008342 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	3350      	adds	r3, #80	; 0x50
 8008326:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008330:	79fa      	ldrb	r2, [r7, #7]
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	4613      	mov	r3, r2
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f805 	bl	800834c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008342:	69bb      	ldr	r3, [r7, #24]
	}
 8008344:	4618      	mov	r0, r3
 8008346:	3720      	adds	r7, #32
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d103      	bne.n	8008368 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e002      	b.n	800836e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800837a:	2101      	movs	r1, #1
 800837c:	69b8      	ldr	r0, [r7, #24]
 800837e:	f7ff fecb 	bl	8008118 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800838a:	bf00      	nop
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008392:	b580      	push	{r7, lr}
 8008394:	b08a      	sub	sp, #40	; 0x28
 8008396:	af02      	add	r7, sp, #8
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	61bb      	str	r3, [r7, #24]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d90a      	bls.n	80083d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	617b      	str	r3, [r7, #20]
}
 80083d4:	bf00      	nop
 80083d6:	e7fe      	b.n	80083d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80083d8:	2302      	movs	r3, #2
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	2100      	movs	r1, #0
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7ff ff00 	bl	80081e8 <xQueueGenericCreateStatic>
 80083e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80083f6:	69fb      	ldr	r3, [r7, #28]
	}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10a      	bne.n	8008426 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	613b      	str	r3, [r7, #16]
}
 8008422:	bf00      	nop
 8008424:	e7fe      	b.n	8008424 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	429a      	cmp	r2, r3
 800842c:	d90a      	bls.n	8008444 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	60fb      	str	r3, [r7, #12]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008444:	2202      	movs	r2, #2
 8008446:	2100      	movs	r1, #0
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7ff ff45 	bl	80082d8 <xQueueGenericCreate>
 800844e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800845c:	697b      	ldr	r3, [r7, #20]
	}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08e      	sub	sp, #56	; 0x38
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008476:	2300      	movs	r3, #0
 8008478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10a      	bne.n	800849a <xQueueGenericSend+0x32>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <xQueueGenericSend+0x40>
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <xQueueGenericSend+0x44>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <xQueueGenericSend+0x46>
 80084ac:	2300      	movs	r3, #0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <xQueueGenericSend+0x60>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084c4:	bf00      	nop
 80084c6:	e7fe      	b.n	80084c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d103      	bne.n	80084d6 <xQueueGenericSend+0x6e>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <xQueueGenericSend+0x72>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <xQueueGenericSend+0x74>
 80084da:	2300      	movs	r3, #0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10a      	bne.n	80084f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	623b      	str	r3, [r7, #32]
}
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084f6:	f001 fc3b 	bl	8009d70 <xTaskGetSchedulerState>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d102      	bne.n	8008506 <xQueueGenericSend+0x9e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <xQueueGenericSend+0xa2>
 8008506:	2301      	movs	r3, #1
 8008508:	e000      	b.n	800850c <xQueueGenericSend+0xa4>
 800850a:	2300      	movs	r3, #0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <xQueueGenericSend+0xbe>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	61fb      	str	r3, [r7, #28]
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008526:	f7ff fcd5 	bl	8007ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	429a      	cmp	r2, r3
 8008534:	d302      	bcc.n	800853c <xQueueGenericSend+0xd4>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b02      	cmp	r3, #2
 800853a:	d129      	bne.n	8008590 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	68b9      	ldr	r1, [r7, #8]
 8008540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008542:	f000 fc5e 	bl	8008e02 <prvCopyDataToQueue>
 8008546:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	2b00      	cmp	r3, #0
 800854e:	d010      	beq.n	8008572 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	3324      	adds	r3, #36	; 0x24
 8008554:	4618      	mov	r0, r3
 8008556:	f001 fa4d 	bl	80099f4 <xTaskRemoveFromEventList>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d013      	beq.n	8008588 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008560:	4b3f      	ldr	r3, [pc, #252]	; (8008660 <xQueueGenericSend+0x1f8>)
 8008562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	e00a      	b.n	8008588 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d007      	beq.n	8008588 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008578:	4b39      	ldr	r3, [pc, #228]	; (8008660 <xQueueGenericSend+0x1f8>)
 800857a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008588:	f7ff fcd4 	bl	8007f34 <vPortExitCritical>
				return pdPASS;
 800858c:	2301      	movs	r3, #1
 800858e:	e063      	b.n	8008658 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008596:	f7ff fccd 	bl	8007f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800859a:	2300      	movs	r3, #0
 800859c:	e05c      	b.n	8008658 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d106      	bne.n	80085b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085a4:	f107 0314 	add.w	r3, r7, #20
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 fa87 	bl	8009abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085ae:	2301      	movs	r3, #1
 80085b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085b2:	f7ff fcbf 	bl	8007f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085b6:	f000 fff9 	bl	80095ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085ba:	f7ff fc8b 	bl	8007ed4 <vPortEnterCritical>
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085c4:	b25b      	sxtb	r3, r3
 80085c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ca:	d103      	bne.n	80085d4 <xQueueGenericSend+0x16c>
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085da:	b25b      	sxtb	r3, r3
 80085dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e0:	d103      	bne.n	80085ea <xQueueGenericSend+0x182>
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085ea:	f7ff fca3 	bl	8007f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085ee:	1d3a      	adds	r2, r7, #4
 80085f0:	f107 0314 	add.w	r3, r7, #20
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f001 fa76 	bl	8009ae8 <xTaskCheckForTimeOut>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d124      	bne.n	800864c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008604:	f000 fcf5 	bl	8008ff2 <prvIsQueueFull>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d018      	beq.n	8008640 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	3310      	adds	r3, #16
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f001 f99c 	bl	8009954 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800861c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800861e:	f000 fc80 	bl	8008f22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008622:	f000 ffd1 	bl	80095c8 <xTaskResumeAll>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	f47f af7c 	bne.w	8008526 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800862e:	4b0c      	ldr	r3, [pc, #48]	; (8008660 <xQueueGenericSend+0x1f8>)
 8008630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	e772      	b.n	8008526 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008642:	f000 fc6e 	bl	8008f22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008646:	f000 ffbf 	bl	80095c8 <xTaskResumeAll>
 800864a:	e76c      	b.n	8008526 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800864c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800864e:	f000 fc68 	bl	8008f22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008652:	f000 ffb9 	bl	80095c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008656:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008658:	4618      	mov	r0, r3
 800865a:	3738      	adds	r7, #56	; 0x38
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	e000ed04 	.word	0xe000ed04

08008664 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b090      	sub	sp, #64	; 0x40
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d103      	bne.n	80086a0 <xQueueGenericSendFromISR+0x3c>
 8008698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <xQueueGenericSendFromISR+0x40>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <xQueueGenericSendFromISR+0x42>
 80086a4:	2300      	movs	r3, #0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d103      	bne.n	80086ce <xQueueGenericSendFromISR+0x6a>
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d101      	bne.n	80086d2 <xQueueGenericSendFromISR+0x6e>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e000      	b.n	80086d4 <xQueueGenericSendFromISR+0x70>
 80086d2:	2300      	movs	r3, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	623b      	str	r3, [r7, #32]
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086ee:	f7ff fcd3 	bl	8008098 <vPortValidateInterruptPriority>
	__asm volatile
 80086f2:	f3ef 8211 	mrs	r2, BASEPRI
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	61fa      	str	r2, [r7, #28]
 8008708:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800870a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800870c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008716:	429a      	cmp	r2, r3
 8008718:	d302      	bcc.n	8008720 <xQueueGenericSendFromISR+0xbc>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b02      	cmp	r3, #2
 800871e:	d12f      	bne.n	8008780 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	68b9      	ldr	r1, [r7, #8]
 8008734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008736:	f000 fb64 	bl	8008e02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800873a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800873e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008742:	d112      	bne.n	800876a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	2b00      	cmp	r3, #0
 800874a:	d016      	beq.n	800877a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	3324      	adds	r3, #36	; 0x24
 8008750:	4618      	mov	r0, r3
 8008752:	f001 f94f 	bl	80099f4 <xTaskRemoveFromEventList>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00e      	beq.n	800877a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00b      	beq.n	800877a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	e007      	b.n	800877a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800876a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800876e:	3301      	adds	r3, #1
 8008770:	b2db      	uxtb	r3, r3
 8008772:	b25a      	sxtb	r2, r3
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800877a:	2301      	movs	r3, #1
 800877c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800877e:	e001      	b.n	8008784 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008780:	2300      	movs	r3, #0
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008786:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f383 8811 	msr	BASEPRI, r3
}
 800878e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008792:	4618      	mov	r0, r3
 8008794:	3740      	adds	r7, #64	; 0x40
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b08e      	sub	sp, #56	; 0x38
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	623b      	str	r3, [r7, #32]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	61fb      	str	r3, [r7, #28]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d103      	bne.n	80087f2 <xQueueGiveFromISR+0x58>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <xQueueGiveFromISR+0x5c>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <xQueueGiveFromISR+0x5e>
 80087f6:	2300      	movs	r3, #0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <xQueueGiveFromISR+0x78>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	61bb      	str	r3, [r7, #24]
}
 800880e:	bf00      	nop
 8008810:	e7fe      	b.n	8008810 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008812:	f7ff fc41 	bl	8008098 <vPortValidateInterruptPriority>
	__asm volatile
 8008816:	f3ef 8211 	mrs	r2, BASEPRI
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	617a      	str	r2, [r7, #20]
 800882c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800882e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800883e:	429a      	cmp	r2, r3
 8008840:	d22b      	bcs.n	800889a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008854:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885c:	d112      	bne.n	8008884 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	2b00      	cmp	r3, #0
 8008864:	d016      	beq.n	8008894 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	3324      	adds	r3, #36	; 0x24
 800886a:	4618      	mov	r0, r3
 800886c:	f001 f8c2 	bl	80099f4 <xTaskRemoveFromEventList>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00e      	beq.n	8008894 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00b      	beq.n	8008894 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2201      	movs	r2, #1
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	e007      	b.n	8008894 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008888:	3301      	adds	r3, #1
 800888a:	b2db      	uxtb	r3, r3
 800888c:	b25a      	sxtb	r2, r3
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008894:	2301      	movs	r3, #1
 8008896:	637b      	str	r3, [r7, #52]	; 0x34
 8008898:	e001      	b.n	800889e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800889a:	2300      	movs	r3, #0
 800889c:	637b      	str	r3, [r7, #52]	; 0x34
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f383 8811 	msr	BASEPRI, r3
}
 80088a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3738      	adds	r7, #56	; 0x38
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08c      	sub	sp, #48	; 0x30
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80088c0:	2300      	movs	r3, #0
 80088c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10a      	bne.n	80088e4 <xQueueReceive+0x30>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	623b      	str	r3, [r7, #32]
}
 80088e0:	bf00      	nop
 80088e2:	e7fe      	b.n	80088e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d103      	bne.n	80088f2 <xQueueReceive+0x3e>
 80088ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <xQueueReceive+0x42>
 80088f2:	2301      	movs	r3, #1
 80088f4:	e000      	b.n	80088f8 <xQueueReceive+0x44>
 80088f6:	2300      	movs	r3, #0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10a      	bne.n	8008912 <xQueueReceive+0x5e>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	61fb      	str	r3, [r7, #28]
}
 800890e:	bf00      	nop
 8008910:	e7fe      	b.n	8008910 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008912:	f001 fa2d 	bl	8009d70 <xTaskGetSchedulerState>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d102      	bne.n	8008922 <xQueueReceive+0x6e>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <xQueueReceive+0x72>
 8008922:	2301      	movs	r3, #1
 8008924:	e000      	b.n	8008928 <xQueueReceive+0x74>
 8008926:	2300      	movs	r3, #0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10a      	bne.n	8008942 <xQueueReceive+0x8e>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	61bb      	str	r3, [r7, #24]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008942:	f7ff fac7 	bl	8007ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	2b00      	cmp	r3, #0
 8008950:	d01f      	beq.n	8008992 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008952:	68b9      	ldr	r1, [r7, #8]
 8008954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008956:	f000 fabe 	bl	8008ed6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	1e5a      	subs	r2, r3, #1
 800895e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008960:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00f      	beq.n	800898a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	3310      	adds	r3, #16
 800896e:	4618      	mov	r0, r3
 8008970:	f001 f840 	bl	80099f4 <xTaskRemoveFromEventList>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d007      	beq.n	800898a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800897a:	4b3d      	ldr	r3, [pc, #244]	; (8008a70 <xQueueReceive+0x1bc>)
 800897c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800898a:	f7ff fad3 	bl	8007f34 <vPortExitCritical>
				return pdPASS;
 800898e:	2301      	movs	r3, #1
 8008990:	e069      	b.n	8008a66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d103      	bne.n	80089a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008998:	f7ff facc 	bl	8007f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800899c:	2300      	movs	r3, #0
 800899e:	e062      	b.n	8008a66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089a6:	f107 0310 	add.w	r3, r7, #16
 80089aa:	4618      	mov	r0, r3
 80089ac:	f001 f886 	bl	8009abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089b0:	2301      	movs	r3, #1
 80089b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089b4:	f7ff fabe 	bl	8007f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089b8:	f000 fdf8 	bl	80095ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089bc:	f7ff fa8a 	bl	8007ed4 <vPortEnterCritical>
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089c6:	b25b      	sxtb	r3, r3
 80089c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089cc:	d103      	bne.n	80089d6 <xQueueReceive+0x122>
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089dc:	b25b      	sxtb	r3, r3
 80089de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e2:	d103      	bne.n	80089ec <xQueueReceive+0x138>
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089ec:	f7ff faa2 	bl	8007f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089f0:	1d3a      	adds	r2, r7, #4
 80089f2:	f107 0310 	add.w	r3, r7, #16
 80089f6:	4611      	mov	r1, r2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f001 f875 	bl	8009ae8 <xTaskCheckForTimeOut>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d123      	bne.n	8008a4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a06:	f000 fade 	bl	8008fc6 <prvIsQueueEmpty>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d017      	beq.n	8008a40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	3324      	adds	r3, #36	; 0x24
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	4611      	mov	r1, r2
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 ff9b 	bl	8009954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a20:	f000 fa7f 	bl	8008f22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a24:	f000 fdd0 	bl	80095c8 <xTaskResumeAll>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d189      	bne.n	8008942 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a2e:	4b10      	ldr	r3, [pc, #64]	; (8008a70 <xQueueReceive+0x1bc>)
 8008a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	e780      	b.n	8008942 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a42:	f000 fa6e 	bl	8008f22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a46:	f000 fdbf 	bl	80095c8 <xTaskResumeAll>
 8008a4a:	e77a      	b.n	8008942 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a4e:	f000 fa68 	bl	8008f22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a52:	f000 fdb9 	bl	80095c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a58:	f000 fab5 	bl	8008fc6 <prvIsQueueEmpty>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f43f af6f 	beq.w	8008942 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3730      	adds	r7, #48	; 0x30
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	e000ed04 	.word	0xe000ed04

08008a74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08e      	sub	sp, #56	; 0x38
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	623b      	str	r3, [r7, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00a      	beq.n	8008ac4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	61fb      	str	r3, [r7, #28]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ac4:	f001 f954 	bl	8009d70 <xTaskGetSchedulerState>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d102      	bne.n	8008ad4 <xQueueSemaphoreTake+0x60>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <xQueueSemaphoreTake+0x64>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <xQueueSemaphoreTake+0x66>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10a      	bne.n	8008af4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	61bb      	str	r3, [r7, #24]
}
 8008af0:	bf00      	nop
 8008af2:	e7fe      	b.n	8008af2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008af4:	f7ff f9ee 	bl	8007ed4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d024      	beq.n	8008b4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b06:	1e5a      	subs	r2, r3, #1
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d104      	bne.n	8008b1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008b14:	f001 faa2 	bl	800a05c <pvTaskIncrementMutexHeldCount>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00f      	beq.n	8008b46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	3310      	adds	r3, #16
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 ff62 	bl	80099f4 <xTaskRemoveFromEventList>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d007      	beq.n	8008b46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b36:	4b54      	ldr	r3, [pc, #336]	; (8008c88 <xQueueSemaphoreTake+0x214>)
 8008b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b46:	f7ff f9f5 	bl	8007f34 <vPortExitCritical>
				return pdPASS;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e097      	b.n	8008c7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d111      	bne.n	8008b78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	617b      	str	r3, [r7, #20]
}
 8008b6c:	bf00      	nop
 8008b6e:	e7fe      	b.n	8008b6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008b70:	f7ff f9e0 	bl	8007f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b74:	2300      	movs	r3, #0
 8008b76:	e082      	b.n	8008c7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d106      	bne.n	8008b8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b7e:	f107 030c 	add.w	r3, r7, #12
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 ff9a 	bl	8009abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b8c:	f7ff f9d2 	bl	8007f34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b90:	f000 fd0c 	bl	80095ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b94:	f7ff f99e 	bl	8007ed4 <vPortEnterCritical>
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b9e:	b25b      	sxtb	r3, r3
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba4:	d103      	bne.n	8008bae <xQueueSemaphoreTake+0x13a>
 8008ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb4:	b25b      	sxtb	r3, r3
 8008bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bba:	d103      	bne.n	8008bc4 <xQueueSemaphoreTake+0x150>
 8008bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bc4:	f7ff f9b6 	bl	8007f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bc8:	463a      	mov	r2, r7
 8008bca:	f107 030c 	add.w	r3, r7, #12
 8008bce:	4611      	mov	r1, r2
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 ff89 	bl	8009ae8 <xTaskCheckForTimeOut>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d132      	bne.n	8008c42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bde:	f000 f9f2 	bl	8008fc6 <prvIsQueueEmpty>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d026      	beq.n	8008c36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d109      	bne.n	8008c04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008bf0:	f7ff f970 	bl	8007ed4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f001 f8d7 	bl	8009dac <xTaskPriorityInherit>
 8008bfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008c00:	f7ff f998 	bl	8007f34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c06:	3324      	adds	r3, #36	; 0x24
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fea1 	bl	8009954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c14:	f000 f985 	bl	8008f22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c18:	f000 fcd6 	bl	80095c8 <xTaskResumeAll>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f47f af68 	bne.w	8008af4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008c24:	4b18      	ldr	r3, [pc, #96]	; (8008c88 <xQueueSemaphoreTake+0x214>)
 8008c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	e75e      	b.n	8008af4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008c36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c38:	f000 f973 	bl	8008f22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c3c:	f000 fcc4 	bl	80095c8 <xTaskResumeAll>
 8008c40:	e758      	b.n	8008af4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c44:	f000 f96d 	bl	8008f22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c48:	f000 fcbe 	bl	80095c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c4e:	f000 f9ba 	bl	8008fc6 <prvIsQueueEmpty>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f43f af4d 	beq.w	8008af4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00d      	beq.n	8008c7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008c60:	f7ff f938 	bl	8007ed4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008c64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c66:	f000 f8b4 	bl	8008dd2 <prvGetDisinheritPriorityAfterTimeout>
 8008c6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 f970 	bl	8009f58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008c78:	f7ff f95c 	bl	8007f34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3738      	adds	r7, #56	; 0x38
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	e000ed04 	.word	0xe000ed04

08008c8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b08e      	sub	sp, #56	; 0x38
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10a      	bne.n	8008cb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	623b      	str	r3, [r7, #32]
}
 8008cb4:	bf00      	nop
 8008cb6:	e7fe      	b.n	8008cb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d103      	bne.n	8008cc6 <xQueueReceiveFromISR+0x3a>
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <xQueueReceiveFromISR+0x3e>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e000      	b.n	8008ccc <xQueueReceiveFromISR+0x40>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10a      	bne.n	8008ce6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	61fb      	str	r3, [r7, #28]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ce6:	f7ff f9d7 	bl	8008098 <vPortValidateInterruptPriority>
	__asm volatile
 8008cea:	f3ef 8211 	mrs	r2, BASEPRI
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	61ba      	str	r2, [r7, #24]
 8008d00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d02f      	beq.n	8008d72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d1c:	68b9      	ldr	r1, [r7, #8]
 8008d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d20:	f000 f8d9 	bl	8008ed6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	1e5a      	subs	r2, r3, #1
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008d2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d34:	d112      	bne.n	8008d5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d016      	beq.n	8008d6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	3310      	adds	r3, #16
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fe56 	bl	80099f4 <xTaskRemoveFromEventList>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00e      	beq.n	8008d6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	e007      	b.n	8008d6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d60:	3301      	adds	r3, #1
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	b25a      	sxtb	r2, r3
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d70:	e001      	b.n	8008d76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	637b      	str	r3, [r7, #52]	; 0x34
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	f383 8811 	msr	BASEPRI, r3
}
 8008d80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3738      	adds	r7, #56	; 0x38
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10a      	bne.n	8008db4 <vQueueDelete+0x28>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	60bb      	str	r3, [r7, #8]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 f95f 	bl	8009078 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d102      	bne.n	8008dca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f7fe fd83 	bl	80078d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d006      	beq.n	8008df0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	e001      	b.n	8008df4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008df0:	2300      	movs	r3, #0
 8008df2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008df4:	68fb      	ldr	r3, [r7, #12]
	}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b086      	sub	sp, #24
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10d      	bne.n	8008e3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d14d      	bne.n	8008ec4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f001 f825 	bl	8009e7c <xTaskPriorityDisinherit>
 8008e32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	609a      	str	r2, [r3, #8]
 8008e3a:	e043      	b.n	8008ec4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d119      	bne.n	8008e76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6858      	ldr	r0, [r3, #4]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	68b9      	ldr	r1, [r7, #8]
 8008e4e:	f01c ffa1 	bl	8025d94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	441a      	add	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d32b      	bcc.n	8008ec4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	605a      	str	r2, [r3, #4]
 8008e74:	e026      	b.n	8008ec4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	68d8      	ldr	r0, [r3, #12]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68b9      	ldr	r1, [r7, #8]
 8008e82:	f01c ff87 	bl	8025d94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8e:	425b      	negs	r3, r3
 8008e90:	441a      	add	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	68da      	ldr	r2, [r3, #12]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d207      	bcs.n	8008eb2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	425b      	negs	r3, r3
 8008eac:	441a      	add	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d105      	bne.n	8008ec4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ecc:	697b      	ldr	r3, [r7, #20]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d018      	beq.n	8008f1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef0:	441a      	add	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d303      	bcc.n	8008f0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68d9      	ldr	r1, [r3, #12]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	461a      	mov	r2, r3
 8008f14:	6838      	ldr	r0, [r7, #0]
 8008f16:	f01c ff3d 	bl	8025d94 <memcpy>
	}
}
 8008f1a:	bf00      	nop
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f2a:	f7fe ffd3 	bl	8007ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f36:	e011      	b.n	8008f5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d012      	beq.n	8008f66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3324      	adds	r3, #36	; 0x24
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fd55 	bl	80099f4 <xTaskRemoveFromEventList>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f50:	f000 fe2c 	bl	8009bac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	dce9      	bgt.n	8008f38 <prvUnlockQueue+0x16>
 8008f64:	e000      	b.n	8008f68 <prvUnlockQueue+0x46>
					break;
 8008f66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	22ff      	movs	r2, #255	; 0xff
 8008f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f70:	f7fe ffe0 	bl	8007f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f74:	f7fe ffae 	bl	8007ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f80:	e011      	b.n	8008fa6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d012      	beq.n	8008fb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3310      	adds	r3, #16
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fd30 	bl	80099f4 <xTaskRemoveFromEventList>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f9a:	f000 fe07 	bl	8009bac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	dce9      	bgt.n	8008f82 <prvUnlockQueue+0x60>
 8008fae:	e000      	b.n	8008fb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008fb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	22ff      	movs	r2, #255	; 0xff
 8008fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008fba:	f7fe ffbb 	bl	8007f34 <vPortExitCritical>
}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fce:	f7fe ff81 	bl	8007ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d102      	bne.n	8008fe0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	e001      	b.n	8008fe4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fe4:	f7fe ffa6 	bl	8007f34 <vPortExitCritical>

	return xReturn;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ffa:	f7fe ff6b 	bl	8007ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009006:	429a      	cmp	r2, r3
 8009008:	d102      	bne.n	8009010 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800900a:	2301      	movs	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]
 800900e:	e001      	b.n	8009014 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009014:	f7fe ff8e 	bl	8007f34 <vPortExitCritical>

	return xReturn;
 8009018:	68fb      	ldr	r3, [r7, #12]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800902e:	2300      	movs	r3, #0
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	e014      	b.n	800905e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009034:	4a0f      	ldr	r2, [pc, #60]	; (8009074 <vQueueAddToRegistry+0x50>)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10b      	bne.n	8009058 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009040:	490c      	ldr	r1, [pc, #48]	; (8009074 <vQueueAddToRegistry+0x50>)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800904a:	4a0a      	ldr	r2, [pc, #40]	; (8009074 <vQueueAddToRegistry+0x50>)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	00db      	lsls	r3, r3, #3
 8009050:	4413      	add	r3, r2
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009056:	e006      	b.n	8009066 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3301      	adds	r3, #1
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b07      	cmp	r3, #7
 8009062:	d9e7      	bls.n	8009034 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	2400b390 	.word	0x2400b390

08009078 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	e016      	b.n	80090b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009086:	4a10      	ldr	r2, [pc, #64]	; (80090c8 <vQueueUnregisterQueue+0x50>)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	00db      	lsls	r3, r3, #3
 800908c:	4413      	add	r3, r2
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	429a      	cmp	r2, r3
 8009094:	d10b      	bne.n	80090ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009096:	4a0c      	ldr	r2, [pc, #48]	; (80090c8 <vQueueUnregisterQueue+0x50>)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2100      	movs	r1, #0
 800909c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80090a0:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <vQueueUnregisterQueue+0x50>)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	00db      	lsls	r3, r3, #3
 80090a6:	4413      	add	r3, r2
 80090a8:	2200      	movs	r2, #0
 80090aa:	605a      	str	r2, [r3, #4]
				break;
 80090ac:	e006      	b.n	80090bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3301      	adds	r3, #1
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b07      	cmp	r3, #7
 80090b8:	d9e5      	bls.n	8009086 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80090ba:	bf00      	nop
 80090bc:	bf00      	nop
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	2400b390 	.word	0x2400b390

080090cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090dc:	f7fe fefa 	bl	8007ed4 <vPortEnterCritical>
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090e6:	b25b      	sxtb	r3, r3
 80090e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ec:	d103      	bne.n	80090f6 <vQueueWaitForMessageRestricted+0x2a>
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090fc:	b25b      	sxtb	r3, r3
 80090fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009102:	d103      	bne.n	800910c <vQueueWaitForMessageRestricted+0x40>
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800910c:	f7fe ff12 	bl	8007f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009114:	2b00      	cmp	r3, #0
 8009116:	d106      	bne.n	8009126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	3324      	adds	r3, #36	; 0x24
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	68b9      	ldr	r1, [r7, #8]
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fc3b 	bl	800999c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009126:	6978      	ldr	r0, [r7, #20]
 8009128:	f7ff fefb 	bl	8008f22 <prvUnlockQueue>
	}
 800912c:	bf00      	nop
 800912e:	3718      	adds	r7, #24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08e      	sub	sp, #56	; 0x38
 8009138:	af04      	add	r7, sp, #16
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	623b      	str	r3, [r7, #32]
}
 800915a:	bf00      	nop
 800915c:	e7fe      	b.n	800915c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <xTaskCreateStatic+0x46>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	61fb      	str	r3, [r7, #28]
}
 8009176:	bf00      	nop
 8009178:	e7fe      	b.n	8009178 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800917a:	235c      	movs	r3, #92	; 0x5c
 800917c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b5c      	cmp	r3, #92	; 0x5c
 8009182:	d00a      	beq.n	800919a <xTaskCreateStatic+0x66>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	61bb      	str	r3, [r7, #24]
}
 8009196:	bf00      	nop
 8009198:	e7fe      	b.n	8009198 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800919a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01e      	beq.n	80091e0 <xTaskCreateStatic+0xac>
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01b      	beq.n	80091e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b4:	2202      	movs	r2, #2
 80091b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091ba:	2300      	movs	r3, #0
 80091bc:	9303      	str	r3, [sp, #12]
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	9302      	str	r3, [sp, #8]
 80091c2:	f107 0314 	add.w	r3, r7, #20
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	68b9      	ldr	r1, [r7, #8]
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 f850 	bl	8009278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091da:	f000 f8dd 	bl	8009398 <prvAddNewTaskToReadyList>
 80091de:	e001      	b.n	80091e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091e4:	697b      	ldr	r3, [r7, #20]
	}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3728      	adds	r7, #40	; 0x28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b08c      	sub	sp, #48	; 0x30
 80091f2:	af04      	add	r7, sp, #16
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	603b      	str	r3, [r7, #0]
 80091fa:	4613      	mov	r3, r2
 80091fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091fe:	88fb      	ldrh	r3, [r7, #6]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fa98 	bl	8007738 <pvPortMalloc>
 8009208:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00e      	beq.n	800922e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009210:	205c      	movs	r0, #92	; 0x5c
 8009212:	f7fe fa91 	bl	8007738 <pvPortMalloc>
 8009216:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	631a      	str	r2, [r3, #48]	; 0x30
 8009224:	e005      	b.n	8009232 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009226:	6978      	ldr	r0, [r7, #20]
 8009228:	f7fe fb52 	bl	80078d0 <vPortFree>
 800922c:	e001      	b.n	8009232 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800922e:	2300      	movs	r3, #0
 8009230:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d017      	beq.n	8009268 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009240:	88fa      	ldrh	r2, [r7, #6]
 8009242:	2300      	movs	r3, #0
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	68b9      	ldr	r1, [r7, #8]
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 f80e 	bl	8009278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800925c:	69f8      	ldr	r0, [r7, #28]
 800925e:	f000 f89b 	bl	8009398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009262:	2301      	movs	r3, #1
 8009264:	61bb      	str	r3, [r7, #24]
 8009266:	e002      	b.n	800926e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009268:	f04f 33ff 	mov.w	r3, #4294967295
 800926c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800926e:	69bb      	ldr	r3, [r7, #24]
	}
 8009270:	4618      	mov	r0, r3
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	461a      	mov	r2, r3
 8009290:	21a5      	movs	r1, #165	; 0xa5
 8009292:	f01c fd8d 	bl	8025db0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80092a0:	440b      	add	r3, r1
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	f023 0307 	bic.w	r3, r3, #7
 80092ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	f003 0307 	and.w	r3, r3, #7
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	617b      	str	r3, [r7, #20]
}
 80092cc:	bf00      	nop
 80092ce:	e7fe      	b.n	80092ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d01f      	beq.n	8009316 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092d6:	2300      	movs	r3, #0
 80092d8:	61fb      	str	r3, [r7, #28]
 80092da:	e012      	b.n	8009302 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	4413      	add	r3, r2
 80092e2:	7819      	ldrb	r1, [r3, #0]
 80092e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	4413      	add	r3, r2
 80092ea:	3334      	adds	r3, #52	; 0x34
 80092ec:	460a      	mov	r2, r1
 80092ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	4413      	add	r3, r2
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d006      	beq.n	800930a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	3301      	adds	r3, #1
 8009300:	61fb      	str	r3, [r7, #28]
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	2b0f      	cmp	r3, #15
 8009306:	d9e9      	bls.n	80092dc <prvInitialiseNewTask+0x64>
 8009308:	e000      	b.n	800930c <prvInitialiseNewTask+0x94>
			{
				break;
 800930a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800930c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009314:	e003      	b.n	800931e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800931e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009320:	2b37      	cmp	r3, #55	; 0x37
 8009322:	d901      	bls.n	8009328 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009324:	2337      	movs	r3, #55	; 0x37
 8009326:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800932c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009332:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	2200      	movs	r2, #0
 8009338:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	3304      	adds	r3, #4
 800933e:	4618      	mov	r0, r3
 8009340:	f7fe fc04 	bl	8007b4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	3318      	adds	r3, #24
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fbff 	bl	8007b4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009352:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009362:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	2200      	movs	r2, #0
 8009368:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	68f9      	ldr	r1, [r7, #12]
 8009376:	69b8      	ldr	r0, [r7, #24]
 8009378:	f7fe fc7c 	bl	8007c74 <pxPortInitialiseStack>
 800937c:	4602      	mov	r2, r0
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800938c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800938e:	bf00      	nop
 8009390:	3720      	adds	r7, #32
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093a0:	f7fe fd98 	bl	8007ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093a4:	4b2d      	ldr	r3, [pc, #180]	; (800945c <prvAddNewTaskToReadyList+0xc4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3301      	adds	r3, #1
 80093aa:	4a2c      	ldr	r2, [pc, #176]	; (800945c <prvAddNewTaskToReadyList+0xc4>)
 80093ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093ae:	4b2c      	ldr	r3, [pc, #176]	; (8009460 <prvAddNewTaskToReadyList+0xc8>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d109      	bne.n	80093ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093b6:	4a2a      	ldr	r2, [pc, #168]	; (8009460 <prvAddNewTaskToReadyList+0xc8>)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093bc:	4b27      	ldr	r3, [pc, #156]	; (800945c <prvAddNewTaskToReadyList+0xc4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d110      	bne.n	80093e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093c4:	f000 fc16 	bl	8009bf4 <prvInitialiseTaskLists>
 80093c8:	e00d      	b.n	80093e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093ca:	4b26      	ldr	r3, [pc, #152]	; (8009464 <prvAddNewTaskToReadyList+0xcc>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093d2:	4b23      	ldr	r3, [pc, #140]	; (8009460 <prvAddNewTaskToReadyList+0xc8>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093dc:	429a      	cmp	r2, r3
 80093de:	d802      	bhi.n	80093e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093e0:	4a1f      	ldr	r2, [pc, #124]	; (8009460 <prvAddNewTaskToReadyList+0xc8>)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093e6:	4b20      	ldr	r3, [pc, #128]	; (8009468 <prvAddNewTaskToReadyList+0xd0>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3301      	adds	r3, #1
 80093ec:	4a1e      	ldr	r2, [pc, #120]	; (8009468 <prvAddNewTaskToReadyList+0xd0>)
 80093ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80093f0:	4b1d      	ldr	r3, [pc, #116]	; (8009468 <prvAddNewTaskToReadyList+0xd0>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fc:	4b1b      	ldr	r3, [pc, #108]	; (800946c <prvAddNewTaskToReadyList+0xd4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d903      	bls.n	800940c <prvAddNewTaskToReadyList+0x74>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	4a18      	ldr	r2, [pc, #96]	; (800946c <prvAddNewTaskToReadyList+0xd4>)
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009410:	4613      	mov	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4a15      	ldr	r2, [pc, #84]	; (8009470 <prvAddNewTaskToReadyList+0xd8>)
 800941a:	441a      	add	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	3304      	adds	r3, #4
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7fe fb9f 	bl	8007b66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009428:	f7fe fd84 	bl	8007f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800942c:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <prvAddNewTaskToReadyList+0xcc>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00e      	beq.n	8009452 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009434:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <prvAddNewTaskToReadyList+0xc8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943e:	429a      	cmp	r2, r3
 8009440:	d207      	bcs.n	8009452 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009442:	4b0c      	ldr	r3, [pc, #48]	; (8009474 <prvAddNewTaskToReadyList+0xdc>)
 8009444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009448:	601a      	str	r2, [r3, #0]
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009452:	bf00      	nop
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	2400a220 	.word	0x2400a220
 8009460:	24009d4c 	.word	0x24009d4c
 8009464:	2400a22c 	.word	0x2400a22c
 8009468:	2400a23c 	.word	0x2400a23c
 800946c:	2400a228 	.word	0x2400a228
 8009470:	24009d50 	.word	0x24009d50
 8009474:	e000ed04 	.word	0xe000ed04

08009478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009480:	2300      	movs	r3, #0
 8009482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d017      	beq.n	80094ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800948a:	4b13      	ldr	r3, [pc, #76]	; (80094d8 <vTaskDelay+0x60>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <vTaskDelay+0x30>
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	60bb      	str	r3, [r7, #8]
}
 80094a4:	bf00      	nop
 80094a6:	e7fe      	b.n	80094a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094a8:	f000 f880 	bl	80095ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094ac:	2100      	movs	r1, #0
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fde8 	bl	800a084 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094b4:	f000 f888 	bl	80095c8 <xTaskResumeAll>
 80094b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d107      	bne.n	80094d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80094c0:	4b06      	ldr	r3, [pc, #24]	; (80094dc <vTaskDelay+0x64>)
 80094c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094d0:	bf00      	nop
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	2400a248 	.word	0x2400a248
 80094dc:	e000ed04 	.word	0xe000ed04

080094e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08a      	sub	sp, #40	; 0x28
 80094e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094ea:	2300      	movs	r3, #0
 80094ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094ee:	463a      	mov	r2, r7
 80094f0:	1d39      	adds	r1, r7, #4
 80094f2:	f107 0308 	add.w	r3, r7, #8
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe f8ea 	bl	80076d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	9202      	str	r2, [sp, #8]
 8009504:	9301      	str	r3, [sp, #4]
 8009506:	2300      	movs	r3, #0
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	2300      	movs	r3, #0
 800950c:	460a      	mov	r2, r1
 800950e:	4921      	ldr	r1, [pc, #132]	; (8009594 <vTaskStartScheduler+0xb4>)
 8009510:	4821      	ldr	r0, [pc, #132]	; (8009598 <vTaskStartScheduler+0xb8>)
 8009512:	f7ff fe0f 	bl	8009134 <xTaskCreateStatic>
 8009516:	4603      	mov	r3, r0
 8009518:	4a20      	ldr	r2, [pc, #128]	; (800959c <vTaskStartScheduler+0xbc>)
 800951a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800951c:	4b1f      	ldr	r3, [pc, #124]	; (800959c <vTaskStartScheduler+0xbc>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009524:	2301      	movs	r3, #1
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e001      	b.n	800952e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800952a:	2300      	movs	r3, #0
 800952c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d102      	bne.n	800953a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009534:	f000 fdfa 	bl	800a12c <xTimerCreateTimerTask>
 8009538:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d116      	bne.n	800956e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	613b      	str	r3, [r7, #16]
}
 8009552:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009554:	4b12      	ldr	r3, [pc, #72]	; (80095a0 <vTaskStartScheduler+0xc0>)
 8009556:	f04f 32ff 	mov.w	r2, #4294967295
 800955a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800955c:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <vTaskStartScheduler+0xc4>)
 800955e:	2201      	movs	r2, #1
 8009560:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009562:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <vTaskStartScheduler+0xc8>)
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009568:	f7fe fc12 	bl	8007d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800956c:	e00e      	b.n	800958c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009574:	d10a      	bne.n	800958c <vTaskStartScheduler+0xac>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	60fb      	str	r3, [r7, #12]
}
 8009588:	bf00      	nop
 800958a:	e7fe      	b.n	800958a <vTaskStartScheduler+0xaa>
}
 800958c:	bf00      	nop
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	08027798 	.word	0x08027798
 8009598:	08009bc5 	.word	0x08009bc5
 800959c:	2400a244 	.word	0x2400a244
 80095a0:	2400a240 	.word	0x2400a240
 80095a4:	2400a22c 	.word	0x2400a22c
 80095a8:	2400a224 	.word	0x2400a224

080095ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80095b0:	4b04      	ldr	r3, [pc, #16]	; (80095c4 <vTaskSuspendAll+0x18>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3301      	adds	r3, #1
 80095b6:	4a03      	ldr	r2, [pc, #12]	; (80095c4 <vTaskSuspendAll+0x18>)
 80095b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095ba:	bf00      	nop
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	2400a248 	.word	0x2400a248

080095c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095d6:	4b42      	ldr	r3, [pc, #264]	; (80096e0 <xTaskResumeAll+0x118>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10a      	bne.n	80095f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	603b      	str	r3, [r7, #0]
}
 80095f0:	bf00      	nop
 80095f2:	e7fe      	b.n	80095f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095f4:	f7fe fc6e 	bl	8007ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095f8:	4b39      	ldr	r3, [pc, #228]	; (80096e0 <xTaskResumeAll+0x118>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	4a38      	ldr	r2, [pc, #224]	; (80096e0 <xTaskResumeAll+0x118>)
 8009600:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009602:	4b37      	ldr	r3, [pc, #220]	; (80096e0 <xTaskResumeAll+0x118>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d162      	bne.n	80096d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800960a:	4b36      	ldr	r3, [pc, #216]	; (80096e4 <xTaskResumeAll+0x11c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d05e      	beq.n	80096d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009612:	e02f      	b.n	8009674 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009614:	4b34      	ldr	r3, [pc, #208]	; (80096e8 <xTaskResumeAll+0x120>)
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3318      	adds	r3, #24
 8009620:	4618      	mov	r0, r3
 8009622:	f7fe fafd 	bl	8007c20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3304      	adds	r3, #4
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe faf8 	bl	8007c20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009634:	4b2d      	ldr	r3, [pc, #180]	; (80096ec <xTaskResumeAll+0x124>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	429a      	cmp	r2, r3
 800963a:	d903      	bls.n	8009644 <xTaskResumeAll+0x7c>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009640:	4a2a      	ldr	r2, [pc, #168]	; (80096ec <xTaskResumeAll+0x124>)
 8009642:	6013      	str	r3, [r2, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009648:	4613      	mov	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4a27      	ldr	r2, [pc, #156]	; (80096f0 <xTaskResumeAll+0x128>)
 8009652:	441a      	add	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f7fe fa83 	bl	8007b66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009664:	4b23      	ldr	r3, [pc, #140]	; (80096f4 <xTaskResumeAll+0x12c>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966a:	429a      	cmp	r2, r3
 800966c:	d302      	bcc.n	8009674 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800966e:	4b22      	ldr	r3, [pc, #136]	; (80096f8 <xTaskResumeAll+0x130>)
 8009670:	2201      	movs	r2, #1
 8009672:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009674:	4b1c      	ldr	r3, [pc, #112]	; (80096e8 <xTaskResumeAll+0x120>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1cb      	bne.n	8009614 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009682:	f000 fb55 	bl	8009d30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009686:	4b1d      	ldr	r3, [pc, #116]	; (80096fc <xTaskResumeAll+0x134>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d010      	beq.n	80096b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009692:	f000 f847 	bl	8009724 <xTaskIncrementTick>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800969c:	4b16      	ldr	r3, [pc, #88]	; (80096f8 <xTaskResumeAll+0x130>)
 800969e:	2201      	movs	r2, #1
 80096a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1f1      	bne.n	8009692 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80096ae:	4b13      	ldr	r3, [pc, #76]	; (80096fc <xTaskResumeAll+0x134>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096b4:	4b10      	ldr	r3, [pc, #64]	; (80096f8 <xTaskResumeAll+0x130>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d009      	beq.n	80096d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096bc:	2301      	movs	r3, #1
 80096be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096c0:	4b0f      	ldr	r3, [pc, #60]	; (8009700 <xTaskResumeAll+0x138>)
 80096c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096d0:	f7fe fc30 	bl	8007f34 <vPortExitCritical>

	return xAlreadyYielded;
 80096d4:	68bb      	ldr	r3, [r7, #8]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	2400a248 	.word	0x2400a248
 80096e4:	2400a220 	.word	0x2400a220
 80096e8:	2400a1e0 	.word	0x2400a1e0
 80096ec:	2400a228 	.word	0x2400a228
 80096f0:	24009d50 	.word	0x24009d50
 80096f4:	24009d4c 	.word	0x24009d4c
 80096f8:	2400a234 	.word	0x2400a234
 80096fc:	2400a230 	.word	0x2400a230
 8009700:	e000ed04 	.word	0xe000ed04

08009704 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800970a:	4b05      	ldr	r3, [pc, #20]	; (8009720 <xTaskGetTickCount+0x1c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009710:	687b      	ldr	r3, [r7, #4]
}
 8009712:	4618      	mov	r0, r3
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	2400a224 	.word	0x2400a224

08009724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800972e:	4b4f      	ldr	r3, [pc, #316]	; (800986c <xTaskIncrementTick+0x148>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	f040 808f 	bne.w	8009856 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009738:	4b4d      	ldr	r3, [pc, #308]	; (8009870 <xTaskIncrementTick+0x14c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	3301      	adds	r3, #1
 800973e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009740:	4a4b      	ldr	r2, [pc, #300]	; (8009870 <xTaskIncrementTick+0x14c>)
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d120      	bne.n	800978e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800974c:	4b49      	ldr	r3, [pc, #292]	; (8009874 <xTaskIncrementTick+0x150>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <xTaskIncrementTick+0x48>
	__asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	603b      	str	r3, [r7, #0]
}
 8009768:	bf00      	nop
 800976a:	e7fe      	b.n	800976a <xTaskIncrementTick+0x46>
 800976c:	4b41      	ldr	r3, [pc, #260]	; (8009874 <xTaskIncrementTick+0x150>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	4b41      	ldr	r3, [pc, #260]	; (8009878 <xTaskIncrementTick+0x154>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a3f      	ldr	r2, [pc, #252]	; (8009874 <xTaskIncrementTick+0x150>)
 8009778:	6013      	str	r3, [r2, #0]
 800977a:	4a3f      	ldr	r2, [pc, #252]	; (8009878 <xTaskIncrementTick+0x154>)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	4b3e      	ldr	r3, [pc, #248]	; (800987c <xTaskIncrementTick+0x158>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3301      	adds	r3, #1
 8009786:	4a3d      	ldr	r2, [pc, #244]	; (800987c <xTaskIncrementTick+0x158>)
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	f000 fad1 	bl	8009d30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800978e:	4b3c      	ldr	r3, [pc, #240]	; (8009880 <xTaskIncrementTick+0x15c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	429a      	cmp	r2, r3
 8009796:	d349      	bcc.n	800982c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009798:	4b36      	ldr	r3, [pc, #216]	; (8009874 <xTaskIncrementTick+0x150>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d104      	bne.n	80097ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097a2:	4b37      	ldr	r3, [pc, #220]	; (8009880 <xTaskIncrementTick+0x15c>)
 80097a4:	f04f 32ff 	mov.w	r2, #4294967295
 80097a8:	601a      	str	r2, [r3, #0]
					break;
 80097aa:	e03f      	b.n	800982c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ac:	4b31      	ldr	r3, [pc, #196]	; (8009874 <xTaskIncrementTick+0x150>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d203      	bcs.n	80097cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097c4:	4a2e      	ldr	r2, [pc, #184]	; (8009880 <xTaskIncrementTick+0x15c>)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097ca:	e02f      	b.n	800982c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fa25 	bl	8007c20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d004      	beq.n	80097e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	3318      	adds	r3, #24
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe fa1c 	bl	8007c20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ec:	4b25      	ldr	r3, [pc, #148]	; (8009884 <xTaskIncrementTick+0x160>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d903      	bls.n	80097fc <xTaskIncrementTick+0xd8>
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f8:	4a22      	ldr	r2, [pc, #136]	; (8009884 <xTaskIncrementTick+0x160>)
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009800:	4613      	mov	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4a1f      	ldr	r2, [pc, #124]	; (8009888 <xTaskIncrementTick+0x164>)
 800980a:	441a      	add	r2, r3
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	3304      	adds	r3, #4
 8009810:	4619      	mov	r1, r3
 8009812:	4610      	mov	r0, r2
 8009814:	f7fe f9a7 	bl	8007b66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981c:	4b1b      	ldr	r3, [pc, #108]	; (800988c <xTaskIncrementTick+0x168>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009822:	429a      	cmp	r2, r3
 8009824:	d3b8      	bcc.n	8009798 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009826:	2301      	movs	r3, #1
 8009828:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800982a:	e7b5      	b.n	8009798 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800982c:	4b17      	ldr	r3, [pc, #92]	; (800988c <xTaskIncrementTick+0x168>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009832:	4915      	ldr	r1, [pc, #84]	; (8009888 <xTaskIncrementTick+0x164>)
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	440b      	add	r3, r1
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d901      	bls.n	8009848 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009844:	2301      	movs	r3, #1
 8009846:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009848:	4b11      	ldr	r3, [pc, #68]	; (8009890 <xTaskIncrementTick+0x16c>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d007      	beq.n	8009860 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009850:	2301      	movs	r3, #1
 8009852:	617b      	str	r3, [r7, #20]
 8009854:	e004      	b.n	8009860 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009856:	4b0f      	ldr	r3, [pc, #60]	; (8009894 <xTaskIncrementTick+0x170>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3301      	adds	r3, #1
 800985c:	4a0d      	ldr	r2, [pc, #52]	; (8009894 <xTaskIncrementTick+0x170>)
 800985e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009860:	697b      	ldr	r3, [r7, #20]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	2400a248 	.word	0x2400a248
 8009870:	2400a224 	.word	0x2400a224
 8009874:	2400a1d8 	.word	0x2400a1d8
 8009878:	2400a1dc 	.word	0x2400a1dc
 800987c:	2400a238 	.word	0x2400a238
 8009880:	2400a240 	.word	0x2400a240
 8009884:	2400a228 	.word	0x2400a228
 8009888:	24009d50 	.word	0x24009d50
 800988c:	24009d4c 	.word	0x24009d4c
 8009890:	2400a234 	.word	0x2400a234
 8009894:	2400a230 	.word	0x2400a230

08009898 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800989e:	4b28      	ldr	r3, [pc, #160]	; (8009940 <vTaskSwitchContext+0xa8>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098a6:	4b27      	ldr	r3, [pc, #156]	; (8009944 <vTaskSwitchContext+0xac>)
 80098a8:	2201      	movs	r2, #1
 80098aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098ac:	e041      	b.n	8009932 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80098ae:	4b25      	ldr	r3, [pc, #148]	; (8009944 <vTaskSwitchContext+0xac>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098b4:	4b24      	ldr	r3, [pc, #144]	; (8009948 <vTaskSwitchContext+0xb0>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	60fb      	str	r3, [r7, #12]
 80098ba:	e010      	b.n	80098de <vTaskSwitchContext+0x46>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	607b      	str	r3, [r7, #4]
}
 80098d4:	bf00      	nop
 80098d6:	e7fe      	b.n	80098d6 <vTaskSwitchContext+0x3e>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3b01      	subs	r3, #1
 80098dc:	60fb      	str	r3, [r7, #12]
 80098de:	491b      	ldr	r1, [pc, #108]	; (800994c <vTaskSwitchContext+0xb4>)
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d0e4      	beq.n	80098bc <vTaskSwitchContext+0x24>
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4a13      	ldr	r2, [pc, #76]	; (800994c <vTaskSwitchContext+0xb4>)
 80098fe:	4413      	add	r3, r2
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	605a      	str	r2, [r3, #4]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	3308      	adds	r3, #8
 8009914:	429a      	cmp	r2, r3
 8009916:	d104      	bne.n	8009922 <vTaskSwitchContext+0x8a>
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	605a      	str	r2, [r3, #4]
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	4a09      	ldr	r2, [pc, #36]	; (8009950 <vTaskSwitchContext+0xb8>)
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	4a06      	ldr	r2, [pc, #24]	; (8009948 <vTaskSwitchContext+0xb0>)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6013      	str	r3, [r2, #0]
}
 8009932:	bf00      	nop
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	2400a248 	.word	0x2400a248
 8009944:	2400a234 	.word	0x2400a234
 8009948:	2400a228 	.word	0x2400a228
 800994c:	24009d50 	.word	0x24009d50
 8009950:	24009d4c 	.word	0x24009d4c

08009954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	60fb      	str	r3, [r7, #12]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800997a:	4b07      	ldr	r3, [pc, #28]	; (8009998 <vTaskPlaceOnEventList+0x44>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3318      	adds	r3, #24
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7fe f913 	bl	8007bae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009988:	2101      	movs	r1, #1
 800998a:	6838      	ldr	r0, [r7, #0]
 800998c:	f000 fb7a 	bl	800a084 <prvAddCurrentTaskToDelayedList>
}
 8009990:	bf00      	nop
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	24009d4c 	.word	0x24009d4c

0800999c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10a      	bne.n	80099c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	617b      	str	r3, [r7, #20]
}
 80099c0:	bf00      	nop
 80099c2:	e7fe      	b.n	80099c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099c4:	4b0a      	ldr	r3, [pc, #40]	; (80099f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3318      	adds	r3, #24
 80099ca:	4619      	mov	r1, r3
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f7fe f8ca 	bl	8007b66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80099d8:	f04f 33ff 	mov.w	r3, #4294967295
 80099dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80099de:	6879      	ldr	r1, [r7, #4]
 80099e0:	68b8      	ldr	r0, [r7, #8]
 80099e2:	f000 fb4f 	bl	800a084 <prvAddCurrentTaskToDelayedList>
	}
 80099e6:	bf00      	nop
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	24009d4c 	.word	0x24009d4c

080099f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10a      	bne.n	8009a20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	60fb      	str	r3, [r7, #12]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	3318      	adds	r3, #24
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe f8fb 	bl	8007c20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a2a:	4b1e      	ldr	r3, [pc, #120]	; (8009aa4 <xTaskRemoveFromEventList+0xb0>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d11d      	bne.n	8009a6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	3304      	adds	r3, #4
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe f8f2 	bl	8007c20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a40:	4b19      	ldr	r3, [pc, #100]	; (8009aa8 <xTaskRemoveFromEventList+0xb4>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d903      	bls.n	8009a50 <xTaskRemoveFromEventList+0x5c>
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	4a16      	ldr	r2, [pc, #88]	; (8009aa8 <xTaskRemoveFromEventList+0xb4>)
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a54:	4613      	mov	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4a13      	ldr	r2, [pc, #76]	; (8009aac <xTaskRemoveFromEventList+0xb8>)
 8009a5e:	441a      	add	r2, r3
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	3304      	adds	r3, #4
 8009a64:	4619      	mov	r1, r3
 8009a66:	4610      	mov	r0, r2
 8009a68:	f7fe f87d 	bl	8007b66 <vListInsertEnd>
 8009a6c:	e005      	b.n	8009a7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	3318      	adds	r3, #24
 8009a72:	4619      	mov	r1, r3
 8009a74:	480e      	ldr	r0, [pc, #56]	; (8009ab0 <xTaskRemoveFromEventList+0xbc>)
 8009a76:	f7fe f876 	bl	8007b66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	; (8009ab4 <xTaskRemoveFromEventList+0xc0>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d905      	bls.n	8009a94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a8c:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <xTaskRemoveFromEventList+0xc4>)
 8009a8e:	2201      	movs	r2, #1
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	e001      	b.n	8009a98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009a94:	2300      	movs	r3, #0
 8009a96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a98:	697b      	ldr	r3, [r7, #20]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	2400a248 	.word	0x2400a248
 8009aa8:	2400a228 	.word	0x2400a228
 8009aac:	24009d50 	.word	0x24009d50
 8009ab0:	2400a1e0 	.word	0x2400a1e0
 8009ab4:	24009d4c 	.word	0x24009d4c
 8009ab8:	2400a234 	.word	0x2400a234

08009abc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ac4:	4b06      	ldr	r3, [pc, #24]	; (8009ae0 <vTaskInternalSetTimeOutState+0x24>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009acc:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <vTaskInternalSetTimeOutState+0x28>)
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	605a      	str	r2, [r3, #4]
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	2400a238 	.word	0x2400a238
 8009ae4:	2400a224 	.word	0x2400a224

08009ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10a      	bne.n	8009b0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	613b      	str	r3, [r7, #16]
}
 8009b0a:	bf00      	nop
 8009b0c:	e7fe      	b.n	8009b0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10a      	bne.n	8009b2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	60fb      	str	r3, [r7, #12]
}
 8009b26:	bf00      	nop
 8009b28:	e7fe      	b.n	8009b28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009b2a:	f7fe f9d3 	bl	8007ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b2e:	4b1d      	ldr	r3, [pc, #116]	; (8009ba4 <xTaskCheckForTimeOut+0xbc>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b46:	d102      	bne.n	8009b4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	61fb      	str	r3, [r7, #28]
 8009b4c:	e023      	b.n	8009b96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	4b15      	ldr	r3, [pc, #84]	; (8009ba8 <xTaskCheckForTimeOut+0xc0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d007      	beq.n	8009b6a <xTaskCheckForTimeOut+0x82>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d302      	bcc.n	8009b6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b64:	2301      	movs	r3, #1
 8009b66:	61fb      	str	r3, [r7, #28]
 8009b68:	e015      	b.n	8009b96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d20b      	bcs.n	8009b8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	1ad2      	subs	r2, r2, r3
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff ff9b 	bl	8009abc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b86:	2300      	movs	r3, #0
 8009b88:	61fb      	str	r3, [r7, #28]
 8009b8a:	e004      	b.n	8009b96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b92:	2301      	movs	r3, #1
 8009b94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b96:	f7fe f9cd 	bl	8007f34 <vPortExitCritical>

	return xReturn;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3720      	adds	r7, #32
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	2400a224 	.word	0x2400a224
 8009ba8:	2400a238 	.word	0x2400a238

08009bac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bac:	b480      	push	{r7}
 8009bae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bb0:	4b03      	ldr	r3, [pc, #12]	; (8009bc0 <vTaskMissedYield+0x14>)
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	601a      	str	r2, [r3, #0]
}
 8009bb6:	bf00      	nop
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	2400a234 	.word	0x2400a234

08009bc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bcc:	f000 f852 	bl	8009c74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bd0:	4b06      	ldr	r3, [pc, #24]	; (8009bec <prvIdleTask+0x28>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d9f9      	bls.n	8009bcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bd8:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <prvIdleTask+0x2c>)
 8009bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009be8:	e7f0      	b.n	8009bcc <prvIdleTask+0x8>
 8009bea:	bf00      	nop
 8009bec:	24009d50 	.word	0x24009d50
 8009bf0:	e000ed04 	.word	0xe000ed04

08009bf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	607b      	str	r3, [r7, #4]
 8009bfe:	e00c      	b.n	8009c1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	4613      	mov	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4a12      	ldr	r2, [pc, #72]	; (8009c54 <prvInitialiseTaskLists+0x60>)
 8009c0c:	4413      	add	r3, r2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fd ff7c 	bl	8007b0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	3301      	adds	r3, #1
 8009c18:	607b      	str	r3, [r7, #4]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b37      	cmp	r3, #55	; 0x37
 8009c1e:	d9ef      	bls.n	8009c00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c20:	480d      	ldr	r0, [pc, #52]	; (8009c58 <prvInitialiseTaskLists+0x64>)
 8009c22:	f7fd ff73 	bl	8007b0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c26:	480d      	ldr	r0, [pc, #52]	; (8009c5c <prvInitialiseTaskLists+0x68>)
 8009c28:	f7fd ff70 	bl	8007b0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c2c:	480c      	ldr	r0, [pc, #48]	; (8009c60 <prvInitialiseTaskLists+0x6c>)
 8009c2e:	f7fd ff6d 	bl	8007b0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c32:	480c      	ldr	r0, [pc, #48]	; (8009c64 <prvInitialiseTaskLists+0x70>)
 8009c34:	f7fd ff6a 	bl	8007b0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c38:	480b      	ldr	r0, [pc, #44]	; (8009c68 <prvInitialiseTaskLists+0x74>)
 8009c3a:	f7fd ff67 	bl	8007b0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c3e:	4b0b      	ldr	r3, [pc, #44]	; (8009c6c <prvInitialiseTaskLists+0x78>)
 8009c40:	4a05      	ldr	r2, [pc, #20]	; (8009c58 <prvInitialiseTaskLists+0x64>)
 8009c42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c44:	4b0a      	ldr	r3, [pc, #40]	; (8009c70 <prvInitialiseTaskLists+0x7c>)
 8009c46:	4a05      	ldr	r2, [pc, #20]	; (8009c5c <prvInitialiseTaskLists+0x68>)
 8009c48:	601a      	str	r2, [r3, #0]
}
 8009c4a:	bf00      	nop
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	24009d50 	.word	0x24009d50
 8009c58:	2400a1b0 	.word	0x2400a1b0
 8009c5c:	2400a1c4 	.word	0x2400a1c4
 8009c60:	2400a1e0 	.word	0x2400a1e0
 8009c64:	2400a1f4 	.word	0x2400a1f4
 8009c68:	2400a20c 	.word	0x2400a20c
 8009c6c:	2400a1d8 	.word	0x2400a1d8
 8009c70:	2400a1dc 	.word	0x2400a1dc

08009c74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c7a:	e019      	b.n	8009cb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c7c:	f7fe f92a 	bl	8007ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c80:	4b10      	ldr	r3, [pc, #64]	; (8009cc4 <prvCheckTasksWaitingTermination+0x50>)
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fd ffc7 	bl	8007c20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c92:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <prvCheckTasksWaitingTermination+0x54>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	4a0b      	ldr	r2, [pc, #44]	; (8009cc8 <prvCheckTasksWaitingTermination+0x54>)
 8009c9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ccc <prvCheckTasksWaitingTermination+0x58>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	4a0a      	ldr	r2, [pc, #40]	; (8009ccc <prvCheckTasksWaitingTermination+0x58>)
 8009ca4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ca6:	f7fe f945 	bl	8007f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f810 	bl	8009cd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cb0:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <prvCheckTasksWaitingTermination+0x58>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e1      	bne.n	8009c7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cb8:	bf00      	nop
 8009cba:	bf00      	nop
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	2400a1f4 	.word	0x2400a1f4
 8009cc8:	2400a220 	.word	0x2400a220
 8009ccc:	2400a208 	.word	0x2400a208

08009cd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d108      	bne.n	8009cf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fd fdf2 	bl	80078d0 <vPortFree>
				vPortFree( pxTCB );
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7fd fdef 	bl	80078d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cf2:	e018      	b.n	8009d26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d103      	bne.n	8009d06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7fd fde6 	bl	80078d0 <vPortFree>
	}
 8009d04:	e00f      	b.n	8009d26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d00a      	beq.n	8009d26 <prvDeleteTCB+0x56>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <prvDeleteTCB+0x54>
	}
 8009d26:	bf00      	nop
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <prvResetNextTaskUnblockTime+0x38>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d104      	bne.n	8009d4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <prvResetNextTaskUnblockTime+0x3c>)
 8009d42:	f04f 32ff 	mov.w	r2, #4294967295
 8009d46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d48:	e008      	b.n	8009d5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d4a:	4b07      	ldr	r3, [pc, #28]	; (8009d68 <prvResetNextTaskUnblockTime+0x38>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	4a04      	ldr	r2, [pc, #16]	; (8009d6c <prvResetNextTaskUnblockTime+0x3c>)
 8009d5a:	6013      	str	r3, [r2, #0]
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	2400a1d8 	.word	0x2400a1d8
 8009d6c:	2400a240 	.word	0x2400a240

08009d70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d76:	4b0b      	ldr	r3, [pc, #44]	; (8009da4 <xTaskGetSchedulerState+0x34>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	607b      	str	r3, [r7, #4]
 8009d82:	e008      	b.n	8009d96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d84:	4b08      	ldr	r3, [pc, #32]	; (8009da8 <xTaskGetSchedulerState+0x38>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d102      	bne.n	8009d92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	607b      	str	r3, [r7, #4]
 8009d90:	e001      	b.n	8009d96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d92:	2300      	movs	r3, #0
 8009d94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d96:	687b      	ldr	r3, [r7, #4]
	}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	2400a22c 	.word	0x2400a22c
 8009da8:	2400a248 	.word	0x2400a248

08009dac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d051      	beq.n	8009e66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc6:	4b2a      	ldr	r3, [pc, #168]	; (8009e70 <xTaskPriorityInherit+0xc4>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d241      	bcs.n	8009e54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	db06      	blt.n	8009de6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dd8:	4b25      	ldr	r3, [pc, #148]	; (8009e70 <xTaskPriorityInherit+0xc4>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	6959      	ldr	r1, [r3, #20]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dee:	4613      	mov	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4a1f      	ldr	r2, [pc, #124]	; (8009e74 <xTaskPriorityInherit+0xc8>)
 8009df8:	4413      	add	r3, r2
 8009dfa:	4299      	cmp	r1, r3
 8009dfc:	d122      	bne.n	8009e44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	3304      	adds	r3, #4
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fd ff0c 	bl	8007c20 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e08:	4b19      	ldr	r3, [pc, #100]	; (8009e70 <xTaskPriorityInherit+0xc4>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e16:	4b18      	ldr	r3, [pc, #96]	; (8009e78 <xTaskPriorityInherit+0xcc>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d903      	bls.n	8009e26 <xTaskPriorityInherit+0x7a>
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	4a15      	ldr	r2, [pc, #84]	; (8009e78 <xTaskPriorityInherit+0xcc>)
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4a10      	ldr	r2, [pc, #64]	; (8009e74 <xTaskPriorityInherit+0xc8>)
 8009e34:	441a      	add	r2, r3
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	f7fd fe92 	bl	8007b66 <vListInsertEnd>
 8009e42:	e004      	b.n	8009e4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e44:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <xTaskPriorityInherit+0xc4>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	60fb      	str	r3, [r7, #12]
 8009e52:	e008      	b.n	8009e66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <xTaskPriorityInherit+0xc4>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d201      	bcs.n	8009e66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009e62:	2301      	movs	r3, #1
 8009e64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e66:	68fb      	ldr	r3, [r7, #12]
	}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	24009d4c 	.word	0x24009d4c
 8009e74:	24009d50 	.word	0x24009d50
 8009e78:	2400a228 	.word	0x2400a228

08009e7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d056      	beq.n	8009f40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e92:	4b2e      	ldr	r3, [pc, #184]	; (8009f4c <xTaskPriorityDisinherit+0xd0>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d00a      	beq.n	8009eb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	60fb      	str	r3, [r7, #12]
}
 8009eae:	bf00      	nop
 8009eb0:	e7fe      	b.n	8009eb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10a      	bne.n	8009ed0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	60bb      	str	r3, [r7, #8]
}
 8009ecc:	bf00      	nop
 8009ece:	e7fe      	b.n	8009ece <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed4:	1e5a      	subs	r2, r3, #1
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d02c      	beq.n	8009f40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d128      	bne.n	8009f40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fd fe94 	bl	8007c20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f10:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <xTaskPriorityDisinherit+0xd4>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d903      	bls.n	8009f20 <xTaskPriorityDisinherit+0xa4>
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1c:	4a0c      	ldr	r2, [pc, #48]	; (8009f50 <xTaskPriorityDisinherit+0xd4>)
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f24:	4613      	mov	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4a09      	ldr	r2, [pc, #36]	; (8009f54 <xTaskPriorityDisinherit+0xd8>)
 8009f2e:	441a      	add	r2, r3
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f7fd fe15 	bl	8007b66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f40:	697b      	ldr	r3, [r7, #20]
	}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	24009d4c 	.word	0x24009d4c
 8009f50:	2400a228 	.word	0x2400a228
 8009f54:	24009d50 	.word	0x24009d50

08009f58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009f66:	2301      	movs	r3, #1
 8009f68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d06a      	beq.n	800a046 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60fb      	str	r3, [r7, #12]
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d902      	bls.n	8009f9e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	61fb      	str	r3, [r7, #28]
 8009f9c:	e002      	b.n	8009fa4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	69fa      	ldr	r2, [r7, #28]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d04b      	beq.n	800a046 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d146      	bne.n	800a046 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009fb8:	4b25      	ldr	r3, [pc, #148]	; (800a050 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	69ba      	ldr	r2, [r7, #24]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d10a      	bne.n	8009fd8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	60bb      	str	r3, [r7, #8]
}
 8009fd4:	bf00      	nop
 8009fd6:	e7fe      	b.n	8009fd6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	69fa      	ldr	r2, [r7, #28]
 8009fe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	db04      	blt.n	8009ff6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	6959      	ldr	r1, [r3, #20]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4a13      	ldr	r2, [pc, #76]	; (800a054 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a006:	4413      	add	r3, r2
 800a008:	4299      	cmp	r1, r3
 800a00a:	d11c      	bne.n	800a046 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	3304      	adds	r3, #4
 800a010:	4618      	mov	r0, r3
 800a012:	f7fd fe05 	bl	8007c20 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01a:	4b0f      	ldr	r3, [pc, #60]	; (800a058 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d903      	bls.n	800a02a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	4a0c      	ldr	r2, [pc, #48]	; (800a058 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02e:	4613      	mov	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4a07      	ldr	r2, [pc, #28]	; (800a054 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a038:	441a      	add	r2, r3
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	3304      	adds	r3, #4
 800a03e:	4619      	mov	r1, r3
 800a040:	4610      	mov	r0, r2
 800a042:	f7fd fd90 	bl	8007b66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a046:	bf00      	nop
 800a048:	3720      	adds	r7, #32
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	24009d4c 	.word	0x24009d4c
 800a054:	24009d50 	.word	0x24009d50
 800a058:	2400a228 	.word	0x2400a228

0800a05c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a060:	4b07      	ldr	r3, [pc, #28]	; (800a080 <pvTaskIncrementMutexHeldCount+0x24>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a068:	4b05      	ldr	r3, [pc, #20]	; (800a080 <pvTaskIncrementMutexHeldCount+0x24>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a06e:	3201      	adds	r2, #1
 800a070:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a072:	4b03      	ldr	r3, [pc, #12]	; (800a080 <pvTaskIncrementMutexHeldCount+0x24>)
 800a074:	681b      	ldr	r3, [r3, #0]
	}
 800a076:	4618      	mov	r0, r3
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	24009d4c 	.word	0x24009d4c

0800a084 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a08e:	4b21      	ldr	r3, [pc, #132]	; (800a114 <prvAddCurrentTaskToDelayedList+0x90>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a094:	4b20      	ldr	r3, [pc, #128]	; (800a118 <prvAddCurrentTaskToDelayedList+0x94>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3304      	adds	r3, #4
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fd fdc0 	bl	8007c20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a6:	d10a      	bne.n	800a0be <prvAddCurrentTaskToDelayedList+0x3a>
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d007      	beq.n	800a0be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0ae:	4b1a      	ldr	r3, [pc, #104]	; (800a118 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4819      	ldr	r0, [pc, #100]	; (800a11c <prvAddCurrentTaskToDelayedList+0x98>)
 800a0b8:	f7fd fd55 	bl	8007b66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0bc:	e026      	b.n	800a10c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d209      	bcs.n	800a0ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0d6:	4b12      	ldr	r3, [pc, #72]	; (800a120 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	4b0f      	ldr	r3, [pc, #60]	; (800a118 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	f7fd fd63 	bl	8007bae <vListInsert>
}
 800a0e8:	e010      	b.n	800a10c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0ea:	4b0e      	ldr	r3, [pc, #56]	; (800a124 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	4b0a      	ldr	r3, [pc, #40]	; (800a118 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	3304      	adds	r3, #4
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	f7fd fd59 	bl	8007bae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	429a      	cmp	r2, r3
 800a104:	d202      	bcs.n	800a10c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a106:	4a08      	ldr	r2, [pc, #32]	; (800a128 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	6013      	str	r3, [r2, #0]
}
 800a10c:	bf00      	nop
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	2400a224 	.word	0x2400a224
 800a118:	24009d4c 	.word	0x24009d4c
 800a11c:	2400a20c 	.word	0x2400a20c
 800a120:	2400a1dc 	.word	0x2400a1dc
 800a124:	2400a1d8 	.word	0x2400a1d8
 800a128:	2400a240 	.word	0x2400a240

0800a12c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b08a      	sub	sp, #40	; 0x28
 800a130:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a132:	2300      	movs	r3, #0
 800a134:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a136:	f000 fb07 	bl	800a748 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a13a:	4b1c      	ldr	r3, [pc, #112]	; (800a1ac <xTimerCreateTimerTask+0x80>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d021      	beq.n	800a186 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a142:	2300      	movs	r3, #0
 800a144:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a146:	2300      	movs	r3, #0
 800a148:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a14a:	1d3a      	adds	r2, r7, #4
 800a14c:	f107 0108 	add.w	r1, r7, #8
 800a150:	f107 030c 	add.w	r3, r7, #12
 800a154:	4618      	mov	r0, r3
 800a156:	f7fd fad5 	bl	8007704 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	9202      	str	r2, [sp, #8]
 800a162:	9301      	str	r3, [sp, #4]
 800a164:	2302      	movs	r3, #2
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	2300      	movs	r3, #0
 800a16a:	460a      	mov	r2, r1
 800a16c:	4910      	ldr	r1, [pc, #64]	; (800a1b0 <xTimerCreateTimerTask+0x84>)
 800a16e:	4811      	ldr	r0, [pc, #68]	; (800a1b4 <xTimerCreateTimerTask+0x88>)
 800a170:	f7fe ffe0 	bl	8009134 <xTaskCreateStatic>
 800a174:	4603      	mov	r3, r0
 800a176:	4a10      	ldr	r2, [pc, #64]	; (800a1b8 <xTimerCreateTimerTask+0x8c>)
 800a178:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a17a:	4b0f      	ldr	r3, [pc, #60]	; (800a1b8 <xTimerCreateTimerTask+0x8c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a182:	2301      	movs	r3, #1
 800a184:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	613b      	str	r3, [r7, #16]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a1a2:	697b      	ldr	r3, [r7, #20]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3718      	adds	r7, #24
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	2400a27c 	.word	0x2400a27c
 800a1b0:	080277a0 	.word	0x080277a0
 800a1b4:	0800a2f1 	.word	0x0800a2f1
 800a1b8:	2400a280 	.word	0x2400a280

0800a1bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08a      	sub	sp, #40	; 0x28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	623b      	str	r3, [r7, #32]
}
 800a1e6:	bf00      	nop
 800a1e8:	e7fe      	b.n	800a1e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1ea:	4b1a      	ldr	r3, [pc, #104]	; (800a254 <xTimerGenericCommand+0x98>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d02a      	beq.n	800a248 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b05      	cmp	r3, #5
 800a202:	dc18      	bgt.n	800a236 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a204:	f7ff fdb4 	bl	8009d70 <xTaskGetSchedulerState>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d109      	bne.n	800a222 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a20e:	4b11      	ldr	r3, [pc, #68]	; (800a254 <xTimerGenericCommand+0x98>)
 800a210:	6818      	ldr	r0, [r3, #0]
 800a212:	f107 0110 	add.w	r1, r7, #16
 800a216:	2300      	movs	r3, #0
 800a218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a21a:	f7fe f925 	bl	8008468 <xQueueGenericSend>
 800a21e:	6278      	str	r0, [r7, #36]	; 0x24
 800a220:	e012      	b.n	800a248 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a222:	4b0c      	ldr	r3, [pc, #48]	; (800a254 <xTimerGenericCommand+0x98>)
 800a224:	6818      	ldr	r0, [r3, #0]
 800a226:	f107 0110 	add.w	r1, r7, #16
 800a22a:	2300      	movs	r3, #0
 800a22c:	2200      	movs	r2, #0
 800a22e:	f7fe f91b 	bl	8008468 <xQueueGenericSend>
 800a232:	6278      	str	r0, [r7, #36]	; 0x24
 800a234:	e008      	b.n	800a248 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a236:	4b07      	ldr	r3, [pc, #28]	; (800a254 <xTimerGenericCommand+0x98>)
 800a238:	6818      	ldr	r0, [r3, #0]
 800a23a:	f107 0110 	add.w	r1, r7, #16
 800a23e:	2300      	movs	r3, #0
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	f7fe fa0f 	bl	8008664 <xQueueGenericSendFromISR>
 800a246:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3728      	adds	r7, #40	; 0x28
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	2400a27c 	.word	0x2400a27c

0800a258 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b088      	sub	sp, #32
 800a25c:	af02      	add	r7, sp, #8
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a262:	4b22      	ldr	r3, [pc, #136]	; (800a2ec <prvProcessExpiredTimer+0x94>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	3304      	adds	r3, #4
 800a270:	4618      	mov	r0, r3
 800a272:	f7fd fcd5 	bl	8007c20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b00      	cmp	r3, #0
 800a282:	d022      	beq.n	800a2ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	699a      	ldr	r2, [r3, #24]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	18d1      	adds	r1, r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	6978      	ldr	r0, [r7, #20]
 800a292:	f000 f8d1 	bl	800a438 <prvInsertTimerInActiveList>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d01f      	beq.n	800a2dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a29c:	2300      	movs	r3, #0
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	6978      	ldr	r0, [r7, #20]
 800a2a8:	f7ff ff88 	bl	800a1bc <xTimerGenericCommand>
 800a2ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d113      	bne.n	800a2dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	60fb      	str	r3, [r7, #12]
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2d0:	f023 0301 	bic.w	r3, r3, #1
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	6a1b      	ldr	r3, [r3, #32]
 800a2e0:	6978      	ldr	r0, [r7, #20]
 800a2e2:	4798      	blx	r3
}
 800a2e4:	bf00      	nop
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	2400a274 	.word	0x2400a274

0800a2f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2f8:	f107 0308 	add.w	r3, r7, #8
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 f857 	bl	800a3b0 <prvGetNextExpireTime>
 800a302:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	4619      	mov	r1, r3
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f803 	bl	800a314 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a30e:	f000 f8d5 	bl	800a4bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a312:	e7f1      	b.n	800a2f8 <prvTimerTask+0x8>

0800a314 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a31e:	f7ff f945 	bl	80095ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a322:	f107 0308 	add.w	r3, r7, #8
 800a326:	4618      	mov	r0, r3
 800a328:	f000 f866 	bl	800a3f8 <prvSampleTimeNow>
 800a32c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d130      	bne.n	800a396 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10a      	bne.n	800a350 <prvProcessTimerOrBlockTask+0x3c>
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d806      	bhi.n	800a350 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a342:	f7ff f941 	bl	80095c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a346:	68f9      	ldr	r1, [r7, #12]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7ff ff85 	bl	800a258 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a34e:	e024      	b.n	800a39a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d008      	beq.n	800a368 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a356:	4b13      	ldr	r3, [pc, #76]	; (800a3a4 <prvProcessTimerOrBlockTask+0x90>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <prvProcessTimerOrBlockTask+0x50>
 800a360:	2301      	movs	r3, #1
 800a362:	e000      	b.n	800a366 <prvProcessTimerOrBlockTask+0x52>
 800a364:	2300      	movs	r3, #0
 800a366:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a368:	4b0f      	ldr	r3, [pc, #60]	; (800a3a8 <prvProcessTimerOrBlockTask+0x94>)
 800a36a:	6818      	ldr	r0, [r3, #0]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	4619      	mov	r1, r3
 800a376:	f7fe fea9 	bl	80090cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a37a:	f7ff f925 	bl	80095c8 <xTaskResumeAll>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a384:	4b09      	ldr	r3, [pc, #36]	; (800a3ac <prvProcessTimerOrBlockTask+0x98>)
 800a386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	f3bf 8f6f 	isb	sy
}
 800a394:	e001      	b.n	800a39a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a396:	f7ff f917 	bl	80095c8 <xTaskResumeAll>
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	2400a278 	.word	0x2400a278
 800a3a8:	2400a27c 	.word	0x2400a27c
 800a3ac:	e000ed04 	.word	0xe000ed04

0800a3b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3b8:	4b0e      	ldr	r3, [pc, #56]	; (800a3f4 <prvGetNextExpireTime+0x44>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <prvGetNextExpireTime+0x16>
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	e000      	b.n	800a3c8 <prvGetNextExpireTime+0x18>
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d105      	bne.n	800a3e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3d4:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <prvGetNextExpireTime+0x44>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	e001      	b.n	800a3e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	2400a274 	.word	0x2400a274

0800a3f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a400:	f7ff f980 	bl	8009704 <xTaskGetTickCount>
 800a404:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a406:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <prvSampleTimeNow+0x3c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d205      	bcs.n	800a41c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a410:	f000 f936 	bl	800a680 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	e002      	b.n	800a422 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a422:	4a04      	ldr	r2, [pc, #16]	; (800a434 <prvSampleTimeNow+0x3c>)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a428:	68fb      	ldr	r3, [r7, #12]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	2400a284 	.word	0x2400a284

0800a438 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
 800a444:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a446:	2300      	movs	r3, #0
 800a448:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d812      	bhi.n	800a484 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	1ad2      	subs	r2, r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d302      	bcc.n	800a472 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a46c:	2301      	movs	r3, #1
 800a46e:	617b      	str	r3, [r7, #20]
 800a470:	e01b      	b.n	800a4aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a472:	4b10      	ldr	r3, [pc, #64]	; (800a4b4 <prvInsertTimerInActiveList+0x7c>)
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3304      	adds	r3, #4
 800a47a:	4619      	mov	r1, r3
 800a47c:	4610      	mov	r0, r2
 800a47e:	f7fd fb96 	bl	8007bae <vListInsert>
 800a482:	e012      	b.n	800a4aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d206      	bcs.n	800a49a <prvInsertTimerInActiveList+0x62>
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	429a      	cmp	r2, r3
 800a492:	d302      	bcc.n	800a49a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a494:	2301      	movs	r3, #1
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	e007      	b.n	800a4aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a49a:	4b07      	ldr	r3, [pc, #28]	; (800a4b8 <prvInsertTimerInActiveList+0x80>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	f7fd fb82 	bl	8007bae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a4aa:	697b      	ldr	r3, [r7, #20]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	2400a278 	.word	0x2400a278
 800a4b8:	2400a274 	.word	0x2400a274

0800a4bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b08e      	sub	sp, #56	; 0x38
 800a4c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4c2:	e0ca      	b.n	800a65a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	da18      	bge.n	800a4fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4ca:	1d3b      	adds	r3, r7, #4
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d10a      	bne.n	800a4ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	61fb      	str	r3, [r7, #28]
}
 800a4e8:	bf00      	nop
 800a4ea:	e7fe      	b.n	800a4ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4f2:	6850      	ldr	r0, [r2, #4]
 800a4f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4f6:	6892      	ldr	r2, [r2, #8]
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f2c0 80aa 	blt.w	800a658 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d004      	beq.n	800a51a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	3304      	adds	r3, #4
 800a514:	4618      	mov	r0, r3
 800a516:	f7fd fb83 	bl	8007c20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a51a:	463b      	mov	r3, r7
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7ff ff6b 	bl	800a3f8 <prvSampleTimeNow>
 800a522:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b09      	cmp	r3, #9
 800a528:	f200 8097 	bhi.w	800a65a <prvProcessReceivedCommands+0x19e>
 800a52c:	a201      	add	r2, pc, #4	; (adr r2, 800a534 <prvProcessReceivedCommands+0x78>)
 800a52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a532:	bf00      	nop
 800a534:	0800a55d 	.word	0x0800a55d
 800a538:	0800a55d 	.word	0x0800a55d
 800a53c:	0800a55d 	.word	0x0800a55d
 800a540:	0800a5d1 	.word	0x0800a5d1
 800a544:	0800a5e5 	.word	0x0800a5e5
 800a548:	0800a62f 	.word	0x0800a62f
 800a54c:	0800a55d 	.word	0x0800a55d
 800a550:	0800a55d 	.word	0x0800a55d
 800a554:	0800a5d1 	.word	0x0800a5d1
 800a558:	0800a5e5 	.word	0x0800a5e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a562:	f043 0301 	orr.w	r3, r3, #1
 800a566:	b2da      	uxtb	r2, r3
 800a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	18d1      	adds	r1, r2, r3
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a57a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a57c:	f7ff ff5c 	bl	800a438 <prvInsertTimerInActiveList>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d069      	beq.n	800a65a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a58c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a594:	f003 0304 	and.w	r3, r3, #4
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d05e      	beq.n	800a65a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	441a      	add	r2, r3
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ae:	f7ff fe05 	bl	800a1bc <xTimerGenericCommand>
 800a5b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d14f      	bne.n	800a65a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	61bb      	str	r3, [r7, #24]
}
 800a5cc:	bf00      	nop
 800a5ce:	e7fe      	b.n	800a5ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5d6:	f023 0301 	bic.w	r3, r3, #1
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a5e2:	e03a      	b.n	800a65a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5ea:	f043 0301 	orr.w	r3, r3, #1
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10a      	bne.n	800a61a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	617b      	str	r3, [r7, #20]
}
 800a616:	bf00      	nop
 800a618:	e7fe      	b.n	800a618 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	699a      	ldr	r2, [r3, #24]
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	18d1      	adds	r1, r2, r3
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a628:	f7ff ff06 	bl	800a438 <prvInsertTimerInActiveList>
					break;
 800a62c:	e015      	b.n	800a65a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a634:	f003 0302 	and.w	r3, r3, #2
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d103      	bne.n	800a644 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a63c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a63e:	f7fd f947 	bl	80078d0 <vPortFree>
 800a642:	e00a      	b.n	800a65a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a64a:	f023 0301 	bic.w	r3, r3, #1
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a656:	e000      	b.n	800a65a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a658:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a65a:	4b08      	ldr	r3, [pc, #32]	; (800a67c <prvProcessReceivedCommands+0x1c0>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	1d39      	adds	r1, r7, #4
 800a660:	2200      	movs	r2, #0
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe f926 	bl	80088b4 <xQueueReceive>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f47f af2a 	bne.w	800a4c4 <prvProcessReceivedCommands+0x8>
	}
}
 800a670:	bf00      	nop
 800a672:	bf00      	nop
 800a674:	3730      	adds	r7, #48	; 0x30
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	2400a27c 	.word	0x2400a27c

0800a680 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a686:	e048      	b.n	800a71a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a688:	4b2d      	ldr	r3, [pc, #180]	; (800a740 <prvSwitchTimerLists+0xc0>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a692:	4b2b      	ldr	r3, [pc, #172]	; (800a740 <prvSwitchTimerLists+0xc0>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3304      	adds	r3, #4
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fd fabd 	bl	8007c20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d02e      	beq.n	800a71a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d90e      	bls.n	800a6ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6da:	4b19      	ldr	r3, [pc, #100]	; (800a740 <prvSwitchTimerLists+0xc0>)
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	f7fd fa62 	bl	8007bae <vListInsert>
 800a6ea:	e016      	b.n	800a71a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff fd60 	bl	800a1bc <xTimerGenericCommand>
 800a6fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10a      	bne.n	800a71a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	603b      	str	r3, [r7, #0]
}
 800a716:	bf00      	nop
 800a718:	e7fe      	b.n	800a718 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a71a:	4b09      	ldr	r3, [pc, #36]	; (800a740 <prvSwitchTimerLists+0xc0>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1b1      	bne.n	800a688 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a724:	4b06      	ldr	r3, [pc, #24]	; (800a740 <prvSwitchTimerLists+0xc0>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a72a:	4b06      	ldr	r3, [pc, #24]	; (800a744 <prvSwitchTimerLists+0xc4>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a04      	ldr	r2, [pc, #16]	; (800a740 <prvSwitchTimerLists+0xc0>)
 800a730:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a732:	4a04      	ldr	r2, [pc, #16]	; (800a744 <prvSwitchTimerLists+0xc4>)
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	6013      	str	r3, [r2, #0]
}
 800a738:	bf00      	nop
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	2400a274 	.word	0x2400a274
 800a744:	2400a278 	.word	0x2400a278

0800a748 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a74e:	f7fd fbc1 	bl	8007ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a752:	4b15      	ldr	r3, [pc, #84]	; (800a7a8 <prvCheckForValidListAndQueue+0x60>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d120      	bne.n	800a79c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a75a:	4814      	ldr	r0, [pc, #80]	; (800a7ac <prvCheckForValidListAndQueue+0x64>)
 800a75c:	f7fd f9d6 	bl	8007b0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a760:	4813      	ldr	r0, [pc, #76]	; (800a7b0 <prvCheckForValidListAndQueue+0x68>)
 800a762:	f7fd f9d3 	bl	8007b0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a766:	4b13      	ldr	r3, [pc, #76]	; (800a7b4 <prvCheckForValidListAndQueue+0x6c>)
 800a768:	4a10      	ldr	r2, [pc, #64]	; (800a7ac <prvCheckForValidListAndQueue+0x64>)
 800a76a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a76c:	4b12      	ldr	r3, [pc, #72]	; (800a7b8 <prvCheckForValidListAndQueue+0x70>)
 800a76e:	4a10      	ldr	r2, [pc, #64]	; (800a7b0 <prvCheckForValidListAndQueue+0x68>)
 800a770:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a772:	2300      	movs	r3, #0
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	4b11      	ldr	r3, [pc, #68]	; (800a7bc <prvCheckForValidListAndQueue+0x74>)
 800a778:	4a11      	ldr	r2, [pc, #68]	; (800a7c0 <prvCheckForValidListAndQueue+0x78>)
 800a77a:	2110      	movs	r1, #16
 800a77c:	200a      	movs	r0, #10
 800a77e:	f7fd fd33 	bl	80081e8 <xQueueGenericCreateStatic>
 800a782:	4603      	mov	r3, r0
 800a784:	4a08      	ldr	r2, [pc, #32]	; (800a7a8 <prvCheckForValidListAndQueue+0x60>)
 800a786:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a788:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <prvCheckForValidListAndQueue+0x60>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d005      	beq.n	800a79c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a790:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <prvCheckForValidListAndQueue+0x60>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	490b      	ldr	r1, [pc, #44]	; (800a7c4 <prvCheckForValidListAndQueue+0x7c>)
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fc44 	bl	8009024 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a79c:	f7fd fbca 	bl	8007f34 <vPortExitCritical>
}
 800a7a0:	bf00      	nop
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	2400a27c 	.word	0x2400a27c
 800a7ac:	2400a24c 	.word	0x2400a24c
 800a7b0:	2400a260 	.word	0x2400a260
 800a7b4:	2400a274 	.word	0x2400a274
 800a7b8:	2400a278 	.word	0x2400a278
 800a7bc:	2400a328 	.word	0x2400a328
 800a7c0:	2400a288 	.word	0x2400a288
 800a7c4:	080277a8 	.word	0x080277a8

0800a7c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a7cc:	4b3f      	ldr	r3, [pc, #252]	; (800a8cc <SystemInit+0x104>)
 800a7ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7d2:	4a3e      	ldr	r2, [pc, #248]	; (800a8cc <SystemInit+0x104>)
 800a7d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800a7dc:	4b3b      	ldr	r3, [pc, #236]	; (800a8cc <SystemInit+0x104>)
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	4a3a      	ldr	r2, [pc, #232]	; (800a8cc <SystemInit+0x104>)
 800a7e2:	f043 0310 	orr.w	r3, r3, #16
 800a7e6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a7e8:	4b39      	ldr	r3, [pc, #228]	; (800a8d0 <SystemInit+0x108>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 030f 	and.w	r3, r3, #15
 800a7f0:	2b06      	cmp	r3, #6
 800a7f2:	d807      	bhi.n	800a804 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a7f4:	4b36      	ldr	r3, [pc, #216]	; (800a8d0 <SystemInit+0x108>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f023 030f 	bic.w	r3, r3, #15
 800a7fc:	4a34      	ldr	r2, [pc, #208]	; (800a8d0 <SystemInit+0x108>)
 800a7fe:	f043 0307 	orr.w	r3, r3, #7
 800a802:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a804:	4b33      	ldr	r3, [pc, #204]	; (800a8d4 <SystemInit+0x10c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a32      	ldr	r2, [pc, #200]	; (800a8d4 <SystemInit+0x10c>)
 800a80a:	f043 0301 	orr.w	r3, r3, #1
 800a80e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a810:	4b30      	ldr	r3, [pc, #192]	; (800a8d4 <SystemInit+0x10c>)
 800a812:	2200      	movs	r2, #0
 800a814:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a816:	4b2f      	ldr	r3, [pc, #188]	; (800a8d4 <SystemInit+0x10c>)
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	492e      	ldr	r1, [pc, #184]	; (800a8d4 <SystemInit+0x10c>)
 800a81c:	4b2e      	ldr	r3, [pc, #184]	; (800a8d8 <SystemInit+0x110>)
 800a81e:	4013      	ands	r3, r2
 800a820:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a822:	4b2b      	ldr	r3, [pc, #172]	; (800a8d0 <SystemInit+0x108>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 0308 	and.w	r3, r3, #8
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d007      	beq.n	800a83e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a82e:	4b28      	ldr	r3, [pc, #160]	; (800a8d0 <SystemInit+0x108>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f023 030f 	bic.w	r3, r3, #15
 800a836:	4a26      	ldr	r2, [pc, #152]	; (800a8d0 <SystemInit+0x108>)
 800a838:	f043 0307 	orr.w	r3, r3, #7
 800a83c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a83e:	4b25      	ldr	r3, [pc, #148]	; (800a8d4 <SystemInit+0x10c>)
 800a840:	2200      	movs	r2, #0
 800a842:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800a844:	4b23      	ldr	r3, [pc, #140]	; (800a8d4 <SystemInit+0x10c>)
 800a846:	2200      	movs	r2, #0
 800a848:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800a84a:	4b22      	ldr	r3, [pc, #136]	; (800a8d4 <SystemInit+0x10c>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a850:	4b20      	ldr	r3, [pc, #128]	; (800a8d4 <SystemInit+0x10c>)
 800a852:	4a22      	ldr	r2, [pc, #136]	; (800a8dc <SystemInit+0x114>)
 800a854:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a856:	4b1f      	ldr	r3, [pc, #124]	; (800a8d4 <SystemInit+0x10c>)
 800a858:	4a21      	ldr	r2, [pc, #132]	; (800a8e0 <SystemInit+0x118>)
 800a85a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a85c:	4b1d      	ldr	r3, [pc, #116]	; (800a8d4 <SystemInit+0x10c>)
 800a85e:	4a21      	ldr	r2, [pc, #132]	; (800a8e4 <SystemInit+0x11c>)
 800a860:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a862:	4b1c      	ldr	r3, [pc, #112]	; (800a8d4 <SystemInit+0x10c>)
 800a864:	2200      	movs	r2, #0
 800a866:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a868:	4b1a      	ldr	r3, [pc, #104]	; (800a8d4 <SystemInit+0x10c>)
 800a86a:	4a1e      	ldr	r2, [pc, #120]	; (800a8e4 <SystemInit+0x11c>)
 800a86c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a86e:	4b19      	ldr	r3, [pc, #100]	; (800a8d4 <SystemInit+0x10c>)
 800a870:	2200      	movs	r2, #0
 800a872:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a874:	4b17      	ldr	r3, [pc, #92]	; (800a8d4 <SystemInit+0x10c>)
 800a876:	4a1b      	ldr	r2, [pc, #108]	; (800a8e4 <SystemInit+0x11c>)
 800a878:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a87a:	4b16      	ldr	r3, [pc, #88]	; (800a8d4 <SystemInit+0x10c>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a880:	4b14      	ldr	r3, [pc, #80]	; (800a8d4 <SystemInit+0x10c>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a13      	ldr	r2, [pc, #76]	; (800a8d4 <SystemInit+0x10c>)
 800a886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a88a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a88c:	4b11      	ldr	r3, [pc, #68]	; (800a8d4 <SystemInit+0x10c>)
 800a88e:	2200      	movs	r2, #0
 800a890:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800a892:	4b15      	ldr	r3, [pc, #84]	; (800a8e8 <SystemInit+0x120>)
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	4a14      	ldr	r2, [pc, #80]	; (800a8e8 <SystemInit+0x120>)
 800a898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a89c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a89e:	4b13      	ldr	r3, [pc, #76]	; (800a8ec <SystemInit+0x124>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	4b13      	ldr	r3, [pc, #76]	; (800a8f0 <SystemInit+0x128>)
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8aa:	d202      	bcs.n	800a8b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a8ac:	4b11      	ldr	r3, [pc, #68]	; (800a8f4 <SystemInit+0x12c>)
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a8b2:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <SystemInit+0x130>)
 800a8b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800a8b8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800a8ba:	4b04      	ldr	r3, [pc, #16]	; (800a8cc <SystemInit+0x104>)
 800a8bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a8c0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800a8c2:	bf00      	nop
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	e000ed00 	.word	0xe000ed00
 800a8d0:	52002000 	.word	0x52002000
 800a8d4:	58024400 	.word	0x58024400
 800a8d8:	eaf6ed7f 	.word	0xeaf6ed7f
 800a8dc:	02020200 	.word	0x02020200
 800a8e0:	01ff0000 	.word	0x01ff0000
 800a8e4:	01010280 	.word	0x01010280
 800a8e8:	580000c0 	.word	0x580000c0
 800a8ec:	5c001000 	.word	0x5c001000
 800a8f0:	ffff0000 	.word	0xffff0000
 800a8f4:	51008108 	.word	0x51008108
 800a8f8:	52004000 	.word	0x52004000

0800a8fc <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d103      	bne.n	800a914 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800a90c:	f04f 33ff 	mov.w	r3, #4294967295
 800a910:	60fb      	str	r3, [r7, #12]
 800a912:	e02c      	b.n	800a96e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	891a      	ldrh	r2, [r3, #8]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	68da      	ldr	r2, [r3, #12]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	691a      	ldr	r2, [r3, #16]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	695a      	ldr	r2, [r3, #20]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a0c      	ldr	r2, [pc, #48]	; (800a978 <FT5336_RegisterBusIO+0x7c>)
 800a948:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a0b      	ldr	r2, [pc, #44]	; (800a97c <FT5336_RegisterBusIO+0x80>)
 800a94e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d004      	beq.n	800a968 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4798      	blx	r3
 800a964:	60f8      	str	r0, [r7, #12]
 800a966:	e002      	b.n	800a96e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800a968:	f04f 33ff 	mov.w	r3, #4294967295
 800a96c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a96e:	68fb      	ldr	r3, [r7, #12]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	0800ad83 	.word	0x0800ad83
 800a97c:	0800adb7 	.word	0x0800adb7

0800a980 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2201      	movs	r2, #1
 800a98e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2201      	movs	r2, #1
 800a994:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	2205      	movs	r2, #5
 800a99a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a9a2:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a9aa:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10d      	bne.n	800a9ec <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f98e 	bl	800acf8 <FT5336_DisableIT>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d002      	beq.n	800a9f8 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800a9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b085      	sub	sp, #20
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d103      	bne.n	800aa20 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800aa20:	68fb      	ldr	r3, [r7, #12]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b084      	sub	sp, #16
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f103 0218 	add.w	r2, r3, #24
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	4619      	mov	r1, r3
 800aa46:	4610      	mov	r0, r2
 800aa48:	f000 fa2c 	bl	800aea4 <ft5336_radian_value>
 800aa4c:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f103 0218 	add.w	r2, r3, #24
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	f000 fa32 	bl	800aec6 <ft5336_offset_left_right>
 800aa62:	4602      	mov	r2, r0
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4413      	add	r3, r2
 800aa68:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f103 0218 	add.w	r2, r3, #24
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	4619      	mov	r1, r3
 800aa78:	4610      	mov	r0, r2
 800aa7a:	f000 fa35 	bl	800aee8 <ft5336_offset_up_down>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4413      	add	r3, r2
 800aa84:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f103 0218 	add.w	r2, r3, #24
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	4619      	mov	r1, r3
 800aa94:	4610      	mov	r0, r2
 800aa96:	f000 fa38 	bl	800af0a <ft5336_disatnce_left_right>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f103 0218 	add.w	r2, r3, #24
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	4619      	mov	r1, r3
 800aab0:	4610      	mov	r0, r2
 800aab2:	f000 fa3b 	bl	800af2c <ft5336_distance_up_down>
 800aab6:	4602      	mov	r2, r0
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4413      	add	r3, r2
 800aabc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f103 0218 	add.w	r2, r3, #24
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	4619      	mov	r1, r3
 800aacc:	4610      	mov	r0, r2
 800aace:	f000 fa3e 	bl	800af4e <ft5336_distance_zoom>
 800aad2:	4602      	mov	r2, r0
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	4413      	add	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800aae0:	f04f 33ff 	mov.w	r3, #4294967295
 800aae4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aae6:	68fb      	ldr	r3, [r7, #12]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	3318      	adds	r3, #24
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 fa46 	bl	800af92 <ft5336_chip_id>
 800ab06:	4603      	mov	r3, r0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f90f 	bl	800ad42 <FT5336_DetectTouch>
 800ab24:	4603      	mov	r3, r0
 800ab26:	461a      	mov	r2, r3
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f103 0018 	add.w	r0, r3, #24
 800ab32:	f107 0208 	add.w	r2, r7, #8
 800ab36:	2304      	movs	r3, #4
 800ab38:	2103      	movs	r1, #3
 800ab3a:	f000 f956 	bl	800adea <ft5336_read_reg>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d003      	beq.n	800ab4c <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800ab44:	f04f 33ff 	mov.w	r3, #4294967295
 800ab48:	60fb      	str	r3, [r7, #12]
 800ab4a:	e00f      	b.n	800ab6c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800ab4c:	7a3b      	ldrb	r3, [r7, #8]
 800ab4e:	021b      	lsls	r3, r3, #8
 800ab50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ab54:	7a7a      	ldrb	r2, [r7, #9]
 800ab56:	431a      	orrs	r2, r3
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800ab5c:	7abb      	ldrb	r3, [r7, #10]
 800ab5e:	021b      	lsls	r3, r3, #8
 800ab60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ab64:	7afa      	ldrb	r2, [r7, #11]
 800ab66:	431a      	orrs	r2, r3
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b08c      	sub	sp, #48	; 0x30
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f8dc 	bl	800ad42 <FT5336_DetectTouch>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f103 0018 	add.w	r0, r3, #24
 800ab98:	f107 0208 	add.w	r2, r7, #8
 800ab9c:	231e      	movs	r3, #30
 800ab9e:	2103      	movs	r1, #3
 800aba0:	f000 f923 	bl	800adea <ft5336_read_reg>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800abaa:	f04f 33ff 	mov.w	r3, #4294967295
 800abae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abb0:	e07e      	b.n	800acb0 <FT5336_GetMultiTouchState+0x13a>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800abb2:	2300      	movs	r3, #0
 800abb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800abb6:	e078      	b.n	800acaa <FT5336_GetMultiTouchState+0x134>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800abb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abba:	4613      	mov	r3, r2
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	4413      	add	r3, r2
 800abc0:	005b      	lsls	r3, r3, #1
 800abc2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800abc6:	4413      	add	r3, r2
 800abc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800abcc:	021b      	lsls	r3, r3, #8
 800abce:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800abd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd4:	4613      	mov	r3, r2
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	4413      	add	r3, r2
 800abda:	005b      	lsls	r3, r3, #1
 800abdc:	3301      	adds	r3, #1
 800abde:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800abe2:	4413      	add	r3, r2
 800abe4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800abe8:	ea41 0203 	orr.w	r2, r1, r3
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800abf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abf8:	4613      	mov	r3, r2
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	4413      	add	r3, r2
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	3302      	adds	r3, #2
 800ac02:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ac06:	4413      	add	r3, r2
 800ac08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ac0c:	021b      	lsls	r3, r3, #8
 800ac0e:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800ac12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac14:	4613      	mov	r3, r2
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	4413      	add	r3, r2
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	3303      	adds	r3, #3
 800ac1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ac22:	4413      	add	r3, r2
 800ac24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ac28:	4319      	orrs	r1, r3
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac2e:	3206      	adds	r2, #6
 800ac30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800ac34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac36:	4613      	mov	r3, r2
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	4413      	add	r3, r2
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ac42:	4413      	add	r3, r2
 800ac44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ac48:	099b      	lsrs	r3, r3, #6
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac52:	3210      	adds	r2, #16
 800ac54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800ac58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	005b      	lsls	r3, r3, #1
 800ac5e:	4413      	add	r3, r2
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	3304      	adds	r3, #4
 800ac64:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ac68:	4413      	add	r3, r2
 800ac6a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	330a      	adds	r3, #10
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800ac7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac7e:	4613      	mov	r3, r2
 800ac80:	005b      	lsls	r3, r3, #1
 800ac82:	4413      	add	r3, r2
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	3305      	adds	r3, #5
 800ac88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ac92:	091b      	lsrs	r3, r3, #4
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	4619      	mov	r1, r3
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9c:	3314      	adds	r3, #20
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	3301      	adds	r3, #1
 800aca8:	62bb      	str	r3, [r7, #40]	; 0x28
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	2b04      	cmp	r3, #4
 800acae:	d983      	bls.n	800abb8 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3730      	adds	r7, #48	; 0x30
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b082      	sub	sp, #8
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	3318      	adds	r3, #24
 800acc8:	6839      	ldr	r1, [r7, #0]
 800acca:	4618      	mov	r0, r3
 800accc:	f000 f8bb 	bl	800ae46 <ft5336_gest_id>
 800acd0:	4603      	mov	r3, r0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b082      	sub	sp, #8
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	3318      	adds	r3, #24
 800ace6:	2101      	movs	r1, #1
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 f941 	bl	800af70 <ft5336_g_mode>
 800acee:	4603      	mov	r3, r0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	3318      	adds	r3, #24
 800ad04:	2100      	movs	r1, #0
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 f932 	bl	800af70 <ft5336_g_mode>
 800ad0c:	4603      	mov	r3, r0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800ad16:	b480      	push	{r7}
 800ad18:	b083      	sub	sp, #12
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	370c      	adds	r7, #12
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	3318      	adds	r3, #24
 800ad4e:	f107 020b 	add.w	r2, r7, #11
 800ad52:	4611      	mov	r1, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 f886 	bl	800ae66 <ft5336_td_status>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800ad60:	f04f 33ff 	mov.w	r3, #4294967295
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	e007      	b.n	800ad78 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800ad68:	7afb      	ldrb	r3, [r7, #11]
 800ad6a:	2b05      	cmp	r3, #5
 800ad6c:	d902      	bls.n	800ad74 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	e001      	b.n	800ad78 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800ad74:	7afb      	ldrb	r3, [r7, #11]
 800ad76:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800ad78:	68fb      	ldr	r3, [r7, #12]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800ad82:	b590      	push	{r4, r7, lr}
 800ad84:	b087      	sub	sp, #28
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60f8      	str	r0, [r7, #12]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	460b      	mov	r3, r1
 800ad90:	72fb      	strb	r3, [r7, #11]
 800ad92:	4613      	mov	r3, r2
 800ad94:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	691c      	ldr	r4, [r3, #16]
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	8918      	ldrh	r0, [r3, #8]
 800ada2:	7afb      	ldrb	r3, [r7, #11]
 800ada4:	b299      	uxth	r1, r3
 800ada6:	893b      	ldrh	r3, [r7, #8]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	47a0      	blx	r4
 800adac:	4603      	mov	r3, r0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	371c      	adds	r7, #28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd90      	pop	{r4, r7, pc}

0800adb6 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800adb6:	b590      	push	{r4, r7, lr}
 800adb8:	b087      	sub	sp, #28
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	607a      	str	r2, [r7, #4]
 800adc0:	461a      	mov	r2, r3
 800adc2:	460b      	mov	r3, r1
 800adc4:	72fb      	strb	r3, [r7, #11]
 800adc6:	4613      	mov	r3, r2
 800adc8:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	68dc      	ldr	r4, [r3, #12]
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	8918      	ldrh	r0, [r3, #8]
 800add6:	7afb      	ldrb	r3, [r7, #11]
 800add8:	b299      	uxth	r1, r3
 800adda:	893b      	ldrh	r3, [r7, #8]
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	47a0      	blx	r4
 800ade0:	4603      	mov	r3, r0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	371c      	adds	r7, #28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd90      	pop	{r4, r7, pc}

0800adea <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800adea:	b590      	push	{r4, r7, lr}
 800adec:	b085      	sub	sp, #20
 800adee:	af00      	add	r7, sp, #0
 800adf0:	60f8      	str	r0, [r7, #12]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	461a      	mov	r2, r3
 800adf6:	460b      	mov	r3, r1
 800adf8:	72fb      	strb	r3, [r7, #11]
 800adfa:	4613      	mov	r3, r2
 800adfc:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	685c      	ldr	r4, [r3, #4]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6898      	ldr	r0, [r3, #8]
 800ae06:	893b      	ldrh	r3, [r7, #8]
 800ae08:	7af9      	ldrb	r1, [r7, #11]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	47a0      	blx	r4
 800ae0e:	4603      	mov	r3, r0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd90      	pop	{r4, r7, pc}

0800ae18 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800ae18:	b590      	push	{r4, r7, lr}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	607a      	str	r2, [r7, #4]
 800ae22:	461a      	mov	r2, r3
 800ae24:	460b      	mov	r3, r1
 800ae26:	72fb      	strb	r3, [r7, #11]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681c      	ldr	r4, [r3, #0]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6898      	ldr	r0, [r3, #8]
 800ae34:	893b      	ldrh	r3, [r7, #8]
 800ae36:	7af9      	ldrb	r1, [r7, #11]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	47a0      	blx	r4
 800ae3c:	4603      	mov	r3, r0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3714      	adds	r7, #20
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd90      	pop	{r4, r7, pc}

0800ae46 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b082      	sub	sp, #8
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800ae50:	2301      	movs	r3, #1
 800ae52:	683a      	ldr	r2, [r7, #0]
 800ae54:	2101      	movs	r1, #1
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7ff ffc7 	bl	800adea <ft5336_read_reg>
 800ae5c:	4603      	mov	r3, r0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b084      	sub	sp, #16
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800ae70:	2301      	movs	r3, #1
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	2102      	movs	r1, #2
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff ffb7 	bl	800adea <ft5336_read_reg>
 800ae7c:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10a      	bne.n	800ae9a <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	f003 030f 	and.w	r3, r3, #15
 800ae8c:	b2da      	uxtb	r2, r3
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	781a      	ldrb	r2, [r3, #0]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800aeb0:	1cfa      	adds	r2, r7, #3
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	2191      	movs	r1, #145	; 0x91
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff ffae 	bl	800ae18 <ft5336_write_reg>
 800aebc:	4603      	mov	r3, r0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b082      	sub	sp, #8
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800aed2:	1cfa      	adds	r2, r7, #3
 800aed4:	2301      	movs	r3, #1
 800aed6:	2192      	movs	r1, #146	; 0x92
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7ff ff9d 	bl	800ae18 <ft5336_write_reg>
 800aede:	4603      	mov	r3, r0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800aef4:	1cfa      	adds	r2, r7, #3
 800aef6:	2301      	movs	r3, #1
 800aef8:	2193      	movs	r1, #147	; 0x93
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff ff8c 	bl	800ae18 <ft5336_write_reg>
 800af00:	4603      	mov	r3, r0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b082      	sub	sp, #8
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	460b      	mov	r3, r1
 800af14:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800af16:	1cfa      	adds	r2, r7, #3
 800af18:	2301      	movs	r3, #1
 800af1a:	2194      	movs	r1, #148	; 0x94
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ff7b 	bl	800ae18 <ft5336_write_reg>
 800af22:	4603      	mov	r3, r0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800af38:	1cfa      	adds	r2, r7, #3
 800af3a:	2301      	movs	r3, #1
 800af3c:	2195      	movs	r1, #149	; 0x95
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff ff6a 	bl	800ae18 <ft5336_write_reg>
 800af44:	4603      	mov	r3, r0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b082      	sub	sp, #8
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	460b      	mov	r3, r1
 800af58:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800af5a:	1cfa      	adds	r2, r7, #3
 800af5c:	2301      	movs	r3, #1
 800af5e:	2196      	movs	r1, #150	; 0x96
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7ff ff59 	bl	800ae18 <ft5336_write_reg>
 800af66:	4603      	mov	r3, r0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800af7c:	1cfa      	adds	r2, r7, #3
 800af7e:	2301      	movs	r3, #1
 800af80:	21a4      	movs	r1, #164	; 0xa4
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff ff48 	bl	800ae18 <ft5336_write_reg>
 800af88:	4603      	mov	r3, r0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800af9c:	2301      	movs	r3, #1
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	21a8      	movs	r1, #168	; 0xa8
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7ff ff21 	bl	800adea <ft5336_read_reg>
 800afa8:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d107      	bne.n	800afc0 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	781a      	ldrb	r2, [r3, #0]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	781a      	ldrb	r2, [r3, #0]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800afc0:	68fb      	ldr	r3, [r7, #12]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800afca:	b480      	push	{r7}
 800afcc:	b083      	sub	sp, #12
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800afd8:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800afe0:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afe8:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aff2:	fbb2 f2f3 	udiv	r2, r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b002:	fbb2 f2f3 	udiv	r2, r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b090      	sub	sp, #64	; 0x40
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	460b      	mov	r3, r1
 800b022:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b024:	78fb      	ldrb	r3, [r7, #3]
 800b026:	2b03      	cmp	r3, #3
 800b028:	d102      	bne.n	800b030 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800b02a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b02e:	e001      	b.n	800b034 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800b030:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b034:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800b036:	23b7      	movs	r3, #183	; 0xb7
 800b038:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b03e:	2300      	movs	r3, #0
 800b040:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b042:	2300      	movs	r3, #0
 800b044:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b04e:	2300      	movs	r3, #0
 800b050:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b052:	2300      	movs	r3, #0
 800b054:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800b056:	78fb      	ldrb	r3, [r7, #3]
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f860 	bl	800b120 <MT25TL01G_WriteEnable>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d002      	beq.n	800b06c <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b066:	f06f 0301 	mvn.w	r3, #1
 800b06a:	e019      	b.n	800b0a0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b06c:	f107 0308 	add.w	r3, r7, #8
 800b070:	f241 3288 	movw	r2, #5000	; 0x1388
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f004 fd2e 	bl	800fad8 <HAL_QSPI_Command>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d002      	beq.n	800b088 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b082:	f06f 0301 	mvn.w	r3, #1
 800b086:	e00b      	b.n	800b0a0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800b088:	78fb      	ldrb	r3, [r7, #3]
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f80b 	bl	800b0a8 <MT25TL01G_AutoPollingMemReady>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b098:	f06f 0301 	mvn.w	r3, #1
 800b09c:	e000      	b.n	800b0a0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3740      	adds	r7, #64	; 0x40
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b096      	sub	sp, #88	; 0x58
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b0b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b0b8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800b0ba:	2305      	movs	r3, #5
 800b0bc:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800b0c6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b0ca:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800b0e4:	2310      	movs	r3, #16
 800b0e6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800b0e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0ec:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800b0ee:	f240 1301 	movw	r3, #257	; 0x101
 800b0f2:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b0f8:	f107 0208 	add.w	r2, r7, #8
 800b0fc:	f107 0120 	add.w	r1, r7, #32
 800b100:	f241 3388 	movw	r3, #5000	; 0x1388
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f004 fe74 	bl	800fdf2 <HAL_QSPI_AutoPolling>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800b110:	f06f 0304 	mvn.w	r3, #4
 800b114:	e000      	b.n	800b118 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800b116:	2300      	movs	r3, #0

}
 800b118:	4618      	mov	r0, r3
 800b11a:	3758      	adds	r7, #88	; 0x58
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b096      	sub	sp, #88	; 0x58
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b12c:	78fb      	ldrb	r3, [r7, #3]
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d102      	bne.n	800b138 <MT25TL01G_WriteEnable+0x18>
 800b132:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b136:	e001      	b.n	800b13c <MT25TL01G_WriteEnable+0x1c>
 800b138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b13c:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800b13e:	2306      	movs	r3, #6
 800b140:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b142:	2300      	movs	r3, #0
 800b144:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b146:	2300      	movs	r3, #0
 800b148:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800b14a:	2300      	movs	r3, #0
 800b14c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b152:	2300      	movs	r3, #0
 800b154:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b156:	2300      	movs	r3, #0
 800b158:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b15a:	2300      	movs	r3, #0
 800b15c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b15e:	f107 0320 	add.w	r3, r7, #32
 800b162:	f241 3288 	movw	r2, #5000	; 0x1388
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f004 fcb5 	bl	800fad8 <HAL_QSPI_Command>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b174:	f06f 0301 	mvn.w	r3, #1
 800b178:	e029      	b.n	800b1ce <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800b17a:	f240 2302 	movw	r3, #514	; 0x202
 800b17e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800b180:	f240 2302 	movw	r3, #514	; 0x202
 800b184:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800b186:	2300      	movs	r3, #0
 800b188:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800b18a:	2302      	movs	r3, #2
 800b18c:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800b18e:	2310      	movs	r3, #16
 800b190:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800b192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b196:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800b198:	2305      	movs	r3, #5
 800b19a:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800b19c:	78fb      	ldrb	r3, [r7, #3]
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d102      	bne.n	800b1a8 <MT25TL01G_WriteEnable+0x88>
 800b1a2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b1a6:	e001      	b.n	800b1ac <MT25TL01G_WriteEnable+0x8c>
 800b1a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1ac:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b1ae:	f107 0208 	add.w	r2, r7, #8
 800b1b2:	f107 0120 	add.w	r1, r7, #32
 800b1b6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f004 fe19 	bl	800fdf2 <HAL_QSPI_AutoPolling>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800b1c6:	f06f 0304 	mvn.w	r3, #4
 800b1ca:	e000      	b.n	800b1ce <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3758      	adds	r7, #88	; 0x58
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b090      	sub	sp, #64	; 0x40
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b1de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1e2:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800b1e4:	2335      	movs	r3, #53	; 0x35
 800b1e6:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b200:	2300      	movs	r3, #0
 800b202:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b204:	f107 0308 	add.w	r3, r7, #8
 800b208:	f241 3288 	movw	r2, #5000	; 0x1388
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f004 fc62 	bl	800fad8 <HAL_QSPI_Command>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d002      	beq.n	800b220 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b21a:	f06f 0301 	mvn.w	r3, #1
 800b21e:	e000      	b.n	800b222 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3740      	adds	r7, #64	; 0x40
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b090      	sub	sp, #64	; 0x40
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b232:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b236:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800b238:	23f5      	movs	r3, #245	; 0xf5
 800b23a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b23c:	2300      	movs	r3, #0
 800b23e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b240:	2300      	movs	r3, #0
 800b242:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b244:	2300      	movs	r3, #0
 800b246:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b250:	2300      	movs	r3, #0
 800b252:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b254:	2300      	movs	r3, #0
 800b256:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b258:	f107 0308 	add.w	r3, r7, #8
 800b25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f004 fc38 	bl	800fad8 <HAL_QSPI_Command>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d002      	beq.n	800b274 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b26e:	f06f 0301 	mvn.w	r3, #1
 800b272:	e000      	b.n	800b276 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3740      	adds	r7, #64	; 0x40
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b092      	sub	sp, #72	; 0x48
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	460b      	mov	r3, r1
 800b28a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800b28c:	78fb      	ldrb	r3, [r7, #3]
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d83a      	bhi.n	800b308 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800b292:	a201      	add	r2, pc, #4	; (adr r2, 800b298 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800b294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b298:	0800b2a9 	.word	0x0800b2a9
 800b29c:	0800b2c1 	.word	0x0800b2c1
 800b2a0:	0800b2d9 	.word	0x0800b2d9
 800b2a4:	0800b2f1 	.word	0x0800b2f1
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b2a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2ac:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800b2ae:	230e      	movs	r3, #14
 800b2b0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800b2b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800b2b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2bc:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b2be:	e023      	b.n	800b308 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b2c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2c4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800b2c6:	233d      	movs	r3, #61	; 0x3d
 800b2c8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800b2ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800b2d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2d4:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b2d6:	e017      	b.n	800b308 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b2d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2dc:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800b2de:	23ee      	movs	r3, #238	; 0xee
 800b2e0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b2e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b2e8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b2ec:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b2ee:	e00b      	b.n	800b308 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b2f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b2f4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800b2f6:	23ed      	movs	r3, #237	; 0xed
 800b2f8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b2fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b300:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b304:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b306:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800b308:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b30c:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b30e:	2300      	movs	r3, #0
 800b310:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800b312:	2308      	movs	r3, #8
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800b316:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b31a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800b31c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b320:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b322:	2300      	movs	r3, #0
 800b324:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800b326:	2300      	movs	r3, #0
 800b328:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800b32e:	f107 0208 	add.w	r2, r7, #8
 800b332:	f107 0310 	add.w	r3, r7, #16
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f004 fdd1 	bl	800fee0 <HAL_QSPI_MemoryMapped>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800b344:	f06f 0305 	mvn.w	r3, #5
 800b348:	e000      	b.n	800b34c <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3748      	adds	r7, #72	; 0x48
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b092      	sub	sp, #72	; 0x48
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	460b      	mov	r3, r1
 800b35e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800b360:	78fb      	ldrb	r3, [r7, #3]
 800b362:	2b03      	cmp	r3, #3
 800b364:	d83a      	bhi.n	800b3dc <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800b366:	a201      	add	r2, pc, #4	; (adr r2, 800b36c <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b37d 	.word	0x0800b37d
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b3ad 	.word	0x0800b3ad
 800b378:	0800b3c5 	.word	0x0800b3c5
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b37c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b380:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800b382:	230c      	movs	r3, #12
 800b384:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800b386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b38a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800b38c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b390:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800b392:	e023      	b.n	800b3dc <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b394:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b398:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800b39a:	23bc      	movs	r3, #188	; 0xbc
 800b39c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800b39e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800b3a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3a8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b3aa:	e017      	b.n	800b3dc <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b3ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3b0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800b3b2:	23ec      	movs	r3, #236	; 0xec
 800b3b4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b3b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b3bc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b3c0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b3c2:	e00b      	b.n	800b3dc <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b3c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b3c8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800b3ca:	23eb      	movs	r3, #235	; 0xeb
 800b3cc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b3ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b3d4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b3d8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b3da:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800b3dc:	2308      	movs	r3, #8
 800b3de:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800b3e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b3e4:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800b3fe:	f107 0208 	add.w	r2, r7, #8
 800b402:	f107 0310 	add.w	r3, r7, #16
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f004 fd69 	bl	800fee0 <HAL_QSPI_MemoryMapped>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d002      	beq.n	800b41a <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800b414:	f06f 0305 	mvn.w	r3, #5
 800b418:	e000      	b.n	800b41c <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3748      	adds	r7, #72	; 0x48
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b090      	sub	sp, #64	; 0x40
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	460b      	mov	r3, r1
 800b42e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b430:	78fb      	ldrb	r3, [r7, #3]
 800b432:	2b03      	cmp	r3, #3
 800b434:	d102      	bne.n	800b43c <MT25TL01G_ResetEnable+0x18>
 800b436:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b43a:	e001      	b.n	800b440 <MT25TL01G_ResetEnable+0x1c>
 800b43c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b440:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800b442:	2366      	movs	r3, #102	; 0x66
 800b444:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b446:	2300      	movs	r3, #0
 800b448:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b44a:	2300      	movs	r3, #0
 800b44c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b44e:	2300      	movs	r3, #0
 800b450:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b456:	2300      	movs	r3, #0
 800b458:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b45a:	2300      	movs	r3, #0
 800b45c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b45e:	2300      	movs	r3, #0
 800b460:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b462:	f107 0308 	add.w	r3, r7, #8
 800b466:	f241 3288 	movw	r2, #5000	; 0x1388
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f004 fb33 	bl	800fad8 <HAL_QSPI_Command>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b478:	f06f 0301 	mvn.w	r3, #1
 800b47c:	e000      	b.n	800b480 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3740      	adds	r7, #64	; 0x40
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b090      	sub	sp, #64	; 0x40
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b494:	78fb      	ldrb	r3, [r7, #3]
 800b496:	2b03      	cmp	r3, #3
 800b498:	d102      	bne.n	800b4a0 <MT25TL01G_ResetMemory+0x18>
 800b49a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b49e:	e001      	b.n	800b4a4 <MT25TL01G_ResetMemory+0x1c>
 800b4a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4a4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800b4a6:	2399      	movs	r3, #153	; 0x99
 800b4a8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b4c6:	f107 0308 	add.w	r3, r7, #8
 800b4ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f004 fb01 	bl	800fad8 <HAL_QSPI_Command>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b4dc:	f06f 0301 	mvn.w	r3, #1
 800b4e0:	e000      	b.n	800b4e4 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3740      	adds	r7, #64	; 0x40
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800b4f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4fa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4619      	mov	r1, r3
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f832 	bl	800b56c <MT48LC4M32B2_ClockEnable>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d128      	bne.n	800b560 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800b50e:	2001      	movs	r0, #1
 800b510:	f000 f8e2 	bl	800b6d8 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f84a 	bl	800b5b4 <MT48LC4M32B2_Precharge>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d11c      	bne.n	800b560 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	6819      	ldr	r1, [r3, #0]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	461a      	mov	r2, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f897 	bl	800b664 <MT48LC4M32B2_RefreshMode>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d111      	bne.n	800b560 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800b53c:	6839      	ldr	r1, [r7, #0]
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f85c 	bl	800b5fc <MT48LC4M32B2_ModeRegConfig>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10a      	bne.n	800b560 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	4619      	mov	r1, r3
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 f8ad 	bl	800b6b0 <MT48LC4M32B2_RefreshRate>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800b560:	68fb      	ldr	r3, [r7, #12]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
	...

0800b56c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800b576:	4b0e      	ldr	r3, [pc, #56]	; (800b5b0 <MT48LC4M32B2_ClockEnable+0x44>)
 800b578:	2201      	movs	r2, #1
 800b57a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800b57c:	4a0c      	ldr	r2, [pc, #48]	; (800b5b0 <MT48LC4M32B2_ClockEnable+0x44>)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800b582:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <MT48LC4M32B2_ClockEnable+0x44>)
 800b584:	2201      	movs	r2, #1
 800b586:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800b588:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <MT48LC4M32B2_ClockEnable+0x44>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b58e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b592:	4907      	ldr	r1, [pc, #28]	; (800b5b0 <MT48LC4M32B2_ClockEnable+0x44>)
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f007 f8b3 	bl	8012700 <HAL_SDRAM_SendCommand>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d002      	beq.n	800b5a6 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800b5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a4:	e000      	b.n	800b5a8 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b5a6:	2300      	movs	r3, #0
  }
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	2400a378 	.word	0x2400a378

0800b5b4 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800b5be:	4b0e      	ldr	r3, [pc, #56]	; (800b5f8 <MT48LC4M32B2_Precharge+0x44>)
 800b5c0:	2202      	movs	r2, #2
 800b5c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800b5c4:	4a0c      	ldr	r2, [pc, #48]	; (800b5f8 <MT48LC4M32B2_Precharge+0x44>)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800b5ca:	4b0b      	ldr	r3, [pc, #44]	; (800b5f8 <MT48LC4M32B2_Precharge+0x44>)
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800b5d0:	4b09      	ldr	r3, [pc, #36]	; (800b5f8 <MT48LC4M32B2_Precharge+0x44>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b5d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5da:	4907      	ldr	r1, [pc, #28]	; (800b5f8 <MT48LC4M32B2_Precharge+0x44>)
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f007 f88f 	bl	8012700 <HAL_SDRAM_SendCommand>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800b5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ec:	e000      	b.n	800b5f0 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b5ee:	2300      	movs	r3, #0
  }
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	2400a378 	.word	0x2400a378

0800b5fc <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800b60e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800b614:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800b61a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800b620:	4313      	orrs	r3, r2
 800b622:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800b624:	4b0e      	ldr	r3, [pc, #56]	; (800b660 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b626:	2204      	movs	r2, #4
 800b628:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a0c      	ldr	r2, [pc, #48]	; (800b660 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b630:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800b632:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b634:	2201      	movs	r2, #1
 800b636:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800b638:	4a09      	ldr	r2, [pc, #36]	; (800b660 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b63e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b642:	4907      	ldr	r1, [pc, #28]	; (800b660 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f007 f85b 	bl	8012700 <HAL_SDRAM_SendCommand>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800b650:	f04f 33ff 	mov.w	r3, #4294967295
 800b654:	e000      	b.n	800b658 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b656:	2300      	movs	r3, #0
  }
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	2400a378 	.word	0x2400a378

0800b664 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800b670:	4a0e      	ldr	r2, [pc, #56]	; (800b6ac <MT48LC4M32B2_RefreshMode+0x48>)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800b676:	4a0d      	ldr	r2, [pc, #52]	; (800b6ac <MT48LC4M32B2_RefreshMode+0x48>)
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800b67c:	4b0b      	ldr	r3, [pc, #44]	; (800b6ac <MT48LC4M32B2_RefreshMode+0x48>)
 800b67e:	2208      	movs	r2, #8
 800b680:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800b682:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <MT48LC4M32B2_RefreshMode+0x48>)
 800b684:	2200      	movs	r2, #0
 800b686:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b68c:	4907      	ldr	r1, [pc, #28]	; (800b6ac <MT48LC4M32B2_RefreshMode+0x48>)
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f007 f836 	bl	8012700 <HAL_SDRAM_SendCommand>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d002      	beq.n	800b6a0 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800b69a:	f04f 33ff 	mov.w	r3, #4294967295
 800b69e:	e000      	b.n	800b6a2 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b6a0:	2300      	movs	r3, #0
  }
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	2400a378 	.word	0x2400a378

0800b6b0 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f007 f854 	bl	801276a <HAL_SDRAM_ProgramRefreshRate>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800b6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6cc:	e000      	b.n	800b6d0 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b6ce:	2300      	movs	r3, #0
  }
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800b6e0:	f001 fcfc 	bl	800d0dc <HAL_GetTick>
 800b6e4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800b6e6:	bf00      	nop
 800b6e8:	f001 fcf8 	bl	800d0dc <HAL_GetTick>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d8f7      	bhi.n	800b6e8 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
	...

0800b704 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b70a:	2300      	movs	r3, #0
 800b70c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800b70e:	4b16      	ldr	r3, [pc, #88]	; (800b768 <BSP_I2C4_Init+0x64>)
 800b710:	4a16      	ldr	r2, [pc, #88]	; (800b76c <BSP_I2C4_Init+0x68>)
 800b712:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800b714:	4b16      	ldr	r3, [pc, #88]	; (800b770 <BSP_I2C4_Init+0x6c>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d11f      	bne.n	800b75c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800b71c:	4b14      	ldr	r3, [pc, #80]	; (800b770 <BSP_I2C4_Init+0x6c>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3301      	adds	r3, #1
 800b722:	4a13      	ldr	r2, [pc, #76]	; (800b770 <BSP_I2C4_Init+0x6c>)
 800b724:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800b726:	4810      	ldr	r0, [pc, #64]	; (800b768 <BSP_I2C4_Init+0x64>)
 800b728:	f002 fefa 	bl	800e520 <HAL_I2C_GetState>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d114      	bne.n	800b75c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800b732:	480d      	ldr	r0, [pc, #52]	; (800b768 <BSP_I2C4_Init+0x64>)
 800b734:	f000 fb60 	bl	800bdf8 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800b738:	f005 fe8e 	bl	8011458 <HAL_RCC_GetPCLK2Freq>
 800b73c:	4603      	mov	r3, r0
 800b73e:	490d      	ldr	r1, [pc, #52]	; (800b774 <BSP_I2C4_Init+0x70>)
 800b740:	4618      	mov	r0, r3
 800b742:	f000 f8e3 	bl	800b90c <I2C_GetTiming>
 800b746:	4603      	mov	r3, r0
 800b748:	4619      	mov	r1, r3
 800b74a:	4807      	ldr	r0, [pc, #28]	; (800b768 <BSP_I2C4_Init+0x64>)
 800b74c:	f000 f838 	bl	800b7c0 <MX_I2C4_Init>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d002      	beq.n	800b75c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800b756:	f06f 0307 	mvn.w	r3, #7
 800b75a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800b75c:	687b      	ldr	r3, [r7, #4]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	2400b3d0 	.word	0x2400b3d0
 800b76c:	58001c00 	.word	0x58001c00
 800b770:	2400a388 	.word	0x2400a388
 800b774:	000186a0 	.word	0x000186a0

0800b778 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800b77e:	2300      	movs	r3, #0
 800b780:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800b782:	4b0d      	ldr	r3, [pc, #52]	; (800b7b8 <BSP_I2C4_DeInit+0x40>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3b01      	subs	r3, #1
 800b788:	4a0b      	ldr	r2, [pc, #44]	; (800b7b8 <BSP_I2C4_DeInit+0x40>)
 800b78a:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800b78c:	4b0a      	ldr	r3, [pc, #40]	; (800b7b8 <BSP_I2C4_DeInit+0x40>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10b      	bne.n	800b7ac <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800b794:	4809      	ldr	r0, [pc, #36]	; (800b7bc <BSP_I2C4_DeInit+0x44>)
 800b796:	f000 fb9b 	bl	800bed0 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b79a:	4808      	ldr	r0, [pc, #32]	; (800b7bc <BSP_I2C4_DeInit+0x44>)
 800b79c:	f002 fc4e 	bl	800e03c <HAL_I2C_DeInit>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800b7a6:	f06f 0307 	mvn.w	r3, #7
 800b7aa:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800b7ac:	687b      	ldr	r3, [r7, #4]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	2400a388 	.word	0x2400a388
 800b7bc:	2400b3d0 	.word	0x2400b3d0

0800b7c0 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	683a      	ldr	r2, [r7, #0]
 800b7d2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f002 fb8c 	bl	800df1c <HAL_I2C_Init>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d002      	beq.n	800b810 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	73fb      	strb	r3, [r7, #15]
 800b80e:	e014      	b.n	800b83a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800b810:	2300      	movs	r3, #0
 800b812:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800b814:	68b9      	ldr	r1, [r7, #8]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f003 f942 	bl	800eaa0 <HAL_I2CEx_ConfigAnalogFilter>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d002      	beq.n	800b828 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	73fb      	strb	r3, [r7, #15]
 800b826:	e008      	b.n	800b83a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800b828:	2100      	movs	r1, #0
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f003 f983 	bl	800eb36 <HAL_I2CEx_ConfigDigitalFilter>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b088      	sub	sp, #32
 800b848:	af02      	add	r7, sp, #8
 800b84a:	60ba      	str	r2, [r7, #8]
 800b84c:	461a      	mov	r2, r3
 800b84e:	4603      	mov	r3, r0
 800b850:	81fb      	strh	r3, [r7, #14]
 800b852:	460b      	mov	r3, r1
 800b854:	81bb      	strh	r3, [r7, #12]
 800b856:	4613      	mov	r3, r2
 800b858:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b85a:	89b9      	ldrh	r1, [r7, #12]
 800b85c:	89f8      	ldrh	r0, [r7, #14]
 800b85e:	88fb      	ldrh	r3, [r7, #6]
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	2201      	movs	r2, #1
 800b866:	f000 fb57 	bl	800bf18 <I2C4_WriteReg>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d102      	bne.n	800b876 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b870:	2300      	movs	r3, #0
 800b872:	617b      	str	r3, [r7, #20]
 800b874:	e00c      	b.n	800b890 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b876:	4809      	ldr	r0, [pc, #36]	; (800b89c <BSP_I2C4_WriteReg+0x58>)
 800b878:	f002 fe60 	bl	800e53c <HAL_I2C_GetError>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b04      	cmp	r3, #4
 800b880:	d103      	bne.n	800b88a <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b882:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	e002      	b.n	800b890 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b88a:	f06f 0303 	mvn.w	r3, #3
 800b88e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800b890:	697b      	ldr	r3, [r7, #20]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3718      	adds	r7, #24
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	2400b3d0 	.word	0x2400b3d0

0800b8a0 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b088      	sub	sp, #32
 800b8a4:	af02      	add	r7, sp, #8
 800b8a6:	60ba      	str	r2, [r7, #8]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	81fb      	strh	r3, [r7, #14]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	81bb      	strh	r3, [r7, #12]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b8b6:	89b9      	ldrh	r1, [r7, #12]
 800b8b8:	89f8      	ldrh	r0, [r7, #14]
 800b8ba:	88fb      	ldrh	r3, [r7, #6]
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f000 fb4f 	bl	800bf64 <I2C4_ReadReg>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d102      	bne.n	800b8d2 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	617b      	str	r3, [r7, #20]
 800b8d0:	e00c      	b.n	800b8ec <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b8d2:	4809      	ldr	r0, [pc, #36]	; (800b8f8 <BSP_I2C4_ReadReg+0x58>)
 800b8d4:	f002 fe32 	bl	800e53c <HAL_I2C_GetError>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b04      	cmp	r3, #4
 800b8dc:	d103      	bne.n	800b8e6 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b8de:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b8e2:	617b      	str	r3, [r7, #20]
 800b8e4:	e002      	b.n	800b8ec <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b8e6:	f06f 0303 	mvn.w	r3, #3
 800b8ea:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800b8ec:	697b      	ldr	r3, [r7, #20]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	2400b3d0 	.word	0x2400b3d0

0800b8fc <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800b900:	f001 fbec 	bl	800d0dc <HAL_GetTick>
 800b904:	4603      	mov	r3, r0
}
 800b906:	4618      	mov	r0, r3
 800b908:	bd80      	pop	{r7, pc}
	...

0800b90c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d06b      	beq.n	800b9f8 <I2C_GetTiming+0xec>
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d068      	beq.n	800b9f8 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b926:	2300      	movs	r3, #0
 800b928:	613b      	str	r3, [r7, #16]
 800b92a:	e060      	b.n	800b9ee <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b92c:	4a35      	ldr	r2, [pc, #212]	; (800ba04 <I2C_GetTiming+0xf8>)
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	212c      	movs	r1, #44	; 0x2c
 800b932:	fb01 f303 	mul.w	r3, r1, r3
 800b936:	4413      	add	r3, r2
 800b938:	3304      	adds	r3, #4
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	683a      	ldr	r2, [r7, #0]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d352      	bcc.n	800b9e8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800b942:	4a30      	ldr	r2, [pc, #192]	; (800ba04 <I2C_GetTiming+0xf8>)
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	212c      	movs	r1, #44	; 0x2c
 800b948:	fb01 f303 	mul.w	r3, r1, r3
 800b94c:	4413      	add	r3, r2
 800b94e:	3308      	adds	r3, #8
 800b950:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	429a      	cmp	r2, r3
 800b956:	d847      	bhi.n	800b9e8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800b958:	6939      	ldr	r1, [r7, #16]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f856 	bl	800ba0c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800b960:	6939      	ldr	r1, [r7, #16]
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f940 	bl	800bbe8 <I2C_Compute_SCLL_SCLH>
 800b968:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b7f      	cmp	r3, #127	; 0x7f
 800b96e:	d842      	bhi.n	800b9f6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b970:	4925      	ldr	r1, [pc, #148]	; (800ba08 <I2C_GetTiming+0xfc>)
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	4613      	mov	r3, r2
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	440b      	add	r3, r1
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b982:	4821      	ldr	r0, [pc, #132]	; (800ba08 <I2C_GetTiming+0xfc>)
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	4613      	mov	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	4413      	add	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4403      	add	r3, r0
 800b990:	3304      	adds	r3, #4
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	051b      	lsls	r3, r3, #20
 800b996:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b99a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b99c:	481a      	ldr	r0, [pc, #104]	; (800ba08 <I2C_GetTiming+0xfc>)
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	4403      	add	r3, r0
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	041b      	lsls	r3, r3, #16
 800b9b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b9b4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800b9b6:	4814      	ldr	r0, [pc, #80]	; (800ba08 <I2C_GetTiming+0xfc>)
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4403      	add	r3, r0
 800b9c4:	330c      	adds	r3, #12
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	021b      	lsls	r3, r3, #8
 800b9ca:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b9cc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800b9ce:	480e      	ldr	r0, [pc, #56]	; (800ba08 <I2C_GetTiming+0xfc>)
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4403      	add	r3, r0
 800b9dc:	3310      	adds	r3, #16
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b9e2:	430b      	orrs	r3, r1
 800b9e4:	617b      	str	r3, [r7, #20]
        }
        break;
 800b9e6:	e006      	b.n	800b9f6 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	613b      	str	r3, [r7, #16]
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d99b      	bls.n	800b92c <I2C_GetTiming+0x20>
 800b9f4:	e000      	b.n	800b9f8 <I2C_GetTiming+0xec>
        break;
 800b9f6:	bf00      	nop
      }
    }
  }

  return ret;
 800b9f8:	697b      	ldr	r3, [r7, #20]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3718      	adds	r7, #24
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	080281a4 	.word	0x080281a4
 800ba08:	2400a38c 	.word	0x2400a38c

0800ba0c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b08f      	sub	sp, #60	; 0x3c
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800ba16:	2310      	movs	r3, #16
 800ba18:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	085a      	lsrs	r2, r3, #1
 800ba1e:	4b6e      	ldr	r3, [pc, #440]	; (800bbd8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800ba20:	4413      	add	r3, r2
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba28:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800ba2a:	2332      	movs	r3, #50	; 0x32
 800ba2c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800ba2e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800ba32:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800ba34:	4a69      	ldr	r2, [pc, #420]	; (800bbdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	212c      	movs	r1, #44	; 0x2c
 800ba3a:	fb01 f303 	mul.w	r3, r1, r3
 800ba3e:	4413      	add	r3, r2
 800ba40:	3324      	adds	r3, #36	; 0x24
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4618      	mov	r0, r3
 800ba46:	4a65      	ldr	r2, [pc, #404]	; (800bbdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	212c      	movs	r1, #44	; 0x2c
 800ba4c:	fb01 f303 	mul.w	r3, r1, r3
 800ba50:	4413      	add	r3, r2
 800ba52:	330c      	adds	r3, #12
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800ba58:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800ba5a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800ba5c:	495f      	ldr	r1, [pc, #380]	; (800bbdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	202c      	movs	r0, #44	; 0x2c
 800ba62:	fb00 f303 	mul.w	r3, r0, r3
 800ba66:	440b      	add	r3, r1
 800ba68:	3328      	adds	r3, #40	; 0x28
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	3303      	adds	r3, #3
 800ba6e:	69f9      	ldr	r1, [r7, #28]
 800ba70:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800ba78:	4a58      	ldr	r2, [pc, #352]	; (800bbdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	212c      	movs	r1, #44	; 0x2c
 800ba7e:	fb01 f303 	mul.w	r3, r1, r3
 800ba82:	4413      	add	r3, r2
 800ba84:	3310      	adds	r3, #16
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	4a54      	ldr	r2, [pc, #336]	; (800bbdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	212c      	movs	r1, #44	; 0x2c
 800ba90:	fb01 f303 	mul.w	r3, r1, r3
 800ba94:	4413      	add	r3, r2
 800ba96:	3320      	adds	r3, #32
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800ba9c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800ba9e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800baa0:	494e      	ldr	r1, [pc, #312]	; (800bbdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	202c      	movs	r0, #44	; 0x2c
 800baa6:	fb00 f303 	mul.w	r3, r0, r3
 800baaa:	440b      	add	r3, r1
 800baac:	3328      	adds	r3, #40	; 0x28
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	3304      	adds	r3, #4
 800bab2:	69f9      	ldr	r1, [r7, #28]
 800bab4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800babc:	4a47      	ldr	r2, [pc, #284]	; (800bbdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	212c      	movs	r1, #44	; 0x2c
 800bac2:	fb01 f303 	mul.w	r3, r1, r3
 800bac6:	4413      	add	r3, r2
 800bac8:	3320      	adds	r3, #32
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4618      	mov	r0, r3
 800bace:	4a43      	ldr	r2, [pc, #268]	; (800bbdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	212c      	movs	r1, #44	; 0x2c
 800bad4:	fb01 f303 	mul.w	r3, r1, r3
 800bad8:	4413      	add	r3, r2
 800bada:	3314      	adds	r3, #20
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4403      	add	r3, r0
 800bae0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	dc01      	bgt.n	800baec <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800bae8:	2300      	movs	r3, #0
 800baea:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baee:	2b00      	cmp	r3, #0
 800baf0:	dc01      	bgt.n	800baf6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800baf2:	2300      	movs	r3, #0
 800baf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800baf6:	2300      	movs	r3, #0
 800baf8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bafa:	e062      	b.n	800bbc2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800bafc:	2300      	movs	r3, #0
 800bafe:	627b      	str	r3, [r7, #36]	; 0x24
 800bb00:	e059      	b.n	800bbb6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800bb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb04:	3301      	adds	r3, #1
 800bb06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb08:	3201      	adds	r2, #1
 800bb0a:	fb02 f203 	mul.w	r2, r2, r3
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	fb02 f303 	mul.w	r3, r2, r3
 800bb14:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d348      	bcc.n	800bbb0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800bb1e:	2300      	movs	r3, #0
 800bb20:	623b      	str	r3, [r7, #32]
 800bb22:	e042      	b.n	800bbaa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	3301      	adds	r3, #1
 800bb28:	6a3a      	ldr	r2, [r7, #32]
 800bb2a:	fb02 f203 	mul.w	r2, r2, r3
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	fb02 f303 	mul.w	r3, r2, r3
 800bb34:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800bb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d332      	bcc.n	800bba4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d82e      	bhi.n	800bba4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800bb46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d02a      	beq.n	800bba4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb4e:	4b24      	ldr	r3, [pc, #144]	; (800bbe0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	4924      	ldr	r1, [pc, #144]	; (800bbe4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800bb54:	4613      	mov	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	440b      	add	r3, r1
 800bb5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb60:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bb62:	4b1f      	ldr	r3, [pc, #124]	; (800bbe0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	491f      	ldr	r1, [pc, #124]	; (800bbe4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800bb68:	4613      	mov	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4413      	add	r3, r2
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	440b      	add	r3, r1
 800bb72:	3304      	adds	r3, #4
 800bb74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb76:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb78:	4b19      	ldr	r3, [pc, #100]	; (800bbe0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	4919      	ldr	r1, [pc, #100]	; (800bbe4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800bb7e:	4613      	mov	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4413      	add	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	440b      	add	r3, r1
 800bb88:	3308      	adds	r3, #8
 800bb8a:	6a3a      	ldr	r2, [r7, #32]
 800bb8c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800bb92:	4b13      	ldr	r3, [pc, #76]	; (800bbe0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	3301      	adds	r3, #1
 800bb98:	4a11      	ldr	r2, [pc, #68]	; (800bbe0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800bb9a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb9c:	4b10      	ldr	r3, [pc, #64]	; (800bbe0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b7f      	cmp	r3, #127	; 0x7f
 800bba2:	d812      	bhi.n	800bbca <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	3301      	adds	r3, #1
 800bba8:	623b      	str	r3, [r7, #32]
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	2b0f      	cmp	r3, #15
 800bbae:	d9b9      	bls.n	800bb24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	627b      	str	r3, [r7, #36]	; 0x24
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb8:	2b0f      	cmp	r3, #15
 800bbba:	d9a2      	bls.n	800bb02 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc4:	2b0f      	cmp	r3, #15
 800bbc6:	d999      	bls.n	800bafc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800bbc8:	e000      	b.n	800bbcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800bbca:	bf00      	nop
          }
        }
      }
    }
  }
}
 800bbcc:	373c      	adds	r7, #60	; 0x3c
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop
 800bbd8:	3b9aca00 	.word	0x3b9aca00
 800bbdc:	080281a4 	.word	0x080281a4
 800bbe0:	2400ad8c 	.word	0x2400ad8c
 800bbe4:	2400a38c 	.word	0x2400a38c

0800bbe8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b093      	sub	sp, #76	; 0x4c
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800bbf2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	085a      	lsrs	r2, r3, #1
 800bbfc:	4b7a      	ldr	r3, [pc, #488]	; (800bde8 <I2C_Compute_SCLL_SCLH+0x200>)
 800bbfe:	4413      	add	r3, r2
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc06:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800bc08:	4a78      	ldr	r2, [pc, #480]	; (800bdec <I2C_Compute_SCLL_SCLH+0x204>)
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	212c      	movs	r1, #44	; 0x2c
 800bc0e:	fb01 f303 	mul.w	r3, r1, r3
 800bc12:	4413      	add	r3, r2
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	085a      	lsrs	r2, r3, #1
 800bc18:	4b73      	ldr	r3, [pc, #460]	; (800bde8 <I2C_Compute_SCLL_SCLH+0x200>)
 800bc1a:	4413      	add	r3, r2
 800bc1c:	4973      	ldr	r1, [pc, #460]	; (800bdec <I2C_Compute_SCLL_SCLH+0x204>)
 800bc1e:	683a      	ldr	r2, [r7, #0]
 800bc20:	202c      	movs	r0, #44	; 0x2c
 800bc22:	fb00 f202 	mul.w	r2, r0, r2
 800bc26:	440a      	add	r2, r1
 800bc28:	6812      	ldr	r2, [r2, #0]
 800bc2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc2e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800bc30:	2332      	movs	r3, #50	; 0x32
 800bc32:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800bc34:	4a6d      	ldr	r2, [pc, #436]	; (800bdec <I2C_Compute_SCLL_SCLH+0x204>)
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	212c      	movs	r1, #44	; 0x2c
 800bc3a:	fb01 f303 	mul.w	r3, r1, r3
 800bc3e:	4413      	add	r3, r2
 800bc40:	3328      	adds	r3, #40	; 0x28
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc46:	fb02 f303 	mul.w	r3, r2, r3
 800bc4a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800bc4c:	4a67      	ldr	r2, [pc, #412]	; (800bdec <I2C_Compute_SCLL_SCLH+0x204>)
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	212c      	movs	r1, #44	; 0x2c
 800bc52:	fb01 f303 	mul.w	r3, r1, r3
 800bc56:	4413      	add	r3, r2
 800bc58:	3304      	adds	r3, #4
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a62      	ldr	r2, [pc, #392]	; (800bde8 <I2C_Compute_SCLL_SCLH+0x200>)
 800bc5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc62:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800bc64:	4a61      	ldr	r2, [pc, #388]	; (800bdec <I2C_Compute_SCLL_SCLH+0x204>)
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	212c      	movs	r1, #44	; 0x2c
 800bc6a:	fb01 f303 	mul.w	r3, r1, r3
 800bc6e:	4413      	add	r3, r2
 800bc70:	3308      	adds	r3, #8
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a5c      	ldr	r2, [pc, #368]	; (800bde8 <I2C_Compute_SCLL_SCLH+0x200>)
 800bc76:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc7a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800bc80:	2300      	movs	r3, #0
 800bc82:	637b      	str	r3, [r7, #52]	; 0x34
 800bc84:	e0a3      	b.n	800bdce <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800bc86:	495a      	ldr	r1, [pc, #360]	; (800bdf0 <I2C_Compute_SCLL_SCLH+0x208>)
 800bc88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	440b      	add	r3, r1
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	1c5a      	adds	r2, r3, #1
 800bc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9a:	fb02 f303 	mul.w	r3, r2, r3
 800bc9e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800bca0:	2300      	movs	r3, #0
 800bca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bca4:	e08c      	b.n	800bdc0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800bca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bca8:	6a3b      	ldr	r3, [r7, #32]
 800bcaa:	441a      	add	r2, r3
 800bcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcae:	3301      	adds	r3, #1
 800bcb0:	6979      	ldr	r1, [r7, #20]
 800bcb2:	fb01 f103 	mul.w	r1, r1, r3
 800bcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	440b      	add	r3, r1
 800bcbc:	4413      	add	r3, r2
 800bcbe:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800bcc0:	4a4a      	ldr	r2, [pc, #296]	; (800bdec <I2C_Compute_SCLL_SCLH+0x204>)
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	212c      	movs	r1, #44	; 0x2c
 800bcc6:	fb01 f303 	mul.w	r3, r1, r3
 800bcca:	4413      	add	r3, r2
 800bccc:	3318      	adds	r3, #24
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	693a      	ldr	r2, [r7, #16]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d971      	bls.n	800bdba <I2C_Compute_SCLL_SCLH+0x1d2>
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcda:	1ad2      	subs	r2, r2, r3
 800bcdc:	6a3b      	ldr	r3, [r7, #32]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	089b      	lsrs	r3, r3, #2
 800bce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d268      	bcs.n	800bdba <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800bce8:	2300      	movs	r3, #0
 800bcea:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcec:	e062      	b.n	800bdb4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800bcee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcf0:	6a3b      	ldr	r3, [r7, #32]
 800bcf2:	441a      	add	r2, r3
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	6979      	ldr	r1, [r7, #20]
 800bcfa:	fb01 f103 	mul.w	r1, r1, r3
 800bcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	440b      	add	r3, r1
 800bd04:	4413      	add	r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	441a      	add	r2, r3
 800bd0e:	4937      	ldr	r1, [pc, #220]	; (800bdec <I2C_Compute_SCLL_SCLH+0x204>)
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	202c      	movs	r0, #44	; 0x2c
 800bd14:	fb00 f303 	mul.w	r3, r0, r3
 800bd18:	440b      	add	r3, r1
 800bd1a:	3320      	adds	r3, #32
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	441a      	add	r2, r3
 800bd20:	4932      	ldr	r1, [pc, #200]	; (800bdec <I2C_Compute_SCLL_SCLH+0x204>)
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	202c      	movs	r0, #44	; 0x2c
 800bd26:	fb00 f303 	mul.w	r3, r0, r3
 800bd2a:	440b      	add	r3, r1
 800bd2c:	3324      	adds	r3, #36	; 0x24
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4413      	add	r3, r2
 800bd32:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d338      	bcc.n	800bdae <I2C_Compute_SCLL_SCLH+0x1c6>
 800bd3c:	68ba      	ldr	r2, [r7, #8]
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d834      	bhi.n	800bdae <I2C_Compute_SCLL_SCLH+0x1c6>
 800bd44:	4a29      	ldr	r2, [pc, #164]	; (800bdec <I2C_Compute_SCLL_SCLH+0x204>)
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	212c      	movs	r1, #44	; 0x2c
 800bd4a:	fb01 f303 	mul.w	r3, r1, r3
 800bd4e:	4413      	add	r3, r2
 800bd50:	331c      	adds	r3, #28
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d329      	bcc.n	800bdae <I2C_Compute_SCLL_SCLH+0x1c6>
 800bd5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d225      	bcs.n	800bdae <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	da02      	bge.n	800bd76 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	425b      	negs	r3, r3
 800bd74:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800bd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d917      	bls.n	800bdae <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800bd82:	491b      	ldr	r1, [pc, #108]	; (800bdf0 <I2C_Compute_SCLL_SCLH+0x208>)
 800bd84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd86:	4613      	mov	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	440b      	add	r3, r1
 800bd90:	3310      	adds	r3, #16
 800bd92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd94:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800bd96:	4916      	ldr	r1, [pc, #88]	; (800bdf0 <I2C_Compute_SCLL_SCLH+0x208>)
 800bd98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	4413      	add	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	440b      	add	r3, r1
 800bda4:	330c      	adds	r3, #12
 800bda6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bda8:	601a      	str	r2, [r3, #0]
              ret = count;
 800bdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdac:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb6:	2bff      	cmp	r3, #255	; 0xff
 800bdb8:	d999      	bls.n	800bcee <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800bdba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc2:	2bff      	cmp	r3, #255	; 0xff
 800bdc4:	f67f af6f 	bls.w	800bca6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800bdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdca:	3301      	adds	r3, #1
 800bdcc:	637b      	str	r3, [r7, #52]	; 0x34
 800bdce:	4b09      	ldr	r3, [pc, #36]	; (800bdf4 <I2C_Compute_SCLL_SCLH+0x20c>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	f4ff af56 	bcc.w	800bc86 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800bdda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	374c      	adds	r7, #76	; 0x4c
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr
 800bde8:	3b9aca00 	.word	0x3b9aca00
 800bdec:	080281a4 	.word	0x080281a4
 800bdf0:	2400a38c 	.word	0x2400a38c
 800bdf4:	2400ad8c 	.word	0x2400ad8c

0800bdf8 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08a      	sub	sp, #40	; 0x28
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800be00:	4b31      	ldr	r3, [pc, #196]	; (800bec8 <I2C4_MspInit+0xd0>)
 800be02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be06:	4a30      	ldr	r2, [pc, #192]	; (800bec8 <I2C4_MspInit+0xd0>)
 800be08:	f043 0308 	orr.w	r3, r3, #8
 800be0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be10:	4b2d      	ldr	r3, [pc, #180]	; (800bec8 <I2C4_MspInit+0xd0>)
 800be12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be16:	f003 0308 	and.w	r3, r3, #8
 800be1a:	613b      	str	r3, [r7, #16]
 800be1c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800be1e:	4b2a      	ldr	r3, [pc, #168]	; (800bec8 <I2C4_MspInit+0xd0>)
 800be20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be24:	4a28      	ldr	r2, [pc, #160]	; (800bec8 <I2C4_MspInit+0xd0>)
 800be26:	f043 0308 	orr.w	r3, r3, #8
 800be2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be2e:	4b26      	ldr	r3, [pc, #152]	; (800bec8 <I2C4_MspInit+0xd0>)
 800be30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be34:	f003 0308 	and.w	r3, r3, #8
 800be38:	60fb      	str	r3, [r7, #12]
 800be3a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800be3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be40:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800be42:	2312      	movs	r3, #18
 800be44:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800be46:	2300      	movs	r3, #0
 800be48:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800be4a:	2302      	movs	r3, #2
 800be4c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800be4e:	2304      	movs	r3, #4
 800be50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800be52:	f107 0314 	add.w	r3, r7, #20
 800be56:	4619      	mov	r1, r3
 800be58:	481c      	ldr	r0, [pc, #112]	; (800becc <I2C4_MspInit+0xd4>)
 800be5a:	f001 fd43 	bl	800d8e4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800be5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be62:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800be64:	2312      	movs	r3, #18
 800be66:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800be68:	2300      	movs	r3, #0
 800be6a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800be6c:	2302      	movs	r3, #2
 800be6e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800be70:	2304      	movs	r3, #4
 800be72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800be74:	f107 0314 	add.w	r3, r7, #20
 800be78:	4619      	mov	r1, r3
 800be7a:	4814      	ldr	r0, [pc, #80]	; (800becc <I2C4_MspInit+0xd4>)
 800be7c:	f001 fd32 	bl	800d8e4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800be80:	4b11      	ldr	r3, [pc, #68]	; (800bec8 <I2C4_MspInit+0xd0>)
 800be82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be86:	4a10      	ldr	r2, [pc, #64]	; (800bec8 <I2C4_MspInit+0xd0>)
 800be88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800be90:	4b0d      	ldr	r3, [pc, #52]	; (800bec8 <I2C4_MspInit+0xd0>)
 800be92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be9a:	60bb      	str	r3, [r7, #8]
 800be9c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800be9e:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <I2C4_MspInit+0xd0>)
 800bea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bea4:	4a08      	ldr	r2, [pc, #32]	; (800bec8 <I2C4_MspInit+0xd0>)
 800bea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beaa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800beae:	4b06      	ldr	r3, [pc, #24]	; (800bec8 <I2C4_MspInit+0xd0>)
 800beb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800beb4:	4a04      	ldr	r2, [pc, #16]	; (800bec8 <I2C4_MspInit+0xd0>)
 800beb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800bebe:	bf00      	nop
 800bec0:	3728      	adds	r7, #40	; 0x28
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	58024400 	.word	0x58024400
 800becc:	58020c00 	.word	0x58020c00

0800bed0 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800bed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bedc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	4619      	mov	r1, r3
 800bee2:	480b      	ldr	r0, [pc, #44]	; (800bf10 <I2C4_MspDeInit+0x40>)
 800bee4:	f001 feae 	bl	800dc44 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800bee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800beec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	4619      	mov	r1, r3
 800bef2:	4807      	ldr	r0, [pc, #28]	; (800bf10 <I2C4_MspDeInit+0x40>)
 800bef4:	f001 fea6 	bl	800dc44 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800bef8:	4b06      	ldr	r3, [pc, #24]	; (800bf14 <I2C4_MspDeInit+0x44>)
 800befa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800befe:	4a05      	ldr	r2, [pc, #20]	; (800bf14 <I2C4_MspDeInit+0x44>)
 800bf00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800bf08:	bf00      	nop
 800bf0a:	3720      	adds	r7, #32
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	58020c00 	.word	0x58020c00
 800bf14:	58024400 	.word	0x58024400

0800bf18 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b088      	sub	sp, #32
 800bf1c:	af04      	add	r7, sp, #16
 800bf1e:	607b      	str	r3, [r7, #4]
 800bf20:	4603      	mov	r3, r0
 800bf22:	81fb      	strh	r3, [r7, #14]
 800bf24:	460b      	mov	r3, r1
 800bf26:	81bb      	strh	r3, [r7, #12]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bf2c:	8978      	ldrh	r0, [r7, #10]
 800bf2e:	89ba      	ldrh	r2, [r7, #12]
 800bf30:	89f9      	ldrh	r1, [r7, #14]
 800bf32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf36:	9302      	str	r3, [sp, #8]
 800bf38:	8b3b      	ldrh	r3, [r7, #24]
 800bf3a:	9301      	str	r3, [sp, #4]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	4603      	mov	r3, r0
 800bf42:	4807      	ldr	r0, [pc, #28]	; (800bf60 <I2C4_WriteReg+0x48>)
 800bf44:	f002 f8be 	bl	800e0c4 <HAL_I2C_Mem_Write>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e001      	b.n	800bf56 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800bf52:	f06f 0307 	mvn.w	r3, #7
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	2400b3d0 	.word	0x2400b3d0

0800bf64 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b088      	sub	sp, #32
 800bf68:	af04      	add	r7, sp, #16
 800bf6a:	607b      	str	r3, [r7, #4]
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	81fb      	strh	r3, [r7, #14]
 800bf70:	460b      	mov	r3, r1
 800bf72:	81bb      	strh	r3, [r7, #12]
 800bf74:	4613      	mov	r3, r2
 800bf76:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bf78:	8978      	ldrh	r0, [r7, #10]
 800bf7a:	89ba      	ldrh	r2, [r7, #12]
 800bf7c:	89f9      	ldrh	r1, [r7, #14]
 800bf7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf82:	9302      	str	r3, [sp, #8]
 800bf84:	8b3b      	ldrh	r3, [r7, #24]
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	4807      	ldr	r0, [pc, #28]	; (800bfac <I2C4_ReadReg+0x48>)
 800bf90:	f002 f9ac 	bl	800e2ec <HAL_I2C_Mem_Read>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d101      	bne.n	800bf9e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	e001      	b.n	800bfa2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800bf9e:	f06f 0307 	mvn.w	r3, #7
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	2400b3d0 	.word	0x2400b3d0

0800bfb0 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b090      	sub	sp, #64	; 0x40
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d003      	beq.n	800bfcc <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bfc4:	f06f 0301 	mvn.w	r3, #1
 800bfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfca:	e090      	b.n	800c0ee <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800bfcc:	494a      	ldr	r1, [pc, #296]	; (800c0f8 <BSP_QSPI_Init+0x148>)
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	005b      	lsls	r3, r3, #1
 800bfd4:	4413      	add	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	440b      	add	r3, r1
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f040 8086 	bne.w	800c0ee <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800bfe2:	4846      	ldr	r0, [pc, #280]	; (800c0fc <BSP_QSPI_Init+0x14c>)
 800bfe4:	f000 f99c 	bl	800c320 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800bfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d17f      	bne.n	800c0ee <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800bfee:	f107 031c 	add.w	r3, r7, #28
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fe ffe9 	bl	800afca <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	785b      	ldrb	r3, [r3, #1]
 800bffc:	461a      	mov	r2, r3
 800bffe:	4b40      	ldr	r3, [pc, #256]	; (800c100 <BSP_QSPI_Init+0x150>)
 800c000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c004:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800c006:	2340      	movs	r3, #64	; 0x40
 800c008:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c010:	fa93 f3a3 	rbit	r3, r3
 800c014:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800c020:	2320      	movs	r3, #32
 800c022:	e003      	b.n	800c02c <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800c024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c026:	fab3 f383 	clz	r3, r3
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	3b01      	subs	r3, #1
 800c02e:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	785b      	ldrb	r3, [r3, #1]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <BSP_QSPI_Init+0x8c>
 800c038:	2310      	movs	r3, #16
 800c03a:	e000      	b.n	800c03e <BSP_QSPI_Init+0x8e>
 800c03c:	2300      	movs	r3, #0
 800c03e:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800c040:	f107 030c 	add.w	r3, r7, #12
 800c044:	4619      	mov	r1, r3
 800c046:	482d      	ldr	r0, [pc, #180]	; (800c0fc <BSP_QSPI_Init+0x14c>)
 800c048:	f000 f85c 	bl	800c104 <MX_QSPI_Init>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800c052:	f06f 0303 	mvn.w	r3, #3
 800c056:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c058:	e049      	b.n	800c0ee <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 faa8 	bl	800c5b0 <QSPI_ResetMemory>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c066:	f06f 0304 	mvn.w	r3, #4
 800c06a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c06c:	e03f      	b.n	800c0ee <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c06e:	4922      	ldr	r1, [pc, #136]	; (800c0f8 <BSP_QSPI_Init+0x148>)
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	4613      	mov	r3, r2
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	4413      	add	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	440b      	add	r3, r1
 800c07c:	3301      	adds	r3, #1
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	4619      	mov	r1, r3
 800c082:	481e      	ldr	r0, [pc, #120]	; (800c0fc <BSP_QSPI_Init+0x14c>)
 800c084:	f7ff f810 	bl	800b0a8 <MT25TL01G_AutoPollingMemReady>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c08e:	f06f 0304 	mvn.w	r3, #4
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c094:	e02b      	b.n	800c0ee <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c096:	4918      	ldr	r1, [pc, #96]	; (800c0f8 <BSP_QSPI_Init+0x148>)
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	4613      	mov	r3, r2
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	4413      	add	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	440b      	add	r3, r1
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4814      	ldr	r0, [pc, #80]	; (800c0fc <BSP_QSPI_Init+0x14c>)
 800c0ac:	f7fe ffb4 	bl	800b018 <MT25TL01G_Enter4BytesAddressMode>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0b6:	f06f 0304 	mvn.w	r3, #4
 800c0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0bc:	e017      	b.n	800c0ee <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fae2 	bl	800c688 <QSPI_DummyCyclesCfg>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d003      	beq.n	800c0d2 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0ca:	f06f 0304 	mvn.w	r3, #4
 800c0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0d0:	e00d      	b.n	800c0ee <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	7819      	ldrb	r1, [r3, #0]
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	785b      	ldrb	r3, [r3, #1]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 f89d 	bl	800c21c <BSP_QSPI_ConfigFlash>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0e8:	f06f 0304 	mvn.w	r3, #4
 800c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3740      	adds	r7, #64	; 0x40
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	2400b41c 	.word	0x2400b41c
 800c0fc:	2400b2f8 	.word	0x2400b2f8
 800c100:	08028228 	.word	0x08028228

0800c104 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a13      	ldr	r2, [pc, #76]	; (800c160 <MX_QSPI_Init+0x5c>)
 800c112:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	689a      	ldr	r2, [r3, #8]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c138:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	68da      	ldr	r2, [r3, #12]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f003 fa94 	bl	800f67c <HAL_QSPI_Init>
 800c154:	4603      	mov	r3, r0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3708      	adds	r7, #8
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	52005000 	.word	0x52005000

0800c164 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c16c:	2300      	movs	r3, #0
 800c16e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d003      	beq.n	800c17e <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c176:	f06f 0301 	mvn.w	r3, #1
 800c17a:	60fb      	str	r3, [r7, #12]
 800c17c:	e045      	b.n	800c20a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800c17e:	4925      	ldr	r1, [pc, #148]	; (800c214 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	4613      	mov	r3, r2
 800c184:	005b      	lsls	r3, r3, #1
 800c186:	4413      	add	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	440b      	add	r3, r1
 800c18c:	3302      	adds	r3, #2
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d11d      	bne.n	800c1d0 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c194:	491f      	ldr	r1, [pc, #124]	; (800c214 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	4613      	mov	r3, r2
 800c19a:	005b      	lsls	r3, r3, #1
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	440b      	add	r3, r1
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	481b      	ldr	r0, [pc, #108]	; (800c218 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800c1aa:	f7ff f8d3 	bl	800b354 <MT25TL01G_EnableMemoryMappedModeSTR>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d003      	beq.n	800c1bc <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1b4:	f06f 0304 	mvn.w	r3, #4
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	e026      	b.n	800c20a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800c1bc:	4915      	ldr	r1, [pc, #84]	; (800c214 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	005b      	lsls	r3, r3, #1
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	440b      	add	r3, r1
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	701a      	strb	r2, [r3, #0]
 800c1ce:	e01c      	b.n	800c20a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c1d0:	4910      	ldr	r1, [pc, #64]	; (800c214 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	005b      	lsls	r3, r3, #1
 800c1d8:	4413      	add	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	440b      	add	r3, r1
 800c1de:	3301      	adds	r3, #1
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	480c      	ldr	r0, [pc, #48]	; (800c218 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800c1e6:	f7ff f84b 	bl	800b280 <MT25TL01G_EnableMemoryMappedModeDTR>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d003      	beq.n	800c1f8 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1f0:	f06f 0304 	mvn.w	r3, #4
 800c1f4:	60fb      	str	r3, [r7, #12]
 800c1f6:	e008      	b.n	800c20a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800c1f8:	4906      	ldr	r1, [pc, #24]	; (800c214 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	005b      	lsls	r3, r3, #1
 800c200:	4413      	add	r3, r2
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	440b      	add	r3, r1
 800c206:	2202      	movs	r2, #2
 800c208:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c20a:	68fb      	ldr	r3, [r7, #12]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	2400b41c 	.word	0x2400b41c
 800c218:	2400b2f8 	.word	0x2400b2f8

0800c21c <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	460b      	mov	r3, r1
 800c226:	70fb      	strb	r3, [r7, #3]
 800c228:	4613      	mov	r3, r2
 800c22a:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800c22c:	2300      	movs	r3, #0
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d003      	beq.n	800c23e <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c236:	f06f 0301 	mvn.w	r3, #1
 800c23a:	60fb      	str	r3, [r7, #12]
 800c23c:	e067      	b.n	800c30e <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800c23e:	4936      	ldr	r1, [pc, #216]	; (800c318 <BSP_QSPI_ConfigFlash+0xfc>)
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	4613      	mov	r3, r2
 800c244:	005b      	lsls	r3, r3, #1
 800c246:	4413      	add	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	440b      	add	r3, r1
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d103      	bne.n	800c25a <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800c252:	f06f 0319 	mvn.w	r3, #25
 800c256:	60fb      	str	r3, [r7, #12]
 800c258:	e059      	b.n	800c30e <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800c25a:	78bb      	ldrb	r3, [r7, #2]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <BSP_QSPI_ConfigFlash+0x48>
 800c260:	2310      	movs	r3, #16
 800c262:	e000      	b.n	800c266 <BSP_QSPI_ConfigFlash+0x4a>
 800c264:	2300      	movs	r3, #0
 800c266:	4a2d      	ldr	r2, [pc, #180]	; (800c31c <BSP_QSPI_ConfigFlash+0x100>)
 800c268:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800c26a:	482c      	ldr	r0, [pc, #176]	; (800c31c <BSP_QSPI_ConfigFlash+0x100>)
 800c26c:	f003 fa06 	bl	800f67c <HAL_QSPI_Init>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d003      	beq.n	800c27e <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800c276:	f06f 0303 	mvn.w	r3, #3
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	e047      	b.n	800c30e <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800c27e:	4926      	ldr	r1, [pc, #152]	; (800c318 <BSP_QSPI_ConfigFlash+0xfc>)
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	4613      	mov	r3, r2
 800c284:	005b      	lsls	r3, r3, #1
 800c286:	4413      	add	r3, r2
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	440b      	add	r3, r1
 800c28c:	3301      	adds	r3, #1
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	2b03      	cmp	r3, #3
 800c292:	d10c      	bne.n	800c2ae <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800c294:	78fb      	ldrb	r3, [r7, #3]
 800c296:	2b03      	cmp	r3, #3
 800c298:	d016      	beq.n	800c2c8 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800c29a:	4820      	ldr	r0, [pc, #128]	; (800c31c <BSP_QSPI_ConfigFlash+0x100>)
 800c29c:	f7fe ffc5 	bl	800b22a <MT25TL01G_ExitQPIMode>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d010      	beq.n	800c2c8 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800c2a6:	f06f 0304 	mvn.w	r3, #4
 800c2aa:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800c2ac:	e00c      	b.n	800c2c8 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800c2ae:	78fb      	ldrb	r3, [r7, #3]
 800c2b0:	2b03      	cmp	r3, #3
 800c2b2:	d10b      	bne.n	800c2cc <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800c2b4:	4819      	ldr	r0, [pc, #100]	; (800c31c <BSP_QSPI_ConfigFlash+0x100>)
 800c2b6:	f7fe ff8e 	bl	800b1d6 <MT25TL01G_EnterQPIMode>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d005      	beq.n	800c2cc <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800c2c0:	f06f 0304 	mvn.w	r3, #4
 800c2c4:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800c2c6:	e001      	b.n	800c2cc <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800c2c8:	bf00      	nop
 800c2ca:	e000      	b.n	800c2ce <BSP_QSPI_ConfigFlash+0xb2>
          break;
 800c2cc:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d11c      	bne.n	800c30e <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800c2d4:	4910      	ldr	r1, [pc, #64]	; (800c318 <BSP_QSPI_ConfigFlash+0xfc>)
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	4413      	add	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	440b      	add	r3, r1
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800c2e6:	490c      	ldr	r1, [pc, #48]	; (800c318 <BSP_QSPI_ConfigFlash+0xfc>)
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	4413      	add	r3, r2
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	440b      	add	r3, r1
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	78fa      	ldrb	r2, [r7, #3]
 800c2f8:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800c2fa:	4907      	ldr	r1, [pc, #28]	; (800c318 <BSP_QSPI_ConfigFlash+0xfc>)
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	4613      	mov	r3, r2
 800c300:	005b      	lsls	r3, r3, #1
 800c302:	4413      	add	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	440b      	add	r3, r1
 800c308:	3302      	adds	r3, #2
 800c30a:	78ba      	ldrb	r2, [r7, #2]
 800c30c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c30e:	68fb      	ldr	r3, [r7, #12]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	2400b41c 	.word	0x2400b41c
 800c31c:	2400b2f8 	.word	0x2400b2f8

0800c320 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b094      	sub	sp, #80	; 0x50
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800c328:	4b9c      	ldr	r3, [pc, #624]	; (800c59c <QSPI_MspInit+0x27c>)
 800c32a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c32e:	4a9b      	ldr	r2, [pc, #620]	; (800c59c <QSPI_MspInit+0x27c>)
 800c330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c334:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c338:	4b98      	ldr	r3, [pc, #608]	; (800c59c <QSPI_MspInit+0x27c>)
 800c33a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c33e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c342:	63bb      	str	r3, [r7, #56]	; 0x38
 800c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800c346:	4b95      	ldr	r3, [pc, #596]	; (800c59c <QSPI_MspInit+0x27c>)
 800c348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c34a:	4a94      	ldr	r2, [pc, #592]	; (800c59c <QSPI_MspInit+0x27c>)
 800c34c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c350:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800c352:	4b92      	ldr	r3, [pc, #584]	; (800c59c <QSPI_MspInit+0x27c>)
 800c354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c356:	4a91      	ldr	r2, [pc, #580]	; (800c59c <QSPI_MspInit+0x27c>)
 800c358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c35c:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800c35e:	4b8f      	ldr	r3, [pc, #572]	; (800c59c <QSPI_MspInit+0x27c>)
 800c360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c364:	4a8d      	ldr	r2, [pc, #564]	; (800c59c <QSPI_MspInit+0x27c>)
 800c366:	f043 0320 	orr.w	r3, r3, #32
 800c36a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c36e:	4b8b      	ldr	r3, [pc, #556]	; (800c59c <QSPI_MspInit+0x27c>)
 800c370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c374:	f003 0320 	and.w	r3, r3, #32
 800c378:	637b      	str	r3, [r7, #52]	; 0x34
 800c37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800c37c:	4b87      	ldr	r3, [pc, #540]	; (800c59c <QSPI_MspInit+0x27c>)
 800c37e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c382:	4a86      	ldr	r2, [pc, #536]	; (800c59c <QSPI_MspInit+0x27c>)
 800c384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c38c:	4b83      	ldr	r3, [pc, #524]	; (800c59c <QSPI_MspInit+0x27c>)
 800c38e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c396:	633b      	str	r3, [r7, #48]	; 0x30
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800c39a:	4b80      	ldr	r3, [pc, #512]	; (800c59c <QSPI_MspInit+0x27c>)
 800c39c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3a0:	4a7e      	ldr	r2, [pc, #504]	; (800c59c <QSPI_MspInit+0x27c>)
 800c3a2:	f043 0308 	orr.w	r3, r3, #8
 800c3a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c3aa:	4b7c      	ldr	r3, [pc, #496]	; (800c59c <QSPI_MspInit+0x27c>)
 800c3ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3b0:	f003 0308 	and.w	r3, r3, #8
 800c3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800c3b8:	4b78      	ldr	r3, [pc, #480]	; (800c59c <QSPI_MspInit+0x27c>)
 800c3ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3be:	4a77      	ldr	r2, [pc, #476]	; (800c59c <QSPI_MspInit+0x27c>)
 800c3c0:	f043 0320 	orr.w	r3, r3, #32
 800c3c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c3c8:	4b74      	ldr	r3, [pc, #464]	; (800c59c <QSPI_MspInit+0x27c>)
 800c3ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3ce:	f003 0320 	and.w	r3, r3, #32
 800c3d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800c3d6:	4b71      	ldr	r3, [pc, #452]	; (800c59c <QSPI_MspInit+0x27c>)
 800c3d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3dc:	4a6f      	ldr	r2, [pc, #444]	; (800c59c <QSPI_MspInit+0x27c>)
 800c3de:	f043 0320 	orr.w	r3, r3, #32
 800c3e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c3e6:	4b6d      	ldr	r3, [pc, #436]	; (800c59c <QSPI_MspInit+0x27c>)
 800c3e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3ec:	f003 0320 	and.w	r3, r3, #32
 800c3f0:	627b      	str	r3, [r7, #36]	; 0x24
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800c3f4:	4b69      	ldr	r3, [pc, #420]	; (800c59c <QSPI_MspInit+0x27c>)
 800c3f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3fa:	4a68      	ldr	r2, [pc, #416]	; (800c59c <QSPI_MspInit+0x27c>)
 800c3fc:	f043 0320 	orr.w	r3, r3, #32
 800c400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c404:	4b65      	ldr	r3, [pc, #404]	; (800c59c <QSPI_MspInit+0x27c>)
 800c406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c40a:	f003 0320 	and.w	r3, r3, #32
 800c40e:	623b      	str	r3, [r7, #32]
 800c410:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800c412:	4b62      	ldr	r3, [pc, #392]	; (800c59c <QSPI_MspInit+0x27c>)
 800c414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c418:	4a60      	ldr	r2, [pc, #384]	; (800c59c <QSPI_MspInit+0x27c>)
 800c41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c41e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c422:	4b5e      	ldr	r3, [pc, #376]	; (800c59c <QSPI_MspInit+0x27c>)
 800c424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c42c:	61fb      	str	r3, [r7, #28]
 800c42e:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800c430:	4b5a      	ldr	r3, [pc, #360]	; (800c59c <QSPI_MspInit+0x27c>)
 800c432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c436:	4a59      	ldr	r2, [pc, #356]	; (800c59c <QSPI_MspInit+0x27c>)
 800c438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c440:	4b56      	ldr	r3, [pc, #344]	; (800c59c <QSPI_MspInit+0x27c>)
 800c442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c44a:	61bb      	str	r3, [r7, #24]
 800c44c:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800c44e:	4b53      	ldr	r3, [pc, #332]	; (800c59c <QSPI_MspInit+0x27c>)
 800c450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c454:	4a51      	ldr	r2, [pc, #324]	; (800c59c <QSPI_MspInit+0x27c>)
 800c456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c45a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c45e:	4b4f      	ldr	r3, [pc, #316]	; (800c59c <QSPI_MspInit+0x27c>)
 800c460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c468:	617b      	str	r3, [r7, #20]
 800c46a:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800c46c:	4b4b      	ldr	r3, [pc, #300]	; (800c59c <QSPI_MspInit+0x27c>)
 800c46e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c472:	4a4a      	ldr	r2, [pc, #296]	; (800c59c <QSPI_MspInit+0x27c>)
 800c474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c47c:	4b47      	ldr	r3, [pc, #284]	; (800c59c <QSPI_MspInit+0x27c>)
 800c47e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c486:	613b      	str	r3, [r7, #16]
 800c488:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800c48a:	4b44      	ldr	r3, [pc, #272]	; (800c59c <QSPI_MspInit+0x27c>)
 800c48c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c490:	4a42      	ldr	r2, [pc, #264]	; (800c59c <QSPI_MspInit+0x27c>)
 800c492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c49a:	4b40      	ldr	r3, [pc, #256]	; (800c59c <QSPI_MspInit+0x27c>)
 800c49c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4a4:	60fb      	str	r3, [r7, #12]
 800c4a6:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800c4a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c4ae:	2302      	movs	r3, #2
 800c4b0:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c4ba:	2309      	movs	r3, #9
 800c4bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800c4be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4836      	ldr	r0, [pc, #216]	; (800c5a0 <QSPI_MspInit+0x280>)
 800c4c6:	f001 fa0d 	bl	800d8e4 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800c4ca:	2340      	movs	r3, #64	; 0x40
 800c4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800c4d2:	230a      	movs	r3, #10
 800c4d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800c4d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c4da:	4619      	mov	r1, r3
 800c4dc:	4831      	ldr	r0, [pc, #196]	; (800c5a4 <QSPI_MspInit+0x284>)
 800c4de:	f001 fa01 	bl	800d8e4 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800c4e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c4ec:	2309      	movs	r3, #9
 800c4ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800c4f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	482c      	ldr	r0, [pc, #176]	; (800c5a8 <QSPI_MspInit+0x288>)
 800c4f8:	f001 f9f4 	bl	800d8e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800c4fc:	2304      	movs	r3, #4
 800c4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c500:	2309      	movs	r3, #9
 800c502:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800c504:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c508:	4619      	mov	r1, r3
 800c50a:	4828      	ldr	r0, [pc, #160]	; (800c5ac <QSPI_MspInit+0x28c>)
 800c50c:	f001 f9ea 	bl	800d8e4 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800c510:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c514:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800c516:	230a      	movs	r3, #10
 800c518:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800c51a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c51e:	4619      	mov	r1, r3
 800c520:	481f      	ldr	r0, [pc, #124]	; (800c5a0 <QSPI_MspInit+0x280>)
 800c522:	f001 f9df 	bl	800d8e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800c526:	2308      	movs	r3, #8
 800c528:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c52a:	2309      	movs	r3, #9
 800c52c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800c52e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c532:	4619      	mov	r1, r3
 800c534:	481d      	ldr	r0, [pc, #116]	; (800c5ac <QSPI_MspInit+0x28c>)
 800c536:	f001 f9d5 	bl	800d8e4 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800c53a:	2380      	movs	r3, #128	; 0x80
 800c53c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c53e:	2309      	movs	r3, #9
 800c540:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800c542:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c546:	4619      	mov	r1, r3
 800c548:	4815      	ldr	r0, [pc, #84]	; (800c5a0 <QSPI_MspInit+0x280>)
 800c54a:	f001 f9cb 	bl	800d8e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800c54e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c552:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800c554:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c558:	4619      	mov	r1, r3
 800c55a:	4812      	ldr	r0, [pc, #72]	; (800c5a4 <QSPI_MspInit+0x284>)
 800c55c:	f001 f9c2 	bl	800d8e4 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800c560:	2340      	movs	r3, #64	; 0x40
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800c564:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c568:	4619      	mov	r1, r3
 800c56a:	480d      	ldr	r0, [pc, #52]	; (800c5a0 <QSPI_MspInit+0x280>)
 800c56c:	f001 f9ba 	bl	800d8e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800c570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c574:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800c576:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c57a:	4619      	mov	r1, r3
 800c57c:	4809      	ldr	r0, [pc, #36]	; (800c5a4 <QSPI_MspInit+0x284>)
 800c57e:	f001 f9b1 	bl	800d8e4 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800c582:	2200      	movs	r2, #0
 800c584:	210f      	movs	r1, #15
 800c586:	205c      	movs	r0, #92	; 0x5c
 800c588:	f000 fe9c 	bl	800d2c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800c58c:	205c      	movs	r0, #92	; 0x5c
 800c58e:	f000 feb3 	bl	800d2f8 <HAL_NVIC_EnableIRQ>
}
 800c592:	bf00      	nop
 800c594:	3750      	adds	r7, #80	; 0x50
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	58024400 	.word	0x58024400
 800c5a0:	58021400 	.word	0x58021400
 800c5a4:	58021800 	.word	0x58021800
 800c5a8:	58020c00 	.word	0x58020c00
 800c5ac:	58021c00 	.word	0x58021c00

0800c5b0 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800c5bc:	2103      	movs	r1, #3
 800c5be:	4830      	ldr	r0, [pc, #192]	; (800c680 <QSPI_ResetMemory+0xd0>)
 800c5c0:	f7fe ff30 	bl	800b424 <MT25TL01G_ResetEnable>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d003      	beq.n	800c5d2 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800c5ca:	f06f 0304 	mvn.w	r3, #4
 800c5ce:	60fb      	str	r3, [r7, #12]
 800c5d0:	e051      	b.n	800c676 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800c5d2:	2103      	movs	r1, #3
 800c5d4:	482a      	ldr	r0, [pc, #168]	; (800c680 <QSPI_ResetMemory+0xd0>)
 800c5d6:	f7fe ff57 	bl	800b488 <MT25TL01G_ResetMemory>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d003      	beq.n	800c5e8 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5e0:	f06f 0304 	mvn.w	r3, #4
 800c5e4:	60fb      	str	r3, [r7, #12]
 800c5e6:	e046      	b.n	800c676 <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c5e8:	4926      	ldr	r1, [pc, #152]	; (800c684 <QSPI_ResetMemory+0xd4>)
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	005b      	lsls	r3, r3, #1
 800c5f0:	4413      	add	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	440b      	add	r3, r1
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	4820      	ldr	r0, [pc, #128]	; (800c680 <QSPI_ResetMemory+0xd0>)
 800c5fe:	f7fe fd53 	bl	800b0a8 <MT25TL01G_AutoPollingMemReady>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d003      	beq.n	800c610 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c608:	f06f 0304 	mvn.w	r3, #4
 800c60c:	60fb      	str	r3, [r7, #12]
 800c60e:	e032      	b.n	800c676 <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800c610:	2100      	movs	r1, #0
 800c612:	481b      	ldr	r0, [pc, #108]	; (800c680 <QSPI_ResetMemory+0xd0>)
 800c614:	f7fe ff06 	bl	800b424 <MT25TL01G_ResetEnable>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d003      	beq.n	800c626 <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c61e:	f06f 0304 	mvn.w	r3, #4
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	e027      	b.n	800c676 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800c626:	2100      	movs	r1, #0
 800c628:	4815      	ldr	r0, [pc, #84]	; (800c680 <QSPI_ResetMemory+0xd0>)
 800c62a:	f7fe ff2d 	bl	800b488 <MT25TL01G_ResetMemory>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d003      	beq.n	800c63c <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c634:	f06f 0304 	mvn.w	r3, #4
 800c638:	60fb      	str	r3, [r7, #12]
 800c63a:	e01c      	b.n	800c676 <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800c63c:	4911      	ldr	r1, [pc, #68]	; (800c684 <QSPI_ResetMemory+0xd4>)
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	4613      	mov	r3, r2
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	4413      	add	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	440b      	add	r3, r1
 800c64a:	2201      	movs	r2, #1
 800c64c:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800c64e:	490d      	ldr	r1, [pc, #52]	; (800c684 <QSPI_ResetMemory+0xd4>)
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	4613      	mov	r3, r2
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	4413      	add	r3, r2
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	440b      	add	r3, r1
 800c65c:	3301      	adds	r3, #1
 800c65e:	2200      	movs	r2, #0
 800c660:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800c662:	4908      	ldr	r1, [pc, #32]	; (800c684 <QSPI_ResetMemory+0xd4>)
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	4613      	mov	r3, r2
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	4413      	add	r3, r2
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	440b      	add	r3, r1
 800c670:	3302      	adds	r3, #2
 800c672:	2200      	movs	r2, #0
 800c674:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 800c676:	68fb      	ldr	r3, [r7, #12]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	2400b2f8 	.word	0x2400b2f8
 800c684:	2400b41c 	.word	0x2400b41c

0800c688 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b092      	sub	sp, #72	; 0x48
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800c690:	2300      	movs	r3, #0
 800c692:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 800c694:	2300      	movs	r3, #0
 800c696:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800c698:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c69c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800c69e:	2385      	movs	r3, #133	; 0x85
 800c6a0:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800c6aa:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800c6ae:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c6c4:	f107 030c 	add.w	r3, r7, #12
 800c6c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	482b      	ldr	r0, [pc, #172]	; (800c77c <QSPI_DummyCyclesCfg+0xf4>)
 800c6d0:	f003 fa02 	bl	800fad8 <HAL_QSPI_Command>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d002      	beq.n	800c6e0 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c6da:	f06f 0304 	mvn.w	r3, #4
 800c6de:	e048      	b.n	800c772 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c6e0:	f107 030a 	add.w	r3, r7, #10
 800c6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	4824      	ldr	r0, [pc, #144]	; (800c77c <QSPI_DummyCyclesCfg+0xf4>)
 800c6ec:	f003 fae4 	bl	800fcb8 <HAL_QSPI_Receive>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d002      	beq.n	800c6fc <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c6f6:	f06f 0304 	mvn.w	r3, #4
 800c6fa:	e03a      	b.n	800c772 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c6fc:	4920      	ldr	r1, [pc, #128]	; (800c780 <QSPI_DummyCyclesCfg+0xf8>)
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	4613      	mov	r3, r2
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	4413      	add	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	440b      	add	r3, r1
 800c70a:	3301      	adds	r3, #1
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	4619      	mov	r1, r3
 800c710:	481a      	ldr	r0, [pc, #104]	; (800c77c <QSPI_DummyCyclesCfg+0xf4>)
 800c712:	f7fe fd05 	bl	800b120 <MT25TL01G_WriteEnable>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c71c:	f06f 0304 	mvn.w	r3, #4
 800c720:	e027      	b.n	800c772 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800c722:	2381      	movs	r3, #129	; 0x81
 800c724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800c726:	897a      	ldrh	r2, [r7, #10]
 800c728:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c72c:	4013      	ands	r3, r2
 800c72e:	b29a      	uxth	r2, r3
 800c730:	4b14      	ldr	r3, [pc, #80]	; (800c784 <QSPI_DummyCyclesCfg+0xfc>)
 800c732:	4313      	orrs	r3, r2
 800c734:	b29b      	uxth	r3, r3
 800c736:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c738:	f107 030c 	add.w	r3, r7, #12
 800c73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c740:	4619      	mov	r1, r3
 800c742:	480e      	ldr	r0, [pc, #56]	; (800c77c <QSPI_DummyCyclesCfg+0xf4>)
 800c744:	f003 f9c8 	bl	800fad8 <HAL_QSPI_Command>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d002      	beq.n	800c754 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c74e:	f06f 0304 	mvn.w	r3, #4
 800c752:	e00e      	b.n	800c772 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c754:	f107 030a 	add.w	r3, r7, #10
 800c758:	f241 3288 	movw	r2, #5000	; 0x1388
 800c75c:	4619      	mov	r1, r3
 800c75e:	4807      	ldr	r0, [pc, #28]	; (800c77c <QSPI_DummyCyclesCfg+0xf4>)
 800c760:	f003 fa18 	bl	800fb94 <HAL_QSPI_Transmit>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d002      	beq.n	800c770 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c76a:	f06f 0304 	mvn.w	r3, #4
 800c76e:	e000      	b.n	800c772 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800c770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c772:	4618      	mov	r0, r3
 800c774:	3748      	adds	r7, #72	; 0x48
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	2400b2f8 	.word	0x2400b2f8
 800c780:	2400b41c 	.word	0x2400b41c
 800c784:	ffff8080 	.word	0xffff8080

0800c788 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c790:	2300      	movs	r3, #0
 800c792:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d003      	beq.n	800c7a2 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800c79a:	f06f 0301 	mvn.w	r3, #1
 800c79e:	60fb      	str	r3, [r7, #12]
 800c7a0:	e044      	b.n	800c82c <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2234      	movs	r2, #52	; 0x34
 800c7a6:	fb02 f303 	mul.w	r3, r2, r3
 800c7aa:	4a23      	ldr	r2, [pc, #140]	; (800c838 <BSP_SDRAM_Init+0xb0>)
 800c7ac:	4413      	add	r3, r2
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f000 f8b8 	bl	800c924 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2234      	movs	r2, #52	; 0x34
 800c7b8:	fb02 f303 	mul.w	r3, r2, r3
 800c7bc:	4a1e      	ldr	r2, [pc, #120]	; (800c838 <BSP_SDRAM_Init+0xb0>)
 800c7be:	4413      	add	r3, r2
 800c7c0:	2210      	movs	r2, #16
 800c7c2:	2104      	movs	r1, #4
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f000 f861 	bl	800c88c <MX_SDRAM_BANK2_Init>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d003      	beq.n	800c7d8 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800c7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d4:	60fb      	str	r3, [r7, #12]
 800c7d6:	e029      	b.n	800c82c <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800c7d8:	4b18      	ldr	r3, [pc, #96]	; (800c83c <BSP_SDRAM_Init+0xb4>)
 800c7da:	2208      	movs	r2, #8
 800c7dc:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800c7de:	4b17      	ldr	r3, [pc, #92]	; (800c83c <BSP_SDRAM_Init+0xb4>)
 800c7e0:	2203      	movs	r2, #3
 800c7e2:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800c7e4:	4b15      	ldr	r3, [pc, #84]	; (800c83c <BSP_SDRAM_Init+0xb4>)
 800c7e6:	f240 6203 	movw	r2, #1539	; 0x603
 800c7ea:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 800c7ec:	4b13      	ldr	r3, [pc, #76]	; (800c83c <BSP_SDRAM_Init+0xb4>)
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800c7f2:	4b12      	ldr	r3, [pc, #72]	; (800c83c <BSP_SDRAM_Init+0xb4>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800c7f8:	4b10      	ldr	r3, [pc, #64]	; (800c83c <BSP_SDRAM_Init+0xb4>)
 800c7fa:	2230      	movs	r2, #48	; 0x30
 800c7fc:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800c7fe:	4b0f      	ldr	r3, [pc, #60]	; (800c83c <BSP_SDRAM_Init+0xb4>)
 800c800:	2200      	movs	r2, #0
 800c802:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800c804:	4b0d      	ldr	r3, [pc, #52]	; (800c83c <BSP_SDRAM_Init+0xb4>)
 800c806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c80a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2234      	movs	r2, #52	; 0x34
 800c810:	fb02 f303 	mul.w	r3, r2, r3
 800c814:	4a08      	ldr	r2, [pc, #32]	; (800c838 <BSP_SDRAM_Init+0xb0>)
 800c816:	4413      	add	r3, r2
 800c818:	4908      	ldr	r1, [pc, #32]	; (800c83c <BSP_SDRAM_Init+0xb4>)
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe fe66 	bl	800b4ec <MT48LC4M32B2_Init>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d002      	beq.n	800c82c <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800c826:	f06f 0304 	mvn.w	r3, #4
 800c82a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800c82c:	68fb      	ldr	r3, [r7, #12]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	2400b428 	.word	0x2400b428
 800c83c:	2400ad90 	.word	0x2400ad90

0800c840 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c848:	2300      	movs	r3, #0
 800c84a:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d003      	beq.n	800c85a <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800c852:	f06f 0301 	mvn.w	r3, #1
 800c856:	60fb      	str	r3, [r7, #12]
 800c858:	e011      	b.n	800c87e <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2234      	movs	r2, #52	; 0x34
 800c85e:	fb02 f303 	mul.w	r3, r2, r3
 800c862:	4a09      	ldr	r2, [pc, #36]	; (800c888 <BSP_SDRAM_DeInit+0x48>)
 800c864:	4413      	add	r3, r2
 800c866:	4618      	mov	r0, r3
 800c868:	f005 ff2e 	bl	80126c8 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2234      	movs	r2, #52	; 0x34
 800c870:	fb02 f303 	mul.w	r3, r2, r3
 800c874:	4a04      	ldr	r2, [pc, #16]	; (800c888 <BSP_SDRAM_DeInit+0x48>)
 800c876:	4413      	add	r3, r2
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 f951 	bl	800cb20 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 800c87e:	68fb      	ldr	r3, [r7, #12]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3710      	adds	r7, #16
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	2400b428 	.word	0x2400b428

0800c88c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b08c      	sub	sp, #48	; 0x30
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800c898:	4b20      	ldr	r3, [pc, #128]	; (800c91c <MX_SDRAM_BANK2_Init+0x90>)
 800c89a:	4a21      	ldr	r2, [pc, #132]	; (800c920 <MX_SDRAM_BANK2_Init+0x94>)
 800c89c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800c8b6:	4b19      	ldr	r3, [pc, #100]	; (800c91c <MX_SDRAM_BANK2_Init+0x90>)
 800c8b8:	2240      	movs	r2, #64	; 0x40
 800c8ba:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c8c2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c8d0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c8d8:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800c8e4:	2307      	movs	r3, #7
 800c8e6:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 800c8e8:	2304      	movs	r3, #4
 800c8ea:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800c8ec:	2307      	movs	r3, #7
 800c8ee:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800c8f0:	2302      	movs	r3, #2
 800c8f2:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 800c8f4:	2302      	movs	r3, #2
 800c8f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 800c8f8:	2302      	movs	r3, #2
 800c8fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800c8fc:	f107 0314 	add.w	r3, r7, #20
 800c900:	4619      	mov	r1, r3
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f005 fea4 	bl	8012650 <HAL_SDRAM_Init>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	e000      	b.n	800c914 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3730      	adds	r7, #48	; 0x30
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	2400b428 	.word	0x2400b428
 800c920:	52004140 	.word	0x52004140

0800c924 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b08e      	sub	sp, #56	; 0x38
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800c92c:	4b73      	ldr	r3, [pc, #460]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c92e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c932:	4a72      	ldr	r2, [pc, #456]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c934:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c938:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c93c:	4b6f      	ldr	r3, [pc, #444]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c93e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c946:	623b      	str	r3, [r7, #32]
 800c948:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800c94a:	4b6c      	ldr	r3, [pc, #432]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c94c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c950:	4a6a      	ldr	r2, [pc, #424]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c952:	f043 0301 	orr.w	r3, r3, #1
 800c956:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c95a:	4b68      	ldr	r3, [pc, #416]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c95c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c960:	f003 0301 	and.w	r3, r3, #1
 800c964:	61fb      	str	r3, [r7, #28]
 800c966:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c968:	4b64      	ldr	r3, [pc, #400]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c96a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c96e:	4a63      	ldr	r2, [pc, #396]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c970:	f043 0308 	orr.w	r3, r3, #8
 800c974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c978:	4b60      	ldr	r3, [pc, #384]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c97a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c97e:	f003 0308 	and.w	r3, r3, #8
 800c982:	61bb      	str	r3, [r7, #24]
 800c984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c986:	4b5d      	ldr	r3, [pc, #372]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c98c:	4a5b      	ldr	r2, [pc, #364]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c98e:	f043 0310 	orr.w	r3, r3, #16
 800c992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c996:	4b59      	ldr	r3, [pc, #356]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c99c:	f003 0310 	and.w	r3, r3, #16
 800c9a0:	617b      	str	r3, [r7, #20]
 800c9a2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c9a4:	4b55      	ldr	r3, [pc, #340]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c9a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9aa:	4a54      	ldr	r2, [pc, #336]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c9ac:	f043 0320 	orr.w	r3, r3, #32
 800c9b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c9b4:	4b51      	ldr	r3, [pc, #324]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c9b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9ba:	f003 0320 	and.w	r3, r3, #32
 800c9be:	613b      	str	r3, [r7, #16]
 800c9c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c9c2:	4b4e      	ldr	r3, [pc, #312]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c9c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9c8:	4a4c      	ldr	r2, [pc, #304]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c9d2:	4b4a      	ldr	r3, [pc, #296]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c9d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9dc:	60fb      	str	r3, [r7, #12]
 800c9de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c9e0:	4b46      	ldr	r3, [pc, #280]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c9e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9e6:	4a45      	ldr	r2, [pc, #276]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c9f0:	4b42      	ldr	r3, [pc, #264]	; (800cafc <SDRAM_MspInit+0x1d8>)
 800c9f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9fa:	60bb      	str	r3, [r7, #8]
 800c9fc:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c9fe:	2302      	movs	r3, #2
 800ca00:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800ca02:	2301      	movs	r3, #1
 800ca04:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca06:	2303      	movs	r3, #3
 800ca08:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800ca0a:	230c      	movs	r3, #12
 800ca0c:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800ca0e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800ca14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca18:	4619      	mov	r1, r3
 800ca1a:	4839      	ldr	r0, [pc, #228]	; (800cb00 <SDRAM_MspInit+0x1dc>)
 800ca1c:	f000 ff62 	bl	800d8e4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800ca20:	f64f 7383 	movw	r3, #65411	; 0xff83
 800ca24:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800ca26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	4835      	ldr	r0, [pc, #212]	; (800cb04 <SDRAM_MspInit+0x1e0>)
 800ca2e:	f000 ff59 	bl	800d8e4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800ca32:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800ca36:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800ca38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	4832      	ldr	r0, [pc, #200]	; (800cb08 <SDRAM_MspInit+0x1e4>)
 800ca40:	f000 ff50 	bl	800d8e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800ca44:	f248 1333 	movw	r3, #33075	; 0x8133
 800ca48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800ca4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca4e:	4619      	mov	r1, r3
 800ca50:	482e      	ldr	r0, [pc, #184]	; (800cb0c <SDRAM_MspInit+0x1e8>)
 800ca52:	f000 ff47 	bl	800d8e4 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800ca56:	23e0      	movs	r3, #224	; 0xe0
 800ca58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800ca5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca5e:	4619      	mov	r1, r3
 800ca60:	482b      	ldr	r0, [pc, #172]	; (800cb10 <SDRAM_MspInit+0x1ec>)
 800ca62:	f000 ff3f 	bl	800d8e4 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800ca66:	4b2b      	ldr	r3, [pc, #172]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800ca68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ca6c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800ca6e:	4b29      	ldr	r3, [pc, #164]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800ca70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca74:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800ca76:	4b27      	ldr	r3, [pc, #156]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800ca78:	2280      	movs	r2, #128	; 0x80
 800ca7a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800ca7c:	4b25      	ldr	r3, [pc, #148]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800ca7e:	2200      	movs	r2, #0
 800ca80:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800ca82:	4b24      	ldr	r3, [pc, #144]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800ca84:	f240 2202 	movw	r2, #514	; 0x202
 800ca88:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800ca8a:	4b22      	ldr	r3, [pc, #136]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800ca8c:	f640 0208 	movw	r2, #2056	; 0x808
 800ca90:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800ca92:	4b20      	ldr	r3, [pc, #128]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800ca94:	2220      	movs	r2, #32
 800ca96:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800ca98:	4b1e      	ldr	r3, [pc, #120]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800ca9a:	2280      	movs	r2, #128	; 0x80
 800ca9c:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800ca9e:	4b1d      	ldr	r3, [pc, #116]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800caa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800caa4:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800caa6:	4b1b      	ldr	r3, [pc, #108]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800caac:	4b19      	ldr	r3, [pc, #100]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800caae:	2200      	movs	r2, #0
 800cab0:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800cab2:	4b18      	ldr	r3, [pc, #96]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800cab4:	2280      	movs	r2, #128	; 0x80
 800cab6:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800cab8:	4b16      	ldr	r3, [pc, #88]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800caba:	2200      	movs	r2, #0
 800cabc:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800cabe:	4b15      	ldr	r3, [pc, #84]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800cac0:	2200      	movs	r2, #0
 800cac2:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800cac4:	4b13      	ldr	r3, [pc, #76]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800cac6:	4a14      	ldr	r2, [pc, #80]	; (800cb18 <SDRAM_MspInit+0x1f4>)
 800cac8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800caca:	4b14      	ldr	r3, [pc, #80]	; (800cb1c <SDRAM_MspInit+0x1f8>)
 800cacc:	4a11      	ldr	r2, [pc, #68]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800cace:	631a      	str	r2, [r3, #48]	; 0x30
 800cad0:	4b10      	ldr	r3, [pc, #64]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800cad2:	4a12      	ldr	r2, [pc, #72]	; (800cb1c <SDRAM_MspInit+0x1f8>)
 800cad4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800cad6:	480f      	ldr	r0, [pc, #60]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800cad8:	f002 fc5e 	bl	800f398 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800cadc:	480d      	ldr	r0, [pc, #52]	; (800cb14 <SDRAM_MspInit+0x1f0>)
 800cade:	f002 fc0f 	bl	800f300 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800cae2:	2200      	movs	r2, #0
 800cae4:	210f      	movs	r1, #15
 800cae6:	207a      	movs	r0, #122	; 0x7a
 800cae8:	f000 fbec 	bl	800d2c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800caec:	207a      	movs	r0, #122	; 0x7a
 800caee:	f000 fc03 	bl	800d2f8 <HAL_NVIC_EnableIRQ>
}
 800caf2:	bf00      	nop
 800caf4:	3738      	adds	r7, #56	; 0x38
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	58024400 	.word	0x58024400
 800cb00:	58020c00 	.word	0x58020c00
 800cb04:	58021000 	.word	0x58021000
 800cb08:	58021400 	.word	0x58021400
 800cb0c:	58021800 	.word	0x58021800
 800cb10:	58021c00 	.word	0x58021c00
 800cb14:	2400adb0 	.word	0x2400adb0
 800cb18:	52000040 	.word	0x52000040
 800cb1c:	2400b428 	.word	0x2400b428

0800cb20 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800cb28:	207a      	movs	r0, #122	; 0x7a
 800cb2a:	f000 fbf3 	bl	800d314 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800cb2e:	4b05      	ldr	r3, [pc, #20]	; (800cb44 <SDRAM_MspDeInit+0x24>)
 800cb30:	4a05      	ldr	r2, [pc, #20]	; (800cb48 <SDRAM_MspDeInit+0x28>)
 800cb32:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800cb34:	4803      	ldr	r0, [pc, #12]	; (800cb44 <SDRAM_MspDeInit+0x24>)
 800cb36:	f002 fc2f 	bl	800f398 <HAL_MDMA_DeInit>
}
 800cb3a:	bf00      	nop
 800cb3c:	3708      	adds	r7, #8
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	2400ae1c 	.word	0x2400ae1c
 800cb48:	52000040 	.word	0x52000040

0800cb4c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b088      	sub	sp, #32
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800cb56:	2300      	movs	r3, #0
 800cb58:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d11c      	bne.n	800cb9a <BSP_TS_Init+0x4e>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d018      	beq.n	800cb9a <BSP_TS_Init+0x4e>
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800cb70:	d813      	bhi.n	800cb9a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00f      	beq.n	800cb9a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800cb82:	d80a      	bhi.n	800cb9a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	68da      	ldr	r2, [r3, #12]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	6819      	ldr	r1, [r3, #0]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	428b      	cmp	r3, r1
 800cb92:	bf28      	it	cs
 800cb94:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d903      	bls.n	800cba2 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800cb9a:	f06f 0301 	mvn.w	r3, #1
 800cb9e:	61fb      	str	r3, [r7, #28]
 800cba0:	e085      	b.n	800ccae <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f9e6 	bl	800cf74 <FT5336_Probe>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d003      	beq.n	800cbb6 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800cbae:	f04f 33ff 	mov.w	r3, #4294967295
 800cbb2:	61fb      	str	r3, [r7, #28]
 800cbb4:	e07b      	b.n	800ccae <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	6819      	ldr	r1, [r3, #0]
 800cbba:	483f      	ldr	r0, [pc, #252]	; (800ccb8 <BSP_TS_Init+0x16c>)
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	4403      	add	r3, r0
 800cbc8:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	6859      	ldr	r1, [r3, #4]
 800cbce:	483a      	ldr	r0, [pc, #232]	; (800ccb8 <BSP_TS_Init+0x16c>)
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	4413      	add	r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	4403      	add	r3, r0
 800cbdc:	3304      	adds	r3, #4
 800cbde:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	6899      	ldr	r1, [r3, #8]
 800cbe4:	4834      	ldr	r0, [pc, #208]	; (800ccb8 <BSP_TS_Init+0x16c>)
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	4613      	mov	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4413      	add	r3, r2
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	4403      	add	r3, r0
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	68d9      	ldr	r1, [r3, #12]
 800cbfa:	482f      	ldr	r0, [pc, #188]	; (800ccb8 <BSP_TS_Init+0x16c>)
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	4613      	mov	r3, r2
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	4413      	add	r3, r2
 800cc04:	00db      	lsls	r3, r3, #3
 800cc06:	4403      	add	r3, r0
 800cc08:	330c      	adds	r3, #12
 800cc0a:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800cc0c:	4b2b      	ldr	r3, [pc, #172]	; (800ccbc <BSP_TS_Init+0x170>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	69db      	ldr	r3, [r3, #28]
 800cc12:	492b      	ldr	r1, [pc, #172]	; (800ccc0 <BSP_TS_Init+0x174>)
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cc1a:	f107 010c 	add.w	r1, r7, #12
 800cc1e:	4610      	mov	r0, r2
 800cc20:	4798      	blx	r3
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	da03      	bge.n	800cc30 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800cc28:	f06f 0304 	mvn.w	r3, #4
 800cc2c:	61fb      	str	r3, [r7, #28]
 800cc2e:	e03e      	b.n	800ccae <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800cc30:	6939      	ldr	r1, [r7, #16]
 800cc32:	4821      	ldr	r0, [pc, #132]	; (800ccb8 <BSP_TS_Init+0x16c>)
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	4613      	mov	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4413      	add	r3, r2
 800cc3c:	00db      	lsls	r3, r3, #3
 800cc3e:	4403      	add	r3, r0
 800cc40:	3310      	adds	r3, #16
 800cc42:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800cc44:	6979      	ldr	r1, [r7, #20]
 800cc46:	481c      	ldr	r0, [pc, #112]	; (800ccb8 <BSP_TS_Init+0x16c>)
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4413      	add	r3, r2
 800cc50:	00db      	lsls	r3, r3, #3
 800cc52:	4403      	add	r3, r0
 800cc54:	3314      	adds	r3, #20
 800cc56:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800cc58:	2300      	movs	r3, #0
 800cc5a:	61bb      	str	r3, [r7, #24]
 800cc5c:	e024      	b.n	800cca8 <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	4413      	add	r3, r2
 800cc68:	1c59      	adds	r1, r3, #1
 800cc6a:	4813      	ldr	r0, [pc, #76]	; (800ccb8 <BSP_TS_Init+0x16c>)
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	4413      	add	r3, r2
 800cc74:	005b      	lsls	r3, r3, #1
 800cc76:	69ba      	ldr	r2, [r7, #24]
 800cc78:	4413      	add	r3, r2
 800cc7a:	3306      	adds	r3, #6
 800cc7c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	685a      	ldr	r2, [r3, #4]
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	4413      	add	r3, r2
 800cc8a:	1c59      	adds	r1, r3, #1
 800cc8c:	480a      	ldr	r0, [pc, #40]	; (800ccb8 <BSP_TS_Init+0x16c>)
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	4613      	mov	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4413      	add	r3, r2
 800cc96:	005b      	lsls	r3, r3, #1
 800cc98:	69ba      	ldr	r2, [r7, #24]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	3308      	adds	r3, #8
 800cc9e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	3301      	adds	r3, #1
 800cca6:	61bb      	str	r3, [r7, #24]
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d9d7      	bls.n	800cc5e <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 800ccae:	69fb      	ldr	r3, [r7, #28]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3720      	adds	r7, #32
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	2400ae90 	.word	0x2400ae90
 800ccbc:	2400ae88 	.word	0x2400ae88
 800ccc0:	2400ae8c 	.word	0x2400ae8c

0800ccc4 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b08a      	sub	sp, #40	; 0x28
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d003      	beq.n	800cce0 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ccd8:	f06f 0301 	mvn.w	r3, #1
 800ccdc:	627b      	str	r3, [r7, #36]	; 0x24
 800ccde:	e13e      	b.n	800cf5e <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800cce0:	4ba1      	ldr	r3, [pc, #644]	; (800cf68 <BSP_TS_GetState+0x2a4>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	49a1      	ldr	r1, [pc, #644]	; (800cf6c <BSP_TS_GetState+0x2a8>)
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ccee:	f107 0108 	add.w	r1, r7, #8
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	4798      	blx	r3
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	da03      	bge.n	800cd04 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ccfc:	f06f 0304 	mvn.w	r3, #4
 800cd00:	627b      	str	r3, [r7, #36]	; 0x24
 800cd02:	e12c      	b.n	800cf5e <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	f000 8110 	beq.w	800cf2c <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800cd14:	4996      	ldr	r1, [pc, #600]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	4413      	add	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	440b      	add	r3, r1
 800cd22:	3308      	adds	r3, #8
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f003 0308 	and.w	r3, r3, #8
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d003      	beq.n	800cd36 <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800cd36:	498e      	ldr	r1, [pc, #568]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	440b      	add	r3, r1
 800cd44:	3308      	adds	r3, #8
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f003 0302 	and.w	r3, r3, #2
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00c      	beq.n	800cd6a <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800cd50:	4987      	ldr	r1, [pc, #540]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	4613      	mov	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	00db      	lsls	r3, r3, #3
 800cd5c:	440b      	add	r3, r1
 800cd5e:	3310      	adds	r3, #16
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	3b01      	subs	r3, #1
 800cd68:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800cd6a:	4981      	ldr	r1, [pc, #516]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4413      	add	r3, r2
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	440b      	add	r3, r1
 800cd78:	3308      	adds	r3, #8
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 0304 	and.w	r3, r3, #4
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00b      	beq.n	800cd9c <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800cd84:	497a      	ldr	r1, [pc, #488]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	4413      	add	r3, r2
 800cd8e:	00db      	lsls	r3, r3, #3
 800cd90:	440b      	add	r3, r1
 800cd92:	3314      	adds	r3, #20
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800cd9c:	4974      	ldr	r1, [pc, #464]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	4613      	mov	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	00db      	lsls	r3, r3, #3
 800cda8:	440b      	add	r3, r1
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6a3a      	ldr	r2, [r7, #32]
 800cdae:	fb02 f103 	mul.w	r1, r2, r3
 800cdb2:	486f      	ldr	r0, [pc, #444]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4413      	add	r3, r2
 800cdbc:	00db      	lsls	r3, r3, #3
 800cdbe:	4403      	add	r3, r0
 800cdc0:	3310      	adds	r3, #16
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	fbb1 f2f3 	udiv	r2, r1, r3
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800cdcc:	4968      	ldr	r1, [pc, #416]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	440b      	add	r3, r1
 800cdda:	3304      	adds	r3, #4
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	69fa      	ldr	r2, [r7, #28]
 800cde0:	fb02 f103 	mul.w	r1, r2, r3
 800cde4:	4862      	ldr	r0, [pc, #392]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	4613      	mov	r3, r2
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	4413      	add	r3, r2
 800cdee:	00db      	lsls	r3, r3, #3
 800cdf0:	4403      	add	r3, r0
 800cdf2:	3314      	adds	r3, #20
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	fbb1 f2f3 	udiv	r2, r1, r3
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	6859      	ldr	r1, [r3, #4]
 800ce08:	4859      	ldr	r0, [pc, #356]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	4403      	add	r3, r0
 800ce16:	3318      	adds	r3, #24
 800ce18:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800ce1a:	4299      	cmp	r1, r3
 800ce1c:	d90c      	bls.n	800ce38 <BSP_TS_GetState+0x174>
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	6859      	ldr	r1, [r3, #4]
 800ce22:	4853      	ldr	r0, [pc, #332]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	4613      	mov	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4413      	add	r3, r2
 800ce2c:	00db      	lsls	r3, r3, #3
 800ce2e:	4403      	add	r3, r0
 800ce30:	3318      	adds	r3, #24
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	1acb      	subs	r3, r1, r3
 800ce36:	e00b      	b.n	800ce50 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800ce38:	494d      	ldr	r1, [pc, #308]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4413      	add	r3, r2
 800ce42:	00db      	lsls	r3, r3, #3
 800ce44:	440b      	add	r3, r1
 800ce46:	3318      	adds	r3, #24
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800ce4e:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800ce50:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	6899      	ldr	r1, [r3, #8]
 800ce56:	4846      	ldr	r0, [pc, #280]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4413      	add	r3, r2
 800ce60:	00db      	lsls	r3, r3, #3
 800ce62:	4403      	add	r3, r0
 800ce64:	3320      	adds	r3, #32
 800ce66:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800ce68:	4299      	cmp	r1, r3
 800ce6a:	d90c      	bls.n	800ce86 <BSP_TS_GetState+0x1c2>
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	6899      	ldr	r1, [r3, #8]
 800ce70:	483f      	ldr	r0, [pc, #252]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	4613      	mov	r3, r2
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	4413      	add	r3, r2
 800ce7a:	00db      	lsls	r3, r3, #3
 800ce7c:	4403      	add	r3, r0
 800ce7e:	3320      	adds	r3, #32
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	1acb      	subs	r3, r1, r3
 800ce84:	e00b      	b.n	800ce9e <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800ce86:	493a      	ldr	r1, [pc, #232]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	440b      	add	r3, r1
 800ce94:	3320      	adds	r3, #32
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800ce9c:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800ce9e:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800cea0:	4933      	ldr	r1, [pc, #204]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	4613      	mov	r3, r2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	4413      	add	r3, r2
 800ceaa:	00db      	lsls	r3, r3, #3
 800ceac:	440b      	add	r3, r1
 800ceae:	330c      	adds	r3, #12
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	69ba      	ldr	r2, [r7, #24]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d80b      	bhi.n	800ced0 <BSP_TS_GetState+0x20c>
 800ceb8:	492d      	ldr	r1, [pc, #180]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	4613      	mov	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4413      	add	r3, r2
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	440b      	add	r3, r1
 800cec6:	330c      	adds	r3, #12
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d916      	bls.n	800cefe <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	6859      	ldr	r1, [r3, #4]
 800ced4:	4826      	ldr	r0, [pc, #152]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	4613      	mov	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	4403      	add	r3, r0
 800cee2:	3318      	adds	r3, #24
 800cee4:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	6899      	ldr	r1, [r3, #8]
 800ceea:	4821      	ldr	r0, [pc, #132]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	4613      	mov	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4413      	add	r3, r2
 800cef4:	00db      	lsls	r3, r3, #3
 800cef6:	4403      	add	r3, r0
 800cef8:	3320      	adds	r3, #32
 800cefa:	6019      	str	r1, [r3, #0]
 800cefc:	e02f      	b.n	800cf5e <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800cefe:	491c      	ldr	r1, [pc, #112]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	4613      	mov	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	440b      	add	r3, r1
 800cf0c:	3318      	adds	r3, #24
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800cf14:	4916      	ldr	r1, [pc, #88]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	4613      	mov	r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	4413      	add	r3, r2
 800cf1e:	00db      	lsls	r3, r3, #3
 800cf20:	440b      	add	r3, r1
 800cf22:	3320      	adds	r3, #32
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	609a      	str	r2, [r3, #8]
 800cf2a:	e018      	b.n	800cf5e <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800cf32:	490f      	ldr	r1, [pc, #60]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	4613      	mov	r3, r2
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	4413      	add	r3, r2
 800cf3c:	00db      	lsls	r3, r3, #3
 800cf3e:	440b      	add	r3, r1
 800cf40:	3318      	adds	r3, #24
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800cf48:	4909      	ldr	r1, [pc, #36]	; (800cf70 <BSP_TS_GetState+0x2ac>)
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	440b      	add	r3, r1
 800cf56:	3320      	adds	r3, #32
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 800cf5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3728      	adds	r7, #40	; 0x28
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	2400ae88 	.word	0x2400ae88
 800cf6c:	2400ae8c 	.word	0x2400ae8c
 800cf70:	2400ae90 	.word	0x2400ae90

0800cf74 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b08a      	sub	sp, #40	; 0x28
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800cf80:	2300      	movs	r3, #0
 800cf82:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800cf84:	2370      	movs	r3, #112	; 0x70
 800cf86:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800cf88:	4b23      	ldr	r3, [pc, #140]	; (800d018 <FT5336_Probe+0xa4>)
 800cf8a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800cf8c:	4b23      	ldr	r3, [pc, #140]	; (800d01c <FT5336_Probe+0xa8>)
 800cf8e:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800cf90:	4b23      	ldr	r3, [pc, #140]	; (800d020 <FT5336_Probe+0xac>)
 800cf92:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800cf94:	4b23      	ldr	r3, [pc, #140]	; (800d024 <FT5336_Probe+0xb0>)
 800cf96:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800cf98:	4b23      	ldr	r3, [pc, #140]	; (800d028 <FT5336_Probe+0xb4>)
 800cf9a:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800cf9c:	f107 030c 	add.w	r3, r7, #12
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	4822      	ldr	r0, [pc, #136]	; (800d02c <FT5336_Probe+0xb8>)
 800cfa4:	f7fd fcaa 	bl	800a8fc <FT5336_RegisterBusIO>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800cfae:	f06f 0307 	mvn.w	r3, #7
 800cfb2:	627b      	str	r3, [r7, #36]	; 0x24
 800cfb4:	e02a      	b.n	800d00c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800cfb6:	f107 0308 	add.w	r3, r7, #8
 800cfba:	4619      	mov	r1, r3
 800cfbc:	481b      	ldr	r0, [pc, #108]	; (800d02c <FT5336_Probe+0xb8>)
 800cfbe:	f7fd fd97 	bl	800aaf0 <FT5336_ReadID>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d003      	beq.n	800cfd0 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800cfc8:	f06f 0304 	mvn.w	r3, #4
 800cfcc:	627b      	str	r3, [r7, #36]	; 0x24
 800cfce:	e01d      	b.n	800d00c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	2b51      	cmp	r3, #81	; 0x51
 800cfd4:	d003      	beq.n	800cfde <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800cfd6:	f06f 0306 	mvn.w	r3, #6
 800cfda:	627b      	str	r3, [r7, #36]	; 0x24
 800cfdc:	e016      	b.n	800d00c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800cfde:	4a14      	ldr	r2, [pc, #80]	; (800d030 <FT5336_Probe+0xbc>)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4912      	ldr	r1, [pc, #72]	; (800d02c <FT5336_Probe+0xb8>)
 800cfe4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800cfe8:	4b12      	ldr	r3, [pc, #72]	; (800d034 <FT5336_Probe+0xc0>)
 800cfea:	4a13      	ldr	r2, [pc, #76]	; (800d038 <FT5336_Probe+0xc4>)
 800cfec:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800cfee:	4b11      	ldr	r3, [pc, #68]	; (800d034 <FT5336_Probe+0xc0>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	490e      	ldr	r1, [pc, #56]	; (800d030 <FT5336_Probe+0xbc>)
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cffc:	4610      	mov	r0, r2
 800cffe:	4798      	blx	r3
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d002      	beq.n	800d00c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800d006:	f06f 0304 	mvn.w	r3, #4
 800d00a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800d00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3728      	adds	r7, #40	; 0x28
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	0800b705 	.word	0x0800b705
 800d01c:	0800b779 	.word	0x0800b779
 800d020:	0800b8a1 	.word	0x0800b8a1
 800d024:	0800b845 	.word	0x0800b845
 800d028:	0800b8fd 	.word	0x0800b8fd
 800d02c:	2400aeb8 	.word	0x2400aeb8
 800d030:	2400ae8c 	.word	0x2400ae8c
 800d034:	2400ae88 	.word	0x2400ae88
 800d038:	24000018 	.word	0x24000018

0800d03c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d042:	2003      	movs	r0, #3
 800d044:	f000 f933 	bl	800d2ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d048:	f004 f846 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 800d04c:	4602      	mov	r2, r0
 800d04e:	4b15      	ldr	r3, [pc, #84]	; (800d0a4 <HAL_Init+0x68>)
 800d050:	699b      	ldr	r3, [r3, #24]
 800d052:	0a1b      	lsrs	r3, r3, #8
 800d054:	f003 030f 	and.w	r3, r3, #15
 800d058:	4913      	ldr	r1, [pc, #76]	; (800d0a8 <HAL_Init+0x6c>)
 800d05a:	5ccb      	ldrb	r3, [r1, r3]
 800d05c:	f003 031f 	and.w	r3, r3, #31
 800d060:	fa22 f303 	lsr.w	r3, r2, r3
 800d064:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d066:	4b0f      	ldr	r3, [pc, #60]	; (800d0a4 <HAL_Init+0x68>)
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	f003 030f 	and.w	r3, r3, #15
 800d06e:	4a0e      	ldr	r2, [pc, #56]	; (800d0a8 <HAL_Init+0x6c>)
 800d070:	5cd3      	ldrb	r3, [r2, r3]
 800d072:	f003 031f 	and.w	r3, r3, #31
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	fa22 f303 	lsr.w	r3, r2, r3
 800d07c:	4a0b      	ldr	r2, [pc, #44]	; (800d0ac <HAL_Init+0x70>)
 800d07e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d080:	4a0b      	ldr	r2, [pc, #44]	; (800d0b0 <HAL_Init+0x74>)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d086:	200f      	movs	r0, #15
 800d088:	f7f4 f9ba 	bl	8001400 <HAL_InitTick>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800d092:	2301      	movs	r3, #1
 800d094:	e002      	b.n	800d09c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800d096:	f7f3 fe45 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	58024400 	.word	0x58024400
 800d0a8:	08028194 	.word	0x08028194
 800d0ac:	24000014 	.word	0x24000014
 800d0b0:	24000010 	.word	0x24000010

0800d0b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800d0b8:	4b06      	ldr	r3, [pc, #24]	; (800d0d4 <HAL_IncTick+0x20>)
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	4b06      	ldr	r3, [pc, #24]	; (800d0d8 <HAL_IncTick+0x24>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	4a04      	ldr	r2, [pc, #16]	; (800d0d8 <HAL_IncTick+0x24>)
 800d0c6:	6013      	str	r3, [r2, #0]
}
 800d0c8:	bf00      	nop
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	2400004c 	.word	0x2400004c
 800d0d8:	2400b45c 	.word	0x2400b45c

0800d0dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	af00      	add	r7, sp, #0
  return uwTick;
 800d0e0:	4b03      	ldr	r3, [pc, #12]	; (800d0f0 <HAL_GetTick+0x14>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	2400b45c 	.word	0x2400b45c

0800d0f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800d0f8:	4b03      	ldr	r3, [pc, #12]	; (800d108 <HAL_GetREVID+0x14>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	0c1b      	lsrs	r3, r3, #16
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	5c001000 	.word	0x5c001000

0800d10c <__NVIC_SetPriorityGrouping>:
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f003 0307 	and.w	r3, r3, #7
 800d11a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d11c:	4b0b      	ldr	r3, [pc, #44]	; (800d14c <__NVIC_SetPriorityGrouping+0x40>)
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d122:	68ba      	ldr	r2, [r7, #8]
 800d124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d128:	4013      	ands	r3, r2
 800d12a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800d134:	4b06      	ldr	r3, [pc, #24]	; (800d150 <__NVIC_SetPriorityGrouping+0x44>)
 800d136:	4313      	orrs	r3, r2
 800d138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d13a:	4a04      	ldr	r2, [pc, #16]	; (800d14c <__NVIC_SetPriorityGrouping+0x40>)
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	60d3      	str	r3, [r2, #12]
}
 800d140:	bf00      	nop
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	e000ed00 	.word	0xe000ed00
 800d150:	05fa0000 	.word	0x05fa0000

0800d154 <__NVIC_GetPriorityGrouping>:
{
 800d154:	b480      	push	{r7}
 800d156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d158:	4b04      	ldr	r3, [pc, #16]	; (800d16c <__NVIC_GetPriorityGrouping+0x18>)
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	0a1b      	lsrs	r3, r3, #8
 800d15e:	f003 0307 	and.w	r3, r3, #7
}
 800d162:	4618      	mov	r0, r3
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr
 800d16c:	e000ed00 	.word	0xe000ed00

0800d170 <__NVIC_EnableIRQ>:
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	4603      	mov	r3, r0
 800d178:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d17a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	db0b      	blt.n	800d19a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d182:	88fb      	ldrh	r3, [r7, #6]
 800d184:	f003 021f 	and.w	r2, r3, #31
 800d188:	4907      	ldr	r1, [pc, #28]	; (800d1a8 <__NVIC_EnableIRQ+0x38>)
 800d18a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d18e:	095b      	lsrs	r3, r3, #5
 800d190:	2001      	movs	r0, #1
 800d192:	fa00 f202 	lsl.w	r2, r0, r2
 800d196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d19a:	bf00      	nop
 800d19c:	370c      	adds	r7, #12
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	e000e100 	.word	0xe000e100

0800d1ac <__NVIC_DisableIRQ>:
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d1b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	db12      	blt.n	800d1e4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d1be:	88fb      	ldrh	r3, [r7, #6]
 800d1c0:	f003 021f 	and.w	r2, r3, #31
 800d1c4:	490a      	ldr	r1, [pc, #40]	; (800d1f0 <__NVIC_DisableIRQ+0x44>)
 800d1c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d1ca:	095b      	lsrs	r3, r3, #5
 800d1cc:	2001      	movs	r0, #1
 800d1ce:	fa00 f202 	lsl.w	r2, r0, r2
 800d1d2:	3320      	adds	r3, #32
 800d1d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d1d8:	f3bf 8f4f 	dsb	sy
}
 800d1dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d1de:	f3bf 8f6f 	isb	sy
}
 800d1e2:	bf00      	nop
}
 800d1e4:	bf00      	nop
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr
 800d1f0:	e000e100 	.word	0xe000e100

0800d1f4 <__NVIC_SetPriority>:
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	6039      	str	r1, [r7, #0]
 800d1fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d204:	2b00      	cmp	r3, #0
 800d206:	db0a      	blt.n	800d21e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	490c      	ldr	r1, [pc, #48]	; (800d240 <__NVIC_SetPriority+0x4c>)
 800d20e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d212:	0112      	lsls	r2, r2, #4
 800d214:	b2d2      	uxtb	r2, r2
 800d216:	440b      	add	r3, r1
 800d218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d21c:	e00a      	b.n	800d234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	b2da      	uxtb	r2, r3
 800d222:	4908      	ldr	r1, [pc, #32]	; (800d244 <__NVIC_SetPriority+0x50>)
 800d224:	88fb      	ldrh	r3, [r7, #6]
 800d226:	f003 030f 	and.w	r3, r3, #15
 800d22a:	3b04      	subs	r3, #4
 800d22c:	0112      	lsls	r2, r2, #4
 800d22e:	b2d2      	uxtb	r2, r2
 800d230:	440b      	add	r3, r1
 800d232:	761a      	strb	r2, [r3, #24]
}
 800d234:	bf00      	nop
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	e000e100 	.word	0xe000e100
 800d244:	e000ed00 	.word	0xe000ed00

0800d248 <NVIC_EncodePriority>:
{
 800d248:	b480      	push	{r7}
 800d24a:	b089      	sub	sp, #36	; 0x24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f003 0307 	and.w	r3, r3, #7
 800d25a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	f1c3 0307 	rsb	r3, r3, #7
 800d262:	2b04      	cmp	r3, #4
 800d264:	bf28      	it	cs
 800d266:	2304      	movcs	r3, #4
 800d268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	3304      	adds	r3, #4
 800d26e:	2b06      	cmp	r3, #6
 800d270:	d902      	bls.n	800d278 <NVIC_EncodePriority+0x30>
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	3b03      	subs	r3, #3
 800d276:	e000      	b.n	800d27a <NVIC_EncodePriority+0x32>
 800d278:	2300      	movs	r3, #0
 800d27a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d27c:	f04f 32ff 	mov.w	r2, #4294967295
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	fa02 f303 	lsl.w	r3, r2, r3
 800d286:	43da      	mvns	r2, r3
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	401a      	ands	r2, r3
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d290:	f04f 31ff 	mov.w	r1, #4294967295
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	fa01 f303 	lsl.w	r3, r1, r3
 800d29a:	43d9      	mvns	r1, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d2a0:	4313      	orrs	r3, r2
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3724      	adds	r7, #36	; 0x24
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b082      	sub	sp, #8
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7ff ff28 	bl	800d10c <__NVIC_SetPriorityGrouping>
}
 800d2bc:	bf00      	nop
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
 800d2d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d2d2:	f7ff ff3f 	bl	800d154 <__NVIC_GetPriorityGrouping>
 800d2d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	68b9      	ldr	r1, [r7, #8]
 800d2dc:	6978      	ldr	r0, [r7, #20]
 800d2de:	f7ff ffb3 	bl	800d248 <NVIC_EncodePriority>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d2e8:	4611      	mov	r1, r2
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7ff ff82 	bl	800d1f4 <__NVIC_SetPriority>
}
 800d2f0:	bf00      	nop
 800d2f2:	3718      	adds	r7, #24
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d306:	4618      	mov	r0, r3
 800d308:	f7ff ff32 	bl	800d170 <__NVIC_EnableIRQ>
}
 800d30c:	bf00      	nop
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	4603      	mov	r3, r0
 800d31c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800d31e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff ff42 	bl	800d1ac <__NVIC_DisableIRQ>
}
 800d328:	bf00      	nop
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800d330:	b480      	push	{r7}
 800d332:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800d334:	f3bf 8f5f 	dmb	sy
}
 800d338:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800d33a:	4b07      	ldr	r3, [pc, #28]	; (800d358 <HAL_MPU_Disable+0x28>)
 800d33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33e:	4a06      	ldr	r2, [pc, #24]	; (800d358 <HAL_MPU_Disable+0x28>)
 800d340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d344:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800d346:	4b05      	ldr	r3, [pc, #20]	; (800d35c <HAL_MPU_Disable+0x2c>)
 800d348:	2200      	movs	r2, #0
 800d34a:	605a      	str	r2, [r3, #4]
}
 800d34c:	bf00      	nop
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	e000ed00 	.word	0xe000ed00
 800d35c:	e000ed90 	.word	0xe000ed90

0800d360 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800d368:	4a0b      	ldr	r2, [pc, #44]	; (800d398 <HAL_MPU_Enable+0x38>)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f043 0301 	orr.w	r3, r3, #1
 800d370:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800d372:	4b0a      	ldr	r3, [pc, #40]	; (800d39c <HAL_MPU_Enable+0x3c>)
 800d374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d376:	4a09      	ldr	r2, [pc, #36]	; (800d39c <HAL_MPU_Enable+0x3c>)
 800d378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d37c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800d37e:	f3bf 8f4f 	dsb	sy
}
 800d382:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d384:	f3bf 8f6f 	isb	sy
}
 800d388:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800d38a:	bf00      	nop
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr
 800d396:	bf00      	nop
 800d398:	e000ed90 	.word	0xe000ed90
 800d39c:	e000ed00 	.word	0xe000ed00

0800d3a0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	785a      	ldrb	r2, [r3, #1]
 800d3ac:	4b1d      	ldr	r3, [pc, #116]	; (800d424 <HAL_MPU_ConfigRegion+0x84>)
 800d3ae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d029      	beq.n	800d40c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800d3b8:	4a1a      	ldr	r2, [pc, #104]	; (800d424 <HAL_MPU_ConfigRegion+0x84>)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	7b1b      	ldrb	r3, [r3, #12]
 800d3c4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	7adb      	ldrb	r3, [r3, #11]
 800d3ca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d3cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	7a9b      	ldrb	r3, [r3, #10]
 800d3d2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d3d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	7b5b      	ldrb	r3, [r3, #13]
 800d3da:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800d3dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	7b9b      	ldrb	r3, [r3, #14]
 800d3e2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800d3e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	7bdb      	ldrb	r3, [r3, #15]
 800d3ea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800d3ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	7a5b      	ldrb	r3, [r3, #9]
 800d3f2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800d3f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	7a1b      	ldrb	r3, [r3, #8]
 800d3fa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800d3fc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	7812      	ldrb	r2, [r2, #0]
 800d402:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d404:	4a07      	ldr	r2, [pc, #28]	; (800d424 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d406:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d408:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800d40a:	e005      	b.n	800d418 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800d40c:	4b05      	ldr	r3, [pc, #20]	; (800d424 <HAL_MPU_ConfigRegion+0x84>)
 800d40e:	2200      	movs	r2, #0
 800d410:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800d412:	4b04      	ldr	r3, [pc, #16]	; (800d424 <HAL_MPU_ConfigRegion+0x84>)
 800d414:	2200      	movs	r2, #0
 800d416:	611a      	str	r2, [r3, #16]
}
 800d418:	bf00      	nop
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr
 800d424:	e000ed90 	.word	0xe000ed90

0800d428 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d101      	bne.n	800d43a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800d436:	2301      	movs	r3, #1
 800d438:	e054      	b.n	800d4e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	7f5b      	ldrb	r3, [r3, #29]
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	2b00      	cmp	r3, #0
 800d442:	d105      	bne.n	800d450 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f7f3 fc88 	bl	8000d60 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2202      	movs	r2, #2
 800d454:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	791b      	ldrb	r3, [r3, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10c      	bne.n	800d478 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4a22      	ldr	r2, [pc, #136]	; (800d4ec <HAL_CRC_Init+0xc4>)
 800d464:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	689a      	ldr	r2, [r3, #8]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f022 0218 	bic.w	r2, r2, #24
 800d474:	609a      	str	r2, [r3, #8]
 800d476:	e00c      	b.n	800d492 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6899      	ldr	r1, [r3, #8]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	461a      	mov	r2, r3
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 f834 	bl	800d4f0 <HAL_CRCEx_Polynomial_Set>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	e028      	b.n	800d4e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	795b      	ldrb	r3, [r3, #5]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d105      	bne.n	800d4a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a2:	611a      	str	r2, [r3, #16]
 800d4a4:	e004      	b.n	800d4b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	6912      	ldr	r2, [r2, #16]
 800d4ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	695a      	ldr	r2, [r3, #20]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	430a      	orrs	r2, r1
 800d4c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	699a      	ldr	r2, [r3, #24]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	430a      	orrs	r2, r1
 800d4da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	04c11db7 	.word	0x04c11db7

0800d4f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800d500:	231f      	movs	r3, #31
 800d502:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d504:	bf00      	nop
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	1e5a      	subs	r2, r3, #1
 800d50a:	613a      	str	r2, [r7, #16]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d009      	beq.n	800d524 <HAL_CRCEx_Polynomial_Set+0x34>
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	f003 031f 	and.w	r3, r3, #31
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	fa22 f303 	lsr.w	r3, r2, r3
 800d51c:	f003 0301 	and.w	r3, r3, #1
 800d520:	2b00      	cmp	r3, #0
 800d522:	d0f0      	beq.n	800d506 <HAL_CRCEx_Polynomial_Set+0x16>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b18      	cmp	r3, #24
 800d528:	d846      	bhi.n	800d5b8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800d52a:	a201      	add	r2, pc, #4	; (adr r2, 800d530 <HAL_CRCEx_Polynomial_Set+0x40>)
 800d52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d530:	0800d5bf 	.word	0x0800d5bf
 800d534:	0800d5b9 	.word	0x0800d5b9
 800d538:	0800d5b9 	.word	0x0800d5b9
 800d53c:	0800d5b9 	.word	0x0800d5b9
 800d540:	0800d5b9 	.word	0x0800d5b9
 800d544:	0800d5b9 	.word	0x0800d5b9
 800d548:	0800d5b9 	.word	0x0800d5b9
 800d54c:	0800d5b9 	.word	0x0800d5b9
 800d550:	0800d5ad 	.word	0x0800d5ad
 800d554:	0800d5b9 	.word	0x0800d5b9
 800d558:	0800d5b9 	.word	0x0800d5b9
 800d55c:	0800d5b9 	.word	0x0800d5b9
 800d560:	0800d5b9 	.word	0x0800d5b9
 800d564:	0800d5b9 	.word	0x0800d5b9
 800d568:	0800d5b9 	.word	0x0800d5b9
 800d56c:	0800d5b9 	.word	0x0800d5b9
 800d570:	0800d5a1 	.word	0x0800d5a1
 800d574:	0800d5b9 	.word	0x0800d5b9
 800d578:	0800d5b9 	.word	0x0800d5b9
 800d57c:	0800d5b9 	.word	0x0800d5b9
 800d580:	0800d5b9 	.word	0x0800d5b9
 800d584:	0800d5b9 	.word	0x0800d5b9
 800d588:	0800d5b9 	.word	0x0800d5b9
 800d58c:	0800d5b9 	.word	0x0800d5b9
 800d590:	0800d595 	.word	0x0800d595
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	2b06      	cmp	r3, #6
 800d598:	d913      	bls.n	800d5c2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800d59a:	2301      	movs	r3, #1
 800d59c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d59e:	e010      	b.n	800d5c2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	2b07      	cmp	r3, #7
 800d5a4:	d90f      	bls.n	800d5c6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d5aa:	e00c      	b.n	800d5c6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	2b0f      	cmp	r3, #15
 800d5b0:	d90b      	bls.n	800d5ca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d5b6:	e008      	b.n	800d5ca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	75fb      	strb	r3, [r7, #23]
      break;
 800d5bc:	e006      	b.n	800d5cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d5be:	bf00      	nop
 800d5c0:	e004      	b.n	800d5cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d5c2:	bf00      	nop
 800d5c4:	e002      	b.n	800d5cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d5c6:	bf00      	nop
 800d5c8:	e000      	b.n	800d5cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d5ca:	bf00      	nop
  }
  if (status == HAL_OK)
 800d5cc:	7dfb      	ldrb	r3, [r7, #23]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10d      	bne.n	800d5ee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	f023 0118 	bic.w	r1, r3, #24
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	430a      	orrs	r2, r1
 800d5ec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800d5ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	371c      	adds	r7, #28
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d101      	bne.n	800d60e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e04f      	b.n	800d6ae <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d106      	bne.n	800d628 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f7f3 fbbe 	bl	8000da4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2202      	movs	r2, #2
 800d62c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	4b20      	ldr	r3, [pc, #128]	; (800d6b8 <HAL_DMA2D_Init+0xbc>)
 800d638:	4013      	ands	r3, r2
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	6851      	ldr	r1, [r2, #4]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	69d2      	ldr	r2, [r2, #28]
 800d642:	4311      	orrs	r1, r2
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	6812      	ldr	r2, [r2, #0]
 800d648:	430b      	orrs	r3, r1
 800d64a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d652:	4b1a      	ldr	r3, [pc, #104]	; (800d6bc <HAL_DMA2D_Init+0xc0>)
 800d654:	4013      	ands	r3, r2
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	6891      	ldr	r1, [r2, #8]
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	6992      	ldr	r2, [r2, #24]
 800d65e:	4311      	orrs	r1, r2
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	6812      	ldr	r2, [r2, #0]
 800d664:	430b      	orrs	r3, r1
 800d666:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d66e:	4b14      	ldr	r3, [pc, #80]	; (800d6c0 <HAL_DMA2D_Init+0xc4>)
 800d670:	4013      	ands	r3, r2
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	68d1      	ldr	r1, [r2, #12]
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	6812      	ldr	r2, [r2, #0]
 800d67a:	430b      	orrs	r3, r1
 800d67c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d684:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	691b      	ldr	r3, [r3, #16]
 800d68c:	051a      	lsls	r2, r3, #20
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	695b      	ldr	r3, [r3, #20]
 800d692:	055b      	lsls	r3, r3, #21
 800d694:	431a      	orrs	r2, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	430a      	orrs	r2, r1
 800d69c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	fff8ffbf 	.word	0xfff8ffbf
 800d6bc:	fffffef8 	.word	0xfffffef8
 800d6c0:	ffff0000 	.word	0xffff0000

0800d6c4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f003 0301 	and.w	r3, r3, #1
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d026      	beq.n	800d734 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d021      	beq.n	800d734 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d6fe:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d704:	f043 0201 	orr.w	r2, r3, #1
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2201      	movs	r2, #1
 800d712:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2204      	movs	r2, #4
 800d718:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2200      	movs	r2, #0
 800d720:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d003      	beq.n	800d734 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f003 0320 	and.w	r3, r3, #32
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d026      	beq.n	800d78c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d744:	2b00      	cmp	r3, #0
 800d746:	d021      	beq.n	800d78c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d756:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2220      	movs	r2, #32
 800d75e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d764:	f043 0202 	orr.w	r2, r3, #2
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2204      	movs	r2, #4
 800d770:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2200      	movs	r2, #0
 800d778:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d780:	2b00      	cmp	r3, #0
 800d782:	d003      	beq.n	800d78c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f003 0308 	and.w	r3, r3, #8
 800d792:	2b00      	cmp	r3, #0
 800d794:	d026      	beq.n	800d7e4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d021      	beq.n	800d7e4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d7ae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2208      	movs	r2, #8
 800d7b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7bc:	f043 0204 	orr.w	r2, r3, #4
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2204      	movs	r2, #4
 800d7c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d003      	beq.n	800d7e4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f003 0304 	and.w	r3, r3, #4
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d013      	beq.n	800d816 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d00e      	beq.n	800d816 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d806:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2204      	movs	r2, #4
 800d80e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 f853 	bl	800d8bc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f003 0302 	and.w	r3, r3, #2
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d024      	beq.n	800d86a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d826:	2b00      	cmp	r3, #0
 800d828:	d01f      	beq.n	800d86a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d838:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2202      	movs	r2, #2
 800d840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6a1b      	ldr	r3, [r3, #32]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d003      	beq.n	800d86a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6a1b      	ldr	r3, [r3, #32]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f003 0310 	and.w	r3, r3, #16
 800d870:	2b00      	cmp	r3, #0
 800d872:	d01f      	beq.n	800d8b4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d01a      	beq.n	800d8b4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d88c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2210      	movs	r2, #16
 800d894:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 f80e 	bl	800d8d0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d8b4:	bf00      	nop
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d8c4:	bf00      	nop
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d8d8:	bf00      	nop
 800d8da:	370c      	adds	r7, #12
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b089      	sub	sp, #36	; 0x24
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d8f2:	4b89      	ldr	r3, [pc, #548]	; (800db18 <HAL_GPIO_Init+0x234>)
 800d8f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d8f6:	e194      	b.n	800dc22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	2101      	movs	r1, #1
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	fa01 f303 	lsl.w	r3, r1, r3
 800d904:	4013      	ands	r3, r2
 800d906:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f000 8186 	beq.w	800dc1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	f003 0303 	and.w	r3, r3, #3
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d005      	beq.n	800d928 <HAL_GPIO_Init+0x44>
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	f003 0303 	and.w	r3, r3, #3
 800d924:	2b02      	cmp	r3, #2
 800d926:	d130      	bne.n	800d98a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	2203      	movs	r2, #3
 800d934:	fa02 f303 	lsl.w	r3, r2, r3
 800d938:	43db      	mvns	r3, r3
 800d93a:	69ba      	ldr	r2, [r7, #24]
 800d93c:	4013      	ands	r3, r2
 800d93e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	68da      	ldr	r2, [r3, #12]
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	005b      	lsls	r3, r3, #1
 800d948:	fa02 f303 	lsl.w	r3, r2, r3
 800d94c:	69ba      	ldr	r2, [r7, #24]
 800d94e:	4313      	orrs	r3, r2
 800d950:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	69ba      	ldr	r2, [r7, #24]
 800d956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d95e:	2201      	movs	r2, #1
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	fa02 f303 	lsl.w	r3, r2, r3
 800d966:	43db      	mvns	r3, r3
 800d968:	69ba      	ldr	r2, [r7, #24]
 800d96a:	4013      	ands	r3, r2
 800d96c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	091b      	lsrs	r3, r3, #4
 800d974:	f003 0201 	and.w	r2, r3, #1
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	fa02 f303 	lsl.w	r3, r2, r3
 800d97e:	69ba      	ldr	r2, [r7, #24]
 800d980:	4313      	orrs	r3, r2
 800d982:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	69ba      	ldr	r2, [r7, #24]
 800d988:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	f003 0303 	and.w	r3, r3, #3
 800d992:	2b03      	cmp	r3, #3
 800d994:	d017      	beq.n	800d9c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	005b      	lsls	r3, r3, #1
 800d9a0:	2203      	movs	r2, #3
 800d9a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a6:	43db      	mvns	r3, r3
 800d9a8:	69ba      	ldr	r2, [r7, #24]
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	689a      	ldr	r2, [r3, #8]
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	005b      	lsls	r3, r3, #1
 800d9b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ba:	69ba      	ldr	r2, [r7, #24]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	69ba      	ldr	r2, [r7, #24]
 800d9c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	f003 0303 	and.w	r3, r3, #3
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	d123      	bne.n	800da1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	08da      	lsrs	r2, r3, #3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	3208      	adds	r2, #8
 800d9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	f003 0307 	and.w	r3, r3, #7
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	220f      	movs	r2, #15
 800d9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ee:	43db      	mvns	r3, r3
 800d9f0:	69ba      	ldr	r2, [r7, #24]
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	691a      	ldr	r2, [r3, #16]
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	f003 0307 	and.w	r3, r3, #7
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	fa02 f303 	lsl.w	r3, r2, r3
 800da06:	69ba      	ldr	r2, [r7, #24]
 800da08:	4313      	orrs	r3, r2
 800da0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	08da      	lsrs	r2, r3, #3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	3208      	adds	r2, #8
 800da14:	69b9      	ldr	r1, [r7, #24]
 800da16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	005b      	lsls	r3, r3, #1
 800da24:	2203      	movs	r2, #3
 800da26:	fa02 f303 	lsl.w	r3, r2, r3
 800da2a:	43db      	mvns	r3, r3
 800da2c:	69ba      	ldr	r2, [r7, #24]
 800da2e:	4013      	ands	r3, r2
 800da30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	f003 0203 	and.w	r2, r3, #3
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	fa02 f303 	lsl.w	r3, r2, r3
 800da42:	69ba      	ldr	r2, [r7, #24]
 800da44:	4313      	orrs	r3, r2
 800da46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	69ba      	ldr	r2, [r7, #24]
 800da4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800da56:	2b00      	cmp	r3, #0
 800da58:	f000 80e0 	beq.w	800dc1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da5c:	4b2f      	ldr	r3, [pc, #188]	; (800db1c <HAL_GPIO_Init+0x238>)
 800da5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da62:	4a2e      	ldr	r2, [pc, #184]	; (800db1c <HAL_GPIO_Init+0x238>)
 800da64:	f043 0302 	orr.w	r3, r3, #2
 800da68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800da6c:	4b2b      	ldr	r3, [pc, #172]	; (800db1c <HAL_GPIO_Init+0x238>)
 800da6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da72:	f003 0302 	and.w	r3, r3, #2
 800da76:	60fb      	str	r3, [r7, #12]
 800da78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800da7a:	4a29      	ldr	r2, [pc, #164]	; (800db20 <HAL_GPIO_Init+0x23c>)
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	089b      	lsrs	r3, r3, #2
 800da80:	3302      	adds	r3, #2
 800da82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	f003 0303 	and.w	r3, r3, #3
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	220f      	movs	r2, #15
 800da92:	fa02 f303 	lsl.w	r3, r2, r3
 800da96:	43db      	mvns	r3, r3
 800da98:	69ba      	ldr	r2, [r7, #24]
 800da9a:	4013      	ands	r3, r2
 800da9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a20      	ldr	r2, [pc, #128]	; (800db24 <HAL_GPIO_Init+0x240>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d052      	beq.n	800db4c <HAL_GPIO_Init+0x268>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a1f      	ldr	r2, [pc, #124]	; (800db28 <HAL_GPIO_Init+0x244>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d031      	beq.n	800db12 <HAL_GPIO_Init+0x22e>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4a1e      	ldr	r2, [pc, #120]	; (800db2c <HAL_GPIO_Init+0x248>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d02b      	beq.n	800db0e <HAL_GPIO_Init+0x22a>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4a1d      	ldr	r2, [pc, #116]	; (800db30 <HAL_GPIO_Init+0x24c>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d025      	beq.n	800db0a <HAL_GPIO_Init+0x226>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4a1c      	ldr	r2, [pc, #112]	; (800db34 <HAL_GPIO_Init+0x250>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d01f      	beq.n	800db06 <HAL_GPIO_Init+0x222>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a1b      	ldr	r2, [pc, #108]	; (800db38 <HAL_GPIO_Init+0x254>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d019      	beq.n	800db02 <HAL_GPIO_Init+0x21e>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a1a      	ldr	r2, [pc, #104]	; (800db3c <HAL_GPIO_Init+0x258>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d013      	beq.n	800dafe <HAL_GPIO_Init+0x21a>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4a19      	ldr	r2, [pc, #100]	; (800db40 <HAL_GPIO_Init+0x25c>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d00d      	beq.n	800dafa <HAL_GPIO_Init+0x216>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a18      	ldr	r2, [pc, #96]	; (800db44 <HAL_GPIO_Init+0x260>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d007      	beq.n	800daf6 <HAL_GPIO_Init+0x212>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a17      	ldr	r2, [pc, #92]	; (800db48 <HAL_GPIO_Init+0x264>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d101      	bne.n	800daf2 <HAL_GPIO_Init+0x20e>
 800daee:	2309      	movs	r3, #9
 800daf0:	e02d      	b.n	800db4e <HAL_GPIO_Init+0x26a>
 800daf2:	230a      	movs	r3, #10
 800daf4:	e02b      	b.n	800db4e <HAL_GPIO_Init+0x26a>
 800daf6:	2308      	movs	r3, #8
 800daf8:	e029      	b.n	800db4e <HAL_GPIO_Init+0x26a>
 800dafa:	2307      	movs	r3, #7
 800dafc:	e027      	b.n	800db4e <HAL_GPIO_Init+0x26a>
 800dafe:	2306      	movs	r3, #6
 800db00:	e025      	b.n	800db4e <HAL_GPIO_Init+0x26a>
 800db02:	2305      	movs	r3, #5
 800db04:	e023      	b.n	800db4e <HAL_GPIO_Init+0x26a>
 800db06:	2304      	movs	r3, #4
 800db08:	e021      	b.n	800db4e <HAL_GPIO_Init+0x26a>
 800db0a:	2303      	movs	r3, #3
 800db0c:	e01f      	b.n	800db4e <HAL_GPIO_Init+0x26a>
 800db0e:	2302      	movs	r3, #2
 800db10:	e01d      	b.n	800db4e <HAL_GPIO_Init+0x26a>
 800db12:	2301      	movs	r3, #1
 800db14:	e01b      	b.n	800db4e <HAL_GPIO_Init+0x26a>
 800db16:	bf00      	nop
 800db18:	58000080 	.word	0x58000080
 800db1c:	58024400 	.word	0x58024400
 800db20:	58000400 	.word	0x58000400
 800db24:	58020000 	.word	0x58020000
 800db28:	58020400 	.word	0x58020400
 800db2c:	58020800 	.word	0x58020800
 800db30:	58020c00 	.word	0x58020c00
 800db34:	58021000 	.word	0x58021000
 800db38:	58021400 	.word	0x58021400
 800db3c:	58021800 	.word	0x58021800
 800db40:	58021c00 	.word	0x58021c00
 800db44:	58022000 	.word	0x58022000
 800db48:	58022400 	.word	0x58022400
 800db4c:	2300      	movs	r3, #0
 800db4e:	69fa      	ldr	r2, [r7, #28]
 800db50:	f002 0203 	and.w	r2, r2, #3
 800db54:	0092      	lsls	r2, r2, #2
 800db56:	4093      	lsls	r3, r2
 800db58:	69ba      	ldr	r2, [r7, #24]
 800db5a:	4313      	orrs	r3, r2
 800db5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800db5e:	4938      	ldr	r1, [pc, #224]	; (800dc40 <HAL_GPIO_Init+0x35c>)
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	089b      	lsrs	r3, r3, #2
 800db64:	3302      	adds	r3, #2
 800db66:	69ba      	ldr	r2, [r7, #24]
 800db68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800db6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	43db      	mvns	r3, r3
 800db78:	69ba      	ldr	r2, [r7, #24]
 800db7a:	4013      	ands	r3, r2
 800db7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db86:	2b00      	cmp	r3, #0
 800db88:	d003      	beq.n	800db92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800db8a:	69ba      	ldr	r2, [r7, #24]
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	4313      	orrs	r3, r2
 800db90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800db92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800db9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	43db      	mvns	r3, r3
 800dba6:	69ba      	ldr	r2, [r7, #24]
 800dba8:	4013      	ands	r3, r2
 800dbaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d003      	beq.n	800dbc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800dbb8:	69ba      	ldr	r2, [r7, #24]
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800dbc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	43db      	mvns	r3, r3
 800dbd2:	69ba      	ldr	r2, [r7, #24]
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d003      	beq.n	800dbec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800dbe4:	69ba      	ldr	r2, [r7, #24]
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	69ba      	ldr	r2, [r7, #24]
 800dbf0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	43db      	mvns	r3, r3
 800dbfc:	69ba      	ldr	r2, [r7, #24]
 800dbfe:	4013      	ands	r3, r2
 800dc00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d003      	beq.n	800dc16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800dc0e:	69ba      	ldr	r2, [r7, #24]
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	4313      	orrs	r3, r2
 800dc14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	69ba      	ldr	r2, [r7, #24]
 800dc1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	fa22 f303 	lsr.w	r3, r2, r3
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	f47f ae63 	bne.w	800d8f8 <HAL_GPIO_Init+0x14>
  }
}
 800dc32:	bf00      	nop
 800dc34:	bf00      	nop
 800dc36:	3724      	adds	r7, #36	; 0x24
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	58000400 	.word	0x58000400

0800dc44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b087      	sub	sp, #28
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800dc52:	4b75      	ldr	r3, [pc, #468]	; (800de28 <HAL_GPIO_DeInit+0x1e4>)
 800dc54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800dc56:	e0d9      	b.n	800de0c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800dc58:	2201      	movs	r2, #1
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc60:	683a      	ldr	r2, [r7, #0]
 800dc62:	4013      	ands	r3, r2
 800dc64:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f000 80cc 	beq.w	800de06 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800dc6e:	4a6f      	ldr	r2, [pc, #444]	; (800de2c <HAL_GPIO_DeInit+0x1e8>)
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	089b      	lsrs	r3, r3, #2
 800dc74:	3302      	adds	r3, #2
 800dc76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc7a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	f003 0303 	and.w	r3, r3, #3
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	220f      	movs	r2, #15
 800dc86:	fa02 f303 	lsl.w	r3, r2, r3
 800dc8a:	68ba      	ldr	r2, [r7, #8]
 800dc8c:	4013      	ands	r3, r2
 800dc8e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4a67      	ldr	r2, [pc, #412]	; (800de30 <HAL_GPIO_DeInit+0x1ec>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d037      	beq.n	800dd08 <HAL_GPIO_DeInit+0xc4>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	4a66      	ldr	r2, [pc, #408]	; (800de34 <HAL_GPIO_DeInit+0x1f0>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d031      	beq.n	800dd04 <HAL_GPIO_DeInit+0xc0>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4a65      	ldr	r2, [pc, #404]	; (800de38 <HAL_GPIO_DeInit+0x1f4>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d02b      	beq.n	800dd00 <HAL_GPIO_DeInit+0xbc>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4a64      	ldr	r2, [pc, #400]	; (800de3c <HAL_GPIO_DeInit+0x1f8>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d025      	beq.n	800dcfc <HAL_GPIO_DeInit+0xb8>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	4a63      	ldr	r2, [pc, #396]	; (800de40 <HAL_GPIO_DeInit+0x1fc>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d01f      	beq.n	800dcf8 <HAL_GPIO_DeInit+0xb4>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	4a62      	ldr	r2, [pc, #392]	; (800de44 <HAL_GPIO_DeInit+0x200>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d019      	beq.n	800dcf4 <HAL_GPIO_DeInit+0xb0>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	4a61      	ldr	r2, [pc, #388]	; (800de48 <HAL_GPIO_DeInit+0x204>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d013      	beq.n	800dcf0 <HAL_GPIO_DeInit+0xac>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4a60      	ldr	r2, [pc, #384]	; (800de4c <HAL_GPIO_DeInit+0x208>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d00d      	beq.n	800dcec <HAL_GPIO_DeInit+0xa8>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4a5f      	ldr	r2, [pc, #380]	; (800de50 <HAL_GPIO_DeInit+0x20c>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d007      	beq.n	800dce8 <HAL_GPIO_DeInit+0xa4>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a5e      	ldr	r2, [pc, #376]	; (800de54 <HAL_GPIO_DeInit+0x210>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d101      	bne.n	800dce4 <HAL_GPIO_DeInit+0xa0>
 800dce0:	2309      	movs	r3, #9
 800dce2:	e012      	b.n	800dd0a <HAL_GPIO_DeInit+0xc6>
 800dce4:	230a      	movs	r3, #10
 800dce6:	e010      	b.n	800dd0a <HAL_GPIO_DeInit+0xc6>
 800dce8:	2308      	movs	r3, #8
 800dcea:	e00e      	b.n	800dd0a <HAL_GPIO_DeInit+0xc6>
 800dcec:	2307      	movs	r3, #7
 800dcee:	e00c      	b.n	800dd0a <HAL_GPIO_DeInit+0xc6>
 800dcf0:	2306      	movs	r3, #6
 800dcf2:	e00a      	b.n	800dd0a <HAL_GPIO_DeInit+0xc6>
 800dcf4:	2305      	movs	r3, #5
 800dcf6:	e008      	b.n	800dd0a <HAL_GPIO_DeInit+0xc6>
 800dcf8:	2304      	movs	r3, #4
 800dcfa:	e006      	b.n	800dd0a <HAL_GPIO_DeInit+0xc6>
 800dcfc:	2303      	movs	r3, #3
 800dcfe:	e004      	b.n	800dd0a <HAL_GPIO_DeInit+0xc6>
 800dd00:	2302      	movs	r3, #2
 800dd02:	e002      	b.n	800dd0a <HAL_GPIO_DeInit+0xc6>
 800dd04:	2301      	movs	r3, #1
 800dd06:	e000      	b.n	800dd0a <HAL_GPIO_DeInit+0xc6>
 800dd08:	2300      	movs	r3, #0
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	f002 0203 	and.w	r2, r2, #3
 800dd10:	0092      	lsls	r2, r2, #2
 800dd12:	4093      	lsls	r3, r2
 800dd14:	68ba      	ldr	r2, [r7, #8]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d136      	bne.n	800dd88 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	43db      	mvns	r3, r3
 800dd22:	401a      	ands	r2, r3
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	685a      	ldr	r2, [r3, #4]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	43db      	mvns	r3, r3
 800dd30:	401a      	ands	r2, r3
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800dd36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd3a:	685a      	ldr	r2, [r3, #4]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	43db      	mvns	r3, r3
 800dd40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd44:	4013      	ands	r3, r2
 800dd46:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800dd48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	43db      	mvns	r3, r3
 800dd52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd56:	4013      	ands	r3, r2
 800dd58:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	f003 0303 	and.w	r3, r3, #3
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	220f      	movs	r2, #15
 800dd64:	fa02 f303 	lsl.w	r3, r2, r3
 800dd68:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800dd6a:	4a30      	ldr	r2, [pc, #192]	; (800de2c <HAL_GPIO_DeInit+0x1e8>)
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	089b      	lsrs	r3, r3, #2
 800dd70:	3302      	adds	r3, #2
 800dd72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	43da      	mvns	r2, r3
 800dd7a:	482c      	ldr	r0, [pc, #176]	; (800de2c <HAL_GPIO_DeInit+0x1e8>)
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	089b      	lsrs	r3, r3, #2
 800dd80:	400a      	ands	r2, r1
 800dd82:	3302      	adds	r3, #2
 800dd84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	005b      	lsls	r3, r3, #1
 800dd90:	2103      	movs	r1, #3
 800dd92:	fa01 f303 	lsl.w	r3, r1, r3
 800dd96:	431a      	orrs	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	08da      	lsrs	r2, r3, #3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	3208      	adds	r2, #8
 800dda4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	f003 0307 	and.w	r3, r3, #7
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	220f      	movs	r2, #15
 800ddb2:	fa02 f303 	lsl.w	r3, r2, r3
 800ddb6:	43db      	mvns	r3, r3
 800ddb8:	697a      	ldr	r2, [r7, #20]
 800ddba:	08d2      	lsrs	r2, r2, #3
 800ddbc:	4019      	ands	r1, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	3208      	adds	r2, #8
 800ddc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	68da      	ldr	r2, [r3, #12]
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	005b      	lsls	r3, r3, #1
 800ddce:	2103      	movs	r1, #3
 800ddd0:	fa01 f303 	lsl.w	r3, r1, r3
 800ddd4:	43db      	mvns	r3, r3
 800ddd6:	401a      	ands	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	2101      	movs	r1, #1
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	fa01 f303 	lsl.w	r3, r1, r3
 800dde8:	43db      	mvns	r3, r3
 800ddea:	401a      	ands	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	689a      	ldr	r2, [r3, #8]
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	005b      	lsls	r3, r3, #1
 800ddf8:	2103      	movs	r1, #3
 800ddfa:	fa01 f303 	lsl.w	r3, r1, r3
 800ddfe:	43db      	mvns	r3, r3
 800de00:	401a      	ands	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	609a      	str	r2, [r3, #8]
    }

    position++;
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	3301      	adds	r3, #1
 800de0a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800de0c:	683a      	ldr	r2, [r7, #0]
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	fa22 f303 	lsr.w	r3, r2, r3
 800de14:	2b00      	cmp	r3, #0
 800de16:	f47f af1f 	bne.w	800dc58 <HAL_GPIO_DeInit+0x14>
  }
}
 800de1a:	bf00      	nop
 800de1c:	bf00      	nop
 800de1e:	371c      	adds	r7, #28
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	58000080 	.word	0x58000080
 800de2c:	58000400 	.word	0x58000400
 800de30:	58020000 	.word	0x58020000
 800de34:	58020400 	.word	0x58020400
 800de38:	58020800 	.word	0x58020800
 800de3c:	58020c00 	.word	0x58020c00
 800de40:	58021000 	.word	0x58021000
 800de44:	58021400 	.word	0x58021400
 800de48:	58021800 	.word	0x58021800
 800de4c:	58021c00 	.word	0x58021c00
 800de50:	58022000 	.word	0x58022000
 800de54:	58022400 	.word	0x58022400

0800de58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	460b      	mov	r3, r1
 800de62:	807b      	strh	r3, [r7, #2]
 800de64:	4613      	mov	r3, r2
 800de66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800de68:	787b      	ldrb	r3, [r7, #1]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d003      	beq.n	800de76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800de6e:	887a      	ldrh	r2, [r7, #2]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800de74:	e003      	b.n	800de7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800de76:	887b      	ldrh	r3, [r7, #2]
 800de78:	041a      	lsls	r2, r3, #16
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	619a      	str	r2, [r3, #24]
}
 800de7e:	bf00      	nop
 800de80:	370c      	adds	r7, #12
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr

0800de8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800de8a:	b480      	push	{r7}
 800de8c:	b085      	sub	sp, #20
 800de8e:	af00      	add	r7, sp, #0
 800de90:	6078      	str	r0, [r7, #4]
 800de92:	460b      	mov	r3, r1
 800de94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800de9c:	887a      	ldrh	r2, [r7, #2]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	4013      	ands	r3, r2
 800dea2:	041a      	lsls	r2, r3, #16
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	43d9      	mvns	r1, r3
 800dea8:	887b      	ldrh	r3, [r7, #2]
 800deaa:	400b      	ands	r3, r1
 800deac:	431a      	orrs	r2, r3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	619a      	str	r2, [r3, #24]
}
 800deb2:	bf00      	nop
 800deb4:	3714      	adds	r7, #20
 800deb6:	46bd      	mov	sp, r7
 800deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debc:	4770      	bx	lr
	...

0800dec0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800dec8:	4a08      	ldr	r2, [pc, #32]	; (800deec <HAL_HSEM_FastTake+0x2c>)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	3320      	adds	r3, #32
 800dece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ded2:	4a07      	ldr	r2, [pc, #28]	; (800def0 <HAL_HSEM_FastTake+0x30>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d101      	bne.n	800dedc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800ded8:	2300      	movs	r3, #0
 800deda:	e000      	b.n	800dede <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800dedc:	2301      	movs	r3, #1
}
 800dede:	4618      	mov	r0, r3
 800dee0:	370c      	adds	r7, #12
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr
 800deea:	bf00      	nop
 800deec:	58026400 	.word	0x58026400
 800def0:	80000300 	.word	0x80000300

0800def4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800defe:	4906      	ldr	r1, [pc, #24]	; (800df18 <HAL_HSEM_Release+0x24>)
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800df0c:	bf00      	nop
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr
 800df18:	58026400 	.word	0x58026400

0800df1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d101      	bne.n	800df2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800df2a:	2301      	movs	r3, #1
 800df2c:	e07f      	b.n	800e02e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df34:	b2db      	uxtb	r3, r3
 800df36:	2b00      	cmp	r3, #0
 800df38:	d106      	bne.n	800df48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 f8a9 	bl	800e09a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2224      	movs	r2, #36	; 0x24
 800df4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f022 0201 	bic.w	r2, r2, #1
 800df5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	685a      	ldr	r2, [r3, #4]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800df6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	689a      	ldr	r2, [r3, #8]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800df7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	2b01      	cmp	r3, #1
 800df84:	d107      	bne.n	800df96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	689a      	ldr	r2, [r3, #8]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800df92:	609a      	str	r2, [r3, #8]
 800df94:	e006      	b.n	800dfa4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	689a      	ldr	r2, [r3, #8]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800dfa2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	2b02      	cmp	r3, #2
 800dfaa:	d104      	bne.n	800dfb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6859      	ldr	r1, [r3, #4]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	4b1d      	ldr	r3, [pc, #116]	; (800e038 <HAL_I2C_Init+0x11c>)
 800dfc2:	430b      	orrs	r3, r1
 800dfc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	68da      	ldr	r2, [r3, #12]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dfd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	691a      	ldr	r2, [r3, #16]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	695b      	ldr	r3, [r3, #20]
 800dfde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	699b      	ldr	r3, [r3, #24]
 800dfe6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	430a      	orrs	r2, r1
 800dfee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	69d9      	ldr	r1, [r3, #28]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6a1a      	ldr	r2, [r3, #32]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	430a      	orrs	r2, r1
 800dffe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f042 0201 	orr.w	r2, r2, #1
 800e00e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2220      	movs	r2, #32
 800e01a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800e02c:	2300      	movs	r3, #0
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3708      	adds	r7, #8
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	02008000 	.word	0x02008000

0800e03c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d101      	bne.n	800e04e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800e04a:	2301      	movs	r3, #1
 800e04c:	e021      	b.n	800e092 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2224      	movs	r2, #36	; 0x24
 800e052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f022 0201 	bic.w	r2, r2, #1
 800e064:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 f821 	bl	800e0ae <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2200      	movs	r2, #0
 800e070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e090:	2300      	movs	r3, #0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800e09a:	b480      	push	{r7}
 800e09c:	b083      	sub	sp, #12
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800e0a2:	bf00      	nop
 800e0a4:	370c      	adds	r7, #12
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr

0800e0ae <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800e0ae:	b480      	push	{r7}
 800e0b0:	b083      	sub	sp, #12
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800e0b6:	bf00      	nop
 800e0b8:	370c      	adds	r7, #12
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
	...

0800e0c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b088      	sub	sp, #32
 800e0c8:	af02      	add	r7, sp, #8
 800e0ca:	60f8      	str	r0, [r7, #12]
 800e0cc:	4608      	mov	r0, r1
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	817b      	strh	r3, [r7, #10]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	813b      	strh	r3, [r7, #8]
 800e0da:	4613      	mov	r3, r2
 800e0dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	2b20      	cmp	r3, #32
 800e0e8:	f040 80f9 	bne.w	800e2de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0ec:	6a3b      	ldr	r3, [r7, #32]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d002      	beq.n	800e0f8 <HAL_I2C_Mem_Write+0x34>
 800e0f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d105      	bne.n	800e104 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e100:	2301      	movs	r3, #1
 800e102:	e0ed      	b.n	800e2e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d101      	bne.n	800e112 <HAL_I2C_Mem_Write+0x4e>
 800e10e:	2302      	movs	r3, #2
 800e110:	e0e6      	b.n	800e2e0 <HAL_I2C_Mem_Write+0x21c>
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2201      	movs	r2, #1
 800e116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e11a:	f7fe ffdf 	bl	800d0dc <HAL_GetTick>
 800e11e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	9300      	str	r3, [sp, #0]
 800e124:	2319      	movs	r3, #25
 800e126:	2201      	movs	r2, #1
 800e128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f000 fadd 	bl	800e6ec <I2C_WaitOnFlagUntilTimeout>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e138:	2301      	movs	r3, #1
 800e13a:	e0d1      	b.n	800e2e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2221      	movs	r2, #33	; 0x21
 800e140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2240      	movs	r2, #64	; 0x40
 800e148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2200      	movs	r2, #0
 800e150:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	6a3a      	ldr	r2, [r7, #32]
 800e156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e15c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2200      	movs	r2, #0
 800e162:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e164:	88f8      	ldrh	r0, [r7, #6]
 800e166:	893a      	ldrh	r2, [r7, #8]
 800e168:	8979      	ldrh	r1, [r7, #10]
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	9301      	str	r3, [sp, #4]
 800e16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	4603      	mov	r3, r0
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f000 f9ed 	bl	800e554 <I2C_RequestMemoryWrite>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d005      	beq.n	800e18c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2200      	movs	r2, #0
 800e184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e188:	2301      	movs	r3, #1
 800e18a:	e0a9      	b.n	800e2e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e190:	b29b      	uxth	r3, r3
 800e192:	2bff      	cmp	r3, #255	; 0xff
 800e194:	d90e      	bls.n	800e1b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	22ff      	movs	r2, #255	; 0xff
 800e19a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	8979      	ldrh	r1, [r7, #10]
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f000 fc45 	bl	800ea3c <I2C_TransferConfig>
 800e1b2:	e00f      	b.n	800e1d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	8979      	ldrh	r1, [r7, #10]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	9300      	str	r3, [sp, #0]
 800e1ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f000 fc34 	bl	800ea3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e1d4:	697a      	ldr	r2, [r7, #20]
 800e1d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f000 fac7 	bl	800e76c <I2C_WaitOnTXISFlagUntilTimeout>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d001      	beq.n	800e1e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e07b      	b.n	800e2e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ec:	781a      	ldrb	r2, [r3, #0]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f8:	1c5a      	adds	r2, r3, #1
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e202:	b29b      	uxth	r3, r3
 800e204:	3b01      	subs	r3, #1
 800e206:	b29a      	uxth	r2, r3
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e210:	3b01      	subs	r3, #1
 800e212:	b29a      	uxth	r2, r3
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d034      	beq.n	800e28c <HAL_I2C_Mem_Write+0x1c8>
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e226:	2b00      	cmp	r3, #0
 800e228:	d130      	bne.n	800e28c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e230:	2200      	movs	r2, #0
 800e232:	2180      	movs	r1, #128	; 0x80
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f000 fa59 	bl	800e6ec <I2C_WaitOnFlagUntilTimeout>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d001      	beq.n	800e244 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	e04d      	b.n	800e2e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e248:	b29b      	uxth	r3, r3
 800e24a:	2bff      	cmp	r3, #255	; 0xff
 800e24c:	d90e      	bls.n	800e26c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	22ff      	movs	r2, #255	; 0xff
 800e252:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	8979      	ldrh	r1, [r7, #10]
 800e25c:	2300      	movs	r3, #0
 800e25e:	9300      	str	r3, [sp, #0]
 800e260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f000 fbe9 	bl	800ea3c <I2C_TransferConfig>
 800e26a:	e00f      	b.n	800e28c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e270:	b29a      	uxth	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e27a:	b2da      	uxtb	r2, r3
 800e27c:	8979      	ldrh	r1, [r7, #10]
 800e27e:	2300      	movs	r3, #0
 800e280:	9300      	str	r3, [sp, #0]
 800e282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e286:	68f8      	ldr	r0, [r7, #12]
 800e288:	f000 fbd8 	bl	800ea3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e290:	b29b      	uxth	r3, r3
 800e292:	2b00      	cmp	r3, #0
 800e294:	d19e      	bne.n	800e1d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f000 faa6 	bl	800e7ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d001      	beq.n	800e2aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e01a      	b.n	800e2e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2220      	movs	r2, #32
 800e2b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	6859      	ldr	r1, [r3, #4]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	4b0a      	ldr	r3, [pc, #40]	; (800e2e8 <HAL_I2C_Mem_Write+0x224>)
 800e2be:	400b      	ands	r3, r1
 800e2c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2220      	movs	r2, #32
 800e2c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	e000      	b.n	800e2e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e2de:	2302      	movs	r3, #2
  }
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	fe00e800 	.word	0xfe00e800

0800e2ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b088      	sub	sp, #32
 800e2f0:	af02      	add	r7, sp, #8
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	4608      	mov	r0, r1
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	817b      	strh	r3, [r7, #10]
 800e2fe:	460b      	mov	r3, r1
 800e300:	813b      	strh	r3, [r7, #8]
 800e302:	4613      	mov	r3, r2
 800e304:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	2b20      	cmp	r3, #32
 800e310:	f040 80fd 	bne.w	800e50e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d002      	beq.n	800e320 <HAL_I2C_Mem_Read+0x34>
 800e31a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d105      	bne.n	800e32c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e326:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e328:	2301      	movs	r3, #1
 800e32a:	e0f1      	b.n	800e510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e332:	2b01      	cmp	r3, #1
 800e334:	d101      	bne.n	800e33a <HAL_I2C_Mem_Read+0x4e>
 800e336:	2302      	movs	r3, #2
 800e338:	e0ea      	b.n	800e510 <HAL_I2C_Mem_Read+0x224>
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2201      	movs	r2, #1
 800e33e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e342:	f7fe fecb 	bl	800d0dc <HAL_GetTick>
 800e346:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	2319      	movs	r3, #25
 800e34e:	2201      	movs	r2, #1
 800e350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f000 f9c9 	bl	800e6ec <I2C_WaitOnFlagUntilTimeout>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d001      	beq.n	800e364 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e360:	2301      	movs	r3, #1
 800e362:	e0d5      	b.n	800e510 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2222      	movs	r2, #34	; 0x22
 800e368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2240      	movs	r2, #64	; 0x40
 800e370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6a3a      	ldr	r2, [r7, #32]
 800e37e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2200      	movs	r2, #0
 800e38a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e38c:	88f8      	ldrh	r0, [r7, #6]
 800e38e:	893a      	ldrh	r2, [r7, #8]
 800e390:	8979      	ldrh	r1, [r7, #10]
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	9301      	str	r3, [sp, #4]
 800e396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	4603      	mov	r3, r0
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 f92d 	bl	800e5fc <I2C_RequestMemoryRead>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d005      	beq.n	800e3b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	e0ad      	b.n	800e510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	2bff      	cmp	r3, #255	; 0xff
 800e3bc:	d90e      	bls.n	800e3dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	22ff      	movs	r2, #255	; 0xff
 800e3c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3c8:	b2da      	uxtb	r2, r3
 800e3ca:	8979      	ldrh	r1, [r7, #10]
 800e3cc:	4b52      	ldr	r3, [pc, #328]	; (800e518 <HAL_I2C_Mem_Read+0x22c>)
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f000 fb31 	bl	800ea3c <I2C_TransferConfig>
 800e3da:	e00f      	b.n	800e3fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	8979      	ldrh	r1, [r7, #10]
 800e3ee:	4b4a      	ldr	r3, [pc, #296]	; (800e518 <HAL_I2C_Mem_Read+0x22c>)
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f000 fb20 	bl	800ea3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e402:	2200      	movs	r2, #0
 800e404:	2104      	movs	r1, #4
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	f000 f970 	bl	800e6ec <I2C_WaitOnFlagUntilTimeout>
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d001      	beq.n	800e416 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e412:	2301      	movs	r3, #1
 800e414:	e07c      	b.n	800e510 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e420:	b2d2      	uxtb	r2, r2
 800e422:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e428:	1c5a      	adds	r2, r3, #1
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e432:	3b01      	subs	r3, #1
 800e434:	b29a      	uxth	r2, r3
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e43e:	b29b      	uxth	r3, r3
 800e440:	3b01      	subs	r3, #1
 800e442:	b29a      	uxth	r2, r3
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d034      	beq.n	800e4bc <HAL_I2C_Mem_Read+0x1d0>
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e456:	2b00      	cmp	r3, #0
 800e458:	d130      	bne.n	800e4bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	9300      	str	r3, [sp, #0]
 800e45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e460:	2200      	movs	r2, #0
 800e462:	2180      	movs	r1, #128	; 0x80
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f000 f941 	bl	800e6ec <I2C_WaitOnFlagUntilTimeout>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e470:	2301      	movs	r3, #1
 800e472:	e04d      	b.n	800e510 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e478:	b29b      	uxth	r3, r3
 800e47a:	2bff      	cmp	r3, #255	; 0xff
 800e47c:	d90e      	bls.n	800e49c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	22ff      	movs	r2, #255	; 0xff
 800e482:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e488:	b2da      	uxtb	r2, r3
 800e48a:	8979      	ldrh	r1, [r7, #10]
 800e48c:	2300      	movs	r3, #0
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f000 fad1 	bl	800ea3c <I2C_TransferConfig>
 800e49a:	e00f      	b.n	800e4bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	8979      	ldrh	r1, [r7, #10]
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	9300      	str	r3, [sp, #0]
 800e4b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f000 fac0 	bl	800ea3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d19a      	bne.n	800e3fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e4c6:	697a      	ldr	r2, [r7, #20]
 800e4c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4ca:	68f8      	ldr	r0, [r7, #12]
 800e4cc:	f000 f98e 	bl	800e7ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d001      	beq.n	800e4da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e01a      	b.n	800e510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2220      	movs	r2, #32
 800e4e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	6859      	ldr	r1, [r3, #4]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	4b0b      	ldr	r3, [pc, #44]	; (800e51c <HAL_I2C_Mem_Read+0x230>)
 800e4ee:	400b      	ands	r3, r1
 800e4f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2220      	movs	r2, #32
 800e4f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2200      	movs	r2, #0
 800e506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e50a:	2300      	movs	r3, #0
 800e50c:	e000      	b.n	800e510 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e50e:	2302      	movs	r3, #2
  }
}
 800e510:	4618      	mov	r0, r3
 800e512:	3718      	adds	r7, #24
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	80002400 	.word	0x80002400
 800e51c:	fe00e800 	.word	0xfe00e800

0800e520 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e52e:	b2db      	uxtb	r3, r3
}
 800e530:	4618      	mov	r0, r3
 800e532:	370c      	adds	r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e548:	4618      	mov	r0, r3
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b086      	sub	sp, #24
 800e558:	af02      	add	r7, sp, #8
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	4608      	mov	r0, r1
 800e55e:	4611      	mov	r1, r2
 800e560:	461a      	mov	r2, r3
 800e562:	4603      	mov	r3, r0
 800e564:	817b      	strh	r3, [r7, #10]
 800e566:	460b      	mov	r3, r1
 800e568:	813b      	strh	r3, [r7, #8]
 800e56a:	4613      	mov	r3, r2
 800e56c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e56e:	88fb      	ldrh	r3, [r7, #6]
 800e570:	b2da      	uxtb	r2, r3
 800e572:	8979      	ldrh	r1, [r7, #10]
 800e574:	4b20      	ldr	r3, [pc, #128]	; (800e5f8 <I2C_RequestMemoryWrite+0xa4>)
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	f000 fa5d 	bl	800ea3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e582:	69fa      	ldr	r2, [r7, #28]
 800e584:	69b9      	ldr	r1, [r7, #24]
 800e586:	68f8      	ldr	r0, [r7, #12]
 800e588:	f000 f8f0 	bl	800e76c <I2C_WaitOnTXISFlagUntilTimeout>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d001      	beq.n	800e596 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	e02c      	b.n	800e5f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e596:	88fb      	ldrh	r3, [r7, #6]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d105      	bne.n	800e5a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e59c:	893b      	ldrh	r3, [r7, #8]
 800e59e:	b2da      	uxtb	r2, r3
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	629a      	str	r2, [r3, #40]	; 0x28
 800e5a6:	e015      	b.n	800e5d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e5a8:	893b      	ldrh	r3, [r7, #8]
 800e5aa:	0a1b      	lsrs	r3, r3, #8
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e5b6:	69fa      	ldr	r2, [r7, #28]
 800e5b8:	69b9      	ldr	r1, [r7, #24]
 800e5ba:	68f8      	ldr	r0, [r7, #12]
 800e5bc:	f000 f8d6 	bl	800e76c <I2C_WaitOnTXISFlagUntilTimeout>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d001      	beq.n	800e5ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e012      	b.n	800e5f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e5ca:	893b      	ldrh	r3, [r7, #8]
 800e5cc:	b2da      	uxtb	r2, r3
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	9300      	str	r3, [sp, #0]
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	2180      	movs	r1, #128	; 0x80
 800e5de:	68f8      	ldr	r0, [r7, #12]
 800e5e0:	f000 f884 	bl	800e6ec <I2C_WaitOnFlagUntilTimeout>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d001      	beq.n	800e5ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e000      	b.n	800e5f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e5ee:	2300      	movs	r3, #0
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3710      	adds	r7, #16
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	80002000 	.word	0x80002000

0800e5fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b086      	sub	sp, #24
 800e600:	af02      	add	r7, sp, #8
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	4608      	mov	r0, r1
 800e606:	4611      	mov	r1, r2
 800e608:	461a      	mov	r2, r3
 800e60a:	4603      	mov	r3, r0
 800e60c:	817b      	strh	r3, [r7, #10]
 800e60e:	460b      	mov	r3, r1
 800e610:	813b      	strh	r3, [r7, #8]
 800e612:	4613      	mov	r3, r2
 800e614:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e616:	88fb      	ldrh	r3, [r7, #6]
 800e618:	b2da      	uxtb	r2, r3
 800e61a:	8979      	ldrh	r1, [r7, #10]
 800e61c:	4b20      	ldr	r3, [pc, #128]	; (800e6a0 <I2C_RequestMemoryRead+0xa4>)
 800e61e:	9300      	str	r3, [sp, #0]
 800e620:	2300      	movs	r3, #0
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f000 fa0a 	bl	800ea3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e628:	69fa      	ldr	r2, [r7, #28]
 800e62a:	69b9      	ldr	r1, [r7, #24]
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f000 f89d 	bl	800e76c <I2C_WaitOnTXISFlagUntilTimeout>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d001      	beq.n	800e63c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e638:	2301      	movs	r3, #1
 800e63a:	e02c      	b.n	800e696 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e63c:	88fb      	ldrh	r3, [r7, #6]
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d105      	bne.n	800e64e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e642:	893b      	ldrh	r3, [r7, #8]
 800e644:	b2da      	uxtb	r2, r3
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	629a      	str	r2, [r3, #40]	; 0x28
 800e64c:	e015      	b.n	800e67a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e64e:	893b      	ldrh	r3, [r7, #8]
 800e650:	0a1b      	lsrs	r3, r3, #8
 800e652:	b29b      	uxth	r3, r3
 800e654:	b2da      	uxtb	r2, r3
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e65c:	69fa      	ldr	r2, [r7, #28]
 800e65e:	69b9      	ldr	r1, [r7, #24]
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f000 f883 	bl	800e76c <I2C_WaitOnTXISFlagUntilTimeout>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d001      	beq.n	800e670 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e66c:	2301      	movs	r3, #1
 800e66e:	e012      	b.n	800e696 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e670:	893b      	ldrh	r3, [r7, #8]
 800e672:	b2da      	uxtb	r2, r3
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	69bb      	ldr	r3, [r7, #24]
 800e680:	2200      	movs	r2, #0
 800e682:	2140      	movs	r1, #64	; 0x40
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f000 f831 	bl	800e6ec <I2C_WaitOnFlagUntilTimeout>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d001      	beq.n	800e694 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e690:	2301      	movs	r3, #1
 800e692:	e000      	b.n	800e696 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	80002000 	.word	0x80002000

0800e6a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	f003 0302 	and.w	r3, r3, #2
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d103      	bne.n	800e6c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	699b      	ldr	r3, [r3, #24]
 800e6c8:	f003 0301 	and.w	r3, r3, #1
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d007      	beq.n	800e6e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	699a      	ldr	r2, [r3, #24]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f042 0201 	orr.w	r2, r2, #1
 800e6de:	619a      	str	r2, [r3, #24]
  }
}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	603b      	str	r3, [r7, #0]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e6fc:	e022      	b.n	800e744 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e704:	d01e      	beq.n	800e744 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e706:	f7fe fce9 	bl	800d0dc <HAL_GetTick>
 800e70a:	4602      	mov	r2, r0
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	683a      	ldr	r2, [r7, #0]
 800e712:	429a      	cmp	r2, r3
 800e714:	d302      	bcc.n	800e71c <I2C_WaitOnFlagUntilTimeout+0x30>
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d113      	bne.n	800e744 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e720:	f043 0220 	orr.w	r2, r3, #32
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2220      	movs	r2, #32
 800e72c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2200      	movs	r2, #0
 800e734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2200      	movs	r2, #0
 800e73c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e740:	2301      	movs	r3, #1
 800e742:	e00f      	b.n	800e764 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	699a      	ldr	r2, [r3, #24]
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	4013      	ands	r3, r2
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	429a      	cmp	r2, r3
 800e752:	bf0c      	ite	eq
 800e754:	2301      	moveq	r3, #1
 800e756:	2300      	movne	r3, #0
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	461a      	mov	r2, r3
 800e75c:	79fb      	ldrb	r3, [r7, #7]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d0cd      	beq.n	800e6fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	3710      	adds	r7, #16
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e778:	e02c      	b.n	800e7d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	68b9      	ldr	r1, [r7, #8]
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f000 f870 	bl	800e864 <I2C_IsErrorOccurred>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e78a:	2301      	movs	r3, #1
 800e78c:	e02a      	b.n	800e7e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e794:	d01e      	beq.n	800e7d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e796:	f7fe fca1 	bl	800d0dc <HAL_GetTick>
 800e79a:	4602      	mov	r2, r0
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	68ba      	ldr	r2, [r7, #8]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d302      	bcc.n	800e7ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d113      	bne.n	800e7d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7b0:	f043 0220 	orr.w	r2, r3, #32
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2220      	movs	r2, #32
 800e7bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e007      	b.n	800e7e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	699b      	ldr	r3, [r3, #24]
 800e7da:	f003 0302 	and.w	r3, r3, #2
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	d1cb      	bne.n	800e77a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e7f8:	e028      	b.n	800e84c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	68b9      	ldr	r1, [r7, #8]
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	f000 f830 	bl	800e864 <I2C_IsErrorOccurred>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d001      	beq.n	800e80e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e80a:	2301      	movs	r3, #1
 800e80c:	e026      	b.n	800e85c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e80e:	f7fe fc65 	bl	800d0dc <HAL_GetTick>
 800e812:	4602      	mov	r2, r0
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	68ba      	ldr	r2, [r7, #8]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d302      	bcc.n	800e824 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d113      	bne.n	800e84c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e828:	f043 0220 	orr.w	r2, r3, #32
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2220      	movs	r2, #32
 800e834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2200      	movs	r2, #0
 800e844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	e007      	b.n	800e85c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	699b      	ldr	r3, [r3, #24]
 800e852:	f003 0320 	and.w	r3, r3, #32
 800e856:	2b20      	cmp	r3, #32
 800e858:	d1cf      	bne.n	800e7fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e85a:	2300      	movs	r3, #0
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b08a      	sub	sp, #40	; 0x28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e870:	2300      	movs	r3, #0
 800e872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	f003 0310 	and.w	r3, r3, #16
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d075      	beq.n	800e97c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2210      	movs	r2, #16
 800e896:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e898:	e056      	b.n	800e948 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a0:	d052      	beq.n	800e948 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e8a2:	f7fe fc1b 	bl	800d0dc <HAL_GetTick>
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	1ad3      	subs	r3, r2, r3
 800e8ac:	68ba      	ldr	r2, [r7, #8]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d302      	bcc.n	800e8b8 <I2C_IsErrorOccurred+0x54>
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d147      	bne.n	800e948 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	699b      	ldr	r3, [r3, #24]
 800e8d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8da:	d12e      	bne.n	800e93a <I2C_IsErrorOccurred+0xd6>
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e8e2:	d02a      	beq.n	800e93a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800e8e4:	7cfb      	ldrb	r3, [r7, #19]
 800e8e6:	2b20      	cmp	r3, #32
 800e8e8:	d027      	beq.n	800e93a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	685a      	ldr	r2, [r3, #4]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e8f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e8fa:	f7fe fbef 	bl	800d0dc <HAL_GetTick>
 800e8fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e900:	e01b      	b.n	800e93a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e902:	f7fe fbeb 	bl	800d0dc <HAL_GetTick>
 800e906:	4602      	mov	r2, r0
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	2b19      	cmp	r3, #25
 800e90e:	d914      	bls.n	800e93a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e914:	f043 0220 	orr.w	r2, r3, #32
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2220      	movs	r2, #32
 800e920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2200      	movs	r2, #0
 800e928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2200      	movs	r2, #0
 800e930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800e934:	2301      	movs	r3, #1
 800e936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	699b      	ldr	r3, [r3, #24]
 800e940:	f003 0320 	and.w	r3, r3, #32
 800e944:	2b20      	cmp	r3, #32
 800e946:	d1dc      	bne.n	800e902 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	699b      	ldr	r3, [r3, #24]
 800e94e:	f003 0320 	and.w	r3, r3, #32
 800e952:	2b20      	cmp	r3, #32
 800e954:	d003      	beq.n	800e95e <I2C_IsErrorOccurred+0xfa>
 800e956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d09d      	beq.n	800e89a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e95e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e962:	2b00      	cmp	r3, #0
 800e964:	d103      	bne.n	800e96e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2220      	movs	r2, #32
 800e96c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e96e:	6a3b      	ldr	r3, [r7, #32]
 800e970:	f043 0304 	orr.w	r3, r3, #4
 800e974:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e976:	2301      	movs	r3, #1
 800e978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	699b      	ldr	r3, [r3, #24]
 800e982:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00b      	beq.n	800e9a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e98e:	6a3b      	ldr	r3, [r7, #32]
 800e990:	f043 0301 	orr.w	r3, r3, #1
 800e994:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e99e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00b      	beq.n	800e9c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	f043 0308 	orr.w	r3, r3, #8
 800e9b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e9c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d00b      	beq.n	800e9ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e9d2:	6a3b      	ldr	r3, [r7, #32]
 800e9d4:	f043 0302 	orr.w	r3, r3, #2
 800e9d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800e9ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d01c      	beq.n	800ea2c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f7ff fe56 	bl	800e6a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	6859      	ldr	r1, [r3, #4]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	4b0d      	ldr	r3, [pc, #52]	; (800ea38 <I2C_IsErrorOccurred+0x1d4>)
 800ea04:	400b      	ands	r3, r1
 800ea06:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea0c:	6a3b      	ldr	r3, [r7, #32]
 800ea0e:	431a      	orrs	r2, r3
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2220      	movs	r2, #32
 800ea18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2200      	movs	r2, #0
 800ea28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ea2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3728      	adds	r7, #40	; 0x28
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	fe00e800 	.word	0xfe00e800

0800ea3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b087      	sub	sp, #28
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	607b      	str	r3, [r7, #4]
 800ea46:	460b      	mov	r3, r1
 800ea48:	817b      	strh	r3, [r7, #10]
 800ea4a:	4613      	mov	r3, r2
 800ea4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ea4e:	897b      	ldrh	r3, [r7, #10]
 800ea50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ea54:	7a7b      	ldrb	r3, [r7, #9]
 800ea56:	041b      	lsls	r3, r3, #16
 800ea58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ea5c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	4313      	orrs	r3, r2
 800ea66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea6a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	685a      	ldr	r2, [r3, #4]
 800ea72:	6a3b      	ldr	r3, [r7, #32]
 800ea74:	0d5b      	lsrs	r3, r3, #21
 800ea76:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ea7a:	4b08      	ldr	r3, [pc, #32]	; (800ea9c <I2C_TransferConfig+0x60>)
 800ea7c:	430b      	orrs	r3, r1
 800ea7e:	43db      	mvns	r3, r3
 800ea80:	ea02 0103 	and.w	r1, r2, r3
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	697a      	ldr	r2, [r7, #20]
 800ea8a:	430a      	orrs	r2, r1
 800ea8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ea8e:	bf00      	nop
 800ea90:	371c      	adds	r7, #28
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	03ff63ff 	.word	0x03ff63ff

0800eaa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	2b20      	cmp	r3, #32
 800eab4:	d138      	bne.n	800eb28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d101      	bne.n	800eac4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800eac0:	2302      	movs	r3, #2
 800eac2:	e032      	b.n	800eb2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2201      	movs	r2, #1
 800eac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2224      	movs	r2, #36	; 0x24
 800ead0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f022 0201 	bic.w	r2, r2, #1
 800eae2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800eaf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	6819      	ldr	r1, [r3, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	683a      	ldr	r2, [r7, #0]
 800eb00:	430a      	orrs	r2, r1
 800eb02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f042 0201 	orr.w	r2, r2, #1
 800eb12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2220      	movs	r2, #32
 800eb18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800eb24:	2300      	movs	r3, #0
 800eb26:	e000      	b.n	800eb2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eb28:	2302      	movs	r3, #2
  }
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	370c      	adds	r7, #12
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800eb36:	b480      	push	{r7}
 800eb38:	b085      	sub	sp, #20
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
 800eb3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	2b20      	cmp	r3, #32
 800eb4a:	d139      	bne.n	800ebc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d101      	bne.n	800eb5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800eb56:	2302      	movs	r3, #2
 800eb58:	e033      	b.n	800ebc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2224      	movs	r2, #36	; 0x24
 800eb66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f022 0201 	bic.w	r2, r2, #1
 800eb78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800eb88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	021b      	lsls	r3, r3, #8
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	4313      	orrs	r3, r2
 800eb92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f042 0201 	orr.w	r2, r2, #1
 800ebaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2220      	movs	r2, #32
 800ebb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	e000      	b.n	800ebc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ebc0:	2302      	movs	r3, #2
  }
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3714      	adds	r7, #20
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
	...

0800ebd0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d101      	bne.n	800ebe2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e0bf      	b.n	800ed62 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d106      	bne.n	800ebfc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f7f2 f8fc 	bl	8000df4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2202      	movs	r2, #2
 800ec00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	699a      	ldr	r2, [r3, #24]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800ec12:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6999      	ldr	r1, [r3, #24]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	685a      	ldr	r2, [r3, #4]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	689b      	ldr	r3, [r3, #8]
 800ec22:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ec28:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	691b      	ldr	r3, [r3, #16]
 800ec2e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	430a      	orrs	r2, r1
 800ec36:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	6899      	ldr	r1, [r3, #8]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	4b4a      	ldr	r3, [pc, #296]	; (800ed6c <HAL_LTDC_Init+0x19c>)
 800ec44:	400b      	ands	r3, r1
 800ec46:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	695b      	ldr	r3, [r3, #20]
 800ec4c:	041b      	lsls	r3, r3, #16
 800ec4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6899      	ldr	r1, [r3, #8]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	699a      	ldr	r2, [r3, #24]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	431a      	orrs	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	430a      	orrs	r2, r1
 800ec64:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	68d9      	ldr	r1, [r3, #12]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	4b3e      	ldr	r3, [pc, #248]	; (800ed6c <HAL_LTDC_Init+0x19c>)
 800ec72:	400b      	ands	r3, r1
 800ec74:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	69db      	ldr	r3, [r3, #28]
 800ec7a:	041b      	lsls	r3, r3, #16
 800ec7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	68d9      	ldr	r1, [r3, #12]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6a1a      	ldr	r2, [r3, #32]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	431a      	orrs	r2, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	430a      	orrs	r2, r1
 800ec92:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	6919      	ldr	r1, [r3, #16]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	4b33      	ldr	r3, [pc, #204]	; (800ed6c <HAL_LTDC_Init+0x19c>)
 800eca0:	400b      	ands	r3, r1
 800eca2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca8:	041b      	lsls	r3, r3, #16
 800ecaa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	6919      	ldr	r1, [r3, #16]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	431a      	orrs	r2, r3
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	430a      	orrs	r2, r1
 800ecc0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	6959      	ldr	r1, [r3, #20]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	4b27      	ldr	r3, [pc, #156]	; (800ed6c <HAL_LTDC_Init+0x19c>)
 800ecce:	400b      	ands	r3, r1
 800ecd0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd6:	041b      	lsls	r3, r3, #16
 800ecd8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6959      	ldr	r1, [r3, #20]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	431a      	orrs	r2, r3
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	430a      	orrs	r2, r1
 800ecee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ecf6:	021b      	lsls	r3, r3, #8
 800ecf8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ed00:	041b      	lsls	r3, r3, #16
 800ed02:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ed12:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ed1a:	68ba      	ldr	r2, [r7, #8]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800ed26:	431a      	orrs	r2, r3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	430a      	orrs	r2, r1
 800ed2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f042 0206 	orr.w	r2, r2, #6
 800ed3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	699a      	ldr	r2, [r3, #24]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f042 0201 	orr.w	r2, r2, #1
 800ed4e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2200      	movs	r2, #0
 800ed54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	f000f800 	.word	0xf000f800

0800ed70 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed86:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f003 0304 	and.w	r3, r3, #4
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d023      	beq.n	800edda <HAL_LTDC_IRQHandler+0x6a>
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	f003 0304 	and.w	r3, r3, #4
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d01e      	beq.n	800edda <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f022 0204 	bic.w	r2, r2, #4
 800edaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2204      	movs	r2, #4
 800edb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800edba:	f043 0201 	orr.w	r2, r3, #1
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2204      	movs	r2, #4
 800edc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f000 f86f 	bl	800eeb8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f003 0302 	and.w	r3, r3, #2
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d023      	beq.n	800ee2c <HAL_LTDC_IRQHandler+0xbc>
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	f003 0302 	and.w	r3, r3, #2
 800edea:	2b00      	cmp	r3, #0
 800edec:	d01e      	beq.n	800ee2c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f022 0202 	bic.w	r2, r2, #2
 800edfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2202      	movs	r2, #2
 800ee04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ee0c:	f043 0202 	orr.w	r2, r3, #2
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2204      	movs	r2, #4
 800ee1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f000 f846 	bl	800eeb8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f003 0301 	and.w	r3, r3, #1
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d01b      	beq.n	800ee6e <HAL_LTDC_IRQHandler+0xfe>
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	f003 0301 	and.w	r3, r3, #1
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d016      	beq.n	800ee6e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f022 0201 	bic.w	r2, r2, #1
 800ee4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2201      	movs	r2, #1
 800ee56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f7f4 fdb7 	bl	80039dc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f003 0308 	and.w	r3, r3, #8
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d01b      	beq.n	800eeb0 <HAL_LTDC_IRQHandler+0x140>
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	f003 0308 	and.w	r3, r3, #8
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d016      	beq.n	800eeb0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f022 0208 	bic.w	r2, r2, #8
 800ee90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2208      	movs	r2, #8
 800ee98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 f80e 	bl	800eecc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800eeb0:	bf00      	nop
 800eeb2:	3710      	adds	r7, #16
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800eec0:	bf00      	nop
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800eed4:	bf00      	nop
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800eee0:	b5b0      	push	{r4, r5, r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d101      	bne.n	800eefa <HAL_LTDC_ConfigLayer+0x1a>
 800eef6:	2302      	movs	r3, #2
 800eef8:	e02c      	b.n	800ef54 <HAL_LTDC_ConfigLayer+0x74>
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2201      	movs	r2, #1
 800eefe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2202      	movs	r2, #2
 800ef06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ef0a:	68fa      	ldr	r2, [r7, #12]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2134      	movs	r1, #52	; 0x34
 800ef10:	fb01 f303 	mul.w	r3, r1, r3
 800ef14:	4413      	add	r3, r2
 800ef16:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	4614      	mov	r4, r2
 800ef1e:	461d      	mov	r5, r3
 800ef20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef2c:	682b      	ldr	r3, [r5, #0]
 800ef2e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	68b9      	ldr	r1, [r7, #8]
 800ef34:	68f8      	ldr	r0, [r7, #12]
 800ef36:	f000 f849 	bl	800efcc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2201      	movs	r2, #1
 800ef46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ef52:	2300      	movs	r3, #0
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3710      	adds	r7, #16
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bdb0      	pop	{r4, r5, r7, pc}

0800ef5c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d101      	bne.n	800ef74 <HAL_LTDC_ProgramLineEvent+0x18>
 800ef70:	2302      	movs	r3, #2
 800ef72:	e023      	b.n	800efbc <HAL_LTDC_ProgramLineEvent+0x60>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2202      	movs	r2, #2
 800ef80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f022 0201 	bic.w	r2, r2, #1
 800ef92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800ef94:	4a0c      	ldr	r2, [pc, #48]	; (800efc8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f042 0201 	orr.w	r2, r2, #1
 800efa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2201      	movs	r2, #1
 800efae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr
 800efc8:	50001000 	.word	0x50001000

0800efcc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800efcc:	b480      	push	{r7}
 800efce:	b089      	sub	sp, #36	; 0x24
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60f8      	str	r0, [r7, #12]
 800efd4:	60b9      	str	r1, [r7, #8]
 800efd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	685a      	ldr	r2, [r3, #4]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	0c1b      	lsrs	r3, r3, #16
 800efe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800efe8:	4413      	add	r3, r2
 800efea:	041b      	lsls	r3, r3, #16
 800efec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	461a      	mov	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	01db      	lsls	r3, r3, #7
 800eff8:	4413      	add	r3, r2
 800effa:	3384      	adds	r3, #132	; 0x84
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	68fa      	ldr	r2, [r7, #12]
 800f000:	6812      	ldr	r2, [r2, #0]
 800f002:	4611      	mov	r1, r2
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	01d2      	lsls	r2, r2, #7
 800f008:	440a      	add	r2, r1
 800f00a:	3284      	adds	r2, #132	; 0x84
 800f00c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f010:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	0c1b      	lsrs	r3, r3, #16
 800f01e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f022:	4413      	add	r3, r2
 800f024:	1c5a      	adds	r2, r3, #1
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4619      	mov	r1, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	01db      	lsls	r3, r3, #7
 800f030:	440b      	add	r3, r1
 800f032:	3384      	adds	r3, #132	; 0x84
 800f034:	4619      	mov	r1, r3
 800f036:	69fb      	ldr	r3, [r7, #28]
 800f038:	4313      	orrs	r3, r2
 800f03a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	68da      	ldr	r2, [r3, #12]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f04a:	4413      	add	r3, r2
 800f04c:	041b      	lsls	r3, r3, #16
 800f04e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	461a      	mov	r2, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	01db      	lsls	r3, r3, #7
 800f05a:	4413      	add	r3, r2
 800f05c:	3384      	adds	r3, #132	; 0x84
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	6812      	ldr	r2, [r2, #0]
 800f064:	4611      	mov	r1, r2
 800f066:	687a      	ldr	r2, [r7, #4]
 800f068:	01d2      	lsls	r2, r2, #7
 800f06a:	440a      	add	r2, r1
 800f06c:	3284      	adds	r2, #132	; 0x84
 800f06e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f072:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	689a      	ldr	r2, [r3, #8]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f082:	4413      	add	r3, r2
 800f084:	1c5a      	adds	r2, r3, #1
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	4619      	mov	r1, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	01db      	lsls	r3, r3, #7
 800f090:	440b      	add	r3, r1
 800f092:	3384      	adds	r3, #132	; 0x84
 800f094:	4619      	mov	r1, r3
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	4313      	orrs	r3, r2
 800f09a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	01db      	lsls	r3, r3, #7
 800f0a6:	4413      	add	r3, r2
 800f0a8:	3384      	adds	r3, #132	; 0x84
 800f0aa:	691b      	ldr	r3, [r3, #16]
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	6812      	ldr	r2, [r2, #0]
 800f0b0:	4611      	mov	r1, r2
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	01d2      	lsls	r2, r2, #7
 800f0b6:	440a      	add	r2, r1
 800f0b8:	3284      	adds	r2, #132	; 0x84
 800f0ba:	f023 0307 	bic.w	r3, r3, #7
 800f0be:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	01db      	lsls	r3, r3, #7
 800f0ca:	4413      	add	r3, r2
 800f0cc:	3384      	adds	r3, #132	; 0x84
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	691b      	ldr	r3, [r3, #16]
 800f0d4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f0dc:	021b      	lsls	r3, r3, #8
 800f0de:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f0e6:	041b      	lsls	r3, r3, #16
 800f0e8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	699b      	ldr	r3, [r3, #24]
 800f0ee:	061b      	lsls	r3, r3, #24
 800f0f0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	01db      	lsls	r3, r3, #7
 800f0fc:	4413      	add	r3, r2
 800f0fe:	3384      	adds	r3, #132	; 0x84
 800f100:	699b      	ldr	r3, [r3, #24]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	461a      	mov	r2, r3
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	01db      	lsls	r3, r3, #7
 800f10c:	4413      	add	r3, r2
 800f10e:	3384      	adds	r3, #132	; 0x84
 800f110:	461a      	mov	r2, r3
 800f112:	2300      	movs	r3, #0
 800f114:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f11c:	461a      	mov	r2, r3
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	431a      	orrs	r2, r3
 800f122:	69bb      	ldr	r3, [r7, #24]
 800f124:	431a      	orrs	r2, r3
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	4619      	mov	r1, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	01db      	lsls	r3, r3, #7
 800f130:	440b      	add	r3, r1
 800f132:	3384      	adds	r3, #132	; 0x84
 800f134:	4619      	mov	r1, r3
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	4313      	orrs	r3, r2
 800f13a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	461a      	mov	r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	01db      	lsls	r3, r3, #7
 800f146:	4413      	add	r3, r2
 800f148:	3384      	adds	r3, #132	; 0x84
 800f14a:	695b      	ldr	r3, [r3, #20]
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	6812      	ldr	r2, [r2, #0]
 800f150:	4611      	mov	r1, r2
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	01d2      	lsls	r2, r2, #7
 800f156:	440a      	add	r2, r1
 800f158:	3284      	adds	r2, #132	; 0x84
 800f15a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f15e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	461a      	mov	r2, r3
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	01db      	lsls	r3, r3, #7
 800f16a:	4413      	add	r3, r2
 800f16c:	3384      	adds	r3, #132	; 0x84
 800f16e:	461a      	mov	r2, r3
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	695b      	ldr	r3, [r3, #20]
 800f174:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	461a      	mov	r2, r3
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	01db      	lsls	r3, r3, #7
 800f180:	4413      	add	r3, r2
 800f182:	3384      	adds	r3, #132	; 0x84
 800f184:	69da      	ldr	r2, [r3, #28]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4619      	mov	r1, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	01db      	lsls	r3, r3, #7
 800f190:	440b      	add	r3, r1
 800f192:	3384      	adds	r3, #132	; 0x84
 800f194:	4619      	mov	r1, r3
 800f196:	4b58      	ldr	r3, [pc, #352]	; (800f2f8 <LTDC_SetConfig+0x32c>)
 800f198:	4013      	ands	r3, r2
 800f19a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	69da      	ldr	r2, [r3, #28]
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	6a1b      	ldr	r3, [r3, #32]
 800f1a4:	68f9      	ldr	r1, [r7, #12]
 800f1a6:	6809      	ldr	r1, [r1, #0]
 800f1a8:	4608      	mov	r0, r1
 800f1aa:	6879      	ldr	r1, [r7, #4]
 800f1ac:	01c9      	lsls	r1, r1, #7
 800f1ae:	4401      	add	r1, r0
 800f1b0:	3184      	adds	r1, #132	; 0x84
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	01db      	lsls	r3, r3, #7
 800f1c0:	4413      	add	r3, r2
 800f1c2:	3384      	adds	r3, #132	; 0x84
 800f1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	01db      	lsls	r3, r3, #7
 800f1d0:	4413      	add	r3, r2
 800f1d2:	3384      	adds	r3, #132	; 0x84
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	461a      	mov	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	01db      	lsls	r3, r3, #7
 800f1e4:	4413      	add	r3, r2
 800f1e6:	3384      	adds	r3, #132	; 0x84
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ee:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	691b      	ldr	r3, [r3, #16]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d102      	bne.n	800f1fe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800f1f8:	2304      	movs	r3, #4
 800f1fa:	61fb      	str	r3, [r7, #28]
 800f1fc:	e01b      	b.n	800f236 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	691b      	ldr	r3, [r3, #16]
 800f202:	2b01      	cmp	r3, #1
 800f204:	d102      	bne.n	800f20c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800f206:	2303      	movs	r3, #3
 800f208:	61fb      	str	r3, [r7, #28]
 800f20a:	e014      	b.n	800f236 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	691b      	ldr	r3, [r3, #16]
 800f210:	2b04      	cmp	r3, #4
 800f212:	d00b      	beq.n	800f22c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800f218:	2b02      	cmp	r3, #2
 800f21a:	d007      	beq.n	800f22c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800f220:	2b03      	cmp	r3, #3
 800f222:	d003      	beq.n	800f22c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800f228:	2b07      	cmp	r3, #7
 800f22a:	d102      	bne.n	800f232 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800f22c:	2302      	movs	r3, #2
 800f22e:	61fb      	str	r3, [r7, #28]
 800f230:	e001      	b.n	800f236 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800f232:	2301      	movs	r3, #1
 800f234:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	461a      	mov	r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	01db      	lsls	r3, r3, #7
 800f240:	4413      	add	r3, r2
 800f242:	3384      	adds	r3, #132	; 0x84
 800f244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f246:	68fa      	ldr	r2, [r7, #12]
 800f248:	6812      	ldr	r2, [r2, #0]
 800f24a:	4611      	mov	r1, r2
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	01d2      	lsls	r2, r2, #7
 800f250:	440a      	add	r2, r1
 800f252:	3284      	adds	r2, #132	; 0x84
 800f254:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800f258:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f25e:	69fa      	ldr	r2, [r7, #28]
 800f260:	fb02 f303 	mul.w	r3, r2, r3
 800f264:	041a      	lsls	r2, r3, #16
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	6859      	ldr	r1, [r3, #4]
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	1acb      	subs	r3, r1, r3
 800f270:	69f9      	ldr	r1, [r7, #28]
 800f272:	fb01 f303 	mul.w	r3, r1, r3
 800f276:	3307      	adds	r3, #7
 800f278:	68f9      	ldr	r1, [r7, #12]
 800f27a:	6809      	ldr	r1, [r1, #0]
 800f27c:	4608      	mov	r0, r1
 800f27e:	6879      	ldr	r1, [r7, #4]
 800f280:	01c9      	lsls	r1, r1, #7
 800f282:	4401      	add	r1, r0
 800f284:	3184      	adds	r1, #132	; 0x84
 800f286:	4313      	orrs	r3, r2
 800f288:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	461a      	mov	r2, r3
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	01db      	lsls	r3, r3, #7
 800f294:	4413      	add	r3, r2
 800f296:	3384      	adds	r3, #132	; 0x84
 800f298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4619      	mov	r1, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	01db      	lsls	r3, r3, #7
 800f2a4:	440b      	add	r3, r1
 800f2a6:	3384      	adds	r3, #132	; 0x84
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	4b14      	ldr	r3, [pc, #80]	; (800f2fc <LTDC_SetConfig+0x330>)
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	01db      	lsls	r3, r3, #7
 800f2ba:	4413      	add	r3, r2
 800f2bc:	3384      	adds	r3, #132	; 0x84
 800f2be:	461a      	mov	r2, r3
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	01db      	lsls	r3, r3, #7
 800f2d0:	4413      	add	r3, r2
 800f2d2:	3384      	adds	r3, #132	; 0x84
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	68fa      	ldr	r2, [r7, #12]
 800f2d8:	6812      	ldr	r2, [r2, #0]
 800f2da:	4611      	mov	r1, r2
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	01d2      	lsls	r2, r2, #7
 800f2e0:	440a      	add	r2, r1
 800f2e2:	3284      	adds	r2, #132	; 0x84
 800f2e4:	f043 0301 	orr.w	r3, r3, #1
 800f2e8:	6013      	str	r3, [r2, #0]
}
 800f2ea:	bf00      	nop
 800f2ec:	3724      	adds	r7, #36	; 0x24
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr
 800f2f6:	bf00      	nop
 800f2f8:	fffff8f8 	.word	0xfffff8f8
 800f2fc:	fffff800 	.word	0xfffff800

0800f300 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f308:	f7fd fee8 	bl	800d0dc <HAL_GetTick>
 800f30c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d101      	bne.n	800f318 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800f314:	2301      	movs	r3, #1
 800f316:	e03b      	b.n	800f390 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2200      	movs	r2, #0
 800f31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2202      	movs	r2, #2
 800f324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	68da      	ldr	r2, [r3, #12]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f022 0201 	bic.w	r2, r2, #1
 800f336:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f338:	e00f      	b.n	800f35a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800f33a:	f7fd fecf 	bl	800d0dc <HAL_GetTick>
 800f33e:	4602      	mov	r2, r0
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	1ad3      	subs	r3, r2, r3
 800f344:	2b05      	cmp	r3, #5
 800f346:	d908      	bls.n	800f35a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2240      	movs	r2, #64	; 0x40
 800f34c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2203      	movs	r2, #3
 800f352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800f356:	2301      	movs	r3, #1
 800f358:	e01a      	b.n	800f390 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	f003 0301 	and.w	r3, r3, #1
 800f364:	2b00      	cmp	r3, #0
 800f366:	d1e8      	bne.n	800f33a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 f894 	bl	800f496 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2200      	movs	r2, #0
 800f372:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2200      	movs	r2, #0
 800f378:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2200      	movs	r2, #0
 800f37e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2201      	movs	r2, #1
 800f38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f38e:	2300      	movs	r3, #0
}
 800f390:	4618      	mov	r0, r3
 800f392:	3710      	adds	r7, #16
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d101      	bne.n	800f3aa <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	e048      	b.n	800f43c <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	68da      	ldr	r2, [r3, #12]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f022 0201 	bic.w	r2, r2, #1
 800f3b8:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2200      	movs	r2, #0
 800f400:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2200      	movs	r2, #0
 800f408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	221f      	movs	r2, #31
 800f410:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2200      	movs	r2, #0
 800f416:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2200      	movs	r2, #0
 800f422:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2200      	movs	r2, #0
 800f42e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f43a:	2300      	movs	r3, #0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d101      	bne.n	800f45a <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800f456:	2301      	movs	r3, #1
 800f458:	e017      	b.n	800f48a <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b02      	cmp	r3, #2
 800f464:	d004      	beq.n	800f470 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2280      	movs	r2, #128	; 0x80
 800f46a:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800f46c:	2301      	movs	r3, #1
 800f46e:	e00c      	b.n	800f48a <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2204      	movs	r2, #4
 800f474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	68da      	ldr	r2, [r3, #12]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f022 0201 	bic.w	r2, r2, #1
 800f486:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800f488:	2300      	movs	r3, #0
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	370c      	adds	r7, #12
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr

0800f496 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f496:	b480      	push	{r7}
 800f498:	b085      	sub	sp, #20
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	68d9      	ldr	r1, [r3, #12]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	691a      	ldr	r2, [r3, #16]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	430a      	orrs	r2, r1
 800f4ac:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	695a      	ldr	r2, [r3, #20]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	699b      	ldr	r3, [r3, #24]
 800f4b6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f4bc:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6a1b      	ldr	r3, [r3, #32]
 800f4c2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f4c8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ce:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f4d4:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800f4de:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f4ea:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f4ec:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4f6:	d107      	bne.n	800f508 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	691a      	ldr	r2, [r3, #16]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800f506:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2200      	movs	r2, #0
 800f50e:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f514:	2b00      	cmp	r3, #0
 800f516:	da11      	bge.n	800f53c <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	695a      	ldr	r2, [r3, #20]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f526:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f52c:	425b      	negs	r3, r3
 800f52e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	b292      	uxth	r2, r2
 800f538:	621a      	str	r2, [r3, #32]
 800f53a:	e006      	b.n	800f54a <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f540:	461a      	mov	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	b292      	uxth	r2, r2
 800f548:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f54e:	2b00      	cmp	r3, #0
 800f550:	da15      	bge.n	800f57e <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	695a      	ldr	r2, [r3, #20]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800f560:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f566:	425b      	negs	r3, r3
 800f568:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	6a19      	ldr	r1, [r3, #32]
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	041a      	lsls	r2, r3, #16
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	430a      	orrs	r2, r1
 800f57a:	621a      	str	r2, [r3, #32]
 800f57c:	e009      	b.n	800f592 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	6a19      	ldr	r1, [r3, #32]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f588:	041a      	lsls	r2, r3, #16
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	430a      	orrs	r2, r1
 800f590:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f59a:	d006      	beq.n	800f5aa <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	685a      	ldr	r2, [r3, #4]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	b2d2      	uxtb	r2, r2
 800f5a6:	629a      	str	r2, [r3, #40]	; 0x28
 800f5a8:	e003      	b.n	800f5b2 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f5ba:	bf00      	nop
 800f5bc:	3714      	adds	r7, #20
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr
	...

0800f5c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800f5d0:	4b29      	ldr	r3, [pc, #164]	; (800f678 <HAL_PWREx_ConfigSupply+0xb0>)
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	f003 0307 	and.w	r3, r3, #7
 800f5d8:	2b06      	cmp	r3, #6
 800f5da:	d00a      	beq.n	800f5f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f5dc:	4b26      	ldr	r3, [pc, #152]	; (800f678 <HAL_PWREx_ConfigSupply+0xb0>)
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d001      	beq.n	800f5ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	e040      	b.n	800f670 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	e03e      	b.n	800f670 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800f5f2:	4b21      	ldr	r3, [pc, #132]	; (800f678 <HAL_PWREx_ConfigSupply+0xb0>)
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800f5fa:	491f      	ldr	r1, [pc, #124]	; (800f678 <HAL_PWREx_ConfigSupply+0xb0>)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4313      	orrs	r3, r2
 800f600:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800f602:	f7fd fd6b 	bl	800d0dc <HAL_GetTick>
 800f606:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f608:	e009      	b.n	800f61e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f60a:	f7fd fd67 	bl	800d0dc <HAL_GetTick>
 800f60e:	4602      	mov	r2, r0
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	1ad3      	subs	r3, r2, r3
 800f614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f618:	d901      	bls.n	800f61e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800f61a:	2301      	movs	r3, #1
 800f61c:	e028      	b.n	800f670 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f61e:	4b16      	ldr	r3, [pc, #88]	; (800f678 <HAL_PWREx_ConfigSupply+0xb0>)
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f62a:	d1ee      	bne.n	800f60a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2b1e      	cmp	r3, #30
 800f630:	d008      	beq.n	800f644 <HAL_PWREx_ConfigSupply+0x7c>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2b2e      	cmp	r3, #46	; 0x2e
 800f636:	d005      	beq.n	800f644 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2b1d      	cmp	r3, #29
 800f63c:	d002      	beq.n	800f644 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2b2d      	cmp	r3, #45	; 0x2d
 800f642:	d114      	bne.n	800f66e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800f644:	f7fd fd4a 	bl	800d0dc <HAL_GetTick>
 800f648:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f64a:	e009      	b.n	800f660 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f64c:	f7fd fd46 	bl	800d0dc <HAL_GetTick>
 800f650:	4602      	mov	r2, r0
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	1ad3      	subs	r3, r2, r3
 800f656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f65a:	d901      	bls.n	800f660 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800f65c:	2301      	movs	r3, #1
 800f65e:	e007      	b.n	800f670 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f660:	4b05      	ldr	r3, [pc, #20]	; (800f678 <HAL_PWREx_ConfigSupply+0xb0>)
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f66c:	d1ee      	bne.n	800f64c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800f66e:	2300      	movs	r3, #0
}
 800f670:	4618      	mov	r0, r3
 800f672:	3710      	adds	r7, #16
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	58024800 	.word	0x58024800

0800f67c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b086      	sub	sp, #24
 800f680:	af02      	add	r7, sp, #8
 800f682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f684:	f7fd fd2a 	bl	800d0dc <HAL_GetTick>
 800f688:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d101      	bne.n	800f694 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f690:	2301      	movs	r3, #1
 800f692:	e05f      	b.n	800f754 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d107      	bne.n	800f6b0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f7f1 fc99 	bl	8000fd8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f6a6:	f241 3188 	movw	r1, #5000	; 0x1388
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 fcca 	bl	8010044 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	689b      	ldr	r3, [r3, #8]
 800f6be:	3b01      	subs	r3, #1
 800f6c0:	021a      	lsls	r2, r3, #8
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	430a      	orrs	r2, r1
 800f6c8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	2120      	movs	r1, #32
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 fcf5 	bl	80100c6 <QSPI_WaitFlagStateUntilTimeout>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f6e0:	7afb      	ldrb	r3, [r7, #11]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d135      	bne.n	800f752 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	4b1b      	ldr	r3, [pc, #108]	; (800f75c <HAL_QSPI_Init+0xe0>)
 800f6ee:	4013      	ands	r3, r2
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	6852      	ldr	r2, [r2, #4]
 800f6f4:	0611      	lsls	r1, r2, #24
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	68d2      	ldr	r2, [r2, #12]
 800f6fa:	4311      	orrs	r1, r2
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	69d2      	ldr	r2, [r2, #28]
 800f700:	4311      	orrs	r1, r2
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	6a12      	ldr	r2, [r2, #32]
 800f706:	4311      	orrs	r1, r2
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	6812      	ldr	r2, [r2, #0]
 800f70c:	430b      	orrs	r3, r1
 800f70e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	685a      	ldr	r2, [r3, #4]
 800f716:	4b12      	ldr	r3, [pc, #72]	; (800f760 <HAL_QSPI_Init+0xe4>)
 800f718:	4013      	ands	r3, r2
 800f71a:	687a      	ldr	r2, [r7, #4]
 800f71c:	6912      	ldr	r2, [r2, #16]
 800f71e:	0411      	lsls	r1, r2, #16
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	6952      	ldr	r2, [r2, #20]
 800f724:	4311      	orrs	r1, r2
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	6992      	ldr	r2, [r2, #24]
 800f72a:	4311      	orrs	r1, r2
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	6812      	ldr	r2, [r2, #0]
 800f730:	430b      	orrs	r3, r1
 800f732:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f042 0201 	orr.w	r2, r2, #1
 800f742:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2201      	movs	r2, #1
 800f74e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800f752:	7afb      	ldrb	r3, [r7, #11]
}
 800f754:	4618      	mov	r0, r3
 800f756:	3710      	adds	r7, #16
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	00ffff2f 	.word	0x00ffff2f
 800f760:	ffe0f8fe 	.word	0xffe0f8fe

0800f764 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b086      	sub	sp, #24
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	689b      	ldr	r3, [r3, #8]
 800f772:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	f003 0304 	and.w	r3, r3, #4
 800f782:	2b00      	cmp	r3, #0
 800f784:	d064      	beq.n	800f850 <HAL_QSPI_IRQHandler+0xec>
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d05f      	beq.n	800f850 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	3320      	adds	r3, #32
 800f796:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	2b12      	cmp	r3, #18
 800f7a2:	d125      	bne.n	800f7f0 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f7a4:	e01c      	b.n	800f7e0 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00f      	beq.n	800f7ce <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b2:	781a      	ldrb	r2, [r3, #0]
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7bc:	1c5a      	adds	r2, r3, #1
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c6:	1e5a      	subs	r2, r3, #1
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	62da      	str	r2, [r3, #44]	; 0x2c
 800f7cc:	e008      	b.n	800f7e0 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f7dc:	601a      	str	r2, [r3, #0]
          break;
 800f7de:	e033      	b.n	800f848 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	f003 0304 	and.w	r3, r3, #4
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d1db      	bne.n	800f7a6 <HAL_QSPI_IRQHandler+0x42>
 800f7ee:	e02b      	b.n	800f848 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	2b22      	cmp	r3, #34	; 0x22
 800f7fa:	d125      	bne.n	800f848 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f7fc:	e01d      	b.n	800f83a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f802:	2b00      	cmp	r3, #0
 800f804:	d010      	beq.n	800f828 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	7812      	ldrb	r2, [r2, #0]
 800f80e:	b2d2      	uxtb	r2, r2
 800f810:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f816:	1c5a      	adds	r2, r3, #1
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f820:	1e5a      	subs	r2, r3, #1
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	639a      	str	r2, [r3, #56]	; 0x38
 800f826:	e008      	b.n	800f83a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f836:	601a      	str	r2, [r3, #0]
          break;
 800f838:	e006      	b.n	800f848 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	f003 0304 	and.w	r3, r3, #4
 800f844:	2b00      	cmp	r3, #0
 800f846:	d1da      	bne.n	800f7fe <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f000 fbdd 	bl	8010008 <HAL_QSPI_FifoThresholdCallback>
 800f84e:	e13c      	b.n	800faca <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	f003 0302 	and.w	r3, r3, #2
 800f856:	2b00      	cmp	r3, #0
 800f858:	f000 80b0 	beq.w	800f9bc <HAL_QSPI_IRQHandler+0x258>
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f862:	2b00      	cmp	r3, #0
 800f864:	f000 80aa 	beq.w	800f9bc <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	2202      	movs	r2, #2
 800f86e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800f87e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f886:	b2db      	uxtb	r3, r3
 800f888:	2b12      	cmp	r3, #18
 800f88a:	d120      	bne.n	800f8ce <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f003 0304 	and.w	r3, r3, #4
 800f896:	2b00      	cmp	r3, #0
 800f898:	d011      	beq.n	800f8be <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f022 0204 	bic.w	r2, r2, #4
 800f8a8:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	68da      	ldr	r2, [r3, #12]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f022 0201 	bic.w	r2, r2, #1
 800f8bc:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f000 fb94 	bl	800fff4 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f8cc:	e0fa      	b.n	800fac4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	2b22      	cmp	r3, #34	; 0x22
 800f8d8:	d143      	bne.n	800f962 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f003 0304 	and.w	r3, r3, #4
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d012      	beq.n	800f90e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f022 0204 	bic.w	r2, r2, #4
 800f8f6:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	68da      	ldr	r2, [r3, #12]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f022 0201 	bic.w	r2, r2, #1
 800f90a:	60da      	str	r2, [r3, #12]
 800f90c:	e021      	b.n	800f952 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3320      	adds	r3, #32
 800f914:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800f916:	e013      	b.n	800f940 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d017      	beq.n	800f950 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f924:	68fa      	ldr	r2, [r7, #12]
 800f926:	7812      	ldrb	r2, [r2, #0]
 800f928:	b2d2      	uxtb	r2, r2
 800f92a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f930:	1c5a      	adds	r2, r3, #1
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f93a:	1e5a      	subs	r2, r3, #1
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1e4      	bne.n	800f918 <HAL_QSPI_IRQHandler+0x1b4>
 800f94e:	e000      	b.n	800f952 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800f950:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2201      	movs	r2, #1
 800f956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 fb40 	bl	800ffe0 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f960:	e0b0      	b.n	800fac4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	2b02      	cmp	r3, #2
 800f96c:	d107      	bne.n	800f97e <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2201      	movs	r2, #1
 800f972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 fb28 	bl	800ffcc <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f97c:	e0a2      	b.n	800fac4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f984:	b2db      	uxtb	r3, r3
 800f986:	2b08      	cmp	r3, #8
 800f988:	f040 809c 	bne.w	800fac4 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	695a      	ldr	r2, [r3, #20]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800f99a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d103      	bne.n	800f9b4 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 fb03 	bl	800ffb8 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f9b2:	e087      	b.n	800fac4 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f000 faf5 	bl	800ffa4 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f9ba:	e083      	b.n	800fac4 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	f003 0308 	and.w	r3, r3, #8
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d01f      	beq.n	800fa06 <HAL_QSPI_IRQHandler+0x2a2>
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d01a      	beq.n	800fa06 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2208      	movs	r2, #8
 800f9d6:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d00b      	beq.n	800f9fe <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800f9f4:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 fb0c 	bl	801001c <HAL_QSPI_StatusMatchCallback>
 800fa04:	e061      	b.n	800faca <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	f003 0301 	and.w	r3, r3, #1
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d047      	beq.n	800faa0 <HAL_QSPI_IRQHandler+0x33c>
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d042      	beq.n	800faa0 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800fa30:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa36:	f043 0202 	orr.w	r2, r3, #2
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f003 0304 	and.w	r3, r3, #4
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d021      	beq.n	800fa90 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f022 0204 	bic.w	r2, r2, #4
 800fa5a:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa60:	4a1c      	ldr	r2, [pc, #112]	; (800fad4 <HAL_QSPI_IRQHandler+0x370>)
 800fa62:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7ff fced 	bl	800f448 <HAL_MDMA_Abort_IT>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d029      	beq.n	800fac8 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa78:	f043 0204 	orr.w	r2, r3, #4
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2201      	movs	r2, #1
 800fa84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 fa8b 	bl	800ffa4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fa8e:	e01b      	b.n	800fac8 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2201      	movs	r2, #1
 800fa94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 fa83 	bl	800ffa4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fa9e:	e013      	b.n	800fac8 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	f003 0310 	and.w	r3, r3, #16
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d00f      	beq.n	800faca <HAL_QSPI_IRQHandler+0x366>
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00a      	beq.n	800faca <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2210      	movs	r2, #16
 800faba:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 fab7 	bl	8010030 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800fac2:	e002      	b.n	800faca <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fac4:	bf00      	nop
 800fac6:	e000      	b.n	800faca <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fac8:	bf00      	nop
}
 800faca:	bf00      	nop
 800facc:	3718      	adds	r7, #24
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	08010061 	.word	0x08010061

0800fad8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b088      	sub	sp, #32
 800fadc:	af02      	add	r7, sp, #8
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800fae4:	f7fd fafa 	bl	800d0dc <HAL_GetTick>
 800fae8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d101      	bne.n	800fafa <HAL_QSPI_Command+0x22>
 800faf6:	2302      	movs	r3, #2
 800faf8:	e048      	b.n	800fb8c <HAL_QSPI_Command+0xb4>
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2201      	movs	r2, #1
 800fafe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d137      	bne.n	800fb7e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2200      	movs	r2, #0
 800fb12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2202      	movs	r2, #2
 800fb18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	9300      	str	r3, [sp, #0]
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	2200      	movs	r2, #0
 800fb24:	2120      	movs	r1, #32
 800fb26:	68f8      	ldr	r0, [r7, #12]
 800fb28:	f000 facd 	bl	80100c6 <QSPI_WaitFlagStateUntilTimeout>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800fb30:	7dfb      	ldrb	r3, [r7, #23]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d125      	bne.n	800fb82 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800fb36:	2200      	movs	r2, #0
 800fb38:	68b9      	ldr	r1, [r7, #8]
 800fb3a:	68f8      	ldr	r0, [r7, #12]
 800fb3c:	f000 fafa 	bl	8010134 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d115      	bne.n	800fb74 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	9300      	str	r3, [sp, #0]
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	2201      	movs	r2, #1
 800fb50:	2102      	movs	r1, #2
 800fb52:	68f8      	ldr	r0, [r7, #12]
 800fb54:	f000 fab7 	bl	80100c6 <QSPI_WaitFlagStateUntilTimeout>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800fb5c:	7dfb      	ldrb	r3, [r7, #23]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d10f      	bne.n	800fb82 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	2202      	movs	r2, #2
 800fb68:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fb72:	e006      	b.n	800fb82 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2201      	movs	r2, #1
 800fb78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fb7c:	e001      	b.n	800fb82 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800fb7e:	2302      	movs	r3, #2
 800fb80:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800fb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3718      	adds	r7, #24
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b08a      	sub	sp, #40	; 0x28
 800fb98:	af02      	add	r7, sp, #8
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800fba4:	f7fd fa9a 	bl	800d0dc <HAL_GetTick>
 800fba8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	3320      	adds	r3, #32
 800fbb0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbb8:	b2db      	uxtb	r3, r3
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d101      	bne.n	800fbc2 <HAL_QSPI_Transmit+0x2e>
 800fbbe:	2302      	movs	r3, #2
 800fbc0:	e076      	b.n	800fcb0 <HAL_QSPI_Transmit+0x11c>
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	d165      	bne.n	800fca2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d056      	beq.n	800fc90 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2212      	movs	r2, #18
 800fbe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	691b      	ldr	r3, [r3, #16]
 800fbf0:	1c5a      	adds	r2, r3, #1
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	691b      	ldr	r3, [r3, #16]
 800fbfc:	1c5a      	adds	r2, r3, #1
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	68ba      	ldr	r2, [r7, #8]
 800fc06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	695a      	ldr	r2, [r3, #20]
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800fc16:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800fc18:	e01b      	b.n	800fc52 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	2201      	movs	r2, #1
 800fc22:	2104      	movs	r1, #4
 800fc24:	68f8      	ldr	r0, [r7, #12]
 800fc26:	f000 fa4e 	bl	80100c6 <QSPI_WaitFlagStateUntilTimeout>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800fc2e:	7ffb      	ldrb	r3, [r7, #31]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d113      	bne.n	800fc5c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc38:	781a      	ldrb	r2, [r3, #0]
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc42:	1c5a      	adds	r2, r3, #1
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc4c:	1e5a      	subs	r2, r3, #1
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d1df      	bne.n	800fc1a <HAL_QSPI_Transmit+0x86>
 800fc5a:	e000      	b.n	800fc5e <HAL_QSPI_Transmit+0xca>
          break;
 800fc5c:	bf00      	nop
      }

      if (status == HAL_OK)
 800fc5e:	7ffb      	ldrb	r3, [r7, #31]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d110      	bne.n	800fc86 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	9300      	str	r3, [sp, #0]
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	2102      	movs	r1, #2
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f000 fa29 	bl	80100c6 <QSPI_WaitFlagStateUntilTimeout>
 800fc74:	4603      	mov	r3, r0
 800fc76:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800fc78:	7ffb      	ldrb	r3, [r7, #31]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d103      	bne.n	800fc86 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2202      	movs	r2, #2
 800fc84:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2201      	movs	r2, #1
 800fc8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fc8e:	e00a      	b.n	800fca6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc94:	f043 0208 	orr.w	r2, r3, #8
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	77fb      	strb	r3, [r7, #31]
 800fca0:	e001      	b.n	800fca6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800fca2:	2302      	movs	r3, #2
 800fca4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800fcae:	7ffb      	ldrb	r3, [r7, #31]
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3720      	adds	r7, #32
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b08a      	sub	sp, #40	; 0x28
 800fcbc:	af02      	add	r7, sp, #8
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800fcc8:	f7fd fa08 	bl	800d0dc <HAL_GetTick>
 800fccc:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	699b      	ldr	r3, [r3, #24]
 800fcd4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	3320      	adds	r3, #32
 800fcdc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fce4:	b2db      	uxtb	r3, r3
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	d101      	bne.n	800fcee <HAL_QSPI_Receive+0x36>
 800fcea:	2302      	movs	r3, #2
 800fcec:	e07d      	b.n	800fdea <HAL_QSPI_Receive+0x132>
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2201      	movs	r2, #1
 800fcf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d16c      	bne.n	800fddc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2200      	movs	r2, #0
 800fd06:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d05d      	beq.n	800fdca <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2222      	movs	r2, #34	; 0x22
 800fd12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	691b      	ldr	r3, [r3, #16]
 800fd1c:	1c5a      	adds	r2, r3, #1
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	691b      	ldr	r3, [r3, #16]
 800fd28:	1c5a      	adds	r2, r3, #1
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	695b      	ldr	r3, [r3, #20]
 800fd3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800fd46:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	697a      	ldr	r2, [r7, #20]
 800fd4e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800fd50:	e01c      	b.n	800fd8c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	9300      	str	r3, [sp, #0]
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	2201      	movs	r2, #1
 800fd5a:	2106      	movs	r1, #6
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f000 f9b2 	bl	80100c6 <QSPI_WaitFlagStateUntilTimeout>
 800fd62:	4603      	mov	r3, r0
 800fd64:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800fd66:	7ffb      	ldrb	r3, [r7, #31]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d114      	bne.n	800fd96 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd70:	693a      	ldr	r2, [r7, #16]
 800fd72:	7812      	ldrb	r2, [r2, #0]
 800fd74:	b2d2      	uxtb	r2, r2
 800fd76:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd7c:	1c5a      	adds	r2, r3, #1
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd86:	1e5a      	subs	r2, r3, #1
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d1de      	bne.n	800fd52 <HAL_QSPI_Receive+0x9a>
 800fd94:	e000      	b.n	800fd98 <HAL_QSPI_Receive+0xe0>
          break;
 800fd96:	bf00      	nop
      }

      if (status == HAL_OK)
 800fd98:	7ffb      	ldrb	r3, [r7, #31]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d110      	bne.n	800fdc0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	9300      	str	r3, [sp, #0]
 800fda2:	69bb      	ldr	r3, [r7, #24]
 800fda4:	2201      	movs	r2, #1
 800fda6:	2102      	movs	r1, #2
 800fda8:	68f8      	ldr	r0, [r7, #12]
 800fdaa:	f000 f98c 	bl	80100c6 <QSPI_WaitFlagStateUntilTimeout>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800fdb2:	7ffb      	ldrb	r3, [r7, #31]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d103      	bne.n	800fdc0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2202      	movs	r2, #2
 800fdbe:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fdc8:	e00a      	b.n	800fde0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdce:	f043 0208 	orr.w	r2, r3, #8
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	77fb      	strb	r3, [r7, #31]
 800fdda:	e001      	b.n	800fde0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800fddc:	2302      	movs	r3, #2
 800fdde:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2200      	movs	r2, #0
 800fde4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800fde8:	7ffb      	ldrb	r3, [r7, #31]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3720      	adds	r7, #32
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b088      	sub	sp, #32
 800fdf6:	af02      	add	r7, sp, #8
 800fdf8:	60f8      	str	r0, [r7, #12]
 800fdfa:	60b9      	str	r1, [r7, #8]
 800fdfc:	607a      	str	r2, [r7, #4]
 800fdfe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800fe00:	f7fd f96c 	bl	800d0dc <HAL_GetTick>
 800fe04:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d101      	bne.n	800fe16 <HAL_QSPI_AutoPolling+0x24>
 800fe12:	2302      	movs	r3, #2
 800fe14:	e060      	b.n	800fed8 <HAL_QSPI_AutoPolling+0xe6>
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d14f      	bne.n	800feca <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	2242      	movs	r2, #66	; 0x42
 800fe34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	9300      	str	r3, [sp, #0]
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	2120      	movs	r1, #32
 800fe42:	68f8      	ldr	r0, [r7, #12]
 800fe44:	f000 f93f 	bl	80100c6 <QSPI_WaitFlagStateUntilTimeout>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800fe4c:	7dfb      	ldrb	r3, [r7, #23]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d13d      	bne.n	800fece <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	6812      	ldr	r2, [r2, #0]
 800fe5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	6852      	ldr	r2, [r2, #4]
 800fe64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	687a      	ldr	r2, [r7, #4]
 800fe6c:	6892      	ldr	r2, [r2, #8]
 800fe6e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	691b      	ldr	r3, [r3, #16]
 800fe7e:	431a      	orrs	r2, r3
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800fe88:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	68da      	ldr	r2, [r3, #12]
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800fe92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fe96:	68b9      	ldr	r1, [r7, #8]
 800fe98:	68f8      	ldr	r0, [r7, #12]
 800fe9a:	f000 f94b 	bl	8010134 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	9300      	str	r3, [sp, #0]
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	2201      	movs	r2, #1
 800fea6:	2108      	movs	r1, #8
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f000 f90c 	bl	80100c6 <QSPI_WaitFlagStateUntilTimeout>
 800feae:	4603      	mov	r3, r0
 800feb0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800feb2:	7dfb      	ldrb	r3, [r7, #23]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d10a      	bne.n	800fece <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2208      	movs	r2, #8
 800febe:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	2201      	movs	r2, #1
 800fec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fec8:	e001      	b.n	800fece <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800feca:	2302      	movs	r3, #2
 800fecc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2200      	movs	r2, #0
 800fed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800fed6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3718      	adds	r7, #24
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b088      	sub	sp, #32
 800fee4:	af02      	add	r7, sp, #8
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800feec:	f7fd f8f6 	bl	800d0dc <HAL_GetTick>
 800fef0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fef8:	b2db      	uxtb	r3, r3
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d101      	bne.n	800ff02 <HAL_QSPI_MemoryMapped+0x22>
 800fefe:	2302      	movs	r3, #2
 800ff00:	e04c      	b.n	800ff9c <HAL_QSPI_MemoryMapped+0xbc>
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2201      	movs	r2, #1
 800ff06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d13b      	bne.n	800ff8e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2282      	movs	r2, #130	; 0x82
 800ff20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	2120      	movs	r1, #32
 800ff30:	68f8      	ldr	r0, [r7, #12]
 800ff32:	f000 f8c8 	bl	80100c6 <QSPI_WaitFlagStateUntilTimeout>
 800ff36:	4603      	mov	r3, r0
 800ff38:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800ff3a:	7dfb      	ldrb	r3, [r7, #23]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d128      	bne.n	800ff92 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f023 0108 	bic.w	r1, r3, #8
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	685a      	ldr	r2, [r3, #4]
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	430a      	orrs	r2, r1
 800ff54:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	2b08      	cmp	r3, #8
 800ff5c:	d110      	bne.n	800ff80 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	687a      	ldr	r2, [r7, #4]
 800ff64:	6812      	ldr	r2, [r2, #0]
 800ff66:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2210      	movs	r2, #16
 800ff6e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	681a      	ldr	r2, [r3, #0]
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ff7e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800ff80:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800ff84:	68b9      	ldr	r1, [r7, #8]
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f000 f8d4 	bl	8010134 <QSPI_Config>
 800ff8c:	e001      	b.n	800ff92 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ff8e:	2302      	movs	r3, #2
 800ff90:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2200      	movs	r2, #0
 800ff96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ff9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3718      	adds	r7, #24
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b083      	sub	sp, #12
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800ffac:	bf00      	nop
 800ffae:	370c      	adds	r7, #12
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr

0800ffb8 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800ffc0:	bf00      	nop
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800ffd4:	bf00      	nop
 800ffd6:	370c      	adds	r7, #12
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr

0800ffe0 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b083      	sub	sp, #12
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800ffe8:	bf00      	nop
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800fffc:	bf00      	nop
 800fffe:	370c      	adds	r7, #12
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8010010:	bf00      	nop
 8010012:	370c      	adds	r7, #12
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr

0801001c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8010024:	bf00      	nop
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr

08010030 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8010030:	b480      	push	{r7}
 8010032:	b083      	sub	sp, #12
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8010038:	bf00      	nop
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	683a      	ldr	r2, [r7, #0]
 8010052:	649a      	str	r2, [r3, #72]	; 0x48
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801006c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2200      	movs	r2, #0
 8010072:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2200      	movs	r2, #0
 8010078:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010080:	b2db      	uxtb	r3, r3
 8010082:	2b08      	cmp	r3, #8
 8010084:	d114      	bne.n	80100b0 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2202      	movs	r2, #2
 801008c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	681a      	ldr	r2, [r3, #0]
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801009c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f042 0202 	orr.w	r2, r2, #2
 80100ac:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80100ae:	e006      	b.n	80100be <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2201      	movs	r2, #1
 80100b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80100b8:	68f8      	ldr	r0, [r7, #12]
 80100ba:	f7ff ff73 	bl	800ffa4 <HAL_QSPI_ErrorCallback>
}
 80100be:	bf00      	nop
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}

080100c6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80100c6:	b580      	push	{r7, lr}
 80100c8:	b084      	sub	sp, #16
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	60f8      	str	r0, [r7, #12]
 80100ce:	60b9      	str	r1, [r7, #8]
 80100d0:	603b      	str	r3, [r7, #0]
 80100d2:	4613      	mov	r3, r2
 80100d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80100d6:	e01a      	b.n	801010e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100de:	d016      	beq.n	801010e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100e0:	f7fc fffc 	bl	800d0dc <HAL_GetTick>
 80100e4:	4602      	mov	r2, r0
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	1ad3      	subs	r3, r2, r3
 80100ea:	69ba      	ldr	r2, [r7, #24]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d302      	bcc.n	80100f6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80100f0:	69bb      	ldr	r3, [r7, #24]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d10b      	bne.n	801010e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2204      	movs	r2, #4
 80100fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010102:	f043 0201 	orr.w	r2, r3, #1
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 801010a:	2301      	movs	r3, #1
 801010c:	e00e      	b.n	801012c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	689a      	ldr	r2, [r3, #8]
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	4013      	ands	r3, r2
 8010118:	2b00      	cmp	r3, #0
 801011a:	bf14      	ite	ne
 801011c:	2301      	movne	r3, #1
 801011e:	2300      	moveq	r3, #0
 8010120:	b2db      	uxtb	r3, r3
 8010122:	461a      	mov	r2, r3
 8010124:	79fb      	ldrb	r3, [r7, #7]
 8010126:	429a      	cmp	r2, r3
 8010128:	d1d6      	bne.n	80100d8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801012a:	2300      	movs	r3, #0
}
 801012c:	4618      	mov	r0, r3
 801012e:	3710      	adds	r7, #16
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8010134:	b480      	push	{r7}
 8010136:	b085      	sub	sp, #20
 8010138:	af00      	add	r7, sp, #0
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010144:	2b00      	cmp	r3, #0
 8010146:	d009      	beq.n	801015c <QSPI_Config+0x28>
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801014e:	d005      	beq.n	801015c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	3a01      	subs	r2, #1
 801015a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	699b      	ldr	r3, [r3, #24]
 8010160:	2b00      	cmp	r3, #0
 8010162:	f000 80b9 	beq.w	80102d8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	6a1b      	ldr	r3, [r3, #32]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d05f      	beq.n	801022e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	68ba      	ldr	r2, [r7, #8]
 8010174:	6892      	ldr	r2, [r2, #8]
 8010176:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	69db      	ldr	r3, [r3, #28]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d031      	beq.n	80101e4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010188:	431a      	orrs	r2, r3
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801018e:	431a      	orrs	r2, r3
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010194:	431a      	orrs	r2, r3
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	695b      	ldr	r3, [r3, #20]
 801019a:	049b      	lsls	r3, r3, #18
 801019c:	431a      	orrs	r2, r3
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	691b      	ldr	r3, [r3, #16]
 80101a2:	431a      	orrs	r2, r3
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	6a1b      	ldr	r3, [r3, #32]
 80101a8:	431a      	orrs	r2, r3
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	68db      	ldr	r3, [r3, #12]
 80101ae:	431a      	orrs	r2, r3
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	69db      	ldr	r3, [r3, #28]
 80101b4:	431a      	orrs	r2, r3
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	699b      	ldr	r3, [r3, #24]
 80101ba:	431a      	orrs	r2, r3
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	ea42 0103 	orr.w	r1, r2, r3
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	430a      	orrs	r2, r1
 80101cc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80101d4:	f000 812e 	beq.w	8010434 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	68ba      	ldr	r2, [r7, #8]
 80101de:	6852      	ldr	r2, [r2, #4]
 80101e0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80101e2:	e127      	b.n	8010434 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ec:	431a      	orrs	r2, r3
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101f2:	431a      	orrs	r2, r3
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f8:	431a      	orrs	r2, r3
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	695b      	ldr	r3, [r3, #20]
 80101fe:	049b      	lsls	r3, r3, #18
 8010200:	431a      	orrs	r2, r3
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	691b      	ldr	r3, [r3, #16]
 8010206:	431a      	orrs	r2, r3
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	6a1b      	ldr	r3, [r3, #32]
 801020c:	431a      	orrs	r2, r3
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	69db      	ldr	r3, [r3, #28]
 8010212:	431a      	orrs	r2, r3
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	699b      	ldr	r3, [r3, #24]
 8010218:	431a      	orrs	r2, r3
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	ea42 0103 	orr.w	r1, r2, r3
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	430a      	orrs	r2, r1
 801022a:	615a      	str	r2, [r3, #20]
}
 801022c:	e102      	b.n	8010434 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	69db      	ldr	r3, [r3, #28]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d02e      	beq.n	8010294 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801023e:	431a      	orrs	r2, r3
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010244:	431a      	orrs	r2, r3
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024a:	431a      	orrs	r2, r3
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	695b      	ldr	r3, [r3, #20]
 8010250:	049b      	lsls	r3, r3, #18
 8010252:	431a      	orrs	r2, r3
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	6a1b      	ldr	r3, [r3, #32]
 8010258:	431a      	orrs	r2, r3
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	68db      	ldr	r3, [r3, #12]
 801025e:	431a      	orrs	r2, r3
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	69db      	ldr	r3, [r3, #28]
 8010264:	431a      	orrs	r2, r3
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	699b      	ldr	r3, [r3, #24]
 801026a:	431a      	orrs	r2, r3
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	ea42 0103 	orr.w	r1, r2, r3
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	430a      	orrs	r2, r1
 801027c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010284:	f000 80d6 	beq.w	8010434 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	68ba      	ldr	r2, [r7, #8]
 801028e:	6852      	ldr	r2, [r2, #4]
 8010290:	619a      	str	r2, [r3, #24]
}
 8010292:	e0cf      	b.n	8010434 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801029c:	431a      	orrs	r2, r3
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102a2:	431a      	orrs	r2, r3
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a8:	431a      	orrs	r2, r3
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	695b      	ldr	r3, [r3, #20]
 80102ae:	049b      	lsls	r3, r3, #18
 80102b0:	431a      	orrs	r2, r3
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	6a1b      	ldr	r3, [r3, #32]
 80102b6:	431a      	orrs	r2, r3
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	69db      	ldr	r3, [r3, #28]
 80102bc:	431a      	orrs	r2, r3
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	699b      	ldr	r3, [r3, #24]
 80102c2:	431a      	orrs	r2, r3
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	ea42 0103 	orr.w	r1, r2, r3
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	430a      	orrs	r2, r1
 80102d4:	615a      	str	r2, [r3, #20]
}
 80102d6:	e0ad      	b.n	8010434 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	6a1b      	ldr	r3, [r3, #32]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d058      	beq.n	8010392 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	6892      	ldr	r2, [r2, #8]
 80102e8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	69db      	ldr	r3, [r3, #28]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d02d      	beq.n	801034e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102fa:	431a      	orrs	r2, r3
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010300:	431a      	orrs	r2, r3
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010306:	431a      	orrs	r2, r3
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	695b      	ldr	r3, [r3, #20]
 801030c:	049b      	lsls	r3, r3, #18
 801030e:	431a      	orrs	r2, r3
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	691b      	ldr	r3, [r3, #16]
 8010314:	431a      	orrs	r2, r3
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	6a1b      	ldr	r3, [r3, #32]
 801031a:	431a      	orrs	r2, r3
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	68db      	ldr	r3, [r3, #12]
 8010320:	431a      	orrs	r2, r3
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	69db      	ldr	r3, [r3, #28]
 8010326:	431a      	orrs	r2, r3
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	699b      	ldr	r3, [r3, #24]
 801032c:	ea42 0103 	orr.w	r1, r2, r3
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	430a      	orrs	r2, r1
 8010338:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010340:	d078      	beq.n	8010434 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	68ba      	ldr	r2, [r7, #8]
 8010348:	6852      	ldr	r2, [r2, #4]
 801034a:	619a      	str	r2, [r3, #24]
}
 801034c:	e072      	b.n	8010434 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010356:	431a      	orrs	r2, r3
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801035c:	431a      	orrs	r2, r3
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010362:	431a      	orrs	r2, r3
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	695b      	ldr	r3, [r3, #20]
 8010368:	049b      	lsls	r3, r3, #18
 801036a:	431a      	orrs	r2, r3
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	691b      	ldr	r3, [r3, #16]
 8010370:	431a      	orrs	r2, r3
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	6a1b      	ldr	r3, [r3, #32]
 8010376:	431a      	orrs	r2, r3
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	69db      	ldr	r3, [r3, #28]
 801037c:	431a      	orrs	r2, r3
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	699b      	ldr	r3, [r3, #24]
 8010382:	ea42 0103 	orr.w	r1, r2, r3
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	430a      	orrs	r2, r1
 801038e:	615a      	str	r2, [r3, #20]
}
 8010390:	e050      	b.n	8010434 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	69db      	ldr	r3, [r3, #28]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d02a      	beq.n	80103f0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103a2:	431a      	orrs	r2, r3
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103a8:	431a      	orrs	r2, r3
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ae:	431a      	orrs	r2, r3
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	695b      	ldr	r3, [r3, #20]
 80103b4:	049b      	lsls	r3, r3, #18
 80103b6:	431a      	orrs	r2, r3
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	6a1b      	ldr	r3, [r3, #32]
 80103bc:	431a      	orrs	r2, r3
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	68db      	ldr	r3, [r3, #12]
 80103c2:	431a      	orrs	r2, r3
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	69db      	ldr	r3, [r3, #28]
 80103c8:	431a      	orrs	r2, r3
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	699b      	ldr	r3, [r3, #24]
 80103ce:	ea42 0103 	orr.w	r1, r2, r3
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	430a      	orrs	r2, r1
 80103da:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80103e2:	d027      	beq.n	8010434 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	68ba      	ldr	r2, [r7, #8]
 80103ea:	6852      	ldr	r2, [r2, #4]
 80103ec:	619a      	str	r2, [r3, #24]
}
 80103ee:	e021      	b.n	8010434 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d01d      	beq.n	8010434 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010400:	431a      	orrs	r2, r3
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010406:	431a      	orrs	r2, r3
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801040c:	431a      	orrs	r2, r3
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	695b      	ldr	r3, [r3, #20]
 8010412:	049b      	lsls	r3, r3, #18
 8010414:	431a      	orrs	r2, r3
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	6a1b      	ldr	r3, [r3, #32]
 801041a:	431a      	orrs	r2, r3
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	69db      	ldr	r3, [r3, #28]
 8010420:	431a      	orrs	r2, r3
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	699b      	ldr	r3, [r3, #24]
 8010426:	ea42 0103 	orr.w	r1, r2, r3
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	430a      	orrs	r2, r1
 8010432:	615a      	str	r2, [r3, #20]
}
 8010434:	bf00      	nop
 8010436:	3714      	adds	r7, #20
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr

08010440 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b08c      	sub	sp, #48	; 0x30
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d102      	bne.n	8010454 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801044e:	2301      	movs	r3, #1
 8010450:	f000 bc1c 	b.w	8010c8c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f003 0301 	and.w	r3, r3, #1
 801045c:	2b00      	cmp	r3, #0
 801045e:	f000 8087 	beq.w	8010570 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010462:	4b9e      	ldr	r3, [pc, #632]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 8010464:	691b      	ldr	r3, [r3, #16]
 8010466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801046a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801046c:	4b9b      	ldr	r3, [pc, #620]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 801046e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010470:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8010472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010474:	2b10      	cmp	r3, #16
 8010476:	d007      	beq.n	8010488 <HAL_RCC_OscConfig+0x48>
 8010478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047a:	2b18      	cmp	r3, #24
 801047c:	d110      	bne.n	80104a0 <HAL_RCC_OscConfig+0x60>
 801047e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010480:	f003 0303 	and.w	r3, r3, #3
 8010484:	2b02      	cmp	r3, #2
 8010486:	d10b      	bne.n	80104a0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010488:	4b94      	ldr	r3, [pc, #592]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010490:	2b00      	cmp	r3, #0
 8010492:	d06c      	beq.n	801056e <HAL_RCC_OscConfig+0x12e>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	685b      	ldr	r3, [r3, #4]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d168      	bne.n	801056e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 801049c:	2301      	movs	r3, #1
 801049e:	e3f5      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104a8:	d106      	bne.n	80104b8 <HAL_RCC_OscConfig+0x78>
 80104aa:	4b8c      	ldr	r3, [pc, #560]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	4a8b      	ldr	r2, [pc, #556]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80104b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80104b4:	6013      	str	r3, [r2, #0]
 80104b6:	e02e      	b.n	8010516 <HAL_RCC_OscConfig+0xd6>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d10c      	bne.n	80104da <HAL_RCC_OscConfig+0x9a>
 80104c0:	4b86      	ldr	r3, [pc, #536]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4a85      	ldr	r2, [pc, #532]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80104c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80104ca:	6013      	str	r3, [r2, #0]
 80104cc:	4b83      	ldr	r3, [pc, #524]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4a82      	ldr	r2, [pc, #520]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80104d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80104d6:	6013      	str	r3, [r2, #0]
 80104d8:	e01d      	b.n	8010516 <HAL_RCC_OscConfig+0xd6>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80104e2:	d10c      	bne.n	80104fe <HAL_RCC_OscConfig+0xbe>
 80104e4:	4b7d      	ldr	r3, [pc, #500]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4a7c      	ldr	r2, [pc, #496]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80104ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80104ee:	6013      	str	r3, [r2, #0]
 80104f0:	4b7a      	ldr	r3, [pc, #488]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	4a79      	ldr	r2, [pc, #484]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80104f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80104fa:	6013      	str	r3, [r2, #0]
 80104fc:	e00b      	b.n	8010516 <HAL_RCC_OscConfig+0xd6>
 80104fe:	4b77      	ldr	r3, [pc, #476]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	4a76      	ldr	r2, [pc, #472]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 8010504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010508:	6013      	str	r3, [r2, #0]
 801050a:	4b74      	ldr	r3, [pc, #464]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4a73      	ldr	r2, [pc, #460]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 8010510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010514:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d013      	beq.n	8010546 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801051e:	f7fc fddd 	bl	800d0dc <HAL_GetTick>
 8010522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010524:	e008      	b.n	8010538 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010526:	f7fc fdd9 	bl	800d0dc <HAL_GetTick>
 801052a:	4602      	mov	r2, r0
 801052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	2b64      	cmp	r3, #100	; 0x64
 8010532:	d901      	bls.n	8010538 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8010534:	2303      	movs	r3, #3
 8010536:	e3a9      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010538:	4b68      	ldr	r3, [pc, #416]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010540:	2b00      	cmp	r3, #0
 8010542:	d0f0      	beq.n	8010526 <HAL_RCC_OscConfig+0xe6>
 8010544:	e014      	b.n	8010570 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010546:	f7fc fdc9 	bl	800d0dc <HAL_GetTick>
 801054a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801054c:	e008      	b.n	8010560 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801054e:	f7fc fdc5 	bl	800d0dc <HAL_GetTick>
 8010552:	4602      	mov	r2, r0
 8010554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010556:	1ad3      	subs	r3, r2, r3
 8010558:	2b64      	cmp	r3, #100	; 0x64
 801055a:	d901      	bls.n	8010560 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 801055c:	2303      	movs	r3, #3
 801055e:	e395      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010560:	4b5e      	ldr	r3, [pc, #376]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010568:	2b00      	cmp	r3, #0
 801056a:	d1f0      	bne.n	801054e <HAL_RCC_OscConfig+0x10e>
 801056c:	e000      	b.n	8010570 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801056e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f003 0302 	and.w	r3, r3, #2
 8010578:	2b00      	cmp	r3, #0
 801057a:	f000 80ca 	beq.w	8010712 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801057e:	4b57      	ldr	r3, [pc, #348]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 8010580:	691b      	ldr	r3, [r3, #16]
 8010582:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010586:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010588:	4b54      	ldr	r3, [pc, #336]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 801058a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801058c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801058e:	6a3b      	ldr	r3, [r7, #32]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d007      	beq.n	80105a4 <HAL_RCC_OscConfig+0x164>
 8010594:	6a3b      	ldr	r3, [r7, #32]
 8010596:	2b18      	cmp	r3, #24
 8010598:	d156      	bne.n	8010648 <HAL_RCC_OscConfig+0x208>
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	f003 0303 	and.w	r3, r3, #3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d151      	bne.n	8010648 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80105a4:	4b4d      	ldr	r3, [pc, #308]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f003 0304 	and.w	r3, r3, #4
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d005      	beq.n	80105bc <HAL_RCC_OscConfig+0x17c>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d101      	bne.n	80105bc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80105b8:	2301      	movs	r3, #1
 80105ba:	e367      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80105bc:	4b47      	ldr	r3, [pc, #284]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f023 0219 	bic.w	r2, r3, #25
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	4944      	ldr	r1, [pc, #272]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80105ca:	4313      	orrs	r3, r2
 80105cc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80105ce:	f7fc fd85 	bl	800d0dc <HAL_GetTick>
 80105d2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80105d4:	e008      	b.n	80105e8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80105d6:	f7fc fd81 	bl	800d0dc <HAL_GetTick>
 80105da:	4602      	mov	r2, r0
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	1ad3      	subs	r3, r2, r3
 80105e0:	2b02      	cmp	r3, #2
 80105e2:	d901      	bls.n	80105e8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80105e4:	2303      	movs	r3, #3
 80105e6:	e351      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80105e8:	4b3c      	ldr	r3, [pc, #240]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f003 0304 	and.w	r3, r3, #4
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d0f0      	beq.n	80105d6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80105f4:	f7fc fd7e 	bl	800d0f4 <HAL_GetREVID>
 80105f8:	4603      	mov	r3, r0
 80105fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80105fe:	4293      	cmp	r3, r2
 8010600:	d817      	bhi.n	8010632 <HAL_RCC_OscConfig+0x1f2>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	691b      	ldr	r3, [r3, #16]
 8010606:	2b40      	cmp	r3, #64	; 0x40
 8010608:	d108      	bne.n	801061c <HAL_RCC_OscConfig+0x1dc>
 801060a:	4b34      	ldr	r3, [pc, #208]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8010612:	4a32      	ldr	r2, [pc, #200]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 8010614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010618:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801061a:	e07a      	b.n	8010712 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801061c:	4b2f      	ldr	r3, [pc, #188]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	691b      	ldr	r3, [r3, #16]
 8010628:	031b      	lsls	r3, r3, #12
 801062a:	492c      	ldr	r1, [pc, #176]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 801062c:	4313      	orrs	r3, r2
 801062e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010630:	e06f      	b.n	8010712 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010632:	4b2a      	ldr	r3, [pc, #168]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	691b      	ldr	r3, [r3, #16]
 801063e:	061b      	lsls	r3, r3, #24
 8010640:	4926      	ldr	r1, [pc, #152]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 8010642:	4313      	orrs	r3, r2
 8010644:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010646:	e064      	b.n	8010712 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	68db      	ldr	r3, [r3, #12]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d047      	beq.n	80106e0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010650:	4b22      	ldr	r3, [pc, #136]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f023 0219 	bic.w	r2, r3, #25
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	491f      	ldr	r1, [pc, #124]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 801065e:	4313      	orrs	r3, r2
 8010660:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010662:	f7fc fd3b 	bl	800d0dc <HAL_GetTick>
 8010666:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010668:	e008      	b.n	801067c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801066a:	f7fc fd37 	bl	800d0dc <HAL_GetTick>
 801066e:	4602      	mov	r2, r0
 8010670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010672:	1ad3      	subs	r3, r2, r3
 8010674:	2b02      	cmp	r3, #2
 8010676:	d901      	bls.n	801067c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8010678:	2303      	movs	r3, #3
 801067a:	e307      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801067c:	4b17      	ldr	r3, [pc, #92]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	f003 0304 	and.w	r3, r3, #4
 8010684:	2b00      	cmp	r3, #0
 8010686:	d0f0      	beq.n	801066a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010688:	f7fc fd34 	bl	800d0f4 <HAL_GetREVID>
 801068c:	4603      	mov	r3, r0
 801068e:	f241 0203 	movw	r2, #4099	; 0x1003
 8010692:	4293      	cmp	r3, r2
 8010694:	d817      	bhi.n	80106c6 <HAL_RCC_OscConfig+0x286>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	691b      	ldr	r3, [r3, #16]
 801069a:	2b40      	cmp	r3, #64	; 0x40
 801069c:	d108      	bne.n	80106b0 <HAL_RCC_OscConfig+0x270>
 801069e:	4b0f      	ldr	r3, [pc, #60]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80106a6:	4a0d      	ldr	r2, [pc, #52]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80106a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80106ac:	6053      	str	r3, [r2, #4]
 80106ae:	e030      	b.n	8010712 <HAL_RCC_OscConfig+0x2d2>
 80106b0:	4b0a      	ldr	r3, [pc, #40]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	691b      	ldr	r3, [r3, #16]
 80106bc:	031b      	lsls	r3, r3, #12
 80106be:	4907      	ldr	r1, [pc, #28]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80106c0:	4313      	orrs	r3, r2
 80106c2:	604b      	str	r3, [r1, #4]
 80106c4:	e025      	b.n	8010712 <HAL_RCC_OscConfig+0x2d2>
 80106c6:	4b05      	ldr	r3, [pc, #20]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80106c8:	685b      	ldr	r3, [r3, #4]
 80106ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	691b      	ldr	r3, [r3, #16]
 80106d2:	061b      	lsls	r3, r3, #24
 80106d4:	4901      	ldr	r1, [pc, #4]	; (80106dc <HAL_RCC_OscConfig+0x29c>)
 80106d6:	4313      	orrs	r3, r2
 80106d8:	604b      	str	r3, [r1, #4]
 80106da:	e01a      	b.n	8010712 <HAL_RCC_OscConfig+0x2d2>
 80106dc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80106e0:	4b9e      	ldr	r3, [pc, #632]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	4a9d      	ldr	r2, [pc, #628]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 80106e6:	f023 0301 	bic.w	r3, r3, #1
 80106ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106ec:	f7fc fcf6 	bl	800d0dc <HAL_GetTick>
 80106f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80106f2:	e008      	b.n	8010706 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80106f4:	f7fc fcf2 	bl	800d0dc <HAL_GetTick>
 80106f8:	4602      	mov	r2, r0
 80106fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	2b02      	cmp	r3, #2
 8010700:	d901      	bls.n	8010706 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8010702:	2303      	movs	r3, #3
 8010704:	e2c2      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010706:	4b95      	ldr	r3, [pc, #596]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f003 0304 	and.w	r3, r3, #4
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1f0      	bne.n	80106f4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f003 0310 	and.w	r3, r3, #16
 801071a:	2b00      	cmp	r3, #0
 801071c:	f000 80a9 	beq.w	8010872 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010720:	4b8e      	ldr	r3, [pc, #568]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010722:	691b      	ldr	r3, [r3, #16]
 8010724:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010728:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801072a:	4b8c      	ldr	r3, [pc, #560]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 801072c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801072e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010730:	69bb      	ldr	r3, [r7, #24]
 8010732:	2b08      	cmp	r3, #8
 8010734:	d007      	beq.n	8010746 <HAL_RCC_OscConfig+0x306>
 8010736:	69bb      	ldr	r3, [r7, #24]
 8010738:	2b18      	cmp	r3, #24
 801073a:	d13a      	bne.n	80107b2 <HAL_RCC_OscConfig+0x372>
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	f003 0303 	and.w	r3, r3, #3
 8010742:	2b01      	cmp	r3, #1
 8010744:	d135      	bne.n	80107b2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010746:	4b85      	ldr	r3, [pc, #532]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801074e:	2b00      	cmp	r3, #0
 8010750:	d005      	beq.n	801075e <HAL_RCC_OscConfig+0x31e>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	69db      	ldr	r3, [r3, #28]
 8010756:	2b80      	cmp	r3, #128	; 0x80
 8010758:	d001      	beq.n	801075e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 801075a:	2301      	movs	r3, #1
 801075c:	e296      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801075e:	f7fc fcc9 	bl	800d0f4 <HAL_GetREVID>
 8010762:	4603      	mov	r3, r0
 8010764:	f241 0203 	movw	r2, #4099	; 0x1003
 8010768:	4293      	cmp	r3, r2
 801076a:	d817      	bhi.n	801079c <HAL_RCC_OscConfig+0x35c>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6a1b      	ldr	r3, [r3, #32]
 8010770:	2b20      	cmp	r3, #32
 8010772:	d108      	bne.n	8010786 <HAL_RCC_OscConfig+0x346>
 8010774:	4b79      	ldr	r3, [pc, #484]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801077c:	4a77      	ldr	r2, [pc, #476]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 801077e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010782:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010784:	e075      	b.n	8010872 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010786:	4b75      	ldr	r3, [pc, #468]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6a1b      	ldr	r3, [r3, #32]
 8010792:	069b      	lsls	r3, r3, #26
 8010794:	4971      	ldr	r1, [pc, #452]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010796:	4313      	orrs	r3, r2
 8010798:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801079a:	e06a      	b.n	8010872 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801079c:	4b6f      	ldr	r3, [pc, #444]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6a1b      	ldr	r3, [r3, #32]
 80107a8:	061b      	lsls	r3, r3, #24
 80107aa:	496c      	ldr	r1, [pc, #432]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 80107ac:	4313      	orrs	r3, r2
 80107ae:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80107b0:	e05f      	b.n	8010872 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	69db      	ldr	r3, [r3, #28]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d042      	beq.n	8010840 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80107ba:	4b68      	ldr	r3, [pc, #416]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	4a67      	ldr	r2, [pc, #412]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 80107c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107c6:	f7fc fc89 	bl	800d0dc <HAL_GetTick>
 80107ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80107cc:	e008      	b.n	80107e0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80107ce:	f7fc fc85 	bl	800d0dc <HAL_GetTick>
 80107d2:	4602      	mov	r2, r0
 80107d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d6:	1ad3      	subs	r3, r2, r3
 80107d8:	2b02      	cmp	r3, #2
 80107da:	d901      	bls.n	80107e0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80107dc:	2303      	movs	r3, #3
 80107de:	e255      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80107e0:	4b5e      	ldr	r3, [pc, #376]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d0f0      	beq.n	80107ce <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80107ec:	f7fc fc82 	bl	800d0f4 <HAL_GetREVID>
 80107f0:	4603      	mov	r3, r0
 80107f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d817      	bhi.n	801082a <HAL_RCC_OscConfig+0x3ea>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6a1b      	ldr	r3, [r3, #32]
 80107fe:	2b20      	cmp	r3, #32
 8010800:	d108      	bne.n	8010814 <HAL_RCC_OscConfig+0x3d4>
 8010802:	4b56      	ldr	r3, [pc, #344]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801080a:	4a54      	ldr	r2, [pc, #336]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 801080c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010810:	6053      	str	r3, [r2, #4]
 8010812:	e02e      	b.n	8010872 <HAL_RCC_OscConfig+0x432>
 8010814:	4b51      	ldr	r3, [pc, #324]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6a1b      	ldr	r3, [r3, #32]
 8010820:	069b      	lsls	r3, r3, #26
 8010822:	494e      	ldr	r1, [pc, #312]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010824:	4313      	orrs	r3, r2
 8010826:	604b      	str	r3, [r1, #4]
 8010828:	e023      	b.n	8010872 <HAL_RCC_OscConfig+0x432>
 801082a:	4b4c      	ldr	r3, [pc, #304]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 801082c:	68db      	ldr	r3, [r3, #12]
 801082e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6a1b      	ldr	r3, [r3, #32]
 8010836:	061b      	lsls	r3, r3, #24
 8010838:	4948      	ldr	r1, [pc, #288]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 801083a:	4313      	orrs	r3, r2
 801083c:	60cb      	str	r3, [r1, #12]
 801083e:	e018      	b.n	8010872 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010840:	4b46      	ldr	r3, [pc, #280]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4a45      	ldr	r2, [pc, #276]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801084a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801084c:	f7fc fc46 	bl	800d0dc <HAL_GetTick>
 8010850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010852:	e008      	b.n	8010866 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8010854:	f7fc fc42 	bl	800d0dc <HAL_GetTick>
 8010858:	4602      	mov	r2, r0
 801085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085c:	1ad3      	subs	r3, r2, r3
 801085e:	2b02      	cmp	r3, #2
 8010860:	d901      	bls.n	8010866 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8010862:	2303      	movs	r3, #3
 8010864:	e212      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010866:	4b3d      	ldr	r3, [pc, #244]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801086e:	2b00      	cmp	r3, #0
 8010870:	d1f0      	bne.n	8010854 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f003 0308 	and.w	r3, r3, #8
 801087a:	2b00      	cmp	r3, #0
 801087c:	d036      	beq.n	80108ec <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	695b      	ldr	r3, [r3, #20]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d019      	beq.n	80108ba <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010886:	4b35      	ldr	r3, [pc, #212]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801088a:	4a34      	ldr	r2, [pc, #208]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 801088c:	f043 0301 	orr.w	r3, r3, #1
 8010890:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010892:	f7fc fc23 	bl	800d0dc <HAL_GetTick>
 8010896:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010898:	e008      	b.n	80108ac <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801089a:	f7fc fc1f 	bl	800d0dc <HAL_GetTick>
 801089e:	4602      	mov	r2, r0
 80108a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	2b02      	cmp	r3, #2
 80108a6:	d901      	bls.n	80108ac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80108a8:	2303      	movs	r3, #3
 80108aa:	e1ef      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80108ac:	4b2b      	ldr	r3, [pc, #172]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 80108ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108b0:	f003 0302 	and.w	r3, r3, #2
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d0f0      	beq.n	801089a <HAL_RCC_OscConfig+0x45a>
 80108b8:	e018      	b.n	80108ec <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80108ba:	4b28      	ldr	r3, [pc, #160]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 80108bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108be:	4a27      	ldr	r2, [pc, #156]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 80108c0:	f023 0301 	bic.w	r3, r3, #1
 80108c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80108c6:	f7fc fc09 	bl	800d0dc <HAL_GetTick>
 80108ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80108cc:	e008      	b.n	80108e0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80108ce:	f7fc fc05 	bl	800d0dc <HAL_GetTick>
 80108d2:	4602      	mov	r2, r0
 80108d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	2b02      	cmp	r3, #2
 80108da:	d901      	bls.n	80108e0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80108dc:	2303      	movs	r3, #3
 80108de:	e1d5      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80108e0:	4b1e      	ldr	r3, [pc, #120]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 80108e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108e4:	f003 0302 	and.w	r3, r3, #2
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d1f0      	bne.n	80108ce <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f003 0320 	and.w	r3, r3, #32
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d039      	beq.n	801096c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	699b      	ldr	r3, [r3, #24]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d019      	beq.n	8010934 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010900:	4b16      	ldr	r3, [pc, #88]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a15      	ldr	r2, [pc, #84]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010906:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801090a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801090c:	f7fc fbe6 	bl	800d0dc <HAL_GetTick>
 8010910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010912:	e008      	b.n	8010926 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010914:	f7fc fbe2 	bl	800d0dc <HAL_GetTick>
 8010918:	4602      	mov	r2, r0
 801091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091c:	1ad3      	subs	r3, r2, r3
 801091e:	2b02      	cmp	r3, #2
 8010920:	d901      	bls.n	8010926 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8010922:	2303      	movs	r3, #3
 8010924:	e1b2      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010926:	4b0d      	ldr	r3, [pc, #52]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801092e:	2b00      	cmp	r3, #0
 8010930:	d0f0      	beq.n	8010914 <HAL_RCC_OscConfig+0x4d4>
 8010932:	e01b      	b.n	801096c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010934:	4b09      	ldr	r3, [pc, #36]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4a08      	ldr	r2, [pc, #32]	; (801095c <HAL_RCC_OscConfig+0x51c>)
 801093a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801093e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010940:	f7fc fbcc 	bl	800d0dc <HAL_GetTick>
 8010944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010946:	e00b      	b.n	8010960 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010948:	f7fc fbc8 	bl	800d0dc <HAL_GetTick>
 801094c:	4602      	mov	r2, r0
 801094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010950:	1ad3      	subs	r3, r2, r3
 8010952:	2b02      	cmp	r3, #2
 8010954:	d904      	bls.n	8010960 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8010956:	2303      	movs	r3, #3
 8010958:	e198      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
 801095a:	bf00      	nop
 801095c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010960:	4ba3      	ldr	r3, [pc, #652]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010968:	2b00      	cmp	r3, #0
 801096a:	d1ed      	bne.n	8010948 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f003 0304 	and.w	r3, r3, #4
 8010974:	2b00      	cmp	r3, #0
 8010976:	f000 8081 	beq.w	8010a7c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801097a:	4b9e      	ldr	r3, [pc, #632]	; (8010bf4 <HAL_RCC_OscConfig+0x7b4>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4a9d      	ldr	r2, [pc, #628]	; (8010bf4 <HAL_RCC_OscConfig+0x7b4>)
 8010980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010984:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010986:	f7fc fba9 	bl	800d0dc <HAL_GetTick>
 801098a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801098c:	e008      	b.n	80109a0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801098e:	f7fc fba5 	bl	800d0dc <HAL_GetTick>
 8010992:	4602      	mov	r2, r0
 8010994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010996:	1ad3      	subs	r3, r2, r3
 8010998:	2b64      	cmp	r3, #100	; 0x64
 801099a:	d901      	bls.n	80109a0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 801099c:	2303      	movs	r3, #3
 801099e:	e175      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80109a0:	4b94      	ldr	r3, [pc, #592]	; (8010bf4 <HAL_RCC_OscConfig+0x7b4>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d0f0      	beq.n	801098e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d106      	bne.n	80109c2 <HAL_RCC_OscConfig+0x582>
 80109b4:	4b8e      	ldr	r3, [pc, #568]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 80109b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109b8:	4a8d      	ldr	r2, [pc, #564]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 80109ba:	f043 0301 	orr.w	r3, r3, #1
 80109be:	6713      	str	r3, [r2, #112]	; 0x70
 80109c0:	e02d      	b.n	8010a1e <HAL_RCC_OscConfig+0x5de>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	689b      	ldr	r3, [r3, #8]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d10c      	bne.n	80109e4 <HAL_RCC_OscConfig+0x5a4>
 80109ca:	4b89      	ldr	r3, [pc, #548]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 80109cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109ce:	4a88      	ldr	r2, [pc, #544]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 80109d0:	f023 0301 	bic.w	r3, r3, #1
 80109d4:	6713      	str	r3, [r2, #112]	; 0x70
 80109d6:	4b86      	ldr	r3, [pc, #536]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 80109d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109da:	4a85      	ldr	r2, [pc, #532]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 80109dc:	f023 0304 	bic.w	r3, r3, #4
 80109e0:	6713      	str	r3, [r2, #112]	; 0x70
 80109e2:	e01c      	b.n	8010a1e <HAL_RCC_OscConfig+0x5de>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	689b      	ldr	r3, [r3, #8]
 80109e8:	2b05      	cmp	r3, #5
 80109ea:	d10c      	bne.n	8010a06 <HAL_RCC_OscConfig+0x5c6>
 80109ec:	4b80      	ldr	r3, [pc, #512]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 80109ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109f0:	4a7f      	ldr	r2, [pc, #508]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 80109f2:	f043 0304 	orr.w	r3, r3, #4
 80109f6:	6713      	str	r3, [r2, #112]	; 0x70
 80109f8:	4b7d      	ldr	r3, [pc, #500]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 80109fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109fc:	4a7c      	ldr	r2, [pc, #496]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 80109fe:	f043 0301 	orr.w	r3, r3, #1
 8010a02:	6713      	str	r3, [r2, #112]	; 0x70
 8010a04:	e00b      	b.n	8010a1e <HAL_RCC_OscConfig+0x5de>
 8010a06:	4b7a      	ldr	r3, [pc, #488]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a0a:	4a79      	ldr	r2, [pc, #484]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010a0c:	f023 0301 	bic.w	r3, r3, #1
 8010a10:	6713      	str	r3, [r2, #112]	; 0x70
 8010a12:	4b77      	ldr	r3, [pc, #476]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a16:	4a76      	ldr	r2, [pc, #472]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010a18:	f023 0304 	bic.w	r3, r3, #4
 8010a1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d015      	beq.n	8010a52 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a26:	f7fc fb59 	bl	800d0dc <HAL_GetTick>
 8010a2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010a2c:	e00a      	b.n	8010a44 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a2e:	f7fc fb55 	bl	800d0dc <HAL_GetTick>
 8010a32:	4602      	mov	r2, r0
 8010a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a36:	1ad3      	subs	r3, r2, r3
 8010a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d901      	bls.n	8010a44 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8010a40:	2303      	movs	r3, #3
 8010a42:	e123      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010a44:	4b6a      	ldr	r3, [pc, #424]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a48:	f003 0302 	and.w	r3, r3, #2
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d0ee      	beq.n	8010a2e <HAL_RCC_OscConfig+0x5ee>
 8010a50:	e014      	b.n	8010a7c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a52:	f7fc fb43 	bl	800d0dc <HAL_GetTick>
 8010a56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010a58:	e00a      	b.n	8010a70 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a5a:	f7fc fb3f 	bl	800d0dc <HAL_GetTick>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a62:	1ad3      	subs	r3, r2, r3
 8010a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d901      	bls.n	8010a70 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8010a6c:	2303      	movs	r3, #3
 8010a6e:	e10d      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010a70:	4b5f      	ldr	r3, [pc, #380]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a74:	f003 0302 	and.w	r3, r3, #2
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d1ee      	bne.n	8010a5a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f000 8102 	beq.w	8010c8a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8010a86:	4b5a      	ldr	r3, [pc, #360]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010a88:	691b      	ldr	r3, [r3, #16]
 8010a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a8e:	2b18      	cmp	r3, #24
 8010a90:	f000 80bd 	beq.w	8010c0e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a98:	2b02      	cmp	r3, #2
 8010a9a:	f040 8095 	bne.w	8010bc8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010a9e:	4b54      	ldr	r3, [pc, #336]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4a53      	ldr	r2, [pc, #332]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010aaa:	f7fc fb17 	bl	800d0dc <HAL_GetTick>
 8010aae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010ab0:	e008      	b.n	8010ac4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010ab2:	f7fc fb13 	bl	800d0dc <HAL_GetTick>
 8010ab6:	4602      	mov	r2, r0
 8010ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	2b02      	cmp	r3, #2
 8010abe:	d901      	bls.n	8010ac4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8010ac0:	2303      	movs	r3, #3
 8010ac2:	e0e3      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010ac4:	4b4a      	ldr	r3, [pc, #296]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d1f0      	bne.n	8010ab2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010ad0:	4b47      	ldr	r3, [pc, #284]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ad4:	4b48      	ldr	r3, [pc, #288]	; (8010bf8 <HAL_RCC_OscConfig+0x7b8>)
 8010ad6:	4013      	ands	r3, r2
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8010adc:	687a      	ldr	r2, [r7, #4]
 8010ade:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010ae0:	0112      	lsls	r2, r2, #4
 8010ae2:	430a      	orrs	r2, r1
 8010ae4:	4942      	ldr	r1, [pc, #264]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	628b      	str	r3, [r1, #40]	; 0x28
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aee:	3b01      	subs	r3, #1
 8010af0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010af8:	3b01      	subs	r3, #1
 8010afa:	025b      	lsls	r3, r3, #9
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	431a      	orrs	r2, r3
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b04:	3b01      	subs	r3, #1
 8010b06:	041b      	lsls	r3, r3, #16
 8010b08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010b0c:	431a      	orrs	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b12:	3b01      	subs	r3, #1
 8010b14:	061b      	lsls	r3, r3, #24
 8010b16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010b1a:	4935      	ldr	r1, [pc, #212]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8010b20:	4b33      	ldr	r3, [pc, #204]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b24:	4a32      	ldr	r2, [pc, #200]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b26:	f023 0301 	bic.w	r3, r3, #1
 8010b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010b2c:	4b30      	ldr	r3, [pc, #192]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b30:	4b32      	ldr	r3, [pc, #200]	; (8010bfc <HAL_RCC_OscConfig+0x7bc>)
 8010b32:	4013      	ands	r3, r2
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010b38:	00d2      	lsls	r2, r2, #3
 8010b3a:	492d      	ldr	r1, [pc, #180]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b3c:	4313      	orrs	r3, r2
 8010b3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010b40:	4b2b      	ldr	r3, [pc, #172]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b44:	f023 020c 	bic.w	r2, r3, #12
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b4c:	4928      	ldr	r1, [pc, #160]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b4e:	4313      	orrs	r3, r2
 8010b50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010b52:	4b27      	ldr	r3, [pc, #156]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b56:	f023 0202 	bic.w	r2, r3, #2
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b5e:	4924      	ldr	r1, [pc, #144]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b60:	4313      	orrs	r3, r2
 8010b62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8010b64:	4b22      	ldr	r3, [pc, #136]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b68:	4a21      	ldr	r2, [pc, #132]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010b70:	4b1f      	ldr	r3, [pc, #124]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b74:	4a1e      	ldr	r2, [pc, #120]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010b7c:	4b1c      	ldr	r3, [pc, #112]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b80:	4a1b      	ldr	r2, [pc, #108]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8010b88:	4b19      	ldr	r3, [pc, #100]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b8c:	4a18      	ldr	r2, [pc, #96]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b8e:	f043 0301 	orr.w	r3, r3, #1
 8010b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010b94:	4b16      	ldr	r3, [pc, #88]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	4a15      	ldr	r2, [pc, #84]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ba0:	f7fc fa9c 	bl	800d0dc <HAL_GetTick>
 8010ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010ba6:	e008      	b.n	8010bba <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010ba8:	f7fc fa98 	bl	800d0dc <HAL_GetTick>
 8010bac:	4602      	mov	r2, r0
 8010bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb0:	1ad3      	subs	r3, r2, r3
 8010bb2:	2b02      	cmp	r3, #2
 8010bb4:	d901      	bls.n	8010bba <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8010bb6:	2303      	movs	r3, #3
 8010bb8:	e068      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010bba:	4b0d      	ldr	r3, [pc, #52]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d0f0      	beq.n	8010ba8 <HAL_RCC_OscConfig+0x768>
 8010bc6:	e060      	b.n	8010c8a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010bc8:	4b09      	ldr	r3, [pc, #36]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4a08      	ldr	r2, [pc, #32]	; (8010bf0 <HAL_RCC_OscConfig+0x7b0>)
 8010bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010bd4:	f7fc fa82 	bl	800d0dc <HAL_GetTick>
 8010bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010bda:	e011      	b.n	8010c00 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010bdc:	f7fc fa7e 	bl	800d0dc <HAL_GetTick>
 8010be0:	4602      	mov	r2, r0
 8010be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be4:	1ad3      	subs	r3, r2, r3
 8010be6:	2b02      	cmp	r3, #2
 8010be8:	d90a      	bls.n	8010c00 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8010bea:	2303      	movs	r3, #3
 8010bec:	e04e      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
 8010bee:	bf00      	nop
 8010bf0:	58024400 	.word	0x58024400
 8010bf4:	58024800 	.word	0x58024800
 8010bf8:	fffffc0c 	.word	0xfffffc0c
 8010bfc:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010c00:	4b24      	ldr	r3, [pc, #144]	; (8010c94 <HAL_RCC_OscConfig+0x854>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d1e7      	bne.n	8010bdc <HAL_RCC_OscConfig+0x79c>
 8010c0c:	e03d      	b.n	8010c8a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010c0e:	4b21      	ldr	r3, [pc, #132]	; (8010c94 <HAL_RCC_OscConfig+0x854>)
 8010c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c12:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8010c14:	4b1f      	ldr	r3, [pc, #124]	; (8010c94 <HAL_RCC_OscConfig+0x854>)
 8010c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c18:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c1e:	2b01      	cmp	r3, #1
 8010c20:	d031      	beq.n	8010c86 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010c22:	693b      	ldr	r3, [r7, #16]
 8010c24:	f003 0203 	and.w	r2, r3, #3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d12a      	bne.n	8010c86 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	091b      	lsrs	r3, r3, #4
 8010c34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d122      	bne.n	8010c86 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d11a      	bne.n	8010c86 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	0a5b      	lsrs	r3, r3, #9
 8010c54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c5c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d111      	bne.n	8010c86 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	0c1b      	lsrs	r3, r3, #16
 8010c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d108      	bne.n	8010c86 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	0e1b      	lsrs	r3, r3, #24
 8010c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c80:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d001      	beq.n	8010c8a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8010c86:	2301      	movs	r3, #1
 8010c88:	e000      	b.n	8010c8c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8010c8a:	2300      	movs	r3, #0
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3730      	adds	r7, #48	; 0x30
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	58024400 	.word	0x58024400

08010c98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b086      	sub	sp, #24
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d101      	bne.n	8010cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	e19c      	b.n	8010fe6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010cac:	4b8a      	ldr	r3, [pc, #552]	; (8010ed8 <HAL_RCC_ClockConfig+0x240>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f003 030f 	and.w	r3, r3, #15
 8010cb4:	683a      	ldr	r2, [r7, #0]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d910      	bls.n	8010cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010cba:	4b87      	ldr	r3, [pc, #540]	; (8010ed8 <HAL_RCC_ClockConfig+0x240>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	f023 020f 	bic.w	r2, r3, #15
 8010cc2:	4985      	ldr	r1, [pc, #532]	; (8010ed8 <HAL_RCC_ClockConfig+0x240>)
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010cca:	4b83      	ldr	r3, [pc, #524]	; (8010ed8 <HAL_RCC_ClockConfig+0x240>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f003 030f 	and.w	r3, r3, #15
 8010cd2:	683a      	ldr	r2, [r7, #0]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d001      	beq.n	8010cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010cd8:	2301      	movs	r3, #1
 8010cda:	e184      	b.n	8010fe6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f003 0304 	and.w	r3, r3, #4
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d010      	beq.n	8010d0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	691a      	ldr	r2, [r3, #16]
 8010cec:	4b7b      	ldr	r3, [pc, #492]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010cee:	699b      	ldr	r3, [r3, #24]
 8010cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d908      	bls.n	8010d0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010cf8:	4b78      	ldr	r3, [pc, #480]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010cfa:	699b      	ldr	r3, [r3, #24]
 8010cfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	4975      	ldr	r1, [pc, #468]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010d06:	4313      	orrs	r3, r2
 8010d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f003 0308 	and.w	r3, r3, #8
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d010      	beq.n	8010d38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	695a      	ldr	r2, [r3, #20]
 8010d1a:	4b70      	ldr	r3, [pc, #448]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010d1c:	69db      	ldr	r3, [r3, #28]
 8010d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d908      	bls.n	8010d38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010d26:	4b6d      	ldr	r3, [pc, #436]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010d28:	69db      	ldr	r3, [r3, #28]
 8010d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	695b      	ldr	r3, [r3, #20]
 8010d32:	496a      	ldr	r1, [pc, #424]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010d34:	4313      	orrs	r3, r2
 8010d36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f003 0310 	and.w	r3, r3, #16
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d010      	beq.n	8010d66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	699a      	ldr	r2, [r3, #24]
 8010d48:	4b64      	ldr	r3, [pc, #400]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010d4a:	69db      	ldr	r3, [r3, #28]
 8010d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d908      	bls.n	8010d66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010d54:	4b61      	ldr	r3, [pc, #388]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010d56:	69db      	ldr	r3, [r3, #28]
 8010d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	699b      	ldr	r3, [r3, #24]
 8010d60:	495e      	ldr	r1, [pc, #376]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010d62:	4313      	orrs	r3, r2
 8010d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f003 0320 	and.w	r3, r3, #32
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d010      	beq.n	8010d94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	69da      	ldr	r2, [r3, #28]
 8010d76:	4b59      	ldr	r3, [pc, #356]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010d78:	6a1b      	ldr	r3, [r3, #32]
 8010d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d908      	bls.n	8010d94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8010d82:	4b56      	ldr	r3, [pc, #344]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010d84:	6a1b      	ldr	r3, [r3, #32]
 8010d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	69db      	ldr	r3, [r3, #28]
 8010d8e:	4953      	ldr	r1, [pc, #332]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010d90:	4313      	orrs	r3, r2
 8010d92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f003 0302 	and.w	r3, r3, #2
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d010      	beq.n	8010dc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	68da      	ldr	r2, [r3, #12]
 8010da4:	4b4d      	ldr	r3, [pc, #308]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010da6:	699b      	ldr	r3, [r3, #24]
 8010da8:	f003 030f 	and.w	r3, r3, #15
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d908      	bls.n	8010dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010db0:	4b4a      	ldr	r3, [pc, #296]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010db2:	699b      	ldr	r3, [r3, #24]
 8010db4:	f023 020f 	bic.w	r2, r3, #15
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	4947      	ldr	r1, [pc, #284]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010dbe:	4313      	orrs	r3, r2
 8010dc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f003 0301 	and.w	r3, r3, #1
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d055      	beq.n	8010e7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8010dce:	4b43      	ldr	r3, [pc, #268]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010dd0:	699b      	ldr	r3, [r3, #24]
 8010dd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	689b      	ldr	r3, [r3, #8]
 8010dda:	4940      	ldr	r1, [pc, #256]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010ddc:	4313      	orrs	r3, r2
 8010dde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	2b02      	cmp	r3, #2
 8010de6:	d107      	bne.n	8010df8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010de8:	4b3c      	ldr	r3, [pc, #240]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d121      	bne.n	8010e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010df4:	2301      	movs	r3, #1
 8010df6:	e0f6      	b.n	8010fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	2b03      	cmp	r3, #3
 8010dfe:	d107      	bne.n	8010e10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010e00:	4b36      	ldr	r3, [pc, #216]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d115      	bne.n	8010e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	e0ea      	b.n	8010fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	d107      	bne.n	8010e28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010e18:	4b30      	ldr	r3, [pc, #192]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d109      	bne.n	8010e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010e24:	2301      	movs	r3, #1
 8010e26:	e0de      	b.n	8010fe6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010e28:	4b2c      	ldr	r3, [pc, #176]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f003 0304 	and.w	r3, r3, #4
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d101      	bne.n	8010e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010e34:	2301      	movs	r3, #1
 8010e36:	e0d6      	b.n	8010fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010e38:	4b28      	ldr	r3, [pc, #160]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010e3a:	691b      	ldr	r3, [r3, #16]
 8010e3c:	f023 0207 	bic.w	r2, r3, #7
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	4925      	ldr	r1, [pc, #148]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010e46:	4313      	orrs	r3, r2
 8010e48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010e4a:	f7fc f947 	bl	800d0dc <HAL_GetTick>
 8010e4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010e50:	e00a      	b.n	8010e68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e52:	f7fc f943 	bl	800d0dc <HAL_GetTick>
 8010e56:	4602      	mov	r2, r0
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	1ad3      	subs	r3, r2, r3
 8010e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d901      	bls.n	8010e68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8010e64:	2303      	movs	r3, #3
 8010e66:	e0be      	b.n	8010fe6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010e68:	4b1c      	ldr	r3, [pc, #112]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010e6a:	691b      	ldr	r3, [r3, #16]
 8010e6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	00db      	lsls	r3, r3, #3
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d1eb      	bne.n	8010e52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f003 0302 	and.w	r3, r3, #2
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d010      	beq.n	8010ea8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	68da      	ldr	r2, [r3, #12]
 8010e8a:	4b14      	ldr	r3, [pc, #80]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010e8c:	699b      	ldr	r3, [r3, #24]
 8010e8e:	f003 030f 	and.w	r3, r3, #15
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d208      	bcs.n	8010ea8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010e96:	4b11      	ldr	r3, [pc, #68]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010e98:	699b      	ldr	r3, [r3, #24]
 8010e9a:	f023 020f 	bic.w	r2, r3, #15
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	490e      	ldr	r1, [pc, #56]	; (8010edc <HAL_RCC_ClockConfig+0x244>)
 8010ea4:	4313      	orrs	r3, r2
 8010ea6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010ea8:	4b0b      	ldr	r3, [pc, #44]	; (8010ed8 <HAL_RCC_ClockConfig+0x240>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f003 030f 	and.w	r3, r3, #15
 8010eb0:	683a      	ldr	r2, [r7, #0]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d214      	bcs.n	8010ee0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010eb6:	4b08      	ldr	r3, [pc, #32]	; (8010ed8 <HAL_RCC_ClockConfig+0x240>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f023 020f 	bic.w	r2, r3, #15
 8010ebe:	4906      	ldr	r1, [pc, #24]	; (8010ed8 <HAL_RCC_ClockConfig+0x240>)
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	4313      	orrs	r3, r2
 8010ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010ec6:	4b04      	ldr	r3, [pc, #16]	; (8010ed8 <HAL_RCC_ClockConfig+0x240>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f003 030f 	and.w	r3, r3, #15
 8010ece:	683a      	ldr	r2, [r7, #0]
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d005      	beq.n	8010ee0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	e086      	b.n	8010fe6 <HAL_RCC_ClockConfig+0x34e>
 8010ed8:	52002000 	.word	0x52002000
 8010edc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f003 0304 	and.w	r3, r3, #4
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d010      	beq.n	8010f0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	691a      	ldr	r2, [r3, #16]
 8010ef0:	4b3f      	ldr	r3, [pc, #252]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010ef2:	699b      	ldr	r3, [r3, #24]
 8010ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d208      	bcs.n	8010f0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010efc:	4b3c      	ldr	r3, [pc, #240]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010efe:	699b      	ldr	r3, [r3, #24]
 8010f00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	691b      	ldr	r3, [r3, #16]
 8010f08:	4939      	ldr	r1, [pc, #228]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f003 0308 	and.w	r3, r3, #8
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d010      	beq.n	8010f3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	695a      	ldr	r2, [r3, #20]
 8010f1e:	4b34      	ldr	r3, [pc, #208]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010f20:	69db      	ldr	r3, [r3, #28]
 8010f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d208      	bcs.n	8010f3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010f2a:	4b31      	ldr	r3, [pc, #196]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010f2c:	69db      	ldr	r3, [r3, #28]
 8010f2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	695b      	ldr	r3, [r3, #20]
 8010f36:	492e      	ldr	r1, [pc, #184]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f003 0310 	and.w	r3, r3, #16
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d010      	beq.n	8010f6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	699a      	ldr	r2, [r3, #24]
 8010f4c:	4b28      	ldr	r3, [pc, #160]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010f4e:	69db      	ldr	r3, [r3, #28]
 8010f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d208      	bcs.n	8010f6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010f58:	4b25      	ldr	r3, [pc, #148]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010f5a:	69db      	ldr	r3, [r3, #28]
 8010f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	699b      	ldr	r3, [r3, #24]
 8010f64:	4922      	ldr	r1, [pc, #136]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010f66:	4313      	orrs	r3, r2
 8010f68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	f003 0320 	and.w	r3, r3, #32
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d010      	beq.n	8010f98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	69da      	ldr	r2, [r3, #28]
 8010f7a:	4b1d      	ldr	r3, [pc, #116]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010f7c:	6a1b      	ldr	r3, [r3, #32]
 8010f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d208      	bcs.n	8010f98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8010f86:	4b1a      	ldr	r3, [pc, #104]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010f88:	6a1b      	ldr	r3, [r3, #32]
 8010f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	69db      	ldr	r3, [r3, #28]
 8010f92:	4917      	ldr	r1, [pc, #92]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010f94:	4313      	orrs	r3, r2
 8010f96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010f98:	f000 f89e 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	4b14      	ldr	r3, [pc, #80]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010fa0:	699b      	ldr	r3, [r3, #24]
 8010fa2:	0a1b      	lsrs	r3, r3, #8
 8010fa4:	f003 030f 	and.w	r3, r3, #15
 8010fa8:	4912      	ldr	r1, [pc, #72]	; (8010ff4 <HAL_RCC_ClockConfig+0x35c>)
 8010faa:	5ccb      	ldrb	r3, [r1, r3]
 8010fac:	f003 031f 	and.w	r3, r3, #31
 8010fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8010fb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010fb6:	4b0e      	ldr	r3, [pc, #56]	; (8010ff0 <HAL_RCC_ClockConfig+0x358>)
 8010fb8:	699b      	ldr	r3, [r3, #24]
 8010fba:	f003 030f 	and.w	r3, r3, #15
 8010fbe:	4a0d      	ldr	r2, [pc, #52]	; (8010ff4 <HAL_RCC_ClockConfig+0x35c>)
 8010fc0:	5cd3      	ldrb	r3, [r2, r3]
 8010fc2:	f003 031f 	and.w	r3, r3, #31
 8010fc6:	693a      	ldr	r2, [r7, #16]
 8010fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8010fcc:	4a0a      	ldr	r2, [pc, #40]	; (8010ff8 <HAL_RCC_ClockConfig+0x360>)
 8010fce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010fd0:	4a0a      	ldr	r2, [pc, #40]	; (8010ffc <HAL_RCC_ClockConfig+0x364>)
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8010fd6:	4b0a      	ldr	r3, [pc, #40]	; (8011000 <HAL_RCC_ClockConfig+0x368>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7f0 fa10 	bl	8001400 <HAL_InitTick>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8010fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3718      	adds	r7, #24
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	58024400 	.word	0x58024400
 8010ff4:	08028194 	.word	0x08028194
 8010ff8:	24000014 	.word	0x24000014
 8010ffc:	24000010 	.word	0x24000010
 8011000:	24000048 	.word	0x24000048

08011004 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b08c      	sub	sp, #48	; 0x30
 8011008:	af00      	add	r7, sp, #0
 801100a:	60f8      	str	r0, [r7, #12]
 801100c:	60b9      	str	r1, [r7, #8]
 801100e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d12a      	bne.n	801106c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8011016:	4b2d      	ldr	r3, [pc, #180]	; (80110cc <HAL_RCC_MCOConfig+0xc8>)
 8011018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801101c:	4a2b      	ldr	r2, [pc, #172]	; (80110cc <HAL_RCC_MCOConfig+0xc8>)
 801101e:	f043 0301 	orr.w	r3, r3, #1
 8011022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011026:	4b29      	ldr	r3, [pc, #164]	; (80110cc <HAL_RCC_MCOConfig+0xc8>)
 8011028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801102c:	f003 0301 	and.w	r3, r3, #1
 8011030:	61bb      	str	r3, [r7, #24]
 8011032:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8011034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801103a:	2302      	movs	r3, #2
 801103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801103e:	2303      	movs	r3, #3
 8011040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011042:	2300      	movs	r3, #0
 8011044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8011046:	2300      	movs	r3, #0
 8011048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 801104a:	f107 031c 	add.w	r3, r7, #28
 801104e:	4619      	mov	r1, r3
 8011050:	481f      	ldr	r0, [pc, #124]	; (80110d0 <HAL_RCC_MCOConfig+0xcc>)
 8011052:	f7fc fc47 	bl	800d8e4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8011056:	4b1d      	ldr	r3, [pc, #116]	; (80110cc <HAL_RCC_MCOConfig+0xc8>)
 8011058:	691b      	ldr	r3, [r3, #16]
 801105a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 801105e:	68b9      	ldr	r1, [r7, #8]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	430b      	orrs	r3, r1
 8011064:	4919      	ldr	r1, [pc, #100]	; (80110cc <HAL_RCC_MCOConfig+0xc8>)
 8011066:	4313      	orrs	r3, r2
 8011068:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 801106a:	e02a      	b.n	80110c2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 801106c:	4b17      	ldr	r3, [pc, #92]	; (80110cc <HAL_RCC_MCOConfig+0xc8>)
 801106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011072:	4a16      	ldr	r2, [pc, #88]	; (80110cc <HAL_RCC_MCOConfig+0xc8>)
 8011074:	f043 0304 	orr.w	r3, r3, #4
 8011078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801107c:	4b13      	ldr	r3, [pc, #76]	; (80110cc <HAL_RCC_MCOConfig+0xc8>)
 801107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011082:	f003 0304 	and.w	r3, r3, #4
 8011086:	617b      	str	r3, [r7, #20]
 8011088:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 801108a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011090:	2302      	movs	r3, #2
 8011092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011094:	2303      	movs	r3, #3
 8011096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011098:	2300      	movs	r3, #0
 801109a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 801109c:	2300      	movs	r3, #0
 801109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80110a0:	f107 031c 	add.w	r3, r7, #28
 80110a4:	4619      	mov	r1, r3
 80110a6:	480b      	ldr	r0, [pc, #44]	; (80110d4 <HAL_RCC_MCOConfig+0xd0>)
 80110a8:	f7fc fc1c 	bl	800d8e4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80110ac:	4b07      	ldr	r3, [pc, #28]	; (80110cc <HAL_RCC_MCOConfig+0xc8>)
 80110ae:	691b      	ldr	r3, [r3, #16]
 80110b0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	01d9      	lsls	r1, r3, #7
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	430b      	orrs	r3, r1
 80110bc:	4903      	ldr	r1, [pc, #12]	; (80110cc <HAL_RCC_MCOConfig+0xc8>)
 80110be:	4313      	orrs	r3, r2
 80110c0:	610b      	str	r3, [r1, #16]
}
 80110c2:	bf00      	nop
 80110c4:	3730      	adds	r7, #48	; 0x30
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	58024400 	.word	0x58024400
 80110d0:	58020000 	.word	0x58020000
 80110d4:	58020800 	.word	0x58020800

080110d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80110d8:	b480      	push	{r7}
 80110da:	b089      	sub	sp, #36	; 0x24
 80110dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80110de:	4bb3      	ldr	r3, [pc, #716]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80110e0:	691b      	ldr	r3, [r3, #16]
 80110e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80110e6:	2b18      	cmp	r3, #24
 80110e8:	f200 8155 	bhi.w	8011396 <HAL_RCC_GetSysClockFreq+0x2be>
 80110ec:	a201      	add	r2, pc, #4	; (adr r2, 80110f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80110ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f2:	bf00      	nop
 80110f4:	08011159 	.word	0x08011159
 80110f8:	08011397 	.word	0x08011397
 80110fc:	08011397 	.word	0x08011397
 8011100:	08011397 	.word	0x08011397
 8011104:	08011397 	.word	0x08011397
 8011108:	08011397 	.word	0x08011397
 801110c:	08011397 	.word	0x08011397
 8011110:	08011397 	.word	0x08011397
 8011114:	0801117f 	.word	0x0801117f
 8011118:	08011397 	.word	0x08011397
 801111c:	08011397 	.word	0x08011397
 8011120:	08011397 	.word	0x08011397
 8011124:	08011397 	.word	0x08011397
 8011128:	08011397 	.word	0x08011397
 801112c:	08011397 	.word	0x08011397
 8011130:	08011397 	.word	0x08011397
 8011134:	08011185 	.word	0x08011185
 8011138:	08011397 	.word	0x08011397
 801113c:	08011397 	.word	0x08011397
 8011140:	08011397 	.word	0x08011397
 8011144:	08011397 	.word	0x08011397
 8011148:	08011397 	.word	0x08011397
 801114c:	08011397 	.word	0x08011397
 8011150:	08011397 	.word	0x08011397
 8011154:	0801118b 	.word	0x0801118b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011158:	4b94      	ldr	r3, [pc, #592]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f003 0320 	and.w	r3, r3, #32
 8011160:	2b00      	cmp	r3, #0
 8011162:	d009      	beq.n	8011178 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011164:	4b91      	ldr	r3, [pc, #580]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	08db      	lsrs	r3, r3, #3
 801116a:	f003 0303 	and.w	r3, r3, #3
 801116e:	4a90      	ldr	r2, [pc, #576]	; (80113b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011170:	fa22 f303 	lsr.w	r3, r2, r3
 8011174:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8011176:	e111      	b.n	801139c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011178:	4b8d      	ldr	r3, [pc, #564]	; (80113b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801117a:	61bb      	str	r3, [r7, #24]
    break;
 801117c:	e10e      	b.n	801139c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801117e:	4b8d      	ldr	r3, [pc, #564]	; (80113b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011180:	61bb      	str	r3, [r7, #24]
    break;
 8011182:	e10b      	b.n	801139c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8011184:	4b8c      	ldr	r3, [pc, #560]	; (80113b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011186:	61bb      	str	r3, [r7, #24]
    break;
 8011188:	e108      	b.n	801139c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801118a:	4b88      	ldr	r3, [pc, #544]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 801118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801118e:	f003 0303 	and.w	r3, r3, #3
 8011192:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8011194:	4b85      	ldr	r3, [pc, #532]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011198:	091b      	lsrs	r3, r3, #4
 801119a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801119e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80111a0:	4b82      	ldr	r3, [pc, #520]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a4:	f003 0301 	and.w	r3, r3, #1
 80111a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80111aa:	4b80      	ldr	r3, [pc, #512]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111ae:	08db      	lsrs	r3, r3, #3
 80111b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80111b4:	68fa      	ldr	r2, [r7, #12]
 80111b6:	fb02 f303 	mul.w	r3, r2, r3
 80111ba:	ee07 3a90 	vmov	s15, r3
 80111be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f000 80e1 	beq.w	8011390 <HAL_RCC_GetSysClockFreq+0x2b8>
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	2b02      	cmp	r3, #2
 80111d2:	f000 8083 	beq.w	80112dc <HAL_RCC_GetSysClockFreq+0x204>
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	2b02      	cmp	r3, #2
 80111da:	f200 80a1 	bhi.w	8011320 <HAL_RCC_GetSysClockFreq+0x248>
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d003      	beq.n	80111ec <HAL_RCC_GetSysClockFreq+0x114>
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	d056      	beq.n	8011298 <HAL_RCC_GetSysClockFreq+0x1c0>
 80111ea:	e099      	b.n	8011320 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80111ec:	4b6f      	ldr	r3, [pc, #444]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f003 0320 	and.w	r3, r3, #32
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d02d      	beq.n	8011254 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80111f8:	4b6c      	ldr	r3, [pc, #432]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	08db      	lsrs	r3, r3, #3
 80111fe:	f003 0303 	and.w	r3, r3, #3
 8011202:	4a6b      	ldr	r2, [pc, #428]	; (80113b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011204:	fa22 f303 	lsr.w	r3, r2, r3
 8011208:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	ee07 3a90 	vmov	s15, r3
 8011210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	ee07 3a90 	vmov	s15, r3
 801121a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801121e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011222:	4b62      	ldr	r3, [pc, #392]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801122a:	ee07 3a90 	vmov	s15, r3
 801122e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011232:	ed97 6a02 	vldr	s12, [r7, #8]
 8011236:	eddf 5a61 	vldr	s11, [pc, #388]	; 80113bc <HAL_RCC_GetSysClockFreq+0x2e4>
 801123a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801123e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801124e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8011252:	e087      	b.n	8011364 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	ee07 3a90 	vmov	s15, r3
 801125a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801125e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80113c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011266:	4b51      	ldr	r3, [pc, #324]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801126a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801126e:	ee07 3a90 	vmov	s15, r3
 8011272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011276:	ed97 6a02 	vldr	s12, [r7, #8]
 801127a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80113bc <HAL_RCC_GetSysClockFreq+0x2e4>
 801127e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801128a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801128e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011296:	e065      	b.n	8011364 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	ee07 3a90 	vmov	s15, r3
 801129e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80113c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80112a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112aa:	4b40      	ldr	r3, [pc, #256]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80112ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112b2:	ee07 3a90 	vmov	s15, r3
 80112b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80112be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80113bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80112c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80112c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80112da:	e043      	b.n	8011364 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	ee07 3a90 	vmov	s15, r3
 80112e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80113c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80112ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112ee:	4b2f      	ldr	r3, [pc, #188]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80112f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112f6:	ee07 3a90 	vmov	s15, r3
 80112fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8011302:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80113bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8011306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801130e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011316:	ee67 7a27 	vmul.f32	s15, s14, s15
 801131a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801131e:	e021      	b.n	8011364 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	ee07 3a90 	vmov	s15, r3
 8011326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801132a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80113c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801132e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011332:	4b1e      	ldr	r3, [pc, #120]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801133a:	ee07 3a90 	vmov	s15, r3
 801133e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011342:	ed97 6a02 	vldr	s12, [r7, #8]
 8011346:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80113bc <HAL_RCC_GetSysClockFreq+0x2e4>
 801134a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801134e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801135a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801135e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011362:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8011364:	4b11      	ldr	r3, [pc, #68]	; (80113ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011368:	0a5b      	lsrs	r3, r3, #9
 801136a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801136e:	3301      	adds	r3, #1
 8011370:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	ee07 3a90 	vmov	s15, r3
 8011378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801137c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011388:	ee17 3a90 	vmov	r3, s15
 801138c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801138e:	e005      	b.n	801139c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8011390:	2300      	movs	r3, #0
 8011392:	61bb      	str	r3, [r7, #24]
    break;
 8011394:	e002      	b.n	801139c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8011396:	4b07      	ldr	r3, [pc, #28]	; (80113b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011398:	61bb      	str	r3, [r7, #24]
    break;
 801139a:	bf00      	nop
  }

  return sysclockfreq;
 801139c:	69bb      	ldr	r3, [r7, #24]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3724      	adds	r7, #36	; 0x24
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr
 80113aa:	bf00      	nop
 80113ac:	58024400 	.word	0x58024400
 80113b0:	03d09000 	.word	0x03d09000
 80113b4:	003d0900 	.word	0x003d0900
 80113b8:	017d7840 	.word	0x017d7840
 80113bc:	46000000 	.word	0x46000000
 80113c0:	4c742400 	.word	0x4c742400
 80113c4:	4a742400 	.word	0x4a742400
 80113c8:	4bbebc20 	.word	0x4bbebc20

080113cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80113d2:	f7ff fe81 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 80113d6:	4602      	mov	r2, r0
 80113d8:	4b10      	ldr	r3, [pc, #64]	; (801141c <HAL_RCC_GetHCLKFreq+0x50>)
 80113da:	699b      	ldr	r3, [r3, #24]
 80113dc:	0a1b      	lsrs	r3, r3, #8
 80113de:	f003 030f 	and.w	r3, r3, #15
 80113e2:	490f      	ldr	r1, [pc, #60]	; (8011420 <HAL_RCC_GetHCLKFreq+0x54>)
 80113e4:	5ccb      	ldrb	r3, [r1, r3]
 80113e6:	f003 031f 	and.w	r3, r3, #31
 80113ea:	fa22 f303 	lsr.w	r3, r2, r3
 80113ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80113f0:	4b0a      	ldr	r3, [pc, #40]	; (801141c <HAL_RCC_GetHCLKFreq+0x50>)
 80113f2:	699b      	ldr	r3, [r3, #24]
 80113f4:	f003 030f 	and.w	r3, r3, #15
 80113f8:	4a09      	ldr	r2, [pc, #36]	; (8011420 <HAL_RCC_GetHCLKFreq+0x54>)
 80113fa:	5cd3      	ldrb	r3, [r2, r3]
 80113fc:	f003 031f 	and.w	r3, r3, #31
 8011400:	687a      	ldr	r2, [r7, #4]
 8011402:	fa22 f303 	lsr.w	r3, r2, r3
 8011406:	4a07      	ldr	r2, [pc, #28]	; (8011424 <HAL_RCC_GetHCLKFreq+0x58>)
 8011408:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801140a:	4a07      	ldr	r2, [pc, #28]	; (8011428 <HAL_RCC_GetHCLKFreq+0x5c>)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011410:	4b04      	ldr	r3, [pc, #16]	; (8011424 <HAL_RCC_GetHCLKFreq+0x58>)
 8011412:	681b      	ldr	r3, [r3, #0]
}
 8011414:	4618      	mov	r0, r3
 8011416:	3708      	adds	r7, #8
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}
 801141c:	58024400 	.word	0x58024400
 8011420:	08028194 	.word	0x08028194
 8011424:	24000014 	.word	0x24000014
 8011428:	24000010 	.word	0x24000010

0801142c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011430:	f7ff ffcc 	bl	80113cc <HAL_RCC_GetHCLKFreq>
 8011434:	4602      	mov	r2, r0
 8011436:	4b06      	ldr	r3, [pc, #24]	; (8011450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011438:	69db      	ldr	r3, [r3, #28]
 801143a:	091b      	lsrs	r3, r3, #4
 801143c:	f003 0307 	and.w	r3, r3, #7
 8011440:	4904      	ldr	r1, [pc, #16]	; (8011454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011442:	5ccb      	ldrb	r3, [r1, r3]
 8011444:	f003 031f 	and.w	r3, r3, #31
 8011448:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801144c:	4618      	mov	r0, r3
 801144e:	bd80      	pop	{r7, pc}
 8011450:	58024400 	.word	0x58024400
 8011454:	08028194 	.word	0x08028194

08011458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801145c:	f7ff ffb6 	bl	80113cc <HAL_RCC_GetHCLKFreq>
 8011460:	4602      	mov	r2, r0
 8011462:	4b06      	ldr	r3, [pc, #24]	; (801147c <HAL_RCC_GetPCLK2Freq+0x24>)
 8011464:	69db      	ldr	r3, [r3, #28]
 8011466:	0a1b      	lsrs	r3, r3, #8
 8011468:	f003 0307 	and.w	r3, r3, #7
 801146c:	4904      	ldr	r1, [pc, #16]	; (8011480 <HAL_RCC_GetPCLK2Freq+0x28>)
 801146e:	5ccb      	ldrb	r3, [r1, r3]
 8011470:	f003 031f 	and.w	r3, r3, #31
 8011474:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011478:	4618      	mov	r0, r3
 801147a:	bd80      	pop	{r7, pc}
 801147c:	58024400 	.word	0x58024400
 8011480:	08028194 	.word	0x08028194

08011484 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	223f      	movs	r2, #63	; 0x3f
 8011492:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011494:	4b1a      	ldr	r3, [pc, #104]	; (8011500 <HAL_RCC_GetClockConfig+0x7c>)
 8011496:	691b      	ldr	r3, [r3, #16]
 8011498:	f003 0207 	and.w	r2, r3, #7
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80114a0:	4b17      	ldr	r3, [pc, #92]	; (8011500 <HAL_RCC_GetClockConfig+0x7c>)
 80114a2:	699b      	ldr	r3, [r3, #24]
 80114a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80114ac:	4b14      	ldr	r3, [pc, #80]	; (8011500 <HAL_RCC_GetClockConfig+0x7c>)
 80114ae:	699b      	ldr	r3, [r3, #24]
 80114b0:	f003 020f 	and.w	r2, r3, #15
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80114b8:	4b11      	ldr	r3, [pc, #68]	; (8011500 <HAL_RCC_GetClockConfig+0x7c>)
 80114ba:	699b      	ldr	r3, [r3, #24]
 80114bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80114c4:	4b0e      	ldr	r3, [pc, #56]	; (8011500 <HAL_RCC_GetClockConfig+0x7c>)
 80114c6:	69db      	ldr	r3, [r3, #28]
 80114c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80114d0:	4b0b      	ldr	r3, [pc, #44]	; (8011500 <HAL_RCC_GetClockConfig+0x7c>)
 80114d2:	69db      	ldr	r3, [r3, #28]
 80114d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80114dc:	4b08      	ldr	r3, [pc, #32]	; (8011500 <HAL_RCC_GetClockConfig+0x7c>)
 80114de:	6a1b      	ldr	r3, [r3, #32]
 80114e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80114e8:	4b06      	ldr	r3, [pc, #24]	; (8011504 <HAL_RCC_GetClockConfig+0x80>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f003 020f 	and.w	r2, r3, #15
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	601a      	str	r2, [r3, #0]
}
 80114f4:	bf00      	nop
 80114f6:	370c      	adds	r7, #12
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr
 8011500:	58024400 	.word	0x58024400
 8011504:	52002000 	.word	0x52002000

08011508 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b086      	sub	sp, #24
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011510:	2300      	movs	r3, #0
 8011512:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011514:	2300      	movs	r3, #0
 8011516:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011520:	2b00      	cmp	r3, #0
 8011522:	d03f      	beq.n	80115a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011528:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801152c:	d02a      	beq.n	8011584 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801152e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011532:	d824      	bhi.n	801157e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011538:	d018      	beq.n	801156c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801153a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801153e:	d81e      	bhi.n	801157e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011540:	2b00      	cmp	r3, #0
 8011542:	d003      	beq.n	801154c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8011544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011548:	d007      	beq.n	801155a <HAL_RCCEx_PeriphCLKConfig+0x52>
 801154a:	e018      	b.n	801157e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801154c:	4bab      	ldr	r3, [pc, #684]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011550:	4aaa      	ldr	r2, [pc, #680]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011558:	e015      	b.n	8011586 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	3304      	adds	r3, #4
 801155e:	2102      	movs	r1, #2
 8011560:	4618      	mov	r0, r3
 8011562:	f000 ff11 	bl	8012388 <RCCEx_PLL2_Config>
 8011566:	4603      	mov	r3, r0
 8011568:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801156a:	e00c      	b.n	8011586 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	3324      	adds	r3, #36	; 0x24
 8011570:	2102      	movs	r1, #2
 8011572:	4618      	mov	r0, r3
 8011574:	f000 ffba 	bl	80124ec <RCCEx_PLL3_Config>
 8011578:	4603      	mov	r3, r0
 801157a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801157c:	e003      	b.n	8011586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801157e:	2301      	movs	r3, #1
 8011580:	75fb      	strb	r3, [r7, #23]
      break;
 8011582:	e000      	b.n	8011586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8011584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011586:	7dfb      	ldrb	r3, [r7, #23]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d109      	bne.n	80115a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801158c:	4b9b      	ldr	r3, [pc, #620]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801158e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011598:	4998      	ldr	r1, [pc, #608]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 801159a:	4313      	orrs	r3, r2
 801159c:	650b      	str	r3, [r1, #80]	; 0x50
 801159e:	e001      	b.n	80115a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80115a0:	7dfb      	ldrb	r3, [r7, #23]
 80115a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d03d      	beq.n	801162c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115b4:	2b04      	cmp	r3, #4
 80115b6:	d826      	bhi.n	8011606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80115b8:	a201      	add	r2, pc, #4	; (adr r2, 80115c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80115ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115be:	bf00      	nop
 80115c0:	080115d5 	.word	0x080115d5
 80115c4:	080115e3 	.word	0x080115e3
 80115c8:	080115f5 	.word	0x080115f5
 80115cc:	0801160d 	.word	0x0801160d
 80115d0:	0801160d 	.word	0x0801160d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80115d4:	4b89      	ldr	r3, [pc, #548]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80115d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d8:	4a88      	ldr	r2, [pc, #544]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80115da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80115de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80115e0:	e015      	b.n	801160e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	3304      	adds	r3, #4
 80115e6:	2100      	movs	r1, #0
 80115e8:	4618      	mov	r0, r3
 80115ea:	f000 fecd 	bl	8012388 <RCCEx_PLL2_Config>
 80115ee:	4603      	mov	r3, r0
 80115f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80115f2:	e00c      	b.n	801160e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	3324      	adds	r3, #36	; 0x24
 80115f8:	2100      	movs	r1, #0
 80115fa:	4618      	mov	r0, r3
 80115fc:	f000 ff76 	bl	80124ec <RCCEx_PLL3_Config>
 8011600:	4603      	mov	r3, r0
 8011602:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011604:	e003      	b.n	801160e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011606:	2301      	movs	r3, #1
 8011608:	75fb      	strb	r3, [r7, #23]
      break;
 801160a:	e000      	b.n	801160e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 801160c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801160e:	7dfb      	ldrb	r3, [r7, #23]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d109      	bne.n	8011628 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011614:	4b79      	ldr	r3, [pc, #484]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011618:	f023 0207 	bic.w	r2, r3, #7
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011620:	4976      	ldr	r1, [pc, #472]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011622:	4313      	orrs	r3, r2
 8011624:	650b      	str	r3, [r1, #80]	; 0x50
 8011626:	e001      	b.n	801162c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011628:	7dfb      	ldrb	r3, [r7, #23]
 801162a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011634:	2b00      	cmp	r3, #0
 8011636:	d042      	beq.n	80116be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801163c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011640:	d02b      	beq.n	801169a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8011642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011646:	d825      	bhi.n	8011694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011648:	2bc0      	cmp	r3, #192	; 0xc0
 801164a:	d028      	beq.n	801169e <HAL_RCCEx_PeriphCLKConfig+0x196>
 801164c:	2bc0      	cmp	r3, #192	; 0xc0
 801164e:	d821      	bhi.n	8011694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011650:	2b80      	cmp	r3, #128	; 0x80
 8011652:	d016      	beq.n	8011682 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8011654:	2b80      	cmp	r3, #128	; 0x80
 8011656:	d81d      	bhi.n	8011694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011658:	2b00      	cmp	r3, #0
 801165a:	d002      	beq.n	8011662 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 801165c:	2b40      	cmp	r3, #64	; 0x40
 801165e:	d007      	beq.n	8011670 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8011660:	e018      	b.n	8011694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011662:	4b66      	ldr	r3, [pc, #408]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011666:	4a65      	ldr	r2, [pc, #404]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801166c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801166e:	e017      	b.n	80116a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	3304      	adds	r3, #4
 8011674:	2100      	movs	r1, #0
 8011676:	4618      	mov	r0, r3
 8011678:	f000 fe86 	bl	8012388 <RCCEx_PLL2_Config>
 801167c:	4603      	mov	r3, r0
 801167e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011680:	e00e      	b.n	80116a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	3324      	adds	r3, #36	; 0x24
 8011686:	2100      	movs	r1, #0
 8011688:	4618      	mov	r0, r3
 801168a:	f000 ff2f 	bl	80124ec <RCCEx_PLL3_Config>
 801168e:	4603      	mov	r3, r0
 8011690:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011692:	e005      	b.n	80116a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011694:	2301      	movs	r3, #1
 8011696:	75fb      	strb	r3, [r7, #23]
      break;
 8011698:	e002      	b.n	80116a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801169a:	bf00      	nop
 801169c:	e000      	b.n	80116a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801169e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80116a0:	7dfb      	ldrb	r3, [r7, #23]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d109      	bne.n	80116ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80116a6:	4b55      	ldr	r3, [pc, #340]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80116a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116b2:	4952      	ldr	r1, [pc, #328]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80116b4:	4313      	orrs	r3, r2
 80116b6:	650b      	str	r3, [r1, #80]	; 0x50
 80116b8:	e001      	b.n	80116be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80116ba:	7dfb      	ldrb	r3, [r7, #23]
 80116bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d049      	beq.n	801175e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80116d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80116d4:	d030      	beq.n	8011738 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80116d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80116da:	d82a      	bhi.n	8011732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80116dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80116e0:	d02c      	beq.n	801173c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80116e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80116e6:	d824      	bhi.n	8011732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80116e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80116ec:	d018      	beq.n	8011720 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80116ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80116f2:	d81e      	bhi.n	8011732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d003      	beq.n	8011700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80116f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80116fc:	d007      	beq.n	801170e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80116fe:	e018      	b.n	8011732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011700:	4b3e      	ldr	r3, [pc, #248]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011704:	4a3d      	ldr	r2, [pc, #244]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801170a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801170c:	e017      	b.n	801173e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	3304      	adds	r3, #4
 8011712:	2100      	movs	r1, #0
 8011714:	4618      	mov	r0, r3
 8011716:	f000 fe37 	bl	8012388 <RCCEx_PLL2_Config>
 801171a:	4603      	mov	r3, r0
 801171c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801171e:	e00e      	b.n	801173e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	3324      	adds	r3, #36	; 0x24
 8011724:	2100      	movs	r1, #0
 8011726:	4618      	mov	r0, r3
 8011728:	f000 fee0 	bl	80124ec <RCCEx_PLL3_Config>
 801172c:	4603      	mov	r3, r0
 801172e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011730:	e005      	b.n	801173e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8011732:	2301      	movs	r3, #1
 8011734:	75fb      	strb	r3, [r7, #23]
      break;
 8011736:	e002      	b.n	801173e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011738:	bf00      	nop
 801173a:	e000      	b.n	801173e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 801173c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801173e:	7dfb      	ldrb	r3, [r7, #23]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d10a      	bne.n	801175a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011744:	4b2d      	ldr	r3, [pc, #180]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011748:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011752:	492a      	ldr	r1, [pc, #168]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8011754:	4313      	orrs	r3, r2
 8011756:	658b      	str	r3, [r1, #88]	; 0x58
 8011758:	e001      	b.n	801175e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801175a:	7dfb      	ldrb	r3, [r7, #23]
 801175c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011766:	2b00      	cmp	r3, #0
 8011768:	d04c      	beq.n	8011804 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011774:	d030      	beq.n	80117d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8011776:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801177a:	d82a      	bhi.n	80117d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 801177c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011780:	d02c      	beq.n	80117dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8011782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011786:	d824      	bhi.n	80117d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801178c:	d018      	beq.n	80117c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 801178e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011792:	d81e      	bhi.n	80117d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011794:	2b00      	cmp	r3, #0
 8011796:	d003      	beq.n	80117a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801179c:	d007      	beq.n	80117ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801179e:	e018      	b.n	80117d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80117a0:	4b16      	ldr	r3, [pc, #88]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80117a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117a4:	4a15      	ldr	r2, [pc, #84]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80117a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80117aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80117ac:	e017      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	3304      	adds	r3, #4
 80117b2:	2100      	movs	r1, #0
 80117b4:	4618      	mov	r0, r3
 80117b6:	f000 fde7 	bl	8012388 <RCCEx_PLL2_Config>
 80117ba:	4603      	mov	r3, r0
 80117bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80117be:	e00e      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	3324      	adds	r3, #36	; 0x24
 80117c4:	2100      	movs	r1, #0
 80117c6:	4618      	mov	r0, r3
 80117c8:	f000 fe90 	bl	80124ec <RCCEx_PLL3_Config>
 80117cc:	4603      	mov	r3, r0
 80117ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80117d0:	e005      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80117d2:	2301      	movs	r3, #1
 80117d4:	75fb      	strb	r3, [r7, #23]
      break;
 80117d6:	e002      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80117d8:	bf00      	nop
 80117da:	e000      	b.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80117dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80117de:	7dfb      	ldrb	r3, [r7, #23]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d10d      	bne.n	8011800 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80117e4:	4b05      	ldr	r3, [pc, #20]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80117e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80117f2:	4902      	ldr	r1, [pc, #8]	; (80117fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80117f4:	4313      	orrs	r3, r2
 80117f6:	658b      	str	r3, [r1, #88]	; 0x58
 80117f8:	e004      	b.n	8011804 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80117fa:	bf00      	nop
 80117fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011800:	7dfb      	ldrb	r3, [r7, #23]
 8011802:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801180c:	2b00      	cmp	r3, #0
 801180e:	d032      	beq.n	8011876 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011814:	2b30      	cmp	r3, #48	; 0x30
 8011816:	d01c      	beq.n	8011852 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8011818:	2b30      	cmp	r3, #48	; 0x30
 801181a:	d817      	bhi.n	801184c <HAL_RCCEx_PeriphCLKConfig+0x344>
 801181c:	2b20      	cmp	r3, #32
 801181e:	d00c      	beq.n	801183a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8011820:	2b20      	cmp	r3, #32
 8011822:	d813      	bhi.n	801184c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8011824:	2b00      	cmp	r3, #0
 8011826:	d016      	beq.n	8011856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8011828:	2b10      	cmp	r3, #16
 801182a:	d10f      	bne.n	801184c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801182c:	4baf      	ldr	r3, [pc, #700]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011830:	4aae      	ldr	r2, [pc, #696]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011838:	e00e      	b.n	8011858 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	3304      	adds	r3, #4
 801183e:	2102      	movs	r1, #2
 8011840:	4618      	mov	r0, r3
 8011842:	f000 fda1 	bl	8012388 <RCCEx_PLL2_Config>
 8011846:	4603      	mov	r3, r0
 8011848:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801184a:	e005      	b.n	8011858 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801184c:	2301      	movs	r3, #1
 801184e:	75fb      	strb	r3, [r7, #23]
      break;
 8011850:	e002      	b.n	8011858 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8011852:	bf00      	nop
 8011854:	e000      	b.n	8011858 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8011856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011858:	7dfb      	ldrb	r3, [r7, #23]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d109      	bne.n	8011872 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801185e:	4ba3      	ldr	r3, [pc, #652]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011862:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801186a:	49a0      	ldr	r1, [pc, #640]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801186c:	4313      	orrs	r3, r2
 801186e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011870:	e001      	b.n	8011876 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011872:	7dfb      	ldrb	r3, [r7, #23]
 8011874:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801187e:	2b00      	cmp	r3, #0
 8011880:	d047      	beq.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011886:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801188a:	d030      	beq.n	80118ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 801188c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011890:	d82a      	bhi.n	80118e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8011892:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011896:	d02c      	beq.n	80118f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8011898:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801189c:	d824      	bhi.n	80118e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 801189e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80118a2:	d018      	beq.n	80118d6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80118a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80118a8:	d81e      	bhi.n	80118e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d003      	beq.n	80118b6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80118ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118b2:	d007      	beq.n	80118c4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80118b4:	e018      	b.n	80118e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80118b6:	4b8d      	ldr	r3, [pc, #564]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80118b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ba:	4a8c      	ldr	r2, [pc, #560]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80118bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80118c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80118c2:	e017      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	3304      	adds	r3, #4
 80118c8:	2100      	movs	r1, #0
 80118ca:	4618      	mov	r0, r3
 80118cc:	f000 fd5c 	bl	8012388 <RCCEx_PLL2_Config>
 80118d0:	4603      	mov	r3, r0
 80118d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80118d4:	e00e      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	3324      	adds	r3, #36	; 0x24
 80118da:	2100      	movs	r1, #0
 80118dc:	4618      	mov	r0, r3
 80118de:	f000 fe05 	bl	80124ec <RCCEx_PLL3_Config>
 80118e2:	4603      	mov	r3, r0
 80118e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80118e6:	e005      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80118e8:	2301      	movs	r3, #1
 80118ea:	75fb      	strb	r3, [r7, #23]
      break;
 80118ec:	e002      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80118ee:	bf00      	nop
 80118f0:	e000      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80118f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80118f4:	7dfb      	ldrb	r3, [r7, #23]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d109      	bne.n	801190e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80118fa:	4b7c      	ldr	r3, [pc, #496]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80118fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118fe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011906:	4979      	ldr	r1, [pc, #484]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011908:	4313      	orrs	r3, r2
 801190a:	650b      	str	r3, [r1, #80]	; 0x50
 801190c:	e001      	b.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801190e:	7dfb      	ldrb	r3, [r7, #23]
 8011910:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801191a:	2b00      	cmp	r3, #0
 801191c:	d049      	beq.n	80119b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011922:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011926:	d02e      	beq.n	8011986 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8011928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801192c:	d828      	bhi.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x478>
 801192e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011932:	d02a      	beq.n	801198a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8011934:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011938:	d822      	bhi.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x478>
 801193a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801193e:	d026      	beq.n	801198e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8011940:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011944:	d81c      	bhi.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8011946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801194a:	d010      	beq.n	801196e <HAL_RCCEx_PeriphCLKConfig+0x466>
 801194c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011950:	d816      	bhi.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8011952:	2b00      	cmp	r3, #0
 8011954:	d01d      	beq.n	8011992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8011956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801195a:	d111      	bne.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	3304      	adds	r3, #4
 8011960:	2101      	movs	r1, #1
 8011962:	4618      	mov	r0, r3
 8011964:	f000 fd10 	bl	8012388 <RCCEx_PLL2_Config>
 8011968:	4603      	mov	r3, r0
 801196a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801196c:	e012      	b.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	3324      	adds	r3, #36	; 0x24
 8011972:	2101      	movs	r1, #1
 8011974:	4618      	mov	r0, r3
 8011976:	f000 fdb9 	bl	80124ec <RCCEx_PLL3_Config>
 801197a:	4603      	mov	r3, r0
 801197c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801197e:	e009      	b.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011980:	2301      	movs	r3, #1
 8011982:	75fb      	strb	r3, [r7, #23]
      break;
 8011984:	e006      	b.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8011986:	bf00      	nop
 8011988:	e004      	b.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 801198a:	bf00      	nop
 801198c:	e002      	b.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 801198e:	bf00      	nop
 8011990:	e000      	b.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8011992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011994:	7dfb      	ldrb	r3, [r7, #23]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d109      	bne.n	80119ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801199a:	4b54      	ldr	r3, [pc, #336]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 801199c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801199e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80119a6:	4951      	ldr	r1, [pc, #324]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80119a8:	4313      	orrs	r3, r2
 80119aa:	650b      	str	r3, [r1, #80]	; 0x50
 80119ac:	e001      	b.n	80119b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119ae:	7dfb      	ldrb	r3, [r7, #23]
 80119b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d04b      	beq.n	8011a56 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80119c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80119c8:	d02e      	beq.n	8011a28 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80119ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80119ce:	d828      	bhi.n	8011a22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80119d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80119d4:	d02a      	beq.n	8011a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80119d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80119da:	d822      	bhi.n	8011a22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80119dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80119e0:	d026      	beq.n	8011a30 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80119e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80119e6:	d81c      	bhi.n	8011a22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80119e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80119ec:	d010      	beq.n	8011a10 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80119ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80119f2:	d816      	bhi.n	8011a22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d01d      	beq.n	8011a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80119f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80119fc:	d111      	bne.n	8011a22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	3304      	adds	r3, #4
 8011a02:	2101      	movs	r1, #1
 8011a04:	4618      	mov	r0, r3
 8011a06:	f000 fcbf 	bl	8012388 <RCCEx_PLL2_Config>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011a0e:	e012      	b.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	3324      	adds	r3, #36	; 0x24
 8011a14:	2101      	movs	r1, #1
 8011a16:	4618      	mov	r0, r3
 8011a18:	f000 fd68 	bl	80124ec <RCCEx_PLL3_Config>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011a20:	e009      	b.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8011a22:	2301      	movs	r3, #1
 8011a24:	75fb      	strb	r3, [r7, #23]
      break;
 8011a26:	e006      	b.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8011a28:	bf00      	nop
 8011a2a:	e004      	b.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8011a2c:	bf00      	nop
 8011a2e:	e002      	b.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8011a30:	bf00      	nop
 8011a32:	e000      	b.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8011a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011a36:	7dfb      	ldrb	r3, [r7, #23]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d10a      	bne.n	8011a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8011a3c:	4b2b      	ldr	r3, [pc, #172]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a40:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011a4a:	4928      	ldr	r1, [pc, #160]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011a4c:	4313      	orrs	r3, r2
 8011a4e:	658b      	str	r3, [r1, #88]	; 0x58
 8011a50:	e001      	b.n	8011a56 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a52:	7dfb      	ldrb	r3, [r7, #23]
 8011a54:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d02f      	beq.n	8011ac2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a6a:	d00e      	beq.n	8011a8a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8011a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a70:	d814      	bhi.n	8011a9c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d015      	beq.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8011a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011a7a:	d10f      	bne.n	8011a9c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011a7c:	4b1b      	ldr	r3, [pc, #108]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a80:	4a1a      	ldr	r2, [pc, #104]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011a88:	e00c      	b.n	8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	3304      	adds	r3, #4
 8011a8e:	2101      	movs	r1, #1
 8011a90:	4618      	mov	r0, r3
 8011a92:	f000 fc79 	bl	8012388 <RCCEx_PLL2_Config>
 8011a96:	4603      	mov	r3, r0
 8011a98:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011a9a:	e003      	b.n	8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8011aa0:	e000      	b.n	8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8011aa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011aa4:	7dfb      	ldrb	r3, [r7, #23]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d109      	bne.n	8011abe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011aaa:	4b10      	ldr	r3, [pc, #64]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011aae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab6:	490d      	ldr	r1, [pc, #52]	; (8011aec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8011ab8:	4313      	orrs	r3, r2
 8011aba:	650b      	str	r3, [r1, #80]	; 0x50
 8011abc:	e001      	b.n	8011ac2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011abe:	7dfb      	ldrb	r3, [r7, #23]
 8011ac0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d033      	beq.n	8011b36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ad2:	2b03      	cmp	r3, #3
 8011ad4:	d81c      	bhi.n	8011b10 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8011ad6:	a201      	add	r2, pc, #4	; (adr r2, 8011adc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8011ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011adc:	08011b17 	.word	0x08011b17
 8011ae0:	08011af1 	.word	0x08011af1
 8011ae4:	08011aff 	.word	0x08011aff
 8011ae8:	08011b17 	.word	0x08011b17
 8011aec:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011af0:	4bb8      	ldr	r3, [pc, #736]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af4:	4ab7      	ldr	r2, [pc, #732]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011afc:	e00c      	b.n	8011b18 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	3304      	adds	r3, #4
 8011b02:	2102      	movs	r1, #2
 8011b04:	4618      	mov	r0, r3
 8011b06:	f000 fc3f 	bl	8012388 <RCCEx_PLL2_Config>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011b0e:	e003      	b.n	8011b18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011b10:	2301      	movs	r3, #1
 8011b12:	75fb      	strb	r3, [r7, #23]
      break;
 8011b14:	e000      	b.n	8011b18 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8011b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b18:	7dfb      	ldrb	r3, [r7, #23]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d109      	bne.n	8011b32 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8011b1e:	4bad      	ldr	r3, [pc, #692]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b22:	f023 0203 	bic.w	r2, r3, #3
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b2a:	49aa      	ldr	r1, [pc, #680]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011b2c:	4313      	orrs	r3, r2
 8011b2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011b30:	e001      	b.n	8011b36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b32:	7dfb      	ldrb	r3, [r7, #23]
 8011b34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	f000 8086 	beq.w	8011c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011b44:	4ba4      	ldr	r3, [pc, #656]	; (8011dd8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4aa3      	ldr	r2, [pc, #652]	; (8011dd8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8011b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011b50:	f7fb fac4 	bl	800d0dc <HAL_GetTick>
 8011b54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011b56:	e009      	b.n	8011b6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011b58:	f7fb fac0 	bl	800d0dc <HAL_GetTick>
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	1ad3      	subs	r3, r2, r3
 8011b62:	2b64      	cmp	r3, #100	; 0x64
 8011b64:	d902      	bls.n	8011b6c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8011b66:	2303      	movs	r3, #3
 8011b68:	75fb      	strb	r3, [r7, #23]
        break;
 8011b6a:	e005      	b.n	8011b78 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011b6c:	4b9a      	ldr	r3, [pc, #616]	; (8011dd8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d0ef      	beq.n	8011b58 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8011b78:	7dfb      	ldrb	r3, [r7, #23]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d166      	bne.n	8011c4c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011b7e:	4b95      	ldr	r3, [pc, #596]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011b80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011b88:	4053      	eors	r3, r2
 8011b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d013      	beq.n	8011bba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011b92:	4b90      	ldr	r3, [pc, #576]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b9a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011b9c:	4b8d      	ldr	r3, [pc, #564]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ba0:	4a8c      	ldr	r2, [pc, #560]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011ba6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011ba8:	4b8a      	ldr	r3, [pc, #552]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bac:	4a89      	ldr	r2, [pc, #548]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011bb2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011bb4:	4a87      	ldr	r2, [pc, #540]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bc4:	d115      	bne.n	8011bf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011bc6:	f7fb fa89 	bl	800d0dc <HAL_GetTick>
 8011bca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011bcc:	e00b      	b.n	8011be6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011bce:	f7fb fa85 	bl	800d0dc <HAL_GetTick>
 8011bd2:	4602      	mov	r2, r0
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	1ad3      	subs	r3, r2, r3
 8011bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	d902      	bls.n	8011be6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8011be0:	2303      	movs	r3, #3
 8011be2:	75fb      	strb	r3, [r7, #23]
            break;
 8011be4:	e005      	b.n	8011bf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011be6:	4b7b      	ldr	r3, [pc, #492]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bea:	f003 0302 	and.w	r3, r3, #2
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d0ed      	beq.n	8011bce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8011bf2:	7dfb      	ldrb	r3, [r7, #23]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d126      	bne.n	8011c46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011c02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011c06:	d10d      	bne.n	8011c24 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8011c08:	4b72      	ldr	r3, [pc, #456]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011c0a:	691b      	ldr	r3, [r3, #16]
 8011c0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011c16:	0919      	lsrs	r1, r3, #4
 8011c18:	4b70      	ldr	r3, [pc, #448]	; (8011ddc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8011c1a:	400b      	ands	r3, r1
 8011c1c:	496d      	ldr	r1, [pc, #436]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011c1e:	4313      	orrs	r3, r2
 8011c20:	610b      	str	r3, [r1, #16]
 8011c22:	e005      	b.n	8011c30 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8011c24:	4b6b      	ldr	r3, [pc, #428]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011c26:	691b      	ldr	r3, [r3, #16]
 8011c28:	4a6a      	ldr	r2, [pc, #424]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011c2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c2e:	6113      	str	r3, [r2, #16]
 8011c30:	4b68      	ldr	r3, [pc, #416]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011c32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011c3e:	4965      	ldr	r1, [pc, #404]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011c40:	4313      	orrs	r3, r2
 8011c42:	670b      	str	r3, [r1, #112]	; 0x70
 8011c44:	e004      	b.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011c46:	7dfb      	ldrb	r3, [r7, #23]
 8011c48:	75bb      	strb	r3, [r7, #22]
 8011c4a:	e001      	b.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c4c:	7dfb      	ldrb	r3, [r7, #23]
 8011c4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	f003 0301 	and.w	r3, r3, #1
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d07e      	beq.n	8011d5a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c60:	2b28      	cmp	r3, #40	; 0x28
 8011c62:	d867      	bhi.n	8011d34 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8011c64:	a201      	add	r2, pc, #4	; (adr r2, 8011c6c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8011c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c6a:	bf00      	nop
 8011c6c:	08011d3b 	.word	0x08011d3b
 8011c70:	08011d35 	.word	0x08011d35
 8011c74:	08011d35 	.word	0x08011d35
 8011c78:	08011d35 	.word	0x08011d35
 8011c7c:	08011d35 	.word	0x08011d35
 8011c80:	08011d35 	.word	0x08011d35
 8011c84:	08011d35 	.word	0x08011d35
 8011c88:	08011d35 	.word	0x08011d35
 8011c8c:	08011d11 	.word	0x08011d11
 8011c90:	08011d35 	.word	0x08011d35
 8011c94:	08011d35 	.word	0x08011d35
 8011c98:	08011d35 	.word	0x08011d35
 8011c9c:	08011d35 	.word	0x08011d35
 8011ca0:	08011d35 	.word	0x08011d35
 8011ca4:	08011d35 	.word	0x08011d35
 8011ca8:	08011d35 	.word	0x08011d35
 8011cac:	08011d23 	.word	0x08011d23
 8011cb0:	08011d35 	.word	0x08011d35
 8011cb4:	08011d35 	.word	0x08011d35
 8011cb8:	08011d35 	.word	0x08011d35
 8011cbc:	08011d35 	.word	0x08011d35
 8011cc0:	08011d35 	.word	0x08011d35
 8011cc4:	08011d35 	.word	0x08011d35
 8011cc8:	08011d35 	.word	0x08011d35
 8011ccc:	08011d3b 	.word	0x08011d3b
 8011cd0:	08011d35 	.word	0x08011d35
 8011cd4:	08011d35 	.word	0x08011d35
 8011cd8:	08011d35 	.word	0x08011d35
 8011cdc:	08011d35 	.word	0x08011d35
 8011ce0:	08011d35 	.word	0x08011d35
 8011ce4:	08011d35 	.word	0x08011d35
 8011ce8:	08011d35 	.word	0x08011d35
 8011cec:	08011d3b 	.word	0x08011d3b
 8011cf0:	08011d35 	.word	0x08011d35
 8011cf4:	08011d35 	.word	0x08011d35
 8011cf8:	08011d35 	.word	0x08011d35
 8011cfc:	08011d35 	.word	0x08011d35
 8011d00:	08011d35 	.word	0x08011d35
 8011d04:	08011d35 	.word	0x08011d35
 8011d08:	08011d35 	.word	0x08011d35
 8011d0c:	08011d3b 	.word	0x08011d3b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	3304      	adds	r3, #4
 8011d14:	2101      	movs	r1, #1
 8011d16:	4618      	mov	r0, r3
 8011d18:	f000 fb36 	bl	8012388 <RCCEx_PLL2_Config>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011d20:	e00c      	b.n	8011d3c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	3324      	adds	r3, #36	; 0x24
 8011d26:	2101      	movs	r1, #1
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f000 fbdf 	bl	80124ec <RCCEx_PLL3_Config>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011d32:	e003      	b.n	8011d3c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011d34:	2301      	movs	r3, #1
 8011d36:	75fb      	strb	r3, [r7, #23]
      break;
 8011d38:	e000      	b.n	8011d3c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8011d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011d3c:	7dfb      	ldrb	r3, [r7, #23]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d109      	bne.n	8011d56 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8011d42:	4b24      	ldr	r3, [pc, #144]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d46:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d4e:	4921      	ldr	r1, [pc, #132]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011d50:	4313      	orrs	r3, r2
 8011d52:	654b      	str	r3, [r1, #84]	; 0x54
 8011d54:	e001      	b.n	8011d5a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d56:	7dfb      	ldrb	r3, [r7, #23]
 8011d58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	f003 0302 	and.w	r3, r3, #2
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d03e      	beq.n	8011de4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d6a:	2b05      	cmp	r3, #5
 8011d6c:	d820      	bhi.n	8011db0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8011d6e:	a201      	add	r2, pc, #4	; (adr r2, 8011d74 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8011d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d74:	08011db7 	.word	0x08011db7
 8011d78:	08011d8d 	.word	0x08011d8d
 8011d7c:	08011d9f 	.word	0x08011d9f
 8011d80:	08011db7 	.word	0x08011db7
 8011d84:	08011db7 	.word	0x08011db7
 8011d88:	08011db7 	.word	0x08011db7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	3304      	adds	r3, #4
 8011d90:	2101      	movs	r1, #1
 8011d92:	4618      	mov	r0, r3
 8011d94:	f000 faf8 	bl	8012388 <RCCEx_PLL2_Config>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8011d9c:	e00c      	b.n	8011db8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	3324      	adds	r3, #36	; 0x24
 8011da2:	2101      	movs	r1, #1
 8011da4:	4618      	mov	r0, r3
 8011da6:	f000 fba1 	bl	80124ec <RCCEx_PLL3_Config>
 8011daa:	4603      	mov	r3, r0
 8011dac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8011dae:	e003      	b.n	8011db8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011db0:	2301      	movs	r3, #1
 8011db2:	75fb      	strb	r3, [r7, #23]
      break;
 8011db4:	e000      	b.n	8011db8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8011db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011db8:	7dfb      	ldrb	r3, [r7, #23]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d110      	bne.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8011dbe:	4b05      	ldr	r3, [pc, #20]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dc2:	f023 0207 	bic.w	r2, r3, #7
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dca:	4902      	ldr	r1, [pc, #8]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8011dcc:	4313      	orrs	r3, r2
 8011dce:	654b      	str	r3, [r1, #84]	; 0x54
 8011dd0:	e008      	b.n	8011de4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8011dd2:	bf00      	nop
 8011dd4:	58024400 	.word	0x58024400
 8011dd8:	58024800 	.word	0x58024800
 8011ddc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011de0:	7dfb      	ldrb	r3, [r7, #23]
 8011de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	f003 0304 	and.w	r3, r3, #4
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d039      	beq.n	8011e64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011df6:	2b05      	cmp	r3, #5
 8011df8:	d820      	bhi.n	8011e3c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8011dfa:	a201      	add	r2, pc, #4	; (adr r2, 8011e00 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8011dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e00:	08011e43 	.word	0x08011e43
 8011e04:	08011e19 	.word	0x08011e19
 8011e08:	08011e2b 	.word	0x08011e2b
 8011e0c:	08011e43 	.word	0x08011e43
 8011e10:	08011e43 	.word	0x08011e43
 8011e14:	08011e43 	.word	0x08011e43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	3304      	adds	r3, #4
 8011e1c:	2101      	movs	r1, #1
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f000 fab2 	bl	8012388 <RCCEx_PLL2_Config>
 8011e24:	4603      	mov	r3, r0
 8011e26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011e28:	e00c      	b.n	8011e44 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	3324      	adds	r3, #36	; 0x24
 8011e2e:	2101      	movs	r1, #1
 8011e30:	4618      	mov	r0, r3
 8011e32:	f000 fb5b 	bl	80124ec <RCCEx_PLL3_Config>
 8011e36:	4603      	mov	r3, r0
 8011e38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011e3a:	e003      	b.n	8011e44 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8011e40:	e000      	b.n	8011e44 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8011e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011e44:	7dfb      	ldrb	r3, [r7, #23]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10a      	bne.n	8011e60 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011e4a:	4bb7      	ldr	r3, [pc, #732]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e4e:	f023 0207 	bic.w	r2, r3, #7
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e58:	49b3      	ldr	r1, [pc, #716]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8011e5e:	e001      	b.n	8011e64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e60:	7dfb      	ldrb	r3, [r7, #23]
 8011e62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f003 0320 	and.w	r3, r3, #32
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d04b      	beq.n	8011f08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011e7a:	d02e      	beq.n	8011eda <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8011e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011e80:	d828      	bhi.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8011e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e86:	d02a      	beq.n	8011ede <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8011e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e8c:	d822      	bhi.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8011e8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011e92:	d026      	beq.n	8011ee2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8011e94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011e98:	d81c      	bhi.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8011e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e9e:	d010      	beq.n	8011ec2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8011ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ea4:	d816      	bhi.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d01d      	beq.n	8011ee6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8011eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011eae:	d111      	bne.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	3304      	adds	r3, #4
 8011eb4:	2100      	movs	r1, #0
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f000 fa66 	bl	8012388 <RCCEx_PLL2_Config>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8011ec0:	e012      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	3324      	adds	r3, #36	; 0x24
 8011ec6:	2102      	movs	r1, #2
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f000 fb0f 	bl	80124ec <RCCEx_PLL3_Config>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8011ed2:	e009      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8011ed8:	e006      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8011eda:	bf00      	nop
 8011edc:	e004      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8011ede:	bf00      	nop
 8011ee0:	e002      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8011ee2:	bf00      	nop
 8011ee4:	e000      	b.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8011ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011ee8:	7dfb      	ldrb	r3, [r7, #23]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d10a      	bne.n	8011f04 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011eee:	4b8e      	ldr	r3, [pc, #568]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ef2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011efc:	498a      	ldr	r1, [pc, #552]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011efe:	4313      	orrs	r3, r2
 8011f00:	654b      	str	r3, [r1, #84]	; 0x54
 8011f02:	e001      	b.n	8011f08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f04:	7dfb      	ldrb	r3, [r7, #23]
 8011f06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d04b      	beq.n	8011fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011f1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8011f1e:	d02e      	beq.n	8011f7e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8011f20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8011f24:	d828      	bhi.n	8011f78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8011f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f2a:	d02a      	beq.n	8011f82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8011f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f30:	d822      	bhi.n	8011f78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8011f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011f36:	d026      	beq.n	8011f86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8011f38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011f3c:	d81c      	bhi.n	8011f78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8011f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f42:	d010      	beq.n	8011f66 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8011f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f48:	d816      	bhi.n	8011f78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d01d      	beq.n	8011f8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8011f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f52:	d111      	bne.n	8011f78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	3304      	adds	r3, #4
 8011f58:	2100      	movs	r1, #0
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f000 fa14 	bl	8012388 <RCCEx_PLL2_Config>
 8011f60:	4603      	mov	r3, r0
 8011f62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8011f64:	e012      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	3324      	adds	r3, #36	; 0x24
 8011f6a:	2102      	movs	r1, #2
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f000 fabd 	bl	80124ec <RCCEx_PLL3_Config>
 8011f72:	4603      	mov	r3, r0
 8011f74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8011f76:	e009      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8011f7c:	e006      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8011f7e:	bf00      	nop
 8011f80:	e004      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8011f82:	bf00      	nop
 8011f84:	e002      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8011f86:	bf00      	nop
 8011f88:	e000      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8011f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011f8c:	7dfb      	ldrb	r3, [r7, #23]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d10a      	bne.n	8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011f92:	4b65      	ldr	r3, [pc, #404]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011fa0:	4961      	ldr	r1, [pc, #388]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8011fa2:	4313      	orrs	r3, r2
 8011fa4:	658b      	str	r3, [r1, #88]	; 0x58
 8011fa6:	e001      	b.n	8011fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011fa8:	7dfb      	ldrb	r3, [r7, #23]
 8011faa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d04b      	beq.n	8012050 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011fbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011fc2:	d02e      	beq.n	8012022 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8011fc4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011fc8:	d828      	bhi.n	801201c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8011fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011fce:	d02a      	beq.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8011fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011fd4:	d822      	bhi.n	801201c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8011fd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011fda:	d026      	beq.n	801202a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8011fdc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011fe0:	d81c      	bhi.n	801201c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8011fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011fe6:	d010      	beq.n	801200a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8011fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011fec:	d816      	bhi.n	801201c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d01d      	beq.n	801202e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8011ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ff6:	d111      	bne.n	801201c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	3304      	adds	r3, #4
 8011ffc:	2100      	movs	r1, #0
 8011ffe:	4618      	mov	r0, r3
 8012000:	f000 f9c2 	bl	8012388 <RCCEx_PLL2_Config>
 8012004:	4603      	mov	r3, r0
 8012006:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8012008:	e012      	b.n	8012030 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	3324      	adds	r3, #36	; 0x24
 801200e:	2102      	movs	r1, #2
 8012010:	4618      	mov	r0, r3
 8012012:	f000 fa6b 	bl	80124ec <RCCEx_PLL3_Config>
 8012016:	4603      	mov	r3, r0
 8012018:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801201a:	e009      	b.n	8012030 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801201c:	2301      	movs	r3, #1
 801201e:	75fb      	strb	r3, [r7, #23]
      break;
 8012020:	e006      	b.n	8012030 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8012022:	bf00      	nop
 8012024:	e004      	b.n	8012030 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8012026:	bf00      	nop
 8012028:	e002      	b.n	8012030 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 801202a:	bf00      	nop
 801202c:	e000      	b.n	8012030 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 801202e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012030:	7dfb      	ldrb	r3, [r7, #23]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d10a      	bne.n	801204c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012036:	4b3c      	ldr	r3, [pc, #240]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8012038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801203a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012044:	4938      	ldr	r1, [pc, #224]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8012046:	4313      	orrs	r3, r2
 8012048:	658b      	str	r3, [r1, #88]	; 0x58
 801204a:	e001      	b.n	8012050 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801204c:	7dfb      	ldrb	r3, [r7, #23]
 801204e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	f003 0308 	and.w	r3, r3, #8
 8012058:	2b00      	cmp	r3, #0
 801205a:	d01a      	beq.n	8012092 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012066:	d10a      	bne.n	801207e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	3324      	adds	r3, #36	; 0x24
 801206c:	2102      	movs	r1, #2
 801206e:	4618      	mov	r0, r3
 8012070:	f000 fa3c 	bl	80124ec <RCCEx_PLL3_Config>
 8012074:	4603      	mov	r3, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	d001      	beq.n	801207e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 801207a:	2301      	movs	r3, #1
 801207c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801207e:	4b2a      	ldr	r3, [pc, #168]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8012080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012082:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801208c:	4926      	ldr	r1, [pc, #152]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 801208e:	4313      	orrs	r3, r2
 8012090:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	f003 0310 	and.w	r3, r3, #16
 801209a:	2b00      	cmp	r3, #0
 801209c:	d01a      	beq.n	80120d4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80120a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120a8:	d10a      	bne.n	80120c0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	3324      	adds	r3, #36	; 0x24
 80120ae:	2102      	movs	r1, #2
 80120b0:	4618      	mov	r0, r3
 80120b2:	f000 fa1b 	bl	80124ec <RCCEx_PLL3_Config>
 80120b6:	4603      	mov	r3, r0
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d001      	beq.n	80120c0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80120bc:	2301      	movs	r3, #1
 80120be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80120c0:	4b19      	ldr	r3, [pc, #100]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80120c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80120ce:	4916      	ldr	r1, [pc, #88]	; (8012128 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80120d0:	4313      	orrs	r3, r2
 80120d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d036      	beq.n	801214e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80120e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80120ea:	d01f      	beq.n	801212c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80120ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80120f0:	d817      	bhi.n	8012122 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d003      	beq.n	80120fe <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80120f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120fa:	d009      	beq.n	8012110 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80120fc:	e011      	b.n	8012122 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	3304      	adds	r3, #4
 8012102:	2100      	movs	r1, #0
 8012104:	4618      	mov	r0, r3
 8012106:	f000 f93f 	bl	8012388 <RCCEx_PLL2_Config>
 801210a:	4603      	mov	r3, r0
 801210c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801210e:	e00e      	b.n	801212e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	3324      	adds	r3, #36	; 0x24
 8012114:	2102      	movs	r1, #2
 8012116:	4618      	mov	r0, r3
 8012118:	f000 f9e8 	bl	80124ec <RCCEx_PLL3_Config>
 801211c:	4603      	mov	r3, r0
 801211e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8012120:	e005      	b.n	801212e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012122:	2301      	movs	r3, #1
 8012124:	75fb      	strb	r3, [r7, #23]
      break;
 8012126:	e002      	b.n	801212e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8012128:	58024400 	.word	0x58024400
      break;
 801212c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801212e:	7dfb      	ldrb	r3, [r7, #23]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d10a      	bne.n	801214a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012134:	4b93      	ldr	r3, [pc, #588]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012142:	4990      	ldr	r1, [pc, #576]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012144:	4313      	orrs	r3, r2
 8012146:	658b      	str	r3, [r1, #88]	; 0x58
 8012148:	e001      	b.n	801214e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801214a:	7dfb      	ldrb	r3, [r7, #23]
 801214c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012156:	2b00      	cmp	r3, #0
 8012158:	d033      	beq.n	80121c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012160:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012164:	d01c      	beq.n	80121a0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8012166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801216a:	d816      	bhi.n	801219a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 801216c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012170:	d003      	beq.n	801217a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8012172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012176:	d007      	beq.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8012178:	e00f      	b.n	801219a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801217a:	4b82      	ldr	r3, [pc, #520]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801217e:	4a81      	ldr	r2, [pc, #516]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8012186:	e00c      	b.n	80121a2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	3324      	adds	r3, #36	; 0x24
 801218c:	2101      	movs	r1, #1
 801218e:	4618      	mov	r0, r3
 8012190:	f000 f9ac 	bl	80124ec <RCCEx_PLL3_Config>
 8012194:	4603      	mov	r3, r0
 8012196:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8012198:	e003      	b.n	80121a2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801219a:	2301      	movs	r3, #1
 801219c:	75fb      	strb	r3, [r7, #23]
      break;
 801219e:	e000      	b.n	80121a2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80121a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80121a2:	7dfb      	ldrb	r3, [r7, #23]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d10a      	bne.n	80121be <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80121a8:	4b76      	ldr	r3, [pc, #472]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80121aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121b6:	4973      	ldr	r1, [pc, #460]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80121b8:	4313      	orrs	r3, r2
 80121ba:	654b      	str	r3, [r1, #84]	; 0x54
 80121bc:	e001      	b.n	80121c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80121be:	7dfb      	ldrb	r3, [r7, #23]
 80121c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d029      	beq.n	8012222 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d003      	beq.n	80121de <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80121d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121da:	d007      	beq.n	80121ec <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80121dc:	e00f      	b.n	80121fe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121de:	4b69      	ldr	r3, [pc, #420]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80121e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121e2:	4a68      	ldr	r2, [pc, #416]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80121e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80121e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80121ea:	e00b      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	3304      	adds	r3, #4
 80121f0:	2102      	movs	r1, #2
 80121f2:	4618      	mov	r0, r3
 80121f4:	f000 f8c8 	bl	8012388 <RCCEx_PLL2_Config>
 80121f8:	4603      	mov	r3, r0
 80121fa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80121fc:	e002      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80121fe:	2301      	movs	r3, #1
 8012200:	75fb      	strb	r3, [r7, #23]
      break;
 8012202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012204:	7dfb      	ldrb	r3, [r7, #23]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d109      	bne.n	801221e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801220a:	4b5e      	ldr	r3, [pc, #376]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801220e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012216:	495b      	ldr	r1, [pc, #364]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012218:	4313      	orrs	r3, r2
 801221a:	64cb      	str	r3, [r1, #76]	; 0x4c
 801221c:	e001      	b.n	8012222 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801221e:	7dfb      	ldrb	r3, [r7, #23]
 8012220:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00a      	beq.n	8012244 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	3324      	adds	r3, #36	; 0x24
 8012232:	2102      	movs	r1, #2
 8012234:	4618      	mov	r0, r3
 8012236:	f000 f959 	bl	80124ec <RCCEx_PLL3_Config>
 801223a:	4603      	mov	r3, r0
 801223c:	2b00      	cmp	r3, #0
 801223e:	d001      	beq.n	8012244 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8012240:	2301      	movs	r3, #1
 8012242:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801224c:	2b00      	cmp	r3, #0
 801224e:	d030      	beq.n	80122b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012258:	d017      	beq.n	801228a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 801225a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801225e:	d811      	bhi.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8012260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012264:	d013      	beq.n	801228e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8012266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801226a:	d80b      	bhi.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 801226c:	2b00      	cmp	r3, #0
 801226e:	d010      	beq.n	8012292 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8012270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012274:	d106      	bne.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012276:	4b43      	ldr	r3, [pc, #268]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801227a:	4a42      	ldr	r2, [pc, #264]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8012282:	e007      	b.n	8012294 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012284:	2301      	movs	r3, #1
 8012286:	75fb      	strb	r3, [r7, #23]
      break;
 8012288:	e004      	b.n	8012294 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 801228a:	bf00      	nop
 801228c:	e002      	b.n	8012294 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 801228e:	bf00      	nop
 8012290:	e000      	b.n	8012294 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8012292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012294:	7dfb      	ldrb	r3, [r7, #23]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d109      	bne.n	80122ae <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801229a:	4b3a      	ldr	r3, [pc, #232]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801229e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122a6:	4937      	ldr	r1, [pc, #220]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80122a8:	4313      	orrs	r3, r2
 80122aa:	654b      	str	r3, [r1, #84]	; 0x54
 80122ac:	e001      	b.n	80122b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122ae:	7dfb      	ldrb	r3, [r7, #23]
 80122b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d008      	beq.n	80122d0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80122be:	4b31      	ldr	r3, [pc, #196]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80122c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122ca:	492e      	ldr	r1, [pc, #184]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80122cc:	4313      	orrs	r3, r2
 80122ce:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d009      	beq.n	80122f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80122dc:	4b29      	ldr	r3, [pc, #164]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80122de:	691b      	ldr	r3, [r3, #16]
 80122e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80122ea:	4926      	ldr	r1, [pc, #152]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80122ec:	4313      	orrs	r3, r2
 80122ee:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d008      	beq.n	801230e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80122fc:	4b21      	ldr	r3, [pc, #132]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80122fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012300:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012308:	491e      	ldr	r1, [pc, #120]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801230a:	4313      	orrs	r3, r2
 801230c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00d      	beq.n	8012336 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801231a:	4b1a      	ldr	r3, [pc, #104]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801231c:	691b      	ldr	r3, [r3, #16]
 801231e:	4a19      	ldr	r2, [pc, #100]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012320:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012324:	6113      	str	r3, [r2, #16]
 8012326:	4b17      	ldr	r3, [pc, #92]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012328:	691a      	ldr	r2, [r3, #16]
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012330:	4914      	ldr	r1, [pc, #80]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012332:	4313      	orrs	r3, r2
 8012334:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	da08      	bge.n	8012350 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801233e:	4b11      	ldr	r3, [pc, #68]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8012340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801234a:	490e      	ldr	r1, [pc, #56]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801234c:	4313      	orrs	r3, r2
 801234e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012358:	2b00      	cmp	r3, #0
 801235a:	d009      	beq.n	8012370 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801235c:	4b09      	ldr	r3, [pc, #36]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012360:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801236a:	4906      	ldr	r1, [pc, #24]	; (8012384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801236c:	4313      	orrs	r3, r2
 801236e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8012370:	7dbb      	ldrb	r3, [r7, #22]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d101      	bne.n	801237a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8012376:	2300      	movs	r3, #0
 8012378:	e000      	b.n	801237c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 801237a:	2301      	movs	r3, #1
}
 801237c:	4618      	mov	r0, r3
 801237e:	3718      	adds	r7, #24
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}
 8012384:	58024400 	.word	0x58024400

08012388 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b084      	sub	sp, #16
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012392:	2300      	movs	r3, #0
 8012394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012396:	4b53      	ldr	r3, [pc, #332]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 8012398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801239a:	f003 0303 	and.w	r3, r3, #3
 801239e:	2b03      	cmp	r3, #3
 80123a0:	d101      	bne.n	80123a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80123a2:	2301      	movs	r3, #1
 80123a4:	e099      	b.n	80124da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80123a6:	4b4f      	ldr	r3, [pc, #316]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	4a4e      	ldr	r2, [pc, #312]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 80123ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80123b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80123b2:	f7fa fe93 	bl	800d0dc <HAL_GetTick>
 80123b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80123b8:	e008      	b.n	80123cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80123ba:	f7fa fe8f 	bl	800d0dc <HAL_GetTick>
 80123be:	4602      	mov	r2, r0
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	1ad3      	subs	r3, r2, r3
 80123c4:	2b02      	cmp	r3, #2
 80123c6:	d901      	bls.n	80123cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80123c8:	2303      	movs	r3, #3
 80123ca:	e086      	b.n	80124da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80123cc:	4b45      	ldr	r3, [pc, #276]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d1f0      	bne.n	80123ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80123d8:	4b42      	ldr	r3, [pc, #264]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 80123da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	031b      	lsls	r3, r3, #12
 80123e6:	493f      	ldr	r1, [pc, #252]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 80123e8:	4313      	orrs	r3, r2
 80123ea:	628b      	str	r3, [r1, #40]	; 0x28
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	3b01      	subs	r3, #1
 80123f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	689b      	ldr	r3, [r3, #8]
 80123fa:	3b01      	subs	r3, #1
 80123fc:	025b      	lsls	r3, r3, #9
 80123fe:	b29b      	uxth	r3, r3
 8012400:	431a      	orrs	r2, r3
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	68db      	ldr	r3, [r3, #12]
 8012406:	3b01      	subs	r3, #1
 8012408:	041b      	lsls	r3, r3, #16
 801240a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801240e:	431a      	orrs	r2, r3
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	691b      	ldr	r3, [r3, #16]
 8012414:	3b01      	subs	r3, #1
 8012416:	061b      	lsls	r3, r3, #24
 8012418:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801241c:	4931      	ldr	r1, [pc, #196]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 801241e:	4313      	orrs	r3, r2
 8012420:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012422:	4b30      	ldr	r3, [pc, #192]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 8012424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012426:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	695b      	ldr	r3, [r3, #20]
 801242e:	492d      	ldr	r1, [pc, #180]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 8012430:	4313      	orrs	r3, r2
 8012432:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012434:	4b2b      	ldr	r3, [pc, #172]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 8012436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012438:	f023 0220 	bic.w	r2, r3, #32
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	699b      	ldr	r3, [r3, #24]
 8012440:	4928      	ldr	r1, [pc, #160]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 8012442:	4313      	orrs	r3, r2
 8012444:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012446:	4b27      	ldr	r3, [pc, #156]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 8012448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801244a:	4a26      	ldr	r2, [pc, #152]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 801244c:	f023 0310 	bic.w	r3, r3, #16
 8012450:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012452:	4b24      	ldr	r3, [pc, #144]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 8012454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012456:	4b24      	ldr	r3, [pc, #144]	; (80124e8 <RCCEx_PLL2_Config+0x160>)
 8012458:	4013      	ands	r3, r2
 801245a:	687a      	ldr	r2, [r7, #4]
 801245c:	69d2      	ldr	r2, [r2, #28]
 801245e:	00d2      	lsls	r2, r2, #3
 8012460:	4920      	ldr	r1, [pc, #128]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 8012462:	4313      	orrs	r3, r2
 8012464:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012466:	4b1f      	ldr	r3, [pc, #124]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 8012468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801246a:	4a1e      	ldr	r2, [pc, #120]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 801246c:	f043 0310 	orr.w	r3, r3, #16
 8012470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d106      	bne.n	8012486 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012478:	4b1a      	ldr	r3, [pc, #104]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 801247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801247c:	4a19      	ldr	r2, [pc, #100]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 801247e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012482:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012484:	e00f      	b.n	80124a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	2b01      	cmp	r3, #1
 801248a:	d106      	bne.n	801249a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801248c:	4b15      	ldr	r3, [pc, #84]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 801248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012490:	4a14      	ldr	r2, [pc, #80]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 8012492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012496:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012498:	e005      	b.n	80124a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801249a:	4b12      	ldr	r3, [pc, #72]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 801249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801249e:	4a11      	ldr	r2, [pc, #68]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 80124a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80124a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80124a6:	4b0f      	ldr	r3, [pc, #60]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4a0e      	ldr	r2, [pc, #56]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 80124ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80124b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80124b2:	f7fa fe13 	bl	800d0dc <HAL_GetTick>
 80124b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80124b8:	e008      	b.n	80124cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80124ba:	f7fa fe0f 	bl	800d0dc <HAL_GetTick>
 80124be:	4602      	mov	r2, r0
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	1ad3      	subs	r3, r2, r3
 80124c4:	2b02      	cmp	r3, #2
 80124c6:	d901      	bls.n	80124cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80124c8:	2303      	movs	r3, #3
 80124ca:	e006      	b.n	80124da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80124cc:	4b05      	ldr	r3, [pc, #20]	; (80124e4 <RCCEx_PLL2_Config+0x15c>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d0f0      	beq.n	80124ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80124d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3710      	adds	r7, #16
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	58024400 	.word	0x58024400
 80124e8:	ffff0007 	.word	0xffff0007

080124ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b084      	sub	sp, #16
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80124f6:	2300      	movs	r3, #0
 80124f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80124fa:	4b53      	ldr	r3, [pc, #332]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80124fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124fe:	f003 0303 	and.w	r3, r3, #3
 8012502:	2b03      	cmp	r3, #3
 8012504:	d101      	bne.n	801250a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8012506:	2301      	movs	r3, #1
 8012508:	e099      	b.n	801263e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801250a:	4b4f      	ldr	r3, [pc, #316]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	4a4e      	ldr	r2, [pc, #312]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 8012510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012516:	f7fa fde1 	bl	800d0dc <HAL_GetTick>
 801251a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801251c:	e008      	b.n	8012530 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801251e:	f7fa fddd 	bl	800d0dc <HAL_GetTick>
 8012522:	4602      	mov	r2, r0
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	1ad3      	subs	r3, r2, r3
 8012528:	2b02      	cmp	r3, #2
 801252a:	d901      	bls.n	8012530 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801252c:	2303      	movs	r3, #3
 801252e:	e086      	b.n	801263e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012530:	4b45      	ldr	r3, [pc, #276]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012538:	2b00      	cmp	r3, #0
 801253a:	d1f0      	bne.n	801251e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801253c:	4b42      	ldr	r3, [pc, #264]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 801253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012540:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	051b      	lsls	r3, r3, #20
 801254a:	493f      	ldr	r1, [pc, #252]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 801254c:	4313      	orrs	r3, r2
 801254e:	628b      	str	r3, [r1, #40]	; 0x28
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	3b01      	subs	r3, #1
 8012556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	689b      	ldr	r3, [r3, #8]
 801255e:	3b01      	subs	r3, #1
 8012560:	025b      	lsls	r3, r3, #9
 8012562:	b29b      	uxth	r3, r3
 8012564:	431a      	orrs	r2, r3
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	68db      	ldr	r3, [r3, #12]
 801256a:	3b01      	subs	r3, #1
 801256c:	041b      	lsls	r3, r3, #16
 801256e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012572:	431a      	orrs	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	691b      	ldr	r3, [r3, #16]
 8012578:	3b01      	subs	r3, #1
 801257a:	061b      	lsls	r3, r3, #24
 801257c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012580:	4931      	ldr	r1, [pc, #196]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 8012582:	4313      	orrs	r3, r2
 8012584:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012586:	4b30      	ldr	r3, [pc, #192]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 8012588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801258a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	695b      	ldr	r3, [r3, #20]
 8012592:	492d      	ldr	r1, [pc, #180]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 8012594:	4313      	orrs	r3, r2
 8012596:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012598:	4b2b      	ldr	r3, [pc, #172]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 801259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801259c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	699b      	ldr	r3, [r3, #24]
 80125a4:	4928      	ldr	r1, [pc, #160]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80125a6:	4313      	orrs	r3, r2
 80125a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80125aa:	4b27      	ldr	r3, [pc, #156]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80125ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125ae:	4a26      	ldr	r2, [pc, #152]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80125b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80125b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80125b6:	4b24      	ldr	r3, [pc, #144]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80125b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80125ba:	4b24      	ldr	r3, [pc, #144]	; (801264c <RCCEx_PLL3_Config+0x160>)
 80125bc:	4013      	ands	r3, r2
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	69d2      	ldr	r2, [r2, #28]
 80125c2:	00d2      	lsls	r2, r2, #3
 80125c4:	4920      	ldr	r1, [pc, #128]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80125c6:	4313      	orrs	r3, r2
 80125c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80125ca:	4b1f      	ldr	r3, [pc, #124]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80125cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125ce:	4a1e      	ldr	r2, [pc, #120]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80125d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80125d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d106      	bne.n	80125ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80125dc:	4b1a      	ldr	r3, [pc, #104]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80125de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125e0:	4a19      	ldr	r2, [pc, #100]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80125e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80125e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80125e8:	e00f      	b.n	801260a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d106      	bne.n	80125fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80125f0:	4b15      	ldr	r3, [pc, #84]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80125f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f4:	4a14      	ldr	r2, [pc, #80]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 80125f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80125fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80125fc:	e005      	b.n	801260a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80125fe:	4b12      	ldr	r3, [pc, #72]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 8012600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012602:	4a11      	ldr	r2, [pc, #68]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 8012604:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012608:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801260a:	4b0f      	ldr	r3, [pc, #60]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	4a0e      	ldr	r2, [pc, #56]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 8012610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012616:	f7fa fd61 	bl	800d0dc <HAL_GetTick>
 801261a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801261c:	e008      	b.n	8012630 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801261e:	f7fa fd5d 	bl	800d0dc <HAL_GetTick>
 8012622:	4602      	mov	r2, r0
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	1ad3      	subs	r3, r2, r3
 8012628:	2b02      	cmp	r3, #2
 801262a:	d901      	bls.n	8012630 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801262c:	2303      	movs	r3, #3
 801262e:	e006      	b.n	801263e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012630:	4b05      	ldr	r3, [pc, #20]	; (8012648 <RCCEx_PLL3_Config+0x15c>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012638:	2b00      	cmp	r3, #0
 801263a:	d0f0      	beq.n	801261e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801263c:	7bfb      	ldrb	r3, [r7, #15]
}
 801263e:	4618      	mov	r0, r3
 8012640:	3710      	adds	r7, #16
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	58024400 	.word	0x58024400
 801264c:	ffff0007 	.word	0xffff0007

08012650 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d101      	bne.n	8012664 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8012660:	2301      	movs	r3, #1
 8012662:	e02b      	b.n	80126bc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801266a:	b2db      	uxtb	r3, r3
 801266c:	2b00      	cmp	r3, #0
 801266e:	d106      	bne.n	801267e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2200      	movs	r2, #0
 8012674:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f7ee fe73 	bl	8001364 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2202      	movs	r2, #2
 8012682:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	3304      	adds	r3, #4
 801268e:	4619      	mov	r1, r3
 8012690:	4610      	mov	r0, r2
 8012692:	f000 fb6b 	bl	8012d6c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6818      	ldr	r0, [r3, #0]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	461a      	mov	r2, r3
 80126a0:	6839      	ldr	r1, [r7, #0]
 80126a2:	f000 fbbf 	bl	8012e24 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80126a6:	4b07      	ldr	r3, [pc, #28]	; (80126c4 <HAL_SDRAM_Init+0x74>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	4a06      	ldr	r2, [pc, #24]	; (80126c4 <HAL_SDRAM_Init+0x74>)
 80126ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80126b0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	2201      	movs	r2, #1
 80126b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80126ba:	2300      	movs	r3, #0
}
 80126bc:	4618      	mov	r0, r3
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}
 80126c4:	52004000 	.word	0x52004000

080126c8 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f7ee fe8b 	bl	80013ec <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	4619      	mov	r1, r3
 80126e0:	4610      	mov	r0, r2
 80126e2:	f000 fc09 	bl	8012ef8 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2200      	movs	r2, #0
 80126ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2200      	movs	r2, #0
 80126f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 80126f6:	2300      	movs	r3, #0
}
 80126f8:	4618      	mov	r0, r3
 80126fa:	3708      	adds	r7, #8
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}

08012700 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b086      	sub	sp, #24
 8012704:	af00      	add	r7, sp, #0
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012712:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8012714:	7dfb      	ldrb	r3, [r7, #23]
 8012716:	2b02      	cmp	r3, #2
 8012718:	d101      	bne.n	801271e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801271a:	2302      	movs	r3, #2
 801271c:	e021      	b.n	8012762 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801271e:	7dfb      	ldrb	r3, [r7, #23]
 8012720:	2b01      	cmp	r3, #1
 8012722:	d002      	beq.n	801272a <HAL_SDRAM_SendCommand+0x2a>
 8012724:	7dfb      	ldrb	r3, [r7, #23]
 8012726:	2b05      	cmp	r3, #5
 8012728:	d118      	bne.n	801275c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	2202      	movs	r2, #2
 801272e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	68b9      	ldr	r1, [r7, #8]
 801273a:	4618      	mov	r0, r3
 801273c:	f000 fbfe 	bl	8012f3c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	2b02      	cmp	r3, #2
 8012746:	d104      	bne.n	8012752 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2205      	movs	r2, #5
 801274c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8012750:	e006      	b.n	8012760 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2201      	movs	r2, #1
 8012756:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801275a:	e001      	b.n	8012760 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 801275c:	2301      	movs	r3, #1
 801275e:	e000      	b.n	8012762 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8012760:	2300      	movs	r3, #0
}
 8012762:	4618      	mov	r0, r3
 8012764:	3718      	adds	r7, #24
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801276a:	b580      	push	{r7, lr}
 801276c:	b082      	sub	sp, #8
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
 8012772:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801277a:	b2db      	uxtb	r3, r3
 801277c:	2b02      	cmp	r3, #2
 801277e:	d101      	bne.n	8012784 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8012780:	2302      	movs	r3, #2
 8012782:	e016      	b.n	80127b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801278a:	b2db      	uxtb	r3, r3
 801278c:	2b01      	cmp	r3, #1
 801278e:	d10f      	bne.n	80127b0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2202      	movs	r2, #2
 8012794:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	6839      	ldr	r1, [r7, #0]
 801279e:	4618      	mov	r0, r3
 80127a0:	f000 fbf0 	bl	8012f84 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2201      	movs	r2, #1
 80127a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80127ac:	2300      	movs	r3, #0
 80127ae:	e000      	b.n	80127b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80127b0:	2301      	movs	r3, #1
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3708      	adds	r7, #8
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}

080127ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80127ba:	b580      	push	{r7, lr}
 80127bc:	b082      	sub	sp, #8
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d101      	bne.n	80127cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80127c8:	2301      	movs	r3, #1
 80127ca:	e049      	b.n	8012860 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d106      	bne.n	80127e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2200      	movs	r2, #0
 80127dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f000 f841 	bl	8012868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	2202      	movs	r2, #2
 80127ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681a      	ldr	r2, [r3, #0]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	3304      	adds	r3, #4
 80127f6:	4619      	mov	r1, r3
 80127f8:	4610      	mov	r0, r2
 80127fa:	f000 f9ff 	bl	8012bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2201      	movs	r2, #1
 8012802:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	2201      	movs	r2, #1
 801280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2201      	movs	r2, #1
 8012812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	2201      	movs	r2, #1
 801281a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	2201      	movs	r2, #1
 8012822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2201      	movs	r2, #1
 801282a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2201      	movs	r2, #1
 8012832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2201      	movs	r2, #1
 801283a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2201      	movs	r2, #1
 8012842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	2201      	movs	r2, #1
 801284a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2201      	movs	r2, #1
 8012852:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2201      	movs	r2, #1
 801285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801285e:	2300      	movs	r3, #0
}
 8012860:	4618      	mov	r0, r3
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8012868:	b480      	push	{r7}
 801286a:	b083      	sub	sp, #12
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012870:	bf00      	nop
 8012872:	370c      	adds	r7, #12
 8012874:	46bd      	mov	sp, r7
 8012876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287a:	4770      	bx	lr

0801287c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801287c:	b480      	push	{r7}
 801287e:	b085      	sub	sp, #20
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801288a:	b2db      	uxtb	r3, r3
 801288c:	2b01      	cmp	r3, #1
 801288e:	d001      	beq.n	8012894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012890:	2301      	movs	r3, #1
 8012892:	e054      	b.n	801293e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2202      	movs	r2, #2
 8012898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	68da      	ldr	r2, [r3, #12]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	f042 0201 	orr.w	r2, r2, #1
 80128aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	4a26      	ldr	r2, [pc, #152]	; (801294c <HAL_TIM_Base_Start_IT+0xd0>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d022      	beq.n	80128fc <HAL_TIM_Base_Start_IT+0x80>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80128be:	d01d      	beq.n	80128fc <HAL_TIM_Base_Start_IT+0x80>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	4a22      	ldr	r2, [pc, #136]	; (8012950 <HAL_TIM_Base_Start_IT+0xd4>)
 80128c6:	4293      	cmp	r3, r2
 80128c8:	d018      	beq.n	80128fc <HAL_TIM_Base_Start_IT+0x80>
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4a21      	ldr	r2, [pc, #132]	; (8012954 <HAL_TIM_Base_Start_IT+0xd8>)
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d013      	beq.n	80128fc <HAL_TIM_Base_Start_IT+0x80>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a1f      	ldr	r2, [pc, #124]	; (8012958 <HAL_TIM_Base_Start_IT+0xdc>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d00e      	beq.n	80128fc <HAL_TIM_Base_Start_IT+0x80>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	4a1e      	ldr	r2, [pc, #120]	; (801295c <HAL_TIM_Base_Start_IT+0xe0>)
 80128e4:	4293      	cmp	r3, r2
 80128e6:	d009      	beq.n	80128fc <HAL_TIM_Base_Start_IT+0x80>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4a1c      	ldr	r2, [pc, #112]	; (8012960 <HAL_TIM_Base_Start_IT+0xe4>)
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d004      	beq.n	80128fc <HAL_TIM_Base_Start_IT+0x80>
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	4a1b      	ldr	r2, [pc, #108]	; (8012964 <HAL_TIM_Base_Start_IT+0xe8>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d115      	bne.n	8012928 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	689a      	ldr	r2, [r3, #8]
 8012902:	4b19      	ldr	r3, [pc, #100]	; (8012968 <HAL_TIM_Base_Start_IT+0xec>)
 8012904:	4013      	ands	r3, r2
 8012906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	2b06      	cmp	r3, #6
 801290c:	d015      	beq.n	801293a <HAL_TIM_Base_Start_IT+0xbe>
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012914:	d011      	beq.n	801293a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	681a      	ldr	r2, [r3, #0]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	f042 0201 	orr.w	r2, r2, #1
 8012924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012926:	e008      	b.n	801293a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	681a      	ldr	r2, [r3, #0]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	f042 0201 	orr.w	r2, r2, #1
 8012936:	601a      	str	r2, [r3, #0]
 8012938:	e000      	b.n	801293c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801293a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801293c:	2300      	movs	r3, #0
}
 801293e:	4618      	mov	r0, r3
 8012940:	3714      	adds	r7, #20
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	4770      	bx	lr
 801294a:	bf00      	nop
 801294c:	40010000 	.word	0x40010000
 8012950:	40000400 	.word	0x40000400
 8012954:	40000800 	.word	0x40000800
 8012958:	40000c00 	.word	0x40000c00
 801295c:	40010400 	.word	0x40010400
 8012960:	40001800 	.word	0x40001800
 8012964:	40014000 	.word	0x40014000
 8012968:	00010007 	.word	0x00010007

0801296c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	691b      	ldr	r3, [r3, #16]
 801297a:	f003 0302 	and.w	r3, r3, #2
 801297e:	2b02      	cmp	r3, #2
 8012980:	d122      	bne.n	80129c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	68db      	ldr	r3, [r3, #12]
 8012988:	f003 0302 	and.w	r3, r3, #2
 801298c:	2b02      	cmp	r3, #2
 801298e:	d11b      	bne.n	80129c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	f06f 0202 	mvn.w	r2, #2
 8012998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2201      	movs	r2, #1
 801299e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	699b      	ldr	r3, [r3, #24]
 80129a6:	f003 0303 	and.w	r3, r3, #3
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d003      	beq.n	80129b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f000 f905 	bl	8012bbe <HAL_TIM_IC_CaptureCallback>
 80129b4:	e005      	b.n	80129c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f000 f8f7 	bl	8012baa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f000 f908 	bl	8012bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2200      	movs	r2, #0
 80129c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	691b      	ldr	r3, [r3, #16]
 80129ce:	f003 0304 	and.w	r3, r3, #4
 80129d2:	2b04      	cmp	r3, #4
 80129d4:	d122      	bne.n	8012a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	68db      	ldr	r3, [r3, #12]
 80129dc:	f003 0304 	and.w	r3, r3, #4
 80129e0:	2b04      	cmp	r3, #4
 80129e2:	d11b      	bne.n	8012a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	f06f 0204 	mvn.w	r2, #4
 80129ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2202      	movs	r2, #2
 80129f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	699b      	ldr	r3, [r3, #24]
 80129fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d003      	beq.n	8012a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f000 f8db 	bl	8012bbe <HAL_TIM_IC_CaptureCallback>
 8012a08:	e005      	b.n	8012a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f000 f8cd 	bl	8012baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f000 f8de 	bl	8012bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2200      	movs	r2, #0
 8012a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	691b      	ldr	r3, [r3, #16]
 8012a22:	f003 0308 	and.w	r3, r3, #8
 8012a26:	2b08      	cmp	r3, #8
 8012a28:	d122      	bne.n	8012a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	68db      	ldr	r3, [r3, #12]
 8012a30:	f003 0308 	and.w	r3, r3, #8
 8012a34:	2b08      	cmp	r3, #8
 8012a36:	d11b      	bne.n	8012a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	f06f 0208 	mvn.w	r2, #8
 8012a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	2204      	movs	r2, #4
 8012a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	69db      	ldr	r3, [r3, #28]
 8012a4e:	f003 0303 	and.w	r3, r3, #3
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d003      	beq.n	8012a5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f000 f8b1 	bl	8012bbe <HAL_TIM_IC_CaptureCallback>
 8012a5c:	e005      	b.n	8012a6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	f000 f8a3 	bl	8012baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f000 f8b4 	bl	8012bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	691b      	ldr	r3, [r3, #16]
 8012a76:	f003 0310 	and.w	r3, r3, #16
 8012a7a:	2b10      	cmp	r3, #16
 8012a7c:	d122      	bne.n	8012ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	68db      	ldr	r3, [r3, #12]
 8012a84:	f003 0310 	and.w	r3, r3, #16
 8012a88:	2b10      	cmp	r3, #16
 8012a8a:	d11b      	bne.n	8012ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	f06f 0210 	mvn.w	r2, #16
 8012a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2208      	movs	r2, #8
 8012a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	69db      	ldr	r3, [r3, #28]
 8012aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d003      	beq.n	8012ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f000 f887 	bl	8012bbe <HAL_TIM_IC_CaptureCallback>
 8012ab0:	e005      	b.n	8012abe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f000 f879 	bl	8012baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f000 f88a 	bl	8012bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	691b      	ldr	r3, [r3, #16]
 8012aca:	f003 0301 	and.w	r3, r3, #1
 8012ace:	2b01      	cmp	r3, #1
 8012ad0:	d10e      	bne.n	8012af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	68db      	ldr	r3, [r3, #12]
 8012ad8:	f003 0301 	and.w	r3, r3, #1
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d107      	bne.n	8012af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f06f 0201 	mvn.w	r2, #1
 8012ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012aea:	6878      	ldr	r0, [r7, #4]
 8012aec:	f7ee f85a 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	691b      	ldr	r3, [r3, #16]
 8012af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012afa:	2b80      	cmp	r3, #128	; 0x80
 8012afc:	d10e      	bne.n	8012b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	68db      	ldr	r3, [r3, #12]
 8012b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b08:	2b80      	cmp	r3, #128	; 0x80
 8012b0a:	d107      	bne.n	8012b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f000 f914 	bl	8012d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	691b      	ldr	r3, [r3, #16]
 8012b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b2a:	d10e      	bne.n	8012b4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	68db      	ldr	r3, [r3, #12]
 8012b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b36:	2b80      	cmp	r3, #128	; 0x80
 8012b38:	d107      	bne.n	8012b4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012b44:	6878      	ldr	r0, [r7, #4]
 8012b46:	f000 f907 	bl	8012d58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	691b      	ldr	r3, [r3, #16]
 8012b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b54:	2b40      	cmp	r3, #64	; 0x40
 8012b56:	d10e      	bne.n	8012b76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	68db      	ldr	r3, [r3, #12]
 8012b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b62:	2b40      	cmp	r3, #64	; 0x40
 8012b64:	d107      	bne.n	8012b76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f000 f838 	bl	8012be6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	691b      	ldr	r3, [r3, #16]
 8012b7c:	f003 0320 	and.w	r3, r3, #32
 8012b80:	2b20      	cmp	r3, #32
 8012b82:	d10e      	bne.n	8012ba2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	68db      	ldr	r3, [r3, #12]
 8012b8a:	f003 0320 	and.w	r3, r3, #32
 8012b8e:	2b20      	cmp	r3, #32
 8012b90:	d107      	bne.n	8012ba2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f06f 0220 	mvn.w	r2, #32
 8012b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f000 f8c7 	bl	8012d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012ba2:	bf00      	nop
 8012ba4:	3708      	adds	r7, #8
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}

08012baa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012baa:	b480      	push	{r7}
 8012bac:	b083      	sub	sp, #12
 8012bae:	af00      	add	r7, sp, #0
 8012bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012bb2:	bf00      	nop
 8012bb4:	370c      	adds	r7, #12
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbc:	4770      	bx	lr

08012bbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012bbe:	b480      	push	{r7}
 8012bc0:	b083      	sub	sp, #12
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012bc6:	bf00      	nop
 8012bc8:	370c      	adds	r7, #12
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd0:	4770      	bx	lr

08012bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012bd2:	b480      	push	{r7}
 8012bd4:	b083      	sub	sp, #12
 8012bd6:	af00      	add	r7, sp, #0
 8012bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012bda:	bf00      	nop
 8012bdc:	370c      	adds	r7, #12
 8012bde:	46bd      	mov	sp, r7
 8012be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be4:	4770      	bx	lr

08012be6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012be6:	b480      	push	{r7}
 8012be8:	b083      	sub	sp, #12
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012bee:	bf00      	nop
 8012bf0:	370c      	adds	r7, #12
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf8:	4770      	bx	lr
	...

08012bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b085      	sub	sp, #20
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	4a40      	ldr	r2, [pc, #256]	; (8012d10 <TIM_Base_SetConfig+0x114>)
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d013      	beq.n	8012c3c <TIM_Base_SetConfig+0x40>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c1a:	d00f      	beq.n	8012c3c <TIM_Base_SetConfig+0x40>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	4a3d      	ldr	r2, [pc, #244]	; (8012d14 <TIM_Base_SetConfig+0x118>)
 8012c20:	4293      	cmp	r3, r2
 8012c22:	d00b      	beq.n	8012c3c <TIM_Base_SetConfig+0x40>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	4a3c      	ldr	r2, [pc, #240]	; (8012d18 <TIM_Base_SetConfig+0x11c>)
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	d007      	beq.n	8012c3c <TIM_Base_SetConfig+0x40>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	4a3b      	ldr	r2, [pc, #236]	; (8012d1c <TIM_Base_SetConfig+0x120>)
 8012c30:	4293      	cmp	r3, r2
 8012c32:	d003      	beq.n	8012c3c <TIM_Base_SetConfig+0x40>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	4a3a      	ldr	r2, [pc, #232]	; (8012d20 <TIM_Base_SetConfig+0x124>)
 8012c38:	4293      	cmp	r3, r2
 8012c3a:	d108      	bne.n	8012c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	685b      	ldr	r3, [r3, #4]
 8012c48:	68fa      	ldr	r2, [r7, #12]
 8012c4a:	4313      	orrs	r3, r2
 8012c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	4a2f      	ldr	r2, [pc, #188]	; (8012d10 <TIM_Base_SetConfig+0x114>)
 8012c52:	4293      	cmp	r3, r2
 8012c54:	d01f      	beq.n	8012c96 <TIM_Base_SetConfig+0x9a>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c5c:	d01b      	beq.n	8012c96 <TIM_Base_SetConfig+0x9a>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	4a2c      	ldr	r2, [pc, #176]	; (8012d14 <TIM_Base_SetConfig+0x118>)
 8012c62:	4293      	cmp	r3, r2
 8012c64:	d017      	beq.n	8012c96 <TIM_Base_SetConfig+0x9a>
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	4a2b      	ldr	r2, [pc, #172]	; (8012d18 <TIM_Base_SetConfig+0x11c>)
 8012c6a:	4293      	cmp	r3, r2
 8012c6c:	d013      	beq.n	8012c96 <TIM_Base_SetConfig+0x9a>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	4a2a      	ldr	r2, [pc, #168]	; (8012d1c <TIM_Base_SetConfig+0x120>)
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d00f      	beq.n	8012c96 <TIM_Base_SetConfig+0x9a>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	4a29      	ldr	r2, [pc, #164]	; (8012d20 <TIM_Base_SetConfig+0x124>)
 8012c7a:	4293      	cmp	r3, r2
 8012c7c:	d00b      	beq.n	8012c96 <TIM_Base_SetConfig+0x9a>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	4a28      	ldr	r2, [pc, #160]	; (8012d24 <TIM_Base_SetConfig+0x128>)
 8012c82:	4293      	cmp	r3, r2
 8012c84:	d007      	beq.n	8012c96 <TIM_Base_SetConfig+0x9a>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	4a27      	ldr	r2, [pc, #156]	; (8012d28 <TIM_Base_SetConfig+0x12c>)
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	d003      	beq.n	8012c96 <TIM_Base_SetConfig+0x9a>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	4a26      	ldr	r2, [pc, #152]	; (8012d2c <TIM_Base_SetConfig+0x130>)
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d108      	bne.n	8012ca8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	68db      	ldr	r3, [r3, #12]
 8012ca2:	68fa      	ldr	r2, [r7, #12]
 8012ca4:	4313      	orrs	r3, r2
 8012ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	695b      	ldr	r3, [r3, #20]
 8012cb2:	4313      	orrs	r3, r2
 8012cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	68fa      	ldr	r2, [r7, #12]
 8012cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	689a      	ldr	r2, [r3, #8]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	681a      	ldr	r2, [r3, #0]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	4a10      	ldr	r2, [pc, #64]	; (8012d10 <TIM_Base_SetConfig+0x114>)
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	d00f      	beq.n	8012cf4 <TIM_Base_SetConfig+0xf8>
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	4a12      	ldr	r2, [pc, #72]	; (8012d20 <TIM_Base_SetConfig+0x124>)
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	d00b      	beq.n	8012cf4 <TIM_Base_SetConfig+0xf8>
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	4a11      	ldr	r2, [pc, #68]	; (8012d24 <TIM_Base_SetConfig+0x128>)
 8012ce0:	4293      	cmp	r3, r2
 8012ce2:	d007      	beq.n	8012cf4 <TIM_Base_SetConfig+0xf8>
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	4a10      	ldr	r2, [pc, #64]	; (8012d28 <TIM_Base_SetConfig+0x12c>)
 8012ce8:	4293      	cmp	r3, r2
 8012cea:	d003      	beq.n	8012cf4 <TIM_Base_SetConfig+0xf8>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	4a0f      	ldr	r2, [pc, #60]	; (8012d2c <TIM_Base_SetConfig+0x130>)
 8012cf0:	4293      	cmp	r3, r2
 8012cf2:	d103      	bne.n	8012cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	691a      	ldr	r2, [r3, #16]
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	615a      	str	r2, [r3, #20]
}
 8012d02:	bf00      	nop
 8012d04:	3714      	adds	r7, #20
 8012d06:	46bd      	mov	sp, r7
 8012d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0c:	4770      	bx	lr
 8012d0e:	bf00      	nop
 8012d10:	40010000 	.word	0x40010000
 8012d14:	40000400 	.word	0x40000400
 8012d18:	40000800 	.word	0x40000800
 8012d1c:	40000c00 	.word	0x40000c00
 8012d20:	40010400 	.word	0x40010400
 8012d24:	40014000 	.word	0x40014000
 8012d28:	40014400 	.word	0x40014400
 8012d2c:	40014800 	.word	0x40014800

08012d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012d30:	b480      	push	{r7}
 8012d32:	b083      	sub	sp, #12
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012d38:	bf00      	nop
 8012d3a:	370c      	adds	r7, #12
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d42:	4770      	bx	lr

08012d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012d4c:	bf00      	nop
 8012d4e:	370c      	adds	r7, #12
 8012d50:	46bd      	mov	sp, r7
 8012d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d56:	4770      	bx	lr

08012d58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012d58:	b480      	push	{r7}
 8012d5a:	b083      	sub	sp, #12
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012d60:	bf00      	nop
 8012d62:	370c      	adds	r7, #12
 8012d64:	46bd      	mov	sp, r7
 8012d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6a:	4770      	bx	lr

08012d6c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d121      	bne.n	8012dc2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681a      	ldr	r2, [r3, #0]
 8012d82:	4b27      	ldr	r3, [pc, #156]	; (8012e20 <FMC_SDRAM_Init+0xb4>)
 8012d84:	4013      	ands	r3, r2
 8012d86:	683a      	ldr	r2, [r7, #0]
 8012d88:	6851      	ldr	r1, [r2, #4]
 8012d8a:	683a      	ldr	r2, [r7, #0]
 8012d8c:	6892      	ldr	r2, [r2, #8]
 8012d8e:	4311      	orrs	r1, r2
 8012d90:	683a      	ldr	r2, [r7, #0]
 8012d92:	68d2      	ldr	r2, [r2, #12]
 8012d94:	4311      	orrs	r1, r2
 8012d96:	683a      	ldr	r2, [r7, #0]
 8012d98:	6912      	ldr	r2, [r2, #16]
 8012d9a:	4311      	orrs	r1, r2
 8012d9c:	683a      	ldr	r2, [r7, #0]
 8012d9e:	6952      	ldr	r2, [r2, #20]
 8012da0:	4311      	orrs	r1, r2
 8012da2:	683a      	ldr	r2, [r7, #0]
 8012da4:	6992      	ldr	r2, [r2, #24]
 8012da6:	4311      	orrs	r1, r2
 8012da8:	683a      	ldr	r2, [r7, #0]
 8012daa:	69d2      	ldr	r2, [r2, #28]
 8012dac:	4311      	orrs	r1, r2
 8012dae:	683a      	ldr	r2, [r7, #0]
 8012db0:	6a12      	ldr	r2, [r2, #32]
 8012db2:	4311      	orrs	r1, r2
 8012db4:	683a      	ldr	r2, [r7, #0]
 8012db6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012db8:	430a      	orrs	r2, r1
 8012dba:	431a      	orrs	r2, r3
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	601a      	str	r2, [r3, #0]
 8012dc0:	e026      	b.n	8012e10 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	69d9      	ldr	r1, [r3, #28]
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	6a1b      	ldr	r3, [r3, #32]
 8012dd2:	4319      	orrs	r1, r3
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dd8:	430b      	orrs	r3, r1
 8012dda:	431a      	orrs	r2, r3
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	685a      	ldr	r2, [r3, #4]
 8012de4:	4b0e      	ldr	r3, [pc, #56]	; (8012e20 <FMC_SDRAM_Init+0xb4>)
 8012de6:	4013      	ands	r3, r2
 8012de8:	683a      	ldr	r2, [r7, #0]
 8012dea:	6851      	ldr	r1, [r2, #4]
 8012dec:	683a      	ldr	r2, [r7, #0]
 8012dee:	6892      	ldr	r2, [r2, #8]
 8012df0:	4311      	orrs	r1, r2
 8012df2:	683a      	ldr	r2, [r7, #0]
 8012df4:	68d2      	ldr	r2, [r2, #12]
 8012df6:	4311      	orrs	r1, r2
 8012df8:	683a      	ldr	r2, [r7, #0]
 8012dfa:	6912      	ldr	r2, [r2, #16]
 8012dfc:	4311      	orrs	r1, r2
 8012dfe:	683a      	ldr	r2, [r7, #0]
 8012e00:	6952      	ldr	r2, [r2, #20]
 8012e02:	4311      	orrs	r1, r2
 8012e04:	683a      	ldr	r2, [r7, #0]
 8012e06:	6992      	ldr	r2, [r2, #24]
 8012e08:	430a      	orrs	r2, r1
 8012e0a:	431a      	orrs	r2, r3
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8012e10:	2300      	movs	r3, #0
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	370c      	adds	r7, #12
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop
 8012e20:	ffff8000 	.word	0xffff8000

08012e24 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8012e24:	b480      	push	{r7}
 8012e26:	b085      	sub	sp, #20
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	60f8      	str	r0, [r7, #12]
 8012e2c:	60b9      	str	r1, [r7, #8]
 8012e2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d128      	bne.n	8012e88 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	689b      	ldr	r3, [r3, #8]
 8012e3a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	1e59      	subs	r1, r3, #1
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	3b01      	subs	r3, #1
 8012e4a:	011b      	lsls	r3, r3, #4
 8012e4c:	4319      	orrs	r1, r3
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	689b      	ldr	r3, [r3, #8]
 8012e52:	3b01      	subs	r3, #1
 8012e54:	021b      	lsls	r3, r3, #8
 8012e56:	4319      	orrs	r1, r3
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	68db      	ldr	r3, [r3, #12]
 8012e5c:	3b01      	subs	r3, #1
 8012e5e:	031b      	lsls	r3, r3, #12
 8012e60:	4319      	orrs	r1, r3
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	691b      	ldr	r3, [r3, #16]
 8012e66:	3b01      	subs	r3, #1
 8012e68:	041b      	lsls	r3, r3, #16
 8012e6a:	4319      	orrs	r1, r3
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	695b      	ldr	r3, [r3, #20]
 8012e70:	3b01      	subs	r3, #1
 8012e72:	051b      	lsls	r3, r3, #20
 8012e74:	4319      	orrs	r1, r3
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	699b      	ldr	r3, [r3, #24]
 8012e7a:	3b01      	subs	r3, #1
 8012e7c:	061b      	lsls	r3, r3, #24
 8012e7e:	430b      	orrs	r3, r1
 8012e80:	431a      	orrs	r2, r3
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	609a      	str	r2, [r3, #8]
 8012e86:	e02d      	b.n	8012ee4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	689a      	ldr	r2, [r3, #8]
 8012e8c:	4b19      	ldr	r3, [pc, #100]	; (8012ef4 <FMC_SDRAM_Timing_Init+0xd0>)
 8012e8e:	4013      	ands	r3, r2
 8012e90:	68ba      	ldr	r2, [r7, #8]
 8012e92:	68d2      	ldr	r2, [r2, #12]
 8012e94:	3a01      	subs	r2, #1
 8012e96:	0311      	lsls	r1, r2, #12
 8012e98:	68ba      	ldr	r2, [r7, #8]
 8012e9a:	6952      	ldr	r2, [r2, #20]
 8012e9c:	3a01      	subs	r2, #1
 8012e9e:	0512      	lsls	r2, r2, #20
 8012ea0:	430a      	orrs	r2, r1
 8012ea2:	431a      	orrs	r2, r3
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	68db      	ldr	r3, [r3, #12]
 8012eac:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	1e59      	subs	r1, r3, #1
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	685b      	ldr	r3, [r3, #4]
 8012eba:	3b01      	subs	r3, #1
 8012ebc:	011b      	lsls	r3, r3, #4
 8012ebe:	4319      	orrs	r1, r3
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	689b      	ldr	r3, [r3, #8]
 8012ec4:	3b01      	subs	r3, #1
 8012ec6:	021b      	lsls	r3, r3, #8
 8012ec8:	4319      	orrs	r1, r3
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	691b      	ldr	r3, [r3, #16]
 8012ece:	3b01      	subs	r3, #1
 8012ed0:	041b      	lsls	r3, r3, #16
 8012ed2:	4319      	orrs	r1, r3
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	699b      	ldr	r3, [r3, #24]
 8012ed8:	3b01      	subs	r3, #1
 8012eda:	061b      	lsls	r3, r3, #24
 8012edc:	430b      	orrs	r3, r1
 8012ede:	431a      	orrs	r2, r3
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8012ee4:	2300      	movs	r3, #0
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3714      	adds	r7, #20
 8012eea:	46bd      	mov	sp, r7
 8012eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef0:	4770      	bx	lr
 8012ef2:	bf00      	nop
 8012ef4:	ff0f0fff 	.word	0xff0f0fff

08012ef8 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8012ef8:	b480      	push	{r7}
 8012efa:	b083      	sub	sp, #12
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	683a      	ldr	r2, [r7, #0]
 8012f06:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8012f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	683a      	ldr	r2, [r7, #0]
 8012f12:	3202      	adds	r2, #2
 8012f14:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8012f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	2200      	movs	r2, #0
 8012f26:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8012f2e:	2300      	movs	r3, #0
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	370c      	adds	r7, #12
 8012f34:	46bd      	mov	sp, r7
 8012f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3a:	4770      	bx	lr

08012f3c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8012f3c:	b480      	push	{r7}
 8012f3e:	b085      	sub	sp, #20
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	60f8      	str	r0, [r7, #12]
 8012f44:	60b9      	str	r1, [r7, #8]
 8012f46:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	691a      	ldr	r2, [r3, #16]
 8012f4c:	4b0c      	ldr	r3, [pc, #48]	; (8012f80 <FMC_SDRAM_SendCommand+0x44>)
 8012f4e:	4013      	ands	r3, r2
 8012f50:	68ba      	ldr	r2, [r7, #8]
 8012f52:	6811      	ldr	r1, [r2, #0]
 8012f54:	68ba      	ldr	r2, [r7, #8]
 8012f56:	6852      	ldr	r2, [r2, #4]
 8012f58:	4311      	orrs	r1, r2
 8012f5a:	68ba      	ldr	r2, [r7, #8]
 8012f5c:	6892      	ldr	r2, [r2, #8]
 8012f5e:	3a01      	subs	r2, #1
 8012f60:	0152      	lsls	r2, r2, #5
 8012f62:	4311      	orrs	r1, r2
 8012f64:	68ba      	ldr	r2, [r7, #8]
 8012f66:	68d2      	ldr	r2, [r2, #12]
 8012f68:	0252      	lsls	r2, r2, #9
 8012f6a:	430a      	orrs	r2, r1
 8012f6c:	431a      	orrs	r2, r3
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8012f72:	2300      	movs	r3, #0
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	3714      	adds	r7, #20
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7e:	4770      	bx	lr
 8012f80:	ffc00000 	.word	0xffc00000

08012f84 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8012f84:	b480      	push	{r7}
 8012f86:	b083      	sub	sp, #12
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	695a      	ldr	r2, [r3, #20]
 8012f92:	4b07      	ldr	r3, [pc, #28]	; (8012fb0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8012f94:	4013      	ands	r3, r2
 8012f96:	683a      	ldr	r2, [r7, #0]
 8012f98:	0052      	lsls	r2, r2, #1
 8012f9a:	431a      	orrs	r2, r3
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8012fa0:	2300      	movs	r3, #0
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	370c      	adds	r7, #12
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fac:	4770      	bx	lr
 8012fae:	bf00      	nop
 8012fb0:	ffffc001 	.word	0xffffc001

08012fb4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012fb4:	8880      	ldrh	r0, [r0, #4]
 8012fb6:	4770      	bx	lr

08012fb8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012fb8:	2300      	movs	r3, #0
 8012fba:	8083      	strh	r3, [r0, #4]
 8012fbc:	4770      	bx	lr
	...

08012fc0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fc2:	6803      	ldr	r3, [r0, #0]
 8012fc4:	460e      	mov	r6, r1
 8012fc6:	2100      	movs	r1, #0
 8012fc8:	4605      	mov	r5, r0
 8012fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fcc:	4798      	blx	r3
 8012fce:	4604      	mov	r4, r0
 8012fd0:	682b      	ldr	r3, [r5, #0]
 8012fd2:	4628      	mov	r0, r5
 8012fd4:	1b34      	subs	r4, r6, r4
 8012fd6:	6a1b      	ldr	r3, [r3, #32]
 8012fd8:	b2a4      	uxth	r4, r4
 8012fda:	4798      	blx	r3
 8012fdc:	88ab      	ldrh	r3, [r5, #4]
 8012fde:	fbb4 f4f0 	udiv	r4, r4, r0
 8012fe2:	42a3      	cmp	r3, r4
 8012fe4:	d805      	bhi.n	8012ff2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8012fe6:	4b0e      	ldr	r3, [pc, #56]	; (8013020 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8012fe8:	211e      	movs	r1, #30
 8012fea:	4a0e      	ldr	r2, [pc, #56]	; (8013024 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8012fec:	480e      	ldr	r0, [pc, #56]	; (8013028 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8012fee:	f012 fe53 	bl	8025c98 <__assert_func>
 8012ff2:	682b      	ldr	r3, [r5, #0]
 8012ff4:	2100      	movs	r1, #0
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ffa:	4798      	blx	r3
 8012ffc:	682b      	ldr	r3, [r5, #0]
 8012ffe:	4607      	mov	r7, r0
 8013000:	4628      	mov	r0, r5
 8013002:	6a1b      	ldr	r3, [r3, #32]
 8013004:	4798      	blx	r3
 8013006:	1bf3      	subs	r3, r6, r7
 8013008:	b29b      	uxth	r3, r3
 801300a:	fbb3 f2f0 	udiv	r2, r3, r0
 801300e:	fb02 3010 	mls	r0, r2, r0, r3
 8013012:	b118      	cbz	r0, 801301c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8013014:	4b05      	ldr	r3, [pc, #20]	; (801302c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8013016:	211f      	movs	r1, #31
 8013018:	4a02      	ldr	r2, [pc, #8]	; (8013024 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801301a:	e7e7      	b.n	8012fec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801301c:	4620      	mov	r0, r4
 801301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013020:	08028230 	.word	0x08028230
 8013024:	0802839e 	.word	0x0802839e
 8013028:	08028245 	.word	0x08028245
 801302c:	08028273 	.word	0x08028273

08013030 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013030:	b538      	push	{r3, r4, r5, lr}
 8013032:	6803      	ldr	r3, [r0, #0]
 8013034:	460d      	mov	r5, r1
 8013036:	4604      	mov	r4, r0
 8013038:	6a1b      	ldr	r3, [r3, #32]
 801303a:	4798      	blx	r3
 801303c:	4285      	cmp	r5, r0
 801303e:	d905      	bls.n	801304c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8013040:	4b0c      	ldr	r3, [pc, #48]	; (8013074 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8013042:	2130      	movs	r1, #48	; 0x30
 8013044:	4a0c      	ldr	r2, [pc, #48]	; (8013078 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013046:	480d      	ldr	r0, [pc, #52]	; (801307c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8013048:	f012 fe26 	bl	8025c98 <__assert_func>
 801304c:	6823      	ldr	r3, [r4, #0]
 801304e:	4620      	mov	r0, r4
 8013050:	88a5      	ldrh	r5, [r4, #4]
 8013052:	69db      	ldr	r3, [r3, #28]
 8013054:	4798      	blx	r3
 8013056:	4285      	cmp	r5, r0
 8013058:	d303      	bcc.n	8013062 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801305a:	4b09      	ldr	r3, [pc, #36]	; (8013080 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801305c:	2131      	movs	r1, #49	; 0x31
 801305e:	4a06      	ldr	r2, [pc, #24]	; (8013078 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013060:	e7f1      	b.n	8013046 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8013062:	6823      	ldr	r3, [r4, #0]
 8013064:	4620      	mov	r0, r4
 8013066:	88a1      	ldrh	r1, [r4, #4]
 8013068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801306a:	4798      	blx	r3
 801306c:	88a3      	ldrh	r3, [r4, #4]
 801306e:	3301      	adds	r3, #1
 8013070:	80a3      	strh	r3, [r4, #4]
 8013072:	bd38      	pop	{r3, r4, r5, pc}
 8013074:	080282ed 	.word	0x080282ed
 8013078:	080283e1 	.word	0x080283e1
 801307c:	08028245 	.word	0x08028245
 8013080:	08028304 	.word	0x08028304

08013084 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013084:	b570      	push	{r4, r5, r6, lr}
 8013086:	6803      	ldr	r3, [r0, #0]
 8013088:	4616      	mov	r6, r2
 801308a:	4604      	mov	r4, r0
 801308c:	460d      	mov	r5, r1
 801308e:	6a1b      	ldr	r3, [r3, #32]
 8013090:	4798      	blx	r3
 8013092:	4286      	cmp	r6, r0
 8013094:	d905      	bls.n	80130a2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8013096:	4b06      	ldr	r3, [pc, #24]	; (80130b0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8013098:	213a      	movs	r1, #58	; 0x3a
 801309a:	4a06      	ldr	r2, [pc, #24]	; (80130b4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801309c:	4806      	ldr	r0, [pc, #24]	; (80130b8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801309e:	f012 fdfb 	bl	8025c98 <__assert_func>
 80130a2:	6823      	ldr	r3, [r4, #0]
 80130a4:	4629      	mov	r1, r5
 80130a6:	4620      	mov	r0, r4
 80130a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130ae:	4718      	bx	r3
 80130b0:	080282ed 	.word	0x080282ed
 80130b4:	08028354 	.word	0x08028354
 80130b8:	08028245 	.word	0x08028245

080130bc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80130bc:	4770      	bx	lr
	...

080130c0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80130c0:	4a02      	ldr	r2, [pc, #8]	; (80130cc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80130c2:	6002      	str	r2, [r0, #0]
 80130c4:	2200      	movs	r2, #0
 80130c6:	8082      	strh	r2, [r0, #4]
 80130c8:	4770      	bx	lr
 80130ca:	bf00      	nop
 80130cc:	08028328 	.word	0x08028328

080130d0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80130d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80130d2:	2000      	movs	r0, #0
 80130d4:	b12b      	cbz	r3, 80130e2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80130d6:	b920      	cbnz	r0, 80130e2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80130d8:	1a5a      	subs	r2, r3, r1
 80130da:	699b      	ldr	r3, [r3, #24]
 80130dc:	4250      	negs	r0, r2
 80130de:	4150      	adcs	r0, r2
 80130e0:	e7f8      	b.n	80130d4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80130e2:	4770      	bx	lr

080130e4 <_ZN8touchgfx9Container9removeAllEv>:
 80130e4:	2200      	movs	r2, #0
 80130e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80130e8:	b123      	cbz	r3, 80130f4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80130ea:	6999      	ldr	r1, [r3, #24]
 80130ec:	6281      	str	r1, [r0, #40]	; 0x28
 80130ee:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80130f2:	e7f8      	b.n	80130e6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80130f4:	4770      	bx	lr

080130f6 <_ZN8touchgfx9Container6unlinkEv>:
 80130f6:	2300      	movs	r3, #0
 80130f8:	6283      	str	r3, [r0, #40]	; 0x28
 80130fa:	4770      	bx	lr

080130fc <_ZNK8touchgfx9Container12getSolidRectEv>:
 80130fc:	2200      	movs	r2, #0
 80130fe:	8002      	strh	r2, [r0, #0]
 8013100:	8042      	strh	r2, [r0, #2]
 8013102:	8082      	strh	r2, [r0, #4]
 8013104:	80c2      	strh	r2, [r0, #6]
 8013106:	4770      	bx	lr

08013108 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013108:	b570      	push	{r4, r5, r6, lr}
 801310a:	460d      	mov	r5, r1
 801310c:	4616      	mov	r6, r2
 801310e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013110:	b13c      	cbz	r4, 8013122 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013112:	6823      	ldr	r3, [r4, #0]
 8013114:	4620      	mov	r0, r4
 8013116:	4632      	mov	r2, r6
 8013118:	4629      	mov	r1, r5
 801311a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801311c:	4798      	blx	r3
 801311e:	69a4      	ldr	r4, [r4, #24]
 8013120:	e7f6      	b.n	8013110 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013122:	bd70      	pop	{r4, r5, r6, pc}

08013124 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013124:	b538      	push	{r3, r4, r5, lr}
 8013126:	460d      	mov	r5, r1
 8013128:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801312a:	b134      	cbz	r4, 801313a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801312c:	682b      	ldr	r3, [r5, #0]
 801312e:	4621      	mov	r1, r4
 8013130:	4628      	mov	r0, r5
 8013132:	689b      	ldr	r3, [r3, #8]
 8013134:	4798      	blx	r3
 8013136:	69a4      	ldr	r4, [r4, #24]
 8013138:	e7f7      	b.n	801312a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801313a:	bd38      	pop	{r3, r4, r5, pc}

0801313c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801313c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801313e:	b19b      	cbz	r3, 8013168 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013140:	428b      	cmp	r3, r1
 8013142:	d109      	bne.n	8013158 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013144:	699a      	ldr	r2, [r3, #24]
 8013146:	2100      	movs	r1, #0
 8013148:	6159      	str	r1, [r3, #20]
 801314a:	6282      	str	r2, [r0, #40]	; 0x28
 801314c:	b902      	cbnz	r2, 8013150 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801314e:	4770      	bx	lr
 8013150:	6199      	str	r1, [r3, #24]
 8013152:	4770      	bx	lr
 8013154:	4613      	mov	r3, r2
 8013156:	b13a      	cbz	r2, 8013168 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013158:	699a      	ldr	r2, [r3, #24]
 801315a:	428a      	cmp	r2, r1
 801315c:	d1fa      	bne.n	8013154 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801315e:	698a      	ldr	r2, [r1, #24]
 8013160:	619a      	str	r2, [r3, #24]
 8013162:	2300      	movs	r3, #0
 8013164:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013168:	4770      	bx	lr

0801316a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801316a:	b410      	push	{r4}
 801316c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801316e:	4604      	mov	r4, r0
 8013170:	b92b      	cbnz	r3, 801317e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013172:	6803      	ldr	r3, [r0, #0]
 8013174:	4611      	mov	r1, r2
 8013176:	f85d 4b04 	ldr.w	r4, [sp], #4
 801317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801317c:	4718      	bx	r3
 801317e:	b941      	cbnz	r1, 8013192 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013180:	6193      	str	r3, [r2, #24]
 8013182:	6282      	str	r2, [r0, #40]	; 0x28
 8013184:	6154      	str	r4, [r2, #20]
 8013186:	f85d 4b04 	ldr.w	r4, [sp], #4
 801318a:	4770      	bx	lr
 801318c:	4603      	mov	r3, r0
 801318e:	2800      	cmp	r0, #0
 8013190:	d0f9      	beq.n	8013186 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013192:	4299      	cmp	r1, r3
 8013194:	6998      	ldr	r0, [r3, #24]
 8013196:	d1f9      	bne.n	801318c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013198:	6190      	str	r0, [r2, #24]
 801319a:	618a      	str	r2, [r1, #24]
 801319c:	e7f2      	b.n	8013184 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080131a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80131a0:	4288      	cmp	r0, r1
 80131a2:	b508      	push	{r3, lr}
 80131a4:	d105      	bne.n	80131b2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80131a6:	4b11      	ldr	r3, [pc, #68]	; (80131ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80131a8:	2123      	movs	r1, #35	; 0x23
 80131aa:	4a11      	ldr	r2, [pc, #68]	; (80131f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80131ac:	4811      	ldr	r0, [pc, #68]	; (80131f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80131ae:	f012 fd73 	bl	8025c98 <__assert_func>
 80131b2:	694b      	ldr	r3, [r1, #20]
 80131b4:	b11b      	cbz	r3, 80131be <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80131b6:	4b10      	ldr	r3, [pc, #64]	; (80131f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80131b8:	2124      	movs	r1, #36	; 0x24
 80131ba:	4a0d      	ldr	r2, [pc, #52]	; (80131f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80131bc:	e7f6      	b.n	80131ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80131be:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80131c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80131c4:	b913      	cbnz	r3, 80131cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80131c6:	6281      	str	r1, [r0, #40]	; 0x28
 80131c8:	bd08      	pop	{r3, pc}
 80131ca:	4613      	mov	r3, r2
 80131cc:	699a      	ldr	r2, [r3, #24]
 80131ce:	b12a      	cbz	r2, 80131dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80131d0:	428b      	cmp	r3, r1
 80131d2:	d1fa      	bne.n	80131ca <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80131d4:	4b09      	ldr	r3, [pc, #36]	; (80131fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80131d6:	2135      	movs	r1, #53	; 0x35
 80131d8:	4a05      	ldr	r2, [pc, #20]	; (80131f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80131da:	e7e7      	b.n	80131ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80131dc:	428b      	cmp	r3, r1
 80131de:	d103      	bne.n	80131e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80131e0:	4b06      	ldr	r3, [pc, #24]	; (80131fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80131e2:	2138      	movs	r1, #56	; 0x38
 80131e4:	4a02      	ldr	r2, [pc, #8]	; (80131f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80131e6:	e7e1      	b.n	80131ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80131e8:	6199      	str	r1, [r3, #24]
 80131ea:	e7ed      	b.n	80131c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80131ec:	0802841f 	.word	0x0802841f
 80131f0:	08028574 	.word	0x08028574
 80131f4:	0802844b 	.word	0x0802844b
 80131f8:	0802847e 	.word	0x0802847e
 80131fc:	080284b4 	.word	0x080284b4

08013200 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013204:	461f      	mov	r7, r3
 8013206:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801320a:	460d      	mov	r5, r1
 801320c:	4616      	mov	r6, r2
 801320e:	b103      	cbz	r3, 8013212 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013210:	6038      	str	r0, [r7, #0]
 8013212:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013214:	b314      	cbz	r4, 801325c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013216:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801321a:	b1eb      	cbz	r3, 8013258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801321c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013220:	428d      	cmp	r5, r1
 8013222:	db19      	blt.n	8013258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013224:	b289      	uxth	r1, r1
 8013226:	8923      	ldrh	r3, [r4, #8]
 8013228:	440b      	add	r3, r1
 801322a:	b21b      	sxth	r3, r3
 801322c:	429d      	cmp	r5, r3
 801322e:	da13      	bge.n	8013258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013230:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013234:	4296      	cmp	r6, r2
 8013236:	db0f      	blt.n	8013258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013238:	b292      	uxth	r2, r2
 801323a:	8963      	ldrh	r3, [r4, #10]
 801323c:	4413      	add	r3, r2
 801323e:	b21b      	sxth	r3, r3
 8013240:	429e      	cmp	r6, r3
 8013242:	da09      	bge.n	8013258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013244:	6823      	ldr	r3, [r4, #0]
 8013246:	1ab2      	subs	r2, r6, r2
 8013248:	1a69      	subs	r1, r5, r1
 801324a:	4620      	mov	r0, r4
 801324c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8013250:	b212      	sxth	r2, r2
 8013252:	463b      	mov	r3, r7
 8013254:	b209      	sxth	r1, r1
 8013256:	47c0      	blx	r8
 8013258:	69a4      	ldr	r4, [r4, #24]
 801325a:	e7db      	b.n	8013214 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013260 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013264:	4c6d      	ldr	r4, [pc, #436]	; (801341c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013266:	b0a1      	sub	sp, #132	; 0x84
 8013268:	4606      	mov	r6, r0
 801326a:	6824      	ldr	r4, [r4, #0]
 801326c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801326e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8013272:	2400      	movs	r4, #0
 8013274:	9303      	str	r3, [sp, #12]
 8013276:	802c      	strh	r4, [r5, #0]
 8013278:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801327a:	802c      	strh	r4, [r5, #0]
 801327c:	601c      	str	r4, [r3, #0]
 801327e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013282:	f7ff ffbd 	bl	8013200 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013286:	f1b9 0f03 	cmp.w	r9, #3
 801328a:	f340 80c1 	ble.w	8013410 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801328e:	4631      	mov	r1, r6
 8013290:	a80c      	add	r0, sp, #48	; 0x30
 8013292:	f005 f83f 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013296:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801329a:	9306      	str	r3, [sp, #24]
 801329c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80132a0:	9307      	str	r3, [sp, #28]
 80132a2:	9b03      	ldr	r3, [sp, #12]
 80132a4:	f8d3 a000 	ldr.w	sl, [r3]
 80132a8:	f1ba 0f00 	cmp.w	sl, #0
 80132ac:	f000 80b3 	beq.w	8013416 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80132b0:	4651      	mov	r1, sl
 80132b2:	a810      	add	r0, sp, #64	; 0x40
 80132b4:	f005 f82e 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80132b8:	2002      	movs	r0, #2
 80132ba:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80132be:	9b01      	ldr	r3, [sp, #4]
 80132c0:	9a06      	ldr	r2, [sp, #24]
 80132c2:	fb91 f1f0 	sdiv	r1, r1, r0
 80132c6:	189d      	adds	r5, r3, r2
 80132c8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80132cc:	9a07      	ldr	r2, [sp, #28]
 80132ce:	4419      	add	r1, r3
 80132d0:	9b02      	ldr	r3, [sp, #8]
 80132d2:	4413      	add	r3, r2
 80132d4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80132d8:	1a6d      	subs	r5, r5, r1
 80132da:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80132de:	fb92 f2f0 	sdiv	r2, r2, r0
 80132e2:	440a      	add	r2, r1
 80132e4:	1a9b      	subs	r3, r3, r2
 80132e6:	435b      	muls	r3, r3
 80132e8:	fb05 3505 	mla	r5, r5, r5, r3
 80132ec:	4f4c      	ldr	r7, [pc, #304]	; (8013420 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80132ee:	ac10      	add	r4, sp, #64	; 0x40
 80132f0:	f1b9 0f0c 	cmp.w	r9, #12
 80132f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80132f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80132f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80132fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80132fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80132fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013300:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8013304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013308:	f04f 0303 	mov.w	r3, #3
 801330c:	bfd8      	it	le
 801330e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8013312:	f04f 0400 	mov.w	r4, #0
 8013316:	f8cd 9000 	str.w	r9, [sp]
 801331a:	bfcc      	ite	gt
 801331c:	4698      	movgt	r8, r3
 801331e:	fb92 f8f3 	sdivle	r8, r2, r3
 8013322:	1c63      	adds	r3, r4, #1
 8013324:	aa10      	add	r2, sp, #64	; 0x40
 8013326:	f004 0401 	and.w	r4, r4, #1
 801332a:	f04f 0b00 	mov.w	fp, #0
 801332e:	9308      	str	r3, [sp, #32]
 8013330:	9b00      	ldr	r3, [sp, #0]
 8013332:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8013336:	fb93 f3f8 	sdiv	r3, r3, r8
 801333a:	3404      	adds	r4, #4
 801333c:	b29b      	uxth	r3, r3
 801333e:	9304      	str	r3, [sp, #16]
 8013340:	9a04      	ldr	r2, [sp, #16]
 8013342:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013346:	fb13 f302 	smulbb	r3, r3, r2
 801334a:	9a01      	ldr	r2, [sp, #4]
 801334c:	b29b      	uxth	r3, r3
 801334e:	1899      	adds	r1, r3, r2
 8013350:	9305      	str	r3, [sp, #20]
 8013352:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013356:	b209      	sxth	r1, r1
 8013358:	4299      	cmp	r1, r3
 801335a:	db4d      	blt.n	80133f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801335c:	8932      	ldrh	r2, [r6, #8]
 801335e:	4413      	add	r3, r2
 8013360:	b21b      	sxth	r3, r3
 8013362:	4299      	cmp	r1, r3
 8013364:	da48      	bge.n	80133f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013366:	9b04      	ldr	r3, [sp, #16]
 8013368:	6827      	ldr	r7, [r4, #0]
 801336a:	fb17 f703 	smulbb	r7, r7, r3
 801336e:	9b02      	ldr	r3, [sp, #8]
 8013370:	b2bf      	uxth	r7, r7
 8013372:	18fa      	adds	r2, r7, r3
 8013374:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013378:	b212      	sxth	r2, r2
 801337a:	429a      	cmp	r2, r3
 801337c:	db3c      	blt.n	80133f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801337e:	8970      	ldrh	r0, [r6, #10]
 8013380:	4403      	add	r3, r0
 8013382:	b21b      	sxth	r3, r3
 8013384:	429a      	cmp	r2, r3
 8013386:	da37      	bge.n	80133f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013388:	2300      	movs	r3, #0
 801338a:	4630      	mov	r0, r6
 801338c:	930b      	str	r3, [sp, #44]	; 0x2c
 801338e:	ab0b      	add	r3, sp, #44	; 0x2c
 8013390:	f7ff ff36 	bl	8013200 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013394:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013396:	b37a      	cbz	r2, 80133f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013398:	4552      	cmp	r2, sl
 801339a:	d02d      	beq.n	80133f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801339c:	4611      	mov	r1, r2
 801339e:	a80e      	add	r0, sp, #56	; 0x38
 80133a0:	9209      	str	r2, [sp, #36]	; 0x24
 80133a2:	f004 ffb7 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80133a6:	f04f 0e02 	mov.w	lr, #2
 80133aa:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80133ae:	9a06      	ldr	r2, [sp, #24]
 80133b0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80133b4:	9b01      	ldr	r3, [sp, #4]
 80133b6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80133ba:	4413      	add	r3, r2
 80133bc:	9a07      	ldr	r2, [sp, #28]
 80133be:	fb91 f1fe 	sdiv	r1, r1, lr
 80133c2:	fb9c fcfe 	sdiv	ip, ip, lr
 80133c6:	4401      	add	r1, r0
 80133c8:	1a58      	subs	r0, r3, r1
 80133ca:	9b02      	ldr	r3, [sp, #8]
 80133cc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80133d0:	4413      	add	r3, r2
 80133d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133d4:	448c      	add	ip, r1
 80133d6:	eba3 030c 	sub.w	r3, r3, ip
 80133da:	435b      	muls	r3, r3
 80133dc:	fb00 3300 	mla	r3, r0, r0, r3
 80133e0:	42ab      	cmp	r3, r5
 80133e2:	d208      	bcs.n	80133f6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80133e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80133e6:	461d      	mov	r5, r3
 80133e8:	9803      	ldr	r0, [sp, #12]
 80133ea:	6001      	str	r1, [r0, #0]
 80133ec:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80133ee:	9805      	ldr	r0, [sp, #20]
 80133f0:	8008      	strh	r0, [r1, #0]
 80133f2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80133f4:	800f      	strh	r7, [r1, #0]
 80133f6:	4692      	mov	sl, r2
 80133f8:	f10b 0b01 	add.w	fp, fp, #1
 80133fc:	3408      	adds	r4, #8
 80133fe:	f1bb 0f04 	cmp.w	fp, #4
 8013402:	d19d      	bne.n	8013340 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8013404:	9b00      	ldr	r3, [sp, #0]
 8013406:	9c08      	ldr	r4, [sp, #32]
 8013408:	444b      	add	r3, r9
 801340a:	4544      	cmp	r4, r8
 801340c:	9300      	str	r3, [sp, #0]
 801340e:	d188      	bne.n	8013322 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8013410:	b021      	add	sp, #132	; 0x84
 8013412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013416:	f04f 35ff 	mov.w	r5, #4294967295
 801341a:	e767      	b.n	80132ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801341c:	2400aeec 	.word	0x2400aeec
 8013420:	080277b0 	.word	0x080277b0

08013424 <_ZN8touchgfx4RectaNERKS0_>:
 8013424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013428:	f9b1 7000 	ldrsh.w	r7, [r1]
 801342c:	888c      	ldrh	r4, [r1, #4]
 801342e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013432:	443c      	add	r4, r7
 8013434:	b2a4      	uxth	r4, r4
 8013436:	fa0f f884 	sxth.w	r8, r4
 801343a:	45c1      	cmp	r9, r8
 801343c:	da2f      	bge.n	801349e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801343e:	8882      	ldrh	r2, [r0, #4]
 8013440:	444a      	add	r2, r9
 8013442:	b292      	uxth	r2, r2
 8013444:	fa0f fe82 	sxth.w	lr, r2
 8013448:	4577      	cmp	r7, lr
 801344a:	da28      	bge.n	801349e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801344c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013450:	88cb      	ldrh	r3, [r1, #6]
 8013452:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013456:	442b      	add	r3, r5
 8013458:	b21b      	sxth	r3, r3
 801345a:	429e      	cmp	r6, r3
 801345c:	da1f      	bge.n	801349e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801345e:	88c3      	ldrh	r3, [r0, #6]
 8013460:	4433      	add	r3, r6
 8013462:	b29b      	uxth	r3, r3
 8013464:	fa0f fc83 	sxth.w	ip, r3
 8013468:	4565      	cmp	r5, ip
 801346a:	da18      	bge.n	801349e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801346c:	454f      	cmp	r7, r9
 801346e:	bfb8      	it	lt
 8013470:	464f      	movlt	r7, r9
 8013472:	42b5      	cmp	r5, r6
 8013474:	bfb8      	it	lt
 8013476:	4635      	movlt	r5, r6
 8013478:	45f0      	cmp	r8, lr
 801347a:	bfd8      	it	le
 801347c:	4622      	movle	r2, r4
 801347e:	1bd2      	subs	r2, r2, r7
 8013480:	8082      	strh	r2, [r0, #4]
 8013482:	884a      	ldrh	r2, [r1, #2]
 8013484:	88c9      	ldrh	r1, [r1, #6]
 8013486:	8007      	strh	r7, [r0, #0]
 8013488:	440a      	add	r2, r1
 801348a:	8045      	strh	r5, [r0, #2]
 801348c:	b292      	uxth	r2, r2
 801348e:	b211      	sxth	r1, r2
 8013490:	458c      	cmp	ip, r1
 8013492:	bfa8      	it	ge
 8013494:	4613      	movge	r3, r2
 8013496:	1b5b      	subs	r3, r3, r5
 8013498:	80c3      	strh	r3, [r0, #6]
 801349a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801349e:	2300      	movs	r3, #0
 80134a0:	8003      	strh	r3, [r0, #0]
 80134a2:	8043      	strh	r3, [r0, #2]
 80134a4:	8083      	strh	r3, [r0, #4]
 80134a6:	80c3      	strh	r3, [r0, #6]
 80134a8:	e7f7      	b.n	801349a <_ZN8touchgfx4RectaNERKS0_+0x76>

080134aa <_ZNK8touchgfx4Rect7isEmptyEv>:
 80134aa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	dd06      	ble.n	80134c0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80134b2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80134b6:	2800      	cmp	r0, #0
 80134b8:	bfcc      	ite	gt
 80134ba:	2000      	movgt	r0, #0
 80134bc:	2001      	movle	r0, #1
 80134be:	4770      	bx	lr
 80134c0:	2001      	movs	r0, #1
 80134c2:	4770      	bx	lr

080134c4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80134c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134c8:	2300      	movs	r3, #0
 80134ca:	4604      	mov	r4, r0
 80134cc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80134ce:	8003      	strh	r3, [r0, #0]
 80134d0:	8043      	strh	r3, [r0, #2]
 80134d2:	8083      	strh	r3, [r0, #4]
 80134d4:	80c3      	strh	r3, [r0, #6]
 80134d6:	2d00      	cmp	r5, #0
 80134d8:	d040      	beq.n	801355c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80134da:	1d28      	adds	r0, r5, #4
 80134dc:	f7ff ffe5 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80134e0:	b988      	cbnz	r0, 8013506 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80134e2:	4620      	mov	r0, r4
 80134e4:	f7ff ffe1 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80134e8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80134ec:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80134f0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80134f4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80134f8:	b138      	cbz	r0, 801350a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80134fa:	8022      	strh	r2, [r4, #0]
 80134fc:	8063      	strh	r3, [r4, #2]
 80134fe:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013502:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013506:	69ad      	ldr	r5, [r5, #24]
 8013508:	e7e5      	b.n	80134d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801350a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801350e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013512:	4290      	cmp	r0, r2
 8013514:	4607      	mov	r7, r0
 8013516:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801351a:	460e      	mov	r6, r1
 801351c:	bfa8      	it	ge
 801351e:	4617      	movge	r7, r2
 8013520:	4299      	cmp	r1, r3
 8013522:	4472      	add	r2, lr
 8013524:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8013528:	bfa8      	it	ge
 801352a:	461e      	movge	r6, r3
 801352c:	4440      	add	r0, r8
 801352e:	4471      	add	r1, lr
 8013530:	4463      	add	r3, ip
 8013532:	b200      	sxth	r0, r0
 8013534:	8027      	strh	r7, [r4, #0]
 8013536:	b212      	sxth	r2, r2
 8013538:	8066      	strh	r6, [r4, #2]
 801353a:	b209      	sxth	r1, r1
 801353c:	b21b      	sxth	r3, r3
 801353e:	4290      	cmp	r0, r2
 8013540:	bfac      	ite	ge
 8013542:	ebc7 0200 	rsbge	r2, r7, r0
 8013546:	ebc7 0202 	rsblt	r2, r7, r2
 801354a:	4299      	cmp	r1, r3
 801354c:	bfac      	ite	ge
 801354e:	ebc6 0301 	rsbge	r3, r6, r1
 8013552:	ebc6 0303 	rsblt	r3, r6, r3
 8013556:	80a2      	strh	r2, [r4, #4]
 8013558:	80e3      	strh	r3, [r4, #6]
 801355a:	e7d4      	b.n	8013506 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801355c:	4620      	mov	r0, r4
 801355e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013562 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8013562:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013566:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801356a:	b383      	cbz	r3, 80135ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801356c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801356e:	b374      	cbz	r4, 80135ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013570:	f9b1 5000 	ldrsh.w	r5, [r1]
 8013574:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8013578:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801357c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013580:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013584:	b303      	cbz	r3, 80135c8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013586:	4668      	mov	r0, sp
 8013588:	1d21      	adds	r1, r4, #4
 801358a:	f8ad 5000 	strh.w	r5, [sp]
 801358e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8013592:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013596:	f8ad 8006 	strh.w	r8, [sp, #6]
 801359a:	f7ff ff43 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 801359e:	4668      	mov	r0, sp
 80135a0:	f7ff ff83 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80135a4:	b980      	cbnz	r0, 80135c8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80135a6:	f8bd 3000 	ldrh.w	r3, [sp]
 80135aa:	4669      	mov	r1, sp
 80135ac:	88a2      	ldrh	r2, [r4, #4]
 80135ae:	4620      	mov	r0, r4
 80135b0:	1a9b      	subs	r3, r3, r2
 80135b2:	88e2      	ldrh	r2, [r4, #6]
 80135b4:	f8ad 3000 	strh.w	r3, [sp]
 80135b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80135bc:	1a9b      	subs	r3, r3, r2
 80135be:	f8ad 3002 	strh.w	r3, [sp, #2]
 80135c2:	6823      	ldr	r3, [r4, #0]
 80135c4:	689b      	ldr	r3, [r3, #8]
 80135c6:	4798      	blx	r3
 80135c8:	69a4      	ldr	r4, [r4, #24]
 80135ca:	2c00      	cmp	r4, #0
 80135cc:	d1d8      	bne.n	8013580 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80135ce:	b002      	add	sp, #8
 80135d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80135d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80135da:	460d      	mov	r5, r1
 80135dc:	4616      	mov	r6, r2
 80135de:	b323      	cbz	r3, 801362a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80135e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80135e2:	b314      	cbz	r4, 801362a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80135e4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80135e8:	b1eb      	cbz	r3, 8013626 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80135ea:	6828      	ldr	r0, [r5, #0]
 80135ec:	466b      	mov	r3, sp
 80135ee:	6869      	ldr	r1, [r5, #4]
 80135f0:	c303      	stmia	r3!, {r0, r1}
 80135f2:	4668      	mov	r0, sp
 80135f4:	1d21      	adds	r1, r4, #4
 80135f6:	f7ff ff15 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 80135fa:	4668      	mov	r0, sp
 80135fc:	f7ff ff55 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8013600:	b988      	cbnz	r0, 8013626 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013602:	f8bd 3000 	ldrh.w	r3, [sp]
 8013606:	4669      	mov	r1, sp
 8013608:	88a2      	ldrh	r2, [r4, #4]
 801360a:	4620      	mov	r0, r4
 801360c:	1a9b      	subs	r3, r3, r2
 801360e:	88e2      	ldrh	r2, [r4, #6]
 8013610:	f8ad 3000 	strh.w	r3, [sp]
 8013614:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013618:	1a9b      	subs	r3, r3, r2
 801361a:	4632      	mov	r2, r6
 801361c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013620:	6823      	ldr	r3, [r4, #0]
 8013622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013624:	4798      	blx	r3
 8013626:	69a4      	ldr	r4, [r4, #24]
 8013628:	e7db      	b.n	80135e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801362a:	b002      	add	sp, #8
 801362c:	bd70      	pop	{r4, r5, r6, pc}

0801362e <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801362e:	2000      	movs	r0, #0
 8013630:	4770      	bx	lr

08013632 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8013632:	2001      	movs	r0, #1
 8013634:	4770      	bx	lr

08013636 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 8013636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013638:	6803      	ldr	r3, [r0, #0]
 801363a:	4604      	mov	r4, r0
 801363c:	460e      	mov	r6, r1
 801363e:	4601      	mov	r1, r0
 8013640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013642:	4668      	mov	r0, sp
 8013644:	4615      	mov	r5, r2
 8013646:	4798      	blx	r3
 8013648:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 801364c:	b13b      	cbz	r3, 801365e <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x28>
 801364e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013652:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013656:	4293      	cmp	r3, r2
 8013658:	bfac      	ite	ge
 801365a:	2300      	movge	r3, #0
 801365c:	2301      	movlt	r3, #1
 801365e:	7033      	strb	r3, [r6, #0]
 8013660:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8013664:	b13b      	cbz	r3, 8013676 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x40>
 8013666:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801366a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801366e:	4293      	cmp	r3, r2
 8013670:	bfac      	ite	ge
 8013672:	2300      	movge	r3, #0
 8013674:	2301      	movlt	r3, #1
 8013676:	702b      	strb	r3, [r5, #0]
 8013678:	b002      	add	sp, #8
 801367a:	bd70      	pop	{r4, r5, r6, pc}

0801367c <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 801367c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013680:	4604      	mov	r4, r0
 8013682:	460f      	mov	r7, r1
 8013684:	4616      	mov	r6, r2
 8013686:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8013688:	f100 0838 	add.w	r8, r0, #56	; 0x38
 801368c:	f100 0964 	add.w	r9, r0, #100	; 0x64
 8013690:	b15d      	cbz	r5, 80136aa <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 8013692:	4545      	cmp	r5, r8
 8013694:	d007      	beq.n	80136a6 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 8013696:	454d      	cmp	r5, r9
 8013698:	d005      	beq.n	80136a6 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 801369a:	682b      	ldr	r3, [r5, #0]
 801369c:	4632      	mov	r2, r6
 801369e:	4639      	mov	r1, r7
 80136a0:	4628      	mov	r0, r5
 80136a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136a4:	4798      	blx	r3
 80136a6:	69ad      	ldr	r5, [r5, #24]
 80136a8:	e7f2      	b.n	8013690 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 80136aa:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80136ae:	441f      	add	r7, r3
 80136b0:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 80136b4:	441e      	add	r6, r3
 80136b6:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
 80136ba:	f8a4 609a 	strh.w	r6, [r4, #154]	; 0x9a
 80136be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080136c2 <_ZN8touchgfx9DragEventD1Ev>:
 80136c2:	4770      	bx	lr

080136c4 <_ZN8touchgfx10ClickEventD1Ev>:
 80136c4:	4770      	bx	lr

080136c6 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 80136c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136c8:	4605      	mov	r5, r0
 80136ca:	f100 0638 	add.w	r6, r0, #56	; 0x38
 80136ce:	4604      	mov	r4, r0
 80136d0:	460f      	mov	r7, r1
 80136d2:	f855 3b64 	ldr.w	r3, [r5], #100
 80136d6:	4631      	mov	r1, r6
 80136d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80136da:	4798      	blx	r3
 80136dc:	6823      	ldr	r3, [r4, #0]
 80136de:	4629      	mov	r1, r5
 80136e0:	4620      	mov	r0, r4
 80136e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80136e4:	4798      	blx	r3
 80136e6:	4639      	mov	r1, r7
 80136e8:	4620      	mov	r0, r4
 80136ea:	f7ff fd59 	bl	80131a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80136ee:	4631      	mov	r1, r6
 80136f0:	4620      	mov	r0, r4
 80136f2:	f7ff fd55 	bl	80131a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80136f6:	4629      	mov	r1, r5
 80136f8:	4620      	mov	r0, r4
 80136fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80136fe:	f7ff bd4f 	b.w	80131a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

08013702 <_ZN8touchgfx10ClickEventD0Ev>:
 8013702:	b510      	push	{r4, lr}
 8013704:	4604      	mov	r4, r0
 8013706:	210c      	movs	r1, #12
 8013708:	f012 fa97 	bl	8025c3a <_ZdlPvj>
 801370c:	4620      	mov	r0, r4
 801370e:	bd10      	pop	{r4, pc}

08013710 <_ZN8touchgfx9DragEventD0Ev>:
 8013710:	b510      	push	{r4, lr}
 8013712:	4604      	mov	r4, r0
 8013714:	2110      	movs	r1, #16
 8013716:	f012 fa90 	bl	8025c3a <_ZdlPvj>
 801371a:	4620      	mov	r0, r4
 801371c:	bd10      	pop	{r4, pc}
	...

08013720 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 8013720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013724:	b08b      	sub	sp, #44	; 0x2c
 8013726:	2300      	movs	r3, #0
 8013728:	4604      	mov	r4, r0
 801372a:	f9b1 9006 	ldrsh.w	r9, [r1, #6]
 801372e:	aa0a      	add	r2, sp, #40	; 0x28
 8013730:	f88d 3006 	strb.w	r3, [sp, #6]
 8013734:	f9b1 8008 	ldrsh.w	r8, [r1, #8]
 8013738:	460d      	mov	r5, r1
 801373a:	f802 3d21 	strb.w	r3, [r2, #-33]!
 801373e:	6803      	ldr	r3, [r0, #0]
 8013740:	f9b1 700a 	ldrsh.w	r7, [r1, #10]
 8013744:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 8013748:	f10d 0106 	add.w	r1, sp, #6
 801374c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013750:	4798      	blx	r3
 8013752:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8013756:	2900      	cmp	r1, #0
 8013758:	d03d      	beq.n	80137d6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801375a:	42a1      	cmp	r1, r4
 801375c:	d03b      	beq.n	80137d6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801375e:	a802      	add	r0, sp, #8
 8013760:	f004 fdd8 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013764:	4621      	mov	r1, r4
 8013766:	a804      	add	r0, sp, #16
 8013768:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 801376c:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8013770:	f004 fdd0 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013774:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8013778:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 801377c:	eba3 030b 	sub.w	r3, r3, fp
 8013780:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8013784:	88e9      	ldrh	r1, [r5, #6]
 8013786:	4413      	add	r3, r2
 8013788:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801378c:	f89d c006 	ldrb.w	ip, [sp, #6]
 8013790:	eba2 020a 	sub.w	r2, r2, sl
 8013794:	b29b      	uxth	r3, r3
 8013796:	4402      	add	r2, r0
 8013798:	8928      	ldrh	r0, [r5, #8]
 801379a:	4419      	add	r1, r3
 801379c:	b292      	uxth	r2, r2
 801379e:	b209      	sxth	r1, r1
 80137a0:	4410      	add	r0, r2
 80137a2:	b200      	sxth	r0, r0
 80137a4:	f1bc 0f00 	cmp.w	ip, #0
 80137a8:	f040 808f 	bne.w	80138ca <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 80137ac:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 80137b0:	4473      	add	r3, lr
 80137b2:	b21b      	sxth	r3, r3
 80137b4:	f89d e007 	ldrb.w	lr, [sp, #7]
 80137b8:	f1be 0f00 	cmp.w	lr, #0
 80137bc:	f040 80b3 	bne.w	8013926 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x206>
 80137c0:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 80137c4:	4472      	add	r2, lr
 80137c6:	b212      	sxth	r2, r2
 80137c8:	f1bc 0f00 	cmp.w	ip, #0
 80137cc:	f000 80ca 	beq.w	8013964 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x244>
 80137d0:	4290      	cmp	r0, r2
 80137d2:	f040 80b0 	bne.w	8013936 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x216>
 80137d6:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 80137da:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80137de:	2b00      	cmp	r3, #0
 80137e0:	f040 809b 	bne.w	801391a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 80137e4:	896e      	ldrh	r6, [r5, #10]
 80137e6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80137ea:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 80137ee:	89ad      	ldrh	r5, [r5, #12]
 80137f0:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
 80137f4:	f8b4 80a0 	ldrh.w	r8, [r4, #160]	; 0xa0
 80137f8:	4419      	add	r1, r3
 80137fa:	4433      	add	r3, r6
 80137fc:	4490      	add	r8, r2
 80137fe:	442a      	add	r2, r5
 8013800:	b29b      	uxth	r3, r3
 8013802:	f89d 5006 	ldrb.w	r5, [sp, #6]
 8013806:	b292      	uxth	r2, r2
 8013808:	b289      	uxth	r1, r1
 801380a:	fa1f f888 	uxth.w	r8, r8
 801380e:	b21f      	sxth	r7, r3
 8013810:	b216      	sxth	r6, r2
 8013812:	b165      	cbz	r5, 801382e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10e>
 8013814:	1a5b      	subs	r3, r3, r1
 8013816:	b29b      	uxth	r3, r3
 8013818:	b21d      	sxth	r5, r3
 801381a:	2d00      	cmp	r5, #0
 801381c:	bfbc      	itt	lt
 801381e:	425b      	neglt	r3, r3
 8013820:	b21d      	sxthlt	r5, r3
 8013822:	f9b4 309c 	ldrsh.w	r3, [r4, #156]	; 0x9c
 8013826:	42ab      	cmp	r3, r5
 8013828:	bfac      	ite	ge
 801382a:	2500      	movge	r5, #0
 801382c:	2501      	movlt	r5, #1
 801382e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013832:	b15b      	cbz	r3, 801384c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 8013834:	eba2 0308 	sub.w	r3, r2, r8
 8013838:	b29b      	uxth	r3, r3
 801383a:	b21a      	sxth	r2, r3
 801383c:	2a00      	cmp	r2, #0
 801383e:	bfbc      	itt	lt
 8013840:	425b      	neglt	r3, r3
 8013842:	b21a      	sxthlt	r2, r3
 8013844:	f9b4 309c 	ldrsh.w	r3, [r4, #156]	; 0x9c
 8013848:	4293      	cmp	r3, r2
 801384a:	db01      	blt.n	8013850 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x130>
 801384c:	2d00      	cmp	r5, #0
 801384e:	d03e      	beq.n	80138ce <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1ae>
 8013850:	2501      	movs	r5, #1
 8013852:	fa0f f981 	sxth.w	r9, r1
 8013856:	fa0f f888 	sxth.w	r8, r8
 801385a:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 801385e:	b1a0      	cbz	r0, 801388a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x16a>
 8013860:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8013864:	b98b      	cbnz	r3, 801388a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x16a>
 8013866:	4a41      	ldr	r2, [pc, #260]	; (801396c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>)
 8013868:	a906      	add	r1, sp, #24
 801386a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801386e:	9206      	str	r2, [sp, #24]
 8013870:	2202      	movs	r2, #2
 8013872:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013876:	f88d 201c 	strb.w	r2, [sp, #28]
 801387a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801387e:	6803      	ldr	r3, [r0, #0]
 8013880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013882:	4798      	blx	r3
 8013884:	2301      	movs	r3, #1
 8013886:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 801388a:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 801388e:	b149      	cbz	r1, 80138a4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 8013890:	eba7 0109 	sub.w	r1, r7, r9
 8013894:	b209      	sxth	r1, r1
 8013896:	b12d      	cbz	r5, 80138a4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 8013898:	2900      	cmp	r1, #0
 801389a:	dc40      	bgt.n	801391e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 801389c:	bf14      	ite	ne
 801389e:	f04f 31ff 	movne.w	r1, #4294967295
 80138a2:	2100      	moveq	r1, #0
 80138a4:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 80138a8:	b14a      	cbz	r2, 80138be <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 80138aa:	eba6 0608 	sub.w	r6, r6, r8
 80138ae:	b232      	sxth	r2, r6
 80138b0:	b12d      	cbz	r5, 80138be <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 80138b2:	2a00      	cmp	r2, #0
 80138b4:	dc35      	bgt.n	8013922 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 80138b6:	bf14      	ite	ne
 80138b8:	f04f 32ff 	movne.w	r2, #4294967295
 80138bc:	2200      	moveq	r2, #0
 80138be:	6823      	ldr	r3, [r4, #0]
 80138c0:	4620      	mov	r0, r4
 80138c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80138c6:	4798      	blx	r3
 80138c8:	e024      	b.n	8013914 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 80138ca:	460b      	mov	r3, r1
 80138cc:	e772      	b.n	80137b4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 80138ce:	b308      	cbz	r0, 8013914 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 80138d0:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 80138d4:	b9f3      	cbnz	r3, 8013914 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 80138d6:	ab0a      	add	r3, sp, #40	; 0x28
 80138d8:	4620      	mov	r0, r4
 80138da:	4632      	mov	r2, r6
 80138dc:	4639      	mov	r1, r7
 80138de:	f843 5d18 	str.w	r5, [r3, #-24]!
 80138e2:	f7ff fc8d 	bl	8013200 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80138e6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80138ea:	9b04      	ldr	r3, [sp, #16]
 80138ec:	4298      	cmp	r0, r3
 80138ee:	d011      	beq.n	8013914 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f4>
 80138f0:	4b1e      	ldr	r3, [pc, #120]	; (801396c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>)
 80138f2:	a906      	add	r1, sp, #24
 80138f4:	f8ad 501e 	strh.w	r5, [sp, #30]
 80138f8:	9306      	str	r3, [sp, #24]
 80138fa:	2302      	movs	r3, #2
 80138fc:	f8ad 5020 	strh.w	r5, [sp, #32]
 8013900:	f88d 301c 	strb.w	r3, [sp, #28]
 8013904:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8013908:	6803      	ldr	r3, [r0, #0]
 801390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801390c:	4798      	blx	r3
 801390e:	2301      	movs	r3, #1
 8013910:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8013914:	b00b      	add	sp, #44	; 0x2c
 8013916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801391a:	2500      	movs	r5, #0
 801391c:	e79f      	b.n	801385e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13e>
 801391e:	2101      	movs	r1, #1
 8013920:	e7c0      	b.n	80138a4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x184>
 8013922:	2201      	movs	r2, #1
 8013924:	e7cb      	b.n	80138be <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19e>
 8013926:	f1bc 0f00 	cmp.w	ip, #0
 801392a:	f47f af54 	bne.w	80137d6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801392e:	428b      	cmp	r3, r1
 8013930:	f43f af51 	beq.w	80137d6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013934:	4602      	mov	r2, r0
 8013936:	f8df c038 	ldr.w	ip, [pc, #56]	; 8013970 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x250>
 801393a:	f8ad 0020 	strh.w	r0, [sp, #32]
 801393e:	f8cd c018 	str.w	ip, [sp, #24]
 8013942:	f04f 0c00 	mov.w	ip, #0
 8013946:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801394a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801394e:	a906      	add	r1, sp, #24
 8013950:	f88d c01c 	strb.w	ip, [sp, #28]
 8013954:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013958:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801395c:	6803      	ldr	r3, [r0, #0]
 801395e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013960:	4798      	blx	r3
 8013962:	e738      	b.n	80137d6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013964:	428b      	cmp	r3, r1
 8013966:	f43f af33 	beq.w	80137d0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 801396a:	e7e4      	b.n	8013936 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x216>
 801396c:	080285b8 	.word	0x080285b8
 8013970:	080285cc 	.word	0x080285cc

08013974 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 8013974:	b570      	push	{r4, r5, r6, lr}
 8013976:	b086      	sub	sp, #24
 8013978:	2300      	movs	r3, #0
 801397a:	460c      	mov	r4, r1
 801397c:	4605      	mov	r5, r0
 801397e:	aa06      	add	r2, sp, #24
 8013980:	f88d 3002 	strb.w	r3, [sp, #2]
 8013984:	f10d 0102 	add.w	r1, sp, #2
 8013988:	f802 3d15 	strb.w	r3, [r2, #-21]!
 801398c:	6803      	ldr	r3, [r0, #0]
 801398e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013992:	4798      	blx	r3
 8013994:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013998:	b10b      	cbz	r3, 801399e <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 801399a:	7923      	ldrb	r3, [r4, #4]
 801399c:	b133      	cbz	r3, 80139ac <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 801399e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d067      	beq.n	8013a76 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 80139a6:	7923      	ldrb	r3, [r4, #4]
 80139a8:	2b01      	cmp	r3, #1
 80139aa:	d164      	bne.n	8013a76 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 80139ac:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	bfbc      	itt	lt
 80139b4:	425a      	neglt	r2, r3
 80139b6:	b213      	sxthlt	r3, r2
 80139b8:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	; 0x9c
 80139bc:	429a      	cmp	r2, r3
 80139be:	dc5a      	bgt.n	8013a76 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 80139c0:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 80139c2:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	; 0xb8
 80139c6:	429a      	cmp	r2, r3
 80139c8:	bfa8      	it	ge
 80139ca:	461a      	movge	r2, r3
 80139cc:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	; 0xba
 80139d0:	b212      	sxth	r2, r2
 80139d2:	2a05      	cmp	r2, #5
 80139d4:	bfb8      	it	lt
 80139d6:	2205      	movlt	r2, #5
 80139d8:	4351      	muls	r1, r2
 80139da:	3a04      	subs	r2, #4
 80139dc:	fb91 f1f3 	sdiv	r1, r1, r3
 80139e0:	b288      	uxth	r0, r1
 80139e2:	4629      	mov	r1, r5
 80139e4:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80139e8:	f8a5 00a8 	strh.w	r0, [r5, #168]	; 0xa8
 80139ec:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80139f6:	bfcc      	ite	gt
 80139f8:	2601      	movgt	r6, #1
 80139fa:	461e      	movle	r6, r3
 80139fc:	00d3      	lsls	r3, r2, #3
 80139fe:	fb13 f306 	smulbb	r3, r3, r6
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	b21a      	sxth	r2, r3
 8013a06:	2a00      	cmp	r2, #0
 8013a08:	f8a5 20ac 	strh.w	r2, [r5, #172]	; 0xac
 8013a0c:	bfbc      	itt	lt
 8013a0e:	425b      	neglt	r3, r3
 8013a10:	b21a      	sxthlt	r2, r3
 8013a12:	682b      	ldr	r3, [r5, #0]
 8013a14:	4282      	cmp	r2, r0
 8013a16:	bfd8      	it	le
 8013a18:	b290      	uxthle	r0, r2
 8013a1a:	f8a5 00a8 	strh.w	r0, [r5, #168]	; 0xa8
 8013a1e:	7922      	ldrb	r2, [r4, #4]
 8013a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a22:	2a01      	cmp	r2, #1
 8013a24:	d129      	bne.n	8013a7a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x106>
 8013a26:	a801      	add	r0, sp, #4
 8013a28:	4798      	blx	r3
 8013a2a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8013a2e:	2601      	movs	r6, #1
 8013a30:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
 8013a34:	f885 60b0 	strb.w	r6, [r5, #176]	; 0xb0
 8013a38:	f003 fc0a 	bl	8017250 <_ZN8touchgfx11Application11getInstanceEv>
 8013a3c:	4629      	mov	r1, r5
 8013a3e:	f003 fc0d 	bl	801725c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8013a42:	7923      	ldrb	r3, [r4, #4]
 8013a44:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8013a48:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8013a4c:	b198      	cbz	r0, 8013a76 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013a4e:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 8013a52:	b983      	cbnz	r3, 8013a76 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013a54:	4a0b      	ldr	r2, [pc, #44]	; (8013a84 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x110>)
 8013a56:	a903      	add	r1, sp, #12
 8013a58:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013a5c:	9203      	str	r2, [sp, #12]
 8013a5e:	2202      	movs	r2, #2
 8013a60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013a64:	f88d 2010 	strb.w	r2, [sp, #16]
 8013a68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a6c:	6803      	ldr	r3, [r0, #0]
 8013a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a70:	4798      	blx	r3
 8013a72:	f885 60b6 	strb.w	r6, [r5, #182]	; 0xb6
 8013a76:	b006      	add	sp, #24
 8013a78:	bd70      	pop	{r4, r5, r6, pc}
 8013a7a:	a803      	add	r0, sp, #12
 8013a7c:	4798      	blx	r3
 8013a7e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013a82:	e7d4      	b.n	8013a2e <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 8013a84:	080285b8 	.word	0x080285b8

08013a88 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 8013a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a8a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8013a8e:	4604      	mov	r4, r0
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d046      	beq.n	8013b22 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 8013a94:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
 8013a98:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8013a9c:	3001      	adds	r0, #1
 8013a9e:	b280      	uxth	r0, r0
 8013aa0:	4298      	cmp	r0, r3
 8013aa2:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 8013aa6:	d840      	bhi.n	8013b2a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa2>
 8013aa8:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8013aac:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8013ab0:	f004 ffcc 	bl	8018a4c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8013ab4:	4605      	mov	r5, r0
 8013ab6:	b282      	uxth	r2, r0
 8013ab8:	f012 0301 	ands.w	r3, r2, #1
 8013abc:	d006      	beq.n	8013acc <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 8013abe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ac2:	2800      	cmp	r0, #0
 8013ac4:	bfd8      	it	le
 8013ac6:	460b      	movle	r3, r1
 8013ac8:	18d5      	adds	r5, r2, r3
 8013aca:	b22d      	sxth	r5, r5
 8013acc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8013ad0:	2b01      	cmp	r3, #1
 8013ad2:	d028      	beq.n	8013b26 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 8013ad4:	6823      	ldr	r3, [r4, #0]
 8013ad6:	4621      	mov	r1, r4
 8013ad8:	4668      	mov	r0, sp
 8013ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013adc:	4798      	blx	r3
 8013ade:	f8bd 6000 	ldrh.w	r6, [sp]
 8013ae2:	1bae      	subs	r6, r5, r6
 8013ae4:	b236      	sxth	r6, r6
 8013ae6:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8013aea:	b142      	cbz	r2, 8013afe <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x76>
 8013aec:	6823      	ldr	r3, [r4, #0]
 8013aee:	4621      	mov	r1, r4
 8013af0:	4668      	mov	r0, sp
 8013af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013af4:	4798      	blx	r3
 8013af6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013afa:	1aad      	subs	r5, r5, r2
 8013afc:	b22a      	sxth	r2, r5
 8013afe:	6823      	ldr	r3, [r4, #0]
 8013b00:	4631      	mov	r1, r6
 8013b02:	4620      	mov	r0, r4
 8013b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b08:	4798      	blx	r3
 8013b0a:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
 8013b0e:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
 8013b12:	b935      	cbnz	r5, 8013b22 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9a>
 8013b14:	f003 fb9c 	bl	8017250 <_ZN8touchgfx11Application11getInstanceEv>
 8013b18:	4621      	mov	r1, r4
 8013b1a:	f003 fbd1 	bl	80172c0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8013b1e:	f8a4 50ae 	strh.w	r5, [r4, #174]	; 0xae
 8013b22:	b002      	add	sp, #8
 8013b24:	bd70      	pop	{r4, r5, r6, pc}
 8013b26:	2600      	movs	r6, #0
 8013b28:	e7dd      	b.n	8013ae6 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x5e>
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 8013b30:	e7ed      	b.n	8013b0e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x86>

08013b32 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8013b32:	b470      	push	{r4, r5, r6}
 8013b34:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 8013b38:	461d      	mov	r5, r3
 8013b3a:	b11e      	cbz	r6, 8013b44 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 8013b3c:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
 8013b40:	b116      	cbz	r6, 8013b48 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8013b42:	6028      	str	r0, [r5, #0]
 8013b44:	bc70      	pop	{r4, r5, r6}
 8013b46:	4770      	bx	lr
 8013b48:	bc70      	pop	{r4, r5, r6}
 8013b4a:	f7ff bb59 	b.w	8013200 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

08013b4e <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8013b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b50:	4604      	mov	r4, r0
 8013b52:	4608      	mov	r0, r1
 8013b54:	460d      	mov	r5, r1
 8013b56:	f7ff fca8 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8013b5a:	b978      	cbnz	r0, 8013b7c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	f7ff fca4 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8013b62:	f9b5 6000 	ldrsh.w	r6, [r5]
 8013b66:	b150      	cbz	r0, 8013b7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8013b68:	8026      	strh	r6, [r4, #0]
 8013b6a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013b6e:	8063      	strh	r3, [r4, #2]
 8013b70:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8013b74:	80a3      	strh	r3, [r4, #4]
 8013b76:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013b7a:	80e3      	strh	r3, [r4, #6]
 8013b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b7e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013b82:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013b86:	42b1      	cmp	r1, r6
 8013b88:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013b8c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8013b90:	460f      	mov	r7, r1
 8013b92:	88ed      	ldrh	r5, [r5, #6]
 8013b94:	bfa8      	it	ge
 8013b96:	4637      	movge	r7, r6
 8013b98:	4293      	cmp	r3, r2
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	4466      	add	r6, ip
 8013b9e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013ba2:	bfa8      	it	ge
 8013ba4:	4610      	movge	r0, r2
 8013ba6:	442a      	add	r2, r5
 8013ba8:	88e5      	ldrh	r5, [r4, #6]
 8013baa:	4461      	add	r1, ip
 8013bac:	b236      	sxth	r6, r6
 8013bae:	8027      	strh	r7, [r4, #0]
 8013bb0:	442b      	add	r3, r5
 8013bb2:	b209      	sxth	r1, r1
 8013bb4:	b212      	sxth	r2, r2
 8013bb6:	8060      	strh	r0, [r4, #2]
 8013bb8:	b21b      	sxth	r3, r3
 8013bba:	428e      	cmp	r6, r1
 8013bbc:	bfac      	ite	ge
 8013bbe:	ebc7 0106 	rsbge	r1, r7, r6
 8013bc2:	ebc7 0101 	rsblt	r1, r7, r1
 8013bc6:	429a      	cmp	r2, r3
 8013bc8:	bfac      	ite	ge
 8013bca:	ebc0 0202 	rsbge	r2, r0, r2
 8013bce:	ebc0 0203 	rsblt	r2, r0, r3
 8013bd2:	80a1      	strh	r1, [r4, #4]
 8013bd4:	80e2      	strh	r2, [r4, #6]
 8013bd6:	e7d1      	b.n	8013b7c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08013bd8 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 8013bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013bda:	4604      	mov	r4, r0
 8013bdc:	2200      	movs	r2, #0
 8013bde:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8013be2:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8013be6:	680b      	ldr	r3, [r1, #0]
 8013be8:	8022      	strh	r2, [r4, #0]
 8013bea:	8062      	strh	r2, [r4, #2]
 8013bec:	80e0      	strh	r0, [r4, #6]
 8013bee:	4668      	mov	r0, sp
 8013bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013bf4:	80a5      	strh	r5, [r4, #4]
 8013bf6:	4798      	blx	r3
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	4669      	mov	r1, sp
 8013bfc:	f7ff ffa7 	bl	8013b4e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013c00:	4620      	mov	r0, r4
 8013c02:	b003      	add	sp, #12
 8013c04:	bd30      	pop	{r4, r5, pc}

08013c06 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 8013c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c08:	2300      	movs	r3, #0
 8013c0a:	4605      	mov	r5, r0
 8013c0c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013c0e:	f101 0738 	add.w	r7, r1, #56	; 0x38
 8013c12:	f101 0664 	add.w	r6, r1, #100	; 0x64
 8013c16:	8003      	strh	r3, [r0, #0]
 8013c18:	8043      	strh	r3, [r0, #2]
 8013c1a:	8083      	strh	r3, [r0, #4]
 8013c1c:	80c3      	strh	r3, [r0, #6]
 8013c1e:	b164      	cbz	r4, 8013c3a <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 8013c20:	42bc      	cmp	r4, r7
 8013c22:	d008      	beq.n	8013c36 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013c24:	42b4      	cmp	r4, r6
 8013c26:	d006      	beq.n	8013c36 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013c28:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013c2c:	b11b      	cbz	r3, 8013c36 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013c2e:	1d21      	adds	r1, r4, #4
 8013c30:	4628      	mov	r0, r5
 8013c32:	f7ff ff8c 	bl	8013b4e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013c36:	69a4      	ldr	r4, [r4, #24]
 8013c38:	e7f1      	b.n	8013c1e <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 8013c3a:	4628      	mov	r0, r5
 8013c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013c40 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 8013c40:	b530      	push	{r4, r5, lr}
 8013c42:	2500      	movs	r5, #0
 8013c44:	6283      	str	r3, [r0, #40]	; 0x28
 8013c46:	8101      	strh	r1, [r0, #8]
 8013c48:	8085      	strh	r5, [r0, #4]
 8013c4a:	80c5      	strh	r5, [r0, #6]
 8013c4c:	8185      	strh	r5, [r0, #12]
 8013c4e:	81c5      	strh	r5, [r0, #14]
 8013c50:	8205      	strh	r5, [r0, #16]
 8013c52:	8245      	strh	r5, [r0, #18]
 8013c54:	61c5      	str	r5, [r0, #28]
 8013c56:	8405      	strh	r5, [r0, #32]
 8013c58:	8445      	strh	r5, [r0, #34]	; 0x22
 8013c5a:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8013c5e:	8142      	strh	r2, [r0, #10]
 8013c60:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8013c64:	2501      	movs	r5, #1
 8013c66:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 8013c6a:	4d03      	ldr	r5, [pc, #12]	; (8013c78 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 8013c6c:	6005      	str	r5, [r0, #0]
 8013c6e:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8013c72:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
 8013c76:	bd30      	pop	{r4, r5, pc}
 8013c78:	080290b8 	.word	0x080290b8

08013c7c <_ZN8touchgfx19ScrollableContainerC1Ev>:
 8013c7c:	4b2f      	ldr	r3, [pc, #188]	; (8013d3c <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 8013c7e:	2278      	movs	r2, #120	; 0x78
 8013c80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c82:	6003      	str	r3, [r0, #0]
 8013c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013c88:	2500      	movs	r5, #0
 8013c8a:	2601      	movs	r6, #1
 8013c8c:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013c8e:	2111      	movs	r1, #17
 8013c90:	f04f 33ff 	mov.w	r3, #4294967295
 8013c94:	4604      	mov	r4, r0
 8013c96:	8085      	strh	r5, [r0, #4]
 8013c98:	80c5      	strh	r5, [r0, #6]
 8013c9a:	8105      	strh	r5, [r0, #8]
 8013c9c:	8145      	strh	r5, [r0, #10]
 8013c9e:	8185      	strh	r5, [r0, #12]
 8013ca0:	81c5      	strh	r5, [r0, #14]
 8013ca2:	8205      	strh	r5, [r0, #16]
 8013ca4:	8245      	strh	r5, [r0, #18]
 8013ca6:	61c5      	str	r5, [r0, #28]
 8013ca8:	8405      	strh	r5, [r0, #32]
 8013caa:	8445      	strh	r5, [r0, #34]	; 0x22
 8013cac:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8013cb0:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
 8013cb4:	6285      	str	r5, [r0, #40]	; 0x28
 8013cb6:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8013cba:	6303      	str	r3, [r0, #48]	; 0x30
 8013cbc:	8681      	strh	r1, [r0, #52]	; 0x34
 8013cbe:	4629      	mov	r1, r5
 8013cc0:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
 8013cc4:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8013cc8:	9200      	str	r2, [sp, #0]
 8013cca:	3038      	adds	r0, #56	; 0x38
 8013ccc:	462a      	mov	r2, r5
 8013cce:	f7ff ffb7 	bl	8013c40 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8013cd2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013cd6:	462a      	mov	r2, r5
 8013cd8:	4629      	mov	r1, r5
 8013cda:	9300      	str	r3, [sp, #0]
 8013cdc:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8013ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013ce2:	f7ff ffad 	bl	8013c40 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8013ce6:	2305      	movs	r3, #5
 8013ce8:	4620      	mov	r0, r4
 8013cea:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 8013cee:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8013cf2:	4b13      	ldr	r3, [pc, #76]	; (8013d40 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 8013cf4:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8013cf8:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 8013cfc:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 8013d00:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8013d04:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
 8013d08:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8013d0c:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 8013d10:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8013d14:	f8a4 50b2 	strh.w	r5, [r4, #178]	; 0xb2
 8013d18:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
 8013d1c:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 8013d20:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013d24:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 8013d28:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 8013d2c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8013d30:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 8013d34:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 8013d38:	b002      	add	sp, #8
 8013d3a:	bd70      	pop	{r4, r5, r6, pc}
 8013d3c:	080285e0 	.word	0x080285e0
 8013d40:	00010007 	.word	0x00010007

08013d44 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 8013d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d46:	2600      	movs	r6, #0
 8013d48:	f891 30a4 	ldrb.w	r3, [r1, #164]	; 0xa4
 8013d4c:	4605      	mov	r5, r0
 8013d4e:	460c      	mov	r4, r1
 8013d50:	8006      	strh	r6, [r0, #0]
 8013d52:	8046      	strh	r6, [r0, #2]
 8013d54:	8086      	strh	r6, [r0, #4]
 8013d56:	80c6      	strh	r6, [r0, #6]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d041      	beq.n	8013de0 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8013d5c:	680b      	ldr	r3, [r1, #0]
 8013d5e:	4668      	mov	r0, sp
 8013d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d62:	4798      	blx	r3
 8013d64:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8013d68:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d03a      	beq.n	8013de6 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 8013d70:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013d74:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	dd05      	ble.n	8013d88 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>
 8013d7c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013d80:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013d84:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8013d88:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013d8c:	42bb      	cmp	r3, r7
 8013d8e:	da27      	bge.n	8013de0 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8013d90:	f9bd 1000 	ldrsh.w	r1, [sp]
 8013d94:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013d98:	424a      	negs	r2, r1
 8013d9a:	4439      	add	r1, r7
 8013d9c:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 8013da0:	b209      	sxth	r1, r1
 8013da2:	435a      	muls	r2, r3
 8013da4:	ebac 0606 	sub.w	r6, ip, r6
 8013da8:	1ac9      	subs	r1, r1, r3
 8013daa:	434b      	muls	r3, r1
 8013dac:	fb92 f2f7 	sdiv	r2, r2, r7
 8013db0:	fb93 f3f7 	sdiv	r3, r3, r7
 8013db4:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8013db8:	4413      	add	r3, r2
 8013dba:	0079      	lsls	r1, r7, #1
 8013dbc:	1af3      	subs	r3, r6, r3
 8013dbe:	4299      	cmp	r1, r3
 8013dc0:	dd05      	ble.n	8013dce <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 8013dc2:	1acb      	subs	r3, r1, r3
 8013dc4:	4353      	muls	r3, r2
 8013dc6:	fb93 f3f6 	sdiv	r3, r3, r6
 8013dca:	1ad2      	subs	r2, r2, r3
 8013dcc:	460b      	mov	r3, r1
 8013dce:	8961      	ldrh	r1, [r4, #10]
 8013dd0:	b280      	uxth	r0, r0
 8013dd2:	80ab      	strh	r3, [r5, #4]
 8013dd4:	1bc9      	subs	r1, r1, r7
 8013dd6:	80ef      	strh	r7, [r5, #6]
 8013dd8:	1a09      	subs	r1, r1, r0
 8013dda:	4410      	add	r0, r2
 8013ddc:	8069      	strh	r1, [r5, #2]
 8013dde:	8028      	strh	r0, [r5, #0]
 8013de0:	4628      	mov	r0, r5
 8013de2:	b003      	add	sp, #12
 8013de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013de6:	461e      	mov	r6, r3
 8013de8:	e7ce      	b.n	8013d88 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x44>

08013dea <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 8013dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013dec:	2600      	movs	r6, #0
 8013dee:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
 8013df2:	4605      	mov	r5, r0
 8013df4:	460c      	mov	r4, r1
 8013df6:	8006      	strh	r6, [r0, #0]
 8013df8:	8046      	strh	r6, [r0, #2]
 8013dfa:	8086      	strh	r6, [r0, #4]
 8013dfc:	80c6      	strh	r6, [r0, #6]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d041      	beq.n	8013e86 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8013e02:	680b      	ldr	r3, [r1, #0]
 8013e04:	4668      	mov	r0, sp
 8013e06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e08:	4798      	blx	r3
 8013e0a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8013e0e:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d03a      	beq.n	8013e8c <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 8013e16:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013e1a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	dd05      	ble.n	8013e2e <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>
 8013e22:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013e26:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013e2a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8013e2e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013e32:	42bb      	cmp	r3, r7
 8013e34:	da27      	bge.n	8013e86 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8013e36:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8013e3a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013e3e:	424a      	negs	r2, r1
 8013e40:	4439      	add	r1, r7
 8013e42:	eba3 0c40 	sub.w	ip, r3, r0, lsl #1
 8013e46:	b209      	sxth	r1, r1
 8013e48:	435a      	muls	r2, r3
 8013e4a:	ebac 0606 	sub.w	r6, ip, r6
 8013e4e:	1ac9      	subs	r1, r1, r3
 8013e50:	434b      	muls	r3, r1
 8013e52:	fb92 f2f7 	sdiv	r2, r2, r7
 8013e56:	fb93 f3f7 	sdiv	r3, r3, r7
 8013e5a:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8013e5e:	4413      	add	r3, r2
 8013e60:	0079      	lsls	r1, r7, #1
 8013e62:	1af3      	subs	r3, r6, r3
 8013e64:	4299      	cmp	r1, r3
 8013e66:	dd05      	ble.n	8013e74 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 8013e68:	1acb      	subs	r3, r1, r3
 8013e6a:	4353      	muls	r3, r2
 8013e6c:	fb93 f3f6 	sdiv	r3, r3, r6
 8013e70:	1ad2      	subs	r2, r2, r3
 8013e72:	460b      	mov	r3, r1
 8013e74:	8921      	ldrh	r1, [r4, #8]
 8013e76:	b280      	uxth	r0, r0
 8013e78:	80af      	strh	r7, [r5, #4]
 8013e7a:	1bc9      	subs	r1, r1, r7
 8013e7c:	80eb      	strh	r3, [r5, #6]
 8013e7e:	1a09      	subs	r1, r1, r0
 8013e80:	4410      	add	r0, r2
 8013e82:	8029      	strh	r1, [r5, #0]
 8013e84:	8068      	strh	r0, [r5, #2]
 8013e86:	4628      	mov	r0, r5
 8013e88:	b003      	add	sp, #12
 8013e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e8c:	461e      	mov	r6, r3
 8013e8e:	e7ce      	b.n	8013e2e <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x44>

08013e90 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 8013e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e94:	4617      	mov	r7, r2
 8013e96:	2200      	movs	r2, #0
 8013e98:	4604      	mov	r4, r0
 8013e9a:	460e      	mov	r6, r1
 8013e9c:	8002      	strh	r2, [r0, #0]
 8013e9e:	4698      	mov	r8, r3
 8013ea0:	8042      	strh	r2, [r0, #2]
 8013ea2:	8082      	strh	r2, [r0, #4]
 8013ea4:	80c2      	strh	r2, [r0, #6]
 8013ea6:	4638      	mov	r0, r7
 8013ea8:	f7ff faff 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8013eac:	4605      	mov	r5, r0
 8013eae:	b998      	cbnz	r0, 8013ed8 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 8013eb0:	4640      	mov	r0, r8
 8013eb2:	f7ff fafa 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8013eb6:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8013eba:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 8013ebe:	b908      	cbnz	r0, 8013ec4 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 8013ec0:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8013ec4:	8933      	ldrh	r3, [r6, #8]
 8013ec6:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 8013eca:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8013ece:	8022      	strh	r2, [r4, #0]
 8013ed0:	8067      	strh	r7, [r4, #2]
 8013ed2:	1b58      	subs	r0, r3, r5
 8013ed4:	80e1      	strh	r1, [r4, #6]
 8013ed6:	80a0      	strh	r0, [r4, #4]
 8013ed8:	4620      	mov	r0, r4
 8013eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ede <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 8013ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee2:	4604      	mov	r4, r0
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	460f      	mov	r7, r1
 8013ee8:	4616      	mov	r6, r2
 8013eea:	8020      	strh	r0, [r4, #0]
 8013eec:	4698      	mov	r8, r3
 8013eee:	8060      	strh	r0, [r4, #2]
 8013ef0:	80a0      	strh	r0, [r4, #4]
 8013ef2:	80e0      	strh	r0, [r4, #6]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7ff fad8 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8013efa:	4605      	mov	r5, r0
 8013efc:	b998      	cbnz	r0, 8013f26 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 8013efe:	4630      	mov	r0, r6
 8013f00:	f7ff fad3 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f04:	f897 602c 	ldrb.w	r6, [r7, #44]	; 0x2c
 8013f08:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013f0c:	b908      	cbnz	r0, 8013f12 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 8013f0e:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 8013f12:	897a      	ldrh	r2, [r7, #10]
 8013f14:	f8b8 3000 	ldrh.w	r3, [r8]
 8013f18:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 8013f1c:	8066      	strh	r6, [r4, #2]
 8013f1e:	8023      	strh	r3, [r4, #0]
 8013f20:	1b50      	subs	r0, r2, r5
 8013f22:	80a1      	strh	r1, [r4, #4]
 8013f24:	80e0      	strh	r0, [r4, #6]
 8013f26:	4620      	mov	r0, r4
 8013f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013f2c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 8013f2c:	b570      	push	{r4, r5, r6, lr}
 8013f2e:	b088      	sub	sp, #32
 8013f30:	4604      	mov	r4, r0
 8013f32:	4601      	mov	r1, r0
 8013f34:	4668      	mov	r0, sp
 8013f36:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8013f3a:	f7ff ff03 	bl	8013d44 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 8013f3e:	4621      	mov	r1, r4
 8013f40:	a802      	add	r0, sp, #8
 8013f42:	f7ff ff52 	bl	8013dea <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 8013f46:	ab02      	add	r3, sp, #8
 8013f48:	466a      	mov	r2, sp
 8013f4a:	4621      	mov	r1, r4
 8013f4c:	a804      	add	r0, sp, #16
 8013f4e:	f7ff ff9f 	bl	8013e90 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 8013f52:	ab02      	add	r3, sp, #8
 8013f54:	466a      	mov	r2, sp
 8013f56:	4621      	mov	r1, r4
 8013f58:	a806      	add	r0, sp, #24
 8013f5a:	f7ff ffc0 	bl	8013ede <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 8013f5e:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8013f62:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8013f66:	429a      	cmp	r2, r3
 8013f68:	da02      	bge.n	8013f70 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 8013f6a:	4630      	mov	r0, r6
 8013f6c:	f004 f93a 	bl	80181e4 <_ZNK8touchgfx8Drawable10invalidateEv>
 8013f70:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8013f74:	f104 0564 	add.w	r5, r4, #100	; 0x64
 8013f78:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	da02      	bge.n	8013f86 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 8013f80:	4628      	mov	r0, r5
 8013f82:	f004 f92f 	bl	80181e4 <_ZNK8touchgfx8Drawable10invalidateEv>
 8013f86:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8013f8a:	f8bd 0000 	ldrh.w	r0, [sp]
 8013f8e:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8013f92:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013f96:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8013f98:	4630      	mov	r0, r6
 8013f9a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8013f9c:	f7f0 fbe0 	bl	8004760 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013fa0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8013fa4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8013fa8:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8013fac:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8013fb6:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8013fba:	f7f0 fbd1 	bl	8004760 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013fbe:	8922      	ldrh	r2, [r4, #8]
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	a804      	add	r0, sp, #16
 8013fc4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013fc8:	8962      	ldrh	r2, [r4, #10]
 8013fca:	f8ad 3010 	strh.w	r3, [sp, #16]
 8013fce:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013fd2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013fd6:	f7ff fa68 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8013fda:	b920      	cbnz	r0, 8013fe6 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 8013fdc:	6823      	ldr	r3, [r4, #0]
 8013fde:	a904      	add	r1, sp, #16
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	691b      	ldr	r3, [r3, #16]
 8013fe4:	4798      	blx	r3
 8013fe6:	a806      	add	r0, sp, #24
 8013fe8:	f7ff fa5f 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8013fec:	b920      	cbnz	r0, 8013ff8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 8013fee:	6823      	ldr	r3, [r4, #0]
 8013ff0:	a906      	add	r1, sp, #24
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	691b      	ldr	r3, [r3, #16]
 8013ff6:	4798      	blx	r3
 8013ff8:	b008      	add	sp, #32
 8013ffa:	bd70      	pop	{r4, r5, r6, pc}

08013ffc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8013ffc:	b570      	push	{r4, r5, r6, lr}
 8013ffe:	790b      	ldrb	r3, [r1, #4]
 8014000:	b08a      	sub	sp, #40	; 0x28
 8014002:	4604      	mov	r4, r0
 8014004:	460d      	mov	r5, r1
 8014006:	2b00      	cmp	r3, #0
 8014008:	d17e      	bne.n	8014108 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10c>
 801400a:	2201      	movs	r2, #1
 801400c:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 8014010:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 8014014:	b142      	cbz	r2, 8014028 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2c>
 8014016:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 801401a:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
 801401e:	f003 f917 	bl	8017250 <_ZN8touchgfx11Application11getInstanceEv>
 8014022:	4621      	mov	r1, r4
 8014024:	f003 f94c 	bl	80172c0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8014028:	4623      	mov	r3, r4
 801402a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801402e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8014032:	f853 0bb4 	ldr.w	r0, [r3], #180
 8014036:	9301      	str	r3, [sp, #4]
 8014038:	f104 03b2 	add.w	r3, r4, #178	; 0xb2
 801403c:	9300      	str	r3, [sp, #0]
 801403e:	f104 0390 	add.w	r3, r4, #144	; 0x90
 8014042:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8014044:	4620      	mov	r0, r4
 8014046:	47b0      	blx	r6
 8014048:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801404c:	42a3      	cmp	r3, r4
 801404e:	bf04      	itt	eq
 8014050:	2300      	moveq	r3, #0
 8014052:	f8c4 3090 	streq.w	r3, [r4, #144]	; 0x90
 8014056:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801405a:	2900      	cmp	r1, #0
 801405c:	d03a      	beq.n	80140d4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 801405e:	2600      	movs	r6, #0
 8014060:	a803      	add	r0, sp, #12
 8014062:	f884 60b6 	strb.w	r6, [r4, #182]	; 0xb6
 8014066:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801406a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 801406e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8014072:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8014076:	f004 f94d 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801407a:	4621      	mov	r1, r4
 801407c:	a805      	add	r0, sp, #20
 801407e:	f004 f949 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014082:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014086:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801408a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801408e:	1ad2      	subs	r2, r2, r3
 8014090:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8014094:	7929      	ldrb	r1, [r5, #4]
 8014096:	441a      	add	r2, r3
 8014098:	88eb      	ldrh	r3, [r5, #6]
 801409a:	f88d 1020 	strb.w	r1, [sp, #32]
 801409e:	a907      	add	r1, sp, #28
 80140a0:	441a      	add	r2, r3
 80140a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80140a6:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80140aa:	1a1b      	subs	r3, r3, r0
 80140ac:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 80140b0:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 80140b4:	4403      	add	r3, r0
 80140b6:	8928      	ldrh	r0, [r5, #8]
 80140b8:	4403      	add	r3, r0
 80140ba:	482f      	ldr	r0, [pc, #188]	; (8014178 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 80140bc:	9007      	str	r0, [sp, #28]
 80140be:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80140c2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80140c6:	6803      	ldr	r3, [r0, #0]
 80140c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140ca:	4798      	blx	r3
 80140cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80140d0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80140d4:	2300      	movs	r3, #0
 80140d6:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 80140da:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 80140de:	b112      	cbz	r2, 80140e6 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xea>
 80140e0:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 80140e4:	b90b      	cbnz	r3, 80140ea <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xee>
 80140e6:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 80140ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 80140ee:	b112      	cbz	r2, 80140f6 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfa>
 80140f0:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 80140f4:	b90b      	cbnz	r3, 80140fa <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfe>
 80140f6:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 80140fa:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 80140fe:	4620      	mov	r0, r4
 8014100:	f7ff ff14 	bl	8013f2c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8014104:	b00a      	add	sp, #40	; 0x28
 8014106:	bd70      	pop	{r4, r5, r6, pc}
 8014108:	2b02      	cmp	r3, #2
 801410a:	d0fb      	beq.n	8014104 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x108>
 801410c:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 8014110:	b361      	cbz	r1, 801416c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x170>
 8014112:	a803      	add	r0, sp, #12
 8014114:	f004 f8fe 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014118:	4621      	mov	r1, r4
 801411a:	a805      	add	r0, sp, #20
 801411c:	f004 f8fa 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014120:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014124:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014128:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801412c:	1ad2      	subs	r2, r2, r3
 801412e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8014132:	7929      	ldrb	r1, [r5, #4]
 8014134:	441a      	add	r2, r3
 8014136:	88eb      	ldrh	r3, [r5, #6]
 8014138:	f88d 1020 	strb.w	r1, [sp, #32]
 801413c:	a907      	add	r1, sp, #28
 801413e:	441a      	add	r2, r3
 8014140:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8014144:	1a1b      	subs	r3, r3, r0
 8014146:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 801414a:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 801414e:	4403      	add	r3, r0
 8014150:	8928      	ldrh	r0, [r5, #8]
 8014152:	4403      	add	r3, r0
 8014154:	4808      	ldr	r0, [pc, #32]	; (8014178 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 8014156:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801415a:	2300      	movs	r3, #0
 801415c:	9007      	str	r0, [sp, #28]
 801415e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8014162:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014166:	6803      	ldr	r3, [r0, #0]
 8014168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801416a:	4798      	blx	r3
 801416c:	2300      	movs	r3, #0
 801416e:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
 8014172:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8014176:	e7ad      	b.n	80140d4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 8014178:	080285b8 	.word	0x080285b8

0801417c <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 801417c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801417e:	4606      	mov	r6, r0
 8014180:	4615      	mov	r5, r2
 8014182:	460c      	mov	r4, r1
 8014184:	b919      	cbnz	r1, 801418e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8014186:	b912      	cbnz	r2, 801418e <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8014188:	2000      	movs	r0, #0
 801418a:	b003      	add	sp, #12
 801418c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801418e:	6833      	ldr	r3, [r6, #0]
 8014190:	4631      	mov	r1, r6
 8014192:	4668      	mov	r0, sp
 8014194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014196:	4798      	blx	r3
 8014198:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801419c:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 80141a0:	f9bd 2000 	ldrsh.w	r2, [sp]
 80141a4:	4288      	cmp	r0, r1
 80141a6:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80141aa:	da2c      	bge.n	8014206 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8a>
 80141ac:	2c00      	cmp	r4, #0
 80141ae:	dd20      	ble.n	80141f2 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x76>
 80141b0:	1913      	adds	r3, r2, r4
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	dd01      	ble.n	80141ba <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 80141b6:	4252      	negs	r2, r2
 80141b8:	b214      	sxth	r4, r2
 80141ba:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 80141be:	4297      	cmp	r7, r2
 80141c0:	dd2c      	ble.n	801421c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa0>
 80141c2:	2d00      	cmp	r5, #0
 80141c4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80141c8:	dd1f      	ble.n	801420a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8e>
 80141ca:	195a      	adds	r2, r3, r5
 80141cc:	2a00      	cmp	r2, #0
 80141ce:	dd04      	ble.n	80141da <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 80141d0:	425b      	negs	r3, r3
 80141d2:	b21d      	sxth	r5, r3
 80141d4:	b90c      	cbnz	r4, 80141da <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 80141d6:	2d00      	cmp	r5, #0
 80141d8:	d0d6      	beq.n	8014188 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 80141da:	6833      	ldr	r3, [r6, #0]
 80141dc:	462a      	mov	r2, r5
 80141de:	4621      	mov	r1, r4
 80141e0:	4630      	mov	r0, r6
 80141e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80141e6:	4798      	blx	r3
 80141e8:	4630      	mov	r0, r6
 80141ea:	f7ff fe9f 	bl	8013f2c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 80141ee:	2001      	movs	r0, #1
 80141f0:	e7cb      	b.n	801418a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 80141f2:	d0e2      	beq.n	80141ba <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 80141f4:	440a      	add	r2, r1
 80141f6:	b292      	uxth	r2, r2
 80141f8:	fa04 f382 	sxtah	r3, r4, r2
 80141fc:	4283      	cmp	r3, r0
 80141fe:	dadc      	bge.n	80141ba <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 8014200:	1a84      	subs	r4, r0, r2
 8014202:	b224      	sxth	r4, r4
 8014204:	e7d9      	b.n	80141ba <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 8014206:	2400      	movs	r4, #0
 8014208:	e7d7      	b.n	80141ba <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x3e>
 801420a:	d007      	beq.n	801421c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa0>
 801420c:	443b      	add	r3, r7
 801420e:	b29b      	uxth	r3, r3
 8014210:	fa05 f183 	sxtah	r1, r5, r3
 8014214:	4291      	cmp	r1, r2
 8014216:	dae0      	bge.n	80141da <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>
 8014218:	1ad3      	subs	r3, r2, r3
 801421a:	e7da      	b.n	80141d2 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x56>
 801421c:	2c00      	cmp	r4, #0
 801421e:	d0b3      	beq.n	8014188 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8014220:	2500      	movs	r5, #0
 8014222:	e7da      	b.n	80141da <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x5e>

08014224 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 8014224:	b513      	push	{r0, r1, r4, lr}
 8014226:	6803      	ldr	r3, [r0, #0]
 8014228:	4601      	mov	r1, r0
 801422a:	4604      	mov	r4, r0
 801422c:	4668      	mov	r0, sp
 801422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014232:	4798      	blx	r3
 8014234:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8014238:	f9bd 1000 	ldrsh.w	r1, [sp]
 801423c:	2800      	cmp	r0, #0
 801423e:	dd20      	ble.n	8014282 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 8014240:	4602      	mov	r2, r0
 8014242:	2900      	cmp	r1, #0
 8014244:	dc0e      	bgt.n	8014264 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8014246:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801424a:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801424e:	440b      	add	r3, r1
 8014250:	b21b      	sxth	r3, r3
 8014252:	4298      	cmp	r0, r3
 8014254:	dd04      	ble.n	8014260 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 8014256:	1a1b      	subs	r3, r3, r0
 8014258:	4299      	cmp	r1, r3
 801425a:	bfb8      	it	lt
 801425c:	4619      	movlt	r1, r3
 801425e:	b909      	cbnz	r1, 8014264 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8014260:	b1f2      	cbz	r2, 80142a0 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 8014262:	2100      	movs	r1, #0
 8014264:	6823      	ldr	r3, [r4, #0]
 8014266:	4252      	negs	r2, r2
 8014268:	4249      	negs	r1, r1
 801426a:	4620      	mov	r0, r4
 801426c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014270:	b212      	sxth	r2, r2
 8014272:	b209      	sxth	r1, r1
 8014274:	4798      	blx	r3
 8014276:	4620      	mov	r0, r4
 8014278:	b002      	add	sp, #8
 801427a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801427e:	f7ff be55 	b.w	8013f2c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8014282:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014286:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801428a:	4403      	add	r3, r0
 801428c:	b21b      	sxth	r3, r3
 801428e:	429a      	cmp	r2, r3
 8014290:	dd04      	ble.n	801429c <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 8014292:	1a9a      	subs	r2, r3, r2
 8014294:	4282      	cmp	r2, r0
 8014296:	bfb8      	it	lt
 8014298:	4602      	movlt	r2, r0
 801429a:	e7d2      	b.n	8014242 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 801429c:	2200      	movs	r2, #0
 801429e:	e7d0      	b.n	8014242 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 80142a0:	b002      	add	sp, #8
 80142a2:	bd10      	pop	{r4, pc}

080142a4 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 80142a4:	6301      	str	r1, [r0, #48]	; 0x30
 80142a6:	6601      	str	r1, [r0, #96]	; 0x60
 80142a8:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 80142ac:	4770      	bx	lr

080142ae <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>:
 80142ae:	2201      	movs	r2, #1
 80142b0:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
 80142b4:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
 80142b8:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 80142bc:	f7ff be36 	b.w	8013f2c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

080142c0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80142c0:	4770      	bx	lr

080142c2 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80142c2:	4770      	bx	lr

080142c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80142c4:	6803      	ldr	r3, [r0, #0]
 80142c6:	b513      	push	{r0, r1, r4, lr}
 80142c8:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80142cc:	2300      	movs	r3, #0
 80142ce:	e9cd 3300 	strd	r3, r3, [sp]
 80142d2:	466b      	mov	r3, sp
 80142d4:	47a0      	blx	r4
 80142d6:	b002      	add	sp, #8
 80142d8:	bd10      	pop	{r4, pc}

080142da <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80142da:	2301      	movs	r3, #1
 80142dc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80142e0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80142e4:	4770      	bx	lr

080142e6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80142e6:	2301      	movs	r3, #1
 80142e8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80142ec:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80142f0:	4770      	bx	lr

080142f2 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80142f2:	6843      	ldr	r3, [r0, #4]
 80142f4:	2201      	movs	r2, #1
 80142f6:	725a      	strb	r2, [r3, #9]
 80142f8:	6840      	ldr	r0, [r0, #4]
 80142fa:	6803      	ldr	r3, [r0, #0]
 80142fc:	691b      	ldr	r3, [r3, #16]
 80142fe:	4718      	bx	r3

08014300 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014300:	6840      	ldr	r0, [r0, #4]
 8014302:	6803      	ldr	r3, [r0, #0]
 8014304:	689b      	ldr	r3, [r3, #8]
 8014306:	4718      	bx	r3

08014308 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8014308:	b530      	push	{r4, r5, lr}
 801430a:	b08b      	sub	sp, #44	; 0x2c
 801430c:	6804      	ldr	r4, [r0, #0]
 801430e:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8014312:	9509      	str	r5, [sp, #36]	; 0x24
 8014314:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8014318:	9508      	str	r5, [sp, #32]
 801431a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801431e:	9507      	str	r5, [sp, #28]
 8014320:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8014324:	9506      	str	r5, [sp, #24]
 8014326:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801432a:	9505      	str	r5, [sp, #20]
 801432c:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8014330:	9504      	str	r5, [sp, #16]
 8014332:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8014336:	9503      	str	r5, [sp, #12]
 8014338:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801433c:	9502      	str	r5, [sp, #8]
 801433e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8014342:	e9cd 3500 	strd	r3, r5, [sp]
 8014346:	4613      	mov	r3, r2
 8014348:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801434a:	2200      	movs	r2, #0
 801434c:	47a0      	blx	r4
 801434e:	b00b      	add	sp, #44	; 0x2c
 8014350:	bd30      	pop	{r4, r5, pc}
	...

08014354 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014354:	4b04      	ldr	r3, [pc, #16]	; (8014368 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	b123      	cbz	r3, 8014364 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801435a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801435e:	f080 0001 	eor.w	r0, r0, #1
 8014362:	4770      	bx	lr
 8014364:	2001      	movs	r0, #1
 8014366:	4770      	bx	lr
 8014368:	2400aeea 	.word	0x2400aeea

0801436c <_ZN8touchgfx3HAL8endFrameEv>:
 801436c:	b510      	push	{r4, lr}
 801436e:	4604      	mov	r4, r0
 8014370:	6840      	ldr	r0, [r0, #4]
 8014372:	6803      	ldr	r3, [r0, #0]
 8014374:	689b      	ldr	r3, [r3, #8]
 8014376:	4798      	blx	r3
 8014378:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801437c:	b113      	cbz	r3, 8014384 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801437e:	2301      	movs	r3, #1
 8014380:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014384:	bd10      	pop	{r4, pc}

08014386 <_ZN8touchgfx3HAL10initializeEv>:
 8014386:	b510      	push	{r4, lr}
 8014388:	4604      	mov	r4, r0
 801438a:	f7ed fd01 	bl	8001d90 <_ZN8touchgfx10OSWrappers10initializeEv>
 801438e:	6860      	ldr	r0, [r4, #4]
 8014390:	6803      	ldr	r3, [r0, #0]
 8014392:	68db      	ldr	r3, [r3, #12]
 8014394:	4798      	blx	r3
 8014396:	68e0      	ldr	r0, [r4, #12]
 8014398:	6803      	ldr	r3, [r0, #0]
 801439a:	689b      	ldr	r3, [r3, #8]
 801439c:	4798      	blx	r3
 801439e:	6823      	ldr	r3, [r4, #0]
 80143a0:	4620      	mov	r0, r4
 80143a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143a8:	4718      	bx	r3

080143aa <_ZN8touchgfx3HAL9taskEntryEv>:
 80143aa:	b508      	push	{r3, lr}
 80143ac:	6803      	ldr	r3, [r0, #0]
 80143ae:	4604      	mov	r4, r0
 80143b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80143b2:	4798      	blx	r3
 80143b4:	6823      	ldr	r3, [r4, #0]
 80143b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143b8:	4620      	mov	r0, r4
 80143ba:	4798      	blx	r3
 80143bc:	f7ed fd5e 	bl	8001e7c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80143c0:	6823      	ldr	r3, [r4, #0]
 80143c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143c4:	e7f8      	b.n	80143b8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080143c8 <_ZN8touchgfx3HAL4tickEv>:
 80143c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80143ca:	6803      	ldr	r3, [r0, #0]
 80143cc:	4604      	mov	r4, r0
 80143ce:	4d5c      	ldr	r5, [pc, #368]	; (8014540 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80143d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80143d4:	4798      	blx	r3
 80143d6:	2800      	cmp	r0, #0
 80143d8:	f000 8097 	beq.w	801450a <_ZN8touchgfx3HAL4tickEv+0x142>
 80143dc:	2001      	movs	r0, #1
 80143de:	2600      	movs	r6, #0
 80143e0:	f7ed fa14 	bl	800180c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80143e4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80143e8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80143ec:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80143f0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80143f4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80143f8:	b133      	cbz	r3, 8014408 <_ZN8touchgfx3HAL4tickEv+0x40>
 80143fa:	6823      	ldr	r3, [r4, #0]
 80143fc:	4620      	mov	r0, r4
 80143fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014402:	4798      	blx	r3
 8014404:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8014408:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801440c:	2601      	movs	r6, #1
 801440e:	6862      	ldr	r2, [r4, #4]
 8014410:	f083 0301 	eor.w	r3, r3, #1
 8014414:	702e      	strb	r6, [r5, #0]
 8014416:	7253      	strb	r3, [r2, #9]
 8014418:	f002 ff1a 	bl	8017250 <_ZN8touchgfx11Application11getInstanceEv>
 801441c:	6803      	ldr	r3, [r0, #0]
 801441e:	4631      	mov	r1, r6
 8014420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014422:	4798      	blx	r3
 8014424:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014428:	b90b      	cbnz	r3, 801442e <_ZN8touchgfx3HAL4tickEv+0x66>
 801442a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801442e:	f002 ff0f 	bl	8017250 <_ZN8touchgfx11Application11getInstanceEv>
 8014432:	6803      	ldr	r3, [r0, #0]
 8014434:	695b      	ldr	r3, [r3, #20]
 8014436:	4798      	blx	r3
 8014438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801443a:	6803      	ldr	r3, [r0, #0]
 801443c:	691b      	ldr	r3, [r3, #16]
 801443e:	4798      	blx	r3
 8014440:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014444:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8014448:	3b01      	subs	r3, #1
 801444a:	b2db      	uxtb	r3, r3
 801444c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014450:	b10a      	cbz	r2, 8014456 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8014452:	2b00      	cmp	r3, #0
 8014454:	d1eb      	bne.n	801442e <_ZN8touchgfx3HAL4tickEv+0x66>
 8014456:	4a3b      	ldr	r2, [pc, #236]	; (8014544 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014458:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801445c:	7813      	ldrb	r3, [r2, #0]
 801445e:	3301      	adds	r3, #1
 8014460:	b25b      	sxtb	r3, r3
 8014462:	4299      	cmp	r1, r3
 8014464:	7013      	strb	r3, [r2, #0]
 8014466:	dc10      	bgt.n	801448a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014468:	2300      	movs	r3, #0
 801446a:	68e0      	ldr	r0, [r4, #12]
 801446c:	a902      	add	r1, sp, #8
 801446e:	7013      	strb	r3, [r2, #0]
 8014470:	aa03      	add	r2, sp, #12
 8014472:	6803      	ldr	r3, [r0, #0]
 8014474:	68db      	ldr	r3, [r3, #12]
 8014476:	4798      	blx	r3
 8014478:	6823      	ldr	r3, [r4, #0]
 801447a:	2800      	cmp	r0, #0
 801447c:	d051      	beq.n	8014522 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801447e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014482:	4620      	mov	r0, r4
 8014484:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014488:	4798      	blx	r3
 801448a:	2300      	movs	r3, #0
 801448c:	6960      	ldr	r0, [r4, #20]
 801448e:	f88d 3007 	strb.w	r3, [sp, #7]
 8014492:	b158      	cbz	r0, 80144ac <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014494:	6803      	ldr	r3, [r0, #0]
 8014496:	f10d 0107 	add.w	r1, sp, #7
 801449a:	68db      	ldr	r3, [r3, #12]
 801449c:	4798      	blx	r3
 801449e:	b128      	cbz	r0, 80144ac <_ZN8touchgfx3HAL4tickEv+0xe4>
 80144a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144a2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80144a6:	6803      	ldr	r3, [r0, #0]
 80144a8:	68db      	ldr	r3, [r3, #12]
 80144aa:	4798      	blx	r3
 80144ac:	f104 001c 	add.w	r0, r4, #28
 80144b0:	f011 fb0a 	bl	8025ac8 <_ZN8touchgfx8Gestures4tickEv>
 80144b4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80144b8:	b30b      	cbz	r3, 80144fe <_ZN8touchgfx3HAL4tickEv+0x136>
 80144ba:	6920      	ldr	r0, [r4, #16]
 80144bc:	6803      	ldr	r3, [r0, #0]
 80144be:	691b      	ldr	r3, [r3, #16]
 80144c0:	4798      	blx	r3
 80144c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80144c4:	4606      	mov	r6, r0
 80144c6:	b903      	cbnz	r3, 80144ca <_ZN8touchgfx3HAL4tickEv+0x102>
 80144c8:	6720      	str	r0, [r4, #112]	; 0x70
 80144ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80144cc:	4a1e      	ldr	r2, [pc, #120]	; (8014548 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80144ce:	1af3      	subs	r3, r6, r3
 80144d0:	4293      	cmp	r3, r2
 80144d2:	d914      	bls.n	80144fe <_ZN8touchgfx3HAL4tickEv+0x136>
 80144d4:	6920      	ldr	r0, [r4, #16]
 80144d6:	6803      	ldr	r3, [r0, #0]
 80144d8:	699b      	ldr	r3, [r3, #24]
 80144da:	4798      	blx	r3
 80144dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80144de:	2264      	movs	r2, #100	; 0x64
 80144e0:	1af3      	subs	r3, r6, r3
 80144e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80144e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80144ea:	2800      	cmp	r0, #0
 80144ec:	dc1e      	bgt.n	801452c <_ZN8touchgfx3HAL4tickEv+0x164>
 80144ee:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80144f2:	6920      	ldr	r0, [r4, #16]
 80144f4:	2100      	movs	r1, #0
 80144f6:	6803      	ldr	r3, [r0, #0]
 80144f8:	69db      	ldr	r3, [r3, #28]
 80144fa:	4798      	blx	r3
 80144fc:	6726      	str	r6, [r4, #112]	; 0x70
 80144fe:	f002 fea7 	bl	8017250 <_ZN8touchgfx11Application11getInstanceEv>
 8014502:	6803      	ldr	r3, [r0, #0]
 8014504:	2100      	movs	r1, #0
 8014506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014508:	4798      	blx	r3
 801450a:	6823      	ldr	r3, [r4, #0]
 801450c:	4620      	mov	r0, r4
 801450e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014512:	4798      	blx	r3
 8014514:	2001      	movs	r0, #1
 8014516:	f7ed f995 	bl	8001844 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801451a:	2300      	movs	r3, #0
 801451c:	702b      	strb	r3, [r5, #0]
 801451e:	b004      	add	sp, #16
 8014520:	bd70      	pop	{r4, r5, r6, pc}
 8014522:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014526:	4620      	mov	r0, r4
 8014528:	4798      	blx	r3
 801452a:	e7ae      	b.n	801448a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801452c:	2863      	cmp	r0, #99	; 0x63
 801452e:	bfcb      	itete	gt
 8014530:	2300      	movgt	r3, #0
 8014532:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8014536:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801453a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801453e:	e7d8      	b.n	80144f2 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8014540:	2400aef0 	.word	0x2400aef0
 8014544:	2400aef1 	.word	0x2400aef1
 8014548:	05f5e100 	.word	0x05f5e100

0801454c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801454c:	f7ed bc62 	b.w	8001e14 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014550 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014550:	6581      	str	r1, [r0, #88]	; 0x58
 8014552:	301c      	adds	r0, #28
 8014554:	f011 bab6 	b.w	8025ac4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014558 <_ZN8touchgfx3HAL5touchEll>:
 8014558:	b530      	push	{r4, r5, lr}
 801455a:	b087      	sub	sp, #28
 801455c:	4604      	mov	r4, r0
 801455e:	a804      	add	r0, sp, #16
 8014560:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014564:	f002 fc7a 	bl	8016e5c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014568:	9b04      	ldr	r3, [sp, #16]
 801456a:	a906      	add	r1, sp, #24
 801456c:	a803      	add	r0, sp, #12
 801456e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014572:	9b05      	ldr	r3, [sp, #20]
 8014574:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014578:	f002 fcc2 	bl	8016f00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801457c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8014580:	f104 001c 	add.w	r0, r4, #28
 8014584:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014588:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801458c:	b189      	cbz	r1, 80145b2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801458e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8014592:	9300      	str	r3, [sp, #0]
 8014594:	4613      	mov	r3, r2
 8014596:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801459a:	462a      	mov	r2, r5
 801459c:	f011 faa2 	bl	8025ae4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80145a0:	b128      	cbz	r0, 80145ae <_ZN8touchgfx3HAL5touchEll+0x56>
 80145a2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80145a6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80145a8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80145ac:	6623      	str	r3, [r4, #96]	; 0x60
 80145ae:	b007      	add	sp, #28
 80145b0:	bd30      	pop	{r4, r5, pc}
 80145b2:	f011 fadb 	bl	8025b6c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80145b6:	2301      	movs	r3, #1
 80145b8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80145bc:	e7f1      	b.n	80145a2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080145be <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80145be:	b510      	push	{r4, lr}
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d046      	beq.n	8014652 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80145c4:	ea81 0002 	eor.w	r0, r1, r2
 80145c8:	07c4      	lsls	r4, r0, #31
 80145ca:	d508      	bpl.n	80145de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80145cc:	440b      	add	r3, r1
 80145ce:	3a01      	subs	r2, #1
 80145d0:	428b      	cmp	r3, r1
 80145d2:	d93e      	bls.n	8014652 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80145d4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80145d8:	f801 0b01 	strb.w	r0, [r1], #1
 80145dc:	e7f8      	b.n	80145d0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80145de:	07d0      	lsls	r0, r2, #31
 80145e0:	bf42      	ittt	mi
 80145e2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80145e6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80145ea:	f801 0b01 	strbmi.w	r0, [r1], #1
 80145ee:	2b01      	cmp	r3, #1
 80145f0:	d911      	bls.n	8014616 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80145f2:	ea81 0402 	eor.w	r4, r1, r2
 80145f6:	4610      	mov	r0, r2
 80145f8:	07a4      	lsls	r4, r4, #30
 80145fa:	d022      	beq.n	8014642 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80145fc:	f023 0401 	bic.w	r4, r3, #1
 8014600:	440c      	add	r4, r1
 8014602:	428c      	cmp	r4, r1
 8014604:	4602      	mov	r2, r0
 8014606:	d904      	bls.n	8014612 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8014608:	8812      	ldrh	r2, [r2, #0]
 801460a:	3002      	adds	r0, #2
 801460c:	f821 2b02 	strh.w	r2, [r1], #2
 8014610:	e7f7      	b.n	8014602 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014612:	f003 0301 	and.w	r3, r3, #1
 8014616:	f023 0003 	bic.w	r0, r3, #3
 801461a:	4408      	add	r0, r1
 801461c:	4288      	cmp	r0, r1
 801461e:	4614      	mov	r4, r2
 8014620:	d904      	bls.n	801462c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014622:	6824      	ldr	r4, [r4, #0]
 8014624:	3204      	adds	r2, #4
 8014626:	f841 4b04 	str.w	r4, [r1], #4
 801462a:	e7f7      	b.n	801461c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801462c:	f003 0303 	and.w	r3, r3, #3
 8014630:	3a01      	subs	r2, #1
 8014632:	440b      	add	r3, r1
 8014634:	428b      	cmp	r3, r1
 8014636:	d90c      	bls.n	8014652 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014638:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801463c:	f801 0b01 	strb.w	r0, [r1], #1
 8014640:	e7f8      	b.n	8014634 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014642:	0790      	lsls	r0, r2, #30
 8014644:	d0e7      	beq.n	8014616 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014646:	f832 0b02 	ldrh.w	r0, [r2], #2
 801464a:	3b02      	subs	r3, #2
 801464c:	f821 0b02 	strh.w	r0, [r1], #2
 8014650:	e7e1      	b.n	8014616 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014652:	2001      	movs	r0, #1
 8014654:	bd10      	pop	{r4, pc}

08014656 <_ZN8touchgfx3HAL7noTouchEv>:
 8014656:	b510      	push	{r4, lr}
 8014658:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801465c:	4604      	mov	r4, r0
 801465e:	b153      	cbz	r3, 8014676 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014660:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8014664:	2101      	movs	r1, #1
 8014666:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801466a:	301c      	adds	r0, #28
 801466c:	f011 fa7e 	bl	8025b6c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014670:	2300      	movs	r3, #0
 8014672:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014676:	bd10      	pop	{r4, pc}

08014678 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801467c:	4604      	mov	r4, r0
 801467e:	6980      	ldr	r0, [r0, #24]
 8014680:	b085      	sub	sp, #20
 8014682:	460f      	mov	r7, r1
 8014684:	4690      	mov	r8, r2
 8014686:	4699      	mov	r9, r3
 8014688:	b930      	cbnz	r0, 8014698 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801468a:	4b1c      	ldr	r3, [pc, #112]	; (80146fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 801468c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8014690:	4a1b      	ldr	r2, [pc, #108]	; (8014700 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8014692:	481c      	ldr	r0, [pc, #112]	; (8014704 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8014694:	f011 fb00 	bl	8025c98 <__assert_func>
 8014698:	ad04      	add	r5, sp, #16
 801469a:	2600      	movs	r6, #0
 801469c:	f845 6d04 	str.w	r6, [r5, #-4]!
 80146a0:	6806      	ldr	r6, [r0, #0]
 80146a2:	9501      	str	r5, [sp, #4]
 80146a4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80146a8:	9500      	str	r5, [sp, #0]
 80146aa:	6835      	ldr	r5, [r6, #0]
 80146ac:	47a8      	blx	r5
 80146ae:	4d16      	ldr	r5, [pc, #88]	; (8014708 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80146b0:	4606      	mov	r6, r0
 80146b2:	f8a5 9000 	strh.w	r9, [r5]
 80146b6:	f7ef fb15 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 80146ba:	6803      	ldr	r3, [r0, #0]
 80146bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146be:	4798      	blx	r3
 80146c0:	2801      	cmp	r0, #1
 80146c2:	d012      	beq.n	80146ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 80146c4:	d306      	bcc.n	80146d4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 80146c6:	280d      	cmp	r0, #13
 80146c8:	d80b      	bhi.n	80146e2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80146ca:	4b10      	ldr	r3, [pc, #64]	; (801470c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80146cc:	f240 1167 	movw	r1, #359	; 0x167
 80146d0:	4a0b      	ldr	r2, [pc, #44]	; (8014700 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80146d2:	e7de      	b.n	8014692 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80146d4:	882b      	ldrh	r3, [r5, #0]
 80146d6:	fb08 7203 	mla	r2, r8, r3, r7
 80146da:	9b03      	ldr	r3, [sp, #12]
 80146dc:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80146e0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80146e2:	4630      	mov	r0, r6
 80146e4:	b005      	add	sp, #20
 80146e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146ea:	882a      	ldrh	r2, [r5, #0]
 80146ec:	9b03      	ldr	r3, [sp, #12]
 80146ee:	fb08 7202 	mla	r2, r8, r2, r7
 80146f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80146f6:	1a9a      	subs	r2, r3, r2
 80146f8:	63e2      	str	r2, [r4, #60]	; 0x3c
 80146fa:	e7f2      	b.n	80146e2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80146fc:	080287dd 	.word	0x080287dd
 8014700:	08028b6b 	.word	0x08028b6b
 8014704:	08028822 	.word	0x08028822
 8014708:	2400aee6 	.word	0x2400aee6
 801470c:	08028848 	.word	0x08028848

08014710 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8014710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014712:	b08b      	sub	sp, #44	; 0x2c
 8014714:	4617      	mov	r7, r2
 8014716:	4604      	mov	r4, r0
 8014718:	460e      	mov	r6, r1
 801471a:	461d      	mov	r5, r3
 801471c:	f7ef fae2 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 8014720:	6803      	ldr	r3, [r0, #0]
 8014722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014724:	4798      	blx	r3
 8014726:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801472a:	9007      	str	r0, [sp, #28]
 801472c:	4631      	mov	r1, r6
 801472e:	6822      	ldr	r2, [r4, #0]
 8014730:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014734:	4b0c      	ldr	r3, [pc, #48]	; (8014768 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8014736:	4620      	mov	r0, r4
 8014738:	881b      	ldrh	r3, [r3, #0]
 801473a:	9306      	str	r3, [sp, #24]
 801473c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014740:	9305      	str	r3, [sp, #20]
 8014742:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014746:	9304      	str	r3, [sp, #16]
 8014748:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801474c:	9303      	str	r3, [sp, #12]
 801474e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014752:	9302      	str	r3, [sp, #8]
 8014754:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014758:	e9cd 5300 	strd	r5, r3, [sp]
 801475c:	463b      	mov	r3, r7
 801475e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8014760:	2200      	movs	r2, #0
 8014762:	47a8      	blx	r5
 8014764:	b00b      	add	sp, #44	; 0x2c
 8014766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014768:	2400aee6 	.word	0x2400aee6

0801476c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801476c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014770:	4698      	mov	r8, r3
 8014772:	6803      	ldr	r3, [r0, #0]
 8014774:	b08b      	sub	sp, #44	; 0x2c
 8014776:	4617      	mov	r7, r2
 8014778:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801477a:	460e      	mov	r6, r1
 801477c:	4b13      	ldr	r3, [pc, #76]	; (80147cc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801477e:	4604      	mov	r4, r0
 8014780:	f8b3 9000 	ldrh.w	r9, [r3]
 8014784:	f7ef faae 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 8014788:	6803      	ldr	r3, [r0, #0]
 801478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801478c:	4798      	blx	r3
 801478e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014792:	2200      	movs	r2, #0
 8014794:	4631      	mov	r1, r6
 8014796:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801479a:	2302      	movs	r3, #2
 801479c:	4620      	mov	r0, r4
 801479e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80147a2:	2301      	movs	r3, #1
 80147a4:	9305      	str	r3, [sp, #20]
 80147a6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80147aa:	9304      	str	r3, [sp, #16]
 80147ac:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80147b0:	9303      	str	r3, [sp, #12]
 80147b2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80147b6:	9302      	str	r3, [sp, #8]
 80147b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80147bc:	e9cd 8300 	strd	r8, r3, [sp]
 80147c0:	463b      	mov	r3, r7
 80147c2:	47a8      	blx	r5
 80147c4:	b00b      	add	sp, #44	; 0x2c
 80147c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147ca:	bf00      	nop
 80147cc:	2400aee6 	.word	0x2400aee6

080147d0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80147d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147d4:	4698      	mov	r8, r3
 80147d6:	6803      	ldr	r3, [r0, #0]
 80147d8:	b087      	sub	sp, #28
 80147da:	460e      	mov	r6, r1
 80147dc:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80147de:	4617      	mov	r7, r2
 80147e0:	4b0f      	ldr	r3, [pc, #60]	; (8014820 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80147e2:	4604      	mov	r4, r0
 80147e4:	f8b3 9000 	ldrh.w	r9, [r3]
 80147e8:	f7ef fa7c 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 80147ec:	6803      	ldr	r3, [r0, #0]
 80147ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147f0:	4798      	blx	r3
 80147f2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80147f6:	463a      	mov	r2, r7
 80147f8:	4631      	mov	r1, r6
 80147fa:	f8cd 900c 	str.w	r9, [sp, #12]
 80147fe:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8014802:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8014806:	4620      	mov	r0, r4
 8014808:	9302      	str	r3, [sp, #8]
 801480a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801480e:	9301      	str	r3, [sp, #4]
 8014810:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014814:	9300      	str	r3, [sp, #0]
 8014816:	4643      	mov	r3, r8
 8014818:	47a8      	blx	r5
 801481a:	b007      	add	sp, #28
 801481c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014820:	2400aee6 	.word	0x2400aee6

08014824 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014828:	4604      	mov	r4, r0
 801482a:	b08f      	sub	sp, #60	; 0x3c
 801482c:	4610      	mov	r0, r2
 801482e:	460d      	mov	r5, r1
 8014830:	4691      	mov	r9, r2
 8014832:	461e      	mov	r6, r3
 8014834:	f005 f904 	bl	8019a40 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014838:	2800      	cmp	r0, #0
 801483a:	f000 809c 	beq.w	8014976 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 801483e:	6823      	ldr	r3, [r4, #0]
 8014840:	4620      	mov	r0, r4
 8014842:	f8df b194 	ldr.w	fp, [pc, #404]	; 80149d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8014846:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801484c:	4798      	blx	r3
 801484e:	6823      	ldr	r3, [r4, #0]
 8014850:	4620      	mov	r0, r4
 8014852:	f8df a188 	ldr.w	sl, [pc, #392]	; 80149dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014858:	4798      	blx	r3
 801485a:	f8bb 3000 	ldrh.w	r3, [fp]
 801485e:	4f5b      	ldr	r7, [pc, #364]	; (80149cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8014860:	9301      	str	r3, [sp, #4]
 8014862:	f8ba 3000 	ldrh.w	r3, [sl]
 8014866:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801486a:	4640      	mov	r0, r8
 801486c:	9302      	str	r3, [sp, #8]
 801486e:	883b      	ldrh	r3, [r7, #0]
 8014870:	9303      	str	r3, [sp, #12]
 8014872:	4b57      	ldr	r3, [pc, #348]	; (80149d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014874:	881a      	ldrh	r2, [r3, #0]
 8014876:	9305      	str	r3, [sp, #20]
 8014878:	9204      	str	r2, [sp, #16]
 801487a:	f005 f99b 	bl	8019bb4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801487e:	8038      	strh	r0, [r7, #0]
 8014880:	4640      	mov	r0, r8
 8014882:	f005 f9d1 	bl	8019c28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014886:	9b05      	ldr	r3, [sp, #20]
 8014888:	8018      	strh	r0, [r3, #0]
 801488a:	4b52      	ldr	r3, [pc, #328]	; (80149d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801488c:	781b      	ldrb	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d174      	bne.n	801497c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8014892:	883b      	ldrh	r3, [r7, #0]
 8014894:	f8aa 0000 	strh.w	r0, [sl]
 8014898:	f8ab 3000 	strh.w	r3, [fp]
 801489c:	4648      	mov	r0, r9
 801489e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80148a2:	f005 f8cd 	bl	8019a40 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80148a6:	2200      	movs	r2, #0
 80148a8:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80148ac:	4611      	mov	r1, r2
 80148ae:	4628      	mov	r0, r5
 80148b0:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80148b4:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80148b8:	f7ef fef6 	bl	80046a8 <_ZN8touchgfx8Drawable5setXYEss>
 80148bc:	2301      	movs	r3, #1
 80148be:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80148c2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80148c6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	dd5c      	ble.n	8014988 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 80148ce:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	dd58      	ble.n	8014988 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 80148d6:	462a      	mov	r2, r5
 80148d8:	ab0a      	add	r3, sp, #40	; 0x28
 80148da:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80148de:	6851      	ldr	r1, [r2, #4]
 80148e0:	c303      	stmia	r3!, {r0, r1}
 80148e2:	4631      	mov	r1, r6
 80148e4:	a80a      	add	r0, sp, #40	; 0x28
 80148e6:	f7fe fd9d 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 80148ea:	4b38      	ldr	r3, [pc, #224]	; (80149cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80148ec:	2100      	movs	r1, #0
 80148ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80148f2:	4b37      	ldr	r3, [pc, #220]	; (80149d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80148f4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80148f8:	aa0a      	add	r2, sp, #40	; 0x28
 80148fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148fe:	910c      	str	r1, [sp, #48]	; 0x30
 8014900:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014904:	ab08      	add	r3, sp, #32
 8014906:	e892 0003 	ldmia.w	r2, {r0, r1}
 801490a:	e883 0003 	stmia.w	r3, {r0, r1}
 801490e:	4618      	mov	r0, r3
 8014910:	a90c      	add	r1, sp, #48	; 0x30
 8014912:	f7fe fd87 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 8014916:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014918:	2b00      	cmp	r3, #0
 801491a:	d13c      	bne.n	8014996 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 801491c:	2000      	movs	r0, #0
 801491e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8014922:	2600      	movs	r6, #0
 8014924:	696b      	ldr	r3, [r5, #20]
 8014926:	a908      	add	r1, sp, #32
 8014928:	682a      	ldr	r2, [r5, #0]
 801492a:	4628      	mov	r0, r5
 801492c:	9305      	str	r3, [sp, #20]
 801492e:	616e      	str	r6, [r5, #20]
 8014930:	6892      	ldr	r2, [r2, #8]
 8014932:	4790      	blx	r2
 8014934:	9b05      	ldr	r3, [sp, #20]
 8014936:	4652      	mov	r2, sl
 8014938:	4649      	mov	r1, r9
 801493a:	616b      	str	r3, [r5, #20]
 801493c:	4628      	mov	r0, r5
 801493e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8014942:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014946:	f7ef feaf 	bl	80046a8 <_ZN8touchgfx8Drawable5setXYEss>
 801494a:	9a01      	ldr	r2, [sp, #4]
 801494c:	4b22      	ldr	r3, [pc, #136]	; (80149d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801494e:	4620      	mov	r0, r4
 8014950:	801a      	strh	r2, [r3, #0]
 8014952:	9a02      	ldr	r2, [sp, #8]
 8014954:	4b21      	ldr	r3, [pc, #132]	; (80149dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014956:	801a      	strh	r2, [r3, #0]
 8014958:	9a03      	ldr	r2, [sp, #12]
 801495a:	4b1c      	ldr	r3, [pc, #112]	; (80149cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801495c:	801a      	strh	r2, [r3, #0]
 801495e:	4b1c      	ldr	r3, [pc, #112]	; (80149d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014960:	9a04      	ldr	r2, [sp, #16]
 8014962:	801a      	strh	r2, [r3, #0]
 8014964:	6823      	ldr	r3, [r4, #0]
 8014966:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801496c:	4798      	blx	r3
 801496e:	6823      	ldr	r3, [r4, #0]
 8014970:	4620      	mov	r0, r4
 8014972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014974:	4798      	blx	r3
 8014976:	b00f      	add	sp, #60	; 0x3c
 8014978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801497c:	883b      	ldrh	r3, [r7, #0]
 801497e:	f8ab 0000 	strh.w	r0, [fp]
 8014982:	f8aa 3000 	strh.w	r3, [sl]
 8014986:	e789      	b.n	801489c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8014988:	462a      	mov	r2, r5
 801498a:	ab0a      	add	r3, sp, #40	; 0x28
 801498c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014990:	6851      	ldr	r1, [r2, #4]
 8014992:	c303      	stmia	r3!, {r0, r1}
 8014994:	e7a9      	b.n	80148ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8014996:	a807      	add	r0, sp, #28
 8014998:	f005 fa9e 	bl	8019ed8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801499c:	4606      	mov	r6, r0
 801499e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80149a0:	6803      	ldr	r3, [r0, #0]
 80149a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149a4:	4798      	blx	r3
 80149a6:	4286      	cmp	r6, r0
 80149a8:	d1b8      	bne.n	801491c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 80149aa:	f7ef f99b 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 80149ae:	6803      	ldr	r3, [r0, #0]
 80149b0:	4606      	mov	r6, r0
 80149b2:	a807      	add	r0, sp, #28
 80149b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149b6:	9305      	str	r3, [sp, #20]
 80149b8:	f005 fa8e 	bl	8019ed8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80149bc:	9b05      	ldr	r3, [sp, #20]
 80149be:	4601      	mov	r1, r0
 80149c0:	4630      	mov	r0, r6
 80149c2:	4798      	blx	r3
 80149c4:	f080 0001 	eor.w	r0, r0, #1
 80149c8:	b2c0      	uxtb	r0, r0
 80149ca:	e7a8      	b.n	801491e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80149cc:	2400aee0 	.word	0x2400aee0
 80149d0:	2400aee2 	.word	0x2400aee2
 80149d4:	2400aee4 	.word	0x2400aee4
 80149d8:	2400aee6 	.word	0x2400aee6
 80149dc:	2400aee8 	.word	0x2400aee8

080149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80149e0:	4b07      	ldr	r3, [pc, #28]	; (8014a00 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80149e2:	b510      	push	{r4, lr}
 80149e4:	781b      	ldrb	r3, [r3, #0]
 80149e6:	4604      	mov	r4, r0
 80149e8:	b13b      	cbz	r3, 80149fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80149ea:	6803      	ldr	r3, [r0, #0]
 80149ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ee:	4798      	blx	r3
 80149f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80149f2:	4283      	cmp	r3, r0
 80149f4:	d101      	bne.n	80149fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80149f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80149f8:	bd10      	pop	{r4, pc}
 80149fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80149fc:	e7fc      	b.n	80149f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80149fe:	bf00      	nop
 8014a00:	2400aeea 	.word	0x2400aeea

08014a04 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8014a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a08:	b088      	sub	sp, #32
 8014a0a:	4692      	mov	sl, r2
 8014a0c:	461d      	mov	r5, r3
 8014a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a12:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8014a16:	2400      	movs	r4, #0
 8014a18:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8014a1c:	4606      	mov	r6, r0
 8014a1e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8014a22:	fb09 a505 	mla	r5, r9, r5, sl
 8014a26:	9403      	str	r4, [sp, #12]
 8014a28:	f8ad 8014 	strh.w	r8, [sp, #20]
 8014a2c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8014a30:	f88d 401c 	strb.w	r4, [sp, #28]
 8014a34:	e9cd 3100 	strd	r3, r1, [sp]
 8014a38:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014a3c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014a40:	f7ff ffce 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014a44:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014a48:	f8ad 901a 	strh.w	r9, [sp, #26]
 8014a4c:	f88d 401e 	strb.w	r4, [sp, #30]
 8014a50:	9504      	str	r5, [sp, #16]
 8014a52:	f88d 401d 	strb.w	r4, [sp, #29]
 8014a56:	f88d 401f 	strb.w	r4, [sp, #31]
 8014a5a:	f1b8 0f00 	cmp.w	r8, #0
 8014a5e:	d000      	beq.n	8014a62 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8014a60:	b937      	cbnz	r7, 8014a70 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8014a62:	4b0d      	ldr	r3, [pc, #52]	; (8014a98 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8014a64:	f240 210b 	movw	r1, #523	; 0x20b
 8014a68:	4a0c      	ldr	r2, [pc, #48]	; (8014a9c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8014a6a:	480d      	ldr	r0, [pc, #52]	; (8014aa0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8014a6c:	f011 f914 	bl	8025c98 <__assert_func>
 8014a70:	6833      	ldr	r3, [r6, #0]
 8014a72:	4630      	mov	r0, r6
 8014a74:	9c00      	ldr	r4, [sp, #0]
 8014a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a78:	4798      	blx	r3
 8014a7a:	4220      	tst	r0, r4
 8014a7c:	d104      	bne.n	8014a88 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8014a7e:	4b09      	ldr	r3, [pc, #36]	; (8014aa4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8014a80:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8014a84:	4a05      	ldr	r2, [pc, #20]	; (8014a9c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8014a86:	e7f0      	b.n	8014a6a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8014a88:	6870      	ldr	r0, [r6, #4]
 8014a8a:	4669      	mov	r1, sp
 8014a8c:	6803      	ldr	r3, [r0, #0]
 8014a8e:	685b      	ldr	r3, [r3, #4]
 8014a90:	4798      	blx	r3
 8014a92:	b008      	add	sp, #32
 8014a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a98:	08028670 	.word	0x08028670
 8014a9c:	080289a0 	.word	0x080289a0
 8014aa0:	08028822 	.word	0x08028822
 8014aa4:	080286a8 	.word	0x080286a8

08014aa8 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aac:	b089      	sub	sp, #36	; 0x24
 8014aae:	4693      	mov	fp, r2
 8014ab0:	461d      	mov	r5, r3
 8014ab2:	2400      	movs	r4, #0
 8014ab4:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8014ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014abc:	468a      	mov	sl, r1
 8014abe:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8014ac2:	fb09 b505 	mla	r5, r9, r5, fp
 8014ac6:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8014aca:	4606      	mov	r6, r0
 8014acc:	9403      	str	r4, [sp, #12]
 8014ace:	e9cd 3400 	strd	r3, r4, [sp]
 8014ad2:	f7ff ff85 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ad6:	f8ad 8014 	strh.w	r8, [sp, #20]
 8014ada:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014ade:	f8ad 7016 	strh.w	r7, [sp, #22]
 8014ae2:	f8ad 4018 	strh.w	r4, [sp, #24]
 8014ae6:	9504      	str	r5, [sp, #16]
 8014ae8:	f8ad 901a 	strh.w	r9, [sp, #26]
 8014aec:	f8cd a00c 	str.w	sl, [sp, #12]
 8014af0:	f8ad 401c 	strh.w	r4, [sp, #28]
 8014af4:	f88d 401e 	strb.w	r4, [sp, #30]
 8014af8:	f88d 401f 	strb.w	r4, [sp, #31]
 8014afc:	f1b8 0f00 	cmp.w	r8, #0
 8014b00:	d000      	beq.n	8014b04 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8014b02:	b937      	cbnz	r7, 8014b12 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8014b04:	4b0d      	ldr	r3, [pc, #52]	; (8014b3c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8014b06:	f240 2121 	movw	r1, #545	; 0x221
 8014b0a:	4a0d      	ldr	r2, [pc, #52]	; (8014b40 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8014b0c:	480d      	ldr	r0, [pc, #52]	; (8014b44 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8014b0e:	f011 f8c3 	bl	8025c98 <__assert_func>
 8014b12:	6833      	ldr	r3, [r6, #0]
 8014b14:	4630      	mov	r0, r6
 8014b16:	9c00      	ldr	r4, [sp, #0]
 8014b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b1a:	4798      	blx	r3
 8014b1c:	4220      	tst	r0, r4
 8014b1e:	d104      	bne.n	8014b2a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8014b20:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8014b22:	f240 2122 	movw	r1, #546	; 0x222
 8014b26:	4a06      	ldr	r2, [pc, #24]	; (8014b40 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8014b28:	e7f0      	b.n	8014b0c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8014b2a:	6870      	ldr	r0, [r6, #4]
 8014b2c:	4669      	mov	r1, sp
 8014b2e:	6803      	ldr	r3, [r0, #0]
 8014b30:	685b      	ldr	r3, [r3, #4]
 8014b32:	4798      	blx	r3
 8014b34:	b009      	add	sp, #36	; 0x24
 8014b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b3a:	bf00      	nop
 8014b3c:	080286ed 	.word	0x080286ed
 8014b40:	08028a16 	.word	0x08028a16
 8014b44:	08028822 	.word	0x08028822
 8014b48:	08028725 	.word	0x08028725

08014b4c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8014b4c:	b508      	push	{r3, lr}
 8014b4e:	290d      	cmp	r1, #13
 8014b50:	d817      	bhi.n	8014b82 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8014b52:	e8df f001 	tbb	[pc, r1]
 8014b56:	090b      	.short	0x090b
 8014b58:	0d0d0d07 	.word	0x0d0d0d07
 8014b5c:	1414140d 	.word	0x1414140d
 8014b60:	0d0d1414 	.word	0x0d0d1414
 8014b64:	2020      	movs	r0, #32
 8014b66:	bd08      	pop	{r3, pc}
 8014b68:	2018      	movs	r0, #24
 8014b6a:	e7fc      	b.n	8014b66 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b6c:	2010      	movs	r0, #16
 8014b6e:	e7fa      	b.n	8014b66 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b70:	4b05      	ldr	r3, [pc, #20]	; (8014b88 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8014b72:	f240 2182 	movw	r1, #642	; 0x282
 8014b76:	4a05      	ldr	r2, [pc, #20]	; (8014b8c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8014b78:	4805      	ldr	r0, [pc, #20]	; (8014b90 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8014b7a:	f011 f88d 	bl	8025c98 <__assert_func>
 8014b7e:	2008      	movs	r0, #8
 8014b80:	e7f1      	b.n	8014b66 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b82:	2000      	movs	r0, #0
 8014b84:	e7ef      	b.n	8014b66 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b86:	bf00      	nop
 8014b88:	0802889e 	.word	0x0802889e
 8014b8c:	08028d41 	.word	0x08028d41
 8014b90:	08028822 	.word	0x08028822

08014b94 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8014b94:	b570      	push	{r4, r5, r6, lr}
 8014b96:	460d      	mov	r5, r1
 8014b98:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8014b9c:	4616      	mov	r6, r2
 8014b9e:	461c      	mov	r4, r3
 8014ba0:	f7ff ffd4 	bl	8014b4c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8014ba4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014ba8:	10c0      	asrs	r0, r0, #3
 8014baa:	fb06 5101 	mla	r1, r6, r1, r5
 8014bae:	fb00 4001 	mla	r0, r0, r1, r4
 8014bb2:	bd70      	pop	{r4, r5, r6, pc}

08014bb4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8014bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bb8:	b08a      	sub	sp, #40	; 0x28
 8014bba:	f04f 0c00 	mov.w	ip, #0
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	469a      	mov	sl, r3
 8014bc2:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8014bc6:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8014bca:	2d0b      	cmp	r5, #11
 8014bcc:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8014bd0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014bd4:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8014bd8:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8014bdc:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8014be0:	f8cd c014 	str.w	ip, [sp, #20]
 8014be4:	d12d      	bne.n	8014c42 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8014be6:	2080      	movs	r0, #128	; 0x80
 8014be8:	9204      	str	r2, [sp, #16]
 8014bea:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8014bee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014bf2:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014bf6:	f8ad 701c 	strh.w	r7, [sp, #28]
 8014bfa:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014bfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c02:	4620      	mov	r0, r4
 8014c04:	f7ff feec 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014c08:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	4651      	mov	r1, sl
 8014c10:	4620      	mov	r0, r4
 8014c12:	e9cd 9800 	strd	r9, r8, [sp]
 8014c16:	f7ff ffbd 	bl	8014b94 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014c1a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8014c1e:	9006      	str	r0, [sp, #24]
 8014c20:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8014c24:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8014c28:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8014c2c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8014c30:	b107      	cbz	r7, 8014c34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8014c32:	b9d6      	cbnz	r6, 8014c6a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8014c34:	4b17      	ldr	r3, [pc, #92]	; (8014c94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8014c36:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8014c3a:	4a17      	ldr	r2, [pc, #92]	; (8014c98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8014c3c:	4817      	ldr	r0, [pc, #92]	; (8014c9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8014c3e:	f011 f82b 	bl	8025c98 <__assert_func>
 8014c42:	2d02      	cmp	r5, #2
 8014c44:	d108      	bne.n	8014c58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8014c46:	2bff      	cmp	r3, #255	; 0xff
 8014c48:	d104      	bne.n	8014c54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 8014c4a:	2800      	cmp	r0, #0
 8014c4c:	bf14      	ite	ne
 8014c4e:	2040      	movne	r0, #64	; 0x40
 8014c50:	2020      	moveq	r0, #32
 8014c52:	e7c9      	b.n	8014be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014c54:	2040      	movs	r0, #64	; 0x40
 8014c56:	e7c7      	b.n	8014be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014c58:	2bff      	cmp	r3, #255	; 0xff
 8014c5a:	d104      	bne.n	8014c66 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8014c5c:	2800      	cmp	r0, #0
 8014c5e:	bf14      	ite	ne
 8014c60:	2004      	movne	r0, #4
 8014c62:	2001      	moveq	r0, #1
 8014c64:	e7c0      	b.n	8014be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014c66:	2004      	movs	r0, #4
 8014c68:	e7be      	b.n	8014be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014c6a:	6823      	ldr	r3, [r4, #0]
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	9d02      	ldr	r5, [sp, #8]
 8014c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c72:	4798      	blx	r3
 8014c74:	4228      	tst	r0, r5
 8014c76:	d104      	bne.n	8014c82 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8014c78:	4b09      	ldr	r3, [pc, #36]	; (8014ca0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8014c7a:	f240 11d5 	movw	r1, #469	; 0x1d5
 8014c7e:	4a06      	ldr	r2, [pc, #24]	; (8014c98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8014c80:	e7dc      	b.n	8014c3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8014c82:	6860      	ldr	r0, [r4, #4]
 8014c84:	a902      	add	r1, sp, #8
 8014c86:	6803      	ldr	r3, [r0, #0]
 8014c88:	685b      	ldr	r3, [r3, #4]
 8014c8a:	4798      	blx	r3
 8014c8c:	b00a      	add	sp, #40	; 0x28
 8014c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c92:	bf00      	nop
 8014c94:	08028670 	.word	0x08028670
 8014c98:	08028bcf 	.word	0x08028bcf
 8014c9c:	08028822 	.word	0x08028822
 8014ca0:	080286a8 	.word	0x080286a8

08014ca4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8014ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca8:	b08b      	sub	sp, #44	; 0x2c
 8014caa:	469b      	mov	fp, r3
 8014cac:	4604      	mov	r4, r0
 8014cae:	4692      	mov	sl, r2
 8014cb0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8014cb4:	2600      	movs	r6, #0
 8014cb6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8014cba:	4689      	mov	r9, r1
 8014cbc:	2fff      	cmp	r7, #255	; 0xff
 8014cbe:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8014cc2:	9605      	str	r6, [sp, #20]
 8014cc4:	bf14      	ite	ne
 8014cc6:	2308      	movne	r3, #8
 8014cc8:	2302      	moveq	r3, #2
 8014cca:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8014cce:	f7ff fe87 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014cd2:	465a      	mov	r2, fp
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	4651      	mov	r1, sl
 8014cd8:	4620      	mov	r0, r4
 8014cda:	e9cd 8500 	strd	r8, r5, [sp]
 8014cde:	f7ff ff59 	bl	8014b94 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014ce2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014ce6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8014cea:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014cee:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014cf2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8014cf6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014cfa:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8014cfe:	9d02      	ldr	r5, [sp, #8]
 8014d00:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8014d04:	6823      	ldr	r3, [r4, #0]
 8014d06:	9006      	str	r0, [sp, #24]
 8014d08:	4620      	mov	r0, r4
 8014d0a:	f8ad 6020 	strh.w	r6, [sp, #32]
 8014d0e:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8014d12:	f8cd 9014 	str.w	r9, [sp, #20]
 8014d16:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8014d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d1c:	4798      	blx	r3
 8014d1e:	4228      	tst	r0, r5
 8014d20:	d106      	bne.n	8014d30 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8014d22:	4b07      	ldr	r3, [pc, #28]	; (8014d40 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8014d24:	f240 2137 	movw	r1, #567	; 0x237
 8014d28:	4a06      	ldr	r2, [pc, #24]	; (8014d44 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8014d2a:	4807      	ldr	r0, [pc, #28]	; (8014d48 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8014d2c:	f010 ffb4 	bl	8025c98 <__assert_func>
 8014d30:	6860      	ldr	r0, [r4, #4]
 8014d32:	a902      	add	r1, sp, #8
 8014d34:	6803      	ldr	r3, [r0, #0]
 8014d36:	685b      	ldr	r3, [r3, #4]
 8014d38:	4798      	blx	r3
 8014d3a:	b00b      	add	sp, #44	; 0x2c
 8014d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d40:	080286a8 	.word	0x080286a8
 8014d44:	08028ca6 	.word	0x08028ca6
 8014d48:	08028822 	.word	0x08028822

08014d4c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014d4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014d50:	461f      	mov	r7, r3
 8014d52:	4b0b      	ldr	r3, [pc, #44]	; (8014d80 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014d54:	460d      	mov	r5, r1
 8014d56:	4616      	mov	r6, r2
 8014d58:	f8b3 8000 	ldrh.w	r8, [r3]
 8014d5c:	4604      	mov	r4, r0
 8014d5e:	f7ee ffc1 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 8014d62:	6803      	ldr	r3, [r0, #0]
 8014d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d66:	4798      	blx	r3
 8014d68:	463b      	mov	r3, r7
 8014d6a:	4632      	mov	r2, r6
 8014d6c:	4629      	mov	r1, r5
 8014d6e:	e9cd 8000 	strd	r8, r0, [sp]
 8014d72:	4620      	mov	r0, r4
 8014d74:	f7ff ff0e 	bl	8014b94 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014d78:	b002      	add	sp, #8
 8014d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d7e:	bf00      	nop
 8014d80:	2400aee6 	.word	0x2400aee6

08014d84 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d88:	4698      	mov	r8, r3
 8014d8a:	b088      	sub	sp, #32
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	4617      	mov	r7, r2
 8014d90:	4604      	mov	r4, r0
 8014d92:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8014d96:	9303      	str	r3, [sp, #12]
 8014d98:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014d9c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014da0:	f8ad 6014 	strh.w	r6, [sp, #20]
 8014da4:	f8ad 5016 	strh.w	r5, [sp, #22]
 8014da8:	e9cd 3100 	strd	r3, r1, [sp]
 8014dac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014db0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014db4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8014db8:	f88d 301c 	strb.w	r3, [sp, #28]
 8014dbc:	f7ff fe10 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014dc0:	4642      	mov	r2, r8
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	4639      	mov	r1, r7
 8014dc6:	4620      	mov	r0, r4
 8014dc8:	f7ff ffc0 	bl	8014d4c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014dcc:	4b18      	ldr	r3, [pc, #96]	; (8014e30 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8014dce:	9004      	str	r0, [sp, #16]
 8014dd0:	881b      	ldrh	r3, [r3, #0]
 8014dd2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014dd6:	f7ee ff85 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 8014dda:	6803      	ldr	r3, [r0, #0]
 8014ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dde:	4798      	blx	r3
 8014de0:	f88d 001e 	strb.w	r0, [sp, #30]
 8014de4:	f88d 001d 	strb.w	r0, [sp, #29]
 8014de8:	b106      	cbz	r6, 8014dec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8014dea:	b935      	cbnz	r5, 8014dfa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8014dec:	4b11      	ldr	r3, [pc, #68]	; (8014e34 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8014dee:	f240 11f1 	movw	r1, #497	; 0x1f1
 8014df2:	4a11      	ldr	r2, [pc, #68]	; (8014e38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8014df4:	4811      	ldr	r0, [pc, #68]	; (8014e3c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8014df6:	f010 ff4f 	bl	8025c98 <__assert_func>
 8014dfa:	6823      	ldr	r3, [r4, #0]
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	9d00      	ldr	r5, [sp, #0]
 8014e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e02:	4798      	blx	r3
 8014e04:	4228      	tst	r0, r5
 8014e06:	d104      	bne.n	8014e12 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8014e08:	4b0d      	ldr	r3, [pc, #52]	; (8014e40 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8014e0a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8014e0e:	4a0a      	ldr	r2, [pc, #40]	; (8014e38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8014e10:	e7f0      	b.n	8014df4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8014e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e14:	4669      	mov	r1, sp
 8014e16:	6860      	ldr	r0, [r4, #4]
 8014e18:	9303      	str	r3, [sp, #12]
 8014e1a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014e1e:	f88d 301f 	strb.w	r3, [sp, #31]
 8014e22:	6803      	ldr	r3, [r0, #0]
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	4798      	blx	r3
 8014e28:	b008      	add	sp, #32
 8014e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e2e:	bf00      	nop
 8014e30:	2400aee6 	.word	0x2400aee6
 8014e34:	08028670 	.word	0x08028670
 8014e38:	08028a7b 	.word	0x08028a7b
 8014e3c:	08028822 	.word	0x08028822
 8014e40:	080286a8 	.word	0x080286a8

08014e44 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e46:	b08b      	sub	sp, #44	; 0x2c
 8014e48:	4604      	mov	r4, r0
 8014e4a:	466b      	mov	r3, sp
 8014e4c:	e883 0006 	stmia.w	r3, {r1, r2}
 8014e50:	4b20      	ldr	r3, [pc, #128]	; (8014ed4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	b933      	cbnz	r3, 8014e64 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8014e56:	4b20      	ldr	r3, [pc, #128]	; (8014ed8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8014e58:	f44f 7112 	mov.w	r1, #584	; 0x248
 8014e5c:	4a1f      	ldr	r2, [pc, #124]	; (8014edc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8014e5e:	4820      	ldr	r0, [pc, #128]	; (8014ee0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8014e60:	f010 ff1a 	bl	8025c98 <__assert_func>
 8014e64:	2301      	movs	r3, #1
 8014e66:	2500      	movs	r5, #0
 8014e68:	f8bd 6000 	ldrh.w	r6, [sp]
 8014e6c:	9302      	str	r3, [sp, #8]
 8014e6e:	6803      	ldr	r3, [r0, #0]
 8014e70:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014e74:	9505      	str	r5, [sp, #20]
 8014e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e78:	4798      	blx	r3
 8014e7a:	463a      	mov	r2, r7
 8014e7c:	4631      	mov	r1, r6
 8014e7e:	4603      	mov	r3, r0
 8014e80:	4620      	mov	r0, r4
 8014e82:	f7ff ff63 	bl	8014d4c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014e86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014e88:	9003      	str	r0, [sp, #12]
 8014e8a:	9306      	str	r3, [sp, #24]
 8014e8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014e90:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014e94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014e98:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014e9c:	4b11      	ldr	r3, [pc, #68]	; (8014ee4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8014e9e:	881b      	ldrh	r3, [r3, #0]
 8014ea0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014ea4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014ea8:	f7ee ff1c 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 8014eac:	6803      	ldr	r3, [r0, #0]
 8014eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eb0:	4798      	blx	r3
 8014eb2:	23ff      	movs	r3, #255	; 0xff
 8014eb4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8014eb8:	a902      	add	r1, sp, #8
 8014eba:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014ebe:	6860      	ldr	r0, [r4, #4]
 8014ec0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014ec4:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 8014ec8:	6803      	ldr	r3, [r0, #0]
 8014eca:	685b      	ldr	r3, [r3, #4]
 8014ecc:	4798      	blx	r3
 8014ece:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014ed0:	b00b      	add	sp, #44	; 0x2c
 8014ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ed4:	2400aeeb 	.word	0x2400aeeb
 8014ed8:	0802876f 	.word	0x0802876f
 8014edc:	08028b25 	.word	0x08028b25
 8014ee0:	08028822 	.word	0x08028822
 8014ee4:	2400aee6 	.word	0x2400aee6

08014ee8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eec:	b08a      	sub	sp, #40	; 0x28
 8014eee:	2600      	movs	r6, #0
 8014ef0:	4604      	mov	r4, r0
 8014ef2:	466d      	mov	r5, sp
 8014ef4:	9605      	str	r6, [sp, #20]
 8014ef6:	e885 0006 	stmia.w	r5, {r1, r2}
 8014efa:	461d      	mov	r5, r3
 8014efc:	2301      	movs	r3, #1
 8014efe:	f8bd 7000 	ldrh.w	r7, [sp]
 8014f02:	9302      	str	r3, [sp, #8]
 8014f04:	6803      	ldr	r3, [r0, #0]
 8014f06:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f0c:	4798      	blx	r3
 8014f0e:	4642      	mov	r2, r8
 8014f10:	4639      	mov	r1, r7
 8014f12:	4603      	mov	r3, r0
 8014f14:	4620      	mov	r0, r4
 8014f16:	f7ff ff19 	bl	8014d4c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014f1a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014f1e:	9003      	str	r0, [sp, #12]
 8014f20:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014f24:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014f28:	9506      	str	r5, [sp, #24]
 8014f2a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014f2e:	4b0f      	ldr	r3, [pc, #60]	; (8014f6c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 8014f30:	881b      	ldrh	r3, [r3, #0]
 8014f32:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014f36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f38:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014f3c:	f7ee fed2 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 8014f40:	6803      	ldr	r3, [r0, #0]
 8014f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f44:	4798      	blx	r3
 8014f46:	23ff      	movs	r3, #255	; 0xff
 8014f48:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8014f4c:	a902      	add	r1, sp, #8
 8014f4e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014f52:	6860      	ldr	r0, [r4, #4]
 8014f54:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014f58:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8014f5c:	6803      	ldr	r3, [r0, #0]
 8014f5e:	685b      	ldr	r3, [r3, #4]
 8014f60:	4798      	blx	r3
 8014f62:	4628      	mov	r0, r5
 8014f64:	b00a      	add	sp, #40	; 0x28
 8014f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f6a:	bf00      	nop
 8014f6c:	2400aee6 	.word	0x2400aee6

08014f70 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014f70:	b570      	push	{r4, r5, r6, lr}
 8014f72:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8014f76:	4604      	mov	r4, r0
 8014f78:	b19b      	cbz	r3, 8014fa2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014f7a:	2002      	movs	r0, #2
 8014f7c:	f7ec fc7e 	bl	800187c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014f80:	2300      	movs	r3, #0
 8014f82:	4620      	mov	r0, r4
 8014f84:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014f88:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8014f8c:	6823      	ldr	r3, [r4, #0]
 8014f8e:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8014f92:	f7ff fd25 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014f96:	4601      	mov	r1, r0
 8014f98:	4620      	mov	r0, r4
 8014f9a:	462b      	mov	r3, r5
 8014f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fa0:	4718      	bx	r3
 8014fa2:	bd70      	pop	{r4, r5, r6, pc}

08014fa4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8014fa4:	b538      	push	{r3, r4, r5, lr}
 8014fa6:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8014faa:	4604      	mov	r4, r0
 8014fac:	460d      	mov	r5, r1
 8014fae:	428a      	cmp	r2, r1
 8014fb0:	d008      	beq.n	8014fc4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8014fb2:	2a01      	cmp	r2, #1
 8014fb4:	6803      	ldr	r3, [r0, #0]
 8014fb6:	d106      	bne.n	8014fc6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8014fb8:	b929      	cbnz	r1, 8014fc6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8014fba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8014fbe:	4798      	blx	r3
 8014fc0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8014fc4:	bd38      	pop	{r3, r4, r5, pc}
 8014fc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8014fca:	4620      	mov	r0, r4
 8014fcc:	e7f7      	b.n	8014fbe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08014fd0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014fd0:	4b0d      	ldr	r3, [pc, #52]	; (8015008 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014fd2:	b510      	push	{r4, lr}
 8014fd4:	781b      	ldrb	r3, [r3, #0]
 8014fd6:	4604      	mov	r4, r0
 8014fd8:	b95b      	cbnz	r3, 8014ff2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014fda:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8014fde:	2b02      	cmp	r3, #2
 8014fe0:	d007      	beq.n	8014ff2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014fe2:	6840      	ldr	r0, [r0, #4]
 8014fe4:	f000 f936 	bl	8015254 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014fe8:	b118      	cbz	r0, 8014ff2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014fea:	6862      	ldr	r2, [r4, #4]
 8014fec:	7a53      	ldrb	r3, [r2, #9]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d0fc      	beq.n	8014fec <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014ff2:	f7ec ff01 	bl	8001df8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014ff6:	4620      	mov	r0, r4
 8014ff8:	2100      	movs	r1, #0
 8014ffa:	f7ff ffd3 	bl	8014fa4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014ffe:	4620      	mov	r0, r4
 8015000:	f7ff fcee 	bl	80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015004:	bd10      	pop	{r4, pc}
 8015006:	bf00      	nop
 8015008:	2400aeea 	.word	0x2400aeea

0801500c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801500c:	4770      	bx	lr

0801500e <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801500e:	2000      	movs	r0, #0
 8015010:	4770      	bx	lr

08015012 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015012:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015016:	1a13      	subs	r3, r2, r0
 8015018:	4258      	negs	r0, r3
 801501a:	4158      	adcs	r0, r3
 801501c:	4770      	bx	lr

0801501e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801501e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015022:	1a9b      	subs	r3, r3, r2
 8015024:	2b00      	cmp	r3, #0
 8015026:	bfdc      	itt	le
 8015028:	6882      	ldrle	r2, [r0, #8]
 801502a:	189b      	addle	r3, r3, r2
 801502c:	2b01      	cmp	r3, #1
 801502e:	bfcc      	ite	gt
 8015030:	2000      	movgt	r0, #0
 8015032:	2001      	movle	r0, #1
 8015034:	4770      	bx	lr

08015036 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015036:	6902      	ldr	r2, [r0, #16]
 8015038:	6840      	ldr	r0, [r0, #4]
 801503a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801503e:	4770      	bx	lr

08015040 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015040:	6803      	ldr	r3, [r0, #0]
 8015042:	691b      	ldr	r3, [r3, #16]
 8015044:	4718      	bx	r3

08015046 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015046:	4770      	bx	lr

08015048 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015048:	4770      	bx	lr
	...

0801504c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801504c:	2301      	movs	r3, #1
 801504e:	b570      	push	{r4, r5, r6, lr}
 8015050:	7203      	strb	r3, [r0, #8]
 8015052:	4604      	mov	r4, r0
 8015054:	6840      	ldr	r0, [r0, #4]
 8015056:	6803      	ldr	r3, [r0, #0]
 8015058:	699b      	ldr	r3, [r3, #24]
 801505a:	4798      	blx	r3
 801505c:	6803      	ldr	r3, [r0, #0]
 801505e:	4605      	mov	r5, r0
 8015060:	2b40      	cmp	r3, #64	; 0x40
 8015062:	d039      	beq.n	80150d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015064:	d815      	bhi.n	8015092 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8015066:	2b04      	cmp	r3, #4
 8015068:	d022      	beq.n	80150b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801506a:	d808      	bhi.n	801507e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801506c:	2b01      	cmp	r3, #1
 801506e:	d033      	beq.n	80150d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015070:	2b02      	cmp	r3, #2
 8015072:	d108      	bne.n	8015086 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8015074:	6823      	ldr	r3, [r4, #0]
 8015076:	4620      	mov	r0, r4
 8015078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801507a:	4798      	blx	r3
 801507c:	e025      	b.n	80150ca <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 801507e:	2b08      	cmp	r3, #8
 8015080:	d01e      	beq.n	80150c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8015082:	2b20      	cmp	r3, #32
 8015084:	d028      	beq.n	80150d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015086:	4b17      	ldr	r3, [pc, #92]	; (80150e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8015088:	218b      	movs	r1, #139	; 0x8b
 801508a:	4a17      	ldr	r2, [pc, #92]	; (80150e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 801508c:	4817      	ldr	r0, [pc, #92]	; (80150ec <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 801508e:	f010 fe03 	bl	8025c98 <__assert_func>
 8015092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015096:	d01f      	beq.n	80150d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015098:	d804      	bhi.n	80150a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801509a:	2b80      	cmp	r3, #128	; 0x80
 801509c:	d01c      	beq.n	80150d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80150a2:	e7ef      	b.n	8015084 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 80150a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80150a8:	d016      	beq.n	80150d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80150aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80150ae:	e7e0      	b.n	8015072 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80150b0:	6823      	ldr	r3, [r4, #0]
 80150b2:	7f01      	ldrb	r1, [r0, #28]
 80150b4:	4620      	mov	r0, r4
 80150b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150b8:	4798      	blx	r3
 80150ba:	6823      	ldr	r3, [r4, #0]
 80150bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150be:	e006      	b.n	80150ce <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80150c0:	6823      	ldr	r3, [r4, #0]
 80150c2:	7f01      	ldrb	r1, [r0, #28]
 80150c4:	4620      	mov	r0, r4
 80150c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150c8:	4798      	blx	r3
 80150ca:	6823      	ldr	r3, [r4, #0]
 80150cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150ce:	4629      	mov	r1, r5
 80150d0:	4620      	mov	r0, r4
 80150d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150d6:	4718      	bx	r3
 80150d8:	6823      	ldr	r3, [r4, #0]
 80150da:	4620      	mov	r0, r4
 80150dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150de:	4798      	blx	r3
 80150e0:	e7eb      	b.n	80150ba <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80150e2:	bf00      	nop
 80150e4:	08028d8a 	.word	0x08028d8a
 80150e8:	08028e9c 	.word	0x08028e9c
 80150ec:	08028daf 	.word	0x08028daf

080150f0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80150f0:	b570      	push	{r4, r5, r6, lr}
 80150f2:	4604      	mov	r4, r0
 80150f4:	460e      	mov	r6, r1
 80150f6:	6860      	ldr	r0, [r4, #4]
 80150f8:	6803      	ldr	r3, [r0, #0]
 80150fa:	685b      	ldr	r3, [r3, #4]
 80150fc:	4798      	blx	r3
 80150fe:	2800      	cmp	r0, #0
 8015100:	d1f9      	bne.n	80150f6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015102:	4d0d      	ldr	r5, [pc, #52]	; (8015138 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8015104:	6828      	ldr	r0, [r5, #0]
 8015106:	6803      	ldr	r3, [r0, #0]
 8015108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801510a:	4798      	blx	r3
 801510c:	f7ec fe8e 	bl	8001e2c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015110:	6828      	ldr	r0, [r5, #0]
 8015112:	2101      	movs	r1, #1
 8015114:	f7ff ff46 	bl	8014fa4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015118:	6860      	ldr	r0, [r4, #4]
 801511a:	4631      	mov	r1, r6
 801511c:	6803      	ldr	r3, [r0, #0]
 801511e:	689b      	ldr	r3, [r3, #8]
 8015120:	4798      	blx	r3
 8015122:	6823      	ldr	r3, [r4, #0]
 8015124:	4620      	mov	r0, r4
 8015126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015128:	4798      	blx	r3
 801512a:	6828      	ldr	r0, [r5, #0]
 801512c:	6803      	ldr	r3, [r0, #0]
 801512e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015134:	4718      	bx	r3
 8015136:	bf00      	nop
 8015138:	2400aeec 	.word	0x2400aeec

0801513c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801513c:	b508      	push	{r3, lr}
 801513e:	f7ec fe5b 	bl	8001df8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015146:	f7ec be65 	b.w	8001e14 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801514a <_ZN8touchgfx13DMA_Interface5startEv>:
 801514a:	b510      	push	{r4, lr}
 801514c:	4604      	mov	r4, r0
 801514e:	6840      	ldr	r0, [r0, #4]
 8015150:	6803      	ldr	r3, [r0, #0]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	4798      	blx	r3
 8015156:	b948      	cbnz	r0, 801516c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015158:	7a63      	ldrb	r3, [r4, #9]
 801515a:	b13b      	cbz	r3, 801516c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801515c:	7a23      	ldrb	r3, [r4, #8]
 801515e:	b92b      	cbnz	r3, 801516c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015160:	6823      	ldr	r3, [r4, #0]
 8015162:	4620      	mov	r0, r4
 8015164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801516a:	4718      	bx	r3
 801516c:	bd10      	pop	{r4, pc}
	...

08015170 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015170:	b570      	push	{r4, r5, r6, lr}
 8015172:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015176:	4606      	mov	r6, r0
 8015178:	1a9b      	subs	r3, r3, r2
 801517a:	2b00      	cmp	r3, #0
 801517c:	bfdc      	itt	le
 801517e:	6880      	ldrle	r0, [r0, #8]
 8015180:	181b      	addle	r3, r3, r0
 8015182:	2b01      	cmp	r3, #1
 8015184:	dd13      	ble.n	80151ae <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 8015186:	6874      	ldr	r4, [r6, #4]
 8015188:	460d      	mov	r5, r1
 801518a:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 801518e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015192:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015196:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801519a:	68f3      	ldr	r3, [r6, #12]
 801519c:	68b2      	ldr	r2, [r6, #8]
 801519e:	f3bf 8f5b 	dmb	ish
 80151a2:	3301      	adds	r3, #1
 80151a4:	429a      	cmp	r2, r3
 80151a6:	bfd8      	it	le
 80151a8:	1a9b      	suble	r3, r3, r2
 80151aa:	60f3      	str	r3, [r6, #12]
 80151ac:	bd70      	pop	{r4, r5, r6, pc}
 80151ae:	4b03      	ldr	r3, [pc, #12]	; (80151bc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 80151b0:	2139      	movs	r1, #57	; 0x39
 80151b2:	4a03      	ldr	r2, [pc, #12]	; (80151c0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 80151b4:	4803      	ldr	r0, [pc, #12]	; (80151c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80151b6:	f010 fd6f 	bl	8025c98 <__assert_func>
 80151ba:	bf00      	nop
 80151bc:	08028dd5 	.word	0x08028dd5
 80151c0:	08028ecc 	.word	0x08028ecc
 80151c4:	08028daf 	.word	0x08028daf

080151c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80151c8:	b510      	push	{r4, lr}
 80151ca:	6803      	ldr	r3, [r0, #0]
 80151cc:	4604      	mov	r4, r0
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	4798      	blx	r3
 80151d2:	b128      	cbz	r0, 80151e0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80151d4:	4b07      	ldr	r3, [pc, #28]	; (80151f4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80151d6:	213f      	movs	r1, #63	; 0x3f
 80151d8:	4a07      	ldr	r2, [pc, #28]	; (80151f8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80151da:	4808      	ldr	r0, [pc, #32]	; (80151fc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80151dc:	f010 fd5c 	bl	8025c98 <__assert_func>
 80151e0:	6923      	ldr	r3, [r4, #16]
 80151e2:	68a2      	ldr	r2, [r4, #8]
 80151e4:	f3bf 8f5b 	dmb	ish
 80151e8:	3301      	adds	r3, #1
 80151ea:	429a      	cmp	r2, r3
 80151ec:	bfd8      	it	le
 80151ee:	1a9b      	suble	r3, r3, r2
 80151f0:	6123      	str	r3, [r4, #16]
 80151f2:	bd10      	pop	{r4, pc}
 80151f4:	08028df8 	.word	0x08028df8
 80151f8:	08028f1a 	.word	0x08028f1a
 80151fc:	08028daf 	.word	0x08028daf

08015200 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015200:	b570      	push	{r4, r5, r6, lr}
 8015202:	4604      	mov	r4, r0
 8015204:	6840      	ldr	r0, [r0, #4]
 8015206:	6803      	ldr	r3, [r0, #0]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	4798      	blx	r3
 801520c:	4605      	mov	r5, r0
 801520e:	b930      	cbnz	r0, 801521e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015210:	7a23      	ldrb	r3, [r4, #8]
 8015212:	b123      	cbz	r3, 801521e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015214:	6860      	ldr	r0, [r4, #4]
 8015216:	6803      	ldr	r3, [r0, #0]
 8015218:	695b      	ldr	r3, [r3, #20]
 801521a:	4798      	blx	r3
 801521c:	7225      	strb	r5, [r4, #8]
 801521e:	6860      	ldr	r0, [r4, #4]
 8015220:	6803      	ldr	r3, [r0, #0]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	4798      	blx	r3
 8015226:	b928      	cbnz	r0, 8015234 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015228:	6823      	ldr	r3, [r4, #0]
 801522a:	4620      	mov	r0, r4
 801522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801522e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015232:	4718      	bx	r3
 8015234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015238:	f7ec be04 	b.w	8001e44 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801523c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801523c:	b510      	push	{r4, lr}
 801523e:	6082      	str	r2, [r0, #8]
 8015240:	2200      	movs	r2, #0
 8015242:	4c03      	ldr	r4, [pc, #12]	; (8015250 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015244:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015248:	e9c0 4100 	strd	r4, r1, [r0]
 801524c:	bd10      	pop	{r4, pc}
 801524e:	bf00      	nop
 8015250:	08028e80 	.word	0x08028e80

08015254 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015254:	6840      	ldr	r0, [r0, #4]
 8015256:	6803      	ldr	r3, [r0, #0]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	4718      	bx	r3

0801525c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801525c:	2200      	movs	r2, #0
 801525e:	8002      	strh	r2, [r0, #0]
 8015260:	8042      	strh	r2, [r0, #2]
 8015262:	8082      	strh	r2, [r0, #4]
 8015264:	80c2      	strh	r2, [r0, #6]
 8015266:	4770      	bx	lr

08015268 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8015268:	b570      	push	{r4, r5, r6, lr}
 801526a:	6803      	ldr	r3, [r0, #0]
 801526c:	4604      	mov	r4, r0
 801526e:	4615      	mov	r5, r2
 8015270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015272:	4798      	blx	r3
 8015274:	6823      	ldr	r3, [r4, #0]
 8015276:	4629      	mov	r1, r5
 8015278:	4620      	mov	r0, r4
 801527a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801527c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015280:	4718      	bx	r3
	...

08015284 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015284:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801528a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801528c:	4299      	cmp	r1, r3
 801528e:	d029      	beq.n	80152e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8015290:	4b15      	ldr	r3, [pc, #84]	; (80152e8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	b92b      	cbnz	r3, 80152a2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8015296:	4b15      	ldr	r3, [pc, #84]	; (80152ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8015298:	21ae      	movs	r1, #174	; 0xae
 801529a:	4a15      	ldr	r2, [pc, #84]	; (80152f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801529c:	4815      	ldr	r0, [pc, #84]	; (80152f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801529e:	f010 fcfb 	bl	8025c98 <__assert_func>
 80152a2:	4a15      	ldr	r2, [pc, #84]	; (80152f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80152a4:	8812      	ldrh	r2, [r2, #0]
 80152a6:	428a      	cmp	r2, r1
 80152a8:	d803      	bhi.n	80152b2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80152aa:	4b14      	ldr	r3, [pc, #80]	; (80152fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80152ac:	21af      	movs	r1, #175	; 0xaf
 80152ae:	4a10      	ldr	r2, [pc, #64]	; (80152f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80152b0:	e7f4      	b.n	801529c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80152b2:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80152b6:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80152ba:	4b11      	ldr	r3, [pc, #68]	; (8015300 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80152bc:	7854      	ldrb	r4, [r2, #1]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80152c4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80152c8:	682b      	ldr	r3, [r5, #0]
 80152ca:	69de      	ldr	r6, [r3, #28]
 80152cc:	4b0d      	ldr	r3, [pc, #52]	; (8015304 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80152ce:	6818      	ldr	r0, [r3, #0]
 80152d0:	f7f1 fcba 	bl	8006c48 <_ZNK8touchgfx5Texts7getTextEt>
 80152d4:	2300      	movs	r3, #0
 80152d6:	4602      	mov	r2, r0
 80152d8:	4621      	mov	r1, r4
 80152da:	9300      	str	r3, [sp, #0]
 80152dc:	4628      	mov	r0, r5
 80152de:	47b0      	blx	r6
 80152e0:	b002      	add	sp, #8
 80152e2:	bd70      	pop	{r4, r5, r6, pc}
 80152e4:	2000      	movs	r0, #0
 80152e6:	e7fb      	b.n	80152e0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 80152e8:	2400af3c 	.word	0x2400af3c
 80152ec:	08028f4a 	.word	0x08028f4a
 80152f0:	08029080 	.word	0x08029080
 80152f4:	08028f8c 	.word	0x08028f8c
 80152f8:	2400af40 	.word	0x2400af40
 80152fc:	08028fb5 	.word	0x08028fb5
 8015300:	2400af44 	.word	0x2400af44
 8015304:	2400af48 	.word	0x2400af48

08015308 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8015308:	b570      	push	{r4, r5, r6, lr}
 801530a:	6803      	ldr	r3, [r0, #0]
 801530c:	4604      	mov	r4, r0
 801530e:	b28d      	uxth	r5, r1
 8015310:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015312:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8015314:	4b10      	ldr	r3, [pc, #64]	; (8015358 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	b92b      	cbnz	r3, 8015326 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801531a:	4b10      	ldr	r3, [pc, #64]	; (801535c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801531c:	21ae      	movs	r1, #174	; 0xae
 801531e:	4a10      	ldr	r2, [pc, #64]	; (8015360 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8015320:	4810      	ldr	r0, [pc, #64]	; (8015364 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8015322:	f010 fcb9 	bl	8025c98 <__assert_func>
 8015326:	4910      	ldr	r1, [pc, #64]	; (8015368 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8015328:	8809      	ldrh	r1, [r1, #0]
 801532a:	4291      	cmp	r1, r2
 801532c:	d803      	bhi.n	8015336 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801532e:	4b0f      	ldr	r3, [pc, #60]	; (801536c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8015330:	21af      	movs	r1, #175	; 0xaf
 8015332:	4a0b      	ldr	r2, [pc, #44]	; (8015360 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8015334:	e7f4      	b.n	8015320 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8015336:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801533a:	4b0d      	ldr	r3, [pc, #52]	; (8015370 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015342:	6803      	ldr	r3, [r0, #0]
 8015344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015346:	4798      	blx	r3
 8015348:	1a29      	subs	r1, r5, r0
 801534a:	4633      	mov	r3, r6
 801534c:	4620      	mov	r0, r4
 801534e:	b209      	sxth	r1, r1
 8015350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015354:	4718      	bx	r3
 8015356:	bf00      	nop
 8015358:	2400af3c 	.word	0x2400af3c
 801535c:	08028f4a 	.word	0x08028f4a
 8015360:	08029080 	.word	0x08029080
 8015364:	08028f8c 	.word	0x08028f8c
 8015368:	2400af40 	.word	0x2400af40
 801536c:	08028fb5 	.word	0x08028fb5
 8015370:	2400af44 	.word	0x2400af44

08015374 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801537c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801537e:	b08c      	sub	sp, #48	; 0x30
 8015380:	4604      	mov	r4, r0
 8015382:	4293      	cmp	r3, r2
 8015384:	4688      	mov	r8, r1
 8015386:	d05f      	beq.n	8015448 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8015388:	4e31      	ldr	r6, [pc, #196]	; (8015450 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801538a:	6832      	ldr	r2, [r6, #0]
 801538c:	b92a      	cbnz	r2, 801539a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801538e:	4b31      	ldr	r3, [pc, #196]	; (8015454 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8015390:	21ae      	movs	r1, #174	; 0xae
 8015392:	4a31      	ldr	r2, [pc, #196]	; (8015458 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8015394:	4831      	ldr	r0, [pc, #196]	; (801545c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8015396:	f010 fc7f 	bl	8025c98 <__assert_func>
 801539a:	4d31      	ldr	r5, [pc, #196]	; (8015460 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801539c:	8829      	ldrh	r1, [r5, #0]
 801539e:	4299      	cmp	r1, r3
 80153a0:	d803      	bhi.n	80153aa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 80153a2:	4b30      	ldr	r3, [pc, #192]	; (8015464 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80153a4:	21af      	movs	r1, #175	; 0xaf
 80153a6:	4a2c      	ldr	r2, [pc, #176]	; (8015458 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80153a8:	e7f4      	b.n	8015394 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 80153aa:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80153ae:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80153b2:	4b2d      	ldr	r3, [pc, #180]	; (8015468 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80153ba:	2a00      	cmp	r2, #0
 80153bc:	d044      	beq.n	8015448 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80153be:	784b      	ldrb	r3, [r1, #1]
 80153c0:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80153c4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80153c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80153cc:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80153d0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80153d4:	4b25      	ldr	r3, [pc, #148]	; (801546c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80153d6:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 80153e0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80153e4:	9207      	str	r2, [sp, #28]
 80153e6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80153e8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80153ec:	f88d a020 	strb.w	sl, [sp, #32]
 80153f0:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80153f4:	9009      	str	r0, [sp, #36]	; 0x24
 80153f6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80153fa:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80153fe:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8015402:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8015406:	b10a      	cbz	r2, 801540c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8015408:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801540a:	b907      	cbnz	r7, 801540e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801540c:	689f      	ldr	r7, [r3, #8]
 801540e:	f10d 0914 	add.w	r9, sp, #20
 8015412:	4621      	mov	r1, r4
 8015414:	4648      	mov	r0, r9
 8015416:	f002 ff7d 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801541a:	6833      	ldr	r3, [r6, #0]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d0b6      	beq.n	801538e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8015420:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015422:	882b      	ldrh	r3, [r5, #0]
 8015424:	428b      	cmp	r3, r1
 8015426:	d9bc      	bls.n	80153a2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8015428:	4b11      	ldr	r3, [pc, #68]	; (8015470 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801542a:	6818      	ldr	r0, [r3, #0]
 801542c:	f7f1 fc0c 	bl	8006c48 <_ZNK8touchgfx5Texts7getTextEt>
 8015430:	2300      	movs	r3, #0
 8015432:	9001      	str	r0, [sp, #4]
 8015434:	4638      	mov	r0, r7
 8015436:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801543a:	ab07      	add	r3, sp, #28
 801543c:	9300      	str	r3, [sp, #0]
 801543e:	4643      	mov	r3, r8
 8015440:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015444:	f7f1 fb91 	bl	8006b6a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015448:	b00c      	add	sp, #48	; 0x30
 801544a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801544e:	bf00      	nop
 8015450:	2400af3c 	.word	0x2400af3c
 8015454:	08028f4a 	.word	0x08028f4a
 8015458:	08029080 	.word	0x08029080
 801545c:	08028f8c 	.word	0x08028f8c
 8015460:	2400af40 	.word	0x2400af40
 8015464:	08028fb5 	.word	0x08028fb5
 8015468:	2400af44 	.word	0x2400af44
 801546c:	2400aeec 	.word	0x2400aeec
 8015470:	2400af48 	.word	0x2400af48

08015474 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015474:	b40e      	push	{r1, r2, r3}
 8015476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801547a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801547e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015480:	b09c      	sub	sp, #112	; 0x70
 8015482:	4604      	mov	r4, r0
 8015484:	4293      	cmp	r3, r2
 8015486:	d06b      	beq.n	8015560 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8015488:	aa26      	add	r2, sp, #152	; 0x98
 801548a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8015574 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 801548e:	9202      	str	r2, [sp, #8]
 8015490:	f8da 2000 	ldr.w	r2, [sl]
 8015494:	b92a      	cbnz	r2, 80154a2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8015496:	4b33      	ldr	r3, [pc, #204]	; (8015564 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8015498:	21ae      	movs	r1, #174	; 0xae
 801549a:	4a33      	ldr	r2, [pc, #204]	; (8015568 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801549c:	4833      	ldr	r0, [pc, #204]	; (801556c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 801549e:	f010 fbfb 	bl	8025c98 <__assert_func>
 80154a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8015578 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 80154a6:	f8b8 1000 	ldrh.w	r1, [r8]
 80154aa:	4299      	cmp	r1, r3
 80154ac:	d803      	bhi.n	80154b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 80154ae:	4b30      	ldr	r3, [pc, #192]	; (8015570 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 80154b0:	21af      	movs	r1, #175	; 0xaf
 80154b2:	4a2d      	ldr	r2, [pc, #180]	; (8015568 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80154b4:	e7f2      	b.n	801549c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 80154b6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801557c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 80154ba:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80154be:	f8d9 3000 	ldr.w	r3, [r9]
 80154c2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80154c6:	682b      	ldr	r3, [r5, #0]
 80154c8:	4628      	mov	r0, r5
 80154ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154cc:	4798      	blx	r3
 80154ce:	4606      	mov	r6, r0
 80154d0:	b207      	sxth	r7, r0
 80154d2:	a803      	add	r0, sp, #12
 80154d4:	f003 faed 	bl	8018ab2 <_ZN8touchgfx12TextProviderC1Ev>
 80154d8:	682b      	ldr	r3, [r5, #0]
 80154da:	4628      	mov	r0, r5
 80154dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154de:	4798      	blx	r3
 80154e0:	682b      	ldr	r3, [r5, #0]
 80154e2:	4683      	mov	fp, r0
 80154e4:	4628      	mov	r0, r5
 80154e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80154e8:	4798      	blx	r3
 80154ea:	465b      	mov	r3, fp
 80154ec:	9000      	str	r0, [sp, #0]
 80154ee:	a803      	add	r0, sp, #12
 80154f0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80154f2:	9a02      	ldr	r2, [sp, #8]
 80154f4:	f003 fb30 	bl	8018b58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80154f8:	f8da 3000 	ldr.w	r3, [sl]
 80154fc:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8015500:	2b00      	cmp	r3, #0
 8015502:	d0c8      	beq.n	8015496 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8015504:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015506:	f8b8 0000 	ldrh.w	r0, [r8]
 801550a:	4290      	cmp	r0, r2
 801550c:	d9cf      	bls.n	80154ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801550e:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8015512:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8015516:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801551a:	786a      	ldrb	r2, [r5, #1]
 801551c:	8925      	ldrh	r5, [r4, #8]
 801551e:	f8d9 3000 	ldr.w	r3, [r9]
 8015522:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015526:	eba5 050c 	sub.w	r5, r5, ip
 801552a:	b22d      	sxth	r5, r5
 801552c:	9500      	str	r5, [sp, #0]
 801552e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015532:	a803      	add	r0, sp, #12
 8015534:	f001 fa2d 	bl	8016992 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8015538:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801553c:	b203      	sxth	r3, r0
 801553e:	18b9      	adds	r1, r7, r2
 8015540:	2900      	cmp	r1, #0
 8015542:	dd0b      	ble.n	801555c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8015544:	3b01      	subs	r3, #1
 8015546:	fb13 f302 	smulbb	r3, r3, r2
 801554a:	fb16 3300 	smlabb	r3, r6, r0, r3
 801554e:	b21f      	sxth	r7, r3
 8015550:	4638      	mov	r0, r7
 8015552:	b01c      	add	sp, #112	; 0x70
 8015554:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015558:	b003      	add	sp, #12
 801555a:	4770      	bx	lr
 801555c:	2b00      	cmp	r3, #0
 801555e:	dcf7      	bgt.n	8015550 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8015560:	2700      	movs	r7, #0
 8015562:	e7f5      	b.n	8015550 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8015564:	08028f4a 	.word	0x08028f4a
 8015568:	08029080 	.word	0x08029080
 801556c:	08028f8c 	.word	0x08028f8c
 8015570:	08028fb5 	.word	0x08028fb5
 8015574:	2400af3c 	.word	0x2400af3c
 8015578:	2400af40 	.word	0x2400af40
 801557c:	2400af44 	.word	0x2400af44

08015580 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8015580:	b570      	push	{r4, r5, r6, lr}
 8015582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015586:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015588:	4604      	mov	r4, r0
 801558a:	4299      	cmp	r1, r3
 801558c:	d01e      	beq.n	80155cc <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801558e:	6803      	ldr	r3, [r0, #0]
 8015590:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8015592:	4b0f      	ldr	r3, [pc, #60]	; (80155d0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	b92b      	cbnz	r3, 80155a4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8015598:	4b0e      	ldr	r3, [pc, #56]	; (80155d4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801559a:	21ae      	movs	r1, #174	; 0xae
 801559c:	4a0e      	ldr	r2, [pc, #56]	; (80155d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801559e:	480f      	ldr	r0, [pc, #60]	; (80155dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 80155a0:	f010 fb7a 	bl	8025c98 <__assert_func>
 80155a4:	4b0e      	ldr	r3, [pc, #56]	; (80155e0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 80155a6:	881b      	ldrh	r3, [r3, #0]
 80155a8:	428b      	cmp	r3, r1
 80155aa:	d803      	bhi.n	80155b4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 80155ac:	4b0d      	ldr	r3, [pc, #52]	; (80155e4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 80155ae:	21af      	movs	r1, #175	; 0xaf
 80155b0:	4a09      	ldr	r2, [pc, #36]	; (80155d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80155b2:	e7f4      	b.n	801559e <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 80155b4:	4b0c      	ldr	r3, [pc, #48]	; (80155e8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 80155b6:	6818      	ldr	r0, [r3, #0]
 80155b8:	f7f1 fb46 	bl	8006c48 <_ZNK8touchgfx5Texts7getTextEt>
 80155bc:	2300      	movs	r3, #0
 80155be:	4601      	mov	r1, r0
 80155c0:	46ac      	mov	ip, r5
 80155c2:	4620      	mov	r0, r4
 80155c4:	461a      	mov	r2, r3
 80155c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155ca:	4760      	bx	ip
 80155cc:	2000      	movs	r0, #0
 80155ce:	bd70      	pop	{r4, r5, r6, pc}
 80155d0:	2400af3c 	.word	0x2400af3c
 80155d4:	08028f4a 	.word	0x08028f4a
 80155d8:	08029080 	.word	0x08029080
 80155dc:	08028f8c 	.word	0x08028f8c
 80155e0:	2400af40 	.word	0x2400af40
 80155e4:	08028fb5 	.word	0x08028fb5
 80155e8:	2400af48 	.word	0x2400af48

080155ec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80155ec:	b538      	push	{r3, r4, r5, lr}
 80155ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155f2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80155f4:	4604      	mov	r4, r0
 80155f6:	429a      	cmp	r2, r3
 80155f8:	d014      	beq.n	8015624 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80155fa:	6803      	ldr	r3, [r0, #0]
 80155fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80155fe:	4798      	blx	r3
 8015600:	6823      	ldr	r3, [r4, #0]
 8015602:	4605      	mov	r5, r0
 8015604:	4620      	mov	r0, r4
 8015606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015608:	4798      	blx	r3
 801560a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801560e:	b22d      	sxth	r5, r5
 8015610:	4601      	mov	r1, r0
 8015612:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015616:	bf06      	itte	eq
 8015618:	4602      	moveq	r2, r0
 801561a:	4629      	moveq	r1, r5
 801561c:	462a      	movne	r2, r5
 801561e:	4620      	mov	r0, r4
 8015620:	f7ef f89e 	bl	8004760 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015624:	bd38      	pop	{r3, r4, r5, pc}

08015626 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8015626:	888a      	ldrh	r2, [r1, #4]
 8015628:	8582      	strh	r2, [r0, #44]	; 0x2c
 801562a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801562e:	b922      	cbnz	r2, 801563a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8015630:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015634:	b90b      	cbnz	r3, 801563a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8015636:	f7ff bfd9 	b.w	80155ec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801563a:	4770      	bx	lr

0801563c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801563c:	2300      	movs	r3, #0
 801563e:	8083      	strh	r3, [r0, #4]
 8015640:	80c3      	strh	r3, [r0, #6]
 8015642:	8003      	strh	r3, [r0, #0]
 8015644:	8043      	strh	r3, [r0, #2]
 8015646:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801564a:	2bff      	cmp	r3, #255	; 0xff
 801564c:	bf01      	itttt	eq
 801564e:	890b      	ldrheq	r3, [r1, #8]
 8015650:	8083      	strheq	r3, [r0, #4]
 8015652:	894b      	ldrheq	r3, [r1, #10]
 8015654:	80c3      	strheq	r3, [r0, #6]
 8015656:	4770      	bx	lr

08015658 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801565a:	4604      	mov	r4, r0
 801565c:	466b      	mov	r3, sp
 801565e:	6808      	ldr	r0, [r1, #0]
 8015660:	6849      	ldr	r1, [r1, #4]
 8015662:	c303      	stmia	r3!, {r0, r1}
 8015664:	6823      	ldr	r3, [r4, #0]
 8015666:	4669      	mov	r1, sp
 8015668:	4620      	mov	r0, r4
 801566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801566c:	4798      	blx	r3
 801566e:	4b08      	ldr	r3, [pc, #32]	; (8015690 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015676:	b10a      	cbz	r2, 801567c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015678:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801567a:	b900      	cbnz	r0, 801567e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801567c:	6898      	ldr	r0, [r3, #8]
 801567e:	6803      	ldr	r3, [r0, #0]
 8015680:	4669      	mov	r1, sp
 8015682:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8015684:	699d      	ldr	r5, [r3, #24]
 8015686:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801568a:	47a8      	blx	r5
 801568c:	b003      	add	sp, #12
 801568e:	bd30      	pop	{r4, r5, pc}
 8015690:	2400aeec 	.word	0x2400aeec

08015694 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8015694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801569a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801569c:	4606      	mov	r6, r0
 801569e:	4299      	cmp	r1, r3
 80156a0:	d02a      	beq.n	80156f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 80156a2:	4b16      	ldr	r3, [pc, #88]	; (80156fc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	b92b      	cbnz	r3, 80156b4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 80156a8:	4b15      	ldr	r3, [pc, #84]	; (8015700 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 80156aa:	21ae      	movs	r1, #174	; 0xae
 80156ac:	4a15      	ldr	r2, [pc, #84]	; (8015704 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80156ae:	4816      	ldr	r0, [pc, #88]	; (8015708 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 80156b0:	f010 faf2 	bl	8025c98 <__assert_func>
 80156b4:	4a15      	ldr	r2, [pc, #84]	; (801570c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 80156b6:	8812      	ldrh	r2, [r2, #0]
 80156b8:	428a      	cmp	r2, r1
 80156ba:	d803      	bhi.n	80156c4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 80156bc:	4b14      	ldr	r3, [pc, #80]	; (8015710 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 80156be:	21af      	movs	r1, #175	; 0xaf
 80156c0:	4a10      	ldr	r2, [pc, #64]	; (8015704 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80156c2:	e7f4      	b.n	80156ae <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 80156c4:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80156c8:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80156cc:	4b11      	ldr	r3, [pc, #68]	; (8015714 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 80156ce:	7854      	ldrb	r4, [r2, #1]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80156d6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80156da:	682b      	ldr	r3, [r5, #0]
 80156dc:	69df      	ldr	r7, [r3, #28]
 80156de:	4b0e      	ldr	r3, [pc, #56]	; (8015718 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 80156e0:	6818      	ldr	r0, [r3, #0]
 80156e2:	f7f1 fab1 	bl	8006c48 <_ZNK8touchgfx5Texts7getTextEt>
 80156e6:	2300      	movs	r3, #0
 80156e8:	4602      	mov	r2, r0
 80156ea:	4621      	mov	r1, r4
 80156ec:	9300      	str	r3, [sp, #0]
 80156ee:	4628      	mov	r0, r5
 80156f0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80156f2:	47b8      	blx	r7
 80156f4:	b003      	add	sp, #12
 80156f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156f8:	2000      	movs	r0, #0
 80156fa:	e7fb      	b.n	80156f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 80156fc:	2400af3c 	.word	0x2400af3c
 8015700:	08028f4a 	.word	0x08028f4a
 8015704:	0802918c 	.word	0x0802918c
 8015708:	08028f8c 	.word	0x08028f8c
 801570c:	2400af40 	.word	0x2400af40
 8015710:	08028fb5 	.word	0x08028fb5
 8015714:	2400af44 	.word	0x2400af44
 8015718:	2400af48 	.word	0x2400af48

0801571c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801571c:	b570      	push	{r4, r5, r6, lr}
 801571e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015722:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015724:	4604      	mov	r4, r0
 8015726:	4299      	cmp	r1, r3
 8015728:	d01e      	beq.n	8015768 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801572a:	6803      	ldr	r3, [r0, #0]
 801572c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801572e:	4b0f      	ldr	r3, [pc, #60]	; (801576c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	b92b      	cbnz	r3, 8015740 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8015734:	4b0e      	ldr	r3, [pc, #56]	; (8015770 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8015736:	21ae      	movs	r1, #174	; 0xae
 8015738:	4a0e      	ldr	r2, [pc, #56]	; (8015774 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801573a:	480f      	ldr	r0, [pc, #60]	; (8015778 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801573c:	f010 faac 	bl	8025c98 <__assert_func>
 8015740:	4b0e      	ldr	r3, [pc, #56]	; (801577c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8015742:	881b      	ldrh	r3, [r3, #0]
 8015744:	428b      	cmp	r3, r1
 8015746:	d803      	bhi.n	8015750 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8015748:	4b0d      	ldr	r3, [pc, #52]	; (8015780 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801574a:	21af      	movs	r1, #175	; 0xaf
 801574c:	4a09      	ldr	r2, [pc, #36]	; (8015774 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801574e:	e7f4      	b.n	801573a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8015750:	4b0c      	ldr	r3, [pc, #48]	; (8015784 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8015752:	6818      	ldr	r0, [r3, #0]
 8015754:	f7f1 fa78 	bl	8006c48 <_ZNK8touchgfx5Texts7getTextEt>
 8015758:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801575a:	4601      	mov	r1, r0
 801575c:	46ac      	mov	ip, r5
 801575e:	4620      	mov	r0, r4
 8015760:	2300      	movs	r3, #0
 8015762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015766:	4760      	bx	ip
 8015768:	2000      	movs	r0, #0
 801576a:	bd70      	pop	{r4, r5, r6, pc}
 801576c:	2400af3c 	.word	0x2400af3c
 8015770:	08028f4a 	.word	0x08028f4a
 8015774:	0802918c 	.word	0x0802918c
 8015778:	08028f8c 	.word	0x08028f8c
 801577c:	2400af40 	.word	0x2400af40
 8015780:	08028fb5 	.word	0x08028fb5
 8015784:	2400af48 	.word	0x2400af48

08015788 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8015788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801578c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015790:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015792:	b08c      	sub	sp, #48	; 0x30
 8015794:	4604      	mov	r4, r0
 8015796:	4293      	cmp	r3, r2
 8015798:	460e      	mov	r6, r1
 801579a:	d05d      	beq.n	8015858 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801579c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801587c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 80157a0:	f8d8 2000 	ldr.w	r2, [r8]
 80157a4:	b92a      	cbnz	r2, 80157b2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 80157a6:	4b2e      	ldr	r3, [pc, #184]	; (8015860 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 80157a8:	21ae      	movs	r1, #174	; 0xae
 80157aa:	4a2e      	ldr	r2, [pc, #184]	; (8015864 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80157ac:	482e      	ldr	r0, [pc, #184]	; (8015868 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 80157ae:	f010 fa73 	bl	8025c98 <__assert_func>
 80157b2:	4f2e      	ldr	r7, [pc, #184]	; (801586c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 80157b4:	8839      	ldrh	r1, [r7, #0]
 80157b6:	4299      	cmp	r1, r3
 80157b8:	d803      	bhi.n	80157c2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 80157ba:	4b2d      	ldr	r3, [pc, #180]	; (8015870 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 80157bc:	21af      	movs	r1, #175	; 0xaf
 80157be:	4a29      	ldr	r2, [pc, #164]	; (8015864 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80157c0:	e7f4      	b.n	80157ac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 80157c2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80157c6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80157ca:	4b2a      	ldr	r3, [pc, #168]	; (8015874 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80157d2:	2a00      	cmp	r2, #0
 80157d4:	d040      	beq.n	8015858 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80157d6:	784b      	ldrb	r3, [r1, #1]
 80157d8:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 80157dc:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80157e0:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80157e4:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80157e8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80157ec:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80157f0:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80157f4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80157f8:	ad05      	add	r5, sp, #20
 80157fa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80157fc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8015800:	9207      	str	r2, [sp, #28]
 8015802:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8015806:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801580a:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801580e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8015812:	f88d a020 	strb.w	sl, [sp, #32]
 8015816:	9009      	str	r0, [sp, #36]	; 0x24
 8015818:	f7ee fa64 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 801581c:	4621      	mov	r1, r4
 801581e:	4681      	mov	r9, r0
 8015820:	4628      	mov	r0, r5
 8015822:	f002 fd77 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015826:	f8d8 3000 	ldr.w	r3, [r8]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d0bb      	beq.n	80157a6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801582e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015830:	883b      	ldrh	r3, [r7, #0]
 8015832:	428b      	cmp	r3, r1
 8015834:	d9c1      	bls.n	80157ba <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8015836:	4b10      	ldr	r3, [pc, #64]	; (8015878 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8015838:	6818      	ldr	r0, [r3, #0]
 801583a:	f7f1 fa05 	bl	8006c48 <_ZNK8touchgfx5Texts7getTextEt>
 801583e:	2300      	movs	r3, #0
 8015840:	9303      	str	r3, [sp, #12]
 8015842:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015844:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8015848:	ab07      	add	r3, sp, #28
 801584a:	4648      	mov	r0, r9
 801584c:	9300      	str	r3, [sp, #0]
 801584e:	4633      	mov	r3, r6
 8015850:	e895 0006 	ldmia.w	r5, {r1, r2}
 8015854:	f7f1 f989 	bl	8006b6a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015858:	b00c      	add	sp, #48	; 0x30
 801585a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801585e:	bf00      	nop
 8015860:	08028f4a 	.word	0x08028f4a
 8015864:	0802918c 	.word	0x0802918c
 8015868:	08028f8c 	.word	0x08028f8c
 801586c:	2400af40 	.word	0x2400af40
 8015870:	08028fb5 	.word	0x08028fb5
 8015874:	2400af44 	.word	0x2400af44
 8015878:	2400af48 	.word	0x2400af48
 801587c:	2400af3c 	.word	0x2400af3c

08015880 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8015880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015884:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8015886:	4604      	mov	r4, r0
 8015888:	460e      	mov	r6, r1
 801588a:	b08e      	sub	sp, #56	; 0x38
 801588c:	b218      	sxth	r0, r3
 801588e:	8921      	ldrh	r1, [r4, #8]
 8015890:	005b      	lsls	r3, r3, #1
 8015892:	8962      	ldrh	r2, [r4, #10]
 8015894:	f8ad 0000 	strh.w	r0, [sp]
 8015898:	b29b      	uxth	r3, r3
 801589a:	f8ad 0002 	strh.w	r0, [sp, #2]
 801589e:	1ac9      	subs	r1, r1, r3
 80158a0:	1ad3      	subs	r3, r2, r3
 80158a2:	b209      	sxth	r1, r1
 80158a4:	b21b      	sxth	r3, r3
 80158a6:	2900      	cmp	r1, #0
 80158a8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80158ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 80158b0:	dd5e      	ble.n	8015970 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	dd5c      	ble.n	8015970 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80158b6:	6830      	ldr	r0, [r6, #0]
 80158b8:	ab02      	add	r3, sp, #8
 80158ba:	6871      	ldr	r1, [r6, #4]
 80158bc:	c303      	stmia	r3!, {r0, r1}
 80158be:	4669      	mov	r1, sp
 80158c0:	a802      	add	r0, sp, #8
 80158c2:	f7fd fdaf 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 80158c6:	4620      	mov	r0, r4
 80158c8:	a902      	add	r1, sp, #8
 80158ca:	f7ff fec5 	bl	8015658 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80158ce:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80158d0:	2800      	cmp	r0, #0
 80158d2:	d05f      	beq.n	8015994 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80158d4:	8963      	ldrh	r3, [r4, #10]
 80158d6:	b202      	sxth	r2, r0
 80158d8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80158dc:	2500      	movs	r5, #0
 80158de:	1a1f      	subs	r7, r3, r0
 80158e0:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80158e4:	f8ad 101c 	strh.w	r1, [sp, #28]
 80158e8:	b21b      	sxth	r3, r3
 80158ea:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80158ee:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80158f2:	af04      	add	r7, sp, #16
 80158f4:	1a09      	subs	r1, r1, r0
 80158f6:	9506      	str	r5, [sp, #24]
 80158f8:	f8ad 201e 	strh.w	r2, [sp, #30]
 80158fc:	f8ad 5020 	strh.w	r5, [sp, #32]
 8015900:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8015904:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8015908:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801590c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8015910:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015914:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8015918:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801591c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015920:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015924:	ab06      	add	r3, sp, #24
 8015926:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801592a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801592e:	e887 0003 	stmia.w	r7, {r0, r1}
 8015932:	4631      	mov	r1, r6
 8015934:	4638      	mov	r0, r7
 8015936:	f7fd fd75 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 801593a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801593e:	2b00      	cmp	r3, #0
 8015940:	dd12      	ble.n	8015968 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8015942:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015946:	2b00      	cmp	r3, #0
 8015948:	dd0e      	ble.n	8015968 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801594a:	6823      	ldr	r3, [r4, #0]
 801594c:	4639      	mov	r1, r7
 801594e:	4620      	mov	r0, r4
 8015950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015952:	4798      	blx	r3
 8015954:	f7ee f9c6 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 8015958:	6803      	ldr	r3, [r0, #0]
 801595a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801595c:	4639      	mov	r1, r7
 801595e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8015962:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015966:	47c0      	blx	r8
 8015968:	3501      	adds	r5, #1
 801596a:	2d04      	cmp	r5, #4
 801596c:	d1da      	bne.n	8015924 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 801596e:	e011      	b.n	8015994 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8015970:	6830      	ldr	r0, [r6, #0]
 8015972:	ab06      	add	r3, sp, #24
 8015974:	6871      	ldr	r1, [r6, #4]
 8015976:	c303      	stmia	r3!, {r0, r1}
 8015978:	6823      	ldr	r3, [r4, #0]
 801597a:	a906      	add	r1, sp, #24
 801597c:	4620      	mov	r0, r4
 801597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015980:	4798      	blx	r3
 8015982:	f7ee f9af 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 8015986:	6803      	ldr	r3, [r0, #0]
 8015988:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801598a:	a906      	add	r1, sp, #24
 801598c:	699d      	ldr	r5, [r3, #24]
 801598e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015992:	47a8      	blx	r5
 8015994:	b00e      	add	sp, #56	; 0x38
 8015996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801599a <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801599a:	b510      	push	{r4, lr}
 801599c:	6803      	ldr	r3, [r0, #0]
 801599e:	460c      	mov	r4, r1
 80159a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159a2:	4798      	blx	r3
 80159a4:	1b03      	subs	r3, r0, r4
 80159a6:	4258      	negs	r0, r3
 80159a8:	4158      	adcs	r0, r3
 80159aa:	bd10      	pop	{r4, pc}

080159ac <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80159ac:	4b01      	ldr	r3, [pc, #4]	; (80159b4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80159ae:	6019      	str	r1, [r3, #0]
 80159b0:	4770      	bx	lr
 80159b2:	bf00      	nop
 80159b4:	2400aef4 	.word	0x2400aef4

080159b8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80159b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159bc:	4696      	mov	lr, r2
 80159be:	b097      	sub	sp, #92	; 0x5c
 80159c0:	4605      	mov	r5, r0
 80159c2:	4614      	mov	r4, r2
 80159c4:	460e      	mov	r6, r1
 80159c6:	461f      	mov	r7, r3
 80159c8:	f10d 0c1c 	add.w	ip, sp, #28
 80159cc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80159d0:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80159d4:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80159d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159e0:	f8de 3000 	ldr.w	r3, [lr]
 80159e4:	f104 0e14 	add.w	lr, r4, #20
 80159e8:	f8cc 3000 	str.w	r3, [ip]
 80159ec:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80159f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159f8:	f8de 3000 	ldr.w	r3, [lr]
 80159fc:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8015a00:	f8cc 3000 	str.w	r3, [ip]
 8015a04:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015a08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a10:	f8de 3000 	ldr.w	r3, [lr]
 8015a14:	4631      	mov	r1, r6
 8015a16:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015a18:	4628      	mov	r0, r5
 8015a1a:	f8cc 3000 	str.w	r3, [ip]
 8015a1e:	682b      	ldr	r3, [r5, #0]
 8015a20:	9201      	str	r2, [sp, #4]
 8015a22:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015a24:	f8cd 8008 	str.w	r8, [sp, #8]
 8015a28:	9200      	str	r2, [sp, #0]
 8015a2a:	aa07      	add	r2, sp, #28
 8015a2c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015a30:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8015a34:	463b      	mov	r3, r7
 8015a36:	47d8      	blx	fp
 8015a38:	46a6      	mov	lr, r4
 8015a3a:	f10d 0c1c 	add.w	ip, sp, #28
 8015a3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a46:	f8de 3000 	ldr.w	r3, [lr]
 8015a4a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8015a4e:	343c      	adds	r4, #60	; 0x3c
 8015a50:	f8cc 3000 	str.w	r3, [ip]
 8015a54:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015a58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a60:	f8de 3000 	ldr.w	r3, [lr]
 8015a64:	f8cc 3000 	str.w	r3, [ip]
 8015a68:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a72:	6823      	ldr	r3, [r4, #0]
 8015a74:	4631      	mov	r1, r6
 8015a76:	4628      	mov	r0, r5
 8015a78:	f8cc 3000 	str.w	r3, [ip]
 8015a7c:	682b      	ldr	r3, [r5, #0]
 8015a7e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015a82:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015a84:	f8cd 8008 	str.w	r8, [sp, #8]
 8015a88:	9201      	str	r2, [sp, #4]
 8015a8a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015a8c:	9200      	str	r2, [sp, #0]
 8015a8e:	aa07      	add	r2, sp, #28
 8015a90:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8015a92:	463b      	mov	r3, r7
 8015a94:	47a0      	blx	r4
 8015a96:	b017      	add	sp, #92	; 0x5c
 8015a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015a9c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015a9c:	2000      	movs	r0, #0
 8015a9e:	4770      	bx	lr

08015aa0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aa4:	b08d      	sub	sp, #52	; 0x34
 8015aa6:	4688      	mov	r8, r1
 8015aa8:	f8d3 c000 	ldr.w	ip, [r3]
 8015aac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015aae:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8015ab2:	680f      	ldr	r7, [r1, #0]
 8015ab4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8015ab8:	eba7 070c 	sub.w	r7, r7, ip
 8015abc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8015ac0:	edd3 6a07 	vldr	s13, [r3, #28]
 8015ac4:	42bc      	cmp	r4, r7
 8015ac6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015ac8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8015acc:	bfa8      	it	ge
 8015ace:	463c      	movge	r4, r7
 8015ad0:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015ad4:	f9ba 1000 	ldrsh.w	r1, [sl]
 8015ad8:	ee07 4a90 	vmov	s15, r4
 8015adc:	eb09 0e0c 	add.w	lr, r9, ip
 8015ae0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8015ae4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015ae8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8015aec:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8015af0:	4571      	cmp	r1, lr
 8015af2:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015af6:	ee65 4a24 	vmul.f32	s9, s10, s9
 8015afa:	ee25 5a27 	vmul.f32	s10, s10, s15
 8015afe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b02:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8015b06:	ee32 1a05 	vadd.f32	s2, s4, s10
 8015b0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015b0e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8015b12:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015b16:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015b1a:	f340 808c 	ble.w	8015c36 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8015b1e:	eba1 060e 	sub.w	r6, r1, lr
 8015b22:	fb96 f5f4 	sdiv	r5, r6, r4
 8015b26:	ee07 5a10 	vmov	s14, r5
 8015b2a:	2d00      	cmp	r5, #0
 8015b2c:	fb04 6615 	mls	r6, r4, r5, r6
 8015b30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b34:	eea7 0a04 	vfma.f32	s0, s14, s8
 8015b38:	eee7 0a24 	vfma.f32	s1, s14, s9
 8015b3c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8015b40:	dd12      	ble.n	8015b68 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8015b42:	ee70 6a44 	vsub.f32	s13, s0, s8
 8015b46:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8015b4a:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015b4e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b56:	bf14      	ite	ne
 8015b58:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8015b5c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8015b60:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015b64:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015b68:	fb05 f204 	mul.w	r2, r5, r4
 8015b6c:	1abf      	subs	r7, r7, r2
 8015b6e:	4494      	add	ip, r2
 8015b70:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8015b74:	4411      	add	r1, r2
 8015b76:	eb09 020c 	add.w	r2, r9, ip
 8015b7a:	b209      	sxth	r1, r1
 8015b7c:	443a      	add	r2, r7
 8015b7e:	428a      	cmp	r2, r1
 8015b80:	bfc4      	itt	gt
 8015b82:	eba1 0209 	subgt.w	r2, r1, r9
 8015b86:	eba2 070c 	subgt.w	r7, r2, ip
 8015b8a:	2f00      	cmp	r7, #0
 8015b8c:	dd50      	ble.n	8015c30 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015b8e:	fb97 f1f4 	sdiv	r1, r7, r4
 8015b92:	fb04 7211 	mls	r2, r4, r1, r7
 8015b96:	b90a      	cbnz	r2, 8015b9c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015b98:	3901      	subs	r1, #1
 8015b9a:	4622      	mov	r2, r4
 8015b9c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015ba0:	6840      	ldr	r0, [r0, #4]
 8015ba2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8015ba6:	44b6      	add	lr, r6
 8015ba8:	f8d0 a000 	ldr.w	sl, [r0]
 8015bac:	2900      	cmp	r1, #0
 8015bae:	bfcc      	ite	gt
 8015bb0:	46a1      	movgt	r9, r4
 8015bb2:	4691      	movle	r9, r2
 8015bb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8015bb6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015bb8:	fb04 e505 	mla	r5, r4, r5, lr
 8015bbc:	eef0 6a42 	vmov.f32	s13, s4
 8015bc0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015bc4:	9008      	str	r0, [sp, #32]
 8015bc6:	eeb0 7a61 	vmov.f32	s14, s3
 8015bca:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015bcc:	695b      	ldr	r3, [r3, #20]
 8015bce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015bd2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015bd6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015bda:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015bdc:	445b      	add	r3, fp
 8015bde:	9307      	str	r3, [sp, #28]
 8015be0:	ee16 3a90 	vmov	r3, s13
 8015be4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8015be8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015bec:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015bf0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015bf4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015bf8:	ee17 7a90 	vmov	r7, s15
 8015bfc:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015c00:	fb97 f7f4 	sdiv	r7, r7, r4
 8015c04:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015c08:	ee17 ca90 	vmov	ip, s15
 8015c0c:	fb9c fcf4 	sdiv	ip, ip, r4
 8015c10:	fb0c 3306 	mla	r3, ip, r6, r3
 8015c14:	9302      	str	r3, [sp, #8]
 8015c16:	ee17 3a10 	vmov	r3, s14
 8015c1a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015c1e:	fb07 3706 	mla	r7, r7, r6, r3
 8015c22:	eba9 0306 	sub.w	r3, r9, r6
 8015c26:	e9cd 4700 	strd	r4, r7, [sp]
 8015c2a:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015c2e:	47a0      	blx	r4
 8015c30:	b00d      	add	sp, #52	; 0x34
 8015c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c36:	2500      	movs	r5, #0
 8015c38:	462e      	mov	r6, r5
 8015c3a:	e799      	b.n	8015b70 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015c3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c40:	b0db      	sub	sp, #364	; 0x16c
 8015c42:	461d      	mov	r5, r3
 8015c44:	4614      	mov	r4, r2
 8015c46:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8015c4a:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c4c:	4629      	mov	r1, r5
 8015c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8015c50:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8015c54:	9009      	str	r0, [sp, #36]	; 0x24
 8015c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c58:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8015c5c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8015c60:	9310      	str	r3, [sp, #64]	; 0x40
 8015c62:	6803      	ldr	r3, [r0, #0]
 8015c64:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8015c66:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015c6a:	47b8      	blx	r7
 8015c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c6e:	6058      	str	r0, [r3, #4]
 8015c70:	2800      	cmp	r0, #0
 8015c72:	f000 83a1 	beq.w	80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015c76:	682b      	ldr	r3, [r5, #0]
 8015c78:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015c7c:	ed94 7a02 	vldr	s14, [r4, #8]
 8015c80:	9314      	str	r3, [sp, #80]	; 0x50
 8015c82:	686b      	ldr	r3, [r5, #4]
 8015c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015c88:	9315      	str	r3, [sp, #84]	; 0x54
 8015c8a:	4bc1      	ldr	r3, [pc, #772]	; (8015f90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015c8c:	7819      	ldrb	r1, [r3, #0]
 8015c8e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015c92:	2900      	cmp	r1, #0
 8015c94:	bf16      	itet	ne
 8015c96:	4619      	movne	r1, r3
 8015c98:	4611      	moveq	r1, r2
 8015c9a:	4613      	movne	r3, r2
 8015c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ca0:	9116      	str	r1, [sp, #88]	; 0x58
 8015ca2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8015ca6:	f240 8387 	bls.w	80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015caa:	ed94 7a07 	vldr	s14, [r4, #28]
 8015cae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb6:	f240 837f 	bls.w	80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015cba:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8015cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cc6:	f240 8377 	bls.w	80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015cca:	6822      	ldr	r2, [r4, #0]
 8015ccc:	4bb1      	ldr	r3, [pc, #708]	; (8015f94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	f2c0 8372 	blt.w	80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015cd4:	49b0      	ldr	r1, [pc, #704]	; (8015f98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015cd6:	6963      	ldr	r3, [r4, #20]
 8015cd8:	428a      	cmp	r2, r1
 8015cda:	f300 836d 	bgt.w	80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015cde:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015ce2:	48ae      	ldr	r0, [pc, #696]	; (8015f9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015ce4:	33ff      	adds	r3, #255	; 0xff
 8015ce6:	4283      	cmp	r3, r0
 8015ce8:	f200 8366 	bhi.w	80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015cec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015cee:	4dac      	ldr	r5, [pc, #688]	; (8015fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015cf0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015cf4:	33ff      	adds	r3, #255	; 0xff
 8015cf6:	42ab      	cmp	r3, r5
 8015cf8:	f200 835e 	bhi.w	80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015cfc:	6862      	ldr	r2, [r4, #4]
 8015cfe:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8015d02:	33ff      	adds	r3, #255	; 0xff
 8015d04:	4283      	cmp	r3, r0
 8015d06:	f200 8357 	bhi.w	80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015d0a:	69a1      	ldr	r1, [r4, #24]
 8015d0c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8015d10:	33ff      	adds	r3, #255	; 0xff
 8015d12:	4283      	cmp	r3, r0
 8015d14:	f200 8350 	bhi.w	80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015d1a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8015d1e:	30ff      	adds	r0, #255	; 0xff
 8015d20:	42a8      	cmp	r0, r5
 8015d22:	f200 8349 	bhi.w	80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015d26:	428a      	cmp	r2, r1
 8015d28:	f280 8110 	bge.w	8015f4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	f300 8119 	bgt.w	8015f64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015d32:	4299      	cmp	r1, r3
 8015d34:	f280 811d 	bge.w	8015f72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8015d38:	2502      	movs	r5, #2
 8015d3a:	2701      	movs	r7, #1
 8015d3c:	46a9      	mov	r9, r5
 8015d3e:	46b8      	mov	r8, r7
 8015d40:	f04f 0a00 	mov.w	sl, #0
 8015d44:	4621      	mov	r1, r4
 8015d46:	a849      	add	r0, sp, #292	; 0x124
 8015d48:	f003 fc82 	bl	8019650 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015d4c:	4622      	mov	r2, r4
 8015d4e:	4653      	mov	r3, sl
 8015d50:	a949      	add	r1, sp, #292	; 0x124
 8015d52:	f8cd 9000 	str.w	r9, [sp]
 8015d56:	a819      	add	r0, sp, #100	; 0x64
 8015d58:	f003 fdaa 	bl	80198b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015d5c:	4622      	mov	r2, r4
 8015d5e:	4653      	mov	r3, sl
 8015d60:	a949      	add	r1, sp, #292	; 0x124
 8015d62:	f8cd 8000 	str.w	r8, [sp]
 8015d66:	a829      	add	r0, sp, #164	; 0xa4
 8015d68:	f003 fda2 	bl	80198b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015d6c:	4643      	mov	r3, r8
 8015d6e:	4622      	mov	r2, r4
 8015d70:	a949      	add	r1, sp, #292	; 0x124
 8015d72:	f8cd 9000 	str.w	r9, [sp]
 8015d76:	a839      	add	r0, sp, #228	; 0xe4
 8015d78:	f003 fd9a 	bl	80198b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015d7c:	42af      	cmp	r7, r5
 8015d7e:	af12      	add	r7, sp, #72	; 0x48
 8015d80:	bfb7      	itett	lt
 8015d82:	2300      	movlt	r3, #0
 8015d84:	2301      	movge	r3, #1
 8015d86:	ad29      	addlt	r5, sp, #164	; 0xa4
 8015d88:	ac19      	addlt	r4, sp, #100	; 0x64
 8015d8a:	bfb1      	iteee	lt
 8015d8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015d8e:	ad19      	addge	r5, sp, #100	; 0x64
 8015d90:	930e      	strge	r3, [sp, #56]	; 0x38
 8015d92:	ac29      	addge	r4, sp, #164	; 0xa4
 8015d94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d9a:	e887 0003 	stmia.w	r7, {r0, r1}
 8015d9e:	b928      	cbnz	r0, 8015dac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015da0:	4b80      	ldr	r3, [pc, #512]	; (8015fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015da2:	6818      	ldr	r0, [r3, #0]
 8015da4:	6803      	ldr	r3, [r0, #0]
 8015da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015da8:	4798      	blx	r3
 8015daa:	6038      	str	r0, [r7, #0]
 8015dac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015dae:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015db2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015db6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015db8:	930c      	str	r3, [sp, #48]	; 0x30
 8015dba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015dbc:	6963      	ldr	r3, [r4, #20]
 8015dbe:	440b      	add	r3, r1
 8015dc0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015dc4:	4408      	add	r0, r1
 8015dc6:	b200      	sxth	r0, r0
 8015dc8:	4283      	cmp	r3, r0
 8015dca:	900d      	str	r0, [sp, #52]	; 0x34
 8015dcc:	f280 80dd 	bge.w	8015f8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015dd0:	428b      	cmp	r3, r1
 8015dd2:	da08      	bge.n	8015de6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015dd4:	2a00      	cmp	r2, #0
 8015dd6:	dd06      	ble.n	8015de6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015dd8:	1acb      	subs	r3, r1, r3
 8015dda:	429a      	cmp	r2, r3
 8015ddc:	f2c0 80e4 	blt.w	8015fa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	f300 80e2 	bgt.w	8015faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8015de6:	6967      	ldr	r7, [r4, #20]
 8015de8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015dee:	443b      	add	r3, r7
 8015df0:	461f      	mov	r7, r3
 8015df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015df4:	1bdf      	subs	r7, r3, r7
 8015df6:	4297      	cmp	r7, r2
 8015df8:	bfa8      	it	ge
 8015dfa:	4617      	movge	r7, r2
 8015dfc:	2f00      	cmp	r7, #0
 8015dfe:	f340 8166 	ble.w	80160ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8015e02:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015e04:	6829      	ldr	r1, [r5, #0]
 8015e06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015e0a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015e0e:	4411      	add	r1, r2
 8015e10:	6820      	ldr	r0, [r4, #0]
 8015e12:	4299      	cmp	r1, r3
 8015e14:	dd1a      	ble.n	8015e4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015e16:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015e1a:	4402      	add	r2, r0
 8015e1c:	440b      	add	r3, r1
 8015e1e:	b21b      	sxth	r3, r3
 8015e20:	429a      	cmp	r2, r3
 8015e22:	dc13      	bgt.n	8015e4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e26:	a912      	add	r1, sp, #72	; 0x48
 8015e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	9206      	str	r2, [sp, #24]
 8015e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e32:	9500      	str	r5, [sp, #0]
 8015e34:	9205      	str	r2, [sp, #20]
 8015e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e38:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015e3c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015e3e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015e42:	aa49      	add	r2, sp, #292	; 0x124
 8015e44:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8015e48:	4623      	mov	r3, r4
 8015e4a:	47c8      	blx	r9
 8015e4c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015e50:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8015e54:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8015e58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015e5c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8015e60:	68a1      	ldr	r1, [r4, #8]
 8015e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015e66:	ed94 6a08 	vldr	s12, [r4, #32]
 8015e6a:	edd4 6a07 	vldr	s13, [r4, #28]
 8015e6e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015e72:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015e76:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015e7a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015e7e:	edc4 6a07 	vstr	s13, [r4, #28]
 8015e82:	441a      	add	r2, r3
 8015e84:	6963      	ldr	r3, [r4, #20]
 8015e86:	3301      	adds	r3, #1
 8015e88:	6022      	str	r2, [r4, #0]
 8015e8a:	6163      	str	r3, [r4, #20]
 8015e8c:	69a3      	ldr	r3, [r4, #24]
 8015e8e:	3b01      	subs	r3, #1
 8015e90:	61a3      	str	r3, [r4, #24]
 8015e92:	6923      	ldr	r3, [r4, #16]
 8015e94:	440b      	add	r3, r1
 8015e96:	68e1      	ldr	r1, [r4, #12]
 8015e98:	428b      	cmp	r3, r1
 8015e9a:	6123      	str	r3, [r4, #16]
 8015e9c:	db15      	blt.n	8015eca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015e9e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015ea2:	3201      	adds	r2, #1
 8015ea4:	1a5b      	subs	r3, r3, r1
 8015ea6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015eaa:	6022      	str	r2, [r4, #0]
 8015eac:	6123      	str	r3, [r4, #16]
 8015eae:	edc4 6a07 	vstr	s13, [r4, #28]
 8015eb2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8015eb6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015eba:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015ebe:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ec6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015eca:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8015ece:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015ed2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8015ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015eda:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8015ede:	68a9      	ldr	r1, [r5, #8]
 8015ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015ee4:	ed95 6a08 	vldr	s12, [r5, #32]
 8015ee8:	edd5 6a07 	vldr	s13, [r5, #28]
 8015eec:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015ef0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015ef4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015ef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015efc:	edc5 6a07 	vstr	s13, [r5, #28]
 8015f00:	441a      	add	r2, r3
 8015f02:	696b      	ldr	r3, [r5, #20]
 8015f04:	3301      	adds	r3, #1
 8015f06:	602a      	str	r2, [r5, #0]
 8015f08:	616b      	str	r3, [r5, #20]
 8015f0a:	69ab      	ldr	r3, [r5, #24]
 8015f0c:	3b01      	subs	r3, #1
 8015f0e:	61ab      	str	r3, [r5, #24]
 8015f10:	692b      	ldr	r3, [r5, #16]
 8015f12:	440b      	add	r3, r1
 8015f14:	68e9      	ldr	r1, [r5, #12]
 8015f16:	428b      	cmp	r3, r1
 8015f18:	612b      	str	r3, [r5, #16]
 8015f1a:	db15      	blt.n	8015f48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015f1c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015f20:	3201      	adds	r2, #1
 8015f22:	1a5b      	subs	r3, r3, r1
 8015f24:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015f28:	602a      	str	r2, [r5, #0]
 8015f2a:	612b      	str	r3, [r5, #16]
 8015f2c:	edc5 6a07 	vstr	s13, [r5, #28]
 8015f30:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015f34:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015f38:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015f3c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f44:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015f48:	3f01      	subs	r7, #1
 8015f4a:	e757      	b.n	8015dfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015f4c:	4299      	cmp	r1, r3
 8015f4e:	dc13      	bgt.n	8015f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015f50:	429a      	cmp	r2, r3
 8015f52:	da14      	bge.n	8015f7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015f54:	2502      	movs	r5, #2
 8015f56:	2703      	movs	r7, #3
 8015f58:	f04f 0800 	mov.w	r8, #0
 8015f5c:	46a9      	mov	r9, r5
 8015f5e:	f04f 0a01 	mov.w	sl, #1
 8015f62:	e6ef      	b.n	8015d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015f64:	2501      	movs	r5, #1
 8015f66:	2700      	movs	r7, #0
 8015f68:	46a9      	mov	r9, r5
 8015f6a:	46b8      	mov	r8, r7
 8015f6c:	f04f 0a02 	mov.w	sl, #2
 8015f70:	e6e8      	b.n	8015d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015f72:	2501      	movs	r5, #1
 8015f74:	2702      	movs	r7, #2
 8015f76:	e6e1      	b.n	8015d3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015f78:	2500      	movs	r5, #0
 8015f7a:	2701      	movs	r7, #1
 8015f7c:	e7f4      	b.n	8015f68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015f7e:	2702      	movs	r7, #2
 8015f80:	2503      	movs	r5, #3
 8015f82:	f04f 0900 	mov.w	r9, #0
 8015f86:	46b8      	mov	r8, r7
 8015f88:	e7e9      	b.n	8015f5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015f8a:	4613      	mov	r3, r2
 8015f8c:	e728      	b.n	8015de0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015f8e:	bf00      	nop
 8015f90:	2400aee4 	.word	0x2400aee4
 8015f94:	fffd8f01 	.word	0xfffd8f01
 8015f98:	00027100 	.word	0x00027100
 8015f9c:	0004e1ff 	.word	0x0004e1ff
 8015fa0:	0004e1fe 	.word	0x0004e1fe
 8015fa4:	2400aeec 	.word	0x2400aeec
 8015fa8:	4613      	mov	r3, r2
 8015faa:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015fac:	469e      	mov	lr, r3
 8015fae:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8015fb0:	469c      	mov	ip, r3
 8015fb2:	9111      	str	r1, [sp, #68]	; 0x44
 8015fb4:	f04f 0900 	mov.w	r9, #0
 8015fb8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8015fbc:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8015fc0:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8015fc4:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8015fc8:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8015fcc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8015fd0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8015fd4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8015fd8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8015fdc:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8015fe0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8015fe4:	f1bc 0f00 	cmp.w	ip, #0
 8015fe8:	d147      	bne.n	801607a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015fea:	eb03 0c07 	add.w	ip, r3, r7
 8015fee:	1ad7      	subs	r7, r2, r3
 8015ff0:	f1b9 0f00 	cmp.w	r9, #0
 8015ff4:	d009      	beq.n	801600a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015ff6:	9029      	str	r0, [sp, #164]	; 0xa4
 8015ff8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8015ffc:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8016000:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8016004:	912d      	str	r1, [sp, #180]	; 0xb4
 8016006:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801600a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801600c:	f04f 0800 	mov.w	r8, #0
 8016010:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016014:	9111      	str	r1, [sp, #68]	; 0x44
 8016016:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801601a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801601e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016022:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016026:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801602a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801602e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016032:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016036:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801603a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801603e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016042:	f1be 0f00 	cmp.w	lr, #0
 8016046:	d031      	beq.n	80160ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016048:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801604a:	4450      	add	r0, sl
 801604c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016050:	4431      	add	r1, r6
 8016052:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016056:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801605a:	4549      	cmp	r1, r9
 801605c:	db08      	blt.n	8016070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801605e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016062:	3001      	adds	r0, #1
 8016064:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016068:	eba1 0109 	sub.w	r1, r1, r9
 801606c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016070:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016074:	f04f 0801 	mov.w	r8, #1
 8016078:	e7e3      	b.n	8016042 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801607a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801607c:	4450      	add	r0, sl
 801607e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016082:	4431      	add	r1, r6
 8016084:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016088:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801608c:	4541      	cmp	r1, r8
 801608e:	db08      	blt.n	80160a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016090:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016094:	3001      	adds	r0, #1
 8016096:	ee37 7a25 	vadd.f32	s14, s14, s11
 801609a:	eba1 0108 	sub.w	r1, r1, r8
 801609e:	ee77 7a86 	vadd.f32	s15, s15, s12
 80160a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80160a6:	f04f 0901 	mov.w	r9, #1
 80160aa:	e79b      	b.n	8015fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80160ac:	449c      	add	ip, r3
 80160ae:	1aff      	subs	r7, r7, r3
 80160b0:	f1b8 0f00 	cmp.w	r8, #0
 80160b4:	d009      	beq.n	80160ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80160b6:	9019      	str	r0, [sp, #100]	; 0x64
 80160b8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80160bc:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80160c0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80160c4:	911d      	str	r1, [sp, #116]	; 0x74
 80160c6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80160ca:	1ad2      	subs	r2, r2, r3
 80160cc:	e68b      	b.n	8015de6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80160ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160d0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	f000 80d1 	beq.w	801627a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80160d8:	ad19      	add	r5, sp, #100	; 0x64
 80160da:	ac39      	add	r4, sp, #228	; 0xe4
 80160dc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80160de:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80160e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80160e6:	930c      	str	r3, [sp, #48]	; 0x30
 80160e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80160ea:	6963      	ldr	r3, [r4, #20]
 80160ec:	440b      	add	r3, r1
 80160ee:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80160f2:	4408      	add	r0, r1
 80160f4:	b200      	sxth	r0, r0
 80160f6:	4283      	cmp	r3, r0
 80160f8:	900d      	str	r0, [sp, #52]	; 0x34
 80160fa:	f280 80c1 	bge.w	8016280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80160fe:	428b      	cmp	r3, r1
 8016100:	da08      	bge.n	8016114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016102:	2a00      	cmp	r2, #0
 8016104:	dd06      	ble.n	8016114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016106:	1acb      	subs	r3, r1, r3
 8016108:	429a      	cmp	r2, r3
 801610a:	f2c0 80bb 	blt.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801610e:	2b00      	cmp	r3, #0
 8016110:	f300 80b9 	bgt.w	8016286 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016114:	6967      	ldr	r7, [r4, #20]
 8016116:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801611a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801611c:	443b      	add	r3, r7
 801611e:	461f      	mov	r7, r3
 8016120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016122:	1bdf      	subs	r7, r3, r7
 8016124:	4297      	cmp	r7, r2
 8016126:	bfa8      	it	ge
 8016128:	4617      	movge	r7, r2
 801612a:	2f00      	cmp	r7, #0
 801612c:	f340 813c 	ble.w	80163a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016130:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016132:	6829      	ldr	r1, [r5, #0]
 8016134:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016138:	f9bb 3000 	ldrsh.w	r3, [fp]
 801613c:	4411      	add	r1, r2
 801613e:	6820      	ldr	r0, [r4, #0]
 8016140:	4299      	cmp	r1, r3
 8016142:	dd1a      	ble.n	801617a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016144:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016148:	4402      	add	r2, r0
 801614a:	440b      	add	r3, r1
 801614c:	b21b      	sxth	r3, r3
 801614e:	429a      	cmp	r2, r3
 8016150:	dc13      	bgt.n	801617a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016152:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016154:	a912      	add	r1, sp, #72	; 0x48
 8016156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016158:	9809      	ldr	r0, [sp, #36]	; 0x24
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	9206      	str	r2, [sp, #24]
 801615e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016160:	9500      	str	r5, [sp, #0]
 8016162:	9205      	str	r2, [sp, #20]
 8016164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016166:	e9cd b203 	strd	fp, r2, [sp, #12]
 801616a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801616c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016170:	aa49      	add	r2, sp, #292	; 0x124
 8016172:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8016176:	4623      	mov	r3, r4
 8016178:	47c8      	blx	r9
 801617a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801617e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016182:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016186:	ee37 7a27 	vadd.f32	s14, s14, s15
 801618a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801618e:	68a1      	ldr	r1, [r4, #8]
 8016190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016194:	ed94 6a08 	vldr	s12, [r4, #32]
 8016198:	edd4 6a07 	vldr	s13, [r4, #28]
 801619c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80161a0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80161a4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80161a8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80161ac:	edc4 6a07 	vstr	s13, [r4, #28]
 80161b0:	441a      	add	r2, r3
 80161b2:	6963      	ldr	r3, [r4, #20]
 80161b4:	3301      	adds	r3, #1
 80161b6:	6022      	str	r2, [r4, #0]
 80161b8:	6163      	str	r3, [r4, #20]
 80161ba:	69a3      	ldr	r3, [r4, #24]
 80161bc:	3b01      	subs	r3, #1
 80161be:	61a3      	str	r3, [r4, #24]
 80161c0:	6923      	ldr	r3, [r4, #16]
 80161c2:	440b      	add	r3, r1
 80161c4:	68e1      	ldr	r1, [r4, #12]
 80161c6:	428b      	cmp	r3, r1
 80161c8:	6123      	str	r3, [r4, #16]
 80161ca:	db15      	blt.n	80161f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80161cc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80161d0:	3201      	adds	r2, #1
 80161d2:	1a5b      	subs	r3, r3, r1
 80161d4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80161d8:	6022      	str	r2, [r4, #0]
 80161da:	6123      	str	r3, [r4, #16]
 80161dc:	edc4 6a07 	vstr	s13, [r4, #28]
 80161e0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80161e4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80161e8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80161ec:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80161f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80161f4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80161f8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80161fc:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016200:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016208:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801620c:	68a9      	ldr	r1, [r5, #8]
 801620e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016212:	ed95 6a08 	vldr	s12, [r5, #32]
 8016216:	edd5 6a07 	vldr	s13, [r5, #28]
 801621a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801621e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016222:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016226:	e9d5 2300 	ldrd	r2, r3, [r5]
 801622a:	edc5 6a07 	vstr	s13, [r5, #28]
 801622e:	441a      	add	r2, r3
 8016230:	696b      	ldr	r3, [r5, #20]
 8016232:	3301      	adds	r3, #1
 8016234:	602a      	str	r2, [r5, #0]
 8016236:	616b      	str	r3, [r5, #20]
 8016238:	69ab      	ldr	r3, [r5, #24]
 801623a:	3b01      	subs	r3, #1
 801623c:	61ab      	str	r3, [r5, #24]
 801623e:	692b      	ldr	r3, [r5, #16]
 8016240:	440b      	add	r3, r1
 8016242:	68e9      	ldr	r1, [r5, #12]
 8016244:	428b      	cmp	r3, r1
 8016246:	612b      	str	r3, [r5, #16]
 8016248:	db15      	blt.n	8016276 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801624a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801624e:	3201      	adds	r2, #1
 8016250:	1a5b      	subs	r3, r3, r1
 8016252:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016256:	602a      	str	r2, [r5, #0]
 8016258:	612b      	str	r3, [r5, #16]
 801625a:	edc5 6a07 	vstr	s13, [r5, #28]
 801625e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016262:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016266:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801626a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801626e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016272:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016276:	3f01      	subs	r7, #1
 8016278:	e757      	b.n	801612a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801627a:	ad39      	add	r5, sp, #228	; 0xe4
 801627c:	ac19      	add	r4, sp, #100	; 0x64
 801627e:	e72d      	b.n	80160dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016280:	4613      	mov	r3, r2
 8016282:	e744      	b.n	801610e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016284:	4613      	mov	r3, r2
 8016286:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016288:	469e      	mov	lr, r3
 801628a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801628e:	461f      	mov	r7, r3
 8016290:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016294:	f04f 0900 	mov.w	r9, #0
 8016298:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801629c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80162a0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80162a4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80162a8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80162ac:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80162ae:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80162b2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80162b6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80162ba:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80162be:	960e      	str	r6, [sp, #56]	; 0x38
 80162c0:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80162c4:	2f00      	cmp	r7, #0
 80162c6:	d146      	bne.n	8016356 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80162c8:	449c      	add	ip, r3
 80162ca:	1ad7      	subs	r7, r2, r3
 80162cc:	f1b9 0f00 	cmp.w	r9, #0
 80162d0:	d009      	beq.n	80162e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80162d2:	9039      	str	r0, [sp, #228]	; 0xe4
 80162d4:	913d      	str	r1, [sp, #244]	; 0xf4
 80162d6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80162da:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80162de:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80162e2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80162e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80162e8:	f04f 0800 	mov.w	r8, #0
 80162ec:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80162f0:	910e      	str	r1, [sp, #56]	; 0x38
 80162f2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80162f6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80162fa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80162fe:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016302:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016306:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801630a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801630e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016312:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016316:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801631a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801631e:	f1be 0f00 	cmp.w	lr, #0
 8016322:	d030      	beq.n	8016386 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016324:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016326:	4450      	add	r0, sl
 8016328:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801632c:	4431      	add	r1, r6
 801632e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016332:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016336:	4549      	cmp	r1, r9
 8016338:	db08      	blt.n	801634c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801633a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801633e:	3001      	adds	r0, #1
 8016340:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016344:	eba1 0109 	sub.w	r1, r1, r9
 8016348:	ee37 7a06 	vadd.f32	s14, s14, s12
 801634c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016350:	f04f 0801 	mov.w	r8, #1
 8016354:	e7e3      	b.n	801631e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8016356:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016358:	4450      	add	r0, sl
 801635a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801635e:	4431      	add	r1, r6
 8016360:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016364:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016368:	4541      	cmp	r1, r8
 801636a:	db08      	blt.n	801637e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801636c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016370:	3001      	adds	r0, #1
 8016372:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016376:	eba1 0108 	sub.w	r1, r1, r8
 801637a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801637e:	3f01      	subs	r7, #1
 8016380:	f04f 0901 	mov.w	r9, #1
 8016384:	e79e      	b.n	80162c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016386:	449c      	add	ip, r3
 8016388:	1aff      	subs	r7, r7, r3
 801638a:	f1b8 0f00 	cmp.w	r8, #0
 801638e:	d009      	beq.n	80163a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8016390:	9019      	str	r0, [sp, #100]	; 0x64
 8016392:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016396:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801639a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801639e:	911d      	str	r1, [sp, #116]	; 0x74
 80163a0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80163a4:	1ad2      	subs	r2, r2, r3
 80163a6:	e6b5      	b.n	8016114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80163a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	b923      	cbnz	r3, 80163b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80163ae:	4b04      	ldr	r3, [pc, #16]	; (80163c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80163b0:	6818      	ldr	r0, [r3, #0]
 80163b2:	6803      	ldr	r3, [r0, #0]
 80163b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163b6:	4798      	blx	r3
 80163b8:	b05b      	add	sp, #364	; 0x16c
 80163ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163be:	bf00      	nop
 80163c0:	2400aeec 	.word	0x2400aeec

080163c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80163c4:	b570      	push	{r4, r5, r6, lr}
 80163c6:	4604      	mov	r4, r0
 80163c8:	2500      	movs	r5, #0
 80163ca:	9804      	ldr	r0, [sp, #16]
 80163cc:	7223      	strb	r3, [r4, #8]
 80163ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80163d2:	8025      	strh	r5, [r4, #0]
 80163d4:	6061      	str	r1, [r4, #4]
 80163d6:	7263      	strb	r3, [r4, #9]
 80163d8:	60e0      	str	r0, [r4, #12]
 80163da:	8222      	strh	r2, [r4, #16]
 80163dc:	8265      	strh	r5, [r4, #18]
 80163de:	82a5      	strh	r5, [r4, #20]
 80163e0:	82e5      	strh	r5, [r4, #22]
 80163e2:	8325      	strh	r5, [r4, #24]
 80163e4:	8365      	strh	r5, [r4, #26]
 80163e6:	83a5      	strh	r5, [r4, #28]
 80163e8:	77a5      	strb	r5, [r4, #30]
 80163ea:	6803      	ldr	r3, [r0, #0]
 80163ec:	695b      	ldr	r3, [r3, #20]
 80163ee:	4798      	blx	r3
 80163f0:	4606      	mov	r6, r0
 80163f2:	b1f8      	cbz	r0, 8016434 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80163f4:	68e0      	ldr	r0, [r4, #12]
 80163f6:	4631      	mov	r1, r6
 80163f8:	6803      	ldr	r3, [r0, #0]
 80163fa:	68db      	ldr	r3, [r3, #12]
 80163fc:	4798      	blx	r3
 80163fe:	7b43      	ldrb	r3, [r0, #13]
 8016400:	7a82      	ldrb	r2, [r0, #10]
 8016402:	4605      	mov	r5, r0
 8016404:	005b      	lsls	r3, r3, #1
 8016406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801640a:	4313      	orrs	r3, r2
 801640c:	83a3      	strh	r3, [r4, #28]
 801640e:	7a63      	ldrb	r3, [r4, #9]
 8016410:	2b04      	cmp	r3, #4
 8016412:	d10f      	bne.n	8016434 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8016414:	68e0      	ldr	r0, [r4, #12]
 8016416:	462a      	mov	r2, r5
 8016418:	4631      	mov	r1, r6
 801641a:	6803      	ldr	r3, [r0, #0]
 801641c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801641e:	4798      	blx	r3
 8016420:	7b6b      	ldrb	r3, [r5, #13]
 8016422:	005b      	lsls	r3, r3, #1
 8016424:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016428:	7aab      	ldrb	r3, [r5, #10]
 801642a:	4313      	orrs	r3, r2
 801642c:	4418      	add	r0, r3
 801642e:	8ba3      	ldrh	r3, [r4, #28]
 8016430:	4418      	add	r0, r3
 8016432:	83a0      	strh	r0, [r4, #28]
 8016434:	4620      	mov	r0, r4
 8016436:	bd70      	pop	{r4, r5, r6, pc}

08016438 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801643c:	2400      	movs	r4, #0
 801643e:	b085      	sub	sp, #20
 8016440:	4681      	mov	r9, r0
 8016442:	4688      	mov	r8, r1
 8016444:	4692      	mov	sl, r2
 8016446:	469b      	mov	fp, r3
 8016448:	4627      	mov	r7, r4
 801644a:	4625      	mov	r5, r4
 801644c:	4626      	mov	r6, r4
 801644e:	4554      	cmp	r4, sl
 8016450:	da2a      	bge.n	80164a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016452:	2300      	movs	r3, #0
 8016454:	9303      	str	r3, [sp, #12]
 8016456:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801645a:	429d      	cmp	r5, r3
 801645c:	d004      	beq.n	8016468 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801645e:	f242 030b 	movw	r3, #8203	; 0x200b
 8016462:	429d      	cmp	r5, r3
 8016464:	bf18      	it	ne
 8016466:	462f      	movne	r7, r5
 8016468:	ab03      	add	r3, sp, #12
 801646a:	4642      	mov	r2, r8
 801646c:	4659      	mov	r1, fp
 801646e:	4648      	mov	r0, r9
 8016470:	f002 fe72 	bl	8019158 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016474:	4605      	mov	r5, r0
 8016476:	b1b8      	cbz	r0, 80164a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016478:	280a      	cmp	r0, #10
 801647a:	d015      	beq.n	80164a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801647c:	9a03      	ldr	r2, [sp, #12]
 801647e:	b18a      	cbz	r2, 80164a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8016480:	7b50      	ldrb	r0, [r2, #13]
 8016482:	4639      	mov	r1, r7
 8016484:	7a93      	ldrb	r3, [r2, #10]
 8016486:	0040      	lsls	r0, r0, #1
 8016488:	8895      	ldrh	r5, [r2, #4]
 801648a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801648e:	4303      	orrs	r3, r0
 8016490:	4640      	mov	r0, r8
 8016492:	9301      	str	r3, [sp, #4]
 8016494:	f8d8 3000 	ldr.w	r3, [r8]
 8016498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801649a:	4798      	blx	r3
 801649c:	9b01      	ldr	r3, [sp, #4]
 801649e:	4418      	add	r0, r3
 80164a0:	4406      	add	r6, r0
 80164a2:	b2b6      	uxth	r6, r6
 80164a4:	3401      	adds	r4, #1
 80164a6:	e7d2      	b.n	801644e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80164a8:	4630      	mov	r0, r6
 80164aa:	b005      	add	sp, #20
 80164ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080164b0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80164b0:	2a02      	cmp	r2, #2
 80164b2:	b530      	push	{r4, r5, lr}
 80164b4:	d011      	beq.n	80164da <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80164b6:	2a03      	cmp	r2, #3
 80164b8:	d01c      	beq.n	80164f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80164ba:	2a01      	cmp	r2, #1
 80164bc:	d10c      	bne.n	80164d8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80164be:	888b      	ldrh	r3, [r1, #4]
 80164c0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80164c4:	8801      	ldrh	r1, [r0, #0]
 80164c6:	1a9b      	subs	r3, r3, r2
 80164c8:	8844      	ldrh	r4, [r0, #2]
 80164ca:	1a5b      	subs	r3, r3, r1
 80164cc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80164d0:	8004      	strh	r4, [r0, #0]
 80164d2:	8043      	strh	r3, [r0, #2]
 80164d4:	8081      	strh	r1, [r0, #4]
 80164d6:	80c2      	strh	r2, [r0, #6]
 80164d8:	bd30      	pop	{r4, r5, pc}
 80164da:	88cb      	ldrh	r3, [r1, #6]
 80164dc:	88c2      	ldrh	r2, [r0, #6]
 80164de:	1a9b      	subs	r3, r3, r2
 80164e0:	8842      	ldrh	r2, [r0, #2]
 80164e2:	1a9b      	subs	r3, r3, r2
 80164e4:	888a      	ldrh	r2, [r1, #4]
 80164e6:	8881      	ldrh	r1, [r0, #4]
 80164e8:	8043      	strh	r3, [r0, #2]
 80164ea:	1a52      	subs	r2, r2, r1
 80164ec:	8801      	ldrh	r1, [r0, #0]
 80164ee:	1a52      	subs	r2, r2, r1
 80164f0:	8002      	strh	r2, [r0, #0]
 80164f2:	e7f1      	b.n	80164d8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80164f4:	88cb      	ldrh	r3, [r1, #6]
 80164f6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80164fa:	8841      	ldrh	r1, [r0, #2]
 80164fc:	1a9b      	subs	r3, r3, r2
 80164fe:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016502:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016506:	1a5b      	subs	r3, r3, r1
 8016508:	8045      	strh	r5, [r0, #2]
 801650a:	8082      	strh	r2, [r0, #4]
 801650c:	8003      	strh	r3, [r0, #0]
 801650e:	80c4      	strh	r4, [r0, #6]
 8016510:	e7e2      	b.n	80164d8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08016512 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8016512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016516:	b09f      	sub	sp, #124	; 0x7c
 8016518:	9116      	str	r1, [sp, #88]	; 0x58
 801651a:	9317      	str	r3, [sp, #92]	; 0x5c
 801651c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801651e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016520:	8809      	ldrh	r1, [r1, #0]
 8016522:	889b      	ldrh	r3, [r3, #4]
 8016524:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8016528:	440b      	add	r3, r1
 801652a:	9212      	str	r2, [sp, #72]	; 0x48
 801652c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8016530:	b21b      	sxth	r3, r3
 8016532:	9011      	str	r0, [sp, #68]	; 0x44
 8016534:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8016538:	9310      	str	r3, [sp, #64]	; 0x40
 801653a:	f8d8 3000 	ldr.w	r3, [r8]
 801653e:	7a59      	ldrb	r1, [r3, #9]
 8016540:	7a1b      	ldrb	r3, [r3, #8]
 8016542:	9114      	str	r1, [sp, #80]	; 0x50
 8016544:	9315      	str	r3, [sp, #84]	; 0x54
 8016546:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016548:	f9b3 5000 	ldrsh.w	r5, [r3]
 801654c:	2a00      	cmp	r2, #0
 801654e:	d067      	beq.n	8016620 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8016550:	f898 3010 	ldrb.w	r3, [r8, #16]
 8016554:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8016556:	2b04      	cmp	r3, #4
 8016558:	bf14      	ite	ne
 801655a:	2301      	movne	r3, #1
 801655c:	2302      	moveq	r3, #2
 801655e:	4413      	add	r3, r2
 8016560:	f04f 0900 	mov.w	r9, #0
 8016564:	930f      	str	r3, [sp, #60]	; 0x3c
 8016566:	464c      	mov	r4, r9
 8016568:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801656c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8016570:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8016574:	4293      	cmp	r3, r2
 8016576:	f280 808c 	bge.w	8016692 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801657a:	2300      	movs	r3, #0
 801657c:	931c      	str	r3, [sp, #112]	; 0x70
 801657e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016582:	429c      	cmp	r4, r3
 8016584:	d006      	beq.n	8016594 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8016586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016588:	f242 020b 	movw	r2, #8203	; 0x200b
 801658c:	4294      	cmp	r4, r2
 801658e:	bf18      	it	ne
 8016590:	4623      	movne	r3, r4
 8016592:	930d      	str	r3, [sp, #52]	; 0x34
 8016594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016596:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8016598:	f8d8 2000 	ldr.w	r2, [r8]
 801659c:	428b      	cmp	r3, r1
 801659e:	db41      	blt.n	8016624 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80165a0:	6813      	ldr	r3, [r2, #0]
 80165a2:	4610      	mov	r0, r2
 80165a4:	695b      	ldr	r3, [r3, #20]
 80165a6:	4798      	blx	r3
 80165a8:	4604      	mov	r4, r0
 80165aa:	f8d8 0000 	ldr.w	r0, [r8]
 80165ae:	aa1d      	add	r2, sp, #116	; 0x74
 80165b0:	4621      	mov	r1, r4
 80165b2:	6803      	ldr	r3, [r0, #0]
 80165b4:	689e      	ldr	r6, [r3, #8]
 80165b6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80165ba:	47b0      	blx	r6
 80165bc:	901c      	str	r0, [sp, #112]	; 0x70
 80165be:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80165c2:	429c      	cmp	r4, r3
 80165c4:	f000 80ea 	beq.w	801679c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80165c8:	f242 030b 	movw	r3, #8203	; 0x200b
 80165cc:	429c      	cmp	r4, r3
 80165ce:	f000 80e5 	beq.w	801679c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80165d2:	2c00      	cmp	r4, #0
 80165d4:	f000 80f7 	beq.w	80167c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80165d8:	2c0a      	cmp	r4, #10
 80165da:	d060      	beq.n	801669e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80165dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80165de:	b36a      	cbz	r2, 801663c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80165e0:	8894      	ldrh	r4, [r2, #4]
 80165e2:	f1bb 0f00 	cmp.w	fp, #0
 80165e6:	d03b      	beq.n	8016660 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 80165e8:	f892 900d 	ldrb.w	r9, [r2, #13]
 80165ec:	f1bb 0f01 	cmp.w	fp, #1
 80165f0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80165f4:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80165f8:	f892 900a 	ldrb.w	r9, [r2, #10]
 80165fc:	ea49 0903 	orr.w	r9, r9, r3
 8016600:	d134      	bne.n	801666c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8016602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016604:	eba5 0509 	sub.w	r5, r5, r9
 8016608:	2b00      	cmp	r3, #0
 801660a:	d14f      	bne.n	80166ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801660c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801660e:	eb09 0305 	add.w	r3, r9, r5
 8016612:	4413      	add	r3, r2
 8016614:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016616:	f9b2 2000 	ldrsh.w	r2, [r2]
 801661a:	4293      	cmp	r3, r2
 801661c:	da51      	bge.n	80166c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801661e:	e038      	b.n	8016692 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8016620:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016622:	e79d      	b.n	8016560 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8016624:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8016628:	4659      	mov	r1, fp
 801662a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801662c:	9301      	str	r3, [sp, #4]
 801662e:	ab1d      	add	r3, sp, #116	; 0x74
 8016630:	9300      	str	r3, [sp, #0]
 8016632:	ab1c      	add	r3, sp, #112	; 0x70
 8016634:	f002 fde8 	bl	8019208 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8016638:	4604      	mov	r4, r0
 801663a:	e7c0      	b.n	80165be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801663c:	f8d8 0000 	ldr.w	r0, [r8]
 8016640:	6803      	ldr	r3, [r0, #0]
 8016642:	691b      	ldr	r3, [r3, #16]
 8016644:	4798      	blx	r3
 8016646:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801664a:	4298      	cmp	r0, r3
 801664c:	f000 80a6 	beq.w	801679c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8016650:	f242 030b 	movw	r3, #8203	; 0x200b
 8016654:	4298      	cmp	r0, r3
 8016656:	f000 80a1 	beq.w	801679c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801665a:	f1bb 0f00 	cmp.w	fp, #0
 801665e:	d100      	bne.n	8016662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8016660:	444d      	add	r5, r9
 8016662:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016664:	2a00      	cmp	r2, #0
 8016666:	d1bf      	bne.n	80165e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8016668:	4691      	mov	r9, r2
 801666a:	e097      	b.n	801679c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801666c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801666e:	2b00      	cmp	r3, #0
 8016670:	f000 80ab 	beq.w	80167ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8016674:	f1bb 0f00 	cmp.w	fp, #0
 8016678:	d118      	bne.n	80166ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801667a:	f8d8 0000 	ldr.w	r0, [r8]
 801667e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016680:	6803      	ldr	r3, [r0, #0]
 8016682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016684:	4798      	blx	r3
 8016686:	4405      	add	r5, r0
 8016688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801668a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801668c:	1aeb      	subs	r3, r5, r3
 801668e:	4293      	cmp	r3, r2
 8016690:	dd17      	ble.n	80166c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8016692:	2c00      	cmp	r4, #0
 8016694:	f000 8097 	beq.w	80167c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8016698:	2c0a      	cmp	r4, #10
 801669a:	f040 8085 	bne.w	80167a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801669e:	240a      	movs	r4, #10
 80166a0:	fab4 f084 	clz	r0, r4
 80166a4:	0940      	lsrs	r0, r0, #5
 80166a6:	b01f      	add	sp, #124	; 0x7c
 80166a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ac:	f8d8 0000 	ldr.w	r0, [r8]
 80166b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80166b2:	6803      	ldr	r3, [r0, #0]
 80166b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166b6:	4798      	blx	r3
 80166b8:	f1bb 0f01 	cmp.w	fp, #1
 80166bc:	eba5 0500 	sub.w	r5, r5, r0
 80166c0:	d0a4      	beq.n	801660c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80166c2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80166c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80166c6:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80166ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80166ce:	7b43      	ldrb	r3, [r0, #13]
 80166d0:	4429      	add	r1, r5
 80166d2:	015b      	lsls	r3, r3, #5
 80166d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80166d8:	7983      	ldrb	r3, [r0, #6]
 80166da:	4313      	orrs	r3, r2
 80166dc:	440b      	add	r3, r1
 80166de:	42b3      	cmp	r3, r6
 80166e0:	db5c      	blt.n	801679c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80166e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80166e4:	4299      	cmp	r1, r3
 80166e6:	da59      	bge.n	801679c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80166e8:	f8d8 0000 	ldr.w	r0, [r8]
 80166ec:	42ae      	cmp	r6, r5
 80166ee:	6803      	ldr	r3, [r0, #0]
 80166f0:	bfcc      	ite	gt
 80166f2:	1b76      	subgt	r6, r6, r5
 80166f4:	2600      	movle	r6, #0
 80166f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166f8:	bfc8      	it	gt
 80166fa:	b2b6      	uxthgt	r6, r6
 80166fc:	4798      	blx	r3
 80166fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016700:	7b5a      	ldrb	r2, [r3, #13]
 8016702:	00d1      	lsls	r1, r2, #3
 8016704:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8016708:	7a19      	ldrb	r1, [r3, #8]
 801670a:	4339      	orrs	r1, r7
 801670c:	0657      	lsls	r7, r2, #25
 801670e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8016710:	bf48      	it	mi
 8016712:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8016716:	4407      	add	r7, r0
 8016718:	bf48      	it	mi
 801671a:	b209      	sxthmi	r1, r1
 801671c:	1a7f      	subs	r7, r7, r1
 801671e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8016720:	b2bf      	uxth	r7, r7
 8016722:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016726:	fa0f fa87 	sxth.w	sl, r7
 801672a:	4551      	cmp	r1, sl
 801672c:	dd3a      	ble.n	80167a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801672e:	0112      	lsls	r2, r2, #4
 8016730:	79d8      	ldrb	r0, [r3, #7]
 8016732:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016736:	4302      	orrs	r2, r0
 8016738:	4492      	add	sl, r2
 801673a:	4551      	cmp	r1, sl
 801673c:	dc2e      	bgt.n	801679c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801673e:	1bcf      	subs	r7, r1, r7
 8016740:	468a      	mov	sl, r1
 8016742:	b2bf      	uxth	r7, r7
 8016744:	9319      	str	r3, [sp, #100]	; 0x64
 8016746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016748:	f8d8 0000 	ldr.w	r0, [r8]
 801674c:	681a      	ldr	r2, [r3, #0]
 801674e:	6801      	ldr	r1, [r0, #0]
 8016750:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8016752:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016754:	9313      	str	r3, [sp, #76]	; 0x4c
 8016756:	9218      	str	r2, [sp, #96]	; 0x60
 8016758:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801675a:	4788      	blx	r1
 801675c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8016760:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016762:	910b      	str	r1, [sp, #44]	; 0x2c
 8016764:	f898 100e 	ldrb.w	r1, [r8, #14]
 8016768:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801676a:	910a      	str	r1, [sp, #40]	; 0x28
 801676c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8016770:	9109      	str	r1, [sp, #36]	; 0x24
 8016772:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8016776:	9305      	str	r3, [sp, #20]
 8016778:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801677a:	9206      	str	r2, [sp, #24]
 801677c:	e9cd a601 	strd	sl, r6, [sp, #4]
 8016780:	442e      	add	r6, r5
 8016782:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8016786:	b236      	sxth	r6, r6
 8016788:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801678a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801678e:	9600      	str	r6, [sp, #0]
 8016790:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016792:	681a      	ldr	r2, [r3, #0]
 8016794:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016796:	685b      	ldr	r3, [r3, #4]
 8016798:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801679a:	47b0      	blx	r6
 801679c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801679e:	3301      	adds	r3, #1
 80167a0:	930e      	str	r3, [sp, #56]	; 0x38
 80167a2:	e6e5      	b.n	8016570 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80167a4:	2700      	movs	r7, #0
 80167a6:	e7cd      	b.n	8016744 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 80167a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80167aa:	3501      	adds	r5, #1
 80167ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80167ae:	429d      	cmp	r5, r3
 80167b0:	f6bf af76 	bge.w	80166a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80167b4:	4659      	mov	r1, fp
 80167b6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80167b8:	f7f0 f926 	bl	8006a08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80167bc:	4604      	mov	r4, r0
 80167be:	b110      	cbz	r0, 80167c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80167c0:	280a      	cmp	r0, #10
 80167c2:	d1f2      	bne.n	80167aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80167c4:	e76b      	b.n	801669e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80167c6:	2400      	movs	r4, #0
 80167c8:	e76a      	b.n	80166a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80167ca:	f1bb 0f00 	cmp.w	fp, #0
 80167ce:	f43f af5b 	beq.w	8016688 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80167d2:	e776      	b.n	80166c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

080167d4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80167d4:	b530      	push	{r4, r5, lr}
 80167d6:	8a44      	ldrh	r4, [r0, #18]
 80167d8:	8ac5      	ldrh	r5, [r0, #22]
 80167da:	82c3      	strh	r3, [r0, #22]
 80167dc:	442c      	add	r4, r5
 80167de:	1ae4      	subs	r4, r4, r3
 80167e0:	8b03      	ldrh	r3, [r0, #24]
 80167e2:	8244      	strh	r4, [r0, #18]
 80167e4:	8a84      	ldrh	r4, [r0, #20]
 80167e6:	4422      	add	r2, r4
 80167e8:	440c      	add	r4, r1
 80167ea:	1a59      	subs	r1, r3, r1
 80167ec:	8342      	strh	r2, [r0, #26]
 80167ee:	8284      	strh	r4, [r0, #20]
 80167f0:	8301      	strh	r1, [r0, #24]
 80167f2:	bd30      	pop	{r4, r5, pc}

080167f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80167f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167f8:	7a43      	ldrb	r3, [r0, #9]
 80167fa:	b087      	sub	sp, #28
 80167fc:	4604      	mov	r4, r0
 80167fe:	460f      	mov	r7, r1
 8016800:	1eda      	subs	r2, r3, #3
 8016802:	b2d2      	uxtb	r2, r2
 8016804:	2900      	cmp	r1, #0
 8016806:	d036      	beq.n	8016876 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8016808:	2a01      	cmp	r2, #1
 801680a:	d932      	bls.n	8016872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801680c:	1e58      	subs	r0, r3, #1
 801680e:	f1d0 0b00 	rsbs	fp, r0, #0
 8016812:	eb4b 0b00 	adc.w	fp, fp, r0
 8016816:	1e99      	subs	r1, r3, #2
 8016818:	424b      	negs	r3, r1
 801681a:	414b      	adcs	r3, r1
 801681c:	9303      	str	r3, [sp, #12]
 801681e:	2300      	movs	r3, #0
 8016820:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8016824:	2500      	movs	r5, #0
 8016826:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801682a:	46a9      	mov	r9, r5
 801682c:	8265      	strh	r5, [r4, #18]
 801682e:	82a5      	strh	r5, [r4, #20]
 8016830:	2300      	movs	r3, #0
 8016832:	9305      	str	r3, [sp, #20]
 8016834:	8823      	ldrh	r3, [r4, #0]
 8016836:	2b20      	cmp	r3, #32
 8016838:	d02b      	beq.n	8016892 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801683a:	eba3 020a 	sub.w	r2, r3, sl
 801683e:	4256      	negs	r6, r2
 8016840:	4156      	adcs	r6, r2
 8016842:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016846:	4293      	cmp	r3, r2
 8016848:	d004      	beq.n	8016854 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801684a:	4553      	cmp	r3, sl
 801684c:	bf16      	itet	ne
 801684e:	4699      	movne	r9, r3
 8016850:	2601      	moveq	r6, #1
 8016852:	2600      	movne	r6, #0
 8016854:	ab05      	add	r3, sp, #20
 8016856:	68e2      	ldr	r2, [r4, #12]
 8016858:	7a21      	ldrb	r1, [r4, #8]
 801685a:	6860      	ldr	r0, [r4, #4]
 801685c:	f002 fc7c 	bl	8019158 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016860:	8020      	strh	r0, [r4, #0]
 8016862:	b9c8      	cbnz	r0, 8016898 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8016864:	8b22      	ldrh	r2, [r4, #24]
 8016866:	2300      	movs	r3, #0
 8016868:	4611      	mov	r1, r2
 801686a:	4620      	mov	r0, r4
 801686c:	f7ff ffb2 	bl	80167d4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016870:	e066      	b.n	8016940 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8016872:	468b      	mov	fp, r1
 8016874:	e7cf      	b.n	8016816 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8016876:	3b01      	subs	r3, #1
 8016878:	2a01      	cmp	r2, #1
 801687a:	9103      	str	r1, [sp, #12]
 801687c:	468b      	mov	fp, r1
 801687e:	bf8c      	ite	hi
 8016880:	2200      	movhi	r2, #0
 8016882:	2201      	movls	r2, #1
 8016884:	2b01      	cmp	r3, #1
 8016886:	9202      	str	r2, [sp, #8]
 8016888:	bf8c      	ite	hi
 801688a:	2300      	movhi	r3, #0
 801688c:	2301      	movls	r3, #1
 801688e:	9301      	str	r3, [sp, #4]
 8016890:	e7c8      	b.n	8016824 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8016892:	4699      	mov	r9, r3
 8016894:	2601      	movs	r6, #1
 8016896:	e7dd      	b.n	8016854 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8016898:	8ae3      	ldrh	r3, [r4, #22]
 801689a:	280a      	cmp	r0, #10
 801689c:	f103 0301 	add.w	r3, r3, #1
 80168a0:	82e3      	strh	r3, [r4, #22]
 80168a2:	d0df      	beq.n	8016864 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80168a4:	9a05      	ldr	r2, [sp, #20]
 80168a6:	bb42      	cbnz	r2, 80168fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80168a8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80168ac:	4298      	cmp	r0, r3
 80168ae:	d001      	beq.n	80168b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80168b0:	4550      	cmp	r0, sl
 80168b2:	d1bd      	bne.n	8016830 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80168b4:	8823      	ldrh	r3, [r4, #0]
 80168b6:	8b21      	ldrh	r1, [r4, #24]
 80168b8:	2b20      	cmp	r3, #32
 80168ba:	d001      	beq.n	80168c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80168bc:	4553      	cmp	r3, sl
 80168be:	d131      	bne.n	8016924 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 80168c0:	2e00      	cmp	r6, #0
 80168c2:	bf0a      	itet	eq
 80168c4:	460d      	moveq	r5, r1
 80168c6:	4630      	movne	r0, r6
 80168c8:	2001      	moveq	r0, #1
 80168ca:	440a      	add	r2, r1
 80168cc:	8aa3      	ldrh	r3, [r4, #20]
 80168ce:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80168d2:	b292      	uxth	r2, r2
 80168d4:	8322      	strh	r2, [r4, #24]
 80168d6:	4413      	add	r3, r2
 80168d8:	2f00      	cmp	r7, #0
 80168da:	d03a      	beq.n	8016952 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80168dc:	f1bb 0f00 	cmp.w	fp, #0
 80168e0:	d102      	bne.n	80168e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80168e2:	9903      	ldr	r1, [sp, #12]
 80168e4:	b301      	cbz	r1, 8016928 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80168e6:	b1f8      	cbz	r0, 8016928 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80168e8:	8ba1      	ldrh	r1, [r4, #28]
 80168ea:	4419      	add	r1, r3
 80168ec:	458c      	cmp	ip, r1
 80168ee:	da2a      	bge.n	8016946 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80168f0:	8a61      	ldrh	r1, [r4, #18]
 80168f2:	b341      	cbz	r1, 8016946 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80168f4:	4563      	cmp	r3, ip
 80168f6:	dd9b      	ble.n	8016830 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80168f8:	e01c      	b.n	8016934 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80168fa:	8893      	ldrh	r3, [r2, #4]
 80168fc:	4649      	mov	r1, r9
 80168fe:	8023      	strh	r3, [r4, #0]
 8016900:	f892 800d 	ldrb.w	r8, [r2, #13]
 8016904:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8016908:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801690c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8016910:	ea48 0800 	orr.w	r8, r8, r0
 8016914:	68e0      	ldr	r0, [r4, #12]
 8016916:	6803      	ldr	r3, [r0, #0]
 8016918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801691a:	4798      	blx	r3
 801691c:	eb08 0200 	add.w	r2, r8, r0
 8016920:	b292      	uxth	r2, r2
 8016922:	e7c7      	b.n	80168b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8016924:	2000      	movs	r0, #0
 8016926:	e7d0      	b.n	80168ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8016928:	4563      	cmp	r3, ip
 801692a:	dd81      	ble.n	8016830 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801692c:	8a63      	ldrh	r3, [r4, #18]
 801692e:	2b00      	cmp	r3, #0
 8016930:	f43f af7e 	beq.w	8016830 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016934:	2301      	movs	r3, #1
 8016936:	8ba2      	ldrh	r2, [r4, #28]
 8016938:	77a3      	strb	r3, [r4, #30]
 801693a:	8b63      	ldrh	r3, [r4, #26]
 801693c:	4413      	add	r3, r2
 801693e:	8363      	strh	r3, [r4, #26]
 8016940:	b007      	add	sp, #28
 8016942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016946:	2300      	movs	r3, #0
 8016948:	4611      	mov	r1, r2
 801694a:	4620      	mov	r0, r4
 801694c:	f7ff ff42 	bl	80167d4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016950:	e76e      	b.n	8016830 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016952:	4563      	cmp	r3, ip
 8016954:	dd14      	ble.n	8016980 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8016956:	9b02      	ldr	r3, [sp, #8]
 8016958:	b113      	cbz	r3, 8016960 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801695a:	2301      	movs	r3, #1
 801695c:	460a      	mov	r2, r1
 801695e:	e783      	b.n	8016868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8016960:	9b01      	ldr	r3, [sp, #4]
 8016962:	2b00      	cmp	r3, #0
 8016964:	f43f af64 	beq.w	8016830 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016968:	2800      	cmp	r0, #0
 801696a:	f47f af61 	bne.w	8016830 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801696e:	b116      	cbz	r6, 8016976 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8016970:	2301      	movs	r3, #1
 8016972:	462a      	mov	r2, r5
 8016974:	e779      	b.n	801686a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8016976:	8a63      	ldrh	r3, [r4, #18]
 8016978:	2b00      	cmp	r3, #0
 801697a:	f43f af59 	beq.w	8016830 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801697e:	e7df      	b.n	8016940 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8016980:	2800      	cmp	r0, #0
 8016982:	f47f af55 	bne.w	8016830 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8016986:	2e00      	cmp	r6, #0
 8016988:	f43f af52 	beq.w	8016830 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801698c:	2301      	movs	r3, #1
 801698e:	462a      	mov	r2, r5
 8016990:	e7db      	b.n	801694a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08016992 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8016992:	b530      	push	{r4, r5, lr}
 8016994:	4605      	mov	r5, r0
 8016996:	b08b      	sub	sp, #44	; 0x2c
 8016998:	b191      	cbz	r1, 80169c0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801699a:	2401      	movs	r4, #1
 801699c:	e9cd 3100 	strd	r3, r1, [sp]
 80169a0:	4613      	mov	r3, r2
 80169a2:	4601      	mov	r1, r0
 80169a4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80169a8:	a802      	add	r0, sp, #8
 80169aa:	f7ff fd0b 	bl	80163c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80169ae:	2100      	movs	r1, #0
 80169b0:	a802      	add	r0, sp, #8
 80169b2:	f7ff ff1f 	bl	80167f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80169b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80169ba:	b163      	cbz	r3, 80169d6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80169bc:	3401      	adds	r4, #1
 80169be:	e7f6      	b.n	80169ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 80169c0:	2401      	movs	r4, #1
 80169c2:	f002 fcc3 	bl	801934c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80169c6:	280a      	cmp	r0, #10
 80169c8:	4628      	mov	r0, r5
 80169ca:	bf08      	it	eq
 80169cc:	3401      	addeq	r4, #1
 80169ce:	f002 fcbd 	bl	801934c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80169d2:	2800      	cmp	r0, #0
 80169d4:	d1f7      	bne.n	80169c6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80169d6:	b2a0      	uxth	r0, r4
 80169d8:	b00b      	add	sp, #44	; 0x2c
 80169da:	bd30      	pop	{r4, r5, pc}

080169dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80169dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169e0:	b0e5      	sub	sp, #404	; 0x194
 80169e2:	4689      	mov	r9, r1
 80169e4:	461c      	mov	r4, r3
 80169e6:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 80169ea:	900a      	str	r0, [sp, #40]	; 0x28
 80169ec:	f1ba 0f00 	cmp.w	sl, #0
 80169f0:	f000 80b4 	beq.w	8016b5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	f000 80b0 	beq.w	8016b5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80169fc:	7ba3      	ldrb	r3, [r4, #14]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	f000 80ac 	beq.w	8016b5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016a04:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8016a08:	6810      	ldr	r0, [r2, #0]
 8016a0a:	6851      	ldr	r1, [r2, #4]
 8016a0c:	2500      	movs	r5, #0
 8016a0e:	4643      	mov	r3, r8
 8016a10:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8016a14:	950f      	str	r5, [sp, #60]	; 0x3c
 8016a16:	af19      	add	r7, sp, #100	; 0x64
 8016a18:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8016a1c:	79a2      	ldrb	r2, [r4, #6]
 8016a1e:	c303      	stmia	r3!, {r0, r1}
 8016a20:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8016a24:	a90f      	add	r1, sp, #60	; 0x3c
 8016a26:	4640      	mov	r0, r8
 8016a28:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8016a2c:	f7ff fd40 	bl	80164b0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016a30:	a90f      	add	r1, sp, #60	; 0x3c
 8016a32:	79a2      	ldrb	r2, [r4, #6]
 8016a34:	4608      	mov	r0, r1
 8016a36:	f7ff fd3b 	bl	80164b0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016a3a:	4638      	mov	r0, r7
 8016a3c:	f002 f839 	bl	8018ab2 <_ZN8touchgfx12TextProviderC1Ev>
 8016a40:	6820      	ldr	r0, [r4, #0]
 8016a42:	6803      	ldr	r3, [r0, #0]
 8016a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a46:	4798      	blx	r3
 8016a48:	4606      	mov	r6, r0
 8016a4a:	6820      	ldr	r0, [r4, #0]
 8016a4c:	6803      	ldr	r3, [r0, #0]
 8016a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a50:	4798      	blx	r3
 8016a52:	4633      	mov	r3, r6
 8016a54:	9000      	str	r0, [sp, #0]
 8016a56:	4651      	mov	r1, sl
 8016a58:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8016a5a:	4638      	mov	r0, r7
 8016a5c:	f002 f87c 	bl	8018b58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016a60:	7923      	ldrb	r3, [r4, #4]
 8016a62:	6820      	ldr	r0, [r4, #0]
 8016a64:	9308      	str	r3, [sp, #32]
 8016a66:	6803      	ldr	r3, [r0, #0]
 8016a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a6a:	4798      	blx	r3
 8016a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a70:	181e      	adds	r6, r3, r0
 8016a72:	42ae      	cmp	r6, r5
 8016a74:	dd06      	ble.n	8016a84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8016a76:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8016a7a:	4282      	cmp	r2, r0
 8016a7c:	bfa4      	itt	ge
 8016a7e:	189d      	addge	r5, r3, r2
 8016a80:	fb95 f5f6 	sdivge	r5, r5, r6
 8016a84:	a832      	add	r0, sp, #200	; 0xc8
 8016a86:	f002 f814 	bl	8018ab2 <_ZN8touchgfx12TextProviderC1Ev>
 8016a8a:	7c23      	ldrb	r3, [r4, #16]
 8016a8c:	b17b      	cbz	r3, 8016aae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8016a8e:	6820      	ldr	r0, [r4, #0]
 8016a90:	6803      	ldr	r3, [r0, #0]
 8016a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a94:	4798      	blx	r3
 8016a96:	4683      	mov	fp, r0
 8016a98:	6820      	ldr	r0, [r4, #0]
 8016a9a:	6803      	ldr	r3, [r0, #0]
 8016a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a9e:	4798      	blx	r3
 8016aa0:	465b      	mov	r3, fp
 8016aa2:	9000      	str	r0, [sp, #0]
 8016aa4:	4651      	mov	r1, sl
 8016aa6:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8016aa8:	a832      	add	r0, sp, #200	; 0xc8
 8016aaa:	f002 f855 	bl	8018b58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016aae:	7be1      	ldrb	r1, [r4, #15]
 8016ab0:	a811      	add	r0, sp, #68	; 0x44
 8016ab2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8016ab6:	7963      	ldrb	r3, [r4, #5]
 8016ab8:	1a52      	subs	r2, r2, r1
 8016aba:	7c21      	ldrb	r1, [r4, #16]
 8016abc:	9101      	str	r1, [sp, #4]
 8016abe:	b292      	uxth	r2, r2
 8016ac0:	6821      	ldr	r1, [r4, #0]
 8016ac2:	9100      	str	r1, [sp, #0]
 8016ac4:	a932      	add	r1, sp, #200	; 0xc8
 8016ac6:	f7ff fc7d 	bl	80163c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8016aca:	7c23      	ldrb	r3, [r4, #16]
 8016acc:	b9bb      	cbnz	r3, 8016afe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8016ace:	fa1f fa86 	uxth.w	sl, r6
 8016ad2:	2d00      	cmp	r5, #0
 8016ad4:	dd45      	ble.n	8016b62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8016ad6:	4638      	mov	r0, r7
 8016ad8:	f002 fc38 	bl	801934c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016adc:	2800      	cmp	r0, #0
 8016ade:	d03d      	beq.n	8016b5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016ae0:	280a      	cmp	r0, #10
 8016ae2:	d1f6      	bne.n	8016ad2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8016ae4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016ae8:	3d01      	subs	r5, #1
 8016aea:	4453      	add	r3, sl
 8016aec:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016af0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8016af4:	eba3 030a 	sub.w	r3, r3, sl
 8016af8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8016afc:	e7e9      	b.n	8016ad2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8016afe:	0073      	lsls	r3, r6, #1
 8016b00:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8016b04:	fa1f fa86 	uxth.w	sl, r6
 8016b08:	9309      	str	r3, [sp, #36]	; 0x24
 8016b0a:	2d00      	cmp	r5, #0
 8016b0c:	dd29      	ble.n	8016b62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8016b0e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8016b12:	a811      	add	r0, sp, #68	; 0x44
 8016b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b16:	428b      	cmp	r3, r1
 8016b18:	bfd4      	ite	le
 8016b1a:	2100      	movle	r1, #0
 8016b1c:	2101      	movgt	r1, #1
 8016b1e:	f7ff fe69 	bl	80167f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016b22:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8016b26:	3b01      	subs	r3, #1
 8016b28:	b29b      	uxth	r3, r3
 8016b2a:	455b      	cmp	r3, fp
 8016b2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b2e:	d005      	beq.n	8016b3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8016b30:	7961      	ldrb	r1, [r4, #5]
 8016b32:	4638      	mov	r0, r7
 8016b34:	f7ef ff68 	bl	8006a08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b3a:	e7f4      	b.n	8016b26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8016b3c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016b40:	3d01      	subs	r5, #1
 8016b42:	4453      	add	r3, sl
 8016b44:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016b48:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8016b4c:	eba3 030a 	sub.w	r3, r3, sl
 8016b50:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8016b54:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d1d6      	bne.n	8016b0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8016b5c:	b065      	add	sp, #404	; 0x194
 8016b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b62:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8016b66:	ad4b      	add	r5, sp, #300	; 0x12c
 8016b68:	f04f 0b00 	mov.w	fp, #0
 8016b6c:	7c23      	ldrb	r3, [r4, #16]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d067      	beq.n	8016c42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8016b72:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8016b76:	a811      	add	r0, sp, #68	; 0x44
 8016b78:	458a      	cmp	sl, r1
 8016b7a:	bfd4      	ite	le
 8016b7c:	2100      	movle	r1, #0
 8016b7e:	2101      	movgt	r1, #1
 8016b80:	f7ff fe38 	bl	80167f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016b84:	9b08      	ldr	r3, [sp, #32]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d056      	beq.n	8016c38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8016b8a:	7c23      	ldrb	r3, [r4, #16]
 8016b8c:	2264      	movs	r2, #100	; 0x64
 8016b8e:	4639      	mov	r1, r7
 8016b90:	4628      	mov	r0, r5
 8016b92:	9309      	str	r3, [sp, #36]	; 0x24
 8016b94:	f00f f8fe 	bl	8025d94 <memcpy>
 8016b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d059      	beq.n	8016c52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 8016b9e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8016ba2:	7922      	ldrb	r2, [r4, #4]
 8016ba4:	2a01      	cmp	r2, #1
 8016ba6:	d13d      	bne.n	8016c24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8016ba8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8016bac:	1ac0      	subs	r0, r0, r3
 8016bae:	2302      	movs	r3, #2
 8016bb0:	fb90 f0f3 	sdiv	r0, r0, r3
 8016bb4:	b200      	sxth	r0, r0
 8016bb6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016bba:	4418      	add	r0, r3
 8016bbc:	7c23      	ldrb	r3, [r4, #16]
 8016bbe:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d03a      	beq.n	8016c3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8016bc6:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8016bca:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8016bce:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8016bd2:	9500      	str	r5, [sp, #0]
 8016bd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016bd6:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016bda:	e9cd b703 	strd	fp, r7, [sp, #12]
 8016bde:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8016be2:	464a      	mov	r2, r9
 8016be4:	2100      	movs	r1, #0
 8016be6:	f7ff fc94 	bl	8016512 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016bea:	2800      	cmp	r0, #0
 8016bec:	d1b6      	bne.n	8016b5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016bee:	b2b2      	uxth	r2, r6
 8016bf0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016bf4:	4611      	mov	r1, r2
 8016bf6:	4413      	add	r3, r2
 8016bf8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8016bfc:	b21b      	sxth	r3, r3
 8016bfe:	1a52      	subs	r2, r2, r1
 8016c00:	7c21      	ldrb	r1, [r4, #16]
 8016c02:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016c06:	b212      	sxth	r2, r2
 8016c08:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8016c0c:	b109      	cbz	r1, 8016c12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 8016c0e:	42b2      	cmp	r2, r6
 8016c10:	dba4      	blt.n	8016b5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016c12:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8016c16:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8016c1a:	440a      	add	r2, r1
 8016c1c:	b212      	sxth	r2, r2
 8016c1e:	4293      	cmp	r3, r2
 8016c20:	dda4      	ble.n	8016b6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 8016c22:	e79b      	b.n	8016b5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8016c24:	2a02      	cmp	r2, #2
 8016c26:	d105      	bne.n	8016c34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8016c28:	7be2      	ldrb	r2, [r4, #15]
 8016c2a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8016c2e:	1a80      	subs	r0, r0, r2
 8016c30:	1ac0      	subs	r0, r0, r3
 8016c32:	e7bf      	b.n	8016bb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 8016c34:	2000      	movs	r0, #0
 8016c36:	e7be      	b.n	8016bb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8016c38:	7be0      	ldrb	r0, [r4, #15]
 8016c3a:	e7bc      	b.n	8016bb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8016c3c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016c40:	e7c3      	b.n	8016bca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8016c42:	9b08      	ldr	r3, [sp, #32]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d0f7      	beq.n	8016c38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8016c48:	2264      	movs	r2, #100	; 0x64
 8016c4a:	4639      	mov	r1, r7
 8016c4c:	4628      	mov	r0, r5
 8016c4e:	f00f f8a1 	bl	8025d94 <memcpy>
 8016c52:	2300      	movs	r3, #0
 8016c54:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016c58:	6821      	ldr	r1, [r4, #0]
 8016c5a:	4628      	mov	r0, r5
 8016c5c:	f7ff fbec 	bl	8016438 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016c60:	b203      	sxth	r3, r0
 8016c62:	e79e      	b.n	8016ba2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

08016c64 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016c64:	2b02      	cmp	r3, #2
 8016c66:	b510      	push	{r4, lr}
 8016c68:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016c6c:	d00b      	beq.n	8016c86 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8016c6e:	2b03      	cmp	r3, #3
 8016c70:	d00e      	beq.n	8016c90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8016c72:	2b01      	cmp	r3, #1
 8016c74:	d001      	beq.n	8016c7a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8016c76:	1860      	adds	r0, r4, r1
 8016c78:	bd10      	pop	{r4, pc}
 8016c7a:	8880      	ldrh	r0, [r0, #4]
 8016c7c:	4420      	add	r0, r4
 8016c7e:	b200      	sxth	r0, r0
 8016c80:	1a80      	subs	r0, r0, r2
 8016c82:	3801      	subs	r0, #1
 8016c84:	e7f8      	b.n	8016c78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8016c86:	8880      	ldrh	r0, [r0, #4]
 8016c88:	4420      	add	r0, r4
 8016c8a:	b200      	sxth	r0, r0
 8016c8c:	1a40      	subs	r0, r0, r1
 8016c8e:	e7f8      	b.n	8016c82 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016c90:	18a0      	adds	r0, r4, r2
 8016c92:	e7f1      	b.n	8016c78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08016c94 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016c94:	2b02      	cmp	r3, #2
 8016c96:	b510      	push	{r4, lr}
 8016c98:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8016c9c:	d006      	beq.n	8016cac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8016c9e:	2b03      	cmp	r3, #3
 8016ca0:	d00a      	beq.n	8016cb8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016ca2:	2b01      	cmp	r3, #1
 8016ca4:	bf14      	ite	ne
 8016ca6:	18a0      	addne	r0, r4, r2
 8016ca8:	1860      	addeq	r0, r4, r1
 8016caa:	bd10      	pop	{r4, pc}
 8016cac:	88c0      	ldrh	r0, [r0, #6]
 8016cae:	4420      	add	r0, r4
 8016cb0:	b200      	sxth	r0, r0
 8016cb2:	1a80      	subs	r0, r0, r2
 8016cb4:	3801      	subs	r0, #1
 8016cb6:	e7f8      	b.n	8016caa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8016cb8:	88c0      	ldrh	r0, [r0, #6]
 8016cba:	4420      	add	r0, r4
 8016cbc:	b200      	sxth	r0, r0
 8016cbe:	1a40      	subs	r0, r0, r1
 8016cc0:	e7f8      	b.n	8016cb4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08016cc4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016cc4:	4b01      	ldr	r3, [pc, #4]	; (8016ccc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	601a      	str	r2, [r3, #0]
 8016cca:	4770      	bx	lr
 8016ccc:	2400aef4 	.word	0x2400aef4

08016cd0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	b1c8      	cbz	r0, 8016d08 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016cd4:	0c02      	lsrs	r2, r0, #16
 8016cd6:	0412      	lsls	r2, r2, #16
 8016cd8:	b9a2      	cbnz	r2, 8016d04 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8016cda:	0403      	lsls	r3, r0, #16
 8016cdc:	2010      	movs	r0, #16
 8016cde:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016ce2:	bf04      	itt	eq
 8016ce4:	021b      	lsleq	r3, r3, #8
 8016ce6:	3008      	addeq	r0, #8
 8016ce8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016cec:	bf04      	itt	eq
 8016cee:	011b      	lsleq	r3, r3, #4
 8016cf0:	3004      	addeq	r0, #4
 8016cf2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016cf6:	bf04      	itt	eq
 8016cf8:	009b      	lsleq	r3, r3, #2
 8016cfa:	3002      	addeq	r0, #2
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	db04      	blt.n	8016d0a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016d00:	3001      	adds	r0, #1
 8016d02:	4770      	bx	lr
 8016d04:	2000      	movs	r0, #0
 8016d06:	e7ea      	b.n	8016cde <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016d08:	2020      	movs	r0, #32
 8016d0a:	4770      	bx	lr

08016d0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8016d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d10:	b087      	sub	sp, #28
 8016d12:	4681      	mov	r9, r0
 8016d14:	4698      	mov	r8, r3
 8016d16:	4610      	mov	r0, r2
 8016d18:	460d      	mov	r5, r1
 8016d1a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8016d1e:	b981      	cbnz	r1, 8016d42 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8016d20:	b14b      	cbz	r3, 8016d36 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8016d22:	460b      	mov	r3, r1
 8016d24:	464a      	mov	r2, r9
 8016d26:	4641      	mov	r1, r8
 8016d28:	e9cd 4700 	strd	r4, r7, [sp]
 8016d2c:	f7ff ffee 	bl	8016d0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016d30:	b007      	add	sp, #28
 8016d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d36:	f04f 33ff 	mov.w	r3, #4294967295
 8016d3a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016d3e:	603b      	str	r3, [r7, #0]
 8016d40:	e7f6      	b.n	8016d30 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016d42:	fa32 fa01 	lsrs.w	sl, r2, r1
 8016d46:	d107      	bne.n	8016d58 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8016d48:	fb09 f602 	mul.w	r6, r9, r2
 8016d4c:	fbb6 f0f4 	udiv	r0, r6, r4
 8016d50:	fb04 6610 	mls	r6, r4, r0, r6
 8016d54:	603e      	str	r6, [r7, #0]
 8016d56:	e7eb      	b.n	8016d30 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016d58:	2601      	movs	r6, #1
 8016d5a:	fa09 fb01 	lsl.w	fp, r9, r1
 8016d5e:	408e      	lsls	r6, r1
 8016d60:	fbbb f3f4 	udiv	r3, fp, r4
 8016d64:	3e01      	subs	r6, #1
 8016d66:	9302      	str	r3, [sp, #8]
 8016d68:	fb0a f303 	mul.w	r3, sl, r3
 8016d6c:	4016      	ands	r6, r2
 8016d6e:	9303      	str	r3, [sp, #12]
 8016d70:	4630      	mov	r0, r6
 8016d72:	f7ff ffad 	bl	8016cd0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016d76:	464a      	mov	r2, r9
 8016d78:	460b      	mov	r3, r1
 8016d7a:	4601      	mov	r1, r0
 8016d7c:	4630      	mov	r0, r6
 8016d7e:	e9cd 4700 	strd	r4, r7, [sp]
 8016d82:	f7ff ffc3 	bl	8016d0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016d86:	9b02      	ldr	r3, [sp, #8]
 8016d88:	4606      	mov	r6, r0
 8016d8a:	eb05 0108 	add.w	r1, r5, r8
 8016d8e:	fb04 bb13 	mls	fp, r4, r3, fp
 8016d92:	4658      	mov	r0, fp
 8016d94:	f7ff ff9c 	bl	8016cd0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016d98:	ab05      	add	r3, sp, #20
 8016d9a:	465a      	mov	r2, fp
 8016d9c:	e9cd 4300 	strd	r4, r3, [sp]
 8016da0:	4603      	mov	r3, r0
 8016da2:	4650      	mov	r0, sl
 8016da4:	f7ff ffb2 	bl	8016d0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016da8:	6839      	ldr	r1, [r7, #0]
 8016daa:	9a05      	ldr	r2, [sp, #20]
 8016dac:	9b03      	ldr	r3, [sp, #12]
 8016dae:	4411      	add	r1, r2
 8016db0:	fbb1 f2f4 	udiv	r2, r1, r4
 8016db4:	18d3      	adds	r3, r2, r3
 8016db6:	fb04 1412 	mls	r4, r4, r2, r1
 8016dba:	441e      	add	r6, r3
 8016dbc:	603c      	str	r4, [r7, #0]
 8016dbe:	4430      	add	r0, r6
 8016dc0:	e7b6      	b.n	8016d30 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08016dc2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016dc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016dc6:	b085      	sub	sp, #20
 8016dc8:	f1b0 0900 	subs.w	r9, r0, #0
 8016dcc:	461d      	mov	r5, r3
 8016dce:	4617      	mov	r7, r2
 8016dd0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016dd2:	bfbb      	ittet	lt
 8016dd4:	f1c9 0900 	rsblt	r9, r9, #0
 8016dd8:	f04f 36ff 	movlt.w	r6, #4294967295
 8016ddc:	2601      	movge	r6, #1
 8016dde:	6823      	ldrlt	r3, [r4, #0]
 8016de0:	bfbc      	itt	lt
 8016de2:	425b      	neglt	r3, r3
 8016de4:	6023      	strlt	r3, [r4, #0]
 8016de6:	2a00      	cmp	r2, #0
 8016de8:	da04      	bge.n	8016df4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016dea:	6823      	ldr	r3, [r4, #0]
 8016dec:	4257      	negs	r7, r2
 8016dee:	4276      	negs	r6, r6
 8016df0:	425b      	negs	r3, r3
 8016df2:	6023      	str	r3, [r4, #0]
 8016df4:	2d00      	cmp	r5, #0
 8016df6:	4638      	mov	r0, r7
 8016df8:	bfba      	itte	lt
 8016dfa:	426d      	neglt	r5, r5
 8016dfc:	f04f 38ff 	movlt.w	r8, #4294967295
 8016e00:	f04f 0801 	movge.w	r8, #1
 8016e04:	f7ff ff64 	bl	8016cd0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016e08:	ab03      	add	r3, sp, #12
 8016e0a:	463a      	mov	r2, r7
 8016e0c:	e9cd 5300 	strd	r5, r3, [sp]
 8016e10:	4603      	mov	r3, r0
 8016e12:	4648      	mov	r0, r9
 8016e14:	f7ff ff7a 	bl	8016d0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016e18:	6823      	ldr	r3, [r4, #0]
 8016e1a:	9a03      	ldr	r2, [sp, #12]
 8016e1c:	4546      	cmp	r6, r8
 8016e1e:	441a      	add	r2, r3
 8016e20:	fb92 f3f5 	sdiv	r3, r2, r5
 8016e24:	4418      	add	r0, r3
 8016e26:	fb05 2313 	mls	r3, r5, r3, r2
 8016e2a:	bf18      	it	ne
 8016e2c:	4240      	negne	r0, r0
 8016e2e:	1c72      	adds	r2, r6, #1
 8016e30:	6023      	str	r3, [r4, #0]
 8016e32:	d105      	bne.n	8016e40 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	f1c3 0200 	rsb	r2, r3, #0
 8016e3a:	db0b      	blt.n	8016e54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8016e3c:	6022      	str	r2, [r4, #0]
 8016e3e:	e006      	b.n	8016e4e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016e40:	2e01      	cmp	r6, #1
 8016e42:	d104      	bne.n	8016e4e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	da02      	bge.n	8016e4e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016e48:	442b      	add	r3, r5
 8016e4a:	3801      	subs	r0, #1
 8016e4c:	6023      	str	r3, [r4, #0]
 8016e4e:	b005      	add	sp, #20
 8016e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e54:	3801      	subs	r0, #1
 8016e56:	1b52      	subs	r2, r2, r5
 8016e58:	e7f0      	b.n	8016e3c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08016e5c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016e5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016e60:	4c1c      	ldr	r4, [pc, #112]	; (8016ed4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8016e62:	4605      	mov	r5, r0
 8016e64:	6807      	ldr	r7, [r0, #0]
 8016e66:	69a3      	ldr	r3, [r4, #24]
 8016e68:	b92b      	cbnz	r3, 8016e76 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8016e6a:	6840      	ldr	r0, [r0, #4]
 8016e6c:	e9c5 7000 	strd	r7, r0, [r5]
 8016e70:	b004      	add	sp, #16
 8016e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e76:	f04f 0802 	mov.w	r8, #2
 8016e7a:	68a2      	ldr	r2, [r4, #8]
 8016e7c:	ae04      	add	r6, sp, #16
 8016e7e:	6820      	ldr	r0, [r4, #0]
 8016e80:	fb93 f1f8 	sdiv	r1, r3, r8
 8016e84:	440a      	add	r2, r1
 8016e86:	69e1      	ldr	r1, [r4, #28]
 8016e88:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016e8c:	463a      	mov	r2, r7
 8016e8e:	9600      	str	r6, [sp, #0]
 8016e90:	f7ff ff97 	bl	8016dc2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016e94:	69a3      	ldr	r3, [r4, #24]
 8016e96:	4607      	mov	r7, r0
 8016e98:	686a      	ldr	r2, [r5, #4]
 8016e9a:	6a21      	ldr	r1, [r4, #32]
 8016e9c:	9600      	str	r6, [sp, #0]
 8016e9e:	6860      	ldr	r0, [r4, #4]
 8016ea0:	f7ff ff8f 	bl	8016dc2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016ea4:	69a3      	ldr	r3, [r4, #24]
 8016ea6:	6962      	ldr	r2, [r4, #20]
 8016ea8:	4407      	add	r7, r0
 8016eaa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016eac:	9600      	str	r6, [sp, #0]
 8016eae:	68e0      	ldr	r0, [r4, #12]
 8016eb0:	fb93 f8f8 	sdiv	r8, r3, r8
 8016eb4:	4442      	add	r2, r8
 8016eb6:	9203      	str	r2, [sp, #12]
 8016eb8:	682a      	ldr	r2, [r5, #0]
 8016eba:	f7ff ff82 	bl	8016dc2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016ebe:	4680      	mov	r8, r0
 8016ec0:	9600      	str	r6, [sp, #0]
 8016ec2:	69a3      	ldr	r3, [r4, #24]
 8016ec4:	686a      	ldr	r2, [r5, #4]
 8016ec6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016ec8:	6920      	ldr	r0, [r4, #16]
 8016eca:	f7ff ff7a 	bl	8016dc2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016ece:	4440      	add	r0, r8
 8016ed0:	e7cc      	b.n	8016e6c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8016ed2:	bf00      	nop
 8016ed4:	2400aef8 	.word	0x2400aef8

08016ed8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016ed8:	4b07      	ldr	r3, [pc, #28]	; (8016ef8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	2b01      	cmp	r3, #1
 8016ede:	d109      	bne.n	8016ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016ee0:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016ee4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016ee8:	8003      	strh	r3, [r0, #0]
 8016eea:	4b04      	ldr	r3, [pc, #16]	; (8016efc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016eec:	881b      	ldrh	r3, [r3, #0]
 8016eee:	3b01      	subs	r3, #1
 8016ef0:	1a9b      	subs	r3, r3, r2
 8016ef2:	800b      	strh	r3, [r1, #0]
 8016ef4:	4770      	bx	lr
 8016ef6:	bf00      	nop
 8016ef8:	2400aee4 	.word	0x2400aee4
 8016efc:	2400aee8 	.word	0x2400aee8

08016f00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016f00:	4b07      	ldr	r3, [pc, #28]	; (8016f20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016f02:	b510      	push	{r4, lr}
 8016f04:	781b      	ldrb	r3, [r3, #0]
 8016f06:	2b01      	cmp	r3, #1
 8016f08:	d108      	bne.n	8016f1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016f0a:	4b06      	ldr	r3, [pc, #24]	; (8016f24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016f0c:	880c      	ldrh	r4, [r1, #0]
 8016f0e:	881b      	ldrh	r3, [r3, #0]
 8016f10:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016f14:	3b01      	subs	r3, #1
 8016f16:	1b1b      	subs	r3, r3, r4
 8016f18:	8003      	strh	r3, [r0, #0]
 8016f1a:	800a      	strh	r2, [r1, #0]
 8016f1c:	bd10      	pop	{r4, pc}
 8016f1e:	bf00      	nop
 8016f20:	2400aee4 	.word	0x2400aee4
 8016f24:	2400aee8 	.word	0x2400aee8

08016f28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016f28:	4b0a      	ldr	r3, [pc, #40]	; (8016f54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016f2a:	b510      	push	{r4, lr}
 8016f2c:	781b      	ldrb	r3, [r3, #0]
 8016f2e:	2b01      	cmp	r3, #1
 8016f30:	d10e      	bne.n	8016f50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016f32:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016f36:	8843      	ldrh	r3, [r0, #2]
 8016f38:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016f3c:	18ca      	adds	r2, r1, r3
 8016f3e:	4b06      	ldr	r3, [pc, #24]	; (8016f58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016f40:	8044      	strh	r4, [r0, #2]
 8016f42:	881b      	ldrh	r3, [r3, #0]
 8016f44:	1a9b      	subs	r3, r3, r2
 8016f46:	8003      	strh	r3, [r0, #0]
 8016f48:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016f4c:	8081      	strh	r1, [r0, #4]
 8016f4e:	80c3      	strh	r3, [r0, #6]
 8016f50:	bd10      	pop	{r4, pc}
 8016f52:	bf00      	nop
 8016f54:	2400aee4 	.word	0x2400aee4
 8016f58:	2400aee8 	.word	0x2400aee8

08016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016f5c:	4b08      	ldr	r3, [pc, #32]	; (8016f80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8016f5e:	781b      	ldrb	r3, [r3, #0]
 8016f60:	2b01      	cmp	r3, #1
 8016f62:	d10c      	bne.n	8016f7e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016f64:	8803      	ldrh	r3, [r0, #0]
 8016f66:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016f6a:	8842      	ldrh	r2, [r0, #2]
 8016f6c:	8002      	strh	r2, [r0, #0]
 8016f6e:	185a      	adds	r2, r3, r1
 8016f70:	4b04      	ldr	r3, [pc, #16]	; (8016f84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016f72:	881b      	ldrh	r3, [r3, #0]
 8016f74:	1a9b      	subs	r3, r3, r2
 8016f76:	8043      	strh	r3, [r0, #2]
 8016f78:	88c3      	ldrh	r3, [r0, #6]
 8016f7a:	80c1      	strh	r1, [r0, #6]
 8016f7c:	8083      	strh	r3, [r0, #4]
 8016f7e:	4770      	bx	lr
 8016f80:	2400aee4 	.word	0x2400aee4
 8016f84:	2400aee8 	.word	0x2400aee8

08016f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016f88:	4b07      	ldr	r3, [pc, #28]	; (8016fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016f8a:	b510      	push	{r4, lr}
 8016f8c:	781b      	ldrb	r3, [r3, #0]
 8016f8e:	2b01      	cmp	r3, #1
 8016f90:	d108      	bne.n	8016fa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016f92:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016f96:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016f9a:	8003      	strh	r3, [r0, #0]
 8016f9c:	8893      	ldrh	r3, [r2, #4]
 8016f9e:	3b01      	subs	r3, #1
 8016fa0:	1b1b      	subs	r3, r3, r4
 8016fa2:	800b      	strh	r3, [r1, #0]
 8016fa4:	bd10      	pop	{r4, pc}
 8016fa6:	bf00      	nop
 8016fa8:	2400aee4 	.word	0x2400aee4

08016fac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016fac:	4b0a      	ldr	r3, [pc, #40]	; (8016fd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016fae:	460a      	mov	r2, r1
 8016fb0:	b510      	push	{r4, lr}
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	2b01      	cmp	r3, #1
 8016fb6:	d10d      	bne.n	8016fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016fb8:	8881      	ldrh	r1, [r0, #4]
 8016fba:	8803      	ldrh	r3, [r0, #0]
 8016fbc:	440b      	add	r3, r1
 8016fbe:	4601      	mov	r1, r0
 8016fc0:	3b01      	subs	r3, #1
 8016fc2:	f821 3b02 	strh.w	r3, [r1], #2
 8016fc6:	f7ff ffdf 	bl	8016f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016fca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016fce:	88c2      	ldrh	r2, [r0, #6]
 8016fd0:	80c3      	strh	r3, [r0, #6]
 8016fd2:	8082      	strh	r2, [r0, #4]
 8016fd4:	bd10      	pop	{r4, pc}
 8016fd6:	bf00      	nop
 8016fd8:	2400aee4 	.word	0x2400aee4

08016fdc <_ZN8touchgfx11Application13requestRedrawEv>:
 8016fdc:	4b06      	ldr	r3, [pc, #24]	; (8016ff8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016fde:	2100      	movs	r1, #0
 8016fe0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016fe4:	4b05      	ldr	r3, [pc, #20]	; (8016ffc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016fe6:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8016fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fee:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8016ff2:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8016ff6:	4770      	bx	lr
 8016ff8:	2400aee0 	.word	0x2400aee0
 8016ffc:	2400aee2 	.word	0x2400aee2

08017000 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017000:	4b03      	ldr	r3, [pc, #12]	; (8017010 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017002:	6818      	ldr	r0, [r3, #0]
 8017004:	b110      	cbz	r0, 801700c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017006:	6803      	ldr	r3, [r0, #0]
 8017008:	699b      	ldr	r3, [r3, #24]
 801700a:	4718      	bx	r3
 801700c:	4770      	bx	lr
 801700e:	bf00      	nop
 8017010:	2400af28 	.word	0x2400af28

08017014 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017014:	4770      	bx	lr
	...

08017018 <_ZN8touchgfx11Application4drawEv>:
 8017018:	4b09      	ldr	r3, [pc, #36]	; (8017040 <_ZN8touchgfx11Application4drawEv+0x28>)
 801701a:	b507      	push	{r0, r1, r2, lr}
 801701c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017020:	2100      	movs	r1, #0
 8017022:	4b08      	ldr	r3, [pc, #32]	; (8017044 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017024:	9100      	str	r1, [sp, #0]
 8017026:	4669      	mov	r1, sp
 8017028:	f9b3 3000 	ldrsh.w	r3, [r3]
 801702c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017030:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017034:	6803      	ldr	r3, [r0, #0]
 8017036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017038:	4798      	blx	r3
 801703a:	b003      	add	sp, #12
 801703c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017040:	2400aee0 	.word	0x2400aee0
 8017044:	2400aee2 	.word	0x2400aee2

08017048 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017048:	4b03      	ldr	r3, [pc, #12]	; (8017058 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801704a:	6818      	ldr	r0, [r3, #0]
 801704c:	b110      	cbz	r0, 8017054 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801704e:	6803      	ldr	r3, [r0, #0]
 8017050:	69db      	ldr	r3, [r3, #28]
 8017052:	4718      	bx	r3
 8017054:	4770      	bx	lr
 8017056:	bf00      	nop
 8017058:	2400af28 	.word	0x2400af28

0801705c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801705c:	4b03      	ldr	r3, [pc, #12]	; (801706c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801705e:	6818      	ldr	r0, [r3, #0]
 8017060:	b110      	cbz	r0, 8017068 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017062:	6803      	ldr	r3, [r0, #0]
 8017064:	6a1b      	ldr	r3, [r3, #32]
 8017066:	4718      	bx	r3
 8017068:	4770      	bx	lr
 801706a:	bf00      	nop
 801706c:	2400af28 	.word	0x2400af28

08017070 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017070:	4b03      	ldr	r3, [pc, #12]	; (8017080 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017072:	6818      	ldr	r0, [r3, #0]
 8017074:	b110      	cbz	r0, 801707c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017076:	6803      	ldr	r3, [r0, #0]
 8017078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801707a:	4718      	bx	r3
 801707c:	4770      	bx	lr
 801707e:	bf00      	nop
 8017080:	2400af28 	.word	0x2400af28

08017084 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017084:	b570      	push	{r4, r5, r6, lr}
 8017086:	4d38      	ldr	r5, [pc, #224]	; (8017168 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 8017088:	4604      	mov	r4, r0
 801708a:	6828      	ldr	r0, [r5, #0]
 801708c:	b140      	cbz	r0, 80170a0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801708e:	7a03      	ldrb	r3, [r0, #8]
 8017090:	b933      	cbnz	r3, 80170a0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017092:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8017096:	6803      	ldr	r3, [r0, #0]
 8017098:	689b      	ldr	r3, [r3, #8]
 801709a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801709e:	4718      	bx	r3
 80170a0:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80170a4:	b97b      	cbnz	r3, 80170c6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80170a6:	b170      	cbz	r0, 80170c6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80170a8:	7a03      	ldrb	r3, [r0, #8]
 80170aa:	b163      	cbz	r3, 80170c6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80170ac:	4b2f      	ldr	r3, [pc, #188]	; (801716c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 80170ae:	6818      	ldr	r0, [r3, #0]
 80170b0:	b110      	cbz	r0, 80170b8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80170b2:	6803      	ldr	r3, [r0, #0]
 80170b4:	691b      	ldr	r3, [r3, #16]
 80170b6:	4798      	blx	r3
 80170b8:	6828      	ldr	r0, [r5, #0]
 80170ba:	6803      	ldr	r3, [r0, #0]
 80170bc:	68db      	ldr	r3, [r3, #12]
 80170be:	4798      	blx	r3
 80170c0:	2301      	movs	r3, #1
 80170c2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80170c6:	2500      	movs	r5, #0
 80170c8:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80170cc:	42a8      	cmp	r0, r5
 80170ce:	dd0c      	ble.n	80170ea <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80170d0:	1963      	adds	r3, r4, r5
 80170d2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80170d6:	b132      	cbz	r2, 80170e6 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80170d8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80170dc:	4413      	add	r3, r2
 80170de:	6858      	ldr	r0, [r3, #4]
 80170e0:	6803      	ldr	r3, [r0, #0]
 80170e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80170e4:	4798      	blx	r3
 80170e6:	3501      	adds	r5, #1
 80170e8:	e7ee      	b.n	80170c8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80170ea:	2300      	movs	r3, #0
 80170ec:	461a      	mov	r2, r3
 80170ee:	4298      	cmp	r0, r3
 80170f0:	d10f      	bne.n	8017112 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 80170f2:	1d25      	adds	r5, r4, #4
 80170f4:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 80170f8:	4291      	cmp	r1, r2
 80170fa:	dd2d      	ble.n	8017158 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 80170fc:	1e48      	subs	r0, r1, #1
 80170fe:	b280      	uxth	r0, r0
 8017100:	4288      	cmp	r0, r1
 8017102:	d31a      	bcc.n	801713a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8017104:	4b1a      	ldr	r3, [pc, #104]	; (8017170 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 8017106:	f240 11a9 	movw	r1, #425	; 0x1a9
 801710a:	4a1a      	ldr	r2, [pc, #104]	; (8017174 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801710c:	481a      	ldr	r0, [pc, #104]	; (8017178 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801710e:	f00e fdc3 	bl	8025c98 <__assert_func>
 8017112:	18e1      	adds	r1, r4, r3
 8017114:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8017118:	b16d      	cbz	r5, 8017136 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801711a:	429a      	cmp	r2, r3
 801711c:	d00a      	beq.n	8017134 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801711e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8017122:	4431      	add	r1, r6
 8017124:	684e      	ldr	r6, [r1, #4]
 8017126:	b291      	uxth	r1, r2
 8017128:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801712c:	604e      	str	r6, [r1, #4]
 801712e:	18a1      	adds	r1, r4, r2
 8017130:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8017134:	3201      	adds	r2, #1
 8017136:	3301      	adds	r3, #1
 8017138:	e7d9      	b.n	80170ee <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801713a:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801713e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8017142:	3304      	adds	r3, #4
 8017144:	428b      	cmp	r3, r1
 8017146:	d004      	beq.n	8017152 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8017148:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801714c:	f843 6c04 	str.w	r6, [r3, #-4]
 8017150:	e7f8      	b.n	8017144 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8017152:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8017156:	e7cd      	b.n	80170f4 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8017158:	4b04      	ldr	r3, [pc, #16]	; (801716c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801715a:	6818      	ldr	r0, [r3, #0]
 801715c:	b110      	cbz	r0, 8017164 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801715e:	6803      	ldr	r3, [r0, #0]
 8017160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017162:	e79a      	b.n	801709a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017164:	bd70      	pop	{r4, r5, r6, pc}
 8017166:	bf00      	nop
 8017168:	2400af2c 	.word	0x2400af2c
 801716c:	2400af28 	.word	0x2400af28
 8017170:	080292a4 	.word	0x080292a4
 8017174:	080294fd 	.word	0x080294fd
 8017178:	080292b2 	.word	0x080292b2

0801717c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801717c:	b570      	push	{r4, r5, r6, lr}
 801717e:	4606      	mov	r6, r0
 8017180:	460c      	mov	r4, r1
 8017182:	b929      	cbnz	r1, 8017190 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8017184:	4b0c      	ldr	r3, [pc, #48]	; (80171b8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8017186:	2167      	movs	r1, #103	; 0x67
 8017188:	4a0c      	ldr	r2, [pc, #48]	; (80171bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801718a:	480d      	ldr	r0, [pc, #52]	; (80171c0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801718c:	f00e fd84 	bl	8025c98 <__assert_func>
 8017190:	2300      	movs	r3, #0
 8017192:	4d0c      	ldr	r5, [pc, #48]	; (80171c4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8017194:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017198:	6828      	ldr	r0, [r5, #0]
 801719a:	b110      	cbz	r0, 80171a2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801719c:	6803      	ldr	r3, [r0, #0]
 801719e:	695b      	ldr	r3, [r3, #20]
 80171a0:	4798      	blx	r3
 80171a2:	602c      	str	r4, [r5, #0]
 80171a4:	4620      	mov	r0, r4
 80171a6:	6823      	ldr	r3, [r4, #0]
 80171a8:	68db      	ldr	r3, [r3, #12]
 80171aa:	4798      	blx	r3
 80171ac:	6833      	ldr	r3, [r6, #0]
 80171ae:	4630      	mov	r0, r6
 80171b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171b6:	4718      	bx	r3
 80171b8:	08029270 	.word	0x08029270
 80171bc:	08029378 	.word	0x08029378
 80171c0:	0802927a 	.word	0x0802927a
 80171c4:	2400af28 	.word	0x2400af28

080171c8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80171c8:	b510      	push	{r4, lr}
 80171ca:	f9b1 4000 	ldrsh.w	r4, [r1]
 80171ce:	888a      	ldrh	r2, [r1, #4]
 80171d0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80171d4:	4422      	add	r2, r4
 80171d6:	b212      	sxth	r2, r2
 80171d8:	4293      	cmp	r3, r2
 80171da:	da15      	bge.n	8017208 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80171dc:	8882      	ldrh	r2, [r0, #4]
 80171de:	4413      	add	r3, r2
 80171e0:	b21b      	sxth	r3, r3
 80171e2:	429c      	cmp	r4, r3
 80171e4:	da10      	bge.n	8017208 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80171e6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80171ea:	88c9      	ldrh	r1, [r1, #6]
 80171ec:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80171f0:	4419      	add	r1, r3
 80171f2:	b209      	sxth	r1, r1
 80171f4:	428a      	cmp	r2, r1
 80171f6:	da07      	bge.n	8017208 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80171f8:	88c0      	ldrh	r0, [r0, #6]
 80171fa:	4410      	add	r0, r2
 80171fc:	b200      	sxth	r0, r0
 80171fe:	4283      	cmp	r3, r0
 8017200:	bfac      	ite	ge
 8017202:	2000      	movge	r0, #0
 8017204:	2001      	movlt	r0, #1
 8017206:	bd10      	pop	{r4, pc}
 8017208:	2000      	movs	r0, #0
 801720a:	e7fc      	b.n	8017206 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801720c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801720c:	b570      	push	{r4, r5, r6, lr}
 801720e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017212:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017216:	42ac      	cmp	r4, r5
 8017218:	db18      	blt.n	801724c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801721a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801721e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017222:	429a      	cmp	r2, r3
 8017224:	db12      	blt.n	801724c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017226:	8886      	ldrh	r6, [r0, #4]
 8017228:	4435      	add	r5, r6
 801722a:	888e      	ldrh	r6, [r1, #4]
 801722c:	4434      	add	r4, r6
 801722e:	b22d      	sxth	r5, r5
 8017230:	b224      	sxth	r4, r4
 8017232:	42a5      	cmp	r5, r4
 8017234:	db0a      	blt.n	801724c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017236:	88c0      	ldrh	r0, [r0, #6]
 8017238:	4418      	add	r0, r3
 801723a:	88cb      	ldrh	r3, [r1, #6]
 801723c:	441a      	add	r2, r3
 801723e:	b200      	sxth	r0, r0
 8017240:	b212      	sxth	r2, r2
 8017242:	4290      	cmp	r0, r2
 8017244:	bfb4      	ite	lt
 8017246:	2000      	movlt	r0, #0
 8017248:	2001      	movge	r0, #1
 801724a:	bd70      	pop	{r4, r5, r6, pc}
 801724c:	2000      	movs	r0, #0
 801724e:	e7fc      	b.n	801724a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08017250 <_ZN8touchgfx11Application11getInstanceEv>:
 8017250:	4b01      	ldr	r3, [pc, #4]	; (8017258 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017252:	6818      	ldr	r0, [r3, #0]
 8017254:	4770      	bx	lr
 8017256:	bf00      	nop
 8017258:	2400af38 	.word	0x2400af38

0801725c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801725c:	b570      	push	{r4, r5, r6, lr}
 801725e:	2200      	movs	r2, #0
 8017260:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8017264:	1d04      	adds	r4, r0, #4
 8017266:	b295      	uxth	r5, r2
 8017268:	42ab      	cmp	r3, r5
 801726a:	d90e      	bls.n	801728a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801726c:	f854 6b04 	ldr.w	r6, [r4], #4
 8017270:	4615      	mov	r5, r2
 8017272:	3201      	adds	r2, #1
 8017274:	428e      	cmp	r6, r1
 8017276:	d1f6      	bne.n	8017266 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8017278:	4428      	add	r0, r5
 801727a:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801727e:	2bff      	cmp	r3, #255	; 0xff
 8017280:	d002      	beq.n	8017288 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8017282:	3301      	adds	r3, #1
 8017284:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8017288:	bd70      	pop	{r4, r5, r6, pc}
 801728a:	2b20      	cmp	r3, #32
 801728c:	d106      	bne.n	801729c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801728e:	4b09      	ldr	r3, [pc, #36]	; (80172b4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 8017290:	f240 215f 	movw	r1, #607	; 0x25f
 8017294:	4a08      	ldr	r2, [pc, #32]	; (80172b8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 8017296:	4809      	ldr	r0, [pc, #36]	; (80172bc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 8017298:	f00e fcfe 	bl	8025c98 <__assert_func>
 801729c:	18c2      	adds	r2, r0, r3
 801729e:	2401      	movs	r4, #1
 80172a0:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 80172a4:	191a      	adds	r2, r3, r4
 80172a6:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 80172aa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80172ae:	6041      	str	r1, [r0, #4]
 80172b0:	e7ea      	b.n	8017288 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 80172b2:	bf00      	nop
 80172b4:	080292db 	.word	0x080292db
 80172b8:	080293bc 	.word	0x080293bc
 80172bc:	0802927a 	.word	0x0802927a

080172c0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 80172c0:	b570      	push	{r4, r5, r6, lr}
 80172c2:	2300      	movs	r3, #0
 80172c4:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 80172c8:	1d04      	adds	r4, r0, #4
 80172ca:	b29a      	uxth	r2, r3
 80172cc:	4296      	cmp	r6, r2
 80172ce:	d90a      	bls.n	80172e6 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 80172d0:	f854 2b04 	ldr.w	r2, [r4], #4
 80172d4:	428a      	cmp	r2, r1
 80172d6:	d107      	bne.n	80172e8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 80172d8:	18c5      	adds	r5, r0, r3
 80172da:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 80172de:	b11a      	cbz	r2, 80172e8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 80172e0:	3a01      	subs	r2, #1
 80172e2:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 80172e6:	bd70      	pop	{r4, r5, r6, pc}
 80172e8:	3301      	adds	r3, #1
 80172ea:	e7ee      	b.n	80172ca <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

080172ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80172ec:	2300      	movs	r3, #0
 80172ee:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80172f2:	30a8      	adds	r0, #168	; 0xa8
 80172f4:	f820 3c24 	strh.w	r3, [r0, #-36]
 80172f8:	f802 3b01 	strb.w	r3, [r2], #1
 80172fc:	4282      	cmp	r2, r0
 80172fe:	d1fb      	bne.n	80172f8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8017300:	4770      	bx	lr

08017302 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017302:	4603      	mov	r3, r0
 8017304:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017308:	2200      	movs	r2, #0
 801730a:	801a      	strh	r2, [r3, #0]
 801730c:	3308      	adds	r3, #8
 801730e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8017312:	f823 2c04 	strh.w	r2, [r3, #-4]
 8017316:	f823 2c02 	strh.w	r2, [r3, #-2]
 801731a:	428b      	cmp	r3, r1
 801731c:	d1f5      	bne.n	801730a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801731e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017322:	4770      	bx	lr

08017324 <_ZN8touchgfx11ApplicationC1Ev>:
 8017324:	b570      	push	{r4, r5, r6, lr}
 8017326:	4b1a      	ldr	r3, [pc, #104]	; (8017390 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8017328:	2500      	movs	r5, #0
 801732a:	4604      	mov	r4, r0
 801732c:	30a8      	adds	r0, #168	; 0xa8
 801732e:	f840 3ca8 	str.w	r3, [r0, #-168]
 8017332:	f820 5c24 	strh.w	r5, [r0, #-36]
 8017336:	f7ff ffe4 	bl	8017302 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801733a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801733e:	f7ff ffe0 	bl	8017302 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017342:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8017346:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801734a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801734e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8017352:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8017356:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801735a:	490e      	ldr	r1, [pc, #56]	; (8017394 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801735c:	480e      	ldr	r0, [pc, #56]	; (8017398 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801735e:	f00e fb5f 	bl	8025a20 <CRC_Lock>
 8017362:	4e0e      	ldr	r6, [pc, #56]	; (801739c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017364:	4b0e      	ldr	r3, [pc, #56]	; (80173a0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017366:	b158      	cbz	r0, 8017380 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8017368:	801d      	strh	r5, [r3, #0]
 801736a:	2300      	movs	r3, #0
 801736c:	4a0d      	ldr	r2, [pc, #52]	; (80173a4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801736e:	4620      	mov	r0, r4
 8017370:	6013      	str	r3, [r2, #0]
 8017372:	4a0d      	ldr	r2, [pc, #52]	; (80173a8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8017374:	6033      	str	r3, [r6, #0]
 8017376:	6013      	str	r3, [r2, #0]
 8017378:	f7ff ffb8 	bl	80172ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801737c:	4620      	mov	r0, r4
 801737e:	bd70      	pop	{r4, r5, r6, pc}
 8017380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017384:	2002      	movs	r0, #2
 8017386:	801a      	strh	r2, [r3, #0]
 8017388:	6030      	str	r0, [r6, #0]
 801738a:	f001 f9e5 	bl	8018758 <_ZN8touchgfx6Screen4drawEv>
 801738e:	e7ec      	b.n	801736a <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8017390:	0802933c 	.word	0x0802933c
 8017394:	b5e8b5cd 	.word	0xb5e8b5cd
 8017398:	f407a5c2 	.word	0xf407a5c2
 801739c:	2400af28 	.word	0x2400af28
 80173a0:	2400004e 	.word	0x2400004e
 80173a4:	2400af38 	.word	0x2400af38
 80173a8:	2400af2c 	.word	0x2400af2c

080173ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80173ac:	b510      	push	{r4, lr}
 80173ae:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80173b2:	428b      	cmp	r3, r1
 80173b4:	d806      	bhi.n	80173c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 80173b6:	4b0b      	ldr	r3, [pc, #44]	; (80173e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 80173b8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80173bc:	4a0a      	ldr	r2, [pc, #40]	; (80173e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 80173be:	480b      	ldr	r0, [pc, #44]	; (80173ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 80173c0:	f00e fc6a 	bl	8025c98 <__assert_func>
 80173c4:	3b01      	subs	r3, #1
 80173c6:	b29b      	uxth	r3, r3
 80173c8:	428b      	cmp	r3, r1
 80173ca:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80173ce:	d908      	bls.n	80173e2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 80173d0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80173d4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80173d8:	681a      	ldr	r2, [r3, #0]
 80173da:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80173de:	685a      	ldr	r2, [r3, #4]
 80173e0:	6062      	str	r2, [r4, #4]
 80173e2:	bd10      	pop	{r4, pc}
 80173e4:	080292a4 	.word	0x080292a4
 80173e8:	08029401 	.word	0x08029401
 80173ec:	080292b2 	.word	0x080292b2

080173f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80173f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80173f2:	466b      	mov	r3, sp
 80173f4:	4604      	mov	r4, r0
 80173f6:	e883 0006 	stmia.w	r3, {r1, r2}
 80173fa:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80173fe:	2a07      	cmp	r2, #7
 8017400:	d906      	bls.n	8017410 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8017402:	4b09      	ldr	r3, [pc, #36]	; (8017428 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8017404:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8017408:	4a08      	ldr	r2, [pc, #32]	; (801742c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801740a:	4809      	ldr	r0, [pc, #36]	; (8017430 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801740c:	f00e fc44 	bl	8025c98 <__assert_func>
 8017410:	1c51      	adds	r1, r2, #1
 8017412:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8017416:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801741a:	cb03      	ldmia	r3!, {r0, r1}
 801741c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8017420:	6069      	str	r1, [r5, #4]
 8017422:	b003      	add	sp, #12
 8017424:	bd30      	pop	{r4, r5, pc}
 8017426:	bf00      	nop
 8017428:	08029303 	.word	0x08029303
 801742c:	08029497 	.word	0x08029497
 8017430:	080292b2 	.word	0x080292b2

08017434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017438:	b08d      	sub	sp, #52	; 0x34
 801743a:	4683      	mov	fp, r0
 801743c:	ac08      	add	r4, sp, #32
 801743e:	4620      	mov	r0, r4
 8017440:	e884 0006 	stmia.w	r4, {r1, r2}
 8017444:	f7fc f831 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017448:	2800      	cmp	r0, #0
 801744a:	d16a      	bne.n	8017522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801744c:	9402      	str	r4, [sp, #8]
 801744e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8017452:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8017456:	2400      	movs	r4, #0
 8017458:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801745c:	9301      	str	r3, [sp, #4]
 801745e:	36a0      	adds	r6, #160	; 0xa0
 8017460:	42a5      	cmp	r5, r4
 8017462:	d00d      	beq.n	8017480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8017464:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8017468:	9802      	ldr	r0, [sp, #8]
 801746a:	f7ff fecf 	bl	801720c <_ZNK8touchgfx4Rect8includesERKS0_>
 801746e:	b128      	cbz	r0, 801747c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8017470:	1e69      	subs	r1, r5, #1
 8017472:	9801      	ldr	r0, [sp, #4]
 8017474:	1b09      	subs	r1, r1, r4
 8017476:	b289      	uxth	r1, r1
 8017478:	f7ff ff98 	bl	80173ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801747c:	3401      	adds	r4, #1
 801747e:	e7ef      	b.n	8017460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017480:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8017484:	1e7b      	subs	r3, r7, #1
 8017486:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801748a:	9703      	str	r7, [sp, #12]
 801748c:	9300      	str	r3, [sp, #0]
 801748e:	2400      	movs	r4, #0
 8017490:	4655      	mov	r5, sl
 8017492:	9704      	str	r7, [sp, #16]
 8017494:	4626      	mov	r6, r4
 8017496:	9b04      	ldr	r3, [sp, #16]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d078      	beq.n	801758e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801749c:	9902      	ldr	r1, [sp, #8]
 801749e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80174a2:	f7ff fe91 	bl	80171c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80174a6:	b360      	cbz	r0, 8017502 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 80174a8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80174ac:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80174b0:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 80174b4:	45e6      	cmp	lr, ip
 80174b6:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80174ba:	db35      	blt.n	8017528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 80174bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80174c0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80174c4:	4472      	add	r2, lr
 80174c6:	4463      	add	r3, ip
 80174c8:	b212      	sxth	r2, r2
 80174ca:	b21b      	sxth	r3, r3
 80174cc:	429a      	cmp	r2, r3
 80174ce:	dc2b      	bgt.n	8017528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 80174d0:	fa1f f288 	uxth.w	r2, r8
 80174d4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80174d8:	45c1      	cmp	r9, r8
 80174da:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80174de:	4413      	add	r3, r2
 80174e0:	fa1f fc89 	uxth.w	ip, r9
 80174e4:	b29b      	uxth	r3, r3
 80174e6:	fa0f fe83 	sxth.w	lr, r3
 80174ea:	db0f      	blt.n	801750c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 80174ec:	eba3 030c 	sub.w	r3, r3, ip
 80174f0:	1ac9      	subs	r1, r1, r3
 80174f2:	b209      	sxth	r1, r1
 80174f4:	2900      	cmp	r1, #0
 80174f6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80174fa:	dd12      	ble.n	8017522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80174fc:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8017500:	4604      	mov	r4, r0
 8017502:	9b04      	ldr	r3, [sp, #16]
 8017504:	3d08      	subs	r5, #8
 8017506:	3b01      	subs	r3, #1
 8017508:	9304      	str	r3, [sp, #16]
 801750a:	e7c4      	b.n	8017496 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801750c:	4461      	add	r1, ip
 801750e:	b209      	sxth	r1, r1
 8017510:	4571      	cmp	r1, lr
 8017512:	dc3a      	bgt.n	801758a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8017514:	eba2 020c 	sub.w	r2, r2, ip
 8017518:	b212      	sxth	r2, r2
 801751a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801751e:	2a00      	cmp	r2, #0
 8017520:	dcee      	bgt.n	8017500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8017522:	b00d      	add	sp, #52	; 0x34
 8017524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017528:	45c1      	cmp	r9, r8
 801752a:	db2e      	blt.n	801758a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801752c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8017530:	4499      	add	r9, r3
 8017532:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017536:	4498      	add	r8, r3
 8017538:	fa0f f989 	sxth.w	r9, r9
 801753c:	fa0f f888 	sxth.w	r8, r8
 8017540:	45c1      	cmp	r9, r8
 8017542:	dc22      	bgt.n	801758a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8017544:	fa1f f28c 	uxth.w	r2, ip
 8017548:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801754c:	45e6      	cmp	lr, ip
 801754e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8017552:	4413      	add	r3, r2
 8017554:	fa1f f88e 	uxth.w	r8, lr
 8017558:	b29b      	uxth	r3, r3
 801755a:	fa0f f983 	sxth.w	r9, r3
 801755e:	db0a      	blt.n	8017576 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8017560:	eba3 0308 	sub.w	r3, r3, r8
 8017564:	1ac9      	subs	r1, r1, r3
 8017566:	b209      	sxth	r1, r1
 8017568:	2900      	cmp	r1, #0
 801756a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801756e:	ddd8      	ble.n	8017522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8017570:	f8ad 9020 	strh.w	r9, [sp, #32]
 8017574:	e7c4      	b.n	8017500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8017576:	4441      	add	r1, r8
 8017578:	b209      	sxth	r1, r1
 801757a:	4549      	cmp	r1, r9
 801757c:	dc05      	bgt.n	801758a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801757e:	eba2 0208 	sub.w	r2, r2, r8
 8017582:	b212      	sxth	r2, r2
 8017584:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8017588:	e7c9      	b.n	801751e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801758a:	4606      	mov	r6, r0
 801758c:	e7b9      	b.n	8017502 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801758e:	2c00      	cmp	r4, #0
 8017590:	f47f af7d 	bne.w	801748e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8017594:	2e00      	cmp	r6, #0
 8017596:	f000 81dc 	beq.w	8017952 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801759a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801759e:	4655      	mov	r5, sl
 80175a0:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80175a4:	b2b9      	uxth	r1, r7
 80175a6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80175aa:	b2b3      	uxth	r3, r6
 80175ac:	9104      	str	r1, [sp, #16]
 80175ae:	9804      	ldr	r0, [sp, #16]
 80175b0:	441a      	add	r2, r3
 80175b2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80175b6:	b292      	uxth	r2, r2
 80175b8:	4401      	add	r1, r0
 80175ba:	fa0f f882 	sxth.w	r8, r2
 80175be:	b289      	uxth	r1, r1
 80175c0:	9105      	str	r1, [sp, #20]
 80175c2:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 80175c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80175ca:	9b03      	ldr	r3, [sp, #12]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d054      	beq.n	801767a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80175d0:	9902      	ldr	r1, [sp, #8]
 80175d2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80175d6:	f7ff fdf7 	bl	80171c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80175da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80175de:	b1d8      	cbz	r0, 8017618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80175e0:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80175e4:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80175e8:	4576      	cmp	r6, lr
 80175ea:	dc26      	bgt.n	801763a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80175ec:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80175f0:	44f4      	add	ip, lr
 80175f2:	fa0f fc8c 	sxth.w	ip, ip
 80175f6:	45e0      	cmp	r8, ip
 80175f8:	db1f      	blt.n	801763a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80175fa:	428f      	cmp	r7, r1
 80175fc:	fa1f fc81 	uxth.w	ip, r1
 8017600:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8017604:	dc0f      	bgt.n	8017626 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8017606:	9805      	ldr	r0, [sp, #20]
 8017608:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801760c:	eba0 0c0c 	sub.w	ip, r0, ip
 8017610:	eba1 010c 	sub.w	r1, r1, ip
 8017614:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8017618:	4620      	mov	r0, r4
 801761a:	9903      	ldr	r1, [sp, #12]
 801761c:	3d08      	subs	r5, #8
 801761e:	4604      	mov	r4, r0
 8017620:	3901      	subs	r1, #1
 8017622:	9103      	str	r1, [sp, #12]
 8017624:	e7cf      	b.n	80175c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8017626:	4461      	add	r1, ip
 8017628:	b209      	sxth	r1, r1
 801762a:	4549      	cmp	r1, r9
 801762c:	dcf5      	bgt.n	801761a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801762e:	9904      	ldr	r1, [sp, #16]
 8017630:	eba1 0c0c 	sub.w	ip, r1, ip
 8017634:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8017638:	e7ee      	b.n	8017618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801763a:	428f      	cmp	r7, r1
 801763c:	dced      	bgt.n	801761a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801763e:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8017642:	4461      	add	r1, ip
 8017644:	b209      	sxth	r1, r1
 8017646:	4589      	cmp	r9, r1
 8017648:	dbe7      	blt.n	801761a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801764a:	4576      	cmp	r6, lr
 801764c:	fa1f fc8e 	uxth.w	ip, lr
 8017650:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8017654:	dc08      	bgt.n	8017668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8017656:	eba2 0c0c 	sub.w	ip, r2, ip
 801765a:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801765e:	eba1 010c 	sub.w	r1, r1, ip
 8017662:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8017666:	e7d7      	b.n	8017618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017668:	4461      	add	r1, ip
 801766a:	b209      	sxth	r1, r1
 801766c:	4588      	cmp	r8, r1
 801766e:	dbd4      	blt.n	801761a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017670:	eba3 0c0c 	sub.w	ip, r3, ip
 8017674:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8017678:	e7ce      	b.n	8017618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801767a:	2c00      	cmp	r4, #0
 801767c:	f000 8169 	beq.w	8017952 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8017680:	9b00      	ldr	r3, [sp, #0]
 8017682:	3301      	adds	r3, #1
 8017684:	f000 8165 	beq.w	8017952 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8017688:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801768c:	9802      	ldr	r0, [sp, #8]
 801768e:	4621      	mov	r1, r4
 8017690:	f7ff fdbc 	bl	801720c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017694:	b120      	cbz	r0, 80176a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8017696:	f8bd 1000 	ldrh.w	r1, [sp]
 801769a:	9801      	ldr	r0, [sp, #4]
 801769c:	f7ff fe86 	bl	80173ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80176a0:	9902      	ldr	r1, [sp, #8]
 80176a2:	4620      	mov	r0, r4
 80176a4:	f7ff fd90 	bl	80171c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80176a8:	2800      	cmp	r0, #0
 80176aa:	f000 809b 	beq.w	80177e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 80176ae:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80176b2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 80176b6:	fa1f f288 	uxth.w	r2, r8
 80176ba:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 80176be:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 80176c2:	19d5      	adds	r5, r2, r7
 80176c4:	b2a1      	uxth	r1, r4
 80176c6:	45a0      	cmp	r8, r4
 80176c8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80176cc:	fa1f f985 	uxth.w	r9, r5
 80176d0:	440b      	add	r3, r1
 80176d2:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 80176d6:	fa0f f589 	sxth.w	r5, r9
 80176da:	b29b      	uxth	r3, r3
 80176dc:	9503      	str	r5, [sp, #12]
 80176de:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80176e2:	9507      	str	r5, [sp, #28]
 80176e4:	f340 809d 	ble.w	8017822 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80176e8:	1a52      	subs	r2, r2, r1
 80176ea:	4584      	cmp	ip, r0
 80176ec:	fa0f fe83 	sxth.w	lr, r3
 80176f0:	b292      	uxth	r2, r2
 80176f2:	b215      	sxth	r5, r2
 80176f4:	dd2f      	ble.n	8017756 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 80176f6:	9e00      	ldr	r6, [sp, #0]
 80176f8:	fa1f fc8c 	uxth.w	ip, ip
 80176fc:	b280      	uxth	r0, r0
 80176fe:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8017702:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8017706:	9e03      	ldr	r6, [sp, #12]
 8017708:	ebac 0300 	sub.w	r3, ip, r0
 801770c:	448c      	add	ip, r1
 801770e:	eba6 060e 	sub.w	r6, r6, lr
 8017712:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8017716:	b29b      	uxth	r3, r3
 8017718:	4470      	add	r0, lr
 801771a:	fa0f fc8c 	sxth.w	ip, ip
 801771e:	b21c      	sxth	r4, r3
 8017720:	b200      	sxth	r0, r0
 8017722:	4366      	muls	r6, r4
 8017724:	ebac 0000 	sub.w	r0, ip, r0
 8017728:	4368      	muls	r0, r5
 801772a:	4286      	cmp	r6, r0
 801772c:	db09      	blt.n	8017742 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801772e:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8017732:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8017736:	4417      	add	r7, r2
 8017738:	f8ad 3020 	strh.w	r3, [sp, #32]
 801773c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8017740:	e685      	b.n	801744e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8017742:	440b      	add	r3, r1
 8017744:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8017748:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801774c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8017750:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017754:	e67b      	b.n	801744e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8017756:	9e03      	ldr	r6, [sp, #12]
 8017758:	45b6      	cmp	lr, r6
 801775a:	da28      	bge.n	80177ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801775c:	9b00      	ldr	r3, [sp, #0]
 801775e:	eba6 060e 	sub.w	r6, r6, lr
 8017762:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8017766:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801776a:	eb04 030c 	add.w	r3, r4, ip
 801776e:	fa1f f883 	uxth.w	r8, r3
 8017772:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8017776:	4403      	add	r3, r0
 8017778:	fa0f f988 	sxth.w	r9, r8
 801777c:	eba0 000c 	sub.w	r0, r0, ip
 8017780:	eba3 0308 	sub.w	r3, r3, r8
 8017784:	4368      	muls	r0, r5
 8017786:	b29b      	uxth	r3, r3
 8017788:	fa0f f883 	sxth.w	r8, r3
 801778c:	fb08 f606 	mul.w	r6, r8, r6
 8017790:	42b0      	cmp	r0, r6
 8017792:	dc06      	bgt.n	80177a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8017794:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8017798:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801779c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 80177a0:	e7c9      	b.n	8017736 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 80177a2:	4423      	add	r3, r4
 80177a4:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 80177a8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80177ac:	e64f      	b.n	801744e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80177ae:	eba3 0309 	sub.w	r3, r3, r9
 80177b2:	9807      	ldr	r0, [sp, #28]
 80177b4:	b29b      	uxth	r3, r3
 80177b6:	2806      	cmp	r0, #6
 80177b8:	fa0f fc83 	sxth.w	ip, r3
 80177bc:	d818      	bhi.n	80177f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 80177be:	4652      	mov	r2, sl
 80177c0:	ab0a      	add	r3, sp, #40	; 0x28
 80177c2:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 80177c6:	6851      	ldr	r1, [r2, #4]
 80177c8:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 80177cc:	c303      	stmia	r3!, {r0, r1}
 80177ce:	9b03      	ldr	r3, [sp, #12]
 80177d0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 80177d4:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80177d8:	ab0a      	add	r3, sp, #40	; 0x28
 80177da:	9801      	ldr	r0, [sp, #4]
 80177dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80177e0:	f7ff fe06 	bl	80173f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80177e4:	9b00      	ldr	r3, [sp, #0]
 80177e6:	f1aa 0a08 	sub.w	sl, sl, #8
 80177ea:	3b01      	subs	r3, #1
 80177ec:	9300      	str	r3, [sp, #0]
 80177ee:	e747      	b.n	8017680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80177f0:	9800      	ldr	r0, [sp, #0]
 80177f2:	45ac      	cmp	ip, r5
 80177f4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80177f8:	db0c      	blt.n	8017814 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 80177fa:	4417      	add	r7, r2
 80177fc:	4458      	add	r0, fp
 80177fe:	f8ad 4020 	strh.w	r4, [sp, #32]
 8017802:	b2bf      	uxth	r7, r7
 8017804:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8017808:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801780c:	440f      	add	r7, r1
 801780e:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8017812:	e61c      	b.n	801744e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8017814:	4458      	add	r0, fp
 8017816:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801781a:	443b      	add	r3, r7
 801781c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017820:	e615      	b.n	801744e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8017822:	fa1f f18c 	uxth.w	r1, ip
 8017826:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801782a:	b282      	uxth	r2, r0
 801782c:	4584      	cmp	ip, r0
 801782e:	eb01 0e05 	add.w	lr, r1, r5
 8017832:	9204      	str	r2, [sp, #16]
 8017834:	fa1f fe8e 	uxth.w	lr, lr
 8017838:	9e04      	ldr	r6, [sp, #16]
 801783a:	fa0f f28e 	sxth.w	r2, lr
 801783e:	9205      	str	r2, [sp, #20]
 8017840:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8017844:	4432      	add	r2, r6
 8017846:	b292      	uxth	r2, r2
 8017848:	9206      	str	r2, [sp, #24]
 801784a:	da26      	bge.n	801789a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801784c:	eba3 0309 	sub.w	r3, r3, r9
 8017850:	eba2 020e 	sub.w	r2, r2, lr
 8017854:	eba0 000c 	sub.w	r0, r0, ip
 8017858:	eba4 0408 	sub.w	r4, r4, r8
 801785c:	b29b      	uxth	r3, r3
 801785e:	b292      	uxth	r2, r2
 8017860:	fa0f fa83 	sxth.w	sl, r3
 8017864:	b211      	sxth	r1, r2
 8017866:	fb0a f000 	mul.w	r0, sl, r0
 801786a:	434c      	muls	r4, r1
 801786c:	42a0      	cmp	r0, r4
 801786e:	9800      	ldr	r0, [sp, #0]
 8017870:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8017874:	dc06      	bgt.n	8017884 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8017876:	4458      	add	r0, fp
 8017878:	9a05      	ldr	r2, [sp, #20]
 801787a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801787e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8017882:	e7ca      	b.n	801781a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8017884:	eb0b 0300 	add.w	r3, fp, r0
 8017888:	9903      	ldr	r1, [sp, #12]
 801788a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801788e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8017892:	442a      	add	r2, r5
 8017894:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8017898:	e5d9      	b.n	801744e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801789a:	9e04      	ldr	r6, [sp, #16]
 801789c:	9a03      	ldr	r2, [sp, #12]
 801789e:	1b89      	subs	r1, r1, r6
 80178a0:	b21e      	sxth	r6, r3
 80178a2:	b289      	uxth	r1, r1
 80178a4:	4296      	cmp	r6, r2
 80178a6:	fa0f fc81 	sxth.w	ip, r1
 80178aa:	dd25      	ble.n	80178f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 80178ac:	eba3 0309 	sub.w	r3, r3, r9
 80178b0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80178b4:	9e05      	ldr	r6, [sp, #20]
 80178b6:	eba4 0408 	sub.w	r4, r4, r8
 80178ba:	b29b      	uxth	r3, r3
 80178bc:	eba6 0902 	sub.w	r9, r6, r2
 80178c0:	fb0c f404 	mul.w	r4, ip, r4
 80178c4:	b218      	sxth	r0, r3
 80178c6:	9a00      	ldr	r2, [sp, #0]
 80178c8:	fb00 f909 	mul.w	r9, r0, r9
 80178cc:	00d2      	lsls	r2, r2, #3
 80178ce:	454c      	cmp	r4, r9
 80178d0:	db03      	blt.n	80178da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 80178d2:	445a      	add	r2, fp
 80178d4:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 80178d8:	e79f      	b.n	801781a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 80178da:	eb0b 0302 	add.w	r3, fp, r2
 80178de:	9a03      	ldr	r2, [sp, #12]
 80178e0:	4429      	add	r1, r5
 80178e2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80178e6:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80178ea:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80178ee:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80178f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80178f6:	e5aa      	b.n	801744e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80178f8:	9b06      	ldr	r3, [sp, #24]
 80178fa:	9c07      	ldr	r4, [sp, #28]
 80178fc:	eba3 020e 	sub.w	r2, r3, lr
 8017900:	2c06      	cmp	r4, #6
 8017902:	b292      	uxth	r2, r2
 8017904:	b213      	sxth	r3, r2
 8017906:	d80d      	bhi.n	8017924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8017908:	4651      	mov	r1, sl
 801790a:	aa0a      	add	r2, sp, #40	; 0x28
 801790c:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8017910:	6849      	ldr	r1, [r1, #4]
 8017912:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8017916:	9b05      	ldr	r3, [sp, #20]
 8017918:	c203      	stmia	r2!, {r0, r1}
 801791a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801791e:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8017922:	e759      	b.n	80177d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8017924:	9c00      	ldr	r4, [sp, #0]
 8017926:	4563      	cmp	r3, ip
 8017928:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801792c:	db0d      	blt.n	801794a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801792e:	4429      	add	r1, r5
 8017930:	9a04      	ldr	r2, [sp, #16]
 8017932:	445c      	add	r4, fp
 8017934:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017938:	b289      	uxth	r1, r1
 801793a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801793e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8017942:	4411      	add	r1, r2
 8017944:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8017948:	e581      	b.n	801744e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801794a:	445c      	add	r4, fp
 801794c:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8017950:	e79f      	b.n	8017892 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8017952:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8017956:	2f07      	cmp	r7, #7
 8017958:	d806      	bhi.n	8017968 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801795a:	ab08      	add	r3, sp, #32
 801795c:	9801      	ldr	r0, [sp, #4]
 801795e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8017962:	f7ff fd45 	bl	80173f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017966:	e5dc      	b.n	8017522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8017968:	f107 39ff 	add.w	r9, r7, #4294967295
 801796c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8017970:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8017974:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8017978:	f04f 35ff 	mov.w	r5, #4294967295
 801797c:	2400      	movs	r4, #0
 801797e:	9304      	str	r3, [sp, #16]
 8017980:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8017984:	f109 32ff 	add.w	r2, r9, #4294967295
 8017988:	9300      	str	r3, [sp, #0]
 801798a:	4690      	mov	r8, r2
 801798c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8017990:	9303      	str	r3, [sp, #12]
 8017992:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017996:	f1b8 3fff 	cmp.w	r8, #4294967295
 801799a:	6818      	ldr	r0, [r3, #0]
 801799c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80179a0:	9206      	str	r2, [sp, #24]
 80179a2:	bf16      	itet	ne
 80179a4:	9904      	ldrne	r1, [sp, #16]
 80179a6:	f8dd e008 	ldreq.w	lr, [sp, #8]
 80179aa:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 80179ae:	9305      	str	r3, [sp, #20]
 80179b0:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80179b4:	f8be 6004 	ldrh.w	r6, [lr, #4]
 80179b8:	fb16 f601 	smulbb	r6, r6, r1
 80179bc:	6859      	ldr	r1, [r3, #4]
 80179be:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80179c2:	4671      	mov	r1, lr
 80179c4:	a80a      	add	r0, sp, #40	; 0x28
 80179c6:	f7fc f8c2 	bl	8013b4e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80179ca:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80179ce:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80179d2:	9b03      	ldr	r3, [sp, #12]
 80179d4:	9a00      	ldr	r2, [sp, #0]
 80179d6:	fb11 f100 	smulbb	r1, r1, r0
 80179da:	2008      	movs	r0, #8
 80179dc:	fb02 6603 	mla	r6, r2, r3, r6
 80179e0:	1b8e      	subs	r6, r1, r6
 80179e2:	fb91 f1f0 	sdiv	r1, r1, r0
 80179e6:	42b1      	cmp	r1, r6
 80179e8:	dc21      	bgt.n	8017a2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80179ea:	4556      	cmp	r6, sl
 80179ec:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80179f0:	da03      	bge.n	80179fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 80179f2:	b1e6      	cbz	r6, 8017a2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80179f4:	46b2      	mov	sl, r6
 80179f6:	4645      	mov	r5, r8
 80179f8:	464c      	mov	r4, r9
 80179fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80179fe:	f118 0f02 	cmn.w	r8, #2
 8017a02:	d1c8      	bne.n	8017996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8017a04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017a08:	f1a7 0708 	sub.w	r7, r7, #8
 8017a0c:	4691      	mov	r9, r2
 8017a0e:	d1b7      	bne.n	8017980 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8017a10:	9b01      	ldr	r3, [sp, #4]
 8017a12:	b2a6      	uxth	r6, r4
 8017a14:	00e4      	lsls	r4, r4, #3
 8017a16:	1918      	adds	r0, r3, r4
 8017a18:	1c6b      	adds	r3, r5, #1
 8017a1a:	d10b      	bne.n	8017a34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8017a1c:	4601      	mov	r1, r0
 8017a1e:	9802      	ldr	r0, [sp, #8]
 8017a20:	f7fc f895 	bl	8013b4e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017a24:	4631      	mov	r1, r6
 8017a26:	9801      	ldr	r0, [sp, #4]
 8017a28:	f7ff fcc0 	bl	80173ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017a2c:	e50f      	b.n	801744e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8017a2e:	4645      	mov	r5, r8
 8017a30:	464c      	mov	r4, r9
 8017a32:	e7ed      	b.n	8017a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8017a34:	9b01      	ldr	r3, [sp, #4]
 8017a36:	00ed      	lsls	r5, r5, #3
 8017a38:	445c      	add	r4, fp
 8017a3a:	1959      	adds	r1, r3, r5
 8017a3c:	445d      	add	r5, fp
 8017a3e:	f7fc f886 	bl	8013b4e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017a42:	9b02      	ldr	r3, [sp, #8]
 8017a44:	cb03      	ldmia	r3!, {r0, r1}
 8017a46:	9b02      	ldr	r3, [sp, #8]
 8017a48:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8017a4c:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8017a50:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8017a54:	6861      	ldr	r1, [r4, #4]
 8017a56:	c303      	stmia	r3!, {r0, r1}
 8017a58:	e7e4      	b.n	8017a24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08017a5c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017a5c:	4b1d      	ldr	r3, [pc, #116]	; (8017ad4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8017a5e:	b530      	push	{r4, r5, lr}
 8017a60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017a64:	b085      	sub	sp, #20
 8017a66:	4b1c      	ldr	r3, [pc, #112]	; (8017ad8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8017a68:	460c      	mov	r4, r1
 8017a6a:	2100      	movs	r1, #0
 8017a6c:	4605      	mov	r5, r0
 8017a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a72:	6820      	ldr	r0, [r4, #0]
 8017a74:	9100      	str	r1, [sp, #0]
 8017a76:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017a7a:	ab02      	add	r3, sp, #8
 8017a7c:	6861      	ldr	r1, [r4, #4]
 8017a7e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017a82:	c303      	stmia	r3!, {r0, r1}
 8017a84:	4669      	mov	r1, sp
 8017a86:	a802      	add	r0, sp, #8
 8017a88:	f7fb fccc 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 8017a8c:	ab02      	add	r3, sp, #8
 8017a8e:	cb03      	ldmia	r3!, {r0, r1}
 8017a90:	4b12      	ldr	r3, [pc, #72]	; (8017adc <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8017a92:	6020      	str	r0, [r4, #0]
 8017a94:	6818      	ldr	r0, [r3, #0]
 8017a96:	6061      	str	r1, [r4, #4]
 8017a98:	b138      	cbz	r0, 8017aaa <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8017a9a:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8017a9e:	b133      	cbz	r3, 8017aae <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8017aa0:	6821      	ldr	r1, [r4, #0]
 8017aa2:	4628      	mov	r0, r5
 8017aa4:	6862      	ldr	r2, [r4, #4]
 8017aa6:	f7ff fcc5 	bl	8017434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017aaa:	b005      	add	sp, #20
 8017aac:	bd30      	pop	{r4, r5, pc}
 8017aae:	6803      	ldr	r3, [r0, #0]
 8017ab0:	4621      	mov	r1, r4
 8017ab2:	689b      	ldr	r3, [r3, #8]
 8017ab4:	4798      	blx	r3
 8017ab6:	4b0a      	ldr	r3, [pc, #40]	; (8017ae0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8017ab8:	6818      	ldr	r0, [r3, #0]
 8017aba:	b118      	cbz	r0, 8017ac4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8017abc:	6803      	ldr	r3, [r0, #0]
 8017abe:	4621      	mov	r1, r4
 8017ac0:	689b      	ldr	r3, [r3, #8]
 8017ac2:	4798      	blx	r3
 8017ac4:	4b07      	ldr	r3, [pc, #28]	; (8017ae4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8017ac6:	4621      	mov	r1, r4
 8017ac8:	6818      	ldr	r0, [r3, #0]
 8017aca:	6803      	ldr	r3, [r0, #0]
 8017acc:	69db      	ldr	r3, [r3, #28]
 8017ace:	4798      	blx	r3
 8017ad0:	e7eb      	b.n	8017aaa <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8017ad2:	bf00      	nop
 8017ad4:	2400aee0 	.word	0x2400aee0
 8017ad8:	2400aee2 	.word	0x2400aee2
 8017adc:	2400af28 	.word	0x2400af28
 8017ae0:	2400af24 	.word	0x2400af24
 8017ae4:	2400aeec 	.word	0x2400aeec

08017ae8 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8017ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aec:	4604      	mov	r4, r0
 8017aee:	b09b      	sub	sp, #108	; 0x6c
 8017af0:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8017af4:	b129      	cbz	r1, 8017b02 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8017af6:	2300      	movs	r3, #0
 8017af8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8017afc:	b01b      	add	sp, #108	; 0x6c
 8017afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b02:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8017b06:	4630      	mov	r0, r6
 8017b08:	f7fb fccf 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b0c:	4605      	mov	r5, r0
 8017b0e:	b940      	cbnz	r0, 8017b22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8017b10:	4620      	mov	r0, r4
 8017b12:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017b16:	f7ff fc8d 	bl	8017434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017b1a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8017b1e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8017b22:	4ba6      	ldr	r3, [pc, #664]	; (8017dbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	b33b      	cbz	r3, 8017b78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8017b28:	4da5      	ldr	r5, [pc, #660]	; (8017dc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8017b2a:	4628      	mov	r0, r5
 8017b2c:	f7fb fcbd 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b30:	4606      	mov	r6, r0
 8017b32:	bb08      	cbnz	r0, 8017b78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8017b34:	4628      	mov	r0, r5
 8017b36:	f7ff f9f7 	bl	8016f28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017b3a:	6829      	ldr	r1, [r5, #0]
 8017b3c:	686a      	ldr	r2, [r5, #4]
 8017b3e:	4620      	mov	r0, r4
 8017b40:	f7ff fc78 	bl	8017434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017b44:	802e      	strh	r6, [r5, #0]
 8017b46:	806e      	strh	r6, [r5, #2]
 8017b48:	80ae      	strh	r6, [r5, #4]
 8017b4a:	80ee      	strh	r6, [r5, #6]
 8017b4c:	4f9d      	ldr	r7, [pc, #628]	; (8017dc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8017b4e:	a809      	add	r0, sp, #36	; 0x24
 8017b50:	f7ff fbd7 	bl	8017302 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017b54:	883d      	ldrh	r5, [r7, #0]
 8017b56:	462e      	mov	r6, r5
 8017b58:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017b5c:	42b3      	cmp	r3, r6
 8017b5e:	d910      	bls.n	8017b82 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8017b60:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8017b64:	3601      	adds	r6, #1
 8017b66:	a809      	add	r0, sp, #36	; 0x24
 8017b68:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8017b6c:	b2b6      	uxth	r6, r6
 8017b6e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8017b72:	f7ff fc3d 	bl	80173f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017b76:	e7ef      	b.n	8017b58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8017b78:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d1e5      	bne.n	8017b4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8017b80:	e7bc      	b.n	8017afc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8017b82:	462e      	mov	r6, r5
 8017b84:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8017b88:	42b3      	cmp	r3, r6
 8017b8a:	d90b      	bls.n	8017ba4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8017b8c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8017b90:	3601      	adds	r6, #1
 8017b92:	4620      	mov	r0, r4
 8017b94:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8017b98:	b2b6      	uxth	r6, r6
 8017b9a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8017b9e:	f7ff fc49 	bl	8017434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017ba2:	e7ef      	b.n	8017b84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8017ba4:	4a88      	ldr	r2, [pc, #544]	; (8017dc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8017ba6:	6813      	ldr	r3, [r2, #0]
 8017ba8:	4690      	mov	r8, r2
 8017baa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017bae:	2b01      	cmp	r3, #1
 8017bb0:	f040 8094 	bne.w	8017cdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8017bb4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8017bb8:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8017bbc:	f04f 0900 	mov.w	r9, #0
 8017bc0:	33aa      	adds	r3, #170	; 0xaa
 8017bc2:	42a8      	cmp	r0, r5
 8017bc4:	f103 0308 	add.w	r3, r3, #8
 8017bc8:	dd0a      	ble.n	8017be0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8017bca:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8017bce:	3501      	adds	r5, #1
 8017bd0:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8017bd4:	440a      	add	r2, r1
 8017bd6:	b212      	sxth	r2, r2
 8017bd8:	4591      	cmp	r9, r2
 8017bda:	bfb8      	it	lt
 8017bdc:	4691      	movlt	r9, r2
 8017bde:	e7f0      	b.n	8017bc2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8017be0:	4b7a      	ldr	r3, [pc, #488]	; (8017dcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8017be2:	4e7b      	ldr	r6, [pc, #492]	; (8017dd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8017be4:	881d      	ldrh	r5, [r3, #0]
 8017be6:	2300      	movs	r3, #0
 8017be8:	2d0f      	cmp	r5, #15
 8017bea:	bf8c      	ite	hi
 8017bec:	08ed      	lsrhi	r5, r5, #3
 8017bee:	2501      	movls	r5, #1
 8017bf0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017bf4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017bf8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8017bfc:	f8d8 0000 	ldr.w	r0, [r8]
 8017c00:	440b      	add	r3, r1
 8017c02:	6802      	ldr	r2, [r0, #0]
 8017c04:	b21b      	sxth	r3, r3
 8017c06:	4599      	cmp	r9, r3
 8017c08:	dd4b      	ble.n	8017ca2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 8017c0a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8017c0e:	4798      	blx	r3
 8017c10:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017c14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017c18:	4413      	add	r3, r2
 8017c1a:	b21b      	sxth	r3, r3
 8017c1c:	195a      	adds	r2, r3, r5
 8017c1e:	4290      	cmp	r0, r2
 8017c20:	da07      	bge.n	8017c32 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8017c22:	4581      	cmp	r9, r0
 8017c24:	dd05      	ble.n	8017c32 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8017c26:	4298      	cmp	r0, r3
 8017c28:	da33      	bge.n	8017c92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	dd31      	ble.n	8017c92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8017c2e:	4648      	mov	r0, r9
 8017c30:	e004      	b.n	8017c3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8017c32:	4298      	cmp	r0, r3
 8017c34:	dbfb      	blt.n	8017c2e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 8017c36:	4548      	cmp	r0, r9
 8017c38:	bfa8      	it	ge
 8017c3a:	4648      	movge	r0, r9
 8017c3c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8017c40:	2100      	movs	r1, #0
 8017c42:	1ac0      	subs	r0, r0, r3
 8017c44:	f8b7 a000 	ldrh.w	sl, [r7]
 8017c48:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017c4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017c50:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017c54:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017c58:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017c5c:	4553      	cmp	r3, sl
 8017c5e:	d9c9      	bls.n	8017bf4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8017c60:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8017c64:	ab07      	add	r3, sp, #28
 8017c66:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017c6a:	6851      	ldr	r1, [r2, #4]
 8017c6c:	c303      	stmia	r3!, {r0, r1}
 8017c6e:	a807      	add	r0, sp, #28
 8017c70:	a905      	add	r1, sp, #20
 8017c72:	f7fb fbd7 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 8017c76:	a807      	add	r0, sp, #28
 8017c78:	f7fb fc17 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c7c:	b920      	cbnz	r0, 8017c88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8017c7e:	6823      	ldr	r3, [r4, #0]
 8017c80:	a907      	add	r1, sp, #28
 8017c82:	4620      	mov	r0, r4
 8017c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c86:	4798      	blx	r3
 8017c88:	f10a 0a01 	add.w	sl, sl, #1
 8017c8c:	fa1f fa8a 	uxth.w	sl, sl
 8017c90:	e7e2      	b.n	8017c58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8017c92:	f8d8 0000 	ldr.w	r0, [r8]
 8017c96:	2101      	movs	r1, #1
 8017c98:	6803      	ldr	r3, [r0, #0]
 8017c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c9e:	4798      	blx	r3
 8017ca0:	e7a8      	b.n	8017bf4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8017ca2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8017ca4:	4798      	blx	r3
 8017ca6:	4b4b      	ldr	r3, [pc, #300]	; (8017dd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	f43f af26 	beq.w	8017afc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	883d      	ldrh	r5, [r7, #0]
 8017cb4:	34ea      	adds	r4, #234	; 0xea
 8017cb6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8017cba:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8017cbe:	42ab      	cmp	r3, r5
 8017cc0:	f67f af1c 	bls.w	8017afc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8017cc4:	ab1a      	add	r3, sp, #104	; 0x68
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017ccc:	3501      	adds	r5, #1
 8017cce:	3b44      	subs	r3, #68	; 0x44
 8017cd0:	b2ad      	uxth	r5, r5
 8017cd2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8017cd6:	f7ff fb8b 	bl	80173f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017cda:	e7ee      	b.n	8017cba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8017cdc:	2b02      	cmp	r3, #2
 8017cde:	f040 813d 	bne.w	8017f5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 8017ce2:	4b3d      	ldr	r3, [pc, #244]	; (8017dd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8017ce4:	781b      	ldrb	r3, [r3, #0]
 8017ce6:	2b01      	cmp	r3, #1
 8017ce8:	d02c      	beq.n	8017d44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 8017cea:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8017cee:	883a      	ldrh	r2, [r7, #0]
 8017cf0:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8017cf4:	3201      	adds	r2, #1
 8017cf6:	b292      	uxth	r2, r2
 8017cf8:	2900      	cmp	r1, #0
 8017cfa:	d0d4      	beq.n	8017ca6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8017cfc:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8017d00:	4610      	mov	r0, r2
 8017d02:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8017d06:	f04f 0a00 	mov.w	sl, #0
 8017d0a:	441d      	add	r5, r3
 8017d0c:	b22d      	sxth	r5, r5
 8017d0e:	b283      	uxth	r3, r0
 8017d10:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8017d14:	4299      	cmp	r1, r3
 8017d16:	f240 80c3 	bls.w	8017ea0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8017d1a:	4426      	add	r6, r4
 8017d1c:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8017d20:	4684      	mov	ip, r0
 8017d22:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8017d26:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8017d2a:	4573      	cmp	r3, lr
 8017d2c:	f340 80a5 	ble.w	8017e7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8017d30:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8017d34:	4475      	add	r5, lr
 8017d36:	b22d      	sxth	r5, r5
 8017d38:	429d      	cmp	r5, r3
 8017d3a:	bfa8      	it	ge
 8017d3c:	461d      	movge	r5, r3
 8017d3e:	3001      	adds	r0, #1
 8017d40:	46e2      	mov	sl, ip
 8017d42:	e7e4      	b.n	8017d0e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8017d44:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8017d48:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8017d4c:	f1bb 0f00 	cmp.w	fp, #0
 8017d50:	d0a9      	beq.n	8017ca6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8017d52:	883b      	ldrh	r3, [r7, #0]
 8017d54:	2600      	movs	r6, #0
 8017d56:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8017d5a:	3301      	adds	r3, #1
 8017d5c:	b29b      	uxth	r3, r3
 8017d5e:	b299      	uxth	r1, r3
 8017d60:	00f5      	lsls	r5, r6, #3
 8017d62:	458b      	cmp	fp, r1
 8017d64:	d93a      	bls.n	8017ddc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8017d66:	4425      	add	r5, r4
 8017d68:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8017d6c:	469c      	mov	ip, r3
 8017d6e:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8017d72:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8017d76:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8017d7a:	4408      	add	r0, r1
 8017d7c:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8017d80:	4471      	add	r1, lr
 8017d82:	b200      	sxth	r0, r0
 8017d84:	b209      	sxth	r1, r1
 8017d86:	4288      	cmp	r0, r1
 8017d88:	da06      	bge.n	8017d98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8017d8a:	4586      	cmp	lr, r0
 8017d8c:	4672      	mov	r2, lr
 8017d8e:	bfb8      	it	lt
 8017d90:	4602      	movlt	r2, r0
 8017d92:	3301      	adds	r3, #1
 8017d94:	4666      	mov	r6, ip
 8017d96:	e7e2      	b.n	8017d5e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8017d98:	d10b      	bne.n	8017db2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8017d9a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8017d9e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8017da2:	458c      	cmp	ip, r1
 8017da4:	bfb4      	ite	lt
 8017da6:	469c      	movlt	ip, r3
 8017da8:	46b4      	movge	ip, r6
 8017daa:	4572      	cmp	r2, lr
 8017dac:	bfb8      	it	lt
 8017dae:	4672      	movlt	r2, lr
 8017db0:	e7ef      	b.n	8017d92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8017db2:	428a      	cmp	r2, r1
 8017db4:	46b4      	mov	ip, r6
 8017db6:	bfb8      	it	lt
 8017db8:	460a      	movlt	r2, r1
 8017dba:	e7ea      	b.n	8017d92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8017dbc:	2400af24 	.word	0x2400af24
 8017dc0:	2400af30 	.word	0x2400af30
 8017dc4:	2400004e 	.word	0x2400004e
 8017dc8:	2400aeec 	.word	0x2400aeec
 8017dcc:	2400aee2 	.word	0x2400aee2
 8017dd0:	2400aee0 	.word	0x2400aee0
 8017dd4:	2400aeea 	.word	0x2400aeea
 8017dd8:	2400aee4 	.word	0x2400aee4
 8017ddc:	1961      	adds	r1, r4, r5
 8017dde:	ab07      	add	r3, sp, #28
 8017de0:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8017de4:	6849      	ldr	r1, [r1, #4]
 8017de6:	c303      	stmia	r3!, {r0, r1}
 8017de8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017dec:	a807      	add	r0, sp, #28
 8017dee:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017df2:	2b13      	cmp	r3, #19
 8017df4:	440b      	add	r3, r1
 8017df6:	bfd8      	it	le
 8017df8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8017dfc:	1a9b      	subs	r3, r3, r2
 8017dfe:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017e02:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017e06:	f7ff f8a9 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017e0a:	a807      	add	r0, sp, #28
 8017e0c:	f7fb fb4d 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017e10:	2800      	cmp	r0, #0
 8017e12:	d199      	bne.n	8017d48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8017e14:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8017e18:	4425      	add	r5, r4
 8017e1a:	f8d8 0000 	ldr.w	r0, [r8]
 8017e1e:	f1bc 0f14 	cmp.w	ip, #20
 8017e22:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017e26:	f8d0 e000 	ldr.w	lr, [r0]
 8017e2a:	bfa8      	it	ge
 8017e2c:	f04f 0c14 	movge.w	ip, #20
 8017e30:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017e34:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017e38:	fa1f fc8c 	uxth.w	ip, ip
 8017e3c:	f8cd c000 	str.w	ip, [sp]
 8017e40:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 8017e44:	47d0      	blx	sl
 8017e46:	4682      	mov	sl, r0
 8017e48:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017e4c:	a807      	add	r0, sp, #28
 8017e4e:	f7ff f86b 	bl	8016f28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017e52:	6823      	ldr	r3, [r4, #0]
 8017e54:	4620      	mov	r0, r4
 8017e56:	a907      	add	r1, sp, #28
 8017e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e5a:	4798      	blx	r3
 8017e5c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8017e60:	eba0 000a 	sub.w	r0, r0, sl
 8017e64:	b200      	sxth	r0, r0
 8017e66:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8017e6a:	2800      	cmp	r0, #0
 8017e6c:	f47f af6c 	bne.w	8017d48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8017e70:	b2b1      	uxth	r1, r6
 8017e72:	4648      	mov	r0, r9
 8017e74:	f7ff fa9a 	bl	80173ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017e78:	e766      	b.n	8017d48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8017e7a:	d10c      	bne.n	8017e96 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8017e7c:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8017e80:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8017e84:	45b4      	cmp	ip, r6
 8017e86:	bfb4      	ite	lt
 8017e88:	4684      	movlt	ip, r0
 8017e8a:	46d4      	movge	ip, sl
 8017e8c:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8017e90:	4433      	add	r3, r6
 8017e92:	b21b      	sxth	r3, r3
 8017e94:	e750      	b.n	8017d38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8017e96:	4575      	cmp	r5, lr
 8017e98:	46d4      	mov	ip, sl
 8017e9a:	bfa8      	it	ge
 8017e9c:	4675      	movge	r5, lr
 8017e9e:	e74e      	b.n	8017d3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8017ea0:	eb0b 0006 	add.w	r0, fp, r6
 8017ea4:	4426      	add	r6, r4
 8017ea6:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8017eaa:	f1b9 0f13 	cmp.w	r9, #19
 8017eae:	bfdc      	itt	le
 8017eb0:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8017eb4:	444d      	addle	r5, r9
 8017eb6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8017eba:	bfd8      	it	le
 8017ebc:	b22d      	sxthle	r5, r5
 8017ebe:	f7fb faf4 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ec2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017ec6:	2800      	cmp	r0, #0
 8017ec8:	f47f af16 	bne.w	8017cf8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8017ecc:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8017ed0:	fa1f f989 	uxth.w	r9, r9
 8017ed4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017ed8:	eba5 050c 	sub.w	r5, r5, ip
 8017edc:	fa1f f28c 	uxth.w	r2, ip
 8017ee0:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8017ee4:	eb02 0009 	add.w	r0, r2, r9
 8017ee8:	2d14      	cmp	r5, #20
 8017eea:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8017eee:	bfa8      	it	ge
 8017ef0:	2514      	movge	r5, #20
 8017ef2:	b200      	sxth	r0, r0
 8017ef4:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017ef8:	b289      	uxth	r1, r1
 8017efa:	fa1f fe85 	uxth.w	lr, r5
 8017efe:	eba0 000c 	sub.w	r0, r0, ip
 8017f02:	f8ad c01e 	strh.w	ip, [sp, #30]
 8017f06:	4586      	cmp	lr, r0
 8017f08:	f8d8 0000 	ldr.w	r0, [r8]
 8017f0c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	bfb8      	it	lt
 8017f14:	46f1      	movlt	r9, lr
 8017f16:	6805      	ldr	r5, [r0, #0]
 8017f18:	f8cd 9000 	str.w	r9, [sp]
 8017f1c:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 8017f20:	47a8      	blx	r5
 8017f22:	6823      	ldr	r3, [r4, #0]
 8017f24:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017f28:	a907      	add	r1, sp, #28
 8017f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f2c:	4620      	mov	r0, r4
 8017f2e:	4798      	blx	r3
 8017f30:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017f34:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8017f38:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8017f3c:	1a5b      	subs	r3, r3, r1
 8017f3e:	440a      	add	r2, r1
 8017f40:	b21b      	sxth	r3, r3
 8017f42:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8017f46:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	f47f aecf 	bne.w	8017cee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8017f50:	fa1f f18a 	uxth.w	r1, sl
 8017f54:	4658      	mov	r0, fp
 8017f56:	f7ff fa29 	bl	80173ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017f5a:	e6c8      	b.n	8017cee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8017f5c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017f60:	42ab      	cmp	r3, r5
 8017f62:	f67f aea0 	bls.w	8017ca6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8017f66:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8017f6a:	ab07      	add	r3, sp, #28
 8017f6c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017f70:	6851      	ldr	r1, [r2, #4]
 8017f72:	c303      	stmia	r3!, {r0, r1}
 8017f74:	a807      	add	r0, sp, #28
 8017f76:	f7fb fa98 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f7a:	b920      	cbnz	r0, 8017f86 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8017f7c:	6823      	ldr	r3, [r4, #0]
 8017f7e:	a907      	add	r1, sp, #28
 8017f80:	4620      	mov	r0, r4
 8017f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f84:	4798      	blx	r3
 8017f86:	3501      	adds	r5, #1
 8017f88:	b2ad      	uxth	r5, r5
 8017f8a:	e7e7      	b.n	8017f5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08017f8c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017f8c:	4b03      	ldr	r3, [pc, #12]	; (8017f9c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017f8e:	2200      	movs	r2, #0
 8017f90:	801a      	strh	r2, [r3, #0]
 8017f92:	805a      	strh	r2, [r3, #2]
 8017f94:	809a      	strh	r2, [r3, #4]
 8017f96:	80da      	strh	r2, [r3, #6]
 8017f98:	4770      	bx	lr
 8017f9a:	bf00      	nop
 8017f9c:	2400af30 	.word	0x2400af30

08017fa0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fa4:	b09d      	sub	sp, #116	; 0x74
 8017fa6:	4606      	mov	r6, r0
 8017fa8:	4614      	mov	r4, r2
 8017faa:	468a      	mov	sl, r1
 8017fac:	a803      	add	r0, sp, #12
 8017fae:	461d      	mov	r5, r3
 8017fb0:	f000 fd7f 	bl	8018ab2 <_ZN8touchgfx12TextProviderC1Ev>
 8017fb4:	6833      	ldr	r3, [r6, #0]
 8017fb6:	4630      	mov	r0, r6
 8017fb8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fbe:	4798      	blx	r3
 8017fc0:	6833      	ldr	r3, [r6, #0]
 8017fc2:	4607      	mov	r7, r0
 8017fc4:	4630      	mov	r0, r6
 8017fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017fc8:	4798      	blx	r3
 8017fca:	462a      	mov	r2, r5
 8017fcc:	2500      	movs	r5, #0
 8017fce:	4621      	mov	r1, r4
 8017fd0:	9000      	str	r0, [sp, #0]
 8017fd2:	463b      	mov	r3, r7
 8017fd4:	462c      	mov	r4, r5
 8017fd6:	46a9      	mov	r9, r5
 8017fd8:	46a8      	mov	r8, r5
 8017fda:	a803      	add	r0, sp, #12
 8017fdc:	f000 fdbc 	bl	8018b58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	9302      	str	r3, [sp, #8]
 8017fe4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017fe8:	429c      	cmp	r4, r3
 8017fea:	d002      	beq.n	8017ff2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017fec:	455c      	cmp	r4, fp
 8017fee:	bf18      	it	ne
 8017ff0:	4625      	movne	r5, r4
 8017ff2:	ab02      	add	r3, sp, #8
 8017ff4:	4632      	mov	r2, r6
 8017ff6:	4651      	mov	r1, sl
 8017ff8:	a803      	add	r0, sp, #12
 8017ffa:	f001 f8ad 	bl	8019158 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017ffe:	4604      	mov	r4, r0
 8018000:	b108      	cbz	r0, 8018006 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018002:	280a      	cmp	r0, #10
 8018004:	d10a      	bne.n	801801c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8018006:	45c1      	cmp	r9, r8
 8018008:	bf38      	it	cc
 801800a:	46c1      	movcc	r9, r8
 801800c:	f04f 0800 	mov.w	r8, #0
 8018010:	2c00      	cmp	r4, #0
 8018012:	d1e5      	bne.n	8017fe0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018014:	4648      	mov	r0, r9
 8018016:	b01d      	add	sp, #116	; 0x74
 8018018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801801c:	9a02      	ldr	r2, [sp, #8]
 801801e:	2a00      	cmp	r2, #0
 8018020:	d0de      	beq.n	8017fe0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018022:	7b57      	ldrb	r7, [r2, #13]
 8018024:	4629      	mov	r1, r5
 8018026:	6833      	ldr	r3, [r6, #0]
 8018028:	007f      	lsls	r7, r7, #1
 801802a:	8894      	ldrh	r4, [r2, #4]
 801802c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801802e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018032:	7a97      	ldrb	r7, [r2, #10]
 8018034:	4307      	orrs	r7, r0
 8018036:	4630      	mov	r0, r6
 8018038:	4798      	blx	r3
 801803a:	4438      	add	r0, r7
 801803c:	4480      	add	r8, r0
 801803e:	fa1f f888 	uxth.w	r8, r8
 8018042:	e7e5      	b.n	8018010 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018044 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018044:	b508      	push	{r3, lr}
 8018046:	6803      	ldr	r3, [r0, #0]
 8018048:	68db      	ldr	r3, [r3, #12]
 801804a:	4798      	blx	r3
 801804c:	b128      	cbz	r0, 801805a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801804e:	7b43      	ldrb	r3, [r0, #13]
 8018050:	7a80      	ldrb	r0, [r0, #10]
 8018052:	005b      	lsls	r3, r3, #1
 8018054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018058:	4318      	orrs	r0, r3
 801805a:	bd08      	pop	{r3, pc}

0801805c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801805c:	b40e      	push	{r1, r2, r3}
 801805e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018060:	b09e      	sub	sp, #120	; 0x78
 8018062:	4605      	mov	r5, r0
 8018064:	ab23      	add	r3, sp, #140	; 0x8c
 8018066:	a805      	add	r0, sp, #20
 8018068:	f853 4b04 	ldr.w	r4, [r3], #4
 801806c:	9303      	str	r3, [sp, #12]
 801806e:	f000 fd20 	bl	8018ab2 <_ZN8touchgfx12TextProviderC1Ev>
 8018072:	682b      	ldr	r3, [r5, #0]
 8018074:	4628      	mov	r0, r5
 8018076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018078:	4798      	blx	r3
 801807a:	682b      	ldr	r3, [r5, #0]
 801807c:	4606      	mov	r6, r0
 801807e:	4628      	mov	r0, r5
 8018080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018082:	4798      	blx	r3
 8018084:	4633      	mov	r3, r6
 8018086:	4621      	mov	r1, r4
 8018088:	ae1e      	add	r6, sp, #120	; 0x78
 801808a:	2400      	movs	r4, #0
 801808c:	9000      	str	r0, [sp, #0]
 801808e:	9a03      	ldr	r2, [sp, #12]
 8018090:	a805      	add	r0, sp, #20
 8018092:	f000 fd61 	bl	8018b58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018096:	f846 4d68 	str.w	r4, [r6, #-104]!
 801809a:	462a      	mov	r2, r5
 801809c:	4633      	mov	r3, r6
 801809e:	4621      	mov	r1, r4
 80180a0:	a805      	add	r0, sp, #20
 80180a2:	f001 f859 	bl	8019158 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80180a6:	b300      	cbz	r0, 80180ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80180a8:	280a      	cmp	r0, #10
 80180aa:	d01a      	beq.n	80180e2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80180ac:	9f04      	ldr	r7, [sp, #16]
 80180ae:	b1c7      	cbz	r7, 80180e2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80180b0:	7b78      	ldrb	r0, [r7, #13]
 80180b2:	7a3b      	ldrb	r3, [r7, #8]
 80180b4:	00c1      	lsls	r1, r0, #3
 80180b6:	88aa      	ldrh	r2, [r5, #4]
 80180b8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80180bc:	4319      	orrs	r1, r3
 80180be:	0643      	lsls	r3, r0, #25
 80180c0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80180c4:	bf48      	it	mi
 80180c6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80180ca:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80180ce:	bf48      	it	mi
 80180d0:	b219      	sxthmi	r1, r3
 80180d2:	79fb      	ldrb	r3, [r7, #7]
 80180d4:	4303      	orrs	r3, r0
 80180d6:	4413      	add	r3, r2
 80180d8:	1a5b      	subs	r3, r3, r1
 80180da:	b29b      	uxth	r3, r3
 80180dc:	42a3      	cmp	r3, r4
 80180de:	bfc8      	it	gt
 80180e0:	b21c      	sxthgt	r4, r3
 80180e2:	4633      	mov	r3, r6
 80180e4:	462a      	mov	r2, r5
 80180e6:	2100      	movs	r1, #0
 80180e8:	e7da      	b.n	80180a0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80180ea:	b2a0      	uxth	r0, r4
 80180ec:	b01e      	add	sp, #120	; 0x78
 80180ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80180f2:	b003      	add	sp, #12
 80180f4:	4770      	bx	lr

080180f6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80180f6:	b40e      	push	{r1, r2, r3}
 80180f8:	b570      	push	{r4, r5, r6, lr}
 80180fa:	b09d      	sub	sp, #116	; 0x74
 80180fc:	4604      	mov	r4, r0
 80180fe:	ab21      	add	r3, sp, #132	; 0x84
 8018100:	a803      	add	r0, sp, #12
 8018102:	f853 5b04 	ldr.w	r5, [r3], #4
 8018106:	9302      	str	r3, [sp, #8]
 8018108:	f000 fcd3 	bl	8018ab2 <_ZN8touchgfx12TextProviderC1Ev>
 801810c:	6823      	ldr	r3, [r4, #0]
 801810e:	4620      	mov	r0, r4
 8018110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018112:	4798      	blx	r3
 8018114:	6823      	ldr	r3, [r4, #0]
 8018116:	4606      	mov	r6, r0
 8018118:	4620      	mov	r0, r4
 801811a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801811c:	2401      	movs	r4, #1
 801811e:	4798      	blx	r3
 8018120:	4633      	mov	r3, r6
 8018122:	9000      	str	r0, [sp, #0]
 8018124:	4629      	mov	r1, r5
 8018126:	9a02      	ldr	r2, [sp, #8]
 8018128:	a803      	add	r0, sp, #12
 801812a:	f000 fd15 	bl	8018b58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801812e:	a803      	add	r0, sp, #12
 8018130:	f001 f90c 	bl	801934c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018134:	b2a3      	uxth	r3, r4
 8018136:	b138      	cbz	r0, 8018148 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8018138:	280a      	cmp	r0, #10
 801813a:	a803      	add	r0, sp, #12
 801813c:	bf04      	itt	eq
 801813e:	3301      	addeq	r3, #1
 8018140:	b21c      	sxtheq	r4, r3
 8018142:	f001 f903 	bl	801934c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018146:	e7f5      	b.n	8018134 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018148:	4618      	mov	r0, r3
 801814a:	b01d      	add	sp, #116	; 0x74
 801814c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018150:	b003      	add	sp, #12
 8018152:	4770      	bx	lr

08018154 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018154:	b40e      	push	{r1, r2, r3}
 8018156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018158:	b09e      	sub	sp, #120	; 0x78
 801815a:	4604      	mov	r4, r0
 801815c:	ab23      	add	r3, sp, #140	; 0x8c
 801815e:	a805      	add	r0, sp, #20
 8018160:	f853 5b04 	ldr.w	r5, [r3], #4
 8018164:	9303      	str	r3, [sp, #12]
 8018166:	f000 fca4 	bl	8018ab2 <_ZN8touchgfx12TextProviderC1Ev>
 801816a:	6823      	ldr	r3, [r4, #0]
 801816c:	4620      	mov	r0, r4
 801816e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018170:	4798      	blx	r3
 8018172:	6823      	ldr	r3, [r4, #0]
 8018174:	4606      	mov	r6, r0
 8018176:	4620      	mov	r0, r4
 8018178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801817a:	4798      	blx	r3
 801817c:	4633      	mov	r3, r6
 801817e:	4629      	mov	r1, r5
 8018180:	9000      	str	r0, [sp, #0]
 8018182:	9a03      	ldr	r2, [sp, #12]
 8018184:	a805      	add	r0, sp, #20
 8018186:	f000 fce7 	bl	8018b58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801818a:	ad1e      	add	r5, sp, #120	; 0x78
 801818c:	2100      	movs	r1, #0
 801818e:	26ff      	movs	r6, #255	; 0xff
 8018190:	4622      	mov	r2, r4
 8018192:	a805      	add	r0, sp, #20
 8018194:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018198:	462b      	mov	r3, r5
 801819a:	f000 ffdd 	bl	8019158 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801819e:	b1d8      	cbz	r0, 80181d8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 80181a0:	280a      	cmp	r0, #10
 80181a2:	d012      	beq.n	80181ca <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80181a4:	9804      	ldr	r0, [sp, #16]
 80181a6:	b180      	cbz	r0, 80181ca <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80181a8:	7b47      	ldrb	r7, [r0, #13]
 80181aa:	7922      	ldrb	r2, [r4, #4]
 80181ac:	00fb      	lsls	r3, r7, #3
 80181ae:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80181b2:	7a03      	ldrb	r3, [r0, #8]
 80181b4:	430b      	orrs	r3, r1
 80181b6:	0679      	lsls	r1, r7, #25
 80181b8:	bf44      	itt	mi
 80181ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80181be:	b21b      	sxthmi	r3, r3
 80181c0:	1ad3      	subs	r3, r2, r3
 80181c2:	b2db      	uxtb	r3, r3
 80181c4:	429e      	cmp	r6, r3
 80181c6:	bf28      	it	cs
 80181c8:	461e      	movcs	r6, r3
 80181ca:	462b      	mov	r3, r5
 80181cc:	4622      	mov	r2, r4
 80181ce:	2100      	movs	r1, #0
 80181d0:	a805      	add	r0, sp, #20
 80181d2:	f000 ffc1 	bl	8019158 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80181d6:	e7e2      	b.n	801819e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 80181d8:	4630      	mov	r0, r6
 80181da:	b01e      	add	sp, #120	; 0x78
 80181dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80181e0:	b003      	add	sp, #12
 80181e2:	4770      	bx	lr

080181e4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80181e4:	b513      	push	{r0, r1, r4, lr}
 80181e6:	6803      	ldr	r3, [r0, #0]
 80181e8:	2400      	movs	r4, #0
 80181ea:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80181ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80181f2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80181f6:	4669      	mov	r1, sp
 80181f8:	691b      	ldr	r3, [r3, #16]
 80181fa:	9400      	str	r4, [sp, #0]
 80181fc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018200:	4798      	blx	r3
 8018202:	b002      	add	sp, #8
 8018204:	bd10      	pop	{r4, pc}

08018206 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018206:	b538      	push	{r3, r4, r5, lr}
 8018208:	680b      	ldr	r3, [r1, #0]
 801820a:	460c      	mov	r4, r1
 801820c:	4605      	mov	r5, r0
 801820e:	68db      	ldr	r3, [r3, #12]
 8018210:	4798      	blx	r3
 8018212:	6823      	ldr	r3, [r4, #0]
 8018214:	4620      	mov	r0, r4
 8018216:	4629      	mov	r1, r5
 8018218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801821a:	4798      	blx	r3
 801821c:	4628      	mov	r0, r5
 801821e:	bd38      	pop	{r3, r4, r5, pc}

08018220 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018220:	b410      	push	{r4}
 8018222:	880a      	ldrh	r2, [r1, #0]
 8018224:	8884      	ldrh	r4, [r0, #4]
 8018226:	4422      	add	r2, r4
 8018228:	800a      	strh	r2, [r1, #0]
 801822a:	884a      	ldrh	r2, [r1, #2]
 801822c:	88c4      	ldrh	r4, [r0, #6]
 801822e:	4422      	add	r2, r4
 8018230:	804a      	strh	r2, [r1, #2]
 8018232:	6940      	ldr	r0, [r0, #20]
 8018234:	b120      	cbz	r0, 8018240 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018236:	6803      	ldr	r3, [r0, #0]
 8018238:	f85d 4b04 	ldr.w	r4, [sp], #4
 801823c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801823e:	4718      	bx	r3
 8018240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018244:	4770      	bx	lr

08018246 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018246:	b570      	push	{r4, r5, r6, lr}
 8018248:	8882      	ldrh	r2, [r0, #4]
 801824a:	460c      	mov	r4, r1
 801824c:	880b      	ldrh	r3, [r1, #0]
 801824e:	4605      	mov	r5, r0
 8018250:	4413      	add	r3, r2
 8018252:	800b      	strh	r3, [r1, #0]
 8018254:	884b      	ldrh	r3, [r1, #2]
 8018256:	88c2      	ldrh	r2, [r0, #6]
 8018258:	4413      	add	r3, r2
 801825a:	804b      	strh	r3, [r1, #2]
 801825c:	1d01      	adds	r1, r0, #4
 801825e:	4620      	mov	r0, r4
 8018260:	f7fb f8e0 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 8018264:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018268:	2b00      	cmp	r3, #0
 801826a:	dd0b      	ble.n	8018284 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801826c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018270:	2b00      	cmp	r3, #0
 8018272:	dd07      	ble.n	8018284 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018274:	6968      	ldr	r0, [r5, #20]
 8018276:	b128      	cbz	r0, 8018284 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018278:	6803      	ldr	r3, [r0, #0]
 801827a:	4621      	mov	r1, r4
 801827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801827e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018282:	4718      	bx	r3
 8018284:	bd70      	pop	{r4, r5, r6, pc}
	...

08018288 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018288:	b570      	push	{r4, r5, r6, lr}
 801828a:	8882      	ldrh	r2, [r0, #4]
 801828c:	460c      	mov	r4, r1
 801828e:	880b      	ldrh	r3, [r1, #0]
 8018290:	4605      	mov	r5, r0
 8018292:	4413      	add	r3, r2
 8018294:	800b      	strh	r3, [r1, #0]
 8018296:	884b      	ldrh	r3, [r1, #2]
 8018298:	88c2      	ldrh	r2, [r0, #6]
 801829a:	4413      	add	r3, r2
 801829c:	804b      	strh	r3, [r1, #2]
 801829e:	1d01      	adds	r1, r0, #4
 80182a0:	4620      	mov	r0, r4
 80182a2:	f7fb f8bf 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 80182a6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	dd15      	ble.n	80182da <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80182ae:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	dd11      	ble.n	80182da <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80182b6:	6968      	ldr	r0, [r5, #20]
 80182b8:	b128      	cbz	r0, 80182c6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80182ba:	6803      	ldr	r3, [r0, #0]
 80182bc:	691b      	ldr	r3, [r3, #16]
 80182be:	4621      	mov	r1, r4
 80182c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182c4:	4718      	bx	r3
 80182c6:	4b05      	ldr	r3, [pc, #20]	; (80182dc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	3304      	adds	r3, #4
 80182cc:	429d      	cmp	r5, r3
 80182ce:	d104      	bne.n	80182da <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80182d0:	f7fe ffbe 	bl	8017250 <_ZN8touchgfx11Application11getInstanceEv>
 80182d4:	6803      	ldr	r3, [r0, #0]
 80182d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182d8:	e7f1      	b.n	80182be <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 80182da:	bd70      	pop	{r4, r5, r6, pc}
 80182dc:	2400af28 	.word	0x2400af28

080182e0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80182e0:	b570      	push	{r4, r5, r6, lr}
 80182e2:	4604      	mov	r4, r0
 80182e4:	4616      	mov	r6, r2
 80182e6:	460d      	mov	r5, r1
 80182e8:	b901      	cbnz	r1, 80182ec <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80182ea:	b192      	cbz	r2, 8018312 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80182ec:	6823      	ldr	r3, [r4, #0]
 80182ee:	4620      	mov	r0, r4
 80182f0:	695b      	ldr	r3, [r3, #20]
 80182f2:	4798      	blx	r3
 80182f4:	88e2      	ldrh	r2, [r4, #6]
 80182f6:	88a1      	ldrh	r1, [r4, #4]
 80182f8:	4620      	mov	r0, r4
 80182fa:	4432      	add	r2, r6
 80182fc:	4429      	add	r1, r5
 80182fe:	b212      	sxth	r2, r2
 8018300:	b209      	sxth	r1, r1
 8018302:	f7ec f9d1 	bl	80046a8 <_ZN8touchgfx8Drawable5setXYEss>
 8018306:	6823      	ldr	r3, [r4, #0]
 8018308:	4620      	mov	r0, r4
 801830a:	695b      	ldr	r3, [r3, #20]
 801830c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018310:	4718      	bx	r3
 8018312:	bd70      	pop	{r4, r5, r6, pc}

08018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018314:	b510      	push	{r4, lr}
 8018316:	2300      	movs	r3, #0
 8018318:	4604      	mov	r4, r0
 801831a:	4608      	mov	r0, r1
 801831c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018320:	8023      	strh	r3, [r4, #0]
 8018322:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018326:	8063      	strh	r3, [r4, #2]
 8018328:	6803      	ldr	r3, [r0, #0]
 801832a:	80a1      	strh	r1, [r4, #4]
 801832c:	4621      	mov	r1, r4
 801832e:	80e2      	strh	r2, [r4, #6]
 8018330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018332:	4798      	blx	r3
 8018334:	4620      	mov	r0, r4
 8018336:	bd10      	pop	{r4, pc}

08018338 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018338:	b530      	push	{r4, r5, lr}
 801833a:	8083      	strh	r3, [r0, #4]
 801833c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018340:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8018344:	7183      	strb	r3, [r0, #6]
 8018346:	79c3      	ldrb	r3, [r0, #7]
 8018348:	6101      	str	r1, [r0, #16]
 801834a:	f365 0306 	bfi	r3, r5, #0, #7
 801834e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8018352:	8282      	strh	r2, [r0, #20]
 8018354:	f365 13c7 	bfi	r3, r5, #7, #1
 8018358:	71c3      	strb	r3, [r0, #7]
 801835a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801835e:	7203      	strb	r3, [r0, #8]
 8018360:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018364:	7243      	strb	r3, [r0, #9]
 8018366:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801836a:	8143      	strh	r3, [r0, #10]
 801836c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018370:	8183      	strh	r3, [r0, #12]
 8018372:	4b01      	ldr	r3, [pc, #4]	; (8018378 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8018374:	6003      	str	r3, [r0, #0]
 8018376:	bd30      	pop	{r4, r5, pc}
 8018378:	08029600 	.word	0x08029600

0801837c <_ZNK8touchgfx9ConstFont4findEt>:
 801837c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801837e:	6904      	ldr	r4, [r0, #16]
 8018380:	b3bc      	cbz	r4, 80183f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018382:	88a3      	ldrh	r3, [r4, #4]
 8018384:	8a82      	ldrh	r2, [r0, #20]
 8018386:	1acb      	subs	r3, r1, r3
 8018388:	f102 32ff 	add.w	r2, r2, #4294967295
 801838c:	d431      	bmi.n	80183f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801838e:	4293      	cmp	r3, r2
 8018390:	dd0c      	ble.n	80183ac <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018392:	230e      	movs	r3, #14
 8018394:	fb03 4302 	mla	r3, r3, r2, r4
 8018398:	889b      	ldrh	r3, [r3, #4]
 801839a:	1a5b      	subs	r3, r3, r1
 801839c:	1ad3      	subs	r3, r2, r3
 801839e:	429a      	cmp	r2, r3
 80183a0:	db27      	blt.n	80183f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	bfbc      	itt	lt
 80183a6:	2302      	movlt	r3, #2
 80183a8:	fb92 f3f3 	sdivlt	r3, r2, r3
 80183ac:	2500      	movs	r5, #0
 80183ae:	260e      	movs	r6, #14
 80183b0:	4295      	cmp	r5, r2
 80183b2:	dc1e      	bgt.n	80183f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80183b4:	fb06 4003 	mla	r0, r6, r3, r4
 80183b8:	8887      	ldrh	r7, [r0, #4]
 80183ba:	42b9      	cmp	r1, r7
 80183bc:	d01a      	beq.n	80183f4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80183be:	d20d      	bcs.n	80183dc <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80183c0:	1e5a      	subs	r2, r3, #1
 80183c2:	4295      	cmp	r5, r2
 80183c4:	dc15      	bgt.n	80183f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80183c6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80183ca:	1a5b      	subs	r3, r3, r1
 80183cc:	1ad3      	subs	r3, r2, r3
 80183ce:	429a      	cmp	r2, r3
 80183d0:	db0f      	blt.n	80183f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80183d2:	429d      	cmp	r5, r3
 80183d4:	ddec      	ble.n	80183b0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80183d6:	1953      	adds	r3, r2, r5
 80183d8:	105b      	asrs	r3, r3, #1
 80183da:	e7e9      	b.n	80183b0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80183dc:	1c5d      	adds	r5, r3, #1
 80183de:	42aa      	cmp	r2, r5
 80183e0:	db07      	blt.n	80183f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80183e2:	8a43      	ldrh	r3, [r0, #18]
 80183e4:	1acb      	subs	r3, r1, r3
 80183e6:	442b      	add	r3, r5
 80183e8:	429d      	cmp	r5, r3
 80183ea:	dc02      	bgt.n	80183f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80183ec:	429a      	cmp	r2, r3
 80183ee:	dadf      	bge.n	80183b0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80183f0:	e7f1      	b.n	80183d6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80183f2:	2000      	movs	r0, #0
 80183f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080183f6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80183f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183f8:	4604      	mov	r4, r0
 80183fa:	4617      	mov	r7, r2
 80183fc:	461e      	mov	r6, r3
 80183fe:	b911      	cbnz	r1, 8018406 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018400:	2500      	movs	r5, #0
 8018402:	4628      	mov	r0, r5
 8018404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018406:	290a      	cmp	r1, #10
 8018408:	d0fa      	beq.n	8018400 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801840a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801840e:	4291      	cmp	r1, r2
 8018410:	d0f6      	beq.n	8018400 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018412:	f242 020b 	movw	r2, #8203	; 0x200b
 8018416:	4291      	cmp	r1, r2
 8018418:	d0f2      	beq.n	8018400 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801841a:	f7ff ffaf 	bl	801837c <_ZNK8touchgfx9ConstFont4findEt>
 801841e:	4605      	mov	r5, r0
 8018420:	b950      	cbnz	r0, 8018438 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018422:	6823      	ldr	r3, [r4, #0]
 8018424:	4620      	mov	r0, r4
 8018426:	691b      	ldr	r3, [r3, #16]
 8018428:	4798      	blx	r3
 801842a:	4601      	mov	r1, r0
 801842c:	4620      	mov	r0, r4
 801842e:	f7ff ffa5 	bl	801837c <_ZNK8touchgfx9ConstFont4findEt>
 8018432:	4605      	mov	r5, r0
 8018434:	2800      	cmp	r0, #0
 8018436:	d0e3      	beq.n	8018400 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018438:	6823      	ldr	r3, [r4, #0]
 801843a:	4629      	mov	r1, r5
 801843c:	4620      	mov	r0, r4
 801843e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018440:	4798      	blx	r3
 8018442:	6038      	str	r0, [r7, #0]
 8018444:	6823      	ldr	r3, [r4, #0]
 8018446:	4620      	mov	r0, r4
 8018448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801844a:	4798      	blx	r3
 801844c:	7030      	strb	r0, [r6, #0]
 801844e:	e7d8      	b.n	8018402 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018450 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8018450:	2002      	movs	r0, #2
 8018452:	4770      	bx	lr

08018454 <_ZN8touchgfx12GestureEventD1Ev>:
 8018454:	4770      	bx	lr

08018456 <_ZN8touchgfx12GestureEventD0Ev>:
 8018456:	b510      	push	{r4, lr}
 8018458:	4604      	mov	r4, r0
 801845a:	210c      	movs	r1, #12
 801845c:	f00d fbed 	bl	8025c3a <_ZdlPvj>
 8018460:	4620      	mov	r0, r4
 8018462:	bd10      	pop	{r4, pc}

08018464 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018464:	b530      	push	{r4, r5, lr}
 8018466:	460d      	mov	r5, r1
 8018468:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801846a:	b087      	sub	sp, #28
 801846c:	4604      	mov	r4, r0
 801846e:	b301      	cbz	r1, 80184b2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018470:	a801      	add	r0, sp, #4
 8018472:	f7ff ff4f 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018476:	892a      	ldrh	r2, [r5, #8]
 8018478:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801847c:	7928      	ldrb	r0, [r5, #4]
 801847e:	1ad2      	subs	r2, r2, r3
 8018480:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018482:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018486:	441a      	add	r2, r3
 8018488:	896b      	ldrh	r3, [r5, #10]
 801848a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801848e:	f88d 0010 	strb.w	r0, [sp, #16]
 8018492:	1b5b      	subs	r3, r3, r5
 8018494:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018496:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018498:	442b      	add	r3, r5
 801849a:	4d07      	ldr	r5, [pc, #28]	; (80184b8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801849c:	f8ad 1012 	strh.w	r1, [sp, #18]
 80184a0:	a903      	add	r1, sp, #12
 80184a2:	9503      	str	r5, [sp, #12]
 80184a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80184a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80184ac:	6803      	ldr	r3, [r0, #0]
 80184ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184b0:	4798      	blx	r3
 80184b2:	b007      	add	sp, #28
 80184b4:	bd30      	pop	{r4, r5, pc}
 80184b6:	bf00      	nop
 80184b8:	08029658 	.word	0x08029658

080184bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80184bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80184c2:	b08a      	sub	sp, #40	; 0x28
 80184c4:	4604      	mov	r4, r0
 80184c6:	460d      	mov	r5, r1
 80184c8:	b113      	cbz	r3, 80184d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80184ca:	790b      	ldrb	r3, [r1, #4]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d044      	beq.n	801855a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80184d0:	f104 0804 	add.w	r8, r4, #4
 80184d4:	a803      	add	r0, sp, #12
 80184d6:	4641      	mov	r1, r8
 80184d8:	f7ff ff1c 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80184dc:	792b      	ldrb	r3, [r5, #4]
 80184de:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80184e2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80184e6:	b983      	cbnz	r3, 801850a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80184e8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80184ec:	892a      	ldrh	r2, [r5, #8]
 80184ee:	88e9      	ldrh	r1, [r5, #6]
 80184f0:	4640      	mov	r0, r8
 80184f2:	1b92      	subs	r2, r2, r6
 80184f4:	9301      	str	r3, [sp, #4]
 80184f6:	1bc9      	subs	r1, r1, r7
 80184f8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80184fc:	b212      	sxth	r2, r2
 80184fe:	9300      	str	r3, [sp, #0]
 8018500:	b209      	sxth	r1, r1
 8018502:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018506:	f7fa feab 	bl	8013260 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801850a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801850c:	b329      	cbz	r1, 801855a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801850e:	a805      	add	r0, sp, #20
 8018510:	f7ff ff00 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018514:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018518:	792b      	ldrb	r3, [r5, #4]
 801851a:	a907      	add	r1, sp, #28
 801851c:	1abf      	subs	r7, r7, r2
 801851e:	88ea      	ldrh	r2, [r5, #6]
 8018520:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018522:	4417      	add	r7, r2
 8018524:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018526:	f88d 3020 	strb.w	r3, [sp, #32]
 801852a:	4417      	add	r7, r2
 801852c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018530:	1ab6      	subs	r6, r6, r2
 8018532:	892a      	ldrh	r2, [r5, #8]
 8018534:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018538:	4416      	add	r6, r2
 801853a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801853c:	4416      	add	r6, r2
 801853e:	4a08      	ldr	r2, [pc, #32]	; (8018560 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8018540:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8018544:	2600      	movs	r6, #0
 8018546:	9207      	str	r2, [sp, #28]
 8018548:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801854c:	6803      	ldr	r3, [r0, #0]
 801854e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018550:	4798      	blx	r3
 8018552:	792b      	ldrb	r3, [r5, #4]
 8018554:	b10b      	cbz	r3, 801855a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018556:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801855a:	b00a      	add	sp, #40	; 0x28
 801855c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018560:	080285b8 	.word	0x080285b8

08018564 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018568:	460c      	mov	r4, r1
 801856a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801856c:	b088      	sub	sp, #32
 801856e:	4605      	mov	r5, r0
 8018570:	2900      	cmp	r1, #0
 8018572:	d06d      	beq.n	8018650 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018574:	4668      	mov	r0, sp
 8018576:	f7ff fecd 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801857a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801857c:	88e3      	ldrh	r3, [r4, #6]
 801857e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8018582:	440b      	add	r3, r1
 8018584:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018588:	b21b      	sxth	r3, r3
 801858a:	4543      	cmp	r3, r8
 801858c:	db31      	blt.n	80185f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801858e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8018592:	44c4      	add	ip, r8
 8018594:	fa0f fc8c 	sxth.w	ip, ip
 8018598:	4563      	cmp	r3, ip
 801859a:	da2a      	bge.n	80185f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801859c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801859e:	8926      	ldrh	r6, [r4, #8]
 80185a0:	4416      	add	r6, r2
 80185a2:	b236      	sxth	r6, r6
 80185a4:	42be      	cmp	r6, r7
 80185a6:	db24      	blt.n	80185f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80185a8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80185ac:	4438      	add	r0, r7
 80185ae:	b200      	sxth	r0, r0
 80185b0:	4286      	cmp	r6, r0
 80185b2:	da1e      	bge.n	80185f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80185b4:	8963      	ldrh	r3, [r4, #10]
 80185b6:	4419      	add	r1, r3
 80185b8:	b209      	sxth	r1, r1
 80185ba:	4541      	cmp	r1, r8
 80185bc:	db08      	blt.n	80185d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80185be:	4561      	cmp	r1, ip
 80185c0:	da06      	bge.n	80185d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80185c2:	89a3      	ldrh	r3, [r4, #12]
 80185c4:	441a      	add	r2, r3
 80185c6:	b212      	sxth	r2, r2
 80185c8:	42ba      	cmp	r2, r7
 80185ca:	db01      	blt.n	80185d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80185cc:	4282      	cmp	r2, r0
 80185ce:	db10      	blt.n	80185f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80185d0:	4b21      	ldr	r3, [pc, #132]	; (8018658 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80185d2:	a904      	add	r1, sp, #16
 80185d4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80185d6:	9304      	str	r3, [sp, #16]
 80185d8:	2302      	movs	r3, #2
 80185da:	f88d 3014 	strb.w	r3, [sp, #20]
 80185de:	2300      	movs	r3, #0
 80185e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80185e4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80185e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80185ec:	6803      	ldr	r3, [r0, #0]
 80185ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185f0:	4798      	blx	r3
 80185f2:	1d29      	adds	r1, r5, #4
 80185f4:	a802      	add	r0, sp, #8
 80185f6:	f7ff fe8d 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80185fa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80185fe:	88e0      	ldrh	r0, [r4, #6]
 8018600:	eba3 0808 	sub.w	r8, r3, r8
 8018604:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018608:	7921      	ldrb	r1, [r4, #4]
 801860a:	fa1f f888 	uxth.w	r8, r8
 801860e:	1bdf      	subs	r7, r3, r7
 8018610:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018614:	b2bb      	uxth	r3, r7
 8018616:	4440      	add	r0, r8
 8018618:	8922      	ldrh	r2, [r4, #8]
 801861a:	8967      	ldrh	r7, [r4, #10]
 801861c:	4460      	add	r0, ip
 801861e:	89a4      	ldrh	r4, [r4, #12]
 8018620:	441a      	add	r2, r3
 8018622:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018624:	44b8      	add	r8, r7
 8018626:	4423      	add	r3, r4
 8018628:	f8ad 0016 	strh.w	r0, [sp, #22]
 801862c:	4432      	add	r2, r6
 801862e:	44e0      	add	r8, ip
 8018630:	4433      	add	r3, r6
 8018632:	4c0a      	ldr	r4, [pc, #40]	; (801865c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018634:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018636:	f88d 1014 	strb.w	r1, [sp, #20]
 801863a:	a904      	add	r1, sp, #16
 801863c:	9404      	str	r4, [sp, #16]
 801863e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018642:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018646:	f8ad 301c 	strh.w	r3, [sp, #28]
 801864a:	6803      	ldr	r3, [r0, #0]
 801864c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801864e:	4798      	blx	r3
 8018650:	b008      	add	sp, #32
 8018652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018656:	bf00      	nop
 8018658:	080285b8 	.word	0x080285b8
 801865c:	080285cc 	.word	0x080285cc

08018660 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018662:	4604      	mov	r4, r0
 8018664:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018668:	3201      	adds	r2, #1
 801866a:	d112      	bne.n	8018692 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801866c:	2500      	movs	r5, #0
 801866e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018672:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018676:	6803      	ldr	r3, [r0, #0]
 8018678:	9500      	str	r5, [sp, #0]
 801867a:	466d      	mov	r5, sp
 801867c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018680:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018684:	4629      	mov	r1, r5
 8018686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018688:	4798      	blx	r3
 801868a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801868e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018692:	4620      	mov	r0, r4
 8018694:	b003      	add	sp, #12
 8018696:	bd30      	pop	{r4, r5, pc}

08018698 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018698:	b513      	push	{r0, r1, r4, lr}
 801869a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801869e:	4604      	mov	r4, r0
 80186a0:	3301      	adds	r3, #1
 80186a2:	d109      	bne.n	80186b8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80186a4:	4601      	mov	r1, r0
 80186a6:	4668      	mov	r0, sp
 80186a8:	f7ff fe34 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80186ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80186b0:	8423      	strh	r3, [r4, #32]
 80186b2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80186b6:	8463      	strh	r3, [r4, #34]	; 0x22
 80186b8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80186bc:	b002      	add	sp, #8
 80186be:	bd10      	pop	{r4, pc}

080186c0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80186c0:	b513      	push	{r0, r1, r4, lr}
 80186c2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80186c6:	4604      	mov	r4, r0
 80186c8:	3301      	adds	r3, #1
 80186ca:	d109      	bne.n	80186e0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80186cc:	4601      	mov	r1, r0
 80186ce:	4668      	mov	r0, sp
 80186d0:	f7ff fe20 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80186d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80186d8:	8423      	strh	r3, [r4, #32]
 80186da:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80186de:	8463      	strh	r3, [r4, #34]	; 0x22
 80186e0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80186e4:	b002      	add	sp, #8
 80186e6:	bd10      	pop	{r4, pc}

080186e8 <_ZN8touchgfx6ScreenC1Ev>:
 80186e8:	b570      	push	{r4, r5, r6, lr}
 80186ea:	4b17      	ldr	r3, [pc, #92]	; (8018748 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80186ec:	4605      	mov	r5, r0
 80186ee:	4a17      	ldr	r2, [pc, #92]	; (801874c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80186f0:	2101      	movs	r1, #1
 80186f2:	f845 3b04 	str.w	r3, [r5], #4
 80186f6:	2300      	movs	r3, #0
 80186f8:	6042      	str	r2, [r0, #4]
 80186fa:	4604      	mov	r4, r0
 80186fc:	8103      	strh	r3, [r0, #8]
 80186fe:	8143      	strh	r3, [r0, #10]
 8018700:	8183      	strh	r3, [r0, #12]
 8018702:	81c3      	strh	r3, [r0, #14]
 8018704:	8203      	strh	r3, [r0, #16]
 8018706:	8243      	strh	r3, [r0, #18]
 8018708:	8283      	strh	r3, [r0, #20]
 801870a:	82c3      	strh	r3, [r0, #22]
 801870c:	6203      	str	r3, [r0, #32]
 801870e:	8483      	strh	r3, [r0, #36]	; 0x24
 8018710:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018712:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8018716:	6343      	str	r3, [r0, #52]	; 0x34
 8018718:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801871c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8018720:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018724:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8018728:	4b09      	ldr	r3, [pc, #36]	; (8018750 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801872a:	4628      	mov	r0, r5
 801872c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018730:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8018732:	4a08      	ldr	r2, [pc, #32]	; (8018754 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018734:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018738:	4798      	blx	r3
 801873a:	6863      	ldr	r3, [r4, #4]
 801873c:	4628      	mov	r0, r5
 801873e:	4631      	mov	r1, r6
 8018740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018742:	4798      	blx	r3
 8018744:	4620      	mov	r0, r4
 8018746:	bd70      	pop	{r4, r5, r6, pc}
 8018748:	0802966c 	.word	0x0802966c
 801874c:	080284f0 	.word	0x080284f0
 8018750:	2400aee2 	.word	0x2400aee2
 8018754:	2400aee0 	.word	0x2400aee0

08018758 <_ZN8touchgfx6Screen4drawEv>:
 8018758:	4b09      	ldr	r3, [pc, #36]	; (8018780 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801875a:	b507      	push	{r0, r1, r2, lr}
 801875c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018760:	2100      	movs	r1, #0
 8018762:	4b08      	ldr	r3, [pc, #32]	; (8018784 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018764:	9100      	str	r1, [sp, #0]
 8018766:	4669      	mov	r1, sp
 8018768:	f9b3 3000 	ldrsh.w	r3, [r3]
 801876c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018770:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018774:	6803      	ldr	r3, [r0, #0]
 8018776:	689b      	ldr	r3, [r3, #8]
 8018778:	4798      	blx	r3
 801877a:	b003      	add	sp, #12
 801877c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018780:	2400aee0 	.word	0x2400aee0
 8018784:	2400aee2 	.word	0x2400aee2

08018788 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801878c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018790:	b089      	sub	sp, #36	; 0x24
 8018792:	4680      	mov	r8, r0
 8018794:	460c      	mov	r4, r1
 8018796:	2b00      	cmp	r3, #0
 8018798:	4615      	mov	r5, r2
 801879a:	dd0e      	ble.n	80187ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801879c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	dd0a      	ble.n	80187ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80187a4:	4628      	mov	r0, r5
 80187a6:	f7ff ff5b 	bl	8018660 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80187aa:	4621      	mov	r1, r4
 80187ac:	f7fe fd0c 	bl	80171c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80187b0:	69eb      	ldr	r3, [r5, #28]
 80187b2:	b928      	cbnz	r0, 80187c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80187b4:	461d      	mov	r5, r3
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d1f4      	bne.n	80187a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80187ba:	b009      	add	sp, #36	; 0x24
 80187bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187c0:	ae04      	add	r6, sp, #16
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	f000 80b5 	beq.w	8018932 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80187c8:	682b      	ldr	r3, [r5, #0]
 80187ca:	4629      	mov	r1, r5
 80187cc:	a802      	add	r0, sp, #8
 80187ce:	68db      	ldr	r3, [r3, #12]
 80187d0:	4798      	blx	r3
 80187d2:	4628      	mov	r0, r5
 80187d4:	f7ff ff60 	bl	8018698 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80187d8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80187dc:	4407      	add	r7, r0
 80187de:	4628      	mov	r0, r5
 80187e0:	f7ff ff6e 	bl	80186c0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80187e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80187e8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80187ec:	b23f      	sxth	r7, r7
 80187ee:	4418      	add	r0, r3
 80187f0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80187f4:	4621      	mov	r1, r4
 80187f6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80187fa:	f8ad 0012 	strh.w	r0, [sp, #18]
 80187fe:	4630      	mov	r0, r6
 8018800:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018804:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018808:	f7fa fe0c 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 801880c:	4628      	mov	r0, r5
 801880e:	f7ff ff27 	bl	8018660 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018812:	ab06      	add	r3, sp, #24
 8018814:	4602      	mov	r2, r0
 8018816:	e896 0003 	ldmia.w	r6, {r0, r1}
 801881a:	e883 0003 	stmia.w	r3, {r0, r1}
 801881e:	4611      	mov	r1, r2
 8018820:	4618      	mov	r0, r3
 8018822:	f7fa fdff 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 8018826:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801882a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801882e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018832:	4299      	cmp	r1, r3
 8018834:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018838:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801883c:	d10b      	bne.n	8018856 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801883e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018842:	4552      	cmp	r2, sl
 8018844:	d107      	bne.n	8018856 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018846:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801884a:	455a      	cmp	r2, fp
 801884c:	d103      	bne.n	8018856 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801884e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018852:	454a      	cmp	r2, r9
 8018854:	d06d      	beq.n	8018932 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018856:	f1bb 0f00 	cmp.w	fp, #0
 801885a:	dd65      	ble.n	8018928 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801885c:	f1b9 0f00 	cmp.w	r9, #0
 8018860:	dd62      	ble.n	8018928 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018862:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018866:	fa1f f08a 	uxth.w	r0, sl
 801886a:	4552      	cmp	r2, sl
 801886c:	9000      	str	r0, [sp, #0]
 801886e:	da12      	bge.n	8018896 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018870:	9301      	str	r3, [sp, #4]
 8018872:	9b00      	ldr	r3, [sp, #0]
 8018874:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018878:	f8ad 2012 	strh.w	r2, [sp, #18]
 801887c:	1a9a      	subs	r2, r3, r2
 801887e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018882:	4631      	mov	r1, r6
 8018884:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018888:	4640      	mov	r0, r8
 801888a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801888e:	69ea      	ldr	r2, [r5, #28]
 8018890:	f7ff ff7a 	bl	8018788 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018894:	9b01      	ldr	r3, [sp, #4]
 8018896:	f9b4 2000 	ldrsh.w	r2, [r4]
 801889a:	b29f      	uxth	r7, r3
 801889c:	429a      	cmp	r2, r3
 801889e:	da0d      	bge.n	80188bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80188a0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80188a4:	1aba      	subs	r2, r7, r2
 80188a6:	f8ad a012 	strh.w	sl, [sp, #18]
 80188aa:	4631      	mov	r1, r6
 80188ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80188b0:	4640      	mov	r0, r8
 80188b2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80188b6:	69ea      	ldr	r2, [r5, #28]
 80188b8:	f7ff ff66 	bl	8018788 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80188bc:	8822      	ldrh	r2, [r4, #0]
 80188be:	445f      	add	r7, fp
 80188c0:	88a3      	ldrh	r3, [r4, #4]
 80188c2:	b2bf      	uxth	r7, r7
 80188c4:	4413      	add	r3, r2
 80188c6:	b23a      	sxth	r2, r7
 80188c8:	b29b      	uxth	r3, r3
 80188ca:	b219      	sxth	r1, r3
 80188cc:	4291      	cmp	r1, r2
 80188ce:	dd0d      	ble.n	80188ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80188d0:	1bdb      	subs	r3, r3, r7
 80188d2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80188d6:	f8ad a012 	strh.w	sl, [sp, #18]
 80188da:	4631      	mov	r1, r6
 80188dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80188e0:	4640      	mov	r0, r8
 80188e2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80188e6:	69ea      	ldr	r2, [r5, #28]
 80188e8:	f7ff ff4e 	bl	8018788 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80188ec:	88e2      	ldrh	r2, [r4, #6]
 80188ee:	8863      	ldrh	r3, [r4, #2]
 80188f0:	4413      	add	r3, r2
 80188f2:	9a00      	ldr	r2, [sp, #0]
 80188f4:	444a      	add	r2, r9
 80188f6:	b29b      	uxth	r3, r3
 80188f8:	fa1f f982 	uxth.w	r9, r2
 80188fc:	b219      	sxth	r1, r3
 80188fe:	fa0f f289 	sxth.w	r2, r9
 8018902:	428a      	cmp	r2, r1
 8018904:	da15      	bge.n	8018932 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018906:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801890a:	eba3 0309 	sub.w	r3, r3, r9
 801890e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018912:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018916:	4631      	mov	r1, r6
 8018918:	f8ad 0010 	strh.w	r0, [sp, #16]
 801891c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018920:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018924:	69ea      	ldr	r2, [r5, #28]
 8018926:	e001      	b.n	801892c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018928:	69ea      	ldr	r2, [r5, #28]
 801892a:	4621      	mov	r1, r4
 801892c:	4640      	mov	r0, r8
 801892e:	f7ff ff2b 	bl	8018788 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018932:	4628      	mov	r0, r5
 8018934:	f7ff fe94 	bl	8018660 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018938:	6861      	ldr	r1, [r4, #4]
 801893a:	4602      	mov	r2, r0
 801893c:	4633      	mov	r3, r6
 801893e:	6820      	ldr	r0, [r4, #0]
 8018940:	c303      	stmia	r3!, {r0, r1}
 8018942:	4611      	mov	r1, r2
 8018944:	4630      	mov	r0, r6
 8018946:	f7fa fd6d 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 801894a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801894e:	2b00      	cmp	r3, #0
 8018950:	f77f af33 	ble.w	80187ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018954:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018958:	2b00      	cmp	r3, #0
 801895a:	f77f af2e 	ble.w	80187ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801895e:	4628      	mov	r0, r5
 8018960:	f7ff fe9a 	bl	8018698 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018964:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018968:	1a18      	subs	r0, r3, r0
 801896a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801896e:	4628      	mov	r0, r5
 8018970:	f7ff fea6 	bl	80186c0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018974:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018978:	4631      	mov	r1, r6
 801897a:	1a18      	subs	r0, r3, r0
 801897c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018980:	4628      	mov	r0, r5
 8018982:	682b      	ldr	r3, [r5, #0]
 8018984:	689b      	ldr	r3, [r3, #8]
 8018986:	4798      	blx	r3
 8018988:	e717      	b.n	80187ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801898a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801898a:	b570      	push	{r4, r5, r6, lr}
 801898c:	1d06      	adds	r6, r0, #4
 801898e:	b086      	sub	sp, #24
 8018990:	460c      	mov	r4, r1
 8018992:	2300      	movs	r3, #0
 8018994:	4631      	mov	r1, r6
 8018996:	4605      	mov	r5, r0
 8018998:	a802      	add	r0, sp, #8
 801899a:	9301      	str	r3, [sp, #4]
 801899c:	f7ff fcba 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80189a0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80189a4:	8822      	ldrh	r2, [r4, #0]
 80189a6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80189aa:	1ad2      	subs	r2, r2, r3
 80189ac:	8863      	ldrh	r3, [r4, #2]
 80189ae:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80189b2:	1a5b      	subs	r3, r3, r1
 80189b4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80189b8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80189bc:	aa01      	add	r2, sp, #4
 80189be:	f8ad 0014 	strh.w	r0, [sp, #20]
 80189c2:	4630      	mov	r0, r6
 80189c4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80189c8:	a904      	add	r1, sp, #16
 80189ca:	f8ad 3012 	strh.w	r3, [sp, #18]
 80189ce:	f7fa fe01 	bl	80135d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80189d2:	9a01      	ldr	r2, [sp, #4]
 80189d4:	b11a      	cbz	r2, 80189de <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80189d6:	4621      	mov	r1, r4
 80189d8:	4628      	mov	r0, r5
 80189da:	f7ff fed5 	bl	8018788 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80189de:	b006      	add	sp, #24
 80189e0:	bd70      	pop	{r4, r5, r6, pc}

080189e2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80189e2:	4602      	mov	r2, r0
 80189e4:	b530      	push	{r4, r5, lr}
 80189e6:	4604      	mov	r4, r0
 80189e8:	b085      	sub	sp, #20
 80189ea:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80189ee:	460d      	mov	r5, r1
 80189f0:	466b      	mov	r3, sp
 80189f2:	6851      	ldr	r1, [r2, #4]
 80189f4:	c303      	stmia	r3!, {r0, r1}
 80189f6:	4629      	mov	r1, r5
 80189f8:	4668      	mov	r0, sp
 80189fa:	f7fa fd13 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 80189fe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018a02:	b12b      	cbz	r3, 8018a10 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018a04:	4669      	mov	r1, sp
 8018a06:	4620      	mov	r0, r4
 8018a08:	f7ff ffbf 	bl	801898a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018a0c:	b005      	add	sp, #20
 8018a0e:	bd30      	pop	{r4, r5, pc}
 8018a10:	3404      	adds	r4, #4
 8018a12:	a802      	add	r0, sp, #8
 8018a14:	4621      	mov	r1, r4
 8018a16:	f7ff fc7d 	bl	8018314 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018a1a:	f8bd 3000 	ldrh.w	r3, [sp]
 8018a1e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018a22:	4669      	mov	r1, sp
 8018a24:	4620      	mov	r0, r4
 8018a26:	1a9b      	subs	r3, r3, r2
 8018a28:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018a2c:	f8ad 3000 	strh.w	r3, [sp]
 8018a30:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018a34:	1a9b      	subs	r3, r3, r2
 8018a36:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018a3a:	f7fa fd92 	bl	8013562 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8018a3e:	e7e5      	b.n	8018a0c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08018a40 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018a40:	460b      	mov	r3, r1
 8018a42:	680a      	ldr	r2, [r1, #0]
 8018a44:	1d01      	adds	r1, r0, #4
 8018a46:	6992      	ldr	r2, [r2, #24]
 8018a48:	4618      	mov	r0, r3
 8018a4a:	4710      	bx	r2

08018a4c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8018a4c:	4298      	cmp	r0, r3
 8018a4e:	d200      	bcs.n	8018a52 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8018a50:	b913      	cbnz	r3, 8018a58 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8018a52:	440a      	add	r2, r1
 8018a54:	b210      	sxth	r0, r2
 8018a56:	4770      	bx	lr
 8018a58:	ee07 0a90 	vmov	s15, r0
 8018a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018a60:	ee07 3a90 	vmov	s15, r3
 8018a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018a6c:	ee07 2a90 	vmov	s15, r2
 8018a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018a74:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8018a78:	ee07 1a90 	vmov	s15, r1
 8018a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a80:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018a84:	ee67 5a07 	vmul.f32	s11, s14, s14
 8018a88:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018a8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018a90:	eee6 7a26 	vfma.f32	s15, s12, s13
 8018a94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a9c:	bfcc      	ite	gt
 8018a9e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8018aa2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8018aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018aaa:	ee17 3a90 	vmov	r3, s15
 8018aae:	b218      	sxth	r0, r3
 8018ab0:	4770      	bx	lr

08018ab2 <_ZN8touchgfx12TextProviderC1Ev>:
 8018ab2:	b538      	push	{r3, r4, r5, lr}
 8018ab4:	2500      	movs	r5, #0
 8018ab6:	2302      	movs	r3, #2
 8018ab8:	4604      	mov	r4, r0
 8018aba:	220e      	movs	r2, #14
 8018abc:	7403      	strb	r3, [r0, #16]
 8018abe:	4629      	mov	r1, r5
 8018ac0:	6145      	str	r5, [r0, #20]
 8018ac2:	7605      	strb	r5, [r0, #24]
 8018ac4:	83c5      	strh	r5, [r0, #30]
 8018ac6:	8405      	strh	r5, [r0, #32]
 8018ac8:	86c5      	strh	r5, [r0, #54]	; 0x36
 8018aca:	8705      	strh	r5, [r0, #56]	; 0x38
 8018acc:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8018ace:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8018ad2:	e9c0 5500 	strd	r5, r5, [r0]
 8018ad6:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8018ada:	304c      	adds	r0, #76	; 0x4c
 8018adc:	f00d f968 	bl	8025db0 <memset>
 8018ae0:	2301      	movs	r3, #1
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8018ae8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018aec:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8018af0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8018af4:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8018af8:	f7ee f82c 	bl	8006b54 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018afc:	4620      	mov	r0, r4
 8018afe:	bd38      	pop	{r3, r4, r5, pc}

08018b00 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8018b00:	b530      	push	{r4, r5, lr}
 8018b02:	2500      	movs	r5, #0
 8018b04:	2401      	movs	r4, #1
 8018b06:	6843      	ldr	r3, [r0, #4]
 8018b08:	b913      	cbnz	r3, 8018b10 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018b0a:	6803      	ldr	r3, [r0, #0]
 8018b0c:	b313      	cbz	r3, 8018b54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018b0e:	6043      	str	r3, [r0, #4]
 8018b10:	7e03      	ldrb	r3, [r0, #24]
 8018b12:	b143      	cbz	r3, 8018b26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8018b14:	6943      	ldr	r3, [r0, #20]
 8018b16:	b12b      	cbz	r3, 8018b24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018b18:	881a      	ldrh	r2, [r3, #0]
 8018b1a:	b11a      	cbz	r2, 8018b24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018b1c:	1c9a      	adds	r2, r3, #2
 8018b1e:	6142      	str	r2, [r0, #20]
 8018b20:	8818      	ldrh	r0, [r3, #0]
 8018b22:	bd30      	pop	{r4, r5, pc}
 8018b24:	7605      	strb	r5, [r0, #24]
 8018b26:	6843      	ldr	r3, [r0, #4]
 8018b28:	8819      	ldrh	r1, [r3, #0]
 8018b2a:	b199      	cbz	r1, 8018b54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018b2c:	1c9a      	adds	r2, r3, #2
 8018b2e:	2902      	cmp	r1, #2
 8018b30:	6042      	str	r2, [r0, #4]
 8018b32:	d1f5      	bne.n	8018b20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8018b34:	7c03      	ldrb	r3, [r0, #16]
 8018b36:	2b01      	cmp	r3, #1
 8018b38:	d8e5      	bhi.n	8018b06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018b3a:	1c5a      	adds	r2, r3, #1
 8018b3c:	3302      	adds	r3, #2
 8018b3e:	7402      	strb	r2, [r0, #16]
 8018b40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8018b44:	6143      	str	r3, [r0, #20]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d0dd      	beq.n	8018b06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018b4a:	881b      	ldrh	r3, [r3, #0]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d0da      	beq.n	8018b06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018b50:	7604      	strb	r4, [r0, #24]
 8018b52:	e7d8      	b.n	8018b06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018b54:	2000      	movs	r0, #0
 8018b56:	e7e4      	b.n	8018b22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08018b58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8018b58:	b430      	push	{r4, r5}
 8018b5a:	6815      	ldr	r5, [r2, #0]
 8018b5c:	6085      	str	r5, [r0, #8]
 8018b5e:	6852      	ldr	r2, [r2, #4]
 8018b60:	6443      	str	r3, [r0, #68]	; 0x44
 8018b62:	60c2      	str	r2, [r0, #12]
 8018b64:	2200      	movs	r2, #0
 8018b66:	9b02      	ldr	r3, [sp, #8]
 8018b68:	7402      	strb	r2, [r0, #16]
 8018b6a:	6001      	str	r1, [r0, #0]
 8018b6c:	6483      	str	r3, [r0, #72]	; 0x48
 8018b6e:	6042      	str	r2, [r0, #4]
 8018b70:	6142      	str	r2, [r0, #20]
 8018b72:	7602      	strb	r2, [r0, #24]
 8018b74:	8702      	strh	r2, [r0, #56]	; 0x38
 8018b76:	8402      	strh	r2, [r0, #32]
 8018b78:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018b7c:	bc30      	pop	{r4, r5}
 8018b7e:	f7ed bfe9 	b.w	8006b54 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08018b82 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8018b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b84:	4605      	mov	r5, r0
 8018b86:	4608      	mov	r0, r1
 8018b88:	b1f1      	cbz	r1, 8018bc8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8018b8a:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8018b8e:	460b      	mov	r3, r1
 8018b90:	f101 0708 	add.w	r7, r1, #8
 8018b94:	4622      	mov	r2, r4
 8018b96:	6818      	ldr	r0, [r3, #0]
 8018b98:	3308      	adds	r3, #8
 8018b9a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018b9e:	4626      	mov	r6, r4
 8018ba0:	42bb      	cmp	r3, r7
 8018ba2:	c603      	stmia	r6!, {r0, r1}
 8018ba4:	4634      	mov	r4, r6
 8018ba6:	d1f6      	bne.n	8018b96 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018ba8:	6818      	ldr	r0, [r3, #0]
 8018baa:	6030      	str	r0, [r6, #0]
 8018bac:	4610      	mov	r0, r2
 8018bae:	889b      	ldrh	r3, [r3, #4]
 8018bb0:	80b3      	strh	r3, [r6, #4]
 8018bb2:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8018bb6:	015b      	lsls	r3, r3, #5
 8018bb8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018bbc:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8018bc0:	430b      	orrs	r3, r1
 8018bc2:	425b      	negs	r3, r3
 8018bc4:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8018bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018bca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8018bca:	b538      	push	{r3, r4, r5, lr}
 8018bcc:	460c      	mov	r4, r1
 8018bce:	6811      	ldr	r1, [r2, #0]
 8018bd0:	4610      	mov	r0, r2
 8018bd2:	68cd      	ldr	r5, [r1, #12]
 8018bd4:	4619      	mov	r1, r3
 8018bd6:	47a8      	blx	r5
 8018bd8:	2800      	cmp	r0, #0
 8018bda:	bf08      	it	eq
 8018bdc:	4620      	moveq	r0, r4
 8018bde:	bd38      	pop	{r3, r4, r5, pc}

08018be0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018be2:	4604      	mov	r4, r0
 8018be4:	4615      	mov	r5, r2
 8018be6:	4608      	mov	r0, r1
 8018be8:	b93a      	cbnz	r2, 8018bfa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8018bea:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018bee:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8018bf2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8018bf6:	4628      	mov	r0, r5
 8018bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bfa:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8018bfe:	8893      	ldrh	r3, [r2, #4]
 8018c00:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8018c04:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018c08:	79ee      	ldrb	r6, [r5, #7]
 8018c0a:	4316      	orrs	r6, r2
 8018c0c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8018c10:	189a      	adds	r2, r3, r2
 8018c12:	b2b7      	uxth	r7, r6
 8018c14:	b291      	uxth	r1, r2
 8018c16:	291d      	cmp	r1, #29
 8018c18:	f200 8084 	bhi.w	8018d24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8018c1c:	2201      	movs	r2, #1
 8018c1e:	10f6      	asrs	r6, r6, #3
 8018c20:	408a      	lsls	r2, r1
 8018c22:	4978      	ldr	r1, [pc, #480]	; (8018e04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8018c24:	420a      	tst	r2, r1
 8018c26:	d12e      	bne.n	8018c86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8018c28:	f412 7f60 	tst.w	r2, #896	; 0x380
 8018c2c:	d07a      	beq.n	8018d24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8018c2e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8018c32:	462b      	mov	r3, r5
 8018c34:	f105 0e08 	add.w	lr, r5, #8
 8018c38:	4615      	mov	r5, r2
 8018c3a:	6818      	ldr	r0, [r3, #0]
 8018c3c:	3308      	adds	r3, #8
 8018c3e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018c42:	4694      	mov	ip, r2
 8018c44:	4573      	cmp	r3, lr
 8018c46:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018c4a:	4662      	mov	r2, ip
 8018c4c:	d1f5      	bne.n	8018c3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8018c4e:	6818      	ldr	r0, [r3, #0]
 8018c50:	f8cc 0000 	str.w	r0, [ip]
 8018c54:	889b      	ldrh	r3, [r3, #4]
 8018c56:	f8ac 3004 	strh.w	r3, [ip, #4]
 8018c5a:	b2b3      	uxth	r3, r6
 8018c5c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018c60:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8018c64:	1aca      	subs	r2, r1, r3
 8018c66:	1bcf      	subs	r7, r1, r7
 8018c68:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8018c6c:	b292      	uxth	r2, r2
 8018c6e:	1afb      	subs	r3, r7, r3
 8018c70:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8018c74:	10d2      	asrs	r2, r2, #3
 8018c76:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8018c7a:	4302      	orrs	r2, r0
 8018c7c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8018c80:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018c84:	e7b7      	b.n	8018bf6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018c86:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018c88:	b92b      	cbnz	r3, 8018c96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8018c8a:	4b5f      	ldr	r3, [pc, #380]	; (8018e08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8018c8c:	21c0      	movs	r1, #192	; 0xc0
 8018c8e:	4a5f      	ldr	r2, [pc, #380]	; (8018e0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8018c90:	485f      	ldr	r0, [pc, #380]	; (8018e10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8018c92:	f00d f801 	bl	8025c98 <__assert_func>
 8018c96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018c98:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018c9c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8018c9e:	f640 6333 	movw	r3, #3635	; 0xe33
 8018ca2:	4299      	cmp	r1, r3
 8018ca4:	d110      	bne.n	8018cc8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8018ca6:	6803      	ldr	r3, [r0, #0]
 8018ca8:	68db      	ldr	r3, [r3, #12]
 8018caa:	4798      	blx	r3
 8018cac:	7b41      	ldrb	r1, [r0, #13]
 8018cae:	00cb      	lsls	r3, r1, #3
 8018cb0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018cb4:	7a03      	ldrb	r3, [r0, #8]
 8018cb6:	0648      	lsls	r0, r1, #25
 8018cb8:	ea43 0302 	orr.w	r3, r3, r2
 8018cbc:	bf44      	itt	mi
 8018cbe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018cc2:	b21b      	sxthmi	r3, r3
 8018cc4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018cc8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8018ccc:	462a      	mov	r2, r5
 8018cce:	f105 0c08 	add.w	ip, r5, #8
 8018cd2:	443b      	add	r3, r7
 8018cd4:	4433      	add	r3, r6
 8018cd6:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8018cda:	b29b      	uxth	r3, r3
 8018cdc:	4635      	mov	r5, r6
 8018cde:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018ce2:	6810      	ldr	r0, [r2, #0]
 8018ce4:	3208      	adds	r2, #8
 8018ce6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8018cea:	4637      	mov	r7, r6
 8018cec:	4562      	cmp	r2, ip
 8018cee:	c703      	stmia	r7!, {r0, r1}
 8018cf0:	463e      	mov	r6, r7
 8018cf2:	d1f6      	bne.n	8018ce2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8018cf4:	6810      	ldr	r0, [r2, #0]
 8018cf6:	6038      	str	r0, [r7, #0]
 8018cf8:	8892      	ldrh	r2, [r2, #4]
 8018cfa:	80ba      	strh	r2, [r7, #4]
 8018cfc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018d00:	10db      	asrs	r3, r3, #3
 8018d02:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018d0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018d0e:	4313      	orrs	r3, r2
 8018d10:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8018d14:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018d18:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8018d1c:	1a9b      	subs	r3, r3, r2
 8018d1e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018d22:	e768      	b.n	8018bf6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018d24:	f023 0204 	bic.w	r2, r3, #4
 8018d28:	f640 611b 	movw	r1, #3611	; 0xe1b
 8018d2c:	428a      	cmp	r2, r1
 8018d2e:	d003      	beq.n	8018d38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8018d30:	f640 621d 	movw	r2, #3613	; 0xe1d
 8018d34:	4293      	cmp	r3, r2
 8018d36:	d120      	bne.n	8018d7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8018d38:	3b01      	subs	r3, #1
 8018d3a:	4602      	mov	r2, r0
 8018d3c:	4629      	mov	r1, r5
 8018d3e:	4620      	mov	r0, r4
 8018d40:	b29b      	uxth	r3, r3
 8018d42:	f7ff ff42 	bl	8018bca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018d46:	7b41      	ldrb	r1, [r0, #13]
 8018d48:	00cb      	lsls	r3, r1, #3
 8018d4a:	0649      	lsls	r1, r1, #25
 8018d4c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018d50:	7a03      	ldrb	r3, [r0, #8]
 8018d52:	ea43 0302 	orr.w	r3, r3, r2
 8018d56:	bf44      	itt	mi
 8018d58:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018d5c:	b21b      	sxthmi	r3, r3
 8018d5e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018d62:	7b6b      	ldrb	r3, [r5, #13]
 8018d64:	7aaa      	ldrb	r2, [r5, #10]
 8018d66:	005b      	lsls	r3, r3, #1
 8018d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d6c:	4313      	orrs	r3, r2
 8018d6e:	115a      	asrs	r2, r3, #5
 8018d70:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018d74:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018d78:	e035      	b.n	8018de6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8018d7a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8018d7e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8018d82:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8018d86:	7a2a      	ldrb	r2, [r5, #8]
 8018d88:	ea42 0201 	orr.w	r2, r2, r1
 8018d8c:	f640 6109 	movw	r1, #3593	; 0xe09
 8018d90:	bf1c      	itt	ne
 8018d92:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8018d96:	b212      	sxthne	r2, r2
 8018d98:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018d9c:	f023 0210 	bic.w	r2, r3, #16
 8018da0:	428a      	cmp	r2, r1
 8018da2:	d003      	beq.n	8018dac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8018da4:	f640 6213 	movw	r2, #3603	; 0xe13
 8018da8:	4293      	cmp	r3, r2
 8018daa:	d129      	bne.n	8018e00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8018dac:	7b6e      	ldrb	r6, [r5, #13]
 8018dae:	4629      	mov	r1, r5
 8018db0:	0076      	lsls	r6, r6, #1
 8018db2:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018db6:	7aae      	ldrb	r6, [r5, #10]
 8018db8:	4316      	orrs	r6, r2
 8018dba:	f640 6213 	movw	r2, #3603	; 0xe13
 8018dbe:	4293      	cmp	r3, r2
 8018dc0:	4602      	mov	r2, r0
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	bf16      	itet	ne
 8018dc6:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018dca:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8018dce:	b29b      	uxthne	r3, r3
 8018dd0:	f7ff fefb 	bl	8018bca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018dd4:	7b43      	ldrb	r3, [r0, #13]
 8018dd6:	7a82      	ldrb	r2, [r0, #10]
 8018dd8:	005b      	lsls	r3, r3, #1
 8018dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018dde:	4313      	orrs	r3, r2
 8018de0:	1af6      	subs	r6, r6, r3
 8018de2:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8018de6:	7b69      	ldrb	r1, [r5, #13]
 8018de8:	00cb      	lsls	r3, r1, #3
 8018dea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018dee:	7a2b      	ldrb	r3, [r5, #8]
 8018df0:	4313      	orrs	r3, r2
 8018df2:	064a      	lsls	r2, r1, #25
 8018df4:	bf44      	itt	mi
 8018df6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018dfa:	b21b      	sxthmi	r3, r3
 8018dfc:	1bdb      	subs	r3, r3, r7
 8018dfe:	e73f      	b.n	8018c80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8018e00:	2300      	movs	r3, #0
 8018e02:	e7b7      	b.n	8018d74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8018e04:	3fc00079 	.word	0x3fc00079
 8018e08:	08029698 	.word	0x08029698
 8018e0c:	0802990a 	.word	0x0802990a
 8018e10:	080296a1 	.word	0x080296a1

08018e14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e18:	4604      	mov	r4, r0
 8018e1a:	b942      	cbnz	r2, 8018e2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018e20:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8018e24:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8018e28:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018e2c:	e046      	b.n	8018ebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8018e2e:	7b51      	ldrb	r1, [r2, #13]
 8018e30:	8893      	ldrh	r3, [r2, #4]
 8018e32:	010f      	lsls	r7, r1, #4
 8018e34:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018e38:	79d7      	ldrb	r7, [r2, #7]
 8018e3a:	4307      	orrs	r7, r0
 8018e3c:	2f04      	cmp	r7, #4
 8018e3e:	b2bd      	uxth	r5, r7
 8018e40:	bfcc      	ite	gt
 8018e42:	08bf      	lsrgt	r7, r7, #2
 8018e44:	2701      	movle	r7, #1
 8018e46:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018e4a:	f200 80ab 	bhi.w	8018fa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8018e4e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018e52:	4283      	cmp	r3, r0
 8018e54:	d216      	bcs.n	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018e56:	f240 605b 	movw	r0, #1627	; 0x65b
 8018e5a:	4283      	cmp	r3, r0
 8018e5c:	d859      	bhi.n	8018f12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8018e5e:	f240 6057 	movw	r0, #1623	; 0x657
 8018e62:	4283      	cmp	r3, r0
 8018e64:	d20e      	bcs.n	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018e66:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018e6a:	d24a      	bcs.n	8018f02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8018e6c:	f240 604e 	movw	r0, #1614	; 0x64e
 8018e70:	4283      	cmp	r3, r0
 8018e72:	d207      	bcs.n	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018e74:	f240 601a 	movw	r0, #1562	; 0x61a
 8018e78:	4283      	cmp	r3, r0
 8018e7a:	d02a      	beq.n	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018e7c:	d821      	bhi.n	8018ec2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8018e7e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018e82:	d35b      	bcc.n	8018f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018e84:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8018e88:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018e8c:	f040 80d0 	bne.w	8019030 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8018e90:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8018e94:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018e98:	f040 80ca 	bne.w	8019030 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8018e9c:	00cb      	lsls	r3, r1, #3
 8018e9e:	0649      	lsls	r1, r1, #25
 8018ea0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018ea4:	7a13      	ldrb	r3, [r2, #8]
 8018ea6:	ea43 0300 	orr.w	r3, r3, r0
 8018eaa:	bf44      	itt	mi
 8018eac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018eb0:	b21b      	sxthmi	r3, r3
 8018eb2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018eb6:	1b5d      	subs	r5, r3, r5
 8018eb8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018ebc:	4610      	mov	r0, r2
 8018ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ec2:	f240 604b 	movw	r0, #1611	; 0x64b
 8018ec6:	4283      	cmp	r3, r0
 8018ec8:	d338      	bcc.n	8018f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018eca:	f240 604c 	movw	r0, #1612	; 0x64c
 8018ece:	4283      	cmp	r3, r0
 8018ed0:	d9d8      	bls.n	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018ed2:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8018ed6:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8018eda:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018ede:	f040 80f2 	bne.w	80190c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8018ee2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018ee6:	f040 80ee 	bne.w	80190c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8018eea:	00cb      	lsls	r3, r1, #3
 8018eec:	064e      	lsls	r6, r1, #25
 8018eee:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018ef2:	7a13      	ldrb	r3, [r2, #8]
 8018ef4:	ea43 0300 	orr.w	r3, r3, r0
 8018ef8:	bf44      	itt	mi
 8018efa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018efe:	b21b      	sxthmi	r3, r3
 8018f00:	e7d9      	b.n	8018eb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8018f02:	f240 6054 	movw	r0, #1620	; 0x654
 8018f06:	4283      	cmp	r3, r0
 8018f08:	d8e3      	bhi.n	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018f0a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018f0e:	d9e0      	bls.n	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018f10:	e7b8      	b.n	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018f12:	f240 6074 	movw	r0, #1652	; 0x674
 8018f16:	4283      	cmp	r3, r0
 8018f18:	d0b4      	beq.n	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018f1a:	d82d      	bhi.n	8018f78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8018f1c:	f240 605e 	movw	r0, #1630	; 0x65e
 8018f20:	4283      	cmp	r3, r0
 8018f22:	d804      	bhi.n	8018f2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8018f24:	f240 605d 	movw	r0, #1629	; 0x65d
 8018f28:	4283      	cmp	r3, r0
 8018f2a:	d3d2      	bcc.n	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018f2c:	e7aa      	b.n	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018f2e:	f240 605f 	movw	r0, #1631	; 0x65f
 8018f32:	4283      	cmp	r3, r0
 8018f34:	d0cd      	beq.n	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018f36:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018f3a:	d0a3      	beq.n	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018f3c:	00cb      	lsls	r3, r1, #3
 8018f3e:	0649      	lsls	r1, r1, #25
 8018f40:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018f44:	7a13      	ldrb	r3, [r2, #8]
 8018f46:	ea43 0300 	orr.w	r3, r3, r0
 8018f4a:	bf44      	itt	mi
 8018f4c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018f50:	b21b      	sxthmi	r3, r3
 8018f52:	1b5d      	subs	r5, r3, r5
 8018f54:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018f58:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018f5c:	7b53      	ldrb	r3, [r2, #13]
 8018f5e:	015b      	lsls	r3, r3, #5
 8018f60:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018f64:	7993      	ldrb	r3, [r2, #6]
 8018f66:	430b      	orrs	r3, r1
 8018f68:	2105      	movs	r1, #5
 8018f6a:	005b      	lsls	r3, r3, #1
 8018f6c:	fb93 f3f1 	sdiv	r3, r3, r1
 8018f70:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018f74:	440b      	add	r3, r1
 8018f76:	e757      	b.n	8018e28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018f78:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018f7c:	4283      	cmp	r3, r0
 8018f7e:	d809      	bhi.n	8018f94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8018f80:	f240 60df 	movw	r0, #1759	; 0x6df
 8018f84:	4283      	cmp	r3, r0
 8018f86:	f4bf af7d 	bcs.w	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018f8a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018f8e:	2b05      	cmp	r3, #5
 8018f90:	d8d4      	bhi.n	8018f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018f92:	e777      	b.n	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018f94:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8018f98:	4283      	cmp	r3, r0
 8018f9a:	d09a      	beq.n	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018f9c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8018fa0:	4283      	cmp	r3, r0
 8018fa2:	e7ca      	b.n	8018f3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8018fa4:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8018fa8:	d22b      	bcs.n	8019002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8018faa:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8018fae:	4283      	cmp	r3, r0
 8018fb0:	d28f      	bcs.n	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018fb2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018fb6:	4283      	cmp	r3, r0
 8018fb8:	d816      	bhi.n	8018fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8018fba:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8018fbe:	4283      	cmp	r3, r0
 8018fc0:	f4bf af60 	bcs.w	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018fc4:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8018fc8:	4283      	cmp	r3, r0
 8018fca:	d80a      	bhi.n	8018fe2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8018fcc:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8018fd0:	4283      	cmp	r3, r0
 8018fd2:	f4bf af57 	bcs.w	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8018fd6:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018fda:	4283      	cmp	r3, r0
 8018fdc:	f43f af79 	beq.w	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8018fe0:	e7ac      	b.n	8018f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018fe2:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8018fe6:	e7f8      	b.n	8018fda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8018fe8:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018fec:	4283      	cmp	r3, r0
 8018fee:	d802      	bhi.n	8018ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8018ff0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018ff4:	e798      	b.n	8018f28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8018ff6:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018ffa:	4283      	cmp	r3, r0
 8018ffc:	f47f af42 	bne.w	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019000:	e767      	b.n	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019002:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8019006:	4283      	cmp	r3, r0
 8019008:	f43f af63 	beq.w	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801900c:	d802      	bhi.n	8019014 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801900e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8019012:	e7f2      	b.n	8018ffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8019014:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8019018:	4283      	cmp	r3, r0
 801901a:	d805      	bhi.n	8019028 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801901c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8019020:	4283      	cmp	r3, r0
 8019022:	f4ff af2f 	bcc.w	8018e84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019026:	e754      	b.n	8018ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019028:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801902c:	4283      	cmp	r3, r0
 801902e:	e7af      	b.n	8018f90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8019030:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8019034:	4617      	mov	r7, r2
 8019036:	f102 0808 	add.w	r8, r2, #8
 801903a:	4666      	mov	r6, ip
 801903c:	6838      	ldr	r0, [r7, #0]
 801903e:	3708      	adds	r7, #8
 8019040:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8019044:	46e6      	mov	lr, ip
 8019046:	4547      	cmp	r7, r8
 8019048:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801904c:	46f4      	mov	ip, lr
 801904e:	d1f5      	bne.n	801903c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8019050:	6838      	ldr	r0, [r7, #0]
 8019052:	f8ce 0000 	str.w	r0, [lr]
 8019056:	88b9      	ldrh	r1, [r7, #4]
 8019058:	f8ae 1004 	strh.w	r1, [lr, #4]
 801905c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019060:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019064:	d009      	beq.n	801907a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8019066:	7b51      	ldrb	r1, [r2, #13]
 8019068:	7992      	ldrb	r2, [r2, #6]
 801906a:	0149      	lsls	r1, r1, #5
 801906c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019070:	4311      	orrs	r1, r2
 8019072:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019076:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801907a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801907e:	d00d      	beq.n	801909c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8019080:	442b      	add	r3, r5
 8019082:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019086:	b29b      	uxth	r3, r3
 8019088:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801908c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019090:	10db      	asrs	r3, r3, #3
 8019092:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019096:	4313      	orrs	r3, r2
 8019098:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801909c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80190a0:	00cb      	lsls	r3, r1, #3
 80190a2:	064f      	lsls	r7, r1, #25
 80190a4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80190a8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80190ac:	ea43 0302 	orr.w	r3, r3, r2
 80190b0:	bf44      	itt	mi
 80190b2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80190b6:	b21b      	sxthmi	r3, r3
 80190b8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80190bc:	1b5d      	subs	r5, r3, r5
 80190be:	4632      	mov	r2, r6
 80190c0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80190c4:	e6fa      	b.n	8018ebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80190c6:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 80190ca:	4694      	mov	ip, r2
 80190cc:	f102 0908 	add.w	r9, r2, #8
 80190d0:	4676      	mov	r6, lr
 80190d2:	f8dc 0000 	ldr.w	r0, [ip]
 80190d6:	f10c 0c08 	add.w	ip, ip, #8
 80190da:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 80190de:	46f0      	mov	r8, lr
 80190e0:	45cc      	cmp	ip, r9
 80190e2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80190e6:	46c6      	mov	lr, r8
 80190e8:	d1f3      	bne.n	80190d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 80190ea:	f8dc 0000 	ldr.w	r0, [ip]
 80190ee:	f8c8 0000 	str.w	r0, [r8]
 80190f2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80190f6:	f8a8 1004 	strh.w	r1, [r8, #4]
 80190fa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80190fe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019102:	d009      	beq.n	8019118 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8019104:	7b51      	ldrb	r1, [r2, #13]
 8019106:	7992      	ldrb	r2, [r2, #6]
 8019108:	0149      	lsls	r1, r1, #5
 801910a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801910e:	4311      	orrs	r1, r2
 8019110:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019114:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019118:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801911c:	d00d      	beq.n	801913a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801911e:	1bdb      	subs	r3, r3, r7
 8019120:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019124:	b29b      	uxth	r3, r3
 8019126:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801912a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801912e:	10db      	asrs	r3, r3, #3
 8019130:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019134:	4313      	orrs	r3, r2
 8019136:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801913a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801913e:	00cb      	lsls	r3, r1, #3
 8019140:	0648      	lsls	r0, r1, #25
 8019142:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019146:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801914a:	ea43 0302 	orr.w	r3, r3, r2
 801914e:	bf44      	itt	mi
 8019150:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019154:	b21b      	sxthmi	r3, r3
 8019156:	e7b1      	b.n	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08019158 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801915c:	461e      	mov	r6, r3
 801915e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8019160:	4604      	mov	r4, r0
 8019162:	4617      	mov	r7, r2
 8019164:	b92b      	cbnz	r3, 8019172 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8019166:	4b25      	ldr	r3, [pc, #148]	; (80191fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8019168:	21c0      	movs	r1, #192	; 0xc0
 801916a:	4a25      	ldr	r2, [pc, #148]	; (8019200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801916c:	4825      	ldr	r0, [pc, #148]	; (8019204 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801916e:	f00c fd93 	bl	8025c98 <__assert_func>
 8019172:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019174:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019178:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801917c:	f7ed fc44 	bl	8006a08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019180:	4605      	mov	r5, r0
 8019182:	b918      	cbnz	r0, 801918c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8019184:	6030      	str	r0, [r6, #0]
 8019186:	4628      	mov	r0, r5
 8019188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801918c:	683b      	ldr	r3, [r7, #0]
 801918e:	4601      	mov	r1, r0
 8019190:	4638      	mov	r0, r7
 8019192:	68db      	ldr	r3, [r3, #12]
 8019194:	4798      	blx	r3
 8019196:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801919a:	4602      	mov	r2, r0
 801919c:	6030      	str	r0, [r6, #0]
 801919e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80191a2:	d213      	bcs.n	80191cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 80191a4:	4643      	mov	r3, r8
 80191a6:	4639      	mov	r1, r7
 80191a8:	4620      	mov	r0, r4
 80191aa:	f7ff fe33 	bl	8018e14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80191ae:	6030      	str	r0, [r6, #0]
 80191b0:	6833      	ldr	r3, [r6, #0]
 80191b2:	b143      	cbz	r3, 80191c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 80191b4:	7b5a      	ldrb	r2, [r3, #13]
 80191b6:	7a9b      	ldrb	r3, [r3, #10]
 80191b8:	0052      	lsls	r2, r2, #1
 80191ba:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80191be:	4313      	orrs	r3, r2
 80191c0:	bf0c      	ite	eq
 80191c2:	2301      	moveq	r3, #1
 80191c4:	2300      	movne	r3, #0
 80191c6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80191ca:	e7dc      	b.n	8019186 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 80191cc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80191d0:	b29b      	uxth	r3, r3
 80191d2:	2b7f      	cmp	r3, #127	; 0x7f
 80191d4:	d804      	bhi.n	80191e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 80191d6:	4639      	mov	r1, r7
 80191d8:	4620      	mov	r0, r4
 80191da:	f7ff fd01 	bl	8018be0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80191de:	e7e6      	b.n	80191ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80191e0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d0e3      	beq.n	80191b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80191e8:	f640 1302 	movw	r3, #2306	; 0x902
 80191ec:	429d      	cmp	r5, r3
 80191ee:	d1df      	bne.n	80191b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80191f0:	4601      	mov	r1, r0
 80191f2:	4620      	mov	r0, r4
 80191f4:	f7ff fcc5 	bl	8018b82 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80191f8:	e7d9      	b.n	80191ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80191fa:	bf00      	nop
 80191fc:	08029698 	.word	0x08029698
 8019200:	0802990a 	.word	0x0802990a
 8019204:	080296a1 	.word	0x080296a1

08019208 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8019208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801920c:	461e      	mov	r6, r3
 801920e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8019210:	4604      	mov	r4, r0
 8019212:	4617      	mov	r7, r2
 8019214:	b92b      	cbnz	r3, 8019222 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8019216:	4b26      	ldr	r3, [pc, #152]	; (80192b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8019218:	21c0      	movs	r1, #192	; 0xc0
 801921a:	4a26      	ldr	r2, [pc, #152]	; (80192b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801921c:	4826      	ldr	r0, [pc, #152]	; (80192b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801921e:	f00c fd3b 	bl	8025c98 <__assert_func>
 8019222:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019224:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019228:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801922c:	f7ed fbec 	bl	8006a08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019230:	4605      	mov	r5, r0
 8019232:	b918      	cbnz	r0, 801923c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8019234:	6030      	str	r0, [r6, #0]
 8019236:	4628      	mov	r0, r5
 8019238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801923c:	683b      	ldr	r3, [r7, #0]
 801923e:	4601      	mov	r1, r0
 8019240:	4638      	mov	r0, r7
 8019242:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019246:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801924a:	47c8      	blx	r9
 801924c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019250:	4602      	mov	r2, r0
 8019252:	6030      	str	r0, [r6, #0]
 8019254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019258:	d213      	bcs.n	8019282 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801925a:	4643      	mov	r3, r8
 801925c:	4639      	mov	r1, r7
 801925e:	4620      	mov	r0, r4
 8019260:	f7ff fdd8 	bl	8018e14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019264:	6030      	str	r0, [r6, #0]
 8019266:	6833      	ldr	r3, [r6, #0]
 8019268:	b143      	cbz	r3, 801927c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801926a:	7b5a      	ldrb	r2, [r3, #13]
 801926c:	7a9b      	ldrb	r3, [r3, #10]
 801926e:	0052      	lsls	r2, r2, #1
 8019270:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019274:	4313      	orrs	r3, r2
 8019276:	bf0c      	ite	eq
 8019278:	2301      	moveq	r3, #1
 801927a:	2300      	movne	r3, #0
 801927c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8019280:	e7d9      	b.n	8019236 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8019282:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019286:	b29b      	uxth	r3, r3
 8019288:	2b7f      	cmp	r3, #127	; 0x7f
 801928a:	d804      	bhi.n	8019296 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801928c:	4639      	mov	r1, r7
 801928e:	4620      	mov	r0, r4
 8019290:	f7ff fca6 	bl	8018be0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019294:	e7e6      	b.n	8019264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8019296:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801929a:	2b00      	cmp	r3, #0
 801929c:	d0e3      	beq.n	8019266 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801929e:	f640 1302 	movw	r3, #2306	; 0x902
 80192a2:	429d      	cmp	r5, r3
 80192a4:	d1df      	bne.n	8019266 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80192a6:	4601      	mov	r1, r0
 80192a8:	4620      	mov	r0, r4
 80192aa:	f7ff fc6a 	bl	8018b82 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80192ae:	e7d9      	b.n	8019264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80192b0:	08029698 	.word	0x08029698
 80192b4:	0802990a 	.word	0x0802990a
 80192b8:	080296a1 	.word	0x080296a1

080192bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80192bc:	b510      	push	{r4, lr}
 80192be:	4604      	mov	r4, r0
 80192c0:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80192c4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80192c6:	b9d9      	cbnz	r1, 8019300 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 80192c8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80192ca:	2b0a      	cmp	r3, #10
 80192cc:	d037      	beq.n	801933e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80192ce:	4620      	mov	r0, r4
 80192d0:	f7ff fc16 	bl	8018b00 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80192d4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80192d6:	2b09      	cmp	r3, #9
 80192d8:	d906      	bls.n	80192e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 80192da:	4b19      	ldr	r3, [pc, #100]	; (8019340 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80192dc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80192e0:	4a18      	ldr	r2, [pc, #96]	; (8019344 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80192e2:	4819      	ldr	r0, [pc, #100]	; (8019348 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 80192e4:	f00c fcd8 	bl	8025c98 <__assert_func>
 80192e8:	1c5a      	adds	r2, r3, #1
 80192ea:	8722      	strh	r2, [r4, #56]	; 0x38
 80192ec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80192ee:	4413      	add	r3, r2
 80192f0:	b29b      	uxth	r3, r3
 80192f2:	2b09      	cmp	r3, #9
 80192f4:	bf88      	it	hi
 80192f6:	3b0a      	subhi	r3, #10
 80192f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80192fc:	8458      	strh	r0, [r3, #34]	; 0x22
 80192fe:	e7e3      	b.n	80192c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8019300:	2b0a      	cmp	r3, #10
 8019302:	d01c      	beq.n	801933e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8019304:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019306:	3901      	subs	r1, #1
 8019308:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801930c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801930e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8019312:	1c51      	adds	r1, r2, #1
 8019314:	b289      	uxth	r1, r1
 8019316:	2901      	cmp	r1, #1
 8019318:	bf8a      	itet	hi
 801931a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801931e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8019320:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8019322:	2b09      	cmp	r3, #9
 8019324:	d8d9      	bhi.n	80192da <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8019326:	1c5a      	adds	r2, r3, #1
 8019328:	8722      	strh	r2, [r4, #56]	; 0x38
 801932a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801932c:	4413      	add	r3, r2
 801932e:	b29b      	uxth	r3, r3
 8019330:	2b09      	cmp	r3, #9
 8019332:	bf88      	it	hi
 8019334:	3b0a      	subhi	r3, #10
 8019336:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801933a:	8458      	strh	r0, [r3, #34]	; 0x22
 801933c:	e7c0      	b.n	80192c0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801933e:	bd10      	pop	{r4, pc}
 8019340:	080296cd 	.word	0x080296cd
 8019344:	08029a60 	.word	0x08029a60
 8019348:	080296a1 	.word	0x080296a1

0801934c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801934c:	b538      	push	{r3, r4, r5, lr}
 801934e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8019350:	4604      	mov	r4, r0
 8019352:	b92a      	cbnz	r2, 8019360 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8019354:	4b13      	ldr	r3, [pc, #76]	; (80193a4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8019356:	21d5      	movs	r1, #213	; 0xd5
 8019358:	4a13      	ldr	r2, [pc, #76]	; (80193a8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801935a:	4814      	ldr	r0, [pc, #80]	; (80193ac <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801935c:	f00c fc9c 	bl	8025c98 <__assert_func>
 8019360:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019362:	3a01      	subs	r2, #1
 8019364:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8019368:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801936a:	8702      	strh	r2, [r0, #56]	; 0x38
 801936c:	1c5a      	adds	r2, r3, #1
 801936e:	b292      	uxth	r2, r2
 8019370:	2a09      	cmp	r2, #9
 8019372:	bf8a      	itet	hi
 8019374:	3b09      	subhi	r3, #9
 8019376:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8019378:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801937a:	f7ff ff9f 	bl	80192bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801937e:	8c23      	ldrh	r3, [r4, #32]
 8019380:	2b01      	cmp	r3, #1
 8019382:	bf9c      	itt	ls
 8019384:	3301      	addls	r3, #1
 8019386:	8423      	strhls	r3, [r4, #32]
 8019388:	8be3      	ldrh	r3, [r4, #30]
 801938a:	b90b      	cbnz	r3, 8019390 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801938c:	2302      	movs	r3, #2
 801938e:	83e3      	strh	r3, [r4, #30]
 8019390:	8be3      	ldrh	r3, [r4, #30]
 8019392:	4628      	mov	r0, r5
 8019394:	3b01      	subs	r3, #1
 8019396:	b29b      	uxth	r3, r3
 8019398:	83e3      	strh	r3, [r4, #30]
 801939a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801939e:	8365      	strh	r5, [r4, #26]
 80193a0:	bd38      	pop	{r3, r4, r5, pc}
 80193a2:	bf00      	nop
 80193a4:	08029698 	.word	0x08029698
 80193a8:	080299b5 	.word	0x080299b5
 80193ac:	080296a1 	.word	0x080296a1

080193b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80193b0:	428a      	cmp	r2, r1
 80193b2:	b538      	push	{r3, r4, r5, lr}
 80193b4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80193b6:	d90c      	bls.n	80193d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 80193b8:	b92c      	cbnz	r4, 80193c6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 80193ba:	4b1c      	ldr	r3, [pc, #112]	; (801942c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 80193bc:	21e1      	movs	r1, #225	; 0xe1
 80193be:	4a1c      	ldr	r2, [pc, #112]	; (8019430 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 80193c0:	481c      	ldr	r0, [pc, #112]	; (8019434 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 80193c2:	f00c fc69 	bl	8025c98 <__assert_func>
 80193c6:	3c01      	subs	r4, #1
 80193c8:	4b1b      	ldr	r3, [pc, #108]	; (8019438 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 80193ca:	4a1c      	ldr	r2, [pc, #112]	; (801943c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 80193cc:	21c5      	movs	r1, #197	; 0xc5
 80193ce:	8704      	strh	r4, [r0, #56]	; 0x38
 80193d0:	e7f6      	b.n	80193c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80193d2:	428c      	cmp	r4, r1
 80193d4:	d203      	bcs.n	80193de <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 80193d6:	4b1a      	ldr	r3, [pc, #104]	; (8019440 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 80193d8:	21cb      	movs	r1, #203	; 0xcb
 80193da:	4a1a      	ldr	r2, [pc, #104]	; (8019444 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 80193dc:	e7f0      	b.n	80193c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80193de:	1a64      	subs	r4, r4, r1
 80193e0:	250a      	movs	r5, #10
 80193e2:	8704      	strh	r4, [r0, #56]	; 0x38
 80193e4:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 80193e6:	4421      	add	r1, r4
 80193e8:	b289      	uxth	r1, r1
 80193ea:	2909      	cmp	r1, #9
 80193ec:	bf88      	it	hi
 80193ee:	390a      	subhi	r1, #10
 80193f0:	86c1      	strh	r1, [r0, #54]	; 0x36
 80193f2:	b1ba      	cbz	r2, 8019424 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 80193f4:	3a01      	subs	r2, #1
 80193f6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80193f8:	b292      	uxth	r2, r2
 80193fa:	2909      	cmp	r1, #9
 80193fc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019400:	d903      	bls.n	801940a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8019402:	4b11      	ldr	r3, [pc, #68]	; (8019448 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8019404:	21e6      	movs	r1, #230	; 0xe6
 8019406:	4a11      	ldr	r2, [pc, #68]	; (801944c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8019408:	e7da      	b.n	80193c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801940a:	3101      	adds	r1, #1
 801940c:	8701      	strh	r1, [r0, #56]	; 0x38
 801940e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019410:	b901      	cbnz	r1, 8019414 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8019412:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019414:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019416:	3901      	subs	r1, #1
 8019418:	b289      	uxth	r1, r1
 801941a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801941c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019420:	844c      	strh	r4, [r1, #34]	; 0x22
 8019422:	e7e6      	b.n	80193f2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8019424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019428:	f7ff bf48 	b.w	80192bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801942c:	08029698 	.word	0x08029698
 8019430:	0802978e 	.word	0x0802978e
 8019434:	080296a1 	.word	0x080296a1
 8019438:	080296d9 	.word	0x080296d9
 801943c:	08029838 	.word	0x08029838
 8019440:	080296e7 	.word	0x080296e7
 8019444:	08029b0f 	.word	0x08029b0f
 8019448:	080296f3 	.word	0x080296f3
 801944c:	08029706 	.word	0x08029706

08019450 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019450:	3a01      	subs	r2, #1
 8019452:	b570      	push	{r4, r5, r6, lr}
 8019454:	b292      	uxth	r2, r2
 8019456:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801945a:	42b2      	cmp	r2, r6
 801945c:	d019      	beq.n	8019492 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801945e:	8c04      	ldrh	r4, [r0, #32]
 8019460:	f831 5b02 	ldrh.w	r5, [r1], #2
 8019464:	4294      	cmp	r4, r2
 8019466:	d805      	bhi.n	8019474 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8019468:	4b19      	ldr	r3, [pc, #100]	; (80194d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801946a:	4a1a      	ldr	r2, [pc, #104]	; (80194d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801946c:	21c5      	movs	r1, #197	; 0xc5
 801946e:	481a      	ldr	r0, [pc, #104]	; (80194d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8019470:	f00c fc12 	bl	8025c98 <__assert_func>
 8019474:	8bc4      	ldrh	r4, [r0, #30]
 8019476:	4414      	add	r4, r2
 8019478:	3a01      	subs	r2, #1
 801947a:	b2a4      	uxth	r4, r4
 801947c:	b292      	uxth	r2, r2
 801947e:	2c01      	cmp	r4, #1
 8019480:	bf88      	it	hi
 8019482:	3c02      	subhi	r4, #2
 8019484:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019488:	8b64      	ldrh	r4, [r4, #26]
 801948a:	42ac      	cmp	r4, r5
 801948c:	d0e5      	beq.n	801945a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801948e:	2000      	movs	r0, #0
 8019490:	bd70      	pop	{r4, r5, r6, pc}
 8019492:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019496:	2400      	movs	r4, #0
 8019498:	4413      	add	r3, r2
 801949a:	b2a2      	uxth	r2, r4
 801949c:	429a      	cmp	r2, r3
 801949e:	da14      	bge.n	80194ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 80194a0:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 80194a2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80194a6:	4296      	cmp	r6, r2
 80194a8:	d802      	bhi.n	80194b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 80194aa:	4b09      	ldr	r3, [pc, #36]	; (80194d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80194ac:	4a0b      	ldr	r2, [pc, #44]	; (80194dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 80194ae:	e7dd      	b.n	801946c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 80194b0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80194b2:	3401      	adds	r4, #1
 80194b4:	4432      	add	r2, r6
 80194b6:	b292      	uxth	r2, r2
 80194b8:	2a09      	cmp	r2, #9
 80194ba:	bf88      	it	hi
 80194bc:	3a0a      	subhi	r2, #10
 80194be:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80194c2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80194c4:	42aa      	cmp	r2, r5
 80194c6:	d0e8      	beq.n	801949a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 80194c8:	e7e1      	b.n	801948e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80194ca:	2001      	movs	r0, #1
 80194cc:	e7e0      	b.n	8019490 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80194ce:	bf00      	nop
 80194d0:	080296d9 	.word	0x080296d9
 80194d4:	08029b93 	.word	0x08029b93
 80194d8:	080296a1 	.word	0x080296a1
 80194dc:	08029838 	.word	0x08029838

080194e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80194e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e4:	4605      	mov	r5, r0
 80194e6:	4616      	mov	r6, r2
 80194e8:	1c8c      	adds	r4, r1, #2
 80194ea:	8809      	ldrh	r1, [r1, #0]
 80194ec:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80194f0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80194f4:	42b3      	cmp	r3, r6
 80194f6:	d124      	bne.n	8019542 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80194f8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80194fc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019500:	f001 070f 	and.w	r7, r1, #15
 8019504:	4652      	mov	r2, sl
 8019506:	f8cd 8000 	str.w	r8, [sp]
 801950a:	464b      	mov	r3, r9
 801950c:	4621      	mov	r1, r4
 801950e:	4628      	mov	r0, r5
 8019510:	f7ff ff9e 	bl	8019450 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019514:	4683      	mov	fp, r0
 8019516:	b168      	cbz	r0, 8019534 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019518:	eb0a 0109 	add.w	r1, sl, r9
 801951c:	463a      	mov	r2, r7
 801951e:	4628      	mov	r0, r5
 8019520:	4441      	add	r1, r8
 8019522:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019526:	4649      	mov	r1, r9
 8019528:	f7ff ff42 	bl	80193b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801952c:	4658      	mov	r0, fp
 801952e:	b003      	add	sp, #12
 8019530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019534:	eb07 010a 	add.w	r1, r7, sl
 8019538:	4449      	add	r1, r9
 801953a:	4441      	add	r1, r8
 801953c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019540:	e7d2      	b.n	80194e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019542:	f04f 0b00 	mov.w	fp, #0
 8019546:	e7f1      	b.n	801952c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019548 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019548:	b570      	push	{r4, r5, r6, lr}
 801954a:	8810      	ldrh	r0, [r2, #0]
 801954c:	4298      	cmp	r0, r3
 801954e:	d817      	bhi.n	8019580 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019550:	1e48      	subs	r0, r1, #1
 8019552:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019556:	4298      	cmp	r0, r3
 8019558:	d312      	bcc.n	8019580 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801955a:	2400      	movs	r4, #0
 801955c:	428c      	cmp	r4, r1
 801955e:	d20f      	bcs.n	8019580 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019560:	1860      	adds	r0, r4, r1
 8019562:	1040      	asrs	r0, r0, #1
 8019564:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019568:	0085      	lsls	r5, r0, #2
 801956a:	42b3      	cmp	r3, r6
 801956c:	d902      	bls.n	8019574 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801956e:	3001      	adds	r0, #1
 8019570:	b284      	uxth	r4, r0
 8019572:	e7f3      	b.n	801955c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019574:	d201      	bcs.n	801957a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8019576:	b281      	uxth	r1, r0
 8019578:	e7f0      	b.n	801955c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801957a:	442a      	add	r2, r5
 801957c:	8850      	ldrh	r0, [r2, #2]
 801957e:	bd70      	pop	{r4, r5, r6, pc}
 8019580:	2000      	movs	r0, #0
 8019582:	e7fc      	b.n	801957e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019584 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019588:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801958a:	4604      	mov	r4, r0
 801958c:	260b      	movs	r6, #11
 801958e:	886f      	ldrh	r7, [r5, #2]
 8019590:	087f      	lsrs	r7, r7, #1
 8019592:	3e01      	subs	r6, #1
 8019594:	d01b      	beq.n	80195ce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8019596:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019598:	b92b      	cbnz	r3, 80195a6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801959a:	4b0e      	ldr	r3, [pc, #56]	; (80195d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801959c:	21c0      	movs	r1, #192	; 0xc0
 801959e:	4a0e      	ldr	r2, [pc, #56]	; (80195d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80195a0:	480e      	ldr	r0, [pc, #56]	; (80195dc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80195a2:	f00c fb79 	bl	8025c98 <__assert_func>
 80195a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80195a8:	462a      	mov	r2, r5
 80195aa:	4639      	mov	r1, r7
 80195ac:	4620      	mov	r0, r4
 80195ae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80195b2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80195b6:	4643      	mov	r3, r8
 80195b8:	f7ff ffc6 	bl	8019548 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80195bc:	b138      	cbz	r0, 80195ce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80195be:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80195c2:	4642      	mov	r2, r8
 80195c4:	4620      	mov	r0, r4
 80195c6:	f7ff ff8b 	bl	80194e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80195ca:	2800      	cmp	r0, #0
 80195cc:	d1e1      	bne.n	8019592 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80195ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195d2:	bf00      	nop
 80195d4:	08029698 	.word	0x08029698
 80195d8:	0802990a 	.word	0x0802990a
 80195dc:	080296a1 	.word	0x080296a1

080195e0 <_ZN8touchgfx8ceil28_4El>:
 80195e0:	f110 030f 	adds.w	r3, r0, #15
 80195e4:	d401      	bmi.n	80195ea <_ZN8touchgfx8ceil28_4El+0xa>
 80195e6:	1118      	asrs	r0, r3, #4
 80195e8:	4770      	bx	lr
 80195ea:	2210      	movs	r2, #16
 80195ec:	f1c0 0001 	rsb	r0, r0, #1
 80195f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80195f4:	f010 000f 	ands.w	r0, r0, #15
 80195f8:	bf18      	it	ne
 80195fa:	2001      	movne	r0, #1
 80195fc:	1a18      	subs	r0, r3, r0
 80195fe:	4770      	bx	lr

08019600 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8019600:	2900      	cmp	r1, #0
 8019602:	b538      	push	{r3, r4, r5, lr}
 8019604:	dc05      	bgt.n	8019612 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8019606:	4b0f      	ldr	r3, [pc, #60]	; (8019644 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8019608:	21f7      	movs	r1, #247	; 0xf7
 801960a:	4a0f      	ldr	r2, [pc, #60]	; (8019648 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801960c:	480f      	ldr	r0, [pc, #60]	; (801964c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801960e:	f00c fb43 	bl	8025c98 <__assert_func>
 8019612:	2800      	cmp	r0, #0
 8019614:	db06      	blt.n	8019624 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8019616:	fb90 f4f1 	sdiv	r4, r0, r1
 801961a:	fb01 0114 	mls	r1, r1, r4, r0
 801961e:	6014      	str	r4, [r2, #0]
 8019620:	6019      	str	r1, [r3, #0]
 8019622:	bd38      	pop	{r3, r4, r5, pc}
 8019624:	4240      	negs	r0, r0
 8019626:	fb90 f4f1 	sdiv	r4, r0, r1
 801962a:	4265      	negs	r5, r4
 801962c:	fb01 0014 	mls	r0, r1, r4, r0
 8019630:	6015      	str	r5, [r2, #0]
 8019632:	6018      	str	r0, [r3, #0]
 8019634:	2800      	cmp	r0, #0
 8019636:	d0f4      	beq.n	8019622 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8019638:	6810      	ldr	r0, [r2, #0]
 801963a:	3801      	subs	r0, #1
 801963c:	6010      	str	r0, [r2, #0]
 801963e:	6818      	ldr	r0, [r3, #0]
 8019640:	1a09      	subs	r1, r1, r0
 8019642:	e7ed      	b.n	8019620 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8019644:	08029c64 	.word	0x08029c64
 8019648:	08029ca3 	.word	0x08029ca3
 801964c:	08029c74 	.word	0x08029c74

08019650 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019650:	b570      	push	{r4, r5, r6, lr}
 8019652:	694a      	ldr	r2, [r1, #20]
 8019654:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019656:	684b      	ldr	r3, [r1, #4]
 8019658:	1b54      	subs	r4, r2, r5
 801965a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801965c:	f000 8106 	beq.w	801986c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8019660:	1b9b      	subs	r3, r3, r6
 8019662:	d003      	beq.n	801966c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019664:	4363      	muls	r3, r4
 8019666:	2210      	movs	r2, #16
 8019668:	fb93 f3f2 	sdiv	r3, r3, r2
 801966c:	680c      	ldr	r4, [r1, #0]
 801966e:	698a      	ldr	r2, [r1, #24]
 8019670:	1b65      	subs	r5, r4, r5
 8019672:	f000 80fd 	beq.w	8019870 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8019676:	1b92      	subs	r2, r2, r6
 8019678:	d003      	beq.n	8019682 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801967a:	436a      	muls	r2, r5
 801967c:	2410      	movs	r4, #16
 801967e:	fb92 f2f4 	sdiv	r2, r2, r4
 8019682:	1a9b      	subs	r3, r3, r2
 8019684:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80198ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8019688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801968c:	460a      	mov	r2, r1
 801968e:	ee07 3a90 	vmov	s15, r3
 8019692:	f100 040c 	add.w	r4, r0, #12
 8019696:	4603      	mov	r3, r0
 8019698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801969c:	ee67 7a84 	vmul.f32	s15, s15, s8
 80196a0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80196a4:	eeb1 6a43 	vneg.f32	s12, s6
 80196a8:	edd2 7a02 	vldr	s15, [r2, #8]
 80196ac:	3214      	adds	r2, #20
 80196ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80196b2:	ece3 6a01 	vstmia	r3!, {s13}
 80196b6:	429c      	cmp	r4, r3
 80196b8:	ed52 7a02 	vldr	s15, [r2, #-8]
 80196bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80196c0:	edc3 7a02 	vstr	s15, [r3, #8]
 80196c4:	ed52 7a01 	vldr	s15, [r2, #-4]
 80196c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80196cc:	edc3 7a05 	vstr	s15, [r3, #20]
 80196d0:	d1ea      	bne.n	80196a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80196d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80196d4:	698b      	ldr	r3, [r1, #24]
 80196d6:	edd0 4a02 	vldr	s9, [r0, #8]
 80196da:	1a9b      	subs	r3, r3, r2
 80196dc:	edd0 3a00 	vldr	s7, [r0]
 80196e0:	edd0 6a01 	vldr	s13, [r0, #4]
 80196e4:	ee07 3a90 	vmov	s15, r3
 80196e8:	684b      	ldr	r3, [r1, #4]
 80196ea:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80196ee:	ed90 5a05 	vldr	s10, [r0, #20]
 80196f2:	1a9b      	subs	r3, r3, r2
 80196f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80196f8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80196fc:	ed90 2a03 	vldr	s4, [r0, #12]
 8019700:	ee07 3a10 	vmov	s14, r3
 8019704:	edd0 5a04 	vldr	s11, [r0, #16]
 8019708:	ee67 7a84 	vmul.f32	s15, s15, s8
 801970c:	ed90 1a07 	vldr	s2, [r0, #28]
 8019710:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019714:	edd0 2a06 	vldr	s5, [r0, #24]
 8019718:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801971c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8019720:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019724:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019728:	eee6 7a87 	vfma.f32	s15, s13, s14
 801972c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019730:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8019734:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019736:	694a      	ldr	r2, [r1, #20]
 8019738:	1b13      	subs	r3, r2, r4
 801973a:	ee07 3a10 	vmov	s14, r3
 801973e:	680b      	ldr	r3, [r1, #0]
 8019740:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019744:	1b1b      	subs	r3, r3, r4
 8019746:	ee27 7a04 	vmul.f32	s14, s14, s8
 801974a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801974e:	ee07 3a10 	vmov	s14, r3
 8019752:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019756:	ee27 7a04 	vmul.f32	s14, s14, s8
 801975a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801975e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019762:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8019766:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019768:	698b      	ldr	r3, [r1, #24]
 801976a:	1a9b      	subs	r3, r3, r2
 801976c:	ee06 3a90 	vmov	s13, r3
 8019770:	684b      	ldr	r3, [r1, #4]
 8019772:	1a9b      	subs	r3, r3, r2
 8019774:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019778:	ee07 3a10 	vmov	s14, r3
 801977c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019780:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019784:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019788:	ee27 7a04 	vmul.f32	s14, s14, s8
 801978c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019790:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019794:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8019798:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801979a:	694a      	ldr	r2, [r1, #20]
 801979c:	1b13      	subs	r3, r2, r4
 801979e:	ee07 3a10 	vmov	s14, r3
 80197a2:	680b      	ldr	r3, [r1, #0]
 80197a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80197a8:	1b1b      	subs	r3, r3, r4
 80197aa:	ee27 7a04 	vmul.f32	s14, s14, s8
 80197ae:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80197b2:	ee07 3a10 	vmov	s14, r3
 80197b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80197ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 80197be:	eea5 5a87 	vfma.f32	s10, s11, s14
 80197c2:	edd0 5a08 	vldr	s11, [r0, #32]
 80197c6:	ee31 1a65 	vsub.f32	s2, s2, s11
 80197ca:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80197ce:	ee25 5a06 	vmul.f32	s10, s10, s12
 80197d2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80197d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80197d8:	698b      	ldr	r3, [r1, #24]
 80197da:	1a9b      	subs	r3, r3, r2
 80197dc:	ee07 3a10 	vmov	s14, r3
 80197e0:	684b      	ldr	r3, [r1, #4]
 80197e2:	1a9b      	subs	r3, r3, r2
 80197e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80197e8:	ee01 3a90 	vmov	s3, r3
 80197ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 80197f0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80197f4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80197f8:	ee61 1a84 	vmul.f32	s3, s3, s8
 80197fc:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019800:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019804:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019808:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801980a:	694a      	ldr	r2, [r1, #20]
 801980c:	1b13      	subs	r3, r2, r4
 801980e:	ee03 3a10 	vmov	s6, r3
 8019812:	680b      	ldr	r3, [r1, #0]
 8019814:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019818:	1b1b      	subs	r3, r3, r4
 801981a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801981e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019822:	ee03 3a10 	vmov	s6, r3
 8019826:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801982a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801982e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019832:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019836:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801983a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801983e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019842:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801984a:	dd13      	ble.n	8019874 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801984c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019850:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019854:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019856:	eee3 7a87 	vfma.f32	s15, s7, s14
 801985a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801985e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019862:	dd15      	ble.n	8019890 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8019864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019868:	6403      	str	r3, [r0, #64]	; 0x40
 801986a:	bd70      	pop	{r4, r5, r6, pc}
 801986c:	4623      	mov	r3, r4
 801986e:	e6fd      	b.n	801966c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019870:	462a      	mov	r2, r5
 8019872:	e706      	b.n	8019682 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019874:	d502      	bpl.n	801987c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8019876:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801987a:	e7e9      	b.n	8019850 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801987c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019880:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019884:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801988c:	dade      	bge.n	801984c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801988e:	e7f2      	b.n	8019876 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019890:	d502      	bpl.n	8019898 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8019892:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019896:	e7e7      	b.n	8019868 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8019898:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801989c:	eee3 4a86 	vfma.f32	s9, s7, s12
 80198a0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80198a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198a8:	dadc      	bge.n	8019864 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80198aa:	e7f2      	b.n	8019892 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80198ac:	3d800000 	.word	0x3d800000

080198b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80198b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198b4:	f04f 0814 	mov.w	r8, #20
 80198b8:	4604      	mov	r4, r0
 80198ba:	4617      	mov	r7, r2
 80198bc:	460d      	mov	r5, r1
 80198be:	fb08 f903 	mul.w	r9, r8, r3
 80198c2:	461e      	mov	r6, r3
 80198c4:	eb02 0a09 	add.w	sl, r2, r9
 80198c8:	f8da 0004 	ldr.w	r0, [sl, #4]
 80198cc:	f7ff fe88 	bl	80195e0 <_ZN8touchgfx8ceil28_4El>
 80198d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80198d2:	6160      	str	r0, [r4, #20]
 80198d4:	fb08 f803 	mul.w	r8, r8, r3
 80198d8:	9001      	str	r0, [sp, #4]
 80198da:	eb07 0b08 	add.w	fp, r7, r8
 80198de:	f8db 0004 	ldr.w	r0, [fp, #4]
 80198e2:	f7ff fe7d 	bl	80195e0 <_ZN8touchgfx8ceil28_4El>
 80198e6:	9a01      	ldr	r2, [sp, #4]
 80198e8:	1a80      	subs	r0, r0, r2
 80198ea:	61a0      	str	r0, [r4, #24]
 80198ec:	2800      	cmp	r0, #0
 80198ee:	f000 8088 	beq.w	8019a02 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 80198f2:	f857 3009 	ldr.w	r3, [r7, r9]
 80198f6:	f857 c008 	ldr.w	ip, [r7, r8]
 80198fa:	f8db 0004 	ldr.w	r0, [fp, #4]
 80198fe:	ebac 0c03 	sub.w	ip, ip, r3
 8019902:	f8da 1004 	ldr.w	r1, [sl, #4]
 8019906:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801990a:	1a40      	subs	r0, r0, r1
 801990c:	fb0b f202 	mul.w	r2, fp, r2
 8019910:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8019914:	fb0c 2211 	mls	r2, ip, r1, r2
 8019918:	4641      	mov	r1, r8
 801991a:	fb00 2003 	mla	r0, r0, r3, r2
 801991e:	f104 0310 	add.w	r3, r4, #16
 8019922:	4622      	mov	r2, r4
 8019924:	3801      	subs	r0, #1
 8019926:	4440      	add	r0, r8
 8019928:	f7ff fe6a 	bl	8019600 <_ZN8touchgfx11floorDivModEllRlS0_>
 801992c:	f104 0308 	add.w	r3, r4, #8
 8019930:	1d22      	adds	r2, r4, #4
 8019932:	4641      	mov	r1, r8
 8019934:	4658      	mov	r0, fp
 8019936:	f7ff fe63 	bl	8019600 <_ZN8touchgfx11floorDivModEllRlS0_>
 801993a:	f8c4 800c 	str.w	r8, [r4, #12]
 801993e:	6962      	ldr	r2, [r4, #20]
 8019940:	f8da 3004 	ldr.w	r3, [sl, #4]
 8019944:	eddf 6a31 	vldr	s13, [pc, #196]	; 8019a0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019948:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801994c:	6822      	ldr	r2, [r4, #0]
 801994e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8019952:	ee07 3a10 	vmov	s14, r3
 8019956:	f857 3009 	ldr.w	r3, [r7, r9]
 801995a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801995e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019962:	ee07 3a90 	vmov	s15, r3
 8019966:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801996a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801996e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019972:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019976:	edd3 6a00 	vldr	s13, [r3]
 801997a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801997e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019982:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019986:	edc4 6a07 	vstr	s13, [r4, #28]
 801998a:	edd4 6a01 	vldr	s13, [r4, #4]
 801998e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8019992:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019996:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801999a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801999e:	ed84 6a08 	vstr	s12, [r4, #32]
 80199a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80199a4:	6262      	str	r2, [r4, #36]	; 0x24
 80199a6:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 80199aa:	ed93 6a03 	vldr	s12, [r3, #12]
 80199ae:	eea5 6a87 	vfma.f32	s12, s11, s14
 80199b2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80199b6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80199ba:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 80199be:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80199c2:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 80199c6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80199ca:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 80199ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80199d0:	6322      	str	r2, [r4, #48]	; 0x30
 80199d2:	ed93 6a06 	vldr	s12, [r3, #24]
 80199d6:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 80199da:	eea5 6a87 	vfma.f32	s12, s11, s14
 80199de:	eeb0 7a46 	vmov.f32	s14, s12
 80199e2:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 80199e6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80199ea:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 80199ee:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 80199f2:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 80199f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80199fa:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 80199fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8019a00:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019a02:	4620      	mov	r0, r4
 8019a04:	b003      	add	sp, #12
 8019a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a0a:	bf00      	nop
 8019a0c:	3d800000 	.word	0x3d800000

08019a10 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019a10:	4b01      	ldr	r3, [pc, #4]	; (8019a18 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8019a12:	6018      	str	r0, [r3, #0]
 8019a14:	4770      	bx	lr
 8019a16:	bf00      	nop
 8019a18:	2400af4c 	.word	0x2400af4c

08019a1c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019a1c:	4b06      	ldr	r3, [pc, #24]	; (8019a38 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019a1e:	881a      	ldrh	r2, [r3, #0]
 8019a20:	4282      	cmp	r2, r0
 8019a22:	d807      	bhi.n	8019a34 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019a24:	4b05      	ldr	r3, [pc, #20]	; (8019a3c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019a26:	881b      	ldrh	r3, [r3, #0]
 8019a28:	4413      	add	r3, r2
 8019a2a:	4298      	cmp	r0, r3
 8019a2c:	bfac      	ite	ge
 8019a2e:	2000      	movge	r0, #0
 8019a30:	2001      	movlt	r0, #1
 8019a32:	4770      	bx	lr
 8019a34:	2000      	movs	r0, #0
 8019a36:	4770      	bx	lr
 8019a38:	2400af6c 	.word	0x2400af6c
 8019a3c:	2400af70 	.word	0x2400af70

08019a40 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019a40:	b508      	push	{r3, lr}
 8019a42:	4601      	mov	r1, r0
 8019a44:	f7ff ffea 	bl	8019a1c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019a48:	b118      	cbz	r0, 8019a52 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8019a4a:	4b02      	ldr	r3, [pc, #8]	; (8019a54 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019a52:	bd08      	pop	{r3, pc}
 8019a54:	2400af50 	.word	0x2400af50

08019a58 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a5c:	4d28      	ldr	r5, [pc, #160]	; (8019b00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8019a5e:	682b      	ldr	r3, [r5, #0]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d04a      	beq.n	8019afa <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8019a64:	4a27      	ldr	r2, [pc, #156]	; (8019b04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8019a66:	4e28      	ldr	r6, [pc, #160]	; (8019b08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019a68:	8810      	ldrh	r0, [r2, #0]
 8019a6a:	f8b6 8000 	ldrh.w	r8, [r6]
 8019a6e:	4c27      	ldr	r4, [pc, #156]	; (8019b0c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8019a70:	4440      	add	r0, r8
 8019a72:	4f27      	ldr	r7, [pc, #156]	; (8019b10 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8019a74:	1c41      	adds	r1, r0, #1
 8019a76:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8019a7a:	f021 0101 	bic.w	r1, r1, #1
 8019a7e:	eb03 020e 	add.w	r2, r3, lr
 8019a82:	0409      	lsls	r1, r1, #16
 8019a84:	6022      	str	r2, [r4, #0]
 8019a86:	0c09      	lsrs	r1, r1, #16
 8019a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019a8c:	eb0e 010c 	add.w	r1, lr, ip
 8019a90:	185a      	adds	r2, r3, r1
 8019a92:	603a      	str	r2, [r7, #0]
 8019a94:	220e      	movs	r2, #14
 8019a96:	fb02 f208 	mul.w	r2, r2, r8
 8019a9a:	3203      	adds	r2, #3
 8019a9c:	f022 0203 	bic.w	r2, r2, #3
 8019aa0:	4411      	add	r1, r2
 8019aa2:	440b      	add	r3, r1
 8019aa4:	491b      	ldr	r1, [pc, #108]	; (8019b14 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8019aa6:	600b      	str	r3, [r1, #0]
 8019aa8:	2300      	movs	r3, #0
 8019aaa:	491b      	ldr	r1, [pc, #108]	; (8019b18 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8019aac:	800b      	strh	r3, [r1, #0]
 8019aae:	491b      	ldr	r1, [pc, #108]	; (8019b1c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8019ab0:	6809      	ldr	r1, [r1, #0]
 8019ab2:	eba1 010e 	sub.w	r1, r1, lr
 8019ab6:	eba1 010c 	sub.w	r1, r1, ip
 8019aba:	469c      	mov	ip, r3
 8019abc:	1a8a      	subs	r2, r1, r2
 8019abe:	4918      	ldr	r1, [pc, #96]	; (8019b20 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8019ac0:	600a      	str	r2, [r1, #0]
 8019ac2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019ac6:	4a17      	ldr	r2, [pc, #92]	; (8019b24 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8019ac8:	8013      	strh	r3, [r2, #0]
 8019aca:	4283      	cmp	r3, r0
 8019acc:	d10d      	bne.n	8019aea <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8019ace:	8835      	ldrh	r5, [r6, #0]
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	6838      	ldr	r0, [r7, #0]
 8019ad4:	240e      	movs	r4, #14
 8019ad6:	429d      	cmp	r5, r3
 8019ad8:	d90f      	bls.n	8019afa <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8019ada:	fb04 0203 	mla	r2, r4, r3, r0
 8019ade:	3301      	adds	r3, #1
 8019ae0:	7b11      	ldrb	r1, [r2, #12]
 8019ae2:	f36f 1145 	bfc	r1, #5, #1
 8019ae6:	7311      	strb	r1, [r2, #12]
 8019ae8:	e7f5      	b.n	8019ad6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 8019aea:	682a      	ldr	r2, [r5, #0]
 8019aec:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8019af0:	6822      	ldr	r2, [r4, #0]
 8019af2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8019af6:	3301      	adds	r3, #1
 8019af8:	e7e7      	b.n	8019aca <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 8019afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019afe:	bf00      	nop
 8019b00:	2400af50 	.word	0x2400af50
 8019b04:	2400af6c 	.word	0x2400af6c
 8019b08:	2400af70 	.word	0x2400af70
 8019b0c:	2400af64 	.word	0x2400af64
 8019b10:	2400af54 	.word	0x2400af54
 8019b14:	2400af5c 	.word	0x2400af5c
 8019b18:	2400af6e 	.word	0x2400af6e
 8019b1c:	2400af58 	.word	0x2400af58
 8019b20:	2400af68 	.word	0x2400af68
 8019b24:	2400af60 	.word	0x2400af60

08019b28 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019b28:	4b10      	ldr	r3, [pc, #64]	; (8019b6c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8019b2a:	b510      	push	{r4, lr}
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	b9db      	cbnz	r3, 8019b68 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8019b30:	b1d1      	cbz	r1, 8019b68 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8019b32:	4b0f      	ldr	r3, [pc, #60]	; (8019b70 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8019b34:	240e      	movs	r4, #14
 8019b36:	801a      	strh	r2, [r3, #0]
 8019b38:	b292      	uxth	r2, r2
 8019b3a:	4b0e      	ldr	r3, [pc, #56]	; (8019b74 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8019b3c:	881b      	ldrh	r3, [r3, #0]
 8019b3e:	4413      	add	r3, r2
 8019b40:	4362      	muls	r2, r4
 8019b42:	2406      	movs	r4, #6
 8019b44:	fb04 2203 	mla	r2, r4, r3, r2
 8019b48:	428a      	cmp	r2, r1
 8019b4a:	d305      	bcc.n	8019b58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8019b4c:	4b0a      	ldr	r3, [pc, #40]	; (8019b78 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8019b4e:	2135      	movs	r1, #53	; 0x35
 8019b50:	4a0a      	ldr	r2, [pc, #40]	; (8019b7c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8019b52:	480b      	ldr	r0, [pc, #44]	; (8019b80 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8019b54:	f00c f8a0 	bl	8025c98 <__assert_func>
 8019b58:	4b0a      	ldr	r3, [pc, #40]	; (8019b84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8019b5a:	6019      	str	r1, [r3, #0]
 8019b5c:	4b0a      	ldr	r3, [pc, #40]	; (8019b88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8019b5e:	6018      	str	r0, [r3, #0]
 8019b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b64:	f7ff bf78 	b.w	8019a58 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019b68:	bd10      	pop	{r4, pc}
 8019b6a:	bf00      	nop
 8019b6c:	2400af5c 	.word	0x2400af5c
 8019b70:	2400af70 	.word	0x2400af70
 8019b74:	2400af6c 	.word	0x2400af6c
 8019b78:	08029d41 	.word	0x08029d41
 8019b7c:	08029dd6 	.word	0x08029dd6
 8019b80:	08029d1c 	.word	0x08029d1c
 8019b84:	2400af58 	.word	0x2400af58
 8019b88:	2400af50 	.word	0x2400af50

08019b8c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019b8c:	b470      	push	{r4, r5, r6}
 8019b8e:	4c07      	ldr	r4, [pc, #28]	; (8019bac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019b90:	4605      	mov	r5, r0
 8019b92:	4610      	mov	r0, r2
 8019b94:	9a03      	ldr	r2, [sp, #12]
 8019b96:	6826      	ldr	r6, [r4, #0]
 8019b98:	b936      	cbnz	r6, 8019ba8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019b9a:	6025      	str	r5, [r4, #0]
 8019b9c:	4c04      	ldr	r4, [pc, #16]	; (8019bb0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019b9e:	8021      	strh	r1, [r4, #0]
 8019ba0:	4619      	mov	r1, r3
 8019ba2:	bc70      	pop	{r4, r5, r6}
 8019ba4:	f7ff bfc0 	b.w	8019b28 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019ba8:	bc70      	pop	{r4, r5, r6}
 8019baa:	4770      	bx	lr
 8019bac:	2400af74 	.word	0x2400af74
 8019bb0:	2400af6c 	.word	0x2400af6c

08019bb4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019bb4:	b508      	push	{r3, lr}
 8019bb6:	4b14      	ldr	r3, [pc, #80]	; (8019c08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019bb8:	6819      	ldr	r1, [r3, #0]
 8019bba:	b931      	cbnz	r1, 8019bca <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8019bbc:	4b13      	ldr	r3, [pc, #76]	; (8019c0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019bbe:	f240 4185 	movw	r1, #1157	; 0x485
 8019bc2:	4a13      	ldr	r2, [pc, #76]	; (8019c10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8019bc4:	4813      	ldr	r0, [pc, #76]	; (8019c14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019bc6:	f00c f867 	bl	8025c98 <__assert_func>
 8019bca:	4a13      	ldr	r2, [pc, #76]	; (8019c18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8019bcc:	8803      	ldrh	r3, [r0, #0]
 8019bce:	8812      	ldrh	r2, [r2, #0]
 8019bd0:	4293      	cmp	r3, r2
 8019bd2:	d204      	bcs.n	8019bde <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8019bd4:	2214      	movs	r2, #20
 8019bd6:	fb02 1303 	mla	r3, r2, r3, r1
 8019bda:	8918      	ldrh	r0, [r3, #8]
 8019bdc:	bd08      	pop	{r3, pc}
 8019bde:	490f      	ldr	r1, [pc, #60]	; (8019c1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8019be0:	8809      	ldrh	r1, [r1, #0]
 8019be2:	4411      	add	r1, r2
 8019be4:	428b      	cmp	r3, r1
 8019be6:	da06      	bge.n	8019bf6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8019be8:	1a9b      	subs	r3, r3, r2
 8019bea:	4a0d      	ldr	r2, [pc, #52]	; (8019c20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8019bec:	210e      	movs	r1, #14
 8019bee:	6812      	ldr	r2, [r2, #0]
 8019bf0:	fb01 2303 	mla	r3, r1, r3, r2
 8019bf4:	e7f1      	b.n	8019bda <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8019bf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019bfa:	4293      	cmp	r3, r2
 8019bfc:	bf0a      	itet	eq
 8019bfe:	4b09      	ldreq	r3, [pc, #36]	; (8019c24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8019c00:	2000      	movne	r0, #0
 8019c02:	8818      	ldrheq	r0, [r3, #0]
 8019c04:	e7ea      	b.n	8019bdc <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8019c06:	bf00      	nop
 8019c08:	2400af74 	.word	0x2400af74
 8019c0c:	08029d9a 	.word	0x08029d9a
 8019c10:	08029e83 	.word	0x08029e83
 8019c14:	08029d1c 	.word	0x08029d1c
 8019c18:	2400af6c 	.word	0x2400af6c
 8019c1c:	2400af70 	.word	0x2400af70
 8019c20:	2400af54 	.word	0x2400af54
 8019c24:	2400aee0 	.word	0x2400aee0

08019c28 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019c28:	b508      	push	{r3, lr}
 8019c2a:	4b14      	ldr	r3, [pc, #80]	; (8019c7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019c2c:	6819      	ldr	r1, [r3, #0]
 8019c2e:	b931      	cbnz	r1, 8019c3e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8019c30:	4b13      	ldr	r3, [pc, #76]	; (8019c80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019c32:	f240 4199 	movw	r1, #1177	; 0x499
 8019c36:	4a13      	ldr	r2, [pc, #76]	; (8019c84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019c38:	4813      	ldr	r0, [pc, #76]	; (8019c88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019c3a:	f00c f82d 	bl	8025c98 <__assert_func>
 8019c3e:	4a13      	ldr	r2, [pc, #76]	; (8019c8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019c40:	8803      	ldrh	r3, [r0, #0]
 8019c42:	8812      	ldrh	r2, [r2, #0]
 8019c44:	4293      	cmp	r3, r2
 8019c46:	d204      	bcs.n	8019c52 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8019c48:	2214      	movs	r2, #20
 8019c4a:	fb02 1303 	mla	r3, r2, r3, r1
 8019c4e:	8958      	ldrh	r0, [r3, #10]
 8019c50:	bd08      	pop	{r3, pc}
 8019c52:	490f      	ldr	r1, [pc, #60]	; (8019c90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8019c54:	8809      	ldrh	r1, [r1, #0]
 8019c56:	4411      	add	r1, r2
 8019c58:	428b      	cmp	r3, r1
 8019c5a:	da06      	bge.n	8019c6a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8019c5c:	1a9b      	subs	r3, r3, r2
 8019c5e:	4a0d      	ldr	r2, [pc, #52]	; (8019c94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8019c60:	210e      	movs	r1, #14
 8019c62:	6812      	ldr	r2, [r2, #0]
 8019c64:	fb01 2303 	mla	r3, r1, r3, r2
 8019c68:	e7f1      	b.n	8019c4e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8019c6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019c6e:	4293      	cmp	r3, r2
 8019c70:	bf0a      	itet	eq
 8019c72:	4b09      	ldreq	r3, [pc, #36]	; (8019c98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8019c74:	2000      	movne	r0, #0
 8019c76:	8818      	ldrheq	r0, [r3, #0]
 8019c78:	e7ea      	b.n	8019c50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8019c7a:	bf00      	nop
 8019c7c:	2400af74 	.word	0x2400af74
 8019c80:	08029d9a 	.word	0x08029d9a
 8019c84:	08029eaf 	.word	0x08029eaf
 8019c88:	08029d1c 	.word	0x08029d1c
 8019c8c:	2400af6c 	.word	0x2400af6c
 8019c90:	2400af70 	.word	0x2400af70
 8019c94:	2400af54 	.word	0x2400af54
 8019c98:	2400aee2 	.word	0x2400aee2

08019c9c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019c9c:	4b23      	ldr	r3, [pc, #140]	; (8019d2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8019c9e:	b510      	push	{r4, lr}
 8019ca0:	681c      	ldr	r4, [r3, #0]
 8019ca2:	b934      	cbnz	r4, 8019cb2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8019ca4:	4b22      	ldr	r3, [pc, #136]	; (8019d30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019ca6:	f240 41ad 	movw	r1, #1197	; 0x4ad
 8019caa:	4a22      	ldr	r2, [pc, #136]	; (8019d34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8019cac:	4822      	ldr	r0, [pc, #136]	; (8019d38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8019cae:	f00b fff3 	bl	8025c98 <__assert_func>
 8019cb2:	4a22      	ldr	r2, [pc, #136]	; (8019d3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8019cb4:	880b      	ldrh	r3, [r1, #0]
 8019cb6:	8812      	ldrh	r2, [r2, #0]
 8019cb8:	4293      	cmp	r3, r2
 8019cba:	d211      	bcs.n	8019ce0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8019cbc:	2214      	movs	r2, #20
 8019cbe:	fb02 4303 	mla	r3, r2, r3, r4
 8019cc2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019cc6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019cca:	8a1a      	ldrh	r2, [r3, #16]
 8019ccc:	8a5b      	ldrh	r3, [r3, #18]
 8019cce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019cd2:	8004      	strh	r4, [r0, #0]
 8019cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019cd8:	8041      	strh	r1, [r0, #2]
 8019cda:	8082      	strh	r2, [r0, #4]
 8019cdc:	80c3      	strh	r3, [r0, #6]
 8019cde:	e00e      	b.n	8019cfe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8019ce0:	4917      	ldr	r1, [pc, #92]	; (8019d40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8019ce2:	8809      	ldrh	r1, [r1, #0]
 8019ce4:	4411      	add	r1, r2
 8019ce6:	428b      	cmp	r3, r1
 8019ce8:	da0a      	bge.n	8019d00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8019cea:	1a9b      	subs	r3, r3, r2
 8019cec:	4a15      	ldr	r2, [pc, #84]	; (8019d44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8019cee:	210e      	movs	r1, #14
 8019cf0:	6812      	ldr	r2, [r2, #0]
 8019cf2:	fb01 2303 	mla	r3, r1, r3, r2
 8019cf6:	681a      	ldr	r2, [r3, #0]
 8019cf8:	6002      	str	r2, [r0, #0]
 8019cfa:	685a      	ldr	r2, [r3, #4]
 8019cfc:	6042      	str	r2, [r0, #4]
 8019cfe:	bd10      	pop	{r4, pc}
 8019d00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019d04:	4293      	cmp	r3, r2
 8019d06:	d10b      	bne.n	8019d20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8019d08:	4b0f      	ldr	r3, [pc, #60]	; (8019d48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8019d0a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019d0e:	4b0f      	ldr	r3, [pc, #60]	; (8019d4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8019d10:	8081      	strh	r1, [r0, #4]
 8019d12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019d16:	2300      	movs	r3, #0
 8019d18:	80c2      	strh	r2, [r0, #6]
 8019d1a:	8003      	strh	r3, [r0, #0]
 8019d1c:	8043      	strh	r3, [r0, #2]
 8019d1e:	e7ee      	b.n	8019cfe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8019d20:	2300      	movs	r3, #0
 8019d22:	8003      	strh	r3, [r0, #0]
 8019d24:	8043      	strh	r3, [r0, #2]
 8019d26:	8083      	strh	r3, [r0, #4]
 8019d28:	e7d8      	b.n	8019cdc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8019d2a:	bf00      	nop
 8019d2c:	2400af74 	.word	0x2400af74
 8019d30:	08029d9a 	.word	0x08029d9a
 8019d34:	08029e1c 	.word	0x08029e1c
 8019d38:	08029d1c 	.word	0x08029d1c
 8019d3c:	2400af6c 	.word	0x2400af6c
 8019d40:	2400af70 	.word	0x2400af70
 8019d44:	2400af54 	.word	0x2400af54
 8019d48:	2400aee0 	.word	0x2400aee0
 8019d4c:	2400aee2 	.word	0x2400aee2

08019d50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8019d50:	4b18      	ldr	r3, [pc, #96]	; (8019db4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	b34b      	cbz	r3, 8019daa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8019d56:	4a18      	ldr	r2, [pc, #96]	; (8019db8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8019d58:	8800      	ldrh	r0, [r0, #0]
 8019d5a:	8812      	ldrh	r2, [r2, #0]
 8019d5c:	4290      	cmp	r0, r2
 8019d5e:	d211      	bcs.n	8019d84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8019d60:	2214      	movs	r2, #20
 8019d62:	fb02 3300 	mla	r3, r2, r0, r3
 8019d66:	8a1a      	ldrh	r2, [r3, #16]
 8019d68:	8919      	ldrh	r1, [r3, #8]
 8019d6a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019d6e:	428a      	cmp	r2, r1
 8019d70:	db1d      	blt.n	8019dae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8019d72:	8a58      	ldrh	r0, [r3, #18]
 8019d74:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8019d78:	895b      	ldrh	r3, [r3, #10]
 8019d7a:	4298      	cmp	r0, r3
 8019d7c:	bfac      	ite	ge
 8019d7e:	2000      	movge	r0, #0
 8019d80:	2001      	movlt	r0, #1
 8019d82:	4770      	bx	lr
 8019d84:	4b0d      	ldr	r3, [pc, #52]	; (8019dbc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8019d86:	881b      	ldrh	r3, [r3, #0]
 8019d88:	4413      	add	r3, r2
 8019d8a:	4298      	cmp	r0, r3
 8019d8c:	da0d      	bge.n	8019daa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8019d8e:	4b0c      	ldr	r3, [pc, #48]	; (8019dc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8019d90:	1a80      	subs	r0, r0, r2
 8019d92:	220e      	movs	r2, #14
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	fb02 3300 	mla	r3, r2, r0, r3
 8019d9a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8019d9e:	891a      	ldrh	r2, [r3, #8]
 8019da0:	4291      	cmp	r1, r2
 8019da2:	db04      	blt.n	8019dae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8019da4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8019da8:	e7e6      	b.n	8019d78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8019daa:	2000      	movs	r0, #0
 8019dac:	4770      	bx	lr
 8019dae:	2001      	movs	r0, #1
 8019db0:	4770      	bx	lr
 8019db2:	bf00      	nop
 8019db4:	2400af74 	.word	0x2400af74
 8019db8:	2400af6c 	.word	0x2400af6c
 8019dbc:	2400af70 	.word	0x2400af70
 8019dc0:	2400af54 	.word	0x2400af54

08019dc4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019dc4:	b508      	push	{r3, lr}
 8019dc6:	4b12      	ldr	r3, [pc, #72]	; (8019e10 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8019dc8:	6819      	ldr	r1, [r3, #0]
 8019dca:	b931      	cbnz	r1, 8019dda <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019dcc:	4b11      	ldr	r3, [pc, #68]	; (8019e14 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019dce:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8019dd2:	4a11      	ldr	r2, [pc, #68]	; (8019e18 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019dd4:	4811      	ldr	r0, [pc, #68]	; (8019e1c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019dd6:	f00b ff5f 	bl	8025c98 <__assert_func>
 8019dda:	8803      	ldrh	r3, [r0, #0]
 8019ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019de0:	4293      	cmp	r3, r2
 8019de2:	d012      	beq.n	8019e0a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019de4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019de8:	4293      	cmp	r3, r2
 8019dea:	d103      	bne.n	8019df4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8019dec:	4b0c      	ldr	r3, [pc, #48]	; (8019e20 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8019df2:	bd08      	pop	{r3, pc}
 8019df4:	4a0b      	ldr	r2, [pc, #44]	; (8019e24 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8019df6:	6812      	ldr	r2, [r2, #0]
 8019df8:	b11a      	cbz	r2, 8019e02 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8019dfa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019dfe:	2800      	cmp	r0, #0
 8019e00:	d1f7      	bne.n	8019df2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019e02:	2214      	movs	r2, #20
 8019e04:	4353      	muls	r3, r2
 8019e06:	58c8      	ldr	r0, [r1, r3]
 8019e08:	e7f3      	b.n	8019df2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019e0a:	2000      	movs	r0, #0
 8019e0c:	e7f1      	b.n	8019df2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019e0e:	bf00      	nop
 8019e10:	2400af74 	.word	0x2400af74
 8019e14:	08029d9a 	.word	0x08029d9a
 8019e18:	08029e52 	.word	0x08029e52
 8019e1c:	08029d1c 	.word	0x08029d1c
 8019e20:	2400aeec 	.word	0x2400aeec
 8019e24:	2400af50 	.word	0x2400af50

08019e28 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019e28:	8802      	ldrh	r2, [r0, #0]
 8019e2a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8019e2e:	429a      	cmp	r2, r3
 8019e30:	d845      	bhi.n	8019ebe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8019e32:	4b24      	ldr	r3, [pc, #144]	; (8019ec4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019e34:	8818      	ldrh	r0, [r3, #0]
 8019e36:	4282      	cmp	r2, r0
 8019e38:	d221      	bcs.n	8019e7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8019e3a:	4b23      	ldr	r3, [pc, #140]	; (8019ec8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019e3c:	6819      	ldr	r1, [r3, #0]
 8019e3e:	2314      	movs	r3, #20
 8019e40:	fb03 1302 	mla	r3, r3, r2, r1
 8019e44:	6858      	ldr	r0, [r3, #4]
 8019e46:	2800      	cmp	r0, #0
 8019e48:	d03a      	beq.n	8019ec0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8019e4a:	4920      	ldr	r1, [pc, #128]	; (8019ecc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019e4c:	6809      	ldr	r1, [r1, #0]
 8019e4e:	2900      	cmp	r1, #0
 8019e50:	d036      	beq.n	8019ec0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8019e52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019e56:	2900      	cmp	r1, #0
 8019e58:	d032      	beq.n	8019ec0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8019e5a:	891a      	ldrh	r2, [r3, #8]
 8019e5c:	8958      	ldrh	r0, [r3, #10]
 8019e5e:	4350      	muls	r0, r2
 8019e60:	7c5a      	ldrb	r2, [r3, #17]
 8019e62:	7cdb      	ldrb	r3, [r3, #19]
 8019e64:	0952      	lsrs	r2, r2, #5
 8019e66:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019e6a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019e6e:	2b0b      	cmp	r3, #11
 8019e70:	bf18      	it	ne
 8019e72:	0040      	lslne	r0, r0, #1
 8019e74:	3003      	adds	r0, #3
 8019e76:	f020 0003 	bic.w	r0, r0, #3
 8019e7a:	4408      	add	r0, r1
 8019e7c:	4770      	bx	lr
 8019e7e:	4b14      	ldr	r3, [pc, #80]	; (8019ed0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8019e80:	881b      	ldrh	r3, [r3, #0]
 8019e82:	4403      	add	r3, r0
 8019e84:	429a      	cmp	r2, r3
 8019e86:	da1a      	bge.n	8019ebe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8019e88:	4b12      	ldr	r3, [pc, #72]	; (8019ed4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8019e8a:	1a10      	subs	r0, r2, r0
 8019e8c:	210e      	movs	r1, #14
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	fb01 3000 	mla	r0, r1, r0, r3
 8019e94:	7b03      	ldrb	r3, [r0, #12]
 8019e96:	f003 031f 	and.w	r3, r3, #31
 8019e9a:	2b0b      	cmp	r3, #11
 8019e9c:	d10b      	bne.n	8019eb6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019e9e:	8903      	ldrh	r3, [r0, #8]
 8019ea0:	8940      	ldrh	r0, [r0, #10]
 8019ea2:	4358      	muls	r0, r3
 8019ea4:	4b09      	ldr	r3, [pc, #36]	; (8019ecc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019ea6:	3003      	adds	r0, #3
 8019ea8:	6819      	ldr	r1, [r3, #0]
 8019eaa:	f020 0303 	bic.w	r3, r0, #3
 8019eae:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019eb2:	4418      	add	r0, r3
 8019eb4:	4770      	bx	lr
 8019eb6:	2b0d      	cmp	r3, #13
 8019eb8:	d101      	bne.n	8019ebe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8019eba:	300d      	adds	r0, #13
 8019ebc:	4770      	bx	lr
 8019ebe:	2000      	movs	r0, #0
 8019ec0:	4770      	bx	lr
 8019ec2:	bf00      	nop
 8019ec4:	2400af6c 	.word	0x2400af6c
 8019ec8:	2400af74 	.word	0x2400af74
 8019ecc:	2400af50 	.word	0x2400af50
 8019ed0:	2400af70 	.word	0x2400af70
 8019ed4:	2400af54 	.word	0x2400af54

08019ed8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019ed8:	4b17      	ldr	r3, [pc, #92]	; (8019f38 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019eda:	b510      	push	{r4, lr}
 8019edc:	6819      	ldr	r1, [r3, #0]
 8019ede:	8803      	ldrh	r3, [r0, #0]
 8019ee0:	b1e9      	cbz	r1, 8019f1e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8019ee2:	4a16      	ldr	r2, [pc, #88]	; (8019f3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019ee4:	8812      	ldrh	r2, [r2, #0]
 8019ee6:	429a      	cmp	r2, r3
 8019ee8:	d90a      	bls.n	8019f00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8019eea:	2214      	movs	r2, #20
 8019eec:	fb02 1303 	mla	r3, r2, r3, r1
 8019ef0:	7c58      	ldrb	r0, [r3, #17]
 8019ef2:	0942      	lsrs	r2, r0, #5
 8019ef4:	7cd8      	ldrb	r0, [r3, #19]
 8019ef6:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019efa:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019efe:	bd10      	pop	{r4, pc}
 8019f00:	490f      	ldr	r1, [pc, #60]	; (8019f40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019f02:	8809      	ldrh	r1, [r1, #0]
 8019f04:	4411      	add	r1, r2
 8019f06:	428b      	cmp	r3, r1
 8019f08:	da09      	bge.n	8019f1e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8019f0a:	1a9b      	subs	r3, r3, r2
 8019f0c:	4a0d      	ldr	r2, [pc, #52]	; (8019f44 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019f0e:	210e      	movs	r1, #14
 8019f10:	6812      	ldr	r2, [r2, #0]
 8019f12:	fb01 2303 	mla	r3, r1, r3, r2
 8019f16:	7b18      	ldrb	r0, [r3, #12]
 8019f18:	f000 001f 	and.w	r0, r0, #31
 8019f1c:	e7ef      	b.n	8019efe <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019f1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019f22:	4293      	cmp	r3, r2
 8019f24:	d106      	bne.n	8019f34 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8019f26:	f7e9 fedd 	bl	8003ce4 <_ZN8touchgfx3HAL3lcdEv>
 8019f2a:	6803      	ldr	r3, [r0, #0]
 8019f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f32:	4718      	bx	r3
 8019f34:	2000      	movs	r0, #0
 8019f36:	e7e2      	b.n	8019efe <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019f38:	2400af74 	.word	0x2400af74
 8019f3c:	2400af6c 	.word	0x2400af6c
 8019f40:	2400af70 	.word	0x2400af70
 8019f44:	2400af54 	.word	0x2400af54

08019f48 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8019f48:	2010      	movs	r0, #16
 8019f4a:	4770      	bx	lr

08019f4c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8019f4c:	2000      	movs	r0, #0
 8019f4e:	4770      	bx	lr

08019f50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019f50:	2bff      	cmp	r3, #255	; 0xff
 8019f52:	d050      	beq.n	8019ff6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8019f54:	2a0b      	cmp	r2, #11
 8019f56:	d04a      	beq.n	8019fee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019f58:	d80e      	bhi.n	8019f78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8019f5a:	2a03      	cmp	r2, #3
 8019f5c:	d03f      	beq.n	8019fde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8019f5e:	d804      	bhi.n	8019f6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019f60:	2a01      	cmp	r2, #1
 8019f62:	d03e      	beq.n	8019fe2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019f64:	d93f      	bls.n	8019fe6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019f66:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019f68:	4770      	bx	lr
 8019f6a:	2a09      	cmp	r2, #9
 8019f6c:	d03f      	beq.n	8019fee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019f6e:	d83c      	bhi.n	8019fea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019f70:	2a08      	cmp	r2, #8
 8019f72:	d03a      	beq.n	8019fea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019f74:	2000      	movs	r0, #0
 8019f76:	4770      	bx	lr
 8019f78:	2a2f      	cmp	r2, #47	; 0x2f
 8019f7a:	d024      	beq.n	8019fc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019f7c:	d80d      	bhi.n	8019f9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8019f7e:	2a2d      	cmp	r2, #45	; 0x2d
 8019f80:	d014      	beq.n	8019fac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8019f82:	d826      	bhi.n	8019fd2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019f84:	2a2c      	cmp	r2, #44	; 0x2c
 8019f86:	d1f5      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019f88:	684b      	ldr	r3, [r1, #4]
 8019f8a:	781b      	ldrb	r3, [r3, #0]
 8019f8c:	2b01      	cmp	r3, #1
 8019f8e:	d018      	beq.n	8019fc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019f90:	d323      	bcc.n	8019fda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019f92:	2b02      	cmp	r3, #2
 8019f94:	d1ee      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019f96:	6880      	ldr	r0, [r0, #8]
 8019f98:	4770      	bx	lr
 8019f9a:	2a31      	cmp	r2, #49	; 0x31
 8019f9c:	d004      	beq.n	8019fa8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8019f9e:	d328      	bcc.n	8019ff2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019fa0:	2a32      	cmp	r2, #50	; 0x32
 8019fa2:	d026      	beq.n	8019ff2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019fa4:	2a33      	cmp	r2, #51	; 0x33
 8019fa6:	d1e5      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019fa8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8019faa:	4770      	bx	lr
 8019fac:	684b      	ldr	r3, [r1, #4]
 8019fae:	781b      	ldrb	r3, [r3, #0]
 8019fb0:	2b01      	cmp	r3, #1
 8019fb2:	d004      	beq.n	8019fbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019fb4:	d30b      	bcc.n	8019fce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019fb6:	2b02      	cmp	r3, #2
 8019fb8:	d1dc      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019fba:	6900      	ldr	r0, [r0, #16]
 8019fbc:	4770      	bx	lr
 8019fbe:	6a00      	ldr	r0, [r0, #32]
 8019fc0:	4770      	bx	lr
 8019fc2:	6980      	ldr	r0, [r0, #24]
 8019fc4:	4770      	bx	lr
 8019fc6:	684b      	ldr	r3, [r1, #4]
 8019fc8:	781b      	ldrb	r3, [r3, #0]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d1d2      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019fce:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019fd0:	4770      	bx	lr
 8019fd2:	684b      	ldr	r3, [r1, #4]
 8019fd4:	781b      	ldrb	r3, [r3, #0]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d1cc      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019fda:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019fdc:	4770      	bx	lr
 8019fde:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019fe0:	4770      	bx	lr
 8019fe2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019fe4:	4770      	bx	lr
 8019fe6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019fe8:	4770      	bx	lr
 8019fea:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8019fec:	4770      	bx	lr
 8019fee:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8019ff0:	4770      	bx	lr
 8019ff2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8019ff4:	4770      	bx	lr
 8019ff6:	2a0b      	cmp	r2, #11
 8019ff8:	d049      	beq.n	801a08e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019ffa:	d80e      	bhi.n	801a01a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019ffc:	2a03      	cmp	r2, #3
 8019ffe:	d040      	beq.n	801a082 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801a000:	d804      	bhi.n	801a00c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801a002:	2a01      	cmp	r2, #1
 801a004:	d03f      	beq.n	801a086 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801a006:	d940      	bls.n	801a08a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801a008:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801a00a:	4770      	bx	lr
 801a00c:	2a09      	cmp	r2, #9
 801a00e:	d03e      	beq.n	801a08e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801a010:	d801      	bhi.n	801a016 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801a012:	2a08      	cmp	r2, #8
 801a014:	d1ae      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a016:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801a018:	4770      	bx	lr
 801a01a:	2a2f      	cmp	r2, #47	; 0x2f
 801a01c:	d024      	beq.n	801a068 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801a01e:	d80d      	bhi.n	801a03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801a020:	2a2d      	cmp	r2, #45	; 0x2d
 801a022:	d014      	beq.n	801a04e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801a024:	d826      	bhi.n	801a074 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801a026:	2a2c      	cmp	r2, #44	; 0x2c
 801a028:	d1a4      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a02a:	684b      	ldr	r3, [r1, #4]
 801a02c:	781b      	ldrb	r3, [r3, #0]
 801a02e:	2b01      	cmp	r3, #1
 801a030:	d018      	beq.n	801a064 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801a032:	d324      	bcc.n	801a07e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801a034:	2b02      	cmp	r3, #2
 801a036:	d19d      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a038:	68c0      	ldr	r0, [r0, #12]
 801a03a:	4770      	bx	lr
 801a03c:	2a31      	cmp	r2, #49	; 0x31
 801a03e:	d004      	beq.n	801a04a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801a040:	d327      	bcc.n	801a092 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801a042:	2a32      	cmp	r2, #50	; 0x32
 801a044:	d025      	beq.n	801a092 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801a046:	2a33      	cmp	r2, #51	; 0x33
 801a048:	d194      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a04a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801a04c:	4770      	bx	lr
 801a04e:	684b      	ldr	r3, [r1, #4]
 801a050:	781b      	ldrb	r3, [r3, #0]
 801a052:	2b01      	cmp	r3, #1
 801a054:	d004      	beq.n	801a060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801a056:	d30b      	bcc.n	801a070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801a058:	2b02      	cmp	r3, #2
 801a05a:	d18b      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a05c:	6940      	ldr	r0, [r0, #20]
 801a05e:	4770      	bx	lr
 801a060:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801a062:	4770      	bx	lr
 801a064:	69c0      	ldr	r0, [r0, #28]
 801a066:	4770      	bx	lr
 801a068:	684b      	ldr	r3, [r1, #4]
 801a06a:	781b      	ldrb	r3, [r3, #0]
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d181      	bne.n	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a070:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a072:	4770      	bx	lr
 801a074:	684b      	ldr	r3, [r1, #4]
 801a076:	781b      	ldrb	r3, [r3, #0]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	f47f af7b 	bne.w	8019f74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a07e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801a080:	4770      	bx	lr
 801a082:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801a084:	4770      	bx	lr
 801a086:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801a088:	4770      	bx	lr
 801a08a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801a08c:	4770      	bx	lr
 801a08e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801a090:	4770      	bx	lr
 801a092:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801a094:	4770      	bx	lr

0801a096 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a09a:	b087      	sub	sp, #28
 801a09c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a09e:	9205      	str	r2, [sp, #20]
 801a0a0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a0a4:	9101      	str	r1, [sp, #4]
 801a0a6:	9202      	str	r2, [sp, #8]
 801a0a8:	6841      	ldr	r1, [r0, #4]
 801a0aa:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801a0ae:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a0b2:	fb01 2404 	mla	r4, r1, r4, r2
 801a0b6:	6802      	ldr	r2, [r0, #0]
 801a0b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a0bc:	f8de 2000 	ldr.w	r2, [lr]
 801a0c0:	9203      	str	r2, [sp, #12]
 801a0c2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a0c6:	3204      	adds	r2, #4
 801a0c8:	9204      	str	r2, [sp, #16]
 801a0ca:	9a02      	ldr	r2, [sp, #8]
 801a0cc:	43d6      	mvns	r6, r2
 801a0ce:	b2f6      	uxtb	r6, r6
 801a0d0:	9a01      	ldr	r2, [sp, #4]
 801a0d2:	2a00      	cmp	r2, #0
 801a0d4:	dc03      	bgt.n	801a0de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a0d6:	9a05      	ldr	r2, [sp, #20]
 801a0d8:	2a00      	cmp	r2, #0
 801a0da:	f340 8129 	ble.w	801a330 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a0de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a0e0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801a0e4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a0e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0ea:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801a0ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	dd0e      	ble.n	801a114 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a0f6:	1408      	asrs	r0, r1, #16
 801a0f8:	d405      	bmi.n	801a106 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a0fa:	4560      	cmp	r0, ip
 801a0fc:	da03      	bge.n	801a106 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a0fe:	1410      	asrs	r0, r2, #16
 801a100:	d401      	bmi.n	801a106 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a102:	42b8      	cmp	r0, r7
 801a104:	db07      	blt.n	801a116 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a106:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a108:	3b01      	subs	r3, #1
 801a10a:	3402      	adds	r4, #2
 801a10c:	4401      	add	r1, r0
 801a10e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a110:	4402      	add	r2, r0
 801a112:	e7ee      	b.n	801a0f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a114:	d071      	beq.n	801a1fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a116:	1e58      	subs	r0, r3, #1
 801a118:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a11a:	fb05 1500 	mla	r5, r5, r0, r1
 801a11e:	142d      	asrs	r5, r5, #16
 801a120:	d45f      	bmi.n	801a1e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a122:	4565      	cmp	r5, ip
 801a124:	da5d      	bge.n	801a1e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a126:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a128:	fb05 2000 	mla	r0, r5, r0, r2
 801a12c:	1400      	asrs	r0, r0, #16
 801a12e:	d458      	bmi.n	801a1e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a130:	42b8      	cmp	r0, r7
 801a132:	da56      	bge.n	801a1e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a134:	4699      	mov	r9, r3
 801a136:	46a2      	mov	sl, r4
 801a138:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801a13c:	f1b9 0f00 	cmp.w	r9, #0
 801a140:	dd57      	ble.n	801a1f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801a142:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a146:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a14a:	9803      	ldr	r0, [sp, #12]
 801a14c:	140d      	asrs	r5, r1, #16
 801a14e:	f109 39ff 	add.w	r9, r9, #4294967295
 801a152:	fb07 000c 	mla	r0, r7, ip, r0
 801a156:	5d40      	ldrb	r0, [r0, r5]
 801a158:	9d04      	ldr	r5, [sp, #16]
 801a15a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a15e:	f8ba 5000 	ldrh.w	r5, [sl]
 801a162:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a166:	122f      	asrs	r7, r5, #8
 801a168:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801a16c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a170:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a174:	00ed      	lsls	r5, r5, #3
 801a176:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a17a:	fb17 f706 	smulbb	r7, r7, r6
 801a17e:	b2ed      	uxtb	r5, r5
 801a180:	fb18 f806 	smulbb	r8, r8, r6
 801a184:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801a188:	10c7      	asrs	r7, r0, #3
 801a18a:	fb15 f506 	smulbb	r5, r5, r6
 801a18e:	00c0      	lsls	r0, r0, #3
 801a190:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a194:	fa1f fc8c 	uxth.w	ip, ip
 801a198:	b2c0      	uxtb	r0, r0
 801a19a:	fb07 870b 	mla	r7, r7, fp, r8
 801a19e:	fb00 500b 	mla	r0, r0, fp, r5
 801a1a2:	f10c 0501 	add.w	r5, ip, #1
 801a1a6:	b2bf      	uxth	r7, r7
 801a1a8:	b280      	uxth	r0, r0
 801a1aa:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a1ae:	f107 0801 	add.w	r8, r7, #1
 801a1b2:	1c45      	adds	r5, r0, #1
 801a1b4:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801a1b8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a1bc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a1c0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a1c2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a1c6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a1ca:	4401      	add	r1, r0
 801a1cc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a1d0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a1d2:	ea45 0c0c 	orr.w	ip, r5, ip
 801a1d6:	4402      	add	r2, r0
 801a1d8:	ea4c 0c08 	orr.w	ip, ip, r8
 801a1dc:	f82a cb02 	strh.w	ip, [sl], #2
 801a1e0:	e7ac      	b.n	801a13c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a1e2:	f04f 0800 	mov.w	r8, #0
 801a1e6:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801a1ea:	eb03 0008 	add.w	r0, r3, r8
 801a1ee:	2800      	cmp	r0, #0
 801a1f0:	dc41      	bgt.n	801a276 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a1f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a1fa:	9b01      	ldr	r3, [sp, #4]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	f340 8097 	ble.w	801a330 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a206:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a208:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a20c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a210:	eef0 6a62 	vmov.f32	s13, s5
 801a214:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a218:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a21c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a220:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a224:	eef0 6a43 	vmov.f32	s13, s6
 801a228:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a22c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a230:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a234:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a238:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a23c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a240:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a244:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a248:	ee12 2a90 	vmov	r2, s5
 801a24c:	eef0 2a47 	vmov.f32	s5, s14
 801a250:	fb92 f3f3 	sdiv	r3, r2, r3
 801a254:	ee13 2a10 	vmov	r2, s6
 801a258:	9313      	str	r3, [sp, #76]	; 0x4c
 801a25a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a25c:	eeb0 3a67 	vmov.f32	s6, s15
 801a260:	fb92 f3f3 	sdiv	r3, r2, r3
 801a264:	9314      	str	r3, [sp, #80]	; 0x50
 801a266:	9b01      	ldr	r3, [sp, #4]
 801a268:	9a05      	ldr	r2, [sp, #20]
 801a26a:	3b01      	subs	r3, #1
 801a26c:	9301      	str	r3, [sp, #4]
 801a26e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a270:	bf08      	it	eq
 801a272:	4613      	moveq	r3, r2
 801a274:	e72c      	b.n	801a0d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a276:	140f      	asrs	r7, r1, #16
 801a278:	d453      	bmi.n	801a322 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a27a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a27e:	42bd      	cmp	r5, r7
 801a280:	dd4f      	ble.n	801a322 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a282:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a286:	d44c      	bmi.n	801a322 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a288:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a28c:	4560      	cmp	r0, ip
 801a28e:	dd48      	ble.n	801a322 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a290:	9803      	ldr	r0, [sp, #12]
 801a292:	b22d      	sxth	r5, r5
 801a294:	fb0c 0505 	mla	r5, ip, r5, r0
 801a298:	5de8      	ldrb	r0, [r5, r7]
 801a29a:	9d04      	ldr	r5, [sp, #16]
 801a29c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a2a0:	f06f 0501 	mvn.w	r5, #1
 801a2a4:	fb05 fb08 	mul.w	fp, r5, r8
 801a2a8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a2ac:	f834 500b 	ldrh.w	r5, [r4, fp]
 801a2b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a2b4:	122f      	asrs	r7, r5, #8
 801a2b6:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a2ba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a2be:	00ed      	lsls	r5, r5, #3
 801a2c0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a2c4:	fb17 f706 	smulbb	r7, r7, r6
 801a2c8:	b2ed      	uxtb	r5, r5
 801a2ca:	fb19 f906 	smulbb	r9, r9, r6
 801a2ce:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801a2d2:	10c7      	asrs	r7, r0, #3
 801a2d4:	fb15 f506 	smulbb	r5, r5, r6
 801a2d8:	00c0      	lsls	r0, r0, #3
 801a2da:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a2de:	fa1f fc8c 	uxth.w	ip, ip
 801a2e2:	b2c0      	uxtb	r0, r0
 801a2e4:	fb07 970a 	mla	r7, r7, sl, r9
 801a2e8:	fb00 500a 	mla	r0, r0, sl, r5
 801a2ec:	f10c 0501 	add.w	r5, ip, #1
 801a2f0:	b2bf      	uxth	r7, r7
 801a2f2:	b280      	uxth	r0, r0
 801a2f4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a2f8:	f107 0901 	add.w	r9, r7, #1
 801a2fc:	1c45      	adds	r5, r0, #1
 801a2fe:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801a302:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a306:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a30a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a30e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a312:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a316:	ea45 0c0c 	orr.w	ip, r5, ip
 801a31a:	ea4c 0c09 	orr.w	ip, ip, r9
 801a31e:	f824 c00b 	strh.w	ip, [r4, fp]
 801a322:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a324:	f108 38ff 	add.w	r8, r8, #4294967295
 801a328:	4401      	add	r1, r0
 801a32a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a32c:	4402      	add	r2, r0
 801a32e:	e75c      	b.n	801a1ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a330:	b007      	add	sp, #28
 801a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a336 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a336:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a33a:	b085      	sub	sp, #20
 801a33c:	4693      	mov	fp, r2
 801a33e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a342:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a344:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a346:	6870      	ldr	r0, [r6, #4]
 801a348:	9100      	str	r1, [sp, #0]
 801a34a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a34e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801a352:	fb00 2404 	mla	r4, r0, r4, r2
 801a356:	6832      	ldr	r2, [r6, #0]
 801a358:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a35c:	682a      	ldr	r2, [r5, #0]
 801a35e:	9201      	str	r2, [sp, #4]
 801a360:	686a      	ldr	r2, [r5, #4]
 801a362:	3204      	adds	r2, #4
 801a364:	9202      	str	r2, [sp, #8]
 801a366:	9a00      	ldr	r2, [sp, #0]
 801a368:	2a00      	cmp	r2, #0
 801a36a:	dc03      	bgt.n	801a374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a36c:	f1bb 0f00 	cmp.w	fp, #0
 801a370:	f340 80a0 	ble.w	801a4b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801a374:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a376:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a37a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a37e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a380:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a384:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a388:	2b00      	cmp	r3, #0
 801a38a:	dd0c      	ble.n	801a3a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a38c:	1406      	asrs	r6, r0, #16
 801a38e:	d405      	bmi.n	801a39c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a390:	454e      	cmp	r6, r9
 801a392:	da03      	bge.n	801a39c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a394:	1416      	asrs	r6, r2, #16
 801a396:	d401      	bmi.n	801a39c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a398:	4546      	cmp	r6, r8
 801a39a:	db05      	blt.n	801a3a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a39c:	4470      	add	r0, lr
 801a39e:	4462      	add	r2, ip
 801a3a0:	3b01      	subs	r3, #1
 801a3a2:	3402      	adds	r4, #2
 801a3a4:	e7f0      	b.n	801a388 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a3a6:	d00f      	beq.n	801a3c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a3a8:	1e5e      	subs	r6, r3, #1
 801a3aa:	fb0e 0706 	mla	r7, lr, r6, r0
 801a3ae:	143f      	asrs	r7, r7, #16
 801a3b0:	d541      	bpl.n	801a436 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801a3b2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801a3b6:	4698      	mov	r8, r3
 801a3b8:	9603      	str	r6, [sp, #12]
 801a3ba:	f1b8 0f00 	cmp.w	r8, #0
 801a3be:	dc59      	bgt.n	801a474 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a3c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a3c4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a3c8:	9b00      	ldr	r3, [sp, #0]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	dd72      	ble.n	801a4b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801a3ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a3d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a3d8:	eeb0 6a62 	vmov.f32	s12, s5
 801a3dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a3e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a3e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a3e8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a3ec:	eeb0 6a43 	vmov.f32	s12, s6
 801a3f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a3f4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a3f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a3fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a400:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a404:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a408:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a40c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a410:	ee12 2a90 	vmov	r2, s5
 801a414:	eef0 2a47 	vmov.f32	s5, s14
 801a418:	fb92 fef3 	sdiv	lr, r2, r3
 801a41c:	ee13 2a10 	vmov	r2, s6
 801a420:	eeb0 3a67 	vmov.f32	s6, s15
 801a424:	fb92 fcf3 	sdiv	ip, r2, r3
 801a428:	9b00      	ldr	r3, [sp, #0]
 801a42a:	3b01      	subs	r3, #1
 801a42c:	9300      	str	r3, [sp, #0]
 801a42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a430:	bf08      	it	eq
 801a432:	465b      	moveq	r3, fp
 801a434:	e797      	b.n	801a366 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a436:	454f      	cmp	r7, r9
 801a438:	dabb      	bge.n	801a3b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a43a:	fb0c 2606 	mla	r6, ip, r6, r2
 801a43e:	1436      	asrs	r6, r6, #16
 801a440:	d4b7      	bmi.n	801a3b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a442:	4546      	cmp	r6, r8
 801a444:	dab5      	bge.n	801a3b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a446:	461e      	mov	r6, r3
 801a448:	46a0      	mov	r8, r4
 801a44a:	2e00      	cmp	r6, #0
 801a44c:	ddb8      	ble.n	801a3c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a44e:	1417      	asrs	r7, r2, #16
 801a450:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801a454:	9901      	ldr	r1, [sp, #4]
 801a456:	ea4f 4920 	mov.w	r9, r0, asr #16
 801a45a:	4462      	add	r2, ip
 801a45c:	4470      	add	r0, lr
 801a45e:	fb0a 1707 	mla	r7, sl, r7, r1
 801a462:	9902      	ldr	r1, [sp, #8]
 801a464:	3e01      	subs	r6, #1
 801a466:	f817 7009 	ldrb.w	r7, [r7, r9]
 801a46a:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801a46e:	f828 7b02 	strh.w	r7, [r8], #2
 801a472:	e7ea      	b.n	801a44a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a474:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a478:	d417      	bmi.n	801a4aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a47a:	68ae      	ldr	r6, [r5, #8]
 801a47c:	454e      	cmp	r6, r9
 801a47e:	dd14      	ble.n	801a4aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a480:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a484:	d411      	bmi.n	801a4aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a486:	68ef      	ldr	r7, [r5, #12]
 801a488:	4557      	cmp	r7, sl
 801a48a:	dd0e      	ble.n	801a4aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a48c:	9f01      	ldr	r7, [sp, #4]
 801a48e:	b236      	sxth	r6, r6
 801a490:	f06f 0101 	mvn.w	r1, #1
 801a494:	fb0a 7606 	mla	r6, sl, r6, r7
 801a498:	9f02      	ldr	r7, [sp, #8]
 801a49a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801a49e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801a4a2:	fb01 f608 	mul.w	r6, r1, r8
 801a4a6:	9903      	ldr	r1, [sp, #12]
 801a4a8:	538f      	strh	r7, [r1, r6]
 801a4aa:	4470      	add	r0, lr
 801a4ac:	4462      	add	r2, ip
 801a4ae:	f108 38ff 	add.w	r8, r8, #4294967295
 801a4b2:	e782      	b.n	801a3ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a4b4:	b005      	add	sp, #20
 801a4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a4ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a4ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4be:	b087      	sub	sp, #28
 801a4c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a4c2:	9205      	str	r2, [sp, #20]
 801a4c4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a4c8:	9102      	str	r1, [sp, #8]
 801a4ca:	9203      	str	r2, [sp, #12]
 801a4cc:	6861      	ldr	r1, [r4, #4]
 801a4ce:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a4d2:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a4d6:	fb01 2000 	mla	r0, r1, r0, r2
 801a4da:	6822      	ldr	r2, [r4, #0]
 801a4dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a4e0:	9200      	str	r2, [sp, #0]
 801a4e2:	f8dc 2000 	ldr.w	r2, [ip]
 801a4e6:	9204      	str	r2, [sp, #16]
 801a4e8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a4ec:	3204      	adds	r2, #4
 801a4ee:	9201      	str	r2, [sp, #4]
 801a4f0:	9a03      	ldr	r2, [sp, #12]
 801a4f2:	43d5      	mvns	r5, r2
 801a4f4:	b2ed      	uxtb	r5, r5
 801a4f6:	9a02      	ldr	r2, [sp, #8]
 801a4f8:	2a00      	cmp	r2, #0
 801a4fa:	dc03      	bgt.n	801a504 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a4fc:	9a05      	ldr	r2, [sp, #20]
 801a4fe:	2a00      	cmp	r2, #0
 801a500:	f340 812c 	ble.w	801a75c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a504:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a506:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a50a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a50e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a510:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a514:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a518:	2b00      	cmp	r3, #0
 801a51a:	dd10      	ble.n	801a53e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a51c:	140c      	asrs	r4, r1, #16
 801a51e:	d405      	bmi.n	801a52c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a520:	4574      	cmp	r4, lr
 801a522:	da03      	bge.n	801a52c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a524:	1414      	asrs	r4, r2, #16
 801a526:	d401      	bmi.n	801a52c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a528:	42bc      	cmp	r4, r7
 801a52a:	db09      	blt.n	801a540 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a52c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a52e:	3b01      	subs	r3, #1
 801a530:	9800      	ldr	r0, [sp, #0]
 801a532:	4421      	add	r1, r4
 801a534:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a536:	3002      	adds	r0, #2
 801a538:	4422      	add	r2, r4
 801a53a:	9000      	str	r0, [sp, #0]
 801a53c:	e7ec      	b.n	801a518 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a53e:	d071      	beq.n	801a624 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a540:	1e5c      	subs	r4, r3, #1
 801a542:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a544:	fb06 1604 	mla	r6, r6, r4, r1
 801a548:	1436      	asrs	r6, r6, #16
 801a54a:	d45d      	bmi.n	801a608 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a54c:	4576      	cmp	r6, lr
 801a54e:	da5b      	bge.n	801a608 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a550:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a552:	fb06 2404 	mla	r4, r6, r4, r2
 801a556:	1424      	asrs	r4, r4, #16
 801a558:	d456      	bmi.n	801a608 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a55a:	42bc      	cmp	r4, r7
 801a55c:	da54      	bge.n	801a608 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a55e:	4698      	mov	r8, r3
 801a560:	f8dd 9000 	ldr.w	r9, [sp]
 801a564:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801a568:	f1b8 0f00 	cmp.w	r8, #0
 801a56c:	dd54      	ble.n	801a618 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a56e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a572:	1414      	asrs	r4, r2, #16
 801a574:	9804      	ldr	r0, [sp, #16]
 801a576:	140e      	asrs	r6, r1, #16
 801a578:	f108 38ff 	add.w	r8, r8, #4294967295
 801a57c:	fb07 0404 	mla	r4, r7, r4, r0
 801a580:	9801      	ldr	r0, [sp, #4]
 801a582:	f814 e006 	ldrb.w	lr, [r4, r6]
 801a586:	f8b9 4000 	ldrh.w	r4, [r9]
 801a58a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a58e:	1227      	asrs	r7, r4, #8
 801a590:	eb00 0b0e 	add.w	fp, r0, lr
 801a594:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801a598:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a59c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a59e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a5a2:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a5a6:	4401      	add	r1, r0
 801a5a8:	fb16 f60a 	smulbb	r6, r6, sl
 801a5ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a5ae:	fb1b fb0a 	smulbb	fp, fp, sl
 801a5b2:	fb07 6705 	mla	r7, r7, r5, r6
 801a5b6:	10e6      	asrs	r6, r4, #3
 801a5b8:	00e4      	lsls	r4, r4, #3
 801a5ba:	4402      	add	r2, r0
 801a5bc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a5c0:	b2bf      	uxth	r7, r7
 801a5c2:	b2e4      	uxtb	r4, r4
 801a5c4:	fb06 b605 	mla	r6, r6, r5, fp
 801a5c8:	fb14 f405 	smulbb	r4, r4, r5
 801a5cc:	b2b6      	uxth	r6, r6
 801a5ce:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801a5d2:	1c7c      	adds	r4, r7, #1
 801a5d4:	f106 0b01 	add.w	fp, r6, #1
 801a5d8:	fa1f fe8e 	uxth.w	lr, lr
 801a5dc:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a5e0:	f10e 0401 	add.w	r4, lr, #1
 801a5e4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a5e8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a5ec:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801a5f0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a5f4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a5f8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a5fc:	4327      	orrs	r7, r4
 801a5fe:	ea47 070b 	orr.w	r7, r7, fp
 801a602:	f829 7b02 	strh.w	r7, [r9], #2
 801a606:	e7af      	b.n	801a568 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a608:	f04f 0e00 	mov.w	lr, #0
 801a60c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a610:	eb03 040e 	add.w	r4, r3, lr
 801a614:	2c00      	cmp	r4, #0
 801a616:	dc43      	bgt.n	801a6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a618:	9a00      	ldr	r2, [sp, #0]
 801a61a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a61e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a622:	9300      	str	r3, [sp, #0]
 801a624:	9b02      	ldr	r3, [sp, #8]
 801a626:	2b00      	cmp	r3, #0
 801a628:	f340 8098 	ble.w	801a75c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a62c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a630:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a632:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a636:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a63a:	eef0 6a62 	vmov.f32	s13, s5
 801a63e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a642:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a646:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a64a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a64e:	eef0 6a43 	vmov.f32	s13, s6
 801a652:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a656:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a65a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a65e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a662:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a666:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a66a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a66e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a672:	ee12 2a90 	vmov	r2, s5
 801a676:	eef0 2a47 	vmov.f32	s5, s14
 801a67a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a67e:	ee13 2a10 	vmov	r2, s6
 801a682:	9313      	str	r3, [sp, #76]	; 0x4c
 801a684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a686:	eeb0 3a67 	vmov.f32	s6, s15
 801a68a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a68e:	9314      	str	r3, [sp, #80]	; 0x50
 801a690:	9b02      	ldr	r3, [sp, #8]
 801a692:	9a05      	ldr	r2, [sp, #20]
 801a694:	3b01      	subs	r3, #1
 801a696:	9302      	str	r3, [sp, #8]
 801a698:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a69a:	bf08      	it	eq
 801a69c:	4613      	moveq	r3, r2
 801a69e:	e72a      	b.n	801a4f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a6a0:	140f      	asrs	r7, r1, #16
 801a6a2:	d454      	bmi.n	801a74e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a6a4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a6a8:	42be      	cmp	r6, r7
 801a6aa:	dd50      	ble.n	801a74e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a6ac:	ea5f 4822 	movs.w	r8, r2, asr #16
 801a6b0:	d44d      	bmi.n	801a74e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a6b2:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801a6b6:	4544      	cmp	r4, r8
 801a6b8:	dd49      	ble.n	801a74e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801a6ba:	9c04      	ldr	r4, [sp, #16]
 801a6bc:	b236      	sxth	r6, r6
 801a6be:	f06f 0001 	mvn.w	r0, #1
 801a6c2:	fb08 4606 	mla	r6, r8, r6, r4
 801a6c6:	9c01      	ldr	r4, [sp, #4]
 801a6c8:	fb00 fa0e 	mul.w	sl, r0, lr
 801a6cc:	9800      	ldr	r0, [sp, #0]
 801a6ce:	f816 8007 	ldrb.w	r8, [r6, r7]
 801a6d2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a6d6:	eb04 0b08 	add.w	fp, r4, r8
 801a6da:	f830 400a 	ldrh.w	r4, [r0, sl]
 801a6de:	9801      	ldr	r0, [sp, #4]
 801a6e0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a6e4:	1227      	asrs	r7, r4, #8
 801a6e6:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a6ea:	fb16 f609 	smulbb	r6, r6, r9
 801a6ee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a6f2:	f810 8008 	ldrb.w	r8, [r0, r8]
 801a6f6:	fb1b fb09 	smulbb	fp, fp, r9
 801a6fa:	fb07 6705 	mla	r7, r7, r5, r6
 801a6fe:	10e6      	asrs	r6, r4, #3
 801a700:	00e4      	lsls	r4, r4, #3
 801a702:	9800      	ldr	r0, [sp, #0]
 801a704:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a708:	b2bf      	uxth	r7, r7
 801a70a:	b2e4      	uxtb	r4, r4
 801a70c:	fb06 b605 	mla	r6, r6, r5, fp
 801a710:	fb14 f405 	smulbb	r4, r4, r5
 801a714:	b2b6      	uxth	r6, r6
 801a716:	fb08 4809 	mla	r8, r8, r9, r4
 801a71a:	1c7c      	adds	r4, r7, #1
 801a71c:	f106 0b01 	add.w	fp, r6, #1
 801a720:	fa1f f888 	uxth.w	r8, r8
 801a724:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a728:	f108 0401 	add.w	r4, r8, #1
 801a72c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a730:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a734:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801a738:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a73c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a740:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a744:	4327      	orrs	r7, r4
 801a746:	ea47 070b 	orr.w	r7, r7, fp
 801a74a:	f820 700a 	strh.w	r7, [r0, sl]
 801a74e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a750:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a754:	4401      	add	r1, r0
 801a756:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a758:	4402      	add	r2, r0
 801a75a:	e759      	b.n	801a610 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a75c:	b007      	add	sp, #28
 801a75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a764 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a768:	b085      	sub	sp, #20
 801a76a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a76e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a770:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a772:	9203      	str	r2, [sp, #12]
 801a774:	6870      	ldr	r0, [r6, #4]
 801a776:	686f      	ldr	r7, [r5, #4]
 801a778:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801a77c:	3704      	adds	r7, #4
 801a77e:	9101      	str	r1, [sp, #4]
 801a780:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a784:	fb00 2404 	mla	r4, r0, r4, r2
 801a788:	6832      	ldr	r2, [r6, #0]
 801a78a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a78e:	682a      	ldr	r2, [r5, #0]
 801a790:	9202      	str	r2, [sp, #8]
 801a792:	9a01      	ldr	r2, [sp, #4]
 801a794:	2a00      	cmp	r2, #0
 801a796:	dc03      	bgt.n	801a7a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a798:	9a03      	ldr	r2, [sp, #12]
 801a79a:	2a00      	cmp	r2, #0
 801a79c:	f340 80cc 	ble.w	801a938 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a7a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a7a2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a7a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a7aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a7ac:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a7b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	dd0d      	ble.n	801a7d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a7b8:	1406      	asrs	r6, r0, #16
 801a7ba:	d405      	bmi.n	801a7c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a7bc:	454e      	cmp	r6, r9
 801a7be:	da03      	bge.n	801a7c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a7c0:	1416      	asrs	r6, r2, #16
 801a7c2:	d401      	bmi.n	801a7c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a7c4:	4546      	cmp	r6, r8
 801a7c6:	db06      	blt.n	801a7d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a7c8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a7ca:	4460      	add	r0, ip
 801a7cc:	3b01      	subs	r3, #1
 801a7ce:	3402      	adds	r4, #2
 801a7d0:	4432      	add	r2, r6
 801a7d2:	e7ef      	b.n	801a7b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a7d4:	d00f      	beq.n	801a7f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a7d6:	1e5e      	subs	r6, r3, #1
 801a7d8:	fb0c 0e06 	mla	lr, ip, r6, r0
 801a7dc:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801a7e0:	d543      	bpl.n	801a86a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801a7e2:	4698      	mov	r8, r3
 801a7e4:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801a7e8:	f1b8 0f00 	cmp.w	r8, #0
 801a7ec:	dc71      	bgt.n	801a8d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801a7ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a7f2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a7f6:	9b01      	ldr	r3, [sp, #4]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	f340 809d 	ble.w	801a938 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a7fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a804:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a808:	eeb0 6a62 	vmov.f32	s12, s5
 801a80c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a810:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a814:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a818:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a81c:	eeb0 6a43 	vmov.f32	s12, s6
 801a820:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a824:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a828:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a82c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a830:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a834:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a838:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a83c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a840:	ee12 2a90 	vmov	r2, s5
 801a844:	eef0 2a47 	vmov.f32	s5, s14
 801a848:	fb92 fcf3 	sdiv	ip, r2, r3
 801a84c:	ee13 2a10 	vmov	r2, s6
 801a850:	eeb0 3a67 	vmov.f32	s6, s15
 801a854:	fb92 f3f3 	sdiv	r3, r2, r3
 801a858:	9312      	str	r3, [sp, #72]	; 0x48
 801a85a:	9b01      	ldr	r3, [sp, #4]
 801a85c:	9a03      	ldr	r2, [sp, #12]
 801a85e:	3b01      	subs	r3, #1
 801a860:	9301      	str	r3, [sp, #4]
 801a862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a864:	bf08      	it	eq
 801a866:	4613      	moveq	r3, r2
 801a868:	e793      	b.n	801a792 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a86a:	45ce      	cmp	lr, r9
 801a86c:	dab9      	bge.n	801a7e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a86e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a870:	fb01 2606 	mla	r6, r1, r6, r2
 801a874:	1436      	asrs	r6, r6, #16
 801a876:	d4b4      	bmi.n	801a7e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a878:	4546      	cmp	r6, r8
 801a87a:	dab2      	bge.n	801a7e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a87c:	4698      	mov	r8, r3
 801a87e:	46a2      	mov	sl, r4
 801a880:	f1b8 0f00 	cmp.w	r8, #0
 801a884:	ddb3      	ble.n	801a7ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a886:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a88a:	1416      	asrs	r6, r2, #16
 801a88c:	9902      	ldr	r1, [sp, #8]
 801a88e:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801a892:	f108 38ff 	add.w	r8, r8, #4294967295
 801a896:	4460      	add	r0, ip
 801a898:	fb09 1606 	mla	r6, r9, r6, r1
 801a89c:	4928      	ldr	r1, [pc, #160]	; (801a940 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801a89e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801a8a2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a8a6:	eb07 0b0e 	add.w	fp, r7, lr
 801a8aa:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801a8ae:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a8b2:	00f6      	lsls	r6, r6, #3
 801a8b4:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801a8b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a8ba:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a8be:	440a      	add	r2, r1
 801a8c0:	ea49 0606 	orr.w	r6, r9, r6
 801a8c4:	f817 900e 	ldrb.w	r9, [r7, lr]
 801a8c8:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801a8cc:	f82a 6b02 	strh.w	r6, [sl], #2
 801a8d0:	e7d6      	b.n	801a880 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a8d2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a8d6:	d429      	bmi.n	801a92c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a8d8:	68ae      	ldr	r6, [r5, #8]
 801a8da:	454e      	cmp	r6, r9
 801a8dc:	dd26      	ble.n	801a92c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a8de:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a8e2:	d423      	bmi.n	801a92c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a8e4:	68e9      	ldr	r1, [r5, #12]
 801a8e6:	4559      	cmp	r1, fp
 801a8e8:	dd20      	ble.n	801a92c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a8ea:	fa0f fe86 	sxth.w	lr, r6
 801a8ee:	9902      	ldr	r1, [sp, #8]
 801a8f0:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801a8f4:	f06f 0101 	mvn.w	r1, #1
 801a8f8:	f81e e009 	ldrb.w	lr, [lr, r9]
 801a8fc:	fb01 f908 	mul.w	r9, r1, r8
 801a900:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a904:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a908:	eb07 060e 	add.w	r6, r7, lr
 801a90c:	f896 b002 	ldrb.w	fp, [r6, #2]
 801a910:	7876      	ldrb	r6, [r6, #1]
 801a912:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801a916:	00f6      	lsls	r6, r6, #3
 801a918:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a91c:	ea4b 0606 	orr.w	r6, fp, r6
 801a920:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801a924:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801a928:	f82a 6009 	strh.w	r6, [sl, r9]
 801a92c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a92e:	4460      	add	r0, ip
 801a930:	f108 38ff 	add.w	r8, r8, #4294967295
 801a934:	440a      	add	r2, r1
 801a936:	e757      	b.n	801a7e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a938:	b005      	add	sp, #20
 801a93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a93e:	bf00      	nop
 801a940:	fffff800 	.word	0xfffff800

0801a944 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a948:	b087      	sub	sp, #28
 801a94a:	468b      	mov	fp, r1
 801a94c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a950:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a952:	9204      	str	r2, [sp, #16]
 801a954:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a958:	6841      	ldr	r1, [r0, #4]
 801a95a:	9205      	str	r2, [sp, #20]
 801a95c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a960:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a964:	fb01 2404 	mla	r4, r1, r4, r2
 801a968:	6802      	ldr	r2, [r0, #0]
 801a96a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a96e:	f8dc 2000 	ldr.w	r2, [ip]
 801a972:	9201      	str	r2, [sp, #4]
 801a974:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a978:	3204      	adds	r2, #4
 801a97a:	9202      	str	r2, [sp, #8]
 801a97c:	f1bb 0f00 	cmp.w	fp, #0
 801a980:	dc03      	bgt.n	801a98a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a982:	9a04      	ldr	r2, [sp, #16]
 801a984:	2a00      	cmp	r2, #0
 801a986:	f340 8138 	ble.w	801abfa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a98a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a98c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a990:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a996:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801a99a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	dd0e      	ble.n	801a9c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a9a2:	1402      	asrs	r2, r0, #16
 801a9a4:	d405      	bmi.n	801a9b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a9a6:	42ba      	cmp	r2, r7
 801a9a8:	da03      	bge.n	801a9b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a9aa:	140a      	asrs	r2, r1, #16
 801a9ac:	d401      	bmi.n	801a9b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a9ae:	42b2      	cmp	r2, r6
 801a9b0:	db07      	blt.n	801a9c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a9b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a9b4:	3b01      	subs	r3, #1
 801a9b6:	3402      	adds	r4, #2
 801a9b8:	4410      	add	r0, r2
 801a9ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a9bc:	4411      	add	r1, r2
 801a9be:	e7ee      	b.n	801a99e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a9c0:	d019      	beq.n	801a9f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a9c2:	1e5a      	subs	r2, r3, #1
 801a9c4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a9c6:	fb05 0502 	mla	r5, r5, r2, r0
 801a9ca:	142d      	asrs	r5, r5, #16
 801a9cc:	d409      	bmi.n	801a9e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a9ce:	42bd      	cmp	r5, r7
 801a9d0:	da07      	bge.n	801a9e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a9d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a9d4:	fb05 1202 	mla	r2, r5, r2, r1
 801a9d8:	1412      	asrs	r2, r2, #16
 801a9da:	d402      	bmi.n	801a9e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a9dc:	42b2      	cmp	r2, r6
 801a9de:	f2c0 80ac 	blt.w	801ab3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801a9e2:	f04f 0e00 	mov.w	lr, #0
 801a9e6:	eb03 020e 	add.w	r2, r3, lr
 801a9ea:	2a00      	cmp	r2, #0
 801a9ec:	dc3e      	bgt.n	801aa6c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a9ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a9f2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a9f6:	f1bb 0f00 	cmp.w	fp, #0
 801a9fa:	f340 80fe 	ble.w	801abfa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a9fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aa02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa04:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aa08:	f1bb 0b01 	subs.w	fp, fp, #1
 801aa0c:	eeb0 6a62 	vmov.f32	s12, s5
 801aa10:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aa14:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aa18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa1c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801aa20:	eeb0 6a43 	vmov.f32	s12, s6
 801aa24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa28:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801aa2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aa30:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aa34:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aa38:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aa3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aa40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aa44:	ee12 2a90 	vmov	r2, s5
 801aa48:	eef0 2a47 	vmov.f32	s5, s14
 801aa4c:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa50:	ee13 2a10 	vmov	r2, s6
 801aa54:	9313      	str	r3, [sp, #76]	; 0x4c
 801aa56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa58:	eeb0 3a67 	vmov.f32	s6, s15
 801aa5c:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa60:	9a04      	ldr	r2, [sp, #16]
 801aa62:	9314      	str	r3, [sp, #80]	; 0x50
 801aa64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa66:	bf08      	it	eq
 801aa68:	4613      	moveq	r3, r2
 801aa6a:	e787      	b.n	801a97c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801aa6c:	1406      	asrs	r6, r0, #16
 801aa6e:	d45d      	bmi.n	801ab2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801aa70:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801aa74:	42b5      	cmp	r5, r6
 801aa76:	dd59      	ble.n	801ab2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801aa78:	140f      	asrs	r7, r1, #16
 801aa7a:	d457      	bmi.n	801ab2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801aa7c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801aa80:	42ba      	cmp	r2, r7
 801aa82:	dd53      	ble.n	801ab2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801aa84:	9a01      	ldr	r2, [sp, #4]
 801aa86:	b22d      	sxth	r5, r5
 801aa88:	fb07 2505 	mla	r5, r7, r5, r2
 801aa8c:	5daa      	ldrb	r2, [r5, r6]
 801aa8e:	9d02      	ldr	r5, [sp, #8]
 801aa90:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801aa94:	0e2e      	lsrs	r6, r5, #24
 801aa96:	d049      	beq.n	801ab2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801aa98:	f06f 0201 	mvn.w	r2, #1
 801aa9c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801aaa0:	fb02 f20e 	mul.w	r2, r2, lr
 801aaa4:	f834 8002 	ldrh.w	r8, [r4, r2]
 801aaa8:	9203      	str	r2, [sp, #12]
 801aaaa:	9a05      	ldr	r2, [sp, #20]
 801aaac:	ea4f 2728 	mov.w	r7, r8, asr #8
 801aab0:	4356      	muls	r6, r2
 801aab2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aab6:	1c72      	adds	r2, r6, #1
 801aab8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801aabc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801aac0:	b2ed      	uxtb	r5, r5
 801aac2:	1212      	asrs	r2, r2, #8
 801aac4:	fa1f f982 	uxth.w	r9, r2
 801aac8:	43d2      	mvns	r2, r2
 801aaca:	fb16 f609 	smulbb	r6, r6, r9
 801aace:	b2d2      	uxtb	r2, r2
 801aad0:	fb15 f509 	smulbb	r5, r5, r9
 801aad4:	fb07 6702 	mla	r7, r7, r2, r6
 801aad8:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801aadc:	fb1a fa09 	smulbb	sl, sl, r9
 801aae0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801aae4:	b2bf      	uxth	r7, r7
 801aae6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aaea:	fa5f f888 	uxtb.w	r8, r8
 801aaee:	fb06 a602 	mla	r6, r6, r2, sl
 801aaf2:	fb08 5502 	mla	r5, r8, r2, r5
 801aaf6:	1c7a      	adds	r2, r7, #1
 801aaf8:	b2b6      	uxth	r6, r6
 801aafa:	b2ad      	uxth	r5, r5
 801aafc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ab00:	9a03      	ldr	r2, [sp, #12]
 801ab02:	f105 0a01 	add.w	sl, r5, #1
 801ab06:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ab0a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ab0e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ab12:	ea4a 0707 	orr.w	r7, sl, r7
 801ab16:	f106 0a01 	add.w	sl, r6, #1
 801ab1a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ab1e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ab22:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ab26:	ea47 070a 	orr.w	r7, r7, sl
 801ab2a:	52a7      	strh	r7, [r4, r2]
 801ab2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ab2e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ab32:	4410      	add	r0, r2
 801ab34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ab36:	4411      	add	r1, r2
 801ab38:	e755      	b.n	801a9e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ab3a:	f04f 0800 	mov.w	r8, #0
 801ab3e:	eba3 0208 	sub.w	r2, r3, r8
 801ab42:	2a00      	cmp	r2, #0
 801ab44:	f77f af53 	ble.w	801a9ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ab48:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801ab4c:	140a      	asrs	r2, r1, #16
 801ab4e:	9f01      	ldr	r7, [sp, #4]
 801ab50:	1405      	asrs	r5, r0, #16
 801ab52:	fb06 7202 	mla	r2, r6, r2, r7
 801ab56:	5d52      	ldrb	r2, [r2, r5]
 801ab58:	9d02      	ldr	r5, [sp, #8]
 801ab5a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ab5e:	0e2e      	lsrs	r6, r5, #24
 801ab60:	d044      	beq.n	801abec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ab62:	9a05      	ldr	r2, [sp, #20]
 801ab64:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ab68:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801ab6c:	4356      	muls	r6, r2
 801ab6e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ab72:	1c72      	adds	r2, r6, #1
 801ab74:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ab78:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ab7c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ab80:	b2ed      	uxtb	r5, r5
 801ab82:	1212      	asrs	r2, r2, #8
 801ab84:	fa1f f982 	uxth.w	r9, r2
 801ab88:	43d2      	mvns	r2, r2
 801ab8a:	fb16 f609 	smulbb	r6, r6, r9
 801ab8e:	b2d2      	uxtb	r2, r2
 801ab90:	fb15 f509 	smulbb	r5, r5, r9
 801ab94:	fb07 6702 	mla	r7, r7, r2, r6
 801ab98:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ab9c:	fb1a fa09 	smulbb	sl, sl, r9
 801aba0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aba4:	b2bf      	uxth	r7, r7
 801aba6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801abaa:	fa5f fe8e 	uxtb.w	lr, lr
 801abae:	fb06 a602 	mla	r6, r6, r2, sl
 801abb2:	fb0e 5502 	mla	r5, lr, r2, r5
 801abb6:	1c7a      	adds	r2, r7, #1
 801abb8:	b2b6      	uxth	r6, r6
 801abba:	b2ad      	uxth	r5, r5
 801abbc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801abc0:	f105 0a01 	add.w	sl, r5, #1
 801abc4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801abc8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801abcc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801abd0:	ea4a 0707 	orr.w	r7, sl, r7
 801abd4:	f106 0a01 	add.w	sl, r6, #1
 801abd8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801abdc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801abe0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801abe4:	ea47 070a 	orr.w	r7, r7, sl
 801abe8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801abec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801abee:	f108 0801 	add.w	r8, r8, #1
 801abf2:	4410      	add	r0, r2
 801abf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801abf6:	4411      	add	r1, r2
 801abf8:	e7a1      	b.n	801ab3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801abfa:	b007      	add	sp, #28
 801abfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac04:	b085      	sub	sp, #20
 801ac06:	468b      	mov	fp, r1
 801ac08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ac0c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ac0e:	9203      	str	r2, [sp, #12]
 801ac10:	6841      	ldr	r1, [r0, #4]
 801ac12:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801ac16:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ac1a:	fb01 2404 	mla	r4, r1, r4, r2
 801ac1e:	6802      	ldr	r2, [r0, #0]
 801ac20:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ac24:	f8de 2000 	ldr.w	r2, [lr]
 801ac28:	9200      	str	r2, [sp, #0]
 801ac2a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ac2e:	3204      	adds	r2, #4
 801ac30:	9201      	str	r2, [sp, #4]
 801ac32:	f1bb 0f00 	cmp.w	fp, #0
 801ac36:	dc03      	bgt.n	801ac40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ac38:	9a03      	ldr	r2, [sp, #12]
 801ac3a:	2a00      	cmp	r2, #0
 801ac3c:	f340 8153 	ble.w	801aee6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ac40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ac42:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ac46:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ac4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ac4c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ac50:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	dd0e      	ble.n	801ac76 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ac58:	1408      	asrs	r0, r1, #16
 801ac5a:	d405      	bmi.n	801ac68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ac5c:	42b8      	cmp	r0, r7
 801ac5e:	da03      	bge.n	801ac68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ac60:	1410      	asrs	r0, r2, #16
 801ac62:	d401      	bmi.n	801ac68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ac64:	42b0      	cmp	r0, r6
 801ac66:	db07      	blt.n	801ac78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ac68:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ac6a:	3b01      	subs	r3, #1
 801ac6c:	3402      	adds	r4, #2
 801ac6e:	4401      	add	r1, r0
 801ac70:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ac72:	4402      	add	r2, r0
 801ac74:	e7ee      	b.n	801ac54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ac76:	d017      	beq.n	801aca8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ac78:	1e58      	subs	r0, r3, #1
 801ac7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ac7c:	fb05 1500 	mla	r5, r5, r0, r1
 801ac80:	142d      	asrs	r5, r5, #16
 801ac82:	d409      	bmi.n	801ac98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ac84:	42bd      	cmp	r5, r7
 801ac86:	da07      	bge.n	801ac98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ac88:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ac8a:	fb05 2000 	mla	r0, r5, r0, r2
 801ac8e:	1400      	asrs	r0, r0, #16
 801ac90:	d402      	bmi.n	801ac98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ac92:	42b0      	cmp	r0, r6
 801ac94:	f2c0 80bc 	blt.w	801ae10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ac98:	2600      	movs	r6, #0
 801ac9a:	1998      	adds	r0, r3, r6
 801ac9c:	2800      	cmp	r0, #0
 801ac9e:	dc3e      	bgt.n	801ad1e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801aca0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aca4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801aca8:	f1bb 0f00 	cmp.w	fp, #0
 801acac:	f340 811b 	ble.w	801aee6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801acb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801acb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801acb6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801acba:	f1bb 0b01 	subs.w	fp, fp, #1
 801acbe:	eeb0 6a62 	vmov.f32	s12, s5
 801acc2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801acc6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801acca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801acce:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801acd2:	eeb0 6a43 	vmov.f32	s12, s6
 801acd6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801acda:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801acde:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ace2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ace6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801acea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801acee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801acf2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801acf6:	ee12 2a90 	vmov	r2, s5
 801acfa:	eef0 2a47 	vmov.f32	s5, s14
 801acfe:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad02:	ee13 2a10 	vmov	r2, s6
 801ad06:	9311      	str	r3, [sp, #68]	; 0x44
 801ad08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad0a:	eeb0 3a67 	vmov.f32	s6, s15
 801ad0e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad12:	9a03      	ldr	r2, [sp, #12]
 801ad14:	9312      	str	r3, [sp, #72]	; 0x48
 801ad16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad18:	bf08      	it	eq
 801ad1a:	4613      	moveq	r3, r2
 801ad1c:	e789      	b.n	801ac32 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ad1e:	140f      	asrs	r7, r1, #16
 801ad20:	d426      	bmi.n	801ad70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ad22:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ad26:	42bd      	cmp	r5, r7
 801ad28:	dd22      	ble.n	801ad70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ad2a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ad2e:	d41f      	bmi.n	801ad70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ad30:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ad34:	4560      	cmp	r0, ip
 801ad36:	dd1b      	ble.n	801ad70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ad38:	9800      	ldr	r0, [sp, #0]
 801ad3a:	b22d      	sxth	r5, r5
 801ad3c:	fb0c 0505 	mla	r5, ip, r5, r0
 801ad40:	5de8      	ldrb	r0, [r5, r7]
 801ad42:	9d01      	ldr	r5, [sp, #4]
 801ad44:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ad48:	0e07      	lsrs	r7, r0, #24
 801ad4a:	2fff      	cmp	r7, #255	; 0xff
 801ad4c:	d116      	bne.n	801ad7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ad4e:	f06f 0501 	mvn.w	r5, #1
 801ad52:	fb05 f706 	mul.w	r7, r5, r6
 801ad56:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ad5a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ad5e:	0945      	lsrs	r5, r0, #5
 801ad60:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ad64:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ad68:	ea4c 0505 	orr.w	r5, ip, r5
 801ad6c:	4305      	orrs	r5, r0
 801ad6e:	53e5      	strh	r5, [r4, r7]
 801ad70:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ad72:	3e01      	subs	r6, #1
 801ad74:	4401      	add	r1, r0
 801ad76:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ad78:	4402      	add	r2, r0
 801ad7a:	e78e      	b.n	801ac9a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ad7c:	b2fd      	uxtb	r5, r7
 801ad7e:	2f00      	cmp	r7, #0
 801ad80:	d0f6      	beq.n	801ad70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ad82:	f06f 0701 	mvn.w	r7, #1
 801ad86:	fa1f f985 	uxth.w	r9, r5
 801ad8a:	43ed      	mvns	r5, r5
 801ad8c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ad90:	4377      	muls	r7, r6
 801ad92:	fb1a fa09 	smulbb	sl, sl, r9
 801ad96:	b2ed      	uxtb	r5, r5
 801ad98:	f834 8007 	ldrh.w	r8, [r4, r7]
 801ad9c:	9702      	str	r7, [sp, #8]
 801ad9e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ada2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ada6:	fb17 f709 	smulbb	r7, r7, r9
 801adaa:	b2c0      	uxtb	r0, r0
 801adac:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801adb0:	fb10 f009 	smulbb	r0, r0, r9
 801adb4:	fb0c 7c05 	mla	ip, ip, r5, r7
 801adb8:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801adbc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801adc0:	fa1f fc8c 	uxth.w	ip, ip
 801adc4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801adc8:	fa5f f888 	uxtb.w	r8, r8
 801adcc:	fb07 a705 	mla	r7, r7, r5, sl
 801add0:	fb08 0005 	mla	r0, r8, r5, r0
 801add4:	f10c 0501 	add.w	r5, ip, #1
 801add8:	b2bf      	uxth	r7, r7
 801adda:	b280      	uxth	r0, r0
 801addc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ade0:	f100 0a01 	add.w	sl, r0, #1
 801ade4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ade8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801adec:	9802      	ldr	r0, [sp, #8]
 801adee:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801adf2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801adf6:	f107 0a01 	add.w	sl, r7, #1
 801adfa:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801adfe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ae02:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ae06:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ae0a:	f824 c000 	strh.w	ip, [r4, r0]
 801ae0e:	e7af      	b.n	801ad70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ae10:	f04f 0800 	mov.w	r8, #0
 801ae14:	eba3 0008 	sub.w	r0, r3, r8
 801ae18:	2800      	cmp	r0, #0
 801ae1a:	f77f af41 	ble.w	801aca0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ae1e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ae22:	1410      	asrs	r0, r2, #16
 801ae24:	9f00      	ldr	r7, [sp, #0]
 801ae26:	140d      	asrs	r5, r1, #16
 801ae28:	fb06 7000 	mla	r0, r6, r0, r7
 801ae2c:	5d40      	ldrb	r0, [r0, r5]
 801ae2e:	9d01      	ldr	r5, [sp, #4]
 801ae30:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ae34:	0e2e      	lsrs	r6, r5, #24
 801ae36:	2eff      	cmp	r6, #255	; 0xff
 801ae38:	d112      	bne.n	801ae60 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801ae3a:	482c      	ldr	r0, [pc, #176]	; (801aeec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ae3c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ae40:	0968      	lsrs	r0, r5, #5
 801ae42:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ae46:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ae4a:	4330      	orrs	r0, r6
 801ae4c:	4328      	orrs	r0, r5
 801ae4e:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801ae52:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ae54:	f108 0801 	add.w	r8, r8, #1
 801ae58:	4401      	add	r1, r0
 801ae5a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ae5c:	4402      	add	r2, r0
 801ae5e:	e7d9      	b.n	801ae14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ae60:	b2f0      	uxtb	r0, r6
 801ae62:	2e00      	cmp	r6, #0
 801ae64:	d0f5      	beq.n	801ae52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ae66:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801ae6a:	fa1f f980 	uxth.w	r9, r0
 801ae6e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ae72:	43c0      	mvns	r0, r0
 801ae74:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ae78:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ae7c:	fb16 f609 	smulbb	r6, r6, r9
 801ae80:	b2c0      	uxtb	r0, r0
 801ae82:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ae86:	b2ed      	uxtb	r5, r5
 801ae88:	fb1a fa09 	smulbb	sl, sl, r9
 801ae8c:	fb07 6700 	mla	r7, r7, r0, r6
 801ae90:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ae94:	fb15 f509 	smulbb	r5, r5, r9
 801ae98:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ae9c:	b2bf      	uxth	r7, r7
 801ae9e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aea2:	fa5f fc8c 	uxtb.w	ip, ip
 801aea6:	fb06 a600 	mla	r6, r6, r0, sl
 801aeaa:	fb0c 5500 	mla	r5, ip, r0, r5
 801aeae:	1c78      	adds	r0, r7, #1
 801aeb0:	b2b6      	uxth	r6, r6
 801aeb2:	b2ad      	uxth	r5, r5
 801aeb4:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801aeb8:	f105 0a01 	add.w	sl, r5, #1
 801aebc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801aec0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801aec4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aec8:	ea4a 0707 	orr.w	r7, sl, r7
 801aecc:	f106 0a01 	add.w	sl, r6, #1
 801aed0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801aed4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801aed8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801aedc:	ea47 070a 	orr.w	r7, r7, sl
 801aee0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801aee4:	e7b5      	b.n	801ae52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801aee6:	b005      	add	sp, #20
 801aee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeec:	fffff800 	.word	0xfffff800

0801aef0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aef4:	b087      	sub	sp, #28
 801aef6:	468b      	mov	fp, r1
 801aef8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aefc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aefe:	9204      	str	r2, [sp, #16]
 801af00:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801af04:	6861      	ldr	r1, [r4, #4]
 801af06:	9205      	str	r2, [sp, #20]
 801af08:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801af0c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801af10:	fb01 2000 	mla	r0, r1, r0, r2
 801af14:	6822      	ldr	r2, [r4, #0]
 801af16:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801af1a:	f8de 2000 	ldr.w	r2, [lr]
 801af1e:	9201      	str	r2, [sp, #4]
 801af20:	f8de 2004 	ldr.w	r2, [lr, #4]
 801af24:	9202      	str	r2, [sp, #8]
 801af26:	f1bb 0f00 	cmp.w	fp, #0
 801af2a:	dc03      	bgt.n	801af34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801af2c:	9a04      	ldr	r2, [sp, #16]
 801af2e:	2a00      	cmp	r2, #0
 801af30:	f340 8142 	ble.w	801b1b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801af34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801af36:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801af3a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801af3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801af40:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801af44:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801af48:	2b00      	cmp	r3, #0
 801af4a:	dd0e      	ble.n	801af6a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801af4c:	140c      	asrs	r4, r1, #16
 801af4e:	d405      	bmi.n	801af5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801af50:	42bc      	cmp	r4, r7
 801af52:	da03      	bge.n	801af5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801af54:	1414      	asrs	r4, r2, #16
 801af56:	d401      	bmi.n	801af5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801af58:	42b4      	cmp	r4, r6
 801af5a:	db07      	blt.n	801af6c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801af5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801af5e:	3b01      	subs	r3, #1
 801af60:	3002      	adds	r0, #2
 801af62:	4421      	add	r1, r4
 801af64:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801af66:	4422      	add	r2, r4
 801af68:	e7ee      	b.n	801af48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801af6a:	d019      	beq.n	801afa0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801af6c:	1e5c      	subs	r4, r3, #1
 801af6e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801af70:	fb05 1504 	mla	r5, r5, r4, r1
 801af74:	142d      	asrs	r5, r5, #16
 801af76:	d409      	bmi.n	801af8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801af78:	42bd      	cmp	r5, r7
 801af7a:	da07      	bge.n	801af8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801af7c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801af7e:	fb05 2404 	mla	r4, r5, r4, r2
 801af82:	1424      	asrs	r4, r4, #16
 801af84:	d402      	bmi.n	801af8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801af86:	42b4      	cmp	r4, r6
 801af88:	f2c0 80b1 	blt.w	801b0ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801af8c:	f04f 0800 	mov.w	r8, #0
 801af90:	eb03 0408 	add.w	r4, r3, r8
 801af94:	2c00      	cmp	r4, #0
 801af96:	dc3e      	bgt.n	801b016 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801af98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801af9c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801afa0:	f1bb 0f00 	cmp.w	fp, #0
 801afa4:	f340 8108 	ble.w	801b1b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801afa8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801afac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801afae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801afb2:	f1bb 0b01 	subs.w	fp, fp, #1
 801afb6:	eeb0 6a62 	vmov.f32	s12, s5
 801afba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801afbe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801afc2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801afc6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801afca:	eeb0 6a43 	vmov.f32	s12, s6
 801afce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801afd2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801afd6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801afda:	ee61 7a27 	vmul.f32	s15, s2, s15
 801afde:	ee77 2a62 	vsub.f32	s5, s14, s5
 801afe2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801afe6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801afea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801afee:	ee12 2a90 	vmov	r2, s5
 801aff2:	eef0 2a47 	vmov.f32	s5, s14
 801aff6:	fb92 f3f3 	sdiv	r3, r2, r3
 801affa:	ee13 2a10 	vmov	r2, s6
 801affe:	9313      	str	r3, [sp, #76]	; 0x4c
 801b000:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b002:	eeb0 3a67 	vmov.f32	s6, s15
 801b006:	fb92 f3f3 	sdiv	r3, r2, r3
 801b00a:	9a04      	ldr	r2, [sp, #16]
 801b00c:	9314      	str	r3, [sp, #80]	; 0x50
 801b00e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b010:	bf08      	it	eq
 801b012:	4613      	moveq	r3, r2
 801b014:	e787      	b.n	801af26 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b016:	140e      	asrs	r6, r1, #16
 801b018:	d462      	bmi.n	801b0e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b01a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b01e:	42b5      	cmp	r5, r6
 801b020:	dd5e      	ble.n	801b0e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b022:	1417      	asrs	r7, r2, #16
 801b024:	d45c      	bmi.n	801b0e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b026:	f8de 400c 	ldr.w	r4, [lr, #12]
 801b02a:	42bc      	cmp	r4, r7
 801b02c:	dd58      	ble.n	801b0e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b02e:	b22d      	sxth	r5, r5
 801b030:	9c02      	ldr	r4, [sp, #8]
 801b032:	fb07 6505 	mla	r5, r7, r5, r6
 801b036:	5d66      	ldrb	r6, [r4, r5]
 801b038:	2e00      	cmp	r6, #0
 801b03a:	d051      	beq.n	801b0e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b03c:	9c01      	ldr	r4, [sp, #4]
 801b03e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801b042:	f06f 0401 	mvn.w	r4, #1
 801b046:	fb04 f408 	mul.w	r4, r4, r8
 801b04a:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801b04e:	5b05      	ldrh	r5, [r0, r4]
 801b050:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b054:	9403      	str	r4, [sp, #12]
 801b056:	9c05      	ldr	r4, [sp, #20]
 801b058:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b05c:	4366      	muls	r6, r4
 801b05e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b062:	1c74      	adds	r4, r6, #1
 801b064:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801b068:	122e      	asrs	r6, r5, #8
 801b06a:	1224      	asrs	r4, r4, #8
 801b06c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b070:	00ed      	lsls	r5, r5, #3
 801b072:	b2a7      	uxth	r7, r4
 801b074:	43e4      	mvns	r4, r4
 801b076:	b2ed      	uxtb	r5, r5
 801b078:	b2e4      	uxtb	r4, r4
 801b07a:	fb16 f604 	smulbb	r6, r6, r4
 801b07e:	fb15 f504 	smulbb	r5, r5, r4
 801b082:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b086:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801b08a:	fb1a fa04 	smulbb	sl, sl, r4
 801b08e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801b092:	fa1f fc8c 	uxth.w	ip, ip
 801b096:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b09a:	fa5f f989 	uxtb.w	r9, r9
 801b09e:	fb06 a607 	mla	r6, r6, r7, sl
 801b0a2:	f10c 0401 	add.w	r4, ip, #1
 801b0a6:	fb09 5507 	mla	r5, r9, r7, r5
 801b0aa:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b0ae:	9c03      	ldr	r4, [sp, #12]
 801b0b0:	b2ad      	uxth	r5, r5
 801b0b2:	b2b6      	uxth	r6, r6
 801b0b4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b0b8:	f105 0a01 	add.w	sl, r5, #1
 801b0bc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b0c0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b0c4:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b0c8:	f106 0a01 	add.w	sl, r6, #1
 801b0cc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b0d0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b0d4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b0d8:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b0dc:	f820 c004 	strh.w	ip, [r0, r4]
 801b0e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b0e2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b0e6:	4421      	add	r1, r4
 801b0e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b0ea:	4422      	add	r2, r4
 801b0ec:	e750      	b.n	801af90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b0ee:	f04f 0900 	mov.w	r9, #0
 801b0f2:	eba3 0409 	sub.w	r4, r3, r9
 801b0f6:	2c00      	cmp	r4, #0
 801b0f8:	f77f af4e 	ble.w	801af98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b0fc:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801b100:	140d      	asrs	r5, r1, #16
 801b102:	1414      	asrs	r4, r2, #16
 801b104:	fb06 5404 	mla	r4, r6, r4, r5
 801b108:	9d02      	ldr	r5, [sp, #8]
 801b10a:	5d2e      	ldrb	r6, [r5, r4]
 801b10c:	2e00      	cmp	r6, #0
 801b10e:	d04c      	beq.n	801b1aa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b110:	9d01      	ldr	r5, [sp, #4]
 801b112:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801b116:	9c05      	ldr	r4, [sp, #20]
 801b118:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801b11c:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801b120:	4366      	muls	r6, r4
 801b122:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b126:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b12a:	1c74      	adds	r4, r6, #1
 801b12c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b130:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801b134:	122e      	asrs	r6, r5, #8
 801b136:	1224      	asrs	r4, r4, #8
 801b138:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b13c:	00ed      	lsls	r5, r5, #3
 801b13e:	b2a7      	uxth	r7, r4
 801b140:	43e4      	mvns	r4, r4
 801b142:	b2ed      	uxtb	r5, r5
 801b144:	b2e4      	uxtb	r4, r4
 801b146:	fb16 f604 	smulbb	r6, r6, r4
 801b14a:	fb15 f504 	smulbb	r5, r5, r4
 801b14e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b152:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801b156:	fb1a fa04 	smulbb	sl, sl, r4
 801b15a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b15e:	fa1f fc8c 	uxth.w	ip, ip
 801b162:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b166:	fa5f f888 	uxtb.w	r8, r8
 801b16a:	fb06 a607 	mla	r6, r6, r7, sl
 801b16e:	f10c 0401 	add.w	r4, ip, #1
 801b172:	fb08 5507 	mla	r5, r8, r7, r5
 801b176:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b17a:	b2ad      	uxth	r5, r5
 801b17c:	b2b6      	uxth	r6, r6
 801b17e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b182:	f105 0a01 	add.w	sl, r5, #1
 801b186:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b18a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b18e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b192:	f106 0a01 	add.w	sl, r6, #1
 801b196:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b19a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b19e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b1a2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b1a6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b1aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1ac:	f109 0901 	add.w	r9, r9, #1
 801b1b0:	4421      	add	r1, r4
 801b1b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b1b4:	4422      	add	r2, r4
 801b1b6:	e79c      	b.n	801b0f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801b1b8:	b007      	add	sp, #28
 801b1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b1be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b1be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1c2:	b085      	sub	sp, #20
 801b1c4:	468b      	mov	fp, r1
 801b1c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b1ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1cc:	9203      	str	r2, [sp, #12]
 801b1ce:	6861      	ldr	r1, [r4, #4]
 801b1d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b1d4:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801b1d8:	fb01 2000 	mla	r0, r1, r0, r2
 801b1dc:	6822      	ldr	r2, [r4, #0]
 801b1de:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b1e2:	f8d8 2000 	ldr.w	r2, [r8]
 801b1e6:	9200      	str	r2, [sp, #0]
 801b1e8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b1ec:	9201      	str	r2, [sp, #4]
 801b1ee:	f1bb 0f00 	cmp.w	fp, #0
 801b1f2:	dc03      	bgt.n	801b1fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b1f4:	9a03      	ldr	r2, [sp, #12]
 801b1f6:	2a00      	cmp	r2, #0
 801b1f8:	f340 8146 	ble.w	801b488 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b1fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b1fe:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b202:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b206:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b208:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b20c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b210:	2b00      	cmp	r3, #0
 801b212:	dd0e      	ble.n	801b232 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b214:	140c      	asrs	r4, r1, #16
 801b216:	d405      	bmi.n	801b224 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b218:	42bc      	cmp	r4, r7
 801b21a:	da03      	bge.n	801b224 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b21c:	1414      	asrs	r4, r2, #16
 801b21e:	d401      	bmi.n	801b224 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b220:	42b4      	cmp	r4, r6
 801b222:	db07      	blt.n	801b234 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b224:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b226:	3b01      	subs	r3, #1
 801b228:	3002      	adds	r0, #2
 801b22a:	4421      	add	r1, r4
 801b22c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b22e:	4422      	add	r2, r4
 801b230:	e7ee      	b.n	801b210 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b232:	d017      	beq.n	801b264 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b234:	1e5c      	subs	r4, r3, #1
 801b236:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b238:	fb05 1504 	mla	r5, r5, r4, r1
 801b23c:	142d      	asrs	r5, r5, #16
 801b23e:	d409      	bmi.n	801b254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b240:	42bd      	cmp	r5, r7
 801b242:	da07      	bge.n	801b254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b244:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b246:	fb05 2404 	mla	r4, r5, r4, r2
 801b24a:	1424      	asrs	r4, r4, #16
 801b24c:	d402      	bmi.n	801b254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b24e:	42b4      	cmp	r4, r6
 801b250:	f2c0 80b3 	blt.w	801b3ba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801b254:	2600      	movs	r6, #0
 801b256:	199c      	adds	r4, r3, r6
 801b258:	2c00      	cmp	r4, #0
 801b25a:	dc3e      	bgt.n	801b2da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b25c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b260:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b264:	f1bb 0f00 	cmp.w	fp, #0
 801b268:	f340 810e 	ble.w	801b488 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b26c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b272:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b276:	f1bb 0b01 	subs.w	fp, fp, #1
 801b27a:	eeb0 6a62 	vmov.f32	s12, s5
 801b27e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b282:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b286:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b28a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b28e:	eeb0 6a43 	vmov.f32	s12, s6
 801b292:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b296:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b29a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b29e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b2a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b2a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b2aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b2ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b2b2:	ee12 2a90 	vmov	r2, s5
 801b2b6:	eef0 2a47 	vmov.f32	s5, s14
 801b2ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801b2be:	ee13 2a10 	vmov	r2, s6
 801b2c2:	9311      	str	r3, [sp, #68]	; 0x44
 801b2c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2c6:	eeb0 3a67 	vmov.f32	s6, s15
 801b2ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801b2ce:	9a03      	ldr	r2, [sp, #12]
 801b2d0:	9312      	str	r3, [sp, #72]	; 0x48
 801b2d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2d4:	bf08      	it	eq
 801b2d6:	4613      	moveq	r3, r2
 801b2d8:	e789      	b.n	801b1ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b2da:	140f      	asrs	r7, r1, #16
 801b2dc:	d418      	bmi.n	801b310 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b2de:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b2e2:	42bd      	cmp	r5, r7
 801b2e4:	dd14      	ble.n	801b310 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b2e6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b2ea:	d411      	bmi.n	801b310 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b2ec:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801b2f0:	4564      	cmp	r4, ip
 801b2f2:	dd0d      	ble.n	801b310 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b2f4:	b22d      	sxth	r5, r5
 801b2f6:	9c01      	ldr	r4, [sp, #4]
 801b2f8:	fb0c 7505 	mla	r5, ip, r5, r7
 801b2fc:	5d64      	ldrb	r4, [r4, r5]
 801b2fe:	2cff      	cmp	r4, #255	; 0xff
 801b300:	d10c      	bne.n	801b31c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b302:	9c00      	ldr	r4, [sp, #0]
 801b304:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801b308:	f06f 0401 	mvn.w	r4, #1
 801b30c:	4374      	muls	r4, r6
 801b30e:	5305      	strh	r5, [r0, r4]
 801b310:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b312:	3e01      	subs	r6, #1
 801b314:	4421      	add	r1, r4
 801b316:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b318:	4422      	add	r2, r4
 801b31a:	e79c      	b.n	801b256 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b31c:	2c00      	cmp	r4, #0
 801b31e:	d0f7      	beq.n	801b310 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b320:	9f00      	ldr	r7, [sp, #0]
 801b322:	fa1f fc84 	uxth.w	ip, r4
 801b326:	43e4      	mvns	r4, r4
 801b328:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801b32c:	f06f 0501 	mvn.w	r5, #1
 801b330:	b2e4      	uxtb	r4, r4
 801b332:	4375      	muls	r5, r6
 801b334:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801b338:	9502      	str	r5, [sp, #8]
 801b33a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b33e:	5b45      	ldrh	r5, [r0, r5]
 801b340:	122f      	asrs	r7, r5, #8
 801b342:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b346:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b34a:	00ed      	lsls	r5, r5, #3
 801b34c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b350:	fb17 f704 	smulbb	r7, r7, r4
 801b354:	b2ed      	uxtb	r5, r5
 801b356:	fb1a fa04 	smulbb	sl, sl, r4
 801b35a:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801b35e:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801b362:	fb15 f504 	smulbb	r5, r5, r4
 801b366:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801b36a:	fa1f fe8e 	uxth.w	lr, lr
 801b36e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b372:	fa5f f989 	uxtb.w	r9, r9
 801b376:	fb07 a70c 	mla	r7, r7, ip, sl
 801b37a:	f10e 0401 	add.w	r4, lr, #1
 801b37e:	fb09 550c 	mla	r5, r9, ip, r5
 801b382:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801b386:	9c02      	ldr	r4, [sp, #8]
 801b388:	b2ad      	uxth	r5, r5
 801b38a:	b2bf      	uxth	r7, r7
 801b38c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b390:	f105 0a01 	add.w	sl, r5, #1
 801b394:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b398:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b39c:	ea4a 0e0e 	orr.w	lr, sl, lr
 801b3a0:	f107 0a01 	add.w	sl, r7, #1
 801b3a4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b3a8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b3ac:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b3b0:	ea4e 0e0a 	orr.w	lr, lr, sl
 801b3b4:	f820 e004 	strh.w	lr, [r0, r4]
 801b3b8:	e7aa      	b.n	801b310 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b3ba:	f04f 0900 	mov.w	r9, #0
 801b3be:	eba3 0409 	sub.w	r4, r3, r9
 801b3c2:	2c00      	cmp	r4, #0
 801b3c4:	f77f af4a 	ble.w	801b25c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b3c8:	1414      	asrs	r4, r2, #16
 801b3ca:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b3ce:	140d      	asrs	r5, r1, #16
 801b3d0:	fb06 5504 	mla	r5, r6, r4, r5
 801b3d4:	9c01      	ldr	r4, [sp, #4]
 801b3d6:	5d64      	ldrb	r4, [r4, r5]
 801b3d8:	2cff      	cmp	r4, #255	; 0xff
 801b3da:	d10b      	bne.n	801b3f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801b3dc:	9c00      	ldr	r4, [sp, #0]
 801b3de:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801b3e2:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801b3e6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b3e8:	f109 0901 	add.w	r9, r9, #1
 801b3ec:	4421      	add	r1, r4
 801b3ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b3f0:	4422      	add	r2, r4
 801b3f2:	e7e4      	b.n	801b3be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801b3f4:	2c00      	cmp	r4, #0
 801b3f6:	d0f6      	beq.n	801b3e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b3f8:	9e00      	ldr	r6, [sp, #0]
 801b3fa:	b2a7      	uxth	r7, r4
 801b3fc:	43e4      	mvns	r4, r4
 801b3fe:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801b402:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801b406:	b2e4      	uxtb	r4, r4
 801b408:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b40c:	122e      	asrs	r6, r5, #8
 801b40e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b412:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b416:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b41a:	00ed      	lsls	r5, r5, #3
 801b41c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b420:	fb16 f604 	smulbb	r6, r6, r4
 801b424:	b2ed      	uxtb	r5, r5
 801b426:	fb1a fa04 	smulbb	sl, sl, r4
 801b42a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b42e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b432:	fb15 f504 	smulbb	r5, r5, r4
 801b436:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b43a:	fa1f fc8c 	uxth.w	ip, ip
 801b43e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b442:	fa5f fe8e 	uxtb.w	lr, lr
 801b446:	fb06 a607 	mla	r6, r6, r7, sl
 801b44a:	f10c 0401 	add.w	r4, ip, #1
 801b44e:	fb0e 5507 	mla	r5, lr, r7, r5
 801b452:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b456:	b2ad      	uxth	r5, r5
 801b458:	b2b6      	uxth	r6, r6
 801b45a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b45e:	f105 0a01 	add.w	sl, r5, #1
 801b462:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b466:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b46a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b46e:	f106 0a01 	add.w	sl, r6, #1
 801b472:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b476:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b47a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b47e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b482:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b486:	e7ae      	b.n	801b3e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b488:	b005      	add	sp, #20
 801b48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b48e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b48e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b492:	b085      	sub	sp, #20
 801b494:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b496:	9203      	str	r2, [sp, #12]
 801b498:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801b49c:	9100      	str	r1, [sp, #0]
 801b49e:	9201      	str	r2, [sp, #4]
 801b4a0:	6841      	ldr	r1, [r0, #4]
 801b4a2:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801b4a6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b4aa:	fb01 2404 	mla	r4, r1, r4, r2
 801b4ae:	6802      	ldr	r2, [r0, #0]
 801b4b0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b4b4:	f8de 2000 	ldr.w	r2, [lr]
 801b4b8:	9202      	str	r2, [sp, #8]
 801b4ba:	9a01      	ldr	r2, [sp, #4]
 801b4bc:	43d6      	mvns	r6, r2
 801b4be:	b2f6      	uxtb	r6, r6
 801b4c0:	9a00      	ldr	r2, [sp, #0]
 801b4c2:	2a00      	cmp	r2, #0
 801b4c4:	dc03      	bgt.n	801b4ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b4c6:	9a03      	ldr	r2, [sp, #12]
 801b4c8:	2a00      	cmp	r2, #0
 801b4ca:	f340 8124 	ble.w	801b716 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b4ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b4d0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801b4d4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b4d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b4da:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801b4de:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	dd0e      	ble.n	801b504 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b4e6:	1408      	asrs	r0, r1, #16
 801b4e8:	d405      	bmi.n	801b4f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b4ea:	4560      	cmp	r0, ip
 801b4ec:	da03      	bge.n	801b4f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b4ee:	1410      	asrs	r0, r2, #16
 801b4f0:	d401      	bmi.n	801b4f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b4f2:	42b8      	cmp	r0, r7
 801b4f4:	db07      	blt.n	801b506 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b4f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b4f8:	3b01      	subs	r3, #1
 801b4fa:	3402      	adds	r4, #2
 801b4fc:	4401      	add	r1, r0
 801b4fe:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b500:	4402      	add	r2, r0
 801b502:	e7ee      	b.n	801b4e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b504:	d06e      	beq.n	801b5e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b506:	1e58      	subs	r0, r3, #1
 801b508:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b50a:	fb05 1500 	mla	r5, r5, r0, r1
 801b50e:	142d      	asrs	r5, r5, #16
 801b510:	d45c      	bmi.n	801b5cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b512:	4565      	cmp	r5, ip
 801b514:	da5a      	bge.n	801b5cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b516:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b518:	fb05 2000 	mla	r0, r5, r0, r2
 801b51c:	1400      	asrs	r0, r0, #16
 801b51e:	d455      	bmi.n	801b5cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b520:	42b8      	cmp	r0, r7
 801b522:	da53      	bge.n	801b5cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b524:	4699      	mov	r9, r3
 801b526:	46a2      	mov	sl, r4
 801b528:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801b52c:	f1b9 0f00 	cmp.w	r9, #0
 801b530:	dd54      	ble.n	801b5dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b532:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b536:	140d      	asrs	r5, r1, #16
 801b538:	1410      	asrs	r0, r2, #16
 801b53a:	f109 39ff 	add.w	r9, r9, #4294967295
 801b53e:	fb07 5000 	mla	r0, r7, r0, r5
 801b542:	9d02      	ldr	r5, [sp, #8]
 801b544:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b548:	f8ba 5000 	ldrh.w	r5, [sl]
 801b54c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b550:	122f      	asrs	r7, r5, #8
 801b552:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b556:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b55a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b55e:	00ed      	lsls	r5, r5, #3
 801b560:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b564:	fb17 f706 	smulbb	r7, r7, r6
 801b568:	b2ed      	uxtb	r5, r5
 801b56a:	fb18 f806 	smulbb	r8, r8, r6
 801b56e:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b572:	10c7      	asrs	r7, r0, #3
 801b574:	fb15 f506 	smulbb	r5, r5, r6
 801b578:	00c0      	lsls	r0, r0, #3
 801b57a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b57e:	fa1f fc8c 	uxth.w	ip, ip
 801b582:	b2c0      	uxtb	r0, r0
 801b584:	fb07 870b 	mla	r7, r7, fp, r8
 801b588:	fb00 500b 	mla	r0, r0, fp, r5
 801b58c:	f10c 0501 	add.w	r5, ip, #1
 801b590:	b2bf      	uxth	r7, r7
 801b592:	b280      	uxth	r0, r0
 801b594:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b598:	f107 0801 	add.w	r8, r7, #1
 801b59c:	1c45      	adds	r5, r0, #1
 801b59e:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b5a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b5a6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b5aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b5ac:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b5b0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b5b4:	4401      	add	r1, r0
 801b5b6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b5ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b5bc:	ea45 0c0c 	orr.w	ip, r5, ip
 801b5c0:	4402      	add	r2, r0
 801b5c2:	ea4c 0c08 	orr.w	ip, ip, r8
 801b5c6:	f82a cb02 	strh.w	ip, [sl], #2
 801b5ca:	e7af      	b.n	801b52c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b5cc:	f04f 0800 	mov.w	r8, #0
 801b5d0:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801b5d4:	eb03 0008 	add.w	r0, r3, r8
 801b5d8:	2800      	cmp	r0, #0
 801b5da:	dc41      	bgt.n	801b660 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b5dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b5e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b5e4:	9b00      	ldr	r3, [sp, #0]
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	f340 8095 	ble.w	801b716 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b5ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b5f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b5f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b5f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b5fa:	eef0 6a62 	vmov.f32	s13, s5
 801b5fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b602:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b606:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b60a:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b60e:	eef0 6a43 	vmov.f32	s13, s6
 801b612:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b616:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b61a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b61e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b622:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b626:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b62a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b62e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b632:	ee12 2a90 	vmov	r2, s5
 801b636:	eef0 2a47 	vmov.f32	s5, s14
 801b63a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b63e:	ee13 2a10 	vmov	r2, s6
 801b642:	9311      	str	r3, [sp, #68]	; 0x44
 801b644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b646:	eeb0 3a67 	vmov.f32	s6, s15
 801b64a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b64e:	9312      	str	r3, [sp, #72]	; 0x48
 801b650:	9b00      	ldr	r3, [sp, #0]
 801b652:	9a03      	ldr	r2, [sp, #12]
 801b654:	3b01      	subs	r3, #1
 801b656:	9300      	str	r3, [sp, #0]
 801b658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b65a:	bf08      	it	eq
 801b65c:	4613      	moveq	r3, r2
 801b65e:	e72f      	b.n	801b4c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b660:	140f      	asrs	r7, r1, #16
 801b662:	d451      	bmi.n	801b708 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b664:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b668:	42bd      	cmp	r5, r7
 801b66a:	dd4d      	ble.n	801b708 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b66c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b670:	d44a      	bmi.n	801b708 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b672:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b676:	4560      	cmp	r0, ip
 801b678:	dd46      	ble.n	801b708 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b67a:	b22d      	sxth	r5, r5
 801b67c:	9802      	ldr	r0, [sp, #8]
 801b67e:	fb0c 7505 	mla	r5, ip, r5, r7
 801b682:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801b686:	f06f 0501 	mvn.w	r5, #1
 801b68a:	fb05 fb08 	mul.w	fp, r5, r8
 801b68e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b692:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b696:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b69a:	122f      	asrs	r7, r5, #8
 801b69c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b6a0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b6a4:	00ed      	lsls	r5, r5, #3
 801b6a6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b6aa:	fb17 f706 	smulbb	r7, r7, r6
 801b6ae:	b2ed      	uxtb	r5, r5
 801b6b0:	fb19 f906 	smulbb	r9, r9, r6
 801b6b4:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b6b8:	10c7      	asrs	r7, r0, #3
 801b6ba:	fb15 f506 	smulbb	r5, r5, r6
 801b6be:	00c0      	lsls	r0, r0, #3
 801b6c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b6c4:	fa1f fc8c 	uxth.w	ip, ip
 801b6c8:	b2c0      	uxtb	r0, r0
 801b6ca:	fb07 970a 	mla	r7, r7, sl, r9
 801b6ce:	fb00 500a 	mla	r0, r0, sl, r5
 801b6d2:	f10c 0501 	add.w	r5, ip, #1
 801b6d6:	b2bf      	uxth	r7, r7
 801b6d8:	b280      	uxth	r0, r0
 801b6da:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b6de:	f107 0901 	add.w	r9, r7, #1
 801b6e2:	1c45      	adds	r5, r0, #1
 801b6e4:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b6e8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b6ec:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b6f0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b6f4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b6f8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b6fc:	ea45 0c0c 	orr.w	ip, r5, ip
 801b700:	ea4c 0c09 	orr.w	ip, ip, r9
 801b704:	f824 c00b 	strh.w	ip, [r4, fp]
 801b708:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b70a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b70e:	4401      	add	r1, r0
 801b710:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b712:	4402      	add	r2, r0
 801b714:	e75e      	b.n	801b5d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b716:	b005      	add	sp, #20
 801b718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b71c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b720:	b085      	sub	sp, #20
 801b722:	4693      	mov	fp, r2
 801b724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b728:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b72a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b72c:	6870      	ldr	r0, [r6, #4]
 801b72e:	9101      	str	r1, [sp, #4]
 801b730:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b734:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801b738:	fb00 2404 	mla	r4, r0, r4, r2
 801b73c:	6832      	ldr	r2, [r6, #0]
 801b73e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b742:	682a      	ldr	r2, [r5, #0]
 801b744:	9202      	str	r2, [sp, #8]
 801b746:	9a01      	ldr	r2, [sp, #4]
 801b748:	2a00      	cmp	r2, #0
 801b74a:	dc03      	bgt.n	801b754 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b74c:	f1bb 0f00 	cmp.w	fp, #0
 801b750:	f340 809a 	ble.w	801b888 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b756:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b75a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b75e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b760:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b764:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b768:	2b00      	cmp	r3, #0
 801b76a:	dd0c      	ble.n	801b786 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b76c:	1406      	asrs	r6, r0, #16
 801b76e:	d405      	bmi.n	801b77c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b770:	454e      	cmp	r6, r9
 801b772:	da03      	bge.n	801b77c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b774:	1416      	asrs	r6, r2, #16
 801b776:	d401      	bmi.n	801b77c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b778:	4546      	cmp	r6, r8
 801b77a:	db05      	blt.n	801b788 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b77c:	4470      	add	r0, lr
 801b77e:	4462      	add	r2, ip
 801b780:	3b01      	subs	r3, #1
 801b782:	3402      	adds	r4, #2
 801b784:	e7f0      	b.n	801b768 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b786:	d00f      	beq.n	801b7a8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b788:	1e5e      	subs	r6, r3, #1
 801b78a:	fb0e 0706 	mla	r7, lr, r6, r0
 801b78e:	143f      	asrs	r7, r7, #16
 801b790:	d541      	bpl.n	801b816 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801b792:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b796:	4698      	mov	r8, r3
 801b798:	9603      	str	r6, [sp, #12]
 801b79a:	f1b8 0f00 	cmp.w	r8, #0
 801b79e:	dc56      	bgt.n	801b84e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801b7a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b7a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b7a8:	9b01      	ldr	r3, [sp, #4]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	dd6c      	ble.n	801b888 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b7ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b7b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b7b8:	eeb0 6a62 	vmov.f32	s12, s5
 801b7bc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b7c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b7c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b7c8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b7cc:	eeb0 6a43 	vmov.f32	s12, s6
 801b7d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b7d4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b7d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b7dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b7e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b7e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b7e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b7ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b7f0:	ee12 2a90 	vmov	r2, s5
 801b7f4:	eef0 2a47 	vmov.f32	s5, s14
 801b7f8:	fb92 fef3 	sdiv	lr, r2, r3
 801b7fc:	ee13 2a10 	vmov	r2, s6
 801b800:	eeb0 3a67 	vmov.f32	s6, s15
 801b804:	fb92 fcf3 	sdiv	ip, r2, r3
 801b808:	9b01      	ldr	r3, [sp, #4]
 801b80a:	3b01      	subs	r3, #1
 801b80c:	9301      	str	r3, [sp, #4]
 801b80e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b810:	bf08      	it	eq
 801b812:	465b      	moveq	r3, fp
 801b814:	e797      	b.n	801b746 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b816:	454f      	cmp	r7, r9
 801b818:	dabb      	bge.n	801b792 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b81a:	fb0c 2606 	mla	r6, ip, r6, r2
 801b81e:	1436      	asrs	r6, r6, #16
 801b820:	d4b7      	bmi.n	801b792 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b822:	4546      	cmp	r6, r8
 801b824:	dab5      	bge.n	801b792 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b826:	461e      	mov	r6, r3
 801b828:	46a0      	mov	r8, r4
 801b82a:	2e00      	cmp	r6, #0
 801b82c:	ddb8      	ble.n	801b7a0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b82e:	1417      	asrs	r7, r2, #16
 801b830:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b834:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b838:	9902      	ldr	r1, [sp, #8]
 801b83a:	4470      	add	r0, lr
 801b83c:	4462      	add	r2, ip
 801b83e:	fb0a 9707 	mla	r7, sl, r7, r9
 801b842:	3e01      	subs	r6, #1
 801b844:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b848:	f828 7b02 	strh.w	r7, [r8], #2
 801b84c:	e7ed      	b.n	801b82a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801b84e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b852:	d414      	bmi.n	801b87e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b854:	68ae      	ldr	r6, [r5, #8]
 801b856:	454e      	cmp	r6, r9
 801b858:	dd11      	ble.n	801b87e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b85a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b85e:	d40e      	bmi.n	801b87e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b860:	68ef      	ldr	r7, [r5, #12]
 801b862:	4557      	cmp	r7, sl
 801b864:	dd0b      	ble.n	801b87e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801b866:	b236      	sxth	r6, r6
 801b868:	f06f 0101 	mvn.w	r1, #1
 801b86c:	9f02      	ldr	r7, [sp, #8]
 801b86e:	fb0a 9606 	mla	r6, sl, r6, r9
 801b872:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b876:	fb01 f608 	mul.w	r6, r1, r8
 801b87a:	9903      	ldr	r1, [sp, #12]
 801b87c:	538f      	strh	r7, [r1, r6]
 801b87e:	4470      	add	r0, lr
 801b880:	4462      	add	r2, ip
 801b882:	f108 38ff 	add.w	r8, r8, #4294967295
 801b886:	e788      	b.n	801b79a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b888:	b005      	add	sp, #20
 801b88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b88e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b88e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b892:	b087      	sub	sp, #28
 801b894:	468b      	mov	fp, r1
 801b896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b89a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b89c:	9203      	str	r2, [sp, #12]
 801b89e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b8a2:	6841      	ldr	r1, [r0, #4]
 801b8a4:	9204      	str	r2, [sp, #16]
 801b8a6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b8aa:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b8ae:	fb01 2505 	mla	r5, r1, r5, r2
 801b8b2:	6802      	ldr	r2, [r0, #0]
 801b8b4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b8b8:	f8d9 2000 	ldr.w	r2, [r9]
 801b8bc:	9201      	str	r2, [sp, #4]
 801b8be:	f1bb 0f00 	cmp.w	fp, #0
 801b8c2:	dc03      	bgt.n	801b8cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b8c4:	9a03      	ldr	r2, [sp, #12]
 801b8c6:	2a00      	cmp	r2, #0
 801b8c8:	f340 8158 	ble.w	801bb7c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801b8cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b8ce:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b8d2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b8d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b8d8:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b8dc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	dd0e      	ble.n	801b902 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b8e4:	1402      	asrs	r2, r0, #16
 801b8e6:	d405      	bmi.n	801b8f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b8e8:	42ba      	cmp	r2, r7
 801b8ea:	da03      	bge.n	801b8f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b8ec:	140a      	asrs	r2, r1, #16
 801b8ee:	d401      	bmi.n	801b8f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b8f0:	42b2      	cmp	r2, r6
 801b8f2:	db07      	blt.n	801b904 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b8f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b8f6:	3b01      	subs	r3, #1
 801b8f8:	3502      	adds	r5, #2
 801b8fa:	4410      	add	r0, r2
 801b8fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b8fe:	4411      	add	r1, r2
 801b900:	e7ee      	b.n	801b8e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b902:	d017      	beq.n	801b934 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b904:	1e5a      	subs	r2, r3, #1
 801b906:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b908:	fb04 0402 	mla	r4, r4, r2, r0
 801b90c:	1424      	asrs	r4, r4, #16
 801b90e:	d409      	bmi.n	801b924 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b910:	42bc      	cmp	r4, r7
 801b912:	da07      	bge.n	801b924 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b914:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b916:	fb04 1202 	mla	r2, r4, r2, r1
 801b91a:	1412      	asrs	r2, r2, #16
 801b91c:	d402      	bmi.n	801b924 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b91e:	42b2      	cmp	r2, r6
 801b920:	f2c0 80bf 	blt.w	801baa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b924:	2700      	movs	r7, #0
 801b926:	19da      	adds	r2, r3, r7
 801b928:	2a00      	cmp	r2, #0
 801b92a:	dc3e      	bgt.n	801b9aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b92c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b930:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b934:	f1bb 0f00 	cmp.w	fp, #0
 801b938:	f340 8120 	ble.w	801bb7c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801b93c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b940:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b942:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b946:	f1bb 0b01 	subs.w	fp, fp, #1
 801b94a:	eeb0 6a62 	vmov.f32	s12, s5
 801b94e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b952:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b956:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b95a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b95e:	eeb0 6a43 	vmov.f32	s12, s6
 801b962:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b966:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b96a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b96e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b972:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b976:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b97a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b97e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b982:	ee12 2a90 	vmov	r2, s5
 801b986:	eef0 2a47 	vmov.f32	s5, s14
 801b98a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b98e:	ee13 2a10 	vmov	r2, s6
 801b992:	9313      	str	r3, [sp, #76]	; 0x4c
 801b994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b996:	eeb0 3a67 	vmov.f32	s6, s15
 801b99a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b99e:	9a03      	ldr	r2, [sp, #12]
 801b9a0:	9314      	str	r3, [sp, #80]	; 0x50
 801b9a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b9a4:	bf08      	it	eq
 801b9a6:	4613      	moveq	r3, r2
 801b9a8:	e789      	b.n	801b8be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b9aa:	1406      	asrs	r6, r0, #16
 801b9ac:	d42d      	bmi.n	801ba0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b9ae:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801b9b2:	42b4      	cmp	r4, r6
 801b9b4:	dd29      	ble.n	801ba0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b9b6:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801b9ba:	d426      	bmi.n	801ba0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b9bc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b9c0:	4562      	cmp	r2, ip
 801b9c2:	dd22      	ble.n	801ba0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b9c4:	b224      	sxth	r4, r4
 801b9c6:	9a01      	ldr	r2, [sp, #4]
 801b9c8:	fb0c 6404 	mla	r4, ip, r4, r6
 801b9cc:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801b9d0:	0e22      	lsrs	r2, r4, #24
 801b9d2:	d01a      	beq.n	801ba0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b9d4:	9e04      	ldr	r6, [sp, #16]
 801b9d6:	4372      	muls	r2, r6
 801b9d8:	1c56      	adds	r6, r2, #1
 801b9da:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b9de:	0a26      	lsrs	r6, r4, #8
 801b9e0:	1212      	asrs	r2, r2, #8
 801b9e2:	9605      	str	r6, [sp, #20]
 801b9e4:	2aff      	cmp	r2, #255	; 0xff
 801b9e6:	d116      	bne.n	801ba16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b9e8:	f06f 0201 	mvn.w	r2, #1
 801b9ec:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b9f0:	fb02 fc07 	mul.w	ip, r2, r7
 801b9f4:	0962      	lsrs	r2, r4, #5
 801b9f6:	f026 0607 	bic.w	r6, r6, #7
 801b9fa:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b9fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ba02:	4316      	orrs	r6, r2
 801ba04:	4326      	orrs	r6, r4
 801ba06:	f825 600c 	strh.w	r6, [r5, ip]
 801ba0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba0c:	3f01      	subs	r7, #1
 801ba0e:	4410      	add	r0, r2
 801ba10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba12:	4411      	add	r1, r2
 801ba14:	e787      	b.n	801b926 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ba16:	f06f 0601 	mvn.w	r6, #1
 801ba1a:	fa1f fa82 	uxth.w	sl, r2
 801ba1e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801ba22:	43d2      	mvns	r2, r2
 801ba24:	437e      	muls	r6, r7
 801ba26:	b2e4      	uxtb	r4, r4
 801ba28:	fb1c fc0a 	smulbb	ip, ip, sl
 801ba2c:	b2d2      	uxtb	r2, r2
 801ba2e:	f835 8006 	ldrh.w	r8, [r5, r6]
 801ba32:	fb14 f40a 	smulbb	r4, r4, sl
 801ba36:	9602      	str	r6, [sp, #8]
 801ba38:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801ba3c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801ba40:	fb16 f60a 	smulbb	r6, r6, sl
 801ba44:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ba48:	fb0e ce02 	mla	lr, lr, r2, ip
 801ba4c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801ba50:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ba54:	fa1f fe8e 	uxth.w	lr, lr
 801ba58:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ba5c:	fa5f f888 	uxtb.w	r8, r8
 801ba60:	fb0c 6c02 	mla	ip, ip, r2, r6
 801ba64:	fb08 4402 	mla	r4, r8, r2, r4
 801ba68:	f10e 0201 	add.w	r2, lr, #1
 801ba6c:	fa1f fc8c 	uxth.w	ip, ip
 801ba70:	b2a4      	uxth	r4, r4
 801ba72:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ba76:	9a02      	ldr	r2, [sp, #8]
 801ba78:	1c66      	adds	r6, r4, #1
 801ba7a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ba7e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ba82:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ba86:	ea46 0e0e 	orr.w	lr, r6, lr
 801ba8a:	f10c 0601 	add.w	r6, ip, #1
 801ba8e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801ba92:	0976      	lsrs	r6, r6, #5
 801ba94:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ba98:	ea4e 0e06 	orr.w	lr, lr, r6
 801ba9c:	f825 e002 	strh.w	lr, [r5, r2]
 801baa0:	e7b3      	b.n	801ba0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801baa2:	f04f 0800 	mov.w	r8, #0
 801baa6:	eba3 0208 	sub.w	r2, r3, r8
 801baaa:	2a00      	cmp	r2, #0
 801baac:	f77f af3e 	ble.w	801b92c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801bab0:	1404      	asrs	r4, r0, #16
 801bab2:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801bab6:	140a      	asrs	r2, r1, #16
 801bab8:	fb06 4202 	mla	r2, r6, r2, r4
 801babc:	9c01      	ldr	r4, [sp, #4]
 801babe:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801bac2:	0e22      	lsrs	r2, r4, #24
 801bac4:	d015      	beq.n	801baf2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801bac6:	9e04      	ldr	r6, [sp, #16]
 801bac8:	4372      	muls	r2, r6
 801baca:	1c56      	adds	r6, r2, #1
 801bacc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bad0:	0a26      	lsrs	r6, r4, #8
 801bad2:	1212      	asrs	r2, r2, #8
 801bad4:	2aff      	cmp	r2, #255	; 0xff
 801bad6:	d113      	bne.n	801bb00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801bad8:	0962      	lsrs	r2, r4, #5
 801bada:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801bade:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801bae2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bae6:	f026 0607 	bic.w	r6, r6, #7
 801baea:	4316      	orrs	r6, r2
 801baec:	4326      	orrs	r6, r4
 801baee:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801baf2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801baf4:	f108 0801 	add.w	r8, r8, #1
 801baf8:	4410      	add	r0, r2
 801bafa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bafc:	4411      	add	r1, r2
 801bafe:	e7d2      	b.n	801baa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801bb00:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801bb04:	fa1f fa82 	uxth.w	sl, r2
 801bb08:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801bb0c:	43d2      	mvns	r2, r2
 801bb0e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bb12:	fb17 f70a 	smulbb	r7, r7, sl
 801bb16:	b2d2      	uxtb	r2, r2
 801bb18:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bb1c:	b2e4      	uxtb	r4, r4
 801bb1e:	b2f6      	uxtb	r6, r6
 801bb20:	fb0c 7c02 	mla	ip, ip, r2, r7
 801bb24:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bb28:	fb14 f40a 	smulbb	r4, r4, sl
 801bb2c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bb30:	fa1f fc8c 	uxth.w	ip, ip
 801bb34:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bb38:	fb16 f60a 	smulbb	r6, r6, sl
 801bb3c:	fa5f fe8e 	uxtb.w	lr, lr
 801bb40:	fb0e 4402 	mla	r4, lr, r2, r4
 801bb44:	fb07 6702 	mla	r7, r7, r2, r6
 801bb48:	f10c 0201 	add.w	r2, ip, #1
 801bb4c:	b2a4      	uxth	r4, r4
 801bb4e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801bb52:	1c66      	adds	r6, r4, #1
 801bb54:	b2bf      	uxth	r7, r7
 801bb56:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bb5a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801bb5e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bb62:	ea46 0c0c 	orr.w	ip, r6, ip
 801bb66:	1c7e      	adds	r6, r7, #1
 801bb68:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801bb6c:	0976      	lsrs	r6, r6, #5
 801bb6e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bb72:	ea4c 0c06 	orr.w	ip, ip, r6
 801bb76:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801bb7a:	e7ba      	b.n	801baf2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801bb7c:	b007      	add	sp, #28
 801bb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801bb84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb88:	b085      	sub	sp, #20
 801bb8a:	468b      	mov	fp, r1
 801bb8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb90:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bb92:	9203      	str	r2, [sp, #12]
 801bb94:	6841      	ldr	r1, [r0, #4]
 801bb96:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801bb9a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bb9e:	fb01 2404 	mla	r4, r1, r4, r2
 801bba2:	6802      	ldr	r2, [r0, #0]
 801bba4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bba8:	f8d8 2000 	ldr.w	r2, [r8]
 801bbac:	9201      	str	r2, [sp, #4]
 801bbae:	f1bb 0f00 	cmp.w	fp, #0
 801bbb2:	dc03      	bgt.n	801bbbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801bbb4:	9a03      	ldr	r2, [sp, #12]
 801bbb6:	2a00      	cmp	r2, #0
 801bbb8:	f340 814f 	ble.w	801be5a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801bbbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bbbe:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801bbc2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bbc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bbc8:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801bbcc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	dd0e      	ble.n	801bbf2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bbd4:	1408      	asrs	r0, r1, #16
 801bbd6:	d405      	bmi.n	801bbe4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bbd8:	42b8      	cmp	r0, r7
 801bbda:	da03      	bge.n	801bbe4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bbdc:	1410      	asrs	r0, r2, #16
 801bbde:	d401      	bmi.n	801bbe4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bbe0:	42b0      	cmp	r0, r6
 801bbe2:	db07      	blt.n	801bbf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bbe4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bbe6:	3b01      	subs	r3, #1
 801bbe8:	3402      	adds	r4, #2
 801bbea:	4401      	add	r1, r0
 801bbec:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bbee:	4402      	add	r2, r0
 801bbf0:	e7ee      	b.n	801bbd0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801bbf2:	d017      	beq.n	801bc24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bbf4:	1e58      	subs	r0, r3, #1
 801bbf6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bbf8:	fb05 1500 	mla	r5, r5, r0, r1
 801bbfc:	142d      	asrs	r5, r5, #16
 801bbfe:	d409      	bmi.n	801bc14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bc00:	42bd      	cmp	r5, r7
 801bc02:	da07      	bge.n	801bc14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bc04:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bc06:	fb05 2000 	mla	r0, r5, r0, r2
 801bc0a:	1400      	asrs	r0, r0, #16
 801bc0c:	d402      	bmi.n	801bc14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bc0e:	42b0      	cmp	r0, r6
 801bc10:	f2c0 80ba 	blt.w	801bd88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bc14:	2600      	movs	r6, #0
 801bc16:	1998      	adds	r0, r3, r6
 801bc18:	2800      	cmp	r0, #0
 801bc1a:	dc3e      	bgt.n	801bc9a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bc1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc20:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bc24:	f1bb 0f00 	cmp.w	fp, #0
 801bc28:	f340 8117 	ble.w	801be5a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801bc2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc32:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bc36:	f1bb 0b01 	subs.w	fp, fp, #1
 801bc3a:	eeb0 6a62 	vmov.f32	s12, s5
 801bc3e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bc42:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bc4a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bc4e:	eeb0 6a43 	vmov.f32	s12, s6
 801bc52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bc56:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bc5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bc5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bc62:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bc66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bc6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bc6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bc72:	ee12 2a90 	vmov	r2, s5
 801bc76:	eef0 2a47 	vmov.f32	s5, s14
 801bc7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc7e:	ee13 2a10 	vmov	r2, s6
 801bc82:	9311      	str	r3, [sp, #68]	; 0x44
 801bc84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc86:	eeb0 3a67 	vmov.f32	s6, s15
 801bc8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc8e:	9a03      	ldr	r2, [sp, #12]
 801bc90:	9312      	str	r3, [sp, #72]	; 0x48
 801bc92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc94:	bf08      	it	eq
 801bc96:	4613      	moveq	r3, r2
 801bc98:	e789      	b.n	801bbae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801bc9a:	140f      	asrs	r7, r1, #16
 801bc9c:	d424      	bmi.n	801bce8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bc9e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801bca2:	42bd      	cmp	r5, r7
 801bca4:	dd20      	ble.n	801bce8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bca6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801bcaa:	d41d      	bmi.n	801bce8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bcac:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801bcb0:	4560      	cmp	r0, ip
 801bcb2:	dd19      	ble.n	801bce8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bcb4:	b22d      	sxth	r5, r5
 801bcb6:	9801      	ldr	r0, [sp, #4]
 801bcb8:	fb0c 7505 	mla	r5, ip, r5, r7
 801bcbc:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801bcc0:	0e07      	lsrs	r7, r0, #24
 801bcc2:	2fff      	cmp	r7, #255	; 0xff
 801bcc4:	d116      	bne.n	801bcf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bcc6:	f06f 0501 	mvn.w	r5, #1
 801bcca:	fb05 f706 	mul.w	r7, r5, r6
 801bcce:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801bcd2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801bcd6:	0945      	lsrs	r5, r0, #5
 801bcd8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801bcdc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bce0:	ea4c 0505 	orr.w	r5, ip, r5
 801bce4:	4305      	orrs	r5, r0
 801bce6:	53e5      	strh	r5, [r4, r7]
 801bce8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bcea:	3e01      	subs	r6, #1
 801bcec:	4401      	add	r1, r0
 801bcee:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bcf0:	4402      	add	r2, r0
 801bcf2:	e790      	b.n	801bc16 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bcf4:	b2fd      	uxtb	r5, r7
 801bcf6:	2f00      	cmp	r7, #0
 801bcf8:	d0f6      	beq.n	801bce8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bcfa:	f06f 0701 	mvn.w	r7, #1
 801bcfe:	fa1f f985 	uxth.w	r9, r5
 801bd02:	43ed      	mvns	r5, r5
 801bd04:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801bd08:	4377      	muls	r7, r6
 801bd0a:	fb1a fa09 	smulbb	sl, sl, r9
 801bd0e:	b2ed      	uxtb	r5, r5
 801bd10:	f834 e007 	ldrh.w	lr, [r4, r7]
 801bd14:	9702      	str	r7, [sp, #8]
 801bd16:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801bd1a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801bd1e:	fb17 f709 	smulbb	r7, r7, r9
 801bd22:	b2c0      	uxtb	r0, r0
 801bd24:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bd28:	fb10 f009 	smulbb	r0, r0, r9
 801bd2c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801bd30:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bd34:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bd38:	fa1f fc8c 	uxth.w	ip, ip
 801bd3c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bd40:	fa5f fe8e 	uxtb.w	lr, lr
 801bd44:	fb07 a705 	mla	r7, r7, r5, sl
 801bd48:	fb0e 0005 	mla	r0, lr, r5, r0
 801bd4c:	f10c 0501 	add.w	r5, ip, #1
 801bd50:	b2bf      	uxth	r7, r7
 801bd52:	b280      	uxth	r0, r0
 801bd54:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bd58:	f100 0a01 	add.w	sl, r0, #1
 801bd5c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bd60:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801bd64:	9802      	ldr	r0, [sp, #8]
 801bd66:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bd6a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801bd6e:	f107 0a01 	add.w	sl, r7, #1
 801bd72:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801bd76:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bd7a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bd7e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bd82:	f824 c000 	strh.w	ip, [r4, r0]
 801bd86:	e7af      	b.n	801bce8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bd88:	f04f 0e00 	mov.w	lr, #0
 801bd8c:	eba3 000e 	sub.w	r0, r3, lr
 801bd90:	2800      	cmp	r0, #0
 801bd92:	f77f af43 	ble.w	801bc1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bd96:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801bd9a:	140d      	asrs	r5, r1, #16
 801bd9c:	1410      	asrs	r0, r2, #16
 801bd9e:	fb06 5000 	mla	r0, r6, r0, r5
 801bda2:	9d01      	ldr	r5, [sp, #4]
 801bda4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801bda8:	0e2e      	lsrs	r6, r5, #24
 801bdaa:	2eff      	cmp	r6, #255	; 0xff
 801bdac:	d112      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801bdae:	482c      	ldr	r0, [pc, #176]	; (801be60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801bdb0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801bdb4:	0968      	lsrs	r0, r5, #5
 801bdb6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bdba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801bdbe:	4330      	orrs	r0, r6
 801bdc0:	4328      	orrs	r0, r5
 801bdc2:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801bdc6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bdc8:	f10e 0e01 	add.w	lr, lr, #1
 801bdcc:	4401      	add	r1, r0
 801bdce:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bdd0:	4402      	add	r2, r0
 801bdd2:	e7db      	b.n	801bd8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bdd4:	b2f0      	uxtb	r0, r6
 801bdd6:	2e00      	cmp	r6, #0
 801bdd8:	d0f5      	beq.n	801bdc6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801bdda:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801bdde:	fa1f f980 	uxth.w	r9, r0
 801bde2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801bde6:	43c0      	mvns	r0, r0
 801bde8:	ea4f 272c 	mov.w	r7, ip, asr #8
 801bdec:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801bdf0:	fb16 f609 	smulbb	r6, r6, r9
 801bdf4:	b2c0      	uxtb	r0, r0
 801bdf6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bdfa:	b2ed      	uxtb	r5, r5
 801bdfc:	fb1a fa09 	smulbb	sl, sl, r9
 801be00:	fb07 6700 	mla	r7, r7, r0, r6
 801be04:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801be08:	fb15 f509 	smulbb	r5, r5, r9
 801be0c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801be10:	b2bf      	uxth	r7, r7
 801be12:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801be16:	fa5f fc8c 	uxtb.w	ip, ip
 801be1a:	fb06 a600 	mla	r6, r6, r0, sl
 801be1e:	fb0c 5500 	mla	r5, ip, r0, r5
 801be22:	1c78      	adds	r0, r7, #1
 801be24:	b2b6      	uxth	r6, r6
 801be26:	b2ad      	uxth	r5, r5
 801be28:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801be2c:	f105 0a01 	add.w	sl, r5, #1
 801be30:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801be34:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801be38:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801be3c:	ea4a 0707 	orr.w	r7, sl, r7
 801be40:	f106 0a01 	add.w	sl, r6, #1
 801be44:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801be48:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801be4c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801be50:	ea47 070a 	orr.w	r7, r7, sl
 801be54:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801be58:	e7b5      	b.n	801bdc6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801be5a:	b005      	add	sp, #20
 801be5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be60:	fffff800 	.word	0xfffff800

0801be64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be68:	b087      	sub	sp, #28
 801be6a:	468b      	mov	fp, r1
 801be6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801be70:	9815      	ldr	r0, [sp, #84]	; 0x54
 801be72:	9203      	str	r2, [sp, #12]
 801be74:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801be78:	6841      	ldr	r1, [r0, #4]
 801be7a:	9204      	str	r2, [sp, #16]
 801be7c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801be80:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801be84:	fb01 2404 	mla	r4, r1, r4, r2
 801be88:	6802      	ldr	r2, [r0, #0]
 801be8a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801be8e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801be92:	3201      	adds	r2, #1
 801be94:	f022 0201 	bic.w	r2, r2, #1
 801be98:	9200      	str	r2, [sp, #0]
 801be9a:	f8d9 2000 	ldr.w	r2, [r9]
 801be9e:	9201      	str	r2, [sp, #4]
 801bea0:	f1bb 0f00 	cmp.w	fp, #0
 801bea4:	dc03      	bgt.n	801beae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801bea6:	9a03      	ldr	r2, [sp, #12]
 801bea8:	2a00      	cmp	r2, #0
 801beaa:	f340 816a 	ble.w	801c182 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801beae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801beb0:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801beb4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801beb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801beba:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801bebe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	dd0e      	ble.n	801bee4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bec6:	1402      	asrs	r2, r0, #16
 801bec8:	d405      	bmi.n	801bed6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801beca:	42ba      	cmp	r2, r7
 801becc:	da03      	bge.n	801bed6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bece:	140a      	asrs	r2, r1, #16
 801bed0:	d401      	bmi.n	801bed6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bed2:	42b2      	cmp	r2, r6
 801bed4:	db07      	blt.n	801bee6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801bed6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bed8:	3b01      	subs	r3, #1
 801beda:	3402      	adds	r4, #2
 801bedc:	4410      	add	r0, r2
 801bede:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bee0:	4411      	add	r1, r2
 801bee2:	e7ee      	b.n	801bec2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801bee4:	d017      	beq.n	801bf16 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bee6:	1e5a      	subs	r2, r3, #1
 801bee8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801beea:	fb05 0502 	mla	r5, r5, r2, r0
 801beee:	142d      	asrs	r5, r5, #16
 801bef0:	d409      	bmi.n	801bf06 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bef2:	42bd      	cmp	r5, r7
 801bef4:	da07      	bge.n	801bf06 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bef6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bef8:	fb05 1202 	mla	r2, r5, r2, r1
 801befc:	1412      	asrs	r2, r2, #16
 801befe:	d402      	bmi.n	801bf06 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bf00:	42b2      	cmp	r2, r6
 801bf02:	f2c0 80c8 	blt.w	801c096 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801bf06:	2700      	movs	r7, #0
 801bf08:	19da      	adds	r2, r3, r7
 801bf0a:	2a00      	cmp	r2, #0
 801bf0c:	dc3e      	bgt.n	801bf8c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801bf0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf12:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bf16:	f1bb 0f00 	cmp.w	fp, #0
 801bf1a:	f340 8132 	ble.w	801c182 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801bf1e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bf24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf28:	f1bb 0b01 	subs.w	fp, fp, #1
 801bf2c:	eeb0 6a62 	vmov.f32	s12, s5
 801bf30:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bf34:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf3c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bf40:	eeb0 6a43 	vmov.f32	s12, s6
 801bf44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf48:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bf4c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf50:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf54:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf58:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bf5c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bf60:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bf64:	ee12 2a90 	vmov	r2, s5
 801bf68:	eef0 2a47 	vmov.f32	s5, s14
 801bf6c:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf70:	ee13 2a10 	vmov	r2, s6
 801bf74:	9313      	str	r3, [sp, #76]	; 0x4c
 801bf76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bf78:	eeb0 3a67 	vmov.f32	s6, s15
 801bf7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf80:	9a03      	ldr	r2, [sp, #12]
 801bf82:	9314      	str	r3, [sp, #80]	; 0x50
 801bf84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bf86:	bf08      	it	eq
 801bf88:	4613      	moveq	r3, r2
 801bf8a:	e789      	b.n	801bea0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bf8c:	1405      	asrs	r5, r0, #16
 801bf8e:	d436      	bmi.n	801bffe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bf90:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801bf94:	42aa      	cmp	r2, r5
 801bf96:	dd32      	ble.n	801bffe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bf98:	140e      	asrs	r6, r1, #16
 801bf9a:	d430      	bmi.n	801bffe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bf9c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801bfa0:	42b2      	cmp	r2, r6
 801bfa2:	dd2c      	ble.n	801bffe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bfa4:	9a00      	ldr	r2, [sp, #0]
 801bfa6:	fb06 5502 	mla	r5, r6, r2, r5
 801bfaa:	9e01      	ldr	r6, [sp, #4]
 801bfac:	086a      	lsrs	r2, r5, #1
 801bfae:	5cb2      	ldrb	r2, [r6, r2]
 801bfb0:	07ee      	lsls	r6, r5, #31
 801bfb2:	bf54      	ite	pl
 801bfb4:	f002 020f 	andpl.w	r2, r2, #15
 801bfb8:	1112      	asrmi	r2, r2, #4
 801bfba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bfbe:	b2d2      	uxtb	r2, r2
 801bfc0:	b1ea      	cbz	r2, 801bffe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801bfc2:	9d04      	ldr	r5, [sp, #16]
 801bfc4:	436a      	muls	r2, r5
 801bfc6:	1c55      	adds	r5, r2, #1
 801bfc8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801bfcc:	4d6e      	ldr	r5, [pc, #440]	; (801c188 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801bfce:	1212      	asrs	r2, r2, #8
 801bfd0:	682d      	ldr	r5, [r5, #0]
 801bfd2:	2aff      	cmp	r2, #255	; 0xff
 801bfd4:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801bfd8:	9605      	str	r6, [sp, #20]
 801bfda:	d116      	bne.n	801c00a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801bfdc:	f06f 0201 	mvn.w	r2, #1
 801bfe0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801bfe4:	fb02 fc07 	mul.w	ip, r2, r7
 801bfe8:	096a      	lsrs	r2, r5, #5
 801bfea:	f026 0607 	bic.w	r6, r6, #7
 801bfee:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bff2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bff6:	4316      	orrs	r6, r2
 801bff8:	432e      	orrs	r6, r5
 801bffa:	f824 600c 	strh.w	r6, [r4, ip]
 801bffe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c000:	3f01      	subs	r7, #1
 801c002:	4410      	add	r0, r2
 801c004:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c006:	4411      	add	r1, r2
 801c008:	e77e      	b.n	801bf08 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c00a:	f06f 0601 	mvn.w	r6, #1
 801c00e:	fa1f fa82 	uxth.w	sl, r2
 801c012:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801c016:	43d2      	mvns	r2, r2
 801c018:	437e      	muls	r6, r7
 801c01a:	b2ed      	uxtb	r5, r5
 801c01c:	fb1c fc0a 	smulbb	ip, ip, sl
 801c020:	b2d2      	uxtb	r2, r2
 801c022:	f834 8006 	ldrh.w	r8, [r4, r6]
 801c026:	fb15 f50a 	smulbb	r5, r5, sl
 801c02a:	9602      	str	r6, [sp, #8]
 801c02c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801c030:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801c034:	fb16 f60a 	smulbb	r6, r6, sl
 801c038:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c03c:	fb0e ce02 	mla	lr, lr, r2, ip
 801c040:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801c044:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c048:	fa1f fe8e 	uxth.w	lr, lr
 801c04c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801c050:	fa5f f888 	uxtb.w	r8, r8
 801c054:	fb0c 6c02 	mla	ip, ip, r2, r6
 801c058:	fb08 5502 	mla	r5, r8, r2, r5
 801c05c:	f10e 0201 	add.w	r2, lr, #1
 801c060:	fa1f fc8c 	uxth.w	ip, ip
 801c064:	b2ad      	uxth	r5, r5
 801c066:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c06a:	9a02      	ldr	r2, [sp, #8]
 801c06c:	1c6e      	adds	r6, r5, #1
 801c06e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801c072:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801c076:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c07a:	ea46 0e0e 	orr.w	lr, r6, lr
 801c07e:	f10c 0601 	add.w	r6, ip, #1
 801c082:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801c086:	0976      	lsrs	r6, r6, #5
 801c088:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c08c:	ea4e 0e06 	orr.w	lr, lr, r6
 801c090:	f824 e002 	strh.w	lr, [r4, r2]
 801c094:	e7b3      	b.n	801bffe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c096:	f04f 0800 	mov.w	r8, #0
 801c09a:	eba3 0208 	sub.w	r2, r3, r8
 801c09e:	2a00      	cmp	r2, #0
 801c0a0:	f77f af35 	ble.w	801bf0e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801c0a4:	1402      	asrs	r2, r0, #16
 801c0a6:	9e00      	ldr	r6, [sp, #0]
 801c0a8:	140d      	asrs	r5, r1, #16
 801c0aa:	fb06 2505 	mla	r5, r6, r5, r2
 801c0ae:	9e01      	ldr	r6, [sp, #4]
 801c0b0:	086a      	lsrs	r2, r5, #1
 801c0b2:	07ed      	lsls	r5, r5, #31
 801c0b4:	5cb2      	ldrb	r2, [r6, r2]
 801c0b6:	bf54      	ite	pl
 801c0b8:	f002 020f 	andpl.w	r2, r2, #15
 801c0bc:	1112      	asrmi	r2, r2, #4
 801c0be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c0c2:	b2d2      	uxtb	r2, r2
 801c0c4:	b1c2      	cbz	r2, 801c0f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c0c6:	9d04      	ldr	r5, [sp, #16]
 801c0c8:	436a      	muls	r2, r5
 801c0ca:	1c55      	adds	r5, r2, #1
 801c0cc:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801c0d0:	4d2d      	ldr	r5, [pc, #180]	; (801c188 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801c0d2:	1212      	asrs	r2, r2, #8
 801c0d4:	682e      	ldr	r6, [r5, #0]
 801c0d6:	2aff      	cmp	r2, #255	; 0xff
 801c0d8:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801c0dc:	d113      	bne.n	801c106 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c0de:	0972      	lsrs	r2, r6, #5
 801c0e0:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801c0e4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c0e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c0ec:	f025 0507 	bic.w	r5, r5, #7
 801c0f0:	4315      	orrs	r5, r2
 801c0f2:	4335      	orrs	r5, r6
 801c0f4:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801c0f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c0fa:	f108 0801 	add.w	r8, r8, #1
 801c0fe:	4410      	add	r0, r2
 801c100:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c102:	4411      	add	r1, r2
 801c104:	e7c9      	b.n	801c09a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801c106:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801c10a:	fa1f fa82 	uxth.w	sl, r2
 801c10e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801c112:	43d2      	mvns	r2, r2
 801c114:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c118:	fb17 f70a 	smulbb	r7, r7, sl
 801c11c:	b2d2      	uxtb	r2, r2
 801c11e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c122:	b2f6      	uxtb	r6, r6
 801c124:	b2ed      	uxtb	r5, r5
 801c126:	fb0c 7c02 	mla	ip, ip, r2, r7
 801c12a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c12e:	fb16 f60a 	smulbb	r6, r6, sl
 801c132:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c136:	fa1f fc8c 	uxth.w	ip, ip
 801c13a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c13e:	fb15 f50a 	smulbb	r5, r5, sl
 801c142:	fa5f fe8e 	uxtb.w	lr, lr
 801c146:	fb0e 6602 	mla	r6, lr, r2, r6
 801c14a:	fb07 5702 	mla	r7, r7, r2, r5
 801c14e:	f10c 0201 	add.w	r2, ip, #1
 801c152:	b2b6      	uxth	r6, r6
 801c154:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c158:	1c75      	adds	r5, r6, #1
 801c15a:	b2bf      	uxth	r7, r7
 801c15c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c160:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801c164:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c168:	ea45 0c0c 	orr.w	ip, r5, ip
 801c16c:	1c7d      	adds	r5, r7, #1
 801c16e:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801c172:	096d      	lsrs	r5, r5, #5
 801c174:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c178:	ea4c 0c05 	orr.w	ip, ip, r5
 801c17c:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801c180:	e7ba      	b.n	801c0f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c182:	b007      	add	sp, #28
 801c184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c188:	2400aef4 	.word	0x2400aef4

0801c18c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c190:	b087      	sub	sp, #28
 801c192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c196:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801c4a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801c19a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c19c:	9101      	str	r1, [sp, #4]
 801c19e:	9205      	str	r2, [sp, #20]
 801c1a0:	6841      	ldr	r1, [r0, #4]
 801c1a2:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801c1a6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c1aa:	fb01 2404 	mla	r4, r1, r4, r2
 801c1ae:	6802      	ldr	r2, [r0, #0]
 801c1b0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c1b4:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c1b8:	3201      	adds	r2, #1
 801c1ba:	f022 0201 	bic.w	r2, r2, #1
 801c1be:	9202      	str	r2, [sp, #8]
 801c1c0:	f8db 2000 	ldr.w	r2, [fp]
 801c1c4:	9203      	str	r2, [sp, #12]
 801c1c6:	9a01      	ldr	r2, [sp, #4]
 801c1c8:	2a00      	cmp	r2, #0
 801c1ca:	dc03      	bgt.n	801c1d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c1cc:	9a05      	ldr	r2, [sp, #20]
 801c1ce:	2a00      	cmp	r2, #0
 801c1d0:	f340 8162 	ble.w	801c498 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c1d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c1d6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801c1da:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c1de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c1e0:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801c1e4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	dd0e      	ble.n	801c20a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c1ec:	1402      	asrs	r2, r0, #16
 801c1ee:	d405      	bmi.n	801c1fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c1f0:	42ba      	cmp	r2, r7
 801c1f2:	da03      	bge.n	801c1fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c1f4:	140a      	asrs	r2, r1, #16
 801c1f6:	d401      	bmi.n	801c1fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c1f8:	42b2      	cmp	r2, r6
 801c1fa:	db07      	blt.n	801c20c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c1fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c1fe:	3b01      	subs	r3, #1
 801c200:	3402      	adds	r4, #2
 801c202:	4410      	add	r0, r2
 801c204:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c206:	4411      	add	r1, r2
 801c208:	e7ee      	b.n	801c1e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c20a:	d017      	beq.n	801c23c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c20c:	1e5a      	subs	r2, r3, #1
 801c20e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c210:	fb05 0502 	mla	r5, r5, r2, r0
 801c214:	142d      	asrs	r5, r5, #16
 801c216:	d409      	bmi.n	801c22c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c218:	42bd      	cmp	r5, r7
 801c21a:	da07      	bge.n	801c22c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c21c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c21e:	fb05 1202 	mla	r2, r5, r2, r1
 801c222:	1412      	asrs	r2, r2, #16
 801c224:	d402      	bmi.n	801c22c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c226:	42b2      	cmp	r2, r6
 801c228:	f2c0 80c3 	blt.w	801c3b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801c22c:	2500      	movs	r5, #0
 801c22e:	195a      	adds	r2, r3, r5
 801c230:	2a00      	cmp	r2, #0
 801c232:	dc3f      	bgt.n	801c2b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c234:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c238:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c23c:	9b01      	ldr	r3, [sp, #4]
 801c23e:	2b00      	cmp	r3, #0
 801c240:	f340 812a 	ble.w	801c498 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c244:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c248:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c24a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c24e:	eeb0 6a62 	vmov.f32	s12, s5
 801c252:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c256:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c25a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c25e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c262:	eeb0 6a43 	vmov.f32	s12, s6
 801c266:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c26a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c26e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c272:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c276:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c27a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c27e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c282:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c286:	ee12 2a90 	vmov	r2, s5
 801c28a:	eef0 2a47 	vmov.f32	s5, s14
 801c28e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c292:	ee13 2a10 	vmov	r2, s6
 801c296:	9313      	str	r3, [sp, #76]	; 0x4c
 801c298:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c29a:	eeb0 3a67 	vmov.f32	s6, s15
 801c29e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2a2:	9314      	str	r3, [sp, #80]	; 0x50
 801c2a4:	9b01      	ldr	r3, [sp, #4]
 801c2a6:	9a05      	ldr	r2, [sp, #20]
 801c2a8:	3b01      	subs	r3, #1
 801c2aa:	9301      	str	r3, [sp, #4]
 801c2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c2ae:	bf08      	it	eq
 801c2b0:	4613      	moveq	r3, r2
 801c2b2:	e788      	b.n	801c1c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c2b4:	1406      	asrs	r6, r0, #16
 801c2b6:	d42c      	bmi.n	801c312 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c2b8:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c2bc:	42b2      	cmp	r2, r6
 801c2be:	dd28      	ble.n	801c312 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c2c0:	140f      	asrs	r7, r1, #16
 801c2c2:	d426      	bmi.n	801c312 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c2c4:	f8db 200c 	ldr.w	r2, [fp, #12]
 801c2c8:	42ba      	cmp	r2, r7
 801c2ca:	dd22      	ble.n	801c312 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c2cc:	9a02      	ldr	r2, [sp, #8]
 801c2ce:	fb07 6602 	mla	r6, r7, r2, r6
 801c2d2:	9f03      	ldr	r7, [sp, #12]
 801c2d4:	0872      	lsrs	r2, r6, #1
 801c2d6:	07f6      	lsls	r6, r6, #31
 801c2d8:	5cba      	ldrb	r2, [r7, r2]
 801c2da:	bf54      	ite	pl
 801c2dc:	f002 020f 	andpl.w	r2, r2, #15
 801c2e0:	1112      	asrmi	r2, r2, #4
 801c2e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c2e6:	b2d2      	uxtb	r2, r2
 801c2e8:	2aff      	cmp	r2, #255	; 0xff
 801c2ea:	d118      	bne.n	801c31e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c2ec:	f06f 0601 	mvn.w	r6, #1
 801c2f0:	f8d8 2000 	ldr.w	r2, [r8]
 801c2f4:	fb06 f705 	mul.w	r7, r6, r5
 801c2f8:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801c2fc:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801c300:	0956      	lsrs	r6, r2, #5
 801c302:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c306:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c30a:	ea4c 0606 	orr.w	r6, ip, r6
 801c30e:	4316      	orrs	r6, r2
 801c310:	53e6      	strh	r6, [r4, r7]
 801c312:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c314:	3d01      	subs	r5, #1
 801c316:	4410      	add	r0, r2
 801c318:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c31a:	4411      	add	r1, r2
 801c31c:	e787      	b.n	801c22e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c31e:	2a00      	cmp	r2, #0
 801c320:	d0f7      	beq.n	801c312 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c322:	f06f 0601 	mvn.w	r6, #1
 801c326:	f8d8 c000 	ldr.w	ip, [r8]
 801c32a:	fa1f f982 	uxth.w	r9, r2
 801c32e:	43d2      	mvns	r2, r2
 801c330:	436e      	muls	r6, r5
 801c332:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801c336:	b2d2      	uxtb	r2, r2
 801c338:	f834 e006 	ldrh.w	lr, [r4, r6]
 801c33c:	fb1a fa09 	smulbb	sl, sl, r9
 801c340:	9604      	str	r6, [sp, #16]
 801c342:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801c346:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c34a:	fb16 f609 	smulbb	r6, r6, r9
 801c34e:	fa5f fc8c 	uxtb.w	ip, ip
 801c352:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c356:	fb1c fc09 	smulbb	ip, ip, r9
 801c35a:	fb07 6702 	mla	r7, r7, r2, r6
 801c35e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c362:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c366:	b2bf      	uxth	r7, r7
 801c368:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c36c:	fa5f fe8e 	uxtb.w	lr, lr
 801c370:	fb06 a602 	mla	r6, r6, r2, sl
 801c374:	fb0e cc02 	mla	ip, lr, r2, ip
 801c378:	1c7a      	adds	r2, r7, #1
 801c37a:	b2b6      	uxth	r6, r6
 801c37c:	fa1f fc8c 	uxth.w	ip, ip
 801c380:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c384:	9a04      	ldr	r2, [sp, #16]
 801c386:	f10c 0a01 	add.w	sl, ip, #1
 801c38a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c38e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801c392:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c396:	ea4a 0707 	orr.w	r7, sl, r7
 801c39a:	f106 0a01 	add.w	sl, r6, #1
 801c39e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c3a2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c3a6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c3aa:	ea47 070a 	orr.w	r7, r7, sl
 801c3ae:	52a7      	strh	r7, [r4, r2]
 801c3b0:	e7af      	b.n	801c312 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c3b2:	f04f 0e00 	mov.w	lr, #0
 801c3b6:	eba3 020e 	sub.w	r2, r3, lr
 801c3ba:	2a00      	cmp	r2, #0
 801c3bc:	f77f af3a 	ble.w	801c234 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c3c0:	1402      	asrs	r2, r0, #16
 801c3c2:	9e02      	ldr	r6, [sp, #8]
 801c3c4:	140d      	asrs	r5, r1, #16
 801c3c6:	fb06 2505 	mla	r5, r6, r5, r2
 801c3ca:	9e03      	ldr	r6, [sp, #12]
 801c3cc:	086a      	lsrs	r2, r5, #1
 801c3ce:	07ed      	lsls	r5, r5, #31
 801c3d0:	5cb2      	ldrb	r2, [r6, r2]
 801c3d2:	bf54      	ite	pl
 801c3d4:	f002 020f 	andpl.w	r2, r2, #15
 801c3d8:	1112      	asrmi	r2, r2, #4
 801c3da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c3de:	b2d2      	uxtb	r2, r2
 801c3e0:	2aff      	cmp	r2, #255	; 0xff
 801c3e2:	d115      	bne.n	801c410 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c3e4:	f8d8 5000 	ldr.w	r5, [r8]
 801c3e8:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801c3ec:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801c3f0:	096a      	lsrs	r2, r5, #5
 801c3f2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c3f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c3fa:	4332      	orrs	r2, r6
 801c3fc:	432a      	orrs	r2, r5
 801c3fe:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801c402:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c404:	f10e 0e01 	add.w	lr, lr, #1
 801c408:	4410      	add	r0, r2
 801c40a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c40c:	4411      	add	r1, r2
 801c40e:	e7d2      	b.n	801c3b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c410:	2a00      	cmp	r2, #0
 801c412:	d0f6      	beq.n	801c402 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c414:	f8d8 7000 	ldr.w	r7, [r8]
 801c418:	fa1f f982 	uxth.w	r9, r2
 801c41c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801c420:	43d2      	mvns	r2, r2
 801c422:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801c426:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c42a:	ea4f 262c 	mov.w	r6, ip, asr #8
 801c42e:	fb15 f509 	smulbb	r5, r5, r9
 801c432:	b2d2      	uxtb	r2, r2
 801c434:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c438:	b2ff      	uxtb	r7, r7
 801c43a:	fb1a fa09 	smulbb	sl, sl, r9
 801c43e:	fb06 5602 	mla	r6, r6, r2, r5
 801c442:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c446:	fb17 f709 	smulbb	r7, r7, r9
 801c44a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c44e:	b2b6      	uxth	r6, r6
 801c450:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c454:	fa5f fc8c 	uxtb.w	ip, ip
 801c458:	fb05 a502 	mla	r5, r5, r2, sl
 801c45c:	fb0c 7702 	mla	r7, ip, r2, r7
 801c460:	1c72      	adds	r2, r6, #1
 801c462:	b2ad      	uxth	r5, r5
 801c464:	b2bf      	uxth	r7, r7
 801c466:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801c46a:	f107 0a01 	add.w	sl, r7, #1
 801c46e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c472:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c476:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c47a:	ea4a 0606 	orr.w	r6, sl, r6
 801c47e:	f105 0a01 	add.w	sl, r5, #1
 801c482:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c486:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c48a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c48e:	ea46 060a 	orr.w	r6, r6, sl
 801c492:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801c496:	e7b4      	b.n	801c402 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c498:	b007      	add	sp, #28
 801c49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c49e:	bf00      	nop
 801c4a0:	2400aef4 	.word	0x2400aef4

0801c4a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c4a4:	4770      	bx	lr

0801c4a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c4a6:	4770      	bx	lr

0801c4a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c4a8:	4770      	bx	lr

0801c4aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c4aa:	4770      	bx	lr

0801c4ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c4ac:	4770      	bx	lr

0801c4ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c4ae:	4770      	bx	lr

0801c4b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c4b0:	4770      	bx	lr

0801c4b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c4b2:	4770      	bx	lr

0801c4b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c4b4:	4770      	bx	lr

0801c4b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c4b6:	4770      	bx	lr

0801c4b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c4b8:	4770      	bx	lr

0801c4ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c4ba:	4770      	bx	lr

0801c4bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c4bc:	4770      	bx	lr

0801c4be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c4be:	4770      	bx	lr

0801c4c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c4c0:	4770      	bx	lr

0801c4c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c4c2:	4770      	bx	lr

0801c4c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c4c4:	4770      	bx	lr

0801c4c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c4c6:	4770      	bx	lr

0801c4c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c4c8:	4770      	bx	lr

0801c4ca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c4ca:	4770      	bx	lr

0801c4cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c4cc:	4770      	bx	lr

0801c4ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c4ce:	4770      	bx	lr

0801c4d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c4d0:	4770      	bx	lr

0801c4d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c4d2:	4770      	bx	lr

0801c4d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c4d4:	4770      	bx	lr

0801c4d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c4d6:	4770      	bx	lr

0801c4d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c4d8:	4770      	bx	lr

0801c4da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c4da:	4770      	bx	lr

0801c4dc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801c4dc:	b508      	push	{r3, lr}
 801c4de:	4b06      	ldr	r3, [pc, #24]	; (801c4f8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801c4e0:	8818      	ldrh	r0, [r3, #0]
 801c4e2:	b928      	cbnz	r0, 801c4f0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801c4e4:	4b05      	ldr	r3, [pc, #20]	; (801c4fc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801c4e6:	2150      	movs	r1, #80	; 0x50
 801c4e8:	4a05      	ldr	r2, [pc, #20]	; (801c500 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801c4ea:	4806      	ldr	r0, [pc, #24]	; (801c504 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801c4ec:	f009 fbd4 	bl	8025c98 <__assert_func>
 801c4f0:	0040      	lsls	r0, r0, #1
 801c4f2:	b280      	uxth	r0, r0
 801c4f4:	bd08      	pop	{r3, pc}
 801c4f6:	bf00      	nop
 801c4f8:	2400aee6 	.word	0x2400aee6
 801c4fc:	0802a233 	.word	0x0802a233
 801c500:	0802a82c 	.word	0x0802a82c
 801c504:	0802a275 	.word	0x0802a275

0801c508 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c50c:	b08b      	sub	sp, #44	; 0x2c
 801c50e:	460f      	mov	r7, r1
 801c510:	4616      	mov	r6, r2
 801c512:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801c516:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801c51a:	f1bb 0f00 	cmp.w	fp, #0
 801c51e:	d049      	beq.n	801c5b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c520:	6810      	ldr	r0, [r2, #0]
 801c522:	ad06      	add	r5, sp, #24
 801c524:	6851      	ldr	r1, [r2, #4]
 801c526:	c503      	stmia	r5!, {r0, r1}
 801c528:	6818      	ldr	r0, [r3, #0]
 801c52a:	ad08      	add	r5, sp, #32
 801c52c:	6859      	ldr	r1, [r3, #4]
 801c52e:	c503      	stmia	r5!, {r0, r1}
 801c530:	a806      	add	r0, sp, #24
 801c532:	f7fa fd13 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c536:	4631      	mov	r1, r6
 801c538:	a808      	add	r0, sp, #32
 801c53a:	f7fa fd37 	bl	8016fac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c53e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c542:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c546:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c54a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c54e:	fb16 2103 	smlabb	r1, r6, r3, r2
 801c552:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801c556:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801c55a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c55e:	4f5f      	ldr	r7, [pc, #380]	; (801c6dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c560:	440a      	add	r2, r1
 801c562:	6838      	ldr	r0, [r7, #0]
 801c564:	46b9      	mov	r9, r7
 801c566:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c56a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c56e:	4413      	add	r3, r2
 801c570:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c574:	6803      	ldr	r3, [r0, #0]
 801c576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c578:	4798      	blx	r3
 801c57a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c57e:	d01c      	beq.n	801c5ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c580:	f010 0f04 	tst.w	r0, #4
 801c584:	d01d      	beq.n	801c5c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c586:	f8d9 0000 	ldr.w	r0, [r9]
 801c58a:	2700      	movs	r7, #0
 801c58c:	b2ad      	uxth	r5, r5
 801c58e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c592:	6801      	ldr	r1, [r0, #0]
 801c594:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c598:	f8cd b00c 	str.w	fp, [sp, #12]
 801c59c:	9501      	str	r5, [sp, #4]
 801c59e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801c5a2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801c5a6:	9402      	str	r4, [sp, #8]
 801c5a8:	fa1f f488 	uxth.w	r4, r8
 801c5ac:	9400      	str	r4, [sp, #0]
 801c5ae:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801c5b0:	4631      	mov	r1, r6
 801c5b2:	47a0      	blx	r4
 801c5b4:	b00b      	add	sp, #44	; 0x2c
 801c5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5ba:	b914      	cbnz	r4, 801c5c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801c5bc:	f010 0f01 	tst.w	r0, #1
 801c5c0:	e7e0      	b.n	801c584 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801c5c2:	f8d9 0000 	ldr.w	r0, [r9]
 801c5c6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801c5ca:	6803      	ldr	r3, [r0, #0]
 801c5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5ce:	4798      	blx	r3
 801c5d0:	4b43      	ldr	r3, [pc, #268]	; (801c6e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801c5d2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801c5d6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c5da:	881a      	ldrh	r2, [r3, #0]
 801c5dc:	469a      	mov	sl, r3
 801c5de:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c5e2:	fb05 f502 	mul.w	r5, r5, r2
 801c5e6:	fb02 1404 	mla	r4, r2, r4, r1
 801c5ea:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c5ee:	d059      	beq.n	801c6a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801c5f0:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801c5f4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c5f8:	fa1f f28b 	uxth.w	r2, fp
 801c5fc:	469e      	mov	lr, r3
 801c5fe:	fa1f f989 	uxth.w	r9, r9
 801c602:	42ac      	cmp	r4, r5
 801c604:	d264      	bcs.n	801c6d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c606:	eb04 0a07 	add.w	sl, r4, r7
 801c60a:	4554      	cmp	r4, sl
 801c60c:	d23d      	bcs.n	801c68a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801c60e:	8821      	ldrh	r1, [r4, #0]
 801c610:	f836 3b02 	ldrh.w	r3, [r6], #2
 801c614:	1208      	asrs	r0, r1, #8
 801c616:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c61a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c61e:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801c622:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c626:	00c9      	lsls	r1, r1, #3
 801c628:	fb10 f009 	smulbb	r0, r0, r9
 801c62c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c630:	b2c9      	uxtb	r1, r1
 801c632:	fb0c 0c02 	mla	ip, ip, r2, r0
 801c636:	10d8      	asrs	r0, r3, #3
 801c638:	fb1b fb09 	smulbb	fp, fp, r9
 801c63c:	00db      	lsls	r3, r3, #3
 801c63e:	fa1f fc8c 	uxth.w	ip, ip
 801c642:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c646:	fb11 f109 	smulbb	r1, r1, r9
 801c64a:	b2db      	uxtb	r3, r3
 801c64c:	fb00 b002 	mla	r0, r0, r2, fp
 801c650:	f10c 0b01 	add.w	fp, ip, #1
 801c654:	fb03 1302 	mla	r3, r3, r2, r1
 801c658:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c65c:	b29b      	uxth	r3, r3
 801c65e:	b280      	uxth	r0, r0
 801c660:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801c664:	f103 0c01 	add.w	ip, r3, #1
 801c668:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c66c:	1c43      	adds	r3, r0, #1
 801c66e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c672:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c676:	0940      	lsrs	r0, r0, #5
 801c678:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c67c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c680:	ea4c 0c00 	orr.w	ip, ip, r0
 801c684:	f824 cb02 	strh.w	ip, [r4], #2
 801c688:	e7bf      	b.n	801c60a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801c68a:	f8be 3000 	ldrh.w	r3, [lr]
 801c68e:	eba3 0308 	sub.w	r3, r3, r8
 801c692:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c696:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c69a:	eba3 0308 	sub.w	r3, r3, r8
 801c69e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c6a2:	e7ae      	b.n	801c602 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801c6a4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c6a8:	f8d9 0000 	ldr.w	r0, [r9]
 801c6ac:	42ac      	cmp	r4, r5
 801c6ae:	6803      	ldr	r3, [r0, #0]
 801c6b0:	d20e      	bcs.n	801c6d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801c6b2:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801c6b6:	4632      	mov	r2, r6
 801c6b8:	463b      	mov	r3, r7
 801c6ba:	4621      	mov	r1, r4
 801c6bc:	47c0      	blx	r8
 801c6be:	f8ba 3000 	ldrh.w	r3, [sl]
 801c6c2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c6c6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c6ca:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c6ce:	e7eb      	b.n	801c6a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801c6d0:	4b02      	ldr	r3, [pc, #8]	; (801c6dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801c6d2:	6818      	ldr	r0, [r3, #0]
 801c6d4:	6803      	ldr	r3, [r0, #0]
 801c6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6d8:	4798      	blx	r3
 801c6da:	e76b      	b.n	801c5b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c6dc:	2400aeec 	.word	0x2400aeec
 801c6e0:	2400aee6 	.word	0x2400aee6

0801c6e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c6e4:	b510      	push	{r4, lr}
 801c6e6:	4604      	mov	r4, r0
 801c6e8:	2104      	movs	r1, #4
 801c6ea:	f009 faa6 	bl	8025c3a <_ZdlPvj>
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	bd10      	pop	{r4, pc}

0801c6f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c6f2:	b510      	push	{r4, lr}
 801c6f4:	4604      	mov	r4, r0
 801c6f6:	2104      	movs	r1, #4
 801c6f8:	f009 fa9f 	bl	8025c3a <_ZdlPvj>
 801c6fc:	4620      	mov	r0, r4
 801c6fe:	bd10      	pop	{r4, pc}

0801c700 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c700:	b510      	push	{r4, lr}
 801c702:	4604      	mov	r4, r0
 801c704:	2104      	movs	r1, #4
 801c706:	f009 fa98 	bl	8025c3a <_ZdlPvj>
 801c70a:	4620      	mov	r0, r4
 801c70c:	bd10      	pop	{r4, pc}

0801c70e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c70e:	b510      	push	{r4, lr}
 801c710:	4604      	mov	r4, r0
 801c712:	2104      	movs	r1, #4
 801c714:	f009 fa91 	bl	8025c3a <_ZdlPvj>
 801c718:	4620      	mov	r0, r4
 801c71a:	bd10      	pop	{r4, pc}

0801c71c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c71c:	b510      	push	{r4, lr}
 801c71e:	4604      	mov	r4, r0
 801c720:	2104      	movs	r1, #4
 801c722:	f009 fa8a 	bl	8025c3a <_ZdlPvj>
 801c726:	4620      	mov	r0, r4
 801c728:	bd10      	pop	{r4, pc}

0801c72a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c72a:	b510      	push	{r4, lr}
 801c72c:	4604      	mov	r4, r0
 801c72e:	2104      	movs	r1, #4
 801c730:	f009 fa83 	bl	8025c3a <_ZdlPvj>
 801c734:	4620      	mov	r0, r4
 801c736:	bd10      	pop	{r4, pc}

0801c738 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c738:	b510      	push	{r4, lr}
 801c73a:	4604      	mov	r4, r0
 801c73c:	2104      	movs	r1, #4
 801c73e:	f009 fa7c 	bl	8025c3a <_ZdlPvj>
 801c742:	4620      	mov	r0, r4
 801c744:	bd10      	pop	{r4, pc}

0801c746 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c746:	b510      	push	{r4, lr}
 801c748:	4604      	mov	r4, r0
 801c74a:	2104      	movs	r1, #4
 801c74c:	f009 fa75 	bl	8025c3a <_ZdlPvj>
 801c750:	4620      	mov	r0, r4
 801c752:	bd10      	pop	{r4, pc}

0801c754 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c754:	b510      	push	{r4, lr}
 801c756:	4604      	mov	r4, r0
 801c758:	2104      	movs	r1, #4
 801c75a:	f009 fa6e 	bl	8025c3a <_ZdlPvj>
 801c75e:	4620      	mov	r0, r4
 801c760:	bd10      	pop	{r4, pc}

0801c762 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c762:	b510      	push	{r4, lr}
 801c764:	4604      	mov	r4, r0
 801c766:	2104      	movs	r1, #4
 801c768:	f009 fa67 	bl	8025c3a <_ZdlPvj>
 801c76c:	4620      	mov	r0, r4
 801c76e:	bd10      	pop	{r4, pc}

0801c770 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c770:	b510      	push	{r4, lr}
 801c772:	4604      	mov	r4, r0
 801c774:	2104      	movs	r1, #4
 801c776:	f009 fa60 	bl	8025c3a <_ZdlPvj>
 801c77a:	4620      	mov	r0, r4
 801c77c:	bd10      	pop	{r4, pc}

0801c77e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c77e:	b510      	push	{r4, lr}
 801c780:	4604      	mov	r4, r0
 801c782:	2104      	movs	r1, #4
 801c784:	f009 fa59 	bl	8025c3a <_ZdlPvj>
 801c788:	4620      	mov	r0, r4
 801c78a:	bd10      	pop	{r4, pc}

0801c78c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c78c:	b510      	push	{r4, lr}
 801c78e:	4604      	mov	r4, r0
 801c790:	2104      	movs	r1, #4
 801c792:	f009 fa52 	bl	8025c3a <_ZdlPvj>
 801c796:	4620      	mov	r0, r4
 801c798:	bd10      	pop	{r4, pc}

0801c79a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801c79a:	b510      	push	{r4, lr}
 801c79c:	4604      	mov	r4, r0
 801c79e:	2104      	movs	r1, #4
 801c7a0:	f009 fa4b 	bl	8025c3a <_ZdlPvj>
 801c7a4:	4620      	mov	r0, r4
 801c7a6:	bd10      	pop	{r4, pc}

0801c7a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c7a8:	b510      	push	{r4, lr}
 801c7aa:	4604      	mov	r4, r0
 801c7ac:	2104      	movs	r1, #4
 801c7ae:	f009 fa44 	bl	8025c3a <_ZdlPvj>
 801c7b2:	4620      	mov	r0, r4
 801c7b4:	bd10      	pop	{r4, pc}

0801c7b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c7b6:	b510      	push	{r4, lr}
 801c7b8:	4604      	mov	r4, r0
 801c7ba:	2104      	movs	r1, #4
 801c7bc:	f009 fa3d 	bl	8025c3a <_ZdlPvj>
 801c7c0:	4620      	mov	r0, r4
 801c7c2:	bd10      	pop	{r4, pc}

0801c7c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c7c4:	b510      	push	{r4, lr}
 801c7c6:	4604      	mov	r4, r0
 801c7c8:	2104      	movs	r1, #4
 801c7ca:	f009 fa36 	bl	8025c3a <_ZdlPvj>
 801c7ce:	4620      	mov	r0, r4
 801c7d0:	bd10      	pop	{r4, pc}

0801c7d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c7d2:	b510      	push	{r4, lr}
 801c7d4:	4604      	mov	r4, r0
 801c7d6:	2104      	movs	r1, #4
 801c7d8:	f009 fa2f 	bl	8025c3a <_ZdlPvj>
 801c7dc:	4620      	mov	r0, r4
 801c7de:	bd10      	pop	{r4, pc}

0801c7e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c7e0:	b510      	push	{r4, lr}
 801c7e2:	4604      	mov	r4, r0
 801c7e4:	2104      	movs	r1, #4
 801c7e6:	f009 fa28 	bl	8025c3a <_ZdlPvj>
 801c7ea:	4620      	mov	r0, r4
 801c7ec:	bd10      	pop	{r4, pc}

0801c7ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c7ee:	b510      	push	{r4, lr}
 801c7f0:	4604      	mov	r4, r0
 801c7f2:	2104      	movs	r1, #4
 801c7f4:	f009 fa21 	bl	8025c3a <_ZdlPvj>
 801c7f8:	4620      	mov	r0, r4
 801c7fa:	bd10      	pop	{r4, pc}

0801c7fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c7fc:	b510      	push	{r4, lr}
 801c7fe:	4604      	mov	r4, r0
 801c800:	2104      	movs	r1, #4
 801c802:	f009 fa1a 	bl	8025c3a <_ZdlPvj>
 801c806:	4620      	mov	r0, r4
 801c808:	bd10      	pop	{r4, pc}

0801c80a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c80a:	b510      	push	{r4, lr}
 801c80c:	4604      	mov	r4, r0
 801c80e:	2104      	movs	r1, #4
 801c810:	f009 fa13 	bl	8025c3a <_ZdlPvj>
 801c814:	4620      	mov	r0, r4
 801c816:	bd10      	pop	{r4, pc}

0801c818 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c818:	b510      	push	{r4, lr}
 801c81a:	4604      	mov	r4, r0
 801c81c:	2104      	movs	r1, #4
 801c81e:	f009 fa0c 	bl	8025c3a <_ZdlPvj>
 801c822:	4620      	mov	r0, r4
 801c824:	bd10      	pop	{r4, pc}

0801c826 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c826:	b510      	push	{r4, lr}
 801c828:	4604      	mov	r4, r0
 801c82a:	2104      	movs	r1, #4
 801c82c:	f009 fa05 	bl	8025c3a <_ZdlPvj>
 801c830:	4620      	mov	r0, r4
 801c832:	bd10      	pop	{r4, pc}

0801c834 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c834:	b510      	push	{r4, lr}
 801c836:	4604      	mov	r4, r0
 801c838:	2104      	movs	r1, #4
 801c83a:	f009 f9fe 	bl	8025c3a <_ZdlPvj>
 801c83e:	4620      	mov	r0, r4
 801c840:	bd10      	pop	{r4, pc}

0801c842 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c842:	b510      	push	{r4, lr}
 801c844:	4604      	mov	r4, r0
 801c846:	2104      	movs	r1, #4
 801c848:	f009 f9f7 	bl	8025c3a <_ZdlPvj>
 801c84c:	4620      	mov	r0, r4
 801c84e:	bd10      	pop	{r4, pc}

0801c850 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c850:	b510      	push	{r4, lr}
 801c852:	4604      	mov	r4, r0
 801c854:	2104      	movs	r1, #4
 801c856:	f009 f9f0 	bl	8025c3a <_ZdlPvj>
 801c85a:	4620      	mov	r0, r4
 801c85c:	bd10      	pop	{r4, pc}

0801c85e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c85e:	b510      	push	{r4, lr}
 801c860:	4604      	mov	r4, r0
 801c862:	2104      	movs	r1, #4
 801c864:	f009 f9e9 	bl	8025c3a <_ZdlPvj>
 801c868:	4620      	mov	r0, r4
 801c86a:	bd10      	pop	{r4, pc}

0801c86c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c86e:	4606      	mov	r6, r0
 801c870:	b087      	sub	sp, #28
 801c872:	460c      	mov	r4, r1
 801c874:	4617      	mov	r7, r2
 801c876:	461d      	mov	r5, r3
 801c878:	b333      	cbz	r3, 801c8c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c87a:	4608      	mov	r0, r1
 801c87c:	f7f6 fe15 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801c880:	bb10      	cbnz	r0, 801c8c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c882:	6820      	ldr	r0, [r4, #0]
 801c884:	ab04      	add	r3, sp, #16
 801c886:	6861      	ldr	r1, [r4, #4]
 801c888:	4c1b      	ldr	r4, [pc, #108]	; (801c8f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801c88a:	c303      	stmia	r3!, {r0, r1}
 801c88c:	a804      	add	r0, sp, #16
 801c88e:	f7fa fb65 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c892:	6820      	ldr	r0, [r4, #0]
 801c894:	6803      	ldr	r3, [r0, #0]
 801c896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c898:	4798      	blx	r3
 801c89a:	2dff      	cmp	r5, #255	; 0xff
 801c89c:	d016      	beq.n	801c8cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801c89e:	f010 0f08 	tst.w	r0, #8
 801c8a2:	6820      	ldr	r0, [r4, #0]
 801c8a4:	d015      	beq.n	801c8d2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c8a6:	2400      	movs	r4, #0
 801c8a8:	6801      	ldr	r1, [r0, #0]
 801c8aa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c8ae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c8b2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801c8b6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c8ba:	9401      	str	r4, [sp, #4]
 801c8bc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c8c0:	9400      	str	r4, [sp, #0]
 801c8c2:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 801c8c4:	4639      	mov	r1, r7
 801c8c6:	47a0      	blx	r4
 801c8c8:	b007      	add	sp, #28
 801c8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8cc:	f010 0f02 	tst.w	r0, #2
 801c8d0:	e7e7      	b.n	801c8a2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801c8d2:	6803      	ldr	r3, [r0, #0]
 801c8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8d6:	4798      	blx	r3
 801c8d8:	4b08      	ldr	r3, [pc, #32]	; (801c8fc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c8da:	4601      	mov	r1, r0
 801c8dc:	4630      	mov	r0, r6
 801c8de:	881a      	ldrh	r2, [r3, #0]
 801c8e0:	6833      	ldr	r3, [r6, #0]
 801c8e2:	e9cd 7500 	strd	r7, r5, [sp]
 801c8e6:	69dd      	ldr	r5, [r3, #28]
 801c8e8:	ab04      	add	r3, sp, #16
 801c8ea:	47a8      	blx	r5
 801c8ec:	6820      	ldr	r0, [r4, #0]
 801c8ee:	6803      	ldr	r3, [r0, #0]
 801c8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8f2:	4798      	blx	r3
 801c8f4:	e7e8      	b.n	801c8c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c8f6:	bf00      	nop
 801c8f8:	2400aeec 	.word	0x2400aeec
 801c8fc:	2400aee6 	.word	0x2400aee6

0801c900 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c904:	4f97      	ldr	r7, [pc, #604]	; (801cb64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801c906:	4616      	mov	r6, r2
 801c908:	b08f      	sub	sp, #60	; 0x3c
 801c90a:	4604      	mov	r4, r0
 801c90c:	683a      	ldr	r2, [r7, #0]
 801c90e:	4689      	mov	r9, r1
 801c910:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801c914:	2a02      	cmp	r2, #2
 801c916:	d106      	bne.n	801c926 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801c918:	4b93      	ldr	r3, [pc, #588]	; (801cb68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801c91a:	f44f 7159 	mov.w	r1, #868	; 0x364
 801c91e:	4a93      	ldr	r2, [pc, #588]	; (801cb6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801c920:	4893      	ldr	r0, [pc, #588]	; (801cb70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801c922:	f009 f9b9 	bl	8025c98 <__assert_func>
 801c926:	ad0e      	add	r5, sp, #56	; 0x38
 801c928:	f825 3d24 	strh.w	r3, [r5, #-36]!
 801c92c:	4628      	mov	r0, r5
 801c92e:	f7fd fad3 	bl	8019ed8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c932:	6823      	ldr	r3, [r4, #0]
 801c934:	4680      	mov	r8, r0
 801c936:	4620      	mov	r0, r4
 801c938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c93a:	4798      	blx	r3
 801c93c:	4580      	cmp	r8, r0
 801c93e:	d004      	beq.n	801c94a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801c940:	4b8c      	ldr	r3, [pc, #560]	; (801cb74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801c942:	f240 3166 	movw	r1, #870	; 0x366
 801c946:	4a89      	ldr	r2, [pc, #548]	; (801cb6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801c948:	e7ea      	b.n	801c920 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c94a:	4628      	mov	r0, r5
 801c94c:	f7fd fa3a 	bl	8019dc4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c950:	4680      	mov	r8, r0
 801c952:	b920      	cbnz	r0, 801c95e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801c954:	4b88      	ldr	r3, [pc, #544]	; (801cb78 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801c956:	f44f 715a 	mov.w	r1, #872	; 0x368
 801c95a:	4a84      	ldr	r2, [pc, #528]	; (801cb6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801c95c:	e7e0      	b.n	801c920 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c95e:	6830      	ldr	r0, [r6, #0]
 801c960:	ab06      	add	r3, sp, #24
 801c962:	6871      	ldr	r1, [r6, #4]
 801c964:	f10d 0b20 	add.w	fp, sp, #32
 801c968:	f9b6 a000 	ldrsh.w	sl, [r6]
 801c96c:	c303      	stmia	r3!, {r0, r1}
 801c96e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c972:	ab08      	add	r3, sp, #32
 801c974:	f8d9 0000 	ldr.w	r0, [r9]
 801c978:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801c97c:	c303      	stmia	r3!, {r0, r1}
 801c97e:	4628      	mov	r0, r5
 801c980:	f7fd f918 	bl	8019bb4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c984:	4606      	mov	r6, r0
 801c986:	4628      	mov	r0, r5
 801c988:	4d7c      	ldr	r5, [pc, #496]	; (801cb7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801c98a:	f7fd f94d 	bl	8019c28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c98e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801c992:	a806      	add	r0, sp, #24
 801c994:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801c998:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801c99c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801c9a0:	f7fa fadc 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9a4:	4658      	mov	r0, fp
 801c9a6:	f7fa fad9 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9aa:	a80a      	add	r0, sp, #40	; 0x28
 801c9ac:	f7fa fad6 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9b0:	4b73      	ldr	r3, [pc, #460]	; (801cb80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801c9b2:	2100      	movs	r1, #0
 801c9b4:	f9b5 2000 	ldrsh.w	r2, [r5]
 801c9b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c9bc:	4658      	mov	r0, fp
 801c9be:	910c      	str	r1, [sp, #48]	; 0x30
 801c9c0:	a90c      	add	r1, sp, #48	; 0x30
 801c9c2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801c9c6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c9ca:	f7f6 fd2b 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 801c9ce:	4658      	mov	r0, fp
 801c9d0:	f7f6 fd6b 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801c9d4:	2800      	cmp	r0, #0
 801c9d6:	f040 809a 	bne.w	801cb0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801c9da:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801c9de:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801c9e2:	4288      	cmp	r0, r1
 801c9e4:	db38      	blt.n	801ca58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801c9e6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801c9ea:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801c9ee:	429a      	cmp	r2, r3
 801c9f0:	db32      	blt.n	801ca58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801c9f2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801c9f6:	4430      	add	r0, r6
 801c9f8:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c9fc:	4431      	add	r1, r6
 801c9fe:	b200      	sxth	r0, r0
 801ca00:	b209      	sxth	r1, r1
 801ca02:	4288      	cmp	r0, r1
 801ca04:	dc28      	bgt.n	801ca58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801ca06:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ca0a:	440a      	add	r2, r1
 801ca0c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801ca10:	440b      	add	r3, r1
 801ca12:	b212      	sxth	r2, r2
 801ca14:	b21b      	sxth	r3, r3
 801ca16:	429a      	cmp	r2, r3
 801ca18:	dc1e      	bgt.n	801ca58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801ca1a:	6823      	ldr	r3, [r4, #0]
 801ca1c:	4620      	mov	r0, r4
 801ca1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca20:	4798      	blx	r3
 801ca22:	4682      	mov	sl, r0
 801ca24:	6838      	ldr	r0, [r7, #0]
 801ca26:	6803      	ldr	r3, [r0, #0]
 801ca28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca2a:	4798      	blx	r3
 801ca2c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801ca30:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ca34:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801ca38:	1a5b      	subs	r3, r3, r1
 801ca3a:	b29b      	uxth	r3, r3
 801ca3c:	b21c      	sxth	r4, r3
 801ca3e:	2c00      	cmp	r4, #0
 801ca40:	dc0f      	bgt.n	801ca62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 801ca42:	bf18      	it	ne
 801ca44:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801ca48:	4644      	mov	r4, r8
 801ca4a:	bf1e      	ittt	ne
 801ca4c:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801ca50:	185b      	addne	r3, r3, r1
 801ca52:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801ca56:	e009      	b.n	801ca6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 801ca58:	4b4a      	ldr	r3, [pc, #296]	; (801cb84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801ca5a:	f240 3176 	movw	r1, #886	; 0x376
 801ca5e:	4a43      	ldr	r2, [pc, #268]	; (801cb6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801ca60:	e75e      	b.n	801c920 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ca62:	1ad3      	subs	r3, r2, r3
 801ca64:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801ca68:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ca6c:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801ca70:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ca74:	1b9b      	subs	r3, r3, r6
 801ca76:	b29b      	uxth	r3, r3
 801ca78:	b219      	sxth	r1, r3
 801ca7a:	2900      	cmp	r1, #0
 801ca7c:	dd4b      	ble.n	801cb16 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 801ca7e:	4351      	muls	r1, r2
 801ca80:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801ca84:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801ca88:	1acb      	subs	r3, r1, r3
 801ca8a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ca8e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801ca92:	2e00      	cmp	r6, #0
 801ca94:	dd3b      	ble.n	801cb0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801ca96:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	dd37      	ble.n	801cb0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801ca9e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801caa2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801caa6:	fb0a f90c 	mul.w	r9, sl, ip
 801caaa:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801caae:	4481      	add	r9, r0
 801cab0:	8828      	ldrh	r0, [r5, #0]
 801cab2:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801cab6:	1a41      	subs	r1, r0, r1
 801cab8:	42ae      	cmp	r6, r5
 801caba:	bfa8      	it	ge
 801cabc:	462e      	movge	r6, r5
 801cabe:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801cac2:	428e      	cmp	r6, r1
 801cac4:	bfa8      	it	ge
 801cac6:	460e      	movge	r6, r1
 801cac8:	429d      	cmp	r5, r3
 801caca:	bfa8      	it	ge
 801cacc:	461d      	movge	r5, r3
 801cace:	4b2c      	ldr	r3, [pc, #176]	; (801cb80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801cad0:	881b      	ldrh	r3, [r3, #0]
 801cad2:	eba3 030c 	sub.w	r3, r3, ip
 801cad6:	429d      	cmp	r5, r3
 801cad8:	bfa8      	it	ge
 801cada:	461d      	movge	r5, r3
 801cadc:	42b0      	cmp	r0, r6
 801cade:	d12c      	bne.n	801cb3a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801cae0:	4290      	cmp	r0, r2
 801cae2:	d12a      	bne.n	801cb3a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801cae4:	6838      	ldr	r0, [r7, #0]
 801cae6:	9203      	str	r2, [sp, #12]
 801cae8:	6803      	ldr	r3, [r0, #0]
 801caea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801caec:	4798      	blx	r3
 801caee:	07c3      	lsls	r3, r0, #31
 801caf0:	d51a      	bpl.n	801cb28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801caf2:	9a03      	ldr	r2, [sp, #12]
 801caf4:	6838      	ldr	r0, [r7, #0]
 801caf6:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 801cafa:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801cafe:	6803      	ldr	r3, [r0, #0]
 801cb00:	9200      	str	r2, [sp, #0]
 801cb02:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 801cb04:	4623      	mov	r3, r4
 801cb06:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801cb0a:	47a8      	blx	r5
 801cb0c:	4680      	mov	r8, r0
 801cb0e:	4640      	mov	r0, r8
 801cb10:	b00f      	add	sp, #60	; 0x3c
 801cb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb16:	bf1f      	itttt	ne
 801cb18:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 801cb1c:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801cb20:	185b      	addne	r3, r3, r1
 801cb22:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801cb26:	e7b2      	b.n	801ca8e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 801cb28:	6838      	ldr	r0, [r7, #0]
 801cb2a:	464a      	mov	r2, r9
 801cb2c:	4621      	mov	r1, r4
 801cb2e:	6803      	ldr	r3, [r0, #0]
 801cb30:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801cb32:	fb05 f30a 	mul.w	r3, r5, sl
 801cb36:	47b0      	blx	r6
 801cb38:	e7e9      	b.n	801cb0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801cb3a:	4355      	muls	r5, r2
 801cb3c:	0076      	lsls	r6, r6, #1
 801cb3e:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801cb42:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801cb46:	9303      	str	r3, [sp, #12]
 801cb48:	9b03      	ldr	r3, [sp, #12]
 801cb4a:	429c      	cmp	r4, r3
 801cb4c:	d2df      	bcs.n	801cb0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801cb4e:	6838      	ldr	r0, [r7, #0]
 801cb50:	464a      	mov	r2, r9
 801cb52:	4621      	mov	r1, r4
 801cb54:	44d1      	add	r9, sl
 801cb56:	6803      	ldr	r3, [r0, #0]
 801cb58:	445c      	add	r4, fp
 801cb5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb5c:	461d      	mov	r5, r3
 801cb5e:	4633      	mov	r3, r6
 801cb60:	47a8      	blx	r5
 801cb62:	e7f1      	b.n	801cb48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 801cb64:	2400aeec 	.word	0x2400aeec
 801cb68:	0802a02b 	.word	0x0802a02b
 801cb6c:	0802a8dc 	.word	0x0802a8dc
 801cb70:	0802a0dd 	.word	0x0802a0dd
 801cb74:	0802a10f 	.word	0x0802a10f
 801cb78:	0802a164 	.word	0x0802a164
 801cb7c:	2400aee6 	.word	0x2400aee6
 801cb80:	2400aee8 	.word	0x2400aee8
 801cb84:	0802a1a2 	.word	0x0802a1a2

0801cb88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801cb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb8c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801cb90:	4688      	mov	r8, r1
 801cb92:	4614      	mov	r4, r2
 801cb94:	461d      	mov	r5, r3
 801cb96:	9e08      	ldr	r6, [sp, #32]
 801cb98:	2f00      	cmp	r7, #0
 801cb9a:	f000 80b4 	beq.w	801cd06 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cb9e:	4618      	mov	r0, r3
 801cba0:	f7f6 fc83 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801cba4:	2800      	cmp	r0, #0
 801cba6:	f040 80ae 	bne.w	801cd06 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cbaa:	f9b5 1000 	ldrsh.w	r1, [r5]
 801cbae:	2fff      	cmp	r7, #255	; 0xff
 801cbb0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801cbb4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801cbb8:	fb04 1303 	mla	r3, r4, r3, r1
 801cbbc:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801cbc0:	eba4 0200 	sub.w	r2, r4, r0
 801cbc4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801cbc8:	fb04 f505 	mul.w	r5, r4, r5
 801cbcc:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801cbd0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801cbd4:	d04b      	beq.n	801cc6e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 801cbd6:	b2bc      	uxth	r4, r7
 801cbd8:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801cbdc:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801cbe0:	fa5f f788 	uxtb.w	r7, r8
 801cbe4:	b2f3      	uxtb	r3, r6
 801cbe6:	0040      	lsls	r0, r0, #1
 801cbe8:	fb0e fe04 	mul.w	lr, lr, r4
 801cbec:	4367      	muls	r7, r4
 801cbee:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801cbf2:	4363      	muls	r3, r4
 801cbf4:	fa1f fc8c 	uxth.w	ip, ip
 801cbf8:	42a9      	cmp	r1, r5
 801cbfa:	f080 8084 	bcs.w	801cd06 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cbfe:	eb01 0900 	add.w	r9, r1, r0
 801cc02:	4549      	cmp	r1, r9
 801cc04:	d231      	bcs.n	801cc6a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801cc06:	880a      	ldrh	r2, [r1, #0]
 801cc08:	1214      	asrs	r4, r2, #8
 801cc0a:	10d6      	asrs	r6, r2, #3
 801cc0c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801cc10:	00d2      	lsls	r2, r2, #3
 801cc12:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cc16:	b2d2      	uxtb	r2, r2
 801cc18:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801cc1c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cc20:	fb14 f40c 	smulbb	r4, r4, ip
 801cc24:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801cc28:	fb12 f20c 	smulbb	r2, r2, ip
 801cc2c:	fb16 f60c 	smulbb	r6, r6, ip
 801cc30:	4474      	add	r4, lr
 801cc32:	441a      	add	r2, r3
 801cc34:	b2a4      	uxth	r4, r4
 801cc36:	443e      	add	r6, r7
 801cc38:	b292      	uxth	r2, r2
 801cc3a:	f104 0a01 	add.w	sl, r4, #1
 801cc3e:	b2b6      	uxth	r6, r6
 801cc40:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801cc44:	f102 0a01 	add.w	sl, r2, #1
 801cc48:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801cc4c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801cc50:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cc54:	4322      	orrs	r2, r4
 801cc56:	1c74      	adds	r4, r6, #1
 801cc58:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801cc5c:	0976      	lsrs	r6, r6, #5
 801cc5e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801cc62:	4332      	orrs	r2, r6
 801cc64:	f821 2b02 	strh.w	r2, [r1], #2
 801cc68:	e7cb      	b.n	801cc02 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 801cc6a:	4441      	add	r1, r8
 801cc6c:	e7c4      	b.n	801cbf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801cc6e:	0973      	lsrs	r3, r6, #5
 801cc70:	4f26      	ldr	r7, [pc, #152]	; (801cd0c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 801cc72:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801cc76:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cc7a:	ea08 0707 	and.w	r7, r8, r7
 801cc7e:	433b      	orrs	r3, r7
 801cc80:	4333      	orrs	r3, r6
 801cc82:	07e6      	lsls	r6, r4, #31
 801cc84:	b29b      	uxth	r3, r3
 801cc86:	d50b      	bpl.n	801cca0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801cc88:	0040      	lsls	r0, r0, #1
 801cc8a:	0052      	lsls	r2, r2, #1
 801cc8c:	42a9      	cmp	r1, r5
 801cc8e:	d23a      	bcs.n	801cd06 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cc90:	180c      	adds	r4, r1, r0
 801cc92:	42a1      	cmp	r1, r4
 801cc94:	d202      	bcs.n	801cc9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801cc96:	f821 3b02 	strh.w	r3, [r1], #2
 801cc9a:	e7fa      	b.n	801cc92 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801cc9c:	4411      	add	r1, r2
 801cc9e:	e7f5      	b.n	801cc8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801cca0:	078f      	lsls	r7, r1, #30
 801cca2:	d008      	beq.n	801ccb6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801cca4:	0066      	lsls	r6, r4, #1
 801cca6:	460a      	mov	r2, r1
 801cca8:	42aa      	cmp	r2, r5
 801ccaa:	d202      	bcs.n	801ccb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801ccac:	8013      	strh	r3, [r2, #0]
 801ccae:	4432      	add	r2, r6
 801ccb0:	e7fa      	b.n	801cca8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801ccb2:	3102      	adds	r1, #2
 801ccb4:	3801      	subs	r0, #1
 801ccb6:	07c6      	lsls	r6, r0, #31
 801ccb8:	d50b      	bpl.n	801ccd2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801ccba:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801ccbe:	0066      	lsls	r6, r4, #1
 801ccc0:	3a01      	subs	r2, #1
 801ccc2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801ccc6:	42aa      	cmp	r2, r5
 801ccc8:	d202      	bcs.n	801ccd0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801ccca:	8013      	strh	r3, [r2, #0]
 801cccc:	4432      	add	r2, r6
 801ccce:	e7fa      	b.n	801ccc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801ccd0:	3801      	subs	r0, #1
 801ccd2:	b1c0      	cbz	r0, 801cd06 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801ccd4:	1040      	asrs	r0, r0, #1
 801ccd6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801ccda:	0080      	lsls	r0, r0, #2
 801ccdc:	0064      	lsls	r4, r4, #1
 801ccde:	42a9      	cmp	r1, r5
 801cce0:	d211      	bcs.n	801cd06 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801cce2:	078a      	lsls	r2, r1, #30
 801cce4:	d006      	beq.n	801ccf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801cce6:	4b0a      	ldr	r3, [pc, #40]	; (801cd10 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 801cce8:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801ccec:	4a09      	ldr	r2, [pc, #36]	; (801cd14 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 801ccee:	480a      	ldr	r0, [pc, #40]	; (801cd18 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 801ccf0:	f008 ffd2 	bl	8025c98 <__assert_func>
 801ccf4:	180e      	adds	r6, r1, r0
 801ccf6:	460a      	mov	r2, r1
 801ccf8:	42b2      	cmp	r2, r6
 801ccfa:	d202      	bcs.n	801cd02 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 801ccfc:	f842 3b04 	str.w	r3, [r2], #4
 801cd00:	e7fa      	b.n	801ccf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 801cd02:	4421      	add	r1, r4
 801cd04:	e7eb      	b.n	801ccde <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801cd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd0a:	bf00      	nop
 801cd0c:	00fff800 	.word	0x00fff800
 801cd10:	08029edc 	.word	0x08029edc
 801cd14:	0802a528 	.word	0x0802a528
 801cd18:	0802a0dd 	.word	0x0802a0dd

0801cd1c <_ZN8touchgfx8LCD16bppC1Ev>:
 801cd1c:	2200      	movs	r2, #0
 801cd1e:	4910      	ldr	r1, [pc, #64]	; (801cd60 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801cd20:	6042      	str	r2, [r0, #4]
 801cd22:	6001      	str	r1, [r0, #0]
 801cd24:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801cd28:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801cd2c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801cd30:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801cd34:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801cd38:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801cd3c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801cd40:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801cd44:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801cd48:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801cd4c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801cd50:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801cd54:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801cd58:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801cd5c:	4770      	bx	lr
 801cd5e:	bf00      	nop
 801cd60:	0802a4e0 	.word	0x0802a4e0

0801cd64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801cd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd68:	b08d      	sub	sp, #52	; 0x34
 801cd6a:	460d      	mov	r5, r1
 801cd6c:	4604      	mov	r4, r0
 801cd6e:	4699      	mov	r9, r3
 801cd70:	6808      	ldr	r0, [r1, #0]
 801cd72:	ab08      	add	r3, sp, #32
 801cd74:	6849      	ldr	r1, [r1, #4]
 801cd76:	c303      	stmia	r3!, {r0, r1}
 801cd78:	6810      	ldr	r0, [r2, #0]
 801cd7a:	ab0a      	add	r3, sp, #40	; 0x28
 801cd7c:	6851      	ldr	r1, [r2, #4]
 801cd7e:	c303      	stmia	r3!, {r0, r1}
 801cd80:	a808      	add	r0, sp, #32
 801cd82:	f7fa f8eb 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd86:	4629      	mov	r1, r5
 801cd88:	a80a      	add	r0, sp, #40	; 0x28
 801cd8a:	4d67      	ldr	r5, [pc, #412]	; (801cf28 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801cd8c:	f7fa f90e 	bl	8016fac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cd90:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801cd94:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801cd98:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801cd9c:	6828      	ldr	r0, [r5, #0]
 801cd9e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cda2:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801cda6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801cdaa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801cdae:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801cdb2:	440a      	add	r2, r1
 801cdb4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801cdb8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801cdbc:	4413      	add	r3, r2
 801cdbe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801cdc2:	6803      	ldr	r3, [r0, #0]
 801cdc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cdc6:	4798      	blx	r3
 801cdc8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801cdcc:	d119      	bne.n	801ce02 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801cdce:	f010 0f20 	tst.w	r0, #32
 801cdd2:	6828      	ldr	r0, [r5, #0]
 801cdd4:	d018      	beq.n	801ce08 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801cdd6:	2500      	movs	r5, #0
 801cdd8:	6801      	ldr	r1, [r0, #0]
 801cdda:	b2b6      	uxth	r6, r6
 801cddc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801cde0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801cde4:	9601      	str	r6, [sp, #4]
 801cde6:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801cdea:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801cdee:	9502      	str	r5, [sp, #8]
 801cdf0:	fa1f f588 	uxth.w	r5, r8
 801cdf4:	9500      	str	r5, [sp, #0]
 801cdf6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801cdf8:	4621      	mov	r1, r4
 801cdfa:	47a8      	blx	r5
 801cdfc:	b00d      	add	sp, #52	; 0x34
 801cdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce02:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ce06:	e7e4      	b.n	801cdd2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801ce08:	6803      	ldr	r3, [r0, #0]
 801ce0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce0c:	4798      	blx	r3
 801ce0e:	4947      	ldr	r1, [pc, #284]	; (801cf2c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801ce10:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ce14:	880b      	ldrh	r3, [r1, #0]
 801ce16:	468a      	mov	sl, r1
 801ce18:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801ce1c:	fb03 5202 	mla	r2, r3, r2, r5
 801ce20:	4373      	muls	r3, r6
 801ce22:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ce26:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ce2a:	9307      	str	r3, [sp, #28]
 801ce2c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801ce30:	9306      	str	r3, [sp, #24]
 801ce32:	9b07      	ldr	r3, [sp, #28]
 801ce34:	4298      	cmp	r0, r3
 801ce36:	d270      	bcs.n	801cf1a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801ce38:	9b06      	ldr	r3, [sp, #24]
 801ce3a:	4621      	mov	r1, r4
 801ce3c:	eb00 0b03 	add.w	fp, r0, r3
 801ce40:	4558      	cmp	r0, fp
 801ce42:	d25d      	bcs.n	801cf00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801ce44:	f851 4b04 	ldr.w	r4, [r1], #4
 801ce48:	0e23      	lsrs	r3, r4, #24
 801ce4a:	d014      	beq.n	801ce76 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801ce4c:	2bff      	cmp	r3, #255	; 0xff
 801ce4e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801ce52:	d112      	bne.n	801ce7a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801ce54:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ce58:	d10f      	bne.n	801ce7a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801ce5a:	0963      	lsrs	r3, r4, #5
 801ce5c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801ce60:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ce64:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ce68:	f02c 0c07 	bic.w	ip, ip, #7
 801ce6c:	ea43 0c0c 	orr.w	ip, r3, ip
 801ce70:	ea4c 0404 	orr.w	r4, ip, r4
 801ce74:	8004      	strh	r4, [r0, #0]
 801ce76:	3002      	adds	r0, #2
 801ce78:	e7e2      	b.n	801ce40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801ce7a:	fb09 f303 	mul.w	r3, r9, r3
 801ce7e:	8807      	ldrh	r7, [r0, #0]
 801ce80:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801ce84:	fa5f fc8c 	uxtb.w	ip, ip
 801ce88:	1c5a      	adds	r2, r3, #1
 801ce8a:	123e      	asrs	r6, r7, #8
 801ce8c:	10fd      	asrs	r5, r7, #3
 801ce8e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801ce92:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ce96:	00ff      	lsls	r7, r7, #3
 801ce98:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ce9c:	1212      	asrs	r2, r2, #8
 801ce9e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801cea2:	b293      	uxth	r3, r2
 801cea4:	43d2      	mvns	r2, r2
 801cea6:	b2ff      	uxtb	r7, r7
 801cea8:	fb1e fe03 	smulbb	lr, lr, r3
 801ceac:	b2d2      	uxtb	r2, r2
 801ceae:	fb1c fc03 	smulbb	ip, ip, r3
 801ceb2:	b2e4      	uxtb	r4, r4
 801ceb4:	fb06 e602 	mla	r6, r6, r2, lr
 801ceb8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801cebc:	fb14 f403 	smulbb	r4, r4, r3
 801cec0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801cec4:	b2b6      	uxth	r6, r6
 801cec6:	fb05 c502 	mla	r5, r5, r2, ip
 801ceca:	fb07 4702 	mla	r7, r7, r2, r4
 801cece:	f106 0e01 	add.w	lr, r6, #1
 801ced2:	b2ad      	uxth	r5, r5
 801ced4:	b2bf      	uxth	r7, r7
 801ced6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801ceda:	f105 0c01 	add.w	ip, r5, #1
 801cede:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801cee2:	1c7e      	adds	r6, r7, #1
 801cee4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801cee8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ceec:	096d      	lsrs	r5, r5, #5
 801ceee:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801cef2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cef6:	ea46 060e 	orr.w	r6, r6, lr
 801cefa:	432e      	orrs	r6, r5
 801cefc:	8006      	strh	r6, [r0, #0]
 801cefe:	e7ba      	b.n	801ce76 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801cf00:	f8ba 3000 	ldrh.w	r3, [sl]
 801cf04:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801cf08:	eba3 0308 	sub.w	r3, r3, r8
 801cf0c:	eba4 0408 	sub.w	r4, r4, r8
 801cf10:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cf14:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801cf18:	e78b      	b.n	801ce32 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801cf1a:	4b03      	ldr	r3, [pc, #12]	; (801cf28 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801cf1c:	6818      	ldr	r0, [r3, #0]
 801cf1e:	6803      	ldr	r3, [r0, #0]
 801cf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf22:	4798      	blx	r3
 801cf24:	e76a      	b.n	801cdfc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801cf26:	bf00      	nop
 801cf28:	2400aeec 	.word	0x2400aeec
 801cf2c:	2400aee6 	.word	0x2400aee6

0801cf30 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801cf30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cf34:	b085      	sub	sp, #20
 801cf36:	6810      	ldr	r0, [r2, #0]
 801cf38:	460c      	mov	r4, r1
 801cf3a:	6851      	ldr	r1, [r2, #4]
 801cf3c:	466d      	mov	r5, sp
 801cf3e:	4616      	mov	r6, r2
 801cf40:	c503      	stmia	r5!, {r0, r1}
 801cf42:	6818      	ldr	r0, [r3, #0]
 801cf44:	6859      	ldr	r1, [r3, #4]
 801cf46:	c503      	stmia	r5!, {r0, r1}
 801cf48:	4668      	mov	r0, sp
 801cf4a:	4d2e      	ldr	r5, [pc, #184]	; (801d004 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801cf4c:	f7fa f806 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf50:	4631      	mov	r1, r6
 801cf52:	a802      	add	r0, sp, #8
 801cf54:	4e2c      	ldr	r6, [pc, #176]	; (801d008 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801cf56:	f7fa f829 	bl	8016fac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cf5a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801cf5e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801cf62:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801cf66:	6828      	ldr	r0, [r5, #0]
 801cf68:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cf6c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801cf70:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801cf74:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801cf78:	f8bd 1000 	ldrh.w	r1, [sp]
 801cf7c:	440a      	add	r2, r1
 801cf7e:	f8ad 2008 	strh.w	r2, [sp, #8]
 801cf82:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cf86:	4413      	add	r3, r2
 801cf88:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cf8c:	6803      	ldr	r3, [r0, #0]
 801cf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf90:	4798      	blx	r3
 801cf92:	8833      	ldrh	r3, [r6, #0]
 801cf94:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801cf98:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801cf9c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801cfa0:	f8df e068 	ldr.w	lr, [pc, #104]	; 801d00c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801cfa4:	fb03 1202 	mla	r2, r3, r2, r1
 801cfa8:	fb08 f303 	mul.w	r3, r8, r3
 801cfac:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cfb0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cfb4:	4298      	cmp	r0, r3
 801cfb6:	d21d      	bcs.n	801cff4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801cfb8:	eb00 080c 	add.w	r8, r0, ip
 801cfbc:	4540      	cmp	r0, r8
 801cfbe:	d20f      	bcs.n	801cfe0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801cfc0:	f854 1b04 	ldr.w	r1, [r4], #4
 801cfc4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801cfc8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801cfcc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801cfd0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801cfd4:	ea42 0209 	orr.w	r2, r2, r9
 801cfd8:	430a      	orrs	r2, r1
 801cfda:	f820 2b02 	strh.w	r2, [r0], #2
 801cfde:	e7ed      	b.n	801cfbc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801cfe0:	8832      	ldrh	r2, [r6, #0]
 801cfe2:	1bd2      	subs	r2, r2, r7
 801cfe4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cfe8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801cfec:	1bd2      	subs	r2, r2, r7
 801cfee:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801cff2:	e7df      	b.n	801cfb4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801cff4:	6828      	ldr	r0, [r5, #0]
 801cff6:	6803      	ldr	r3, [r0, #0]
 801cff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cffa:	4798      	blx	r3
 801cffc:	b005      	add	sp, #20
 801cffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d002:	bf00      	nop
 801d004:	2400aeec 	.word	0x2400aeec
 801d008:	2400aee6 	.word	0x2400aee6
 801d00c:	fffff800 	.word	0xfffff800

0801d010 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801d010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d014:	b08e      	sub	sp, #56	; 0x38
 801d016:	460e      	mov	r6, r1
 801d018:	4604      	mov	r4, r0
 801d01a:	461d      	mov	r5, r3
 801d01c:	6808      	ldr	r0, [r1, #0]
 801d01e:	ab0a      	add	r3, sp, #40	; 0x28
 801d020:	6849      	ldr	r1, [r1, #4]
 801d022:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801d1f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801d026:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801d1fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801d02a:	c303      	stmia	r3!, {r0, r1}
 801d02c:	6810      	ldr	r0, [r2, #0]
 801d02e:	ab0c      	add	r3, sp, #48	; 0x30
 801d030:	6851      	ldr	r1, [r2, #4]
 801d032:	c303      	stmia	r3!, {r0, r1}
 801d034:	a80a      	add	r0, sp, #40	; 0x28
 801d036:	f7f9 ff91 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d03a:	4631      	mov	r1, r6
 801d03c:	a80c      	add	r0, sp, #48	; 0x30
 801d03e:	f7f9 ffb5 	bl	8016fac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d042:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d046:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d04a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d04e:	f8d8 0000 	ldr.w	r0, [r8]
 801d052:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d056:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801d05a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801d05e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d062:	440c      	add	r4, r1
 801d064:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d068:	440a      	add	r2, r1
 801d06a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d06e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d072:	4413      	add	r3, r2
 801d074:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d078:	6803      	ldr	r3, [r0, #0]
 801d07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d07c:	4798      	blx	r3
 801d07e:	2dff      	cmp	r5, #255	; 0xff
 801d080:	d124      	bne.n	801d0cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801d082:	f010 0f01 	tst.w	r0, #1
 801d086:	f8d8 0000 	ldr.w	r0, [r8]
 801d08a:	d022      	beq.n	801d0d2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801d08c:	2100      	movs	r1, #0
 801d08e:	f04f 0e01 	mov.w	lr, #1
 801d092:	f8d0 c000 	ldr.w	ip, [r0]
 801d096:	b2b6      	uxth	r6, r6
 801d098:	f8cd e018 	str.w	lr, [sp, #24]
 801d09c:	b2bf      	uxth	r7, r7
 801d09e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d0a2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d0a6:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801d0aa:	f8b9 e000 	ldrh.w	lr, [r9]
 801d0ae:	9503      	str	r5, [sp, #12]
 801d0b0:	9601      	str	r6, [sp, #4]
 801d0b2:	9700      	str	r7, [sp, #0]
 801d0b4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d0b8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d0bc:	9102      	str	r1, [sp, #8]
 801d0be:	4621      	mov	r1, r4
 801d0c0:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801d0c4:	47a8      	blx	r5
 801d0c6:	b00e      	add	sp, #56	; 0x38
 801d0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0cc:	f010 0f04 	tst.w	r0, #4
 801d0d0:	e7d9      	b.n	801d086 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801d0d2:	6803      	ldr	r3, [r0, #0]
 801d0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0d6:	4798      	blx	r3
 801d0d8:	f8b9 3000 	ldrh.w	r3, [r9]
 801d0dc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d0e0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801d0e4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d0e8:	435e      	muls	r6, r3
 801d0ea:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d0ee:	2dff      	cmp	r5, #255	; 0xff
 801d0f0:	fb03 1202 	mla	r2, r3, r2, r1
 801d0f4:	ebac 0c07 	sub.w	ip, ip, r7
 801d0f8:	eba3 0707 	sub.w	r7, r3, r7
 801d0fc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d100:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d104:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d108:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801d10c:	d049      	beq.n	801d1a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801d10e:	43eb      	mvns	r3, r5
 801d110:	fa1f f985 	uxth.w	r9, r5
 801d114:	b2db      	uxtb	r3, r3
 801d116:	42b0      	cmp	r0, r6
 801d118:	d266      	bcs.n	801d1e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d11a:	eb00 0a0e 	add.w	sl, r0, lr
 801d11e:	4550      	cmp	r0, sl
 801d120:	4621      	mov	r1, r4
 801d122:	f104 0403 	add.w	r4, r4, #3
 801d126:	d25b      	bcs.n	801d1e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801d128:	8802      	ldrh	r2, [r0, #0]
 801d12a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d12e:	ea4f 2822 	mov.w	r8, r2, asr #8
 801d132:	fb11 f109 	smulbb	r1, r1, r9
 801d136:	10d5      	asrs	r5, r2, #3
 801d138:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801d13c:	00d2      	lsls	r2, r2, #3
 801d13e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d142:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801d146:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d14a:	fb08 1803 	mla	r8, r8, r3, r1
 801d14e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801d152:	b2d2      	uxtb	r2, r2
 801d154:	fb11 f109 	smulbb	r1, r1, r9
 801d158:	fa1f f888 	uxth.w	r8, r8
 801d15c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d160:	fb05 1503 	mla	r5, r5, r3, r1
 801d164:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d168:	fb11 f109 	smulbb	r1, r1, r9
 801d16c:	b2ad      	uxth	r5, r5
 801d16e:	fb02 1203 	mla	r2, r2, r3, r1
 801d172:	f108 0101 	add.w	r1, r8, #1
 801d176:	b292      	uxth	r2, r2
 801d178:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801d17c:	1c51      	adds	r1, r2, #1
 801d17e:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801d182:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d186:	1c69      	adds	r1, r5, #1
 801d188:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d18c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d190:	096d      	lsrs	r5, r5, #5
 801d192:	ea42 0208 	orr.w	r2, r2, r8
 801d196:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d19a:	432a      	orrs	r2, r5
 801d19c:	f820 2b02 	strh.w	r2, [r0], #2
 801d1a0:	e7bd      	b.n	801d11e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801d1a2:	4a14      	ldr	r2, [pc, #80]	; (801d1f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801d1a4:	42b0      	cmp	r0, r6
 801d1a6:	d21f      	bcs.n	801d1e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d1a8:	eb00 050e 	add.w	r5, r0, lr
 801d1ac:	42a8      	cmp	r0, r5
 801d1ae:	4621      	mov	r1, r4
 801d1b0:	f104 0403 	add.w	r4, r4, #3
 801d1b4:	d210      	bcs.n	801d1d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801d1b6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801d1ba:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d1be:	00db      	lsls	r3, r3, #3
 801d1c0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801d1c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d1c8:	430b      	orrs	r3, r1
 801d1ca:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d1ce:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801d1d2:	f820 3b02 	strh.w	r3, [r0], #2
 801d1d6:	e7e9      	b.n	801d1ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801d1d8:	4438      	add	r0, r7
 801d1da:	eb01 040c 	add.w	r4, r1, ip
 801d1de:	e7e1      	b.n	801d1a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801d1e0:	4438      	add	r0, r7
 801d1e2:	eb01 040c 	add.w	r4, r1, ip
 801d1e6:	e796      	b.n	801d116 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801d1e8:	4b03      	ldr	r3, [pc, #12]	; (801d1f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801d1ea:	6818      	ldr	r0, [r3, #0]
 801d1ec:	6803      	ldr	r3, [r0, #0]
 801d1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d1f0:	4798      	blx	r3
 801d1f2:	e768      	b.n	801d0c6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801d1f4:	fffff800 	.word	0xfffff800
 801d1f8:	2400aeec 	.word	0x2400aeec
 801d1fc:	2400aee6 	.word	0x2400aee6

0801d200 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d200:	b570      	push	{r4, r5, r6, lr}
 801d202:	9c04      	ldr	r4, [sp, #16]
 801d204:	4605      	mov	r5, r0
 801d206:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801d20a:	4608      	mov	r0, r1
 801d20c:	4619      	mov	r1, r3
 801d20e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d212:	2a0d      	cmp	r2, #13
 801d214:	d825      	bhi.n	801d262 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 801d216:	e8df f002 	tbb	[pc, r2]
 801d21a:	1807      	.short	0x1807
 801d21c:	1d1d1d13 	.word	0x1d1d1d13
 801d220:	1d1d1d1d 	.word	0x1d1d1d1d
 801d224:	1d1d1d1d 	.word	0x1d1d1d1d
 801d228:	682a      	ldr	r2, [r5, #0]
 801d22a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801d22e:	68d6      	ldr	r6, [r2, #12]
 801d230:	4623      	mov	r3, r4
 801d232:	460a      	mov	r2, r1
 801d234:	4601      	mov	r1, r0
 801d236:	46b4      	mov	ip, r6
 801d238:	4628      	mov	r0, r5
 801d23a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d23e:	4760      	bx	ip
 801d240:	4622      	mov	r2, r4
 801d242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d246:	f7ff bd8d 	b.w	801cd64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d24a:	4622      	mov	r2, r4
 801d24c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d250:	f7ff bede 	b.w	801d010 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801d254:	4b03      	ldr	r3, [pc, #12]	; (801d264 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801d256:	f240 315d 	movw	r1, #861	; 0x35d
 801d25a:	4a03      	ldr	r2, [pc, #12]	; (801d268 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801d25c:	4803      	ldr	r0, [pc, #12]	; (801d26c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801d25e:	f008 fd1b 	bl	8025c98 <__assert_func>
 801d262:	bd70      	pop	{r4, r5, r6, pc}
 801d264:	0802a202 	.word	0x0802a202
 801d268:	0802a962 	.word	0x0802a962
 801d26c:	0802a0dd 	.word	0x0802a0dd

0801d270 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d274:	b093      	sub	sp, #76	; 0x4c
 801d276:	880e      	ldrh	r6, [r1, #0]
 801d278:	4681      	mov	r9, r0
 801d27a:	4688      	mov	r8, r1
 801d27c:	4615      	mov	r5, r2
 801d27e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801d282:	b136      	cbz	r6, 801d292 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801d284:	4b70      	ldr	r3, [pc, #448]	; (801d448 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801d286:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 801d28a:	4a70      	ldr	r2, [pc, #448]	; (801d44c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d28c:	4870      	ldr	r0, [pc, #448]	; (801d450 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801d28e:	f008 fd03 	bl	8025c98 <__assert_func>
 801d292:	6810      	ldr	r0, [r2, #0]
 801d294:	ac0e      	add	r4, sp, #56	; 0x38
 801d296:	6851      	ldr	r1, [r2, #4]
 801d298:	4f6e      	ldr	r7, [pc, #440]	; (801d454 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d29a:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801d458 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801d29e:	c403      	stmia	r4!, {r0, r1}
 801d2a0:	6818      	ldr	r0, [r3, #0]
 801d2a2:	ac10      	add	r4, sp, #64	; 0x40
 801d2a4:	6859      	ldr	r1, [r3, #4]
 801d2a6:	c403      	stmia	r4!, {r0, r1}
 801d2a8:	a80e      	add	r0, sp, #56	; 0x38
 801d2aa:	f7f9 fe57 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d2ae:	4629      	mov	r1, r5
 801d2b0:	a810      	add	r0, sp, #64	; 0x40
 801d2b2:	f7f9 fe7b 	bl	8016fac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d2b6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d2ba:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d2be:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d2c2:	6838      	ldr	r0, [r7, #0]
 801d2c4:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d2c8:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801d2cc:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801d2d0:	4489      	add	r9, r1
 801d2d2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d2d6:	440a      	add	r2, r1
 801d2d8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d2dc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d2e0:	4413      	add	r3, r2
 801d2e2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d2e6:	6803      	ldr	r3, [r0, #0]
 801d2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d2ea:	4798      	blx	r3
 801d2ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d2f0:	6838      	ldr	r0, [r7, #0]
 801d2f2:	d01d      	beq.n	801d330 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801d2f4:	210b      	movs	r1, #11
 801d2f6:	6802      	ldr	r2, [r0, #0]
 801d2f8:	b2a4      	uxth	r4, r4
 801d2fa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d2fe:	9107      	str	r1, [sp, #28]
 801d300:	b2ad      	uxth	r5, r5
 801d302:	e9cd 6608 	strd	r6, r6, [sp, #32]
 801d306:	f8bb 1000 	ldrh.w	r1, [fp]
 801d30a:	9502      	str	r5, [sp, #8]
 801d30c:	9106      	str	r1, [sp, #24]
 801d30e:	2101      	movs	r1, #1
 801d310:	9401      	str	r4, [sp, #4]
 801d312:	e9cd a104 	strd	sl, r1, [sp, #16]
 801d316:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d31a:	9103      	str	r1, [sp, #12]
 801d31c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 801d320:	9100      	str	r1, [sp, #0]
 801d322:	4649      	mov	r1, r9
 801d324:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 801d326:	4642      	mov	r2, r8
 801d328:	47a0      	blx	r4
 801d32a:	b013      	add	sp, #76	; 0x4c
 801d32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d330:	6803      	ldr	r3, [r0, #0]
 801d332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d334:	4798      	blx	r3
 801d336:	f8bb 3000 	ldrh.w	r3, [fp]
 801d33a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801d33e:	f04f 0e04 	mov.w	lr, #4
 801d342:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801d346:	435d      	muls	r5, r3
 801d348:	fb03 1202 	mla	r2, r3, r2, r1
 801d34c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d350:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801d354:	920c      	str	r2, [sp, #48]	; 0x30
 801d356:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801d35a:	1b12      	subs	r2, r2, r4
 801d35c:	920d      	str	r2, [sp, #52]	; 0x34
 801d35e:	0062      	lsls	r2, r4, #1
 801d360:	1b1c      	subs	r4, r3, r4
 801d362:	920a      	str	r2, [sp, #40]	; 0x28
 801d364:	0063      	lsls	r3, r4, #1
 801d366:	930b      	str	r3, [sp, #44]	; 0x2c
 801d368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d36a:	4298      	cmp	r0, r3
 801d36c:	d266      	bcs.n	801d43c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801d36e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d370:	eb00 0b03 	add.w	fp, r0, r3
 801d374:	4558      	cmp	r0, fp
 801d376:	d25c      	bcs.n	801d432 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 801d378:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d37c:	fb1e e303 	smlabb	r3, lr, r3, lr
 801d380:	f858 2003 	ldr.w	r2, [r8, r3]
 801d384:	0e11      	lsrs	r1, r2, #24
 801d386:	d012      	beq.n	801d3ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801d388:	29ff      	cmp	r1, #255	; 0xff
 801d38a:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801d38e:	d110      	bne.n	801d3b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801d390:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d394:	d10d      	bne.n	801d3b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801d396:	0953      	lsrs	r3, r2, #5
 801d398:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801d39c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d3a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d3a4:	f027 0707 	bic.w	r7, r7, #7
 801d3a8:	431f      	orrs	r7, r3
 801d3aa:	433a      	orrs	r2, r7
 801d3ac:	8002      	strh	r2, [r0, #0]
 801d3ae:	3002      	adds	r0, #2
 801d3b0:	e7e0      	b.n	801d374 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 801d3b2:	fb0a f101 	mul.w	r1, sl, r1
 801d3b6:	8806      	ldrh	r6, [r0, #0]
 801d3b8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801d3bc:	b2d2      	uxtb	r2, r2
 801d3be:	1c4b      	adds	r3, r1, #1
 801d3c0:	1235      	asrs	r5, r6, #8
 801d3c2:	10f4      	asrs	r4, r6, #3
 801d3c4:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801d3c8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d3cc:	00f6      	lsls	r6, r6, #3
 801d3ce:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d3d2:	121b      	asrs	r3, r3, #8
 801d3d4:	b2f6      	uxtb	r6, r6
 801d3d6:	b299      	uxth	r1, r3
 801d3d8:	43db      	mvns	r3, r3
 801d3da:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801d3de:	fb1c fc01 	smulbb	ip, ip, r1
 801d3e2:	b2db      	uxtb	r3, r3
 801d3e4:	fb12 f201 	smulbb	r2, r2, r1
 801d3e8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d3ec:	fb05 c503 	mla	r5, r5, r3, ip
 801d3f0:	b2ff      	uxtb	r7, r7
 801d3f2:	fb06 2203 	mla	r2, r6, r3, r2
 801d3f6:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d3fa:	fb17 f701 	smulbb	r7, r7, r1
 801d3fe:	b2ad      	uxth	r5, r5
 801d400:	b292      	uxth	r2, r2
 801d402:	fb04 7403 	mla	r4, r4, r3, r7
 801d406:	f105 0c01 	add.w	ip, r5, #1
 801d40a:	1c57      	adds	r7, r2, #1
 801d40c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d410:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d414:	b2a4      	uxth	r4, r4
 801d416:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d41a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d41e:	433d      	orrs	r5, r7
 801d420:	1c67      	adds	r7, r4, #1
 801d422:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801d426:	0964      	lsrs	r4, r4, #5
 801d428:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d42c:	4325      	orrs	r5, r4
 801d42e:	8005      	strh	r5, [r0, #0]
 801d430:	e7bd      	b.n	801d3ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801d432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d434:	4418      	add	r0, r3
 801d436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d438:	4499      	add	r9, r3
 801d43a:	e795      	b.n	801d368 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801d43c:	4b05      	ldr	r3, [pc, #20]	; (801d454 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d43e:	6818      	ldr	r0, [r3, #0]
 801d440:	6803      	ldr	r3, [r0, #0]
 801d442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d444:	4798      	blx	r3
 801d446:	e770      	b.n	801d32a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 801d448:	08029fdb 	.word	0x08029fdb
 801d44c:	0802a733 	.word	0x0802a733
 801d450:	0802a0dd 	.word	0x0802a0dd
 801d454:	2400aeec 	.word	0x2400aeec
 801d458:	2400aee6 	.word	0x2400aee6

0801d45c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801d45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d460:	4614      	mov	r4, r2
 801d462:	880a      	ldrh	r2, [r1, #0]
 801d464:	b087      	sub	sp, #28
 801d466:	4680      	mov	r8, r0
 801d468:	2a02      	cmp	r2, #2
 801d46a:	460d      	mov	r5, r1
 801d46c:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801d470:	d006      	beq.n	801d480 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801d472:	4b63      	ldr	r3, [pc, #396]	; (801d600 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 801d474:	f240 11e1 	movw	r1, #481	; 0x1e1
 801d478:	4a62      	ldr	r2, [pc, #392]	; (801d604 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d47a:	4863      	ldr	r0, [pc, #396]	; (801d608 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 801d47c:	f008 fc0c 	bl	8025c98 <__assert_func>
 801d480:	2e00      	cmp	r6, #0
 801d482:	f000 80b9 	beq.w	801d5f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 801d486:	6820      	ldr	r0, [r4, #0]
 801d488:	af02      	add	r7, sp, #8
 801d48a:	6861      	ldr	r1, [r4, #4]
 801d48c:	c703      	stmia	r7!, {r0, r1}
 801d48e:	6818      	ldr	r0, [r3, #0]
 801d490:	af04      	add	r7, sp, #16
 801d492:	6859      	ldr	r1, [r3, #4]
 801d494:	c703      	stmia	r7!, {r0, r1}
 801d496:	a802      	add	r0, sp, #8
 801d498:	f7f9 fd60 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d49c:	4621      	mov	r1, r4
 801d49e:	a804      	add	r0, sp, #16
 801d4a0:	f7f9 fd84 	bl	8016fac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d4a4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d4a8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d4ac:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801d4b0:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801d4b4:	fb14 2103 	smlabb	r1, r4, r3, r2
 801d4b8:	eb08 0401 	add.w	r4, r8, r1
 801d4bc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d4c0:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d4c4:	440a      	add	r2, r1
 801d4c6:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801d4ca:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d4ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d4d2:	4413      	add	r3, r2
 801d4d4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d4d8:	4b4c      	ldr	r3, [pc, #304]	; (801d60c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801d4da:	6818      	ldr	r0, [r3, #0]
 801d4dc:	6803      	ldr	r3, [r0, #0]
 801d4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4e0:	4798      	blx	r3
 801d4e2:	4b4b      	ldr	r3, [pc, #300]	; (801d610 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801d4e4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801d4e8:	2eff      	cmp	r6, #255	; 0xff
 801d4ea:	881a      	ldrh	r2, [r3, #0]
 801d4ec:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801d4f0:	fb02 c101 	mla	r1, r2, r1, ip
 801d4f4:	fb02 f207 	mul.w	r2, r2, r7
 801d4f8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d4fc:	f105 0104 	add.w	r1, r5, #4
 801d500:	461d      	mov	r5, r3
 801d502:	d05a      	beq.n	801d5ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 801d504:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801d508:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d50c:	b2b6      	uxth	r6, r6
 801d50e:	9301      	str	r3, [sp, #4]
 801d510:	fa1f fe8e 	uxth.w	lr, lr
 801d514:	4282      	cmp	r2, r0
 801d516:	d96a      	bls.n	801d5ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801d518:	eb00 0b0a 	add.w	fp, r0, sl
 801d51c:	4583      	cmp	fp, r0
 801d51e:	d940      	bls.n	801d5a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 801d520:	8805      	ldrh	r5, [r0, #0]
 801d522:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d526:	122f      	asrs	r7, r5, #8
 801d528:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d52c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d530:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d534:	00ed      	lsls	r5, r5, #3
 801d536:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d53a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d53e:	fb17 f70e 	smulbb	r7, r7, lr
 801d542:	b2ed      	uxtb	r5, r5
 801d544:	fb19 f90e 	smulbb	r9, r9, lr
 801d548:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d54c:	fb15 f50e 	smulbb	r5, r5, lr
 801d550:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d554:	10df      	asrs	r7, r3, #3
 801d556:	00db      	lsls	r3, r3, #3
 801d558:	fa1f fc8c 	uxth.w	ip, ip
 801d55c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d560:	b2db      	uxtb	r3, r3
 801d562:	fb07 9706 	mla	r7, r7, r6, r9
 801d566:	f10c 0901 	add.w	r9, ip, #1
 801d56a:	fb03 5306 	mla	r3, r3, r6, r5
 801d56e:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d572:	b29b      	uxth	r3, r3
 801d574:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801d578:	b2bf      	uxth	r7, r7
 801d57a:	f103 0c01 	add.w	ip, r3, #1
 801d57e:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d582:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d586:	ea4c 0c09 	orr.w	ip, ip, r9
 801d58a:	f107 0901 	add.w	r9, r7, #1
 801d58e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d592:	097f      	lsrs	r7, r7, #5
 801d594:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d598:	ea4c 0c07 	orr.w	ip, ip, r7
 801d59c:	f820 cb02 	strh.w	ip, [r0], #2
 801d5a0:	e7bc      	b.n	801d51c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801d5a2:	9b01      	ldr	r3, [sp, #4]
 801d5a4:	881b      	ldrh	r3, [r3, #0]
 801d5a6:	eba3 0308 	sub.w	r3, r3, r8
 801d5aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d5ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d5b2:	eba3 0308 	sub.w	r3, r3, r8
 801d5b6:	441c      	add	r4, r3
 801d5b8:	e7ac      	b.n	801d514 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 801d5ba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d5be:	4282      	cmp	r2, r0
 801d5c0:	d915      	bls.n	801d5ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801d5c2:	eb00 060a 	add.w	r6, r0, sl
 801d5c6:	4286      	cmp	r6, r0
 801d5c8:	d906      	bls.n	801d5d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 801d5ca:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d5ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d5d2:	f820 3b02 	strh.w	r3, [r0], #2
 801d5d6:	e7f6      	b.n	801d5c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 801d5d8:	882b      	ldrh	r3, [r5, #0]
 801d5da:	eba3 0308 	sub.w	r3, r3, r8
 801d5de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d5e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d5e6:	eba3 0308 	sub.w	r3, r3, r8
 801d5ea:	441c      	add	r4, r3
 801d5ec:	e7e7      	b.n	801d5be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 801d5ee:	4b07      	ldr	r3, [pc, #28]	; (801d60c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801d5f0:	6818      	ldr	r0, [r3, #0]
 801d5f2:	6803      	ldr	r3, [r0, #0]
 801d5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5f6:	4798      	blx	r3
 801d5f8:	b007      	add	sp, #28
 801d5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5fe:	bf00      	nop
 801d600:	08029f0b 	.word	0x08029f0b
 801d604:	0802a59d 	.word	0x0802a59d
 801d608:	0802a0dd 	.word	0x0802a0dd
 801d60c:	2400aeec 	.word	0x2400aeec
 801d610:	2400aee6 	.word	0x2400aee6

0801d614 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d618:	f8b1 9000 	ldrh.w	r9, [r1]
 801d61c:	b091      	sub	sp, #68	; 0x44
 801d61e:	4604      	mov	r4, r0
 801d620:	460f      	mov	r7, r1
 801d622:	f1b9 0f01 	cmp.w	r9, #1
 801d626:	4690      	mov	r8, r2
 801d628:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801d62c:	d006      	beq.n	801d63c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 801d62e:	4b84      	ldr	r3, [pc, #528]	; (801d840 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 801d630:	f240 212f 	movw	r1, #559	; 0x22f
 801d634:	4a83      	ldr	r2, [pc, #524]	; (801d844 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 801d636:	4884      	ldr	r0, [pc, #528]	; (801d848 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 801d638:	f008 fb2e 	bl	8025c98 <__assert_func>
 801d63c:	2d00      	cmp	r5, #0
 801d63e:	d04f      	beq.n	801d6e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801d640:	6810      	ldr	r0, [r2, #0]
 801d642:	ae0c      	add	r6, sp, #48	; 0x30
 801d644:	6851      	ldr	r1, [r2, #4]
 801d646:	f8df b208 	ldr.w	fp, [pc, #520]	; 801d850 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 801d64a:	c603      	stmia	r6!, {r0, r1}
 801d64c:	6818      	ldr	r0, [r3, #0]
 801d64e:	ae0e      	add	r6, sp, #56	; 0x38
 801d650:	6859      	ldr	r1, [r3, #4]
 801d652:	c603      	stmia	r6!, {r0, r1}
 801d654:	a80c      	add	r0, sp, #48	; 0x30
 801d656:	f7f9 fc81 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d65a:	4641      	mov	r1, r8
 801d65c:	a80e      	add	r0, sp, #56	; 0x38
 801d65e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 801d854 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 801d662:	f7f9 fca3 	bl	8016fac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d666:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d66a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d66e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d672:	f8db 0000 	ldr.w	r0, [fp]
 801d676:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d67a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801d67e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801d682:	440c      	add	r4, r1
 801d684:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d688:	440a      	add	r2, r1
 801d68a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d68e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d692:	4413      	add	r3, r2
 801d694:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d698:	6803      	ldr	r3, [r0, #0]
 801d69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d69c:	4798      	blx	r3
 801d69e:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d6a2:	f8db 0000 	ldr.w	r0, [fp]
 801d6a6:	d01e      	beq.n	801d6e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 801d6a8:	2200      	movs	r2, #0
 801d6aa:	6801      	ldr	r1, [r0, #0]
 801d6ac:	b2b6      	uxth	r6, r6
 801d6ae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d6b2:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d6b6:	220b      	movs	r2, #11
 801d6b8:	9207      	str	r2, [sp, #28]
 801d6ba:	f8b8 2000 	ldrh.w	r2, [r8]
 801d6be:	9504      	str	r5, [sp, #16]
 801d6c0:	9601      	str	r6, [sp, #4]
 801d6c2:	e9cd 9205 	strd	r9, r2, [sp, #20]
 801d6c6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d6ca:	9203      	str	r2, [sp, #12]
 801d6cc:	fa1f f28a 	uxth.w	r2, sl
 801d6d0:	9202      	str	r2, [sp, #8]
 801d6d2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d6d6:	9200      	str	r2, [sp, #0]
 801d6d8:	463a      	mov	r2, r7
 801d6da:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801d6dc:	4621      	mov	r1, r4
 801d6de:	47a8      	blx	r5
 801d6e0:	b011      	add	sp, #68	; 0x44
 801d6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6e6:	6803      	ldr	r3, [r0, #0]
 801d6e8:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801d6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d6ee:	4798      	blx	r3
 801d6f0:	f8b8 2000 	ldrh.w	r2, [r8]
 801d6f4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d6f8:	2dff      	cmp	r5, #255	; 0xff
 801d6fa:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801d6fe:	fb0a fa02 	mul.w	sl, sl, r2
 801d702:	fb02 1303 	mla	r3, r2, r3, r1
 801d706:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d70a:	d062      	beq.n	801d7d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 801d70c:	ea6f 0c05 	mvn.w	ip, r5
 801d710:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801d714:	b2ad      	uxth	r5, r5
 801d716:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801d71a:	fa5f fc8c 	uxtb.w	ip, ip
 801d71e:	930a      	str	r3, [sp, #40]	; 0x28
 801d720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d722:	4298      	cmp	r0, r3
 801d724:	f080 8085 	bcs.w	801d832 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801d728:	eb00 0b09 	add.w	fp, r0, r9
 801d72c:	4558      	cmp	r0, fp
 801d72e:	d246      	bcs.n	801d7be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801d730:	f814 eb01 	ldrb.w	lr, [r4], #1
 801d734:	2303      	movs	r3, #3
 801d736:	2204      	movs	r2, #4
 801d738:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801d73c:	8803      	ldrh	r3, [r0, #0]
 801d73e:	eb07 0a0e 	add.w	sl, r7, lr
 801d742:	1219      	asrs	r1, r3, #8
 801d744:	10da      	asrs	r2, r3, #3
 801d746:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d74a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801d74e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d752:	00db      	lsls	r3, r3, #3
 801d754:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d758:	fb18 f805 	smulbb	r8, r8, r5
 801d75c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801d760:	fb1e fe05 	smulbb	lr, lr, r5
 801d764:	b2db      	uxtb	r3, r3
 801d766:	fb01 810c 	mla	r1, r1, ip, r8
 801d76a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d76e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801d772:	fb18 f805 	smulbb	r8, r8, r5
 801d776:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801d77a:	b289      	uxth	r1, r1
 801d77c:	fb02 820c 	mla	r2, r2, ip, r8
 801d780:	fb03 e30c 	mla	r3, r3, ip, lr
 801d784:	f101 0801 	add.w	r8, r1, #1
 801d788:	b292      	uxth	r2, r2
 801d78a:	b29b      	uxth	r3, r3
 801d78c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d790:	f102 0801 	add.w	r8, r2, #1
 801d794:	f103 0e01 	add.w	lr, r3, #1
 801d798:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801d79c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d7a0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801d7a4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d7a8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d7ac:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d7b0:	ea4e 0101 	orr.w	r1, lr, r1
 801d7b4:	ea41 0108 	orr.w	r1, r1, r8
 801d7b8:	f820 1b02 	strh.w	r1, [r0], #2
 801d7bc:	e7b6      	b.n	801d72c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 801d7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d7c0:	881b      	ldrh	r3, [r3, #0]
 801d7c2:	1b9b      	subs	r3, r3, r6
 801d7c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d7c8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d7cc:	1b9b      	subs	r3, r3, r6
 801d7ce:	441c      	add	r4, r3
 801d7d0:	e7a6      	b.n	801d720 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 801d7d2:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801d7d6:	2203      	movs	r2, #3
 801d7d8:	2504      	movs	r5, #4
 801d7da:	491c      	ldr	r1, [pc, #112]	; (801d84c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 801d7dc:	4550      	cmp	r0, sl
 801d7de:	d228      	bcs.n	801d832 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801d7e0:	eb00 0c09 	add.w	ip, r0, r9
 801d7e4:	4560      	cmp	r0, ip
 801d7e6:	4623      	mov	r3, r4
 801d7e8:	d219      	bcs.n	801d81e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801d7ea:	f893 e000 	ldrb.w	lr, [r3]
 801d7ee:	3401      	adds	r4, #1
 801d7f0:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801d7f4:	eb07 0b0e 	add.w	fp, r7, lr
 801d7f8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d7fc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d800:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d804:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801d808:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801d80c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d810:	ea43 030b 	orr.w	r3, r3, fp
 801d814:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801d818:	f820 3b02 	strh.w	r3, [r0], #2
 801d81c:	e7e2      	b.n	801d7e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801d81e:	f8b8 3000 	ldrh.w	r3, [r8]
 801d822:	1b9b      	subs	r3, r3, r6
 801d824:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d828:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d82c:	1b9b      	subs	r3, r3, r6
 801d82e:	441c      	add	r4, r3
 801d830:	e7d4      	b.n	801d7dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801d832:	4b07      	ldr	r3, [pc, #28]	; (801d850 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 801d834:	6818      	ldr	r0, [r3, #0]
 801d836:	6803      	ldr	r3, [r0, #0]
 801d838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d83a:	4798      	blx	r3
 801d83c:	e750      	b.n	801d6e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801d83e:	bf00      	nop
 801d840:	08029f59 	.word	0x08029f59
 801d844:	0802a626 	.word	0x0802a626
 801d848:	0802a0dd 	.word	0x0802a0dd
 801d84c:	fffff800 	.word	0xfffff800
 801d850:	2400aeec 	.word	0x2400aeec
 801d854:	2400aee6 	.word	0x2400aee6

0801d858 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d858:	b430      	push	{r4, r5}
 801d85a:	780d      	ldrb	r5, [r1, #0]
 801d85c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801d860:	2d01      	cmp	r5, #1
 801d862:	d00a      	beq.n	801d87a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801d864:	d305      	bcc.n	801d872 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801d866:	2d02      	cmp	r5, #2
 801d868:	d10b      	bne.n	801d882 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801d86a:	9402      	str	r4, [sp, #8]
 801d86c:	bc30      	pop	{r4, r5}
 801d86e:	f7ff bdf5 	b.w	801d45c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801d872:	9402      	str	r4, [sp, #8]
 801d874:	bc30      	pop	{r4, r5}
 801d876:	f7ff bcfb 	b.w	801d270 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d87a:	9402      	str	r4, [sp, #8]
 801d87c:	bc30      	pop	{r4, r5}
 801d87e:	f7ff bec9 	b.w	801d614 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d882:	bc30      	pop	{r4, r5}
 801d884:	4770      	bx	lr
	...

0801d888 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d88c:	b087      	sub	sp, #28
 801d88e:	4604      	mov	r4, r0
 801d890:	460e      	mov	r6, r1
 801d892:	6810      	ldr	r0, [r2, #0]
 801d894:	6851      	ldr	r1, [r2, #4]
 801d896:	ad02      	add	r5, sp, #8
 801d898:	4617      	mov	r7, r2
 801d89a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801d89e:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801dad0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801d8a2:	c503      	stmia	r5!, {r0, r1}
 801d8a4:	6818      	ldr	r0, [r3, #0]
 801d8a6:	ad04      	add	r5, sp, #16
 801d8a8:	6859      	ldr	r1, [r3, #4]
 801d8aa:	c503      	stmia	r5!, {r0, r1}
 801d8ac:	a802      	add	r0, sp, #8
 801d8ae:	f7f9 fb55 	bl	8016f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d8b2:	4639      	mov	r1, r7
 801d8b4:	a804      	add	r0, sp, #16
 801d8b6:	f7f9 fb79 	bl	8016fac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d8ba:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d8be:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d8c2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d8c6:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d8ca:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d8ce:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d8d2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d8d6:	440e      	add	r6, r1
 801d8d8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d8dc:	440a      	add	r2, r1
 801d8de:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d8e2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d8e6:	4413      	add	r3, r2
 801d8e8:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d8ec:	4b77      	ldr	r3, [pc, #476]	; (801dacc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d8ee:	6818      	ldr	r0, [r3, #0]
 801d8f0:	6803      	ldr	r3, [r0, #0]
 801d8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d8f4:	4798      	blx	r3
 801d8f6:	f8b9 b000 	ldrh.w	fp, [r9]
 801d8fa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d8fe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d902:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d906:	fb05 f50b 	mul.w	r5, r5, fp
 801d90a:	fb0b 2303 	mla	r3, fp, r3, r2
 801d90e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d912:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d916:	9300      	str	r3, [sp, #0]
 801d918:	d069      	beq.n	801d9ee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801d91a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801d91e:	4558      	cmp	r0, fp
 801d920:	f080 80cc 	bcs.w	801dabc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d924:	9b00      	ldr	r3, [sp, #0]
 801d926:	4631      	mov	r1, r6
 801d928:	18c3      	adds	r3, r0, r3
 801d92a:	9301      	str	r3, [sp, #4]
 801d92c:	9b01      	ldr	r3, [sp, #4]
 801d92e:	4298      	cmp	r0, r3
 801d930:	d24f      	bcs.n	801d9d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801d932:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d936:	2a00      	cmp	r2, #0
 801d938:	d048      	beq.n	801d9cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d93a:	fb0a f202 	mul.w	r2, sl, r2
 801d93e:	1c53      	adds	r3, r2, #1
 801d940:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d944:	121b      	asrs	r3, r3, #8
 801d946:	d041      	beq.n	801d9cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d948:	8802      	ldrh	r2, [r0, #0]
 801d94a:	b29e      	uxth	r6, r3
 801d94c:	f8b4 c000 	ldrh.w	ip, [r4]
 801d950:	43db      	mvns	r3, r3
 801d952:	1215      	asrs	r5, r2, #8
 801d954:	b2db      	uxtb	r3, r3
 801d956:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d95a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d95e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801d962:	fb15 f503 	smulbb	r5, r5, r3
 801d966:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d96a:	00d2      	lsls	r2, r2, #3
 801d96c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d970:	fb07 5706 	mla	r7, r7, r6, r5
 801d974:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d978:	b2d2      	uxtb	r2, r2
 801d97a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d97e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d982:	fb1e fe03 	smulbb	lr, lr, r3
 801d986:	b2bf      	uxth	r7, r7
 801d988:	fb12 f203 	smulbb	r2, r2, r3
 801d98c:	fa5f fc8c 	uxtb.w	ip, ip
 801d990:	fb05 e506 	mla	r5, r5, r6, lr
 801d994:	f107 0e01 	add.w	lr, r7, #1
 801d998:	fb0c 2c06 	mla	ip, ip, r6, r2
 801d99c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d9a0:	fa1f fc8c 	uxth.w	ip, ip
 801d9a4:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801d9a8:	b2ad      	uxth	r5, r5
 801d9aa:	f10c 0701 	add.w	r7, ip, #1
 801d9ae:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d9b2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d9b6:	ea47 070e 	orr.w	r7, r7, lr
 801d9ba:	f105 0e01 	add.w	lr, r5, #1
 801d9be:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801d9c2:	096d      	lsrs	r5, r5, #5
 801d9c4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d9c8:	432f      	orrs	r7, r5
 801d9ca:	8007      	strh	r7, [r0, #0]
 801d9cc:	3002      	adds	r0, #2
 801d9ce:	3402      	adds	r4, #2
 801d9d0:	e7ac      	b.n	801d92c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801d9d2:	f8b9 3000 	ldrh.w	r3, [r9]
 801d9d6:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d9da:	eba3 0308 	sub.w	r3, r3, r8
 801d9de:	eba6 0608 	sub.w	r6, r6, r8
 801d9e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d9e6:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d9ea:	440e      	add	r6, r1
 801d9ec:	e797      	b.n	801d91e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801d9ee:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801d9f2:	42a8      	cmp	r0, r5
 801d9f4:	d262      	bcs.n	801dabc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d9f6:	9b00      	ldr	r3, [sp, #0]
 801d9f8:	4631      	mov	r1, r6
 801d9fa:	eb00 0b03 	add.w	fp, r0, r3
 801d9fe:	4558      	cmp	r0, fp
 801da00:	d24e      	bcs.n	801daa0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801da02:	f811 3b01 	ldrb.w	r3, [r1], #1
 801da06:	b12b      	cbz	r3, 801da14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801da08:	2bff      	cmp	r3, #255	; 0xff
 801da0a:	f8b4 e000 	ldrh.w	lr, [r4]
 801da0e:	d104      	bne.n	801da1a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801da10:	f8a0 e000 	strh.w	lr, [r0]
 801da14:	3002      	adds	r0, #2
 801da16:	3402      	adds	r4, #2
 801da18:	e7f1      	b.n	801d9fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801da1a:	8802      	ldrh	r2, [r0, #0]
 801da1c:	b29f      	uxth	r7, r3
 801da1e:	43db      	mvns	r3, r3
 801da20:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801da24:	1216      	asrs	r6, r2, #8
 801da26:	b2db      	uxtb	r3, r3
 801da28:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801da2c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801da30:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801da34:	00d2      	lsls	r2, r2, #3
 801da36:	fb16 f603 	smulbb	r6, r6, r3
 801da3a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801da3e:	b2d2      	uxtb	r2, r2
 801da40:	fb0c 6c07 	mla	ip, ip, r7, r6
 801da44:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801da48:	fb1a fa03 	smulbb	sl, sl, r3
 801da4c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801da50:	fa1f fc8c 	uxth.w	ip, ip
 801da54:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801da58:	fb12 f303 	smulbb	r3, r2, r3
 801da5c:	fa5f fe8e 	uxtb.w	lr, lr
 801da60:	fb06 a607 	mla	r6, r6, r7, sl
 801da64:	f10c 0201 	add.w	r2, ip, #1
 801da68:	fb0e 3307 	mla	r3, lr, r7, r3
 801da6c:	b2b6      	uxth	r6, r6
 801da6e:	b29b      	uxth	r3, r3
 801da70:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801da74:	f106 0a01 	add.w	sl, r6, #1
 801da78:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801da7c:	f103 0c01 	add.w	ip, r3, #1
 801da80:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801da84:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801da88:	0976      	lsrs	r6, r6, #5
 801da8a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801da8e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801da92:	ea4c 0c02 	orr.w	ip, ip, r2
 801da96:	ea4c 0c06 	orr.w	ip, ip, r6
 801da9a:	f8a0 c000 	strh.w	ip, [r0]
 801da9e:	e7b9      	b.n	801da14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801daa0:	f8b9 3000 	ldrh.w	r3, [r9]
 801daa4:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801daa8:	eba3 0308 	sub.w	r3, r3, r8
 801daac:	eba6 0608 	sub.w	r6, r6, r8
 801dab0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dab4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801dab8:	440e      	add	r6, r1
 801daba:	e79a      	b.n	801d9f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801dabc:	4b03      	ldr	r3, [pc, #12]	; (801dacc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801dabe:	6818      	ldr	r0, [r3, #0]
 801dac0:	6803      	ldr	r3, [r0, #0]
 801dac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dac4:	4798      	blx	r3
 801dac6:	b007      	add	sp, #28
 801dac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dacc:	2400aeec 	.word	0x2400aeec
 801dad0:	2400aee6 	.word	0x2400aee6

0801dad4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dad8:	b089      	sub	sp, #36	; 0x24
 801dada:	4682      	mov	sl, r0
 801dadc:	460f      	mov	r7, r1
 801dade:	4691      	mov	r9, r2
 801dae0:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801dae4:	4698      	mov	r8, r3
 801dae6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dae8:	2e00      	cmp	r6, #0
 801daea:	d03d      	beq.n	801db68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801daec:	4608      	mov	r0, r1
 801daee:	f7fc f861 	bl	8019bb4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801daf2:	4605      	mov	r5, r0
 801daf4:	4638      	mov	r0, r7
 801daf6:	f7fc f897 	bl	8019c28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dafa:	f8ad 000e 	strh.w	r0, [sp, #14]
 801dafe:	4638      	mov	r0, r7
 801db00:	f8ad 9008 	strh.w	r9, [sp, #8]
 801db04:	f8ad 500c 	strh.w	r5, [sp, #12]
 801db08:	f8ad 800a 	strh.w	r8, [sp, #10]
 801db0c:	f7fc f95a 	bl	8019dc4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801db10:	4605      	mov	r5, r0
 801db12:	4638      	mov	r0, r7
 801db14:	f7fc f988 	bl	8019e28 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801db18:	4681      	mov	r9, r0
 801db1a:	4638      	mov	r0, r7
 801db1c:	f7fc f9dc 	bl	8019ed8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801db20:	280b      	cmp	r0, #11
 801db22:	f200 816f 	bhi.w	801de04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 801db26:	e8df f010 	tbh	[pc, r0, lsl #1]
 801db2a:	00c3      	.short	0x00c3
 801db2c:	000c00b4 	.word	0x000c00b4
 801db30:	016d016d 	.word	0x016d016d
 801db34:	016d016d 	.word	0x016d016d
 801db38:	016d016d 	.word	0x016d016d
 801db3c:	016d016d 	.word	0x016d016d
 801db40:	00bb      	.short	0x00bb
 801db42:	4bb3      	ldr	r3, [pc, #716]	; (801de10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 801db44:	6818      	ldr	r0, [r3, #0]
 801db46:	6803      	ldr	r3, [r0, #0]
 801db48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db4a:	4798      	blx	r3
 801db4c:	2eff      	cmp	r6, #255	; 0xff
 801db4e:	d121      	bne.n	801db94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801db50:	0683      	lsls	r3, r0, #26
 801db52:	d41f      	bmi.n	801db94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801db54:	4638      	mov	r0, r7
 801db56:	f7fc f8fb 	bl	8019d50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801db5a:	b940      	cbnz	r0, 801db6e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801db5c:	4623      	mov	r3, r4
 801db5e:	aa02      	add	r2, sp, #8
 801db60:	4629      	mov	r1, r5
 801db62:	4650      	mov	r0, sl
 801db64:	f7ff f9e4 	bl	801cf30 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801db68:	b009      	add	sp, #36	; 0x24
 801db6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db6e:	f10d 0818 	add.w	r8, sp, #24
 801db72:	4639      	mov	r1, r7
 801db74:	af04      	add	r7, sp, #16
 801db76:	4640      	mov	r0, r8
 801db78:	f7fc f890 	bl	8019c9c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801db7c:	e898 0003 	ldmia.w	r8, {r0, r1}
 801db80:	e887 0003 	stmia.w	r7, {r0, r1}
 801db84:	4638      	mov	r0, r7
 801db86:	4621      	mov	r1, r4
 801db88:	f7f5 fc4c 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 801db8c:	4638      	mov	r0, r7
 801db8e:	f7f5 fc8c 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801db92:	b130      	cbz	r0, 801dba2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 801db94:	4633      	mov	r3, r6
 801db96:	4622      	mov	r2, r4
 801db98:	a902      	add	r1, sp, #8
 801db9a:	4628      	mov	r0, r5
 801db9c:	f7ff f8e2 	bl	801cd64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dba0:	e7e2      	b.n	801db68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dba2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dba6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801dbaa:	4293      	cmp	r3, r2
 801dbac:	dd12      	ble.n	801dbd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 801dbae:	1a9b      	subs	r3, r3, r2
 801dbb0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801dbb4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dbb8:	f8ad 0018 	strh.w	r0, [sp, #24]
 801dbbc:	4628      	mov	r0, r5
 801dbbe:	f8ad 201a 	strh.w	r2, [sp, #26]
 801dbc2:	4642      	mov	r2, r8
 801dbc4:	f8ad 101c 	strh.w	r1, [sp, #28]
 801dbc8:	a902      	add	r1, sp, #8
 801dbca:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dbce:	4633      	mov	r3, r6
 801dbd0:	f7ff f8c8 	bl	801cd64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dbd4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801dbd8:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dbdc:	4293      	cmp	r3, r2
 801dbde:	dd12      	ble.n	801dc06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 801dbe0:	1a9b      	subs	r3, r3, r2
 801dbe2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801dbe6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801dbea:	f8ad 2018 	strh.w	r2, [sp, #24]
 801dbee:	4642      	mov	r2, r8
 801dbf0:	f8ad 001a 	strh.w	r0, [sp, #26]
 801dbf4:	4628      	mov	r0, r5
 801dbf6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dbfa:	23ff      	movs	r3, #255	; 0xff
 801dbfc:	f8ad 101e 	strh.w	r1, [sp, #30]
 801dc00:	a902      	add	r1, sp, #8
 801dc02:	f7ff f8af 	bl	801cd64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dc06:	463b      	mov	r3, r7
 801dc08:	aa02      	add	r2, sp, #8
 801dc0a:	4629      	mov	r1, r5
 801dc0c:	4650      	mov	r0, sl
 801dc0e:	f7ff f98f 	bl	801cf30 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801dc12:	88a2      	ldrh	r2, [r4, #4]
 801dc14:	8823      	ldrh	r3, [r4, #0]
 801dc16:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801dc1a:	4413      	add	r3, r2
 801dc1c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dc20:	440a      	add	r2, r1
 801dc22:	b29b      	uxth	r3, r3
 801dc24:	b292      	uxth	r2, r2
 801dc26:	b218      	sxth	r0, r3
 801dc28:	b211      	sxth	r1, r2
 801dc2a:	4288      	cmp	r0, r1
 801dc2c:	dd12      	ble.n	801dc54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 801dc2e:	1a9b      	subs	r3, r3, r2
 801dc30:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801dc34:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801dc38:	4642      	mov	r2, r8
 801dc3a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801dc3e:	a902      	add	r1, sp, #8
 801dc40:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dc44:	23ff      	movs	r3, #255	; 0xff
 801dc46:	f8ad 001e 	strh.w	r0, [sp, #30]
 801dc4a:	4628      	mov	r0, r5
 801dc4c:	f8ad 601a 	strh.w	r6, [sp, #26]
 801dc50:	f7ff f888 	bl	801cd64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dc54:	88e2      	ldrh	r2, [r4, #6]
 801dc56:	8863      	ldrh	r3, [r4, #2]
 801dc58:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801dc5c:	4413      	add	r3, r2
 801dc5e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801dc62:	440a      	add	r2, r1
 801dc64:	b29b      	uxth	r3, r3
 801dc66:	b292      	uxth	r2, r2
 801dc68:	b218      	sxth	r0, r3
 801dc6a:	b211      	sxth	r1, r2
 801dc6c:	4288      	cmp	r0, r1
 801dc6e:	f77f af7b 	ble.w	801db68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dc72:	1a9b      	subs	r3, r3, r2
 801dc74:	f9b4 6000 	ldrsh.w	r6, [r4]
 801dc78:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801dc7c:	4642      	mov	r2, r8
 801dc7e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dc82:	23ff      	movs	r3, #255	; 0xff
 801dc84:	f8ad 6018 	strh.w	r6, [sp, #24]
 801dc88:	f8ad 101a 	strh.w	r1, [sp, #26]
 801dc8c:	f8ad 001c 	strh.w	r0, [sp, #28]
 801dc90:	e782      	b.n	801db98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801dc92:	4633      	mov	r3, r6
 801dc94:	4622      	mov	r2, r4
 801dc96:	a902      	add	r1, sp, #8
 801dc98:	4628      	mov	r0, r5
 801dc9a:	f7ff f9b9 	bl	801d010 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801dc9e:	e763      	b.n	801db68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dca0:	9600      	str	r6, [sp, #0]
 801dca2:	4623      	mov	r3, r4
 801dca4:	aa02      	add	r2, sp, #8
 801dca6:	4649      	mov	r1, r9
 801dca8:	4628      	mov	r0, r5
 801dcaa:	f7ff fdd5 	bl	801d858 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801dcae:	e75b      	b.n	801db68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dcb0:	4638      	mov	r0, r7
 801dcb2:	f7fc f84d 	bl	8019d50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801dcb6:	b950      	cbnz	r0, 801dcce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 801dcb8:	f8da 3000 	ldr.w	r3, [sl]
 801dcbc:	aa02      	add	r2, sp, #8
 801dcbe:	4629      	mov	r1, r5
 801dcc0:	e9cd 6000 	strd	r6, r0, [sp]
 801dcc4:	4650      	mov	r0, sl
 801dcc6:	68de      	ldr	r6, [r3, #12]
 801dcc8:	4623      	mov	r3, r4
 801dcca:	47b0      	blx	r6
 801dccc:	e74c      	b.n	801db68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dcce:	f10d 0818 	add.w	r8, sp, #24
 801dcd2:	4639      	mov	r1, r7
 801dcd4:	af04      	add	r7, sp, #16
 801dcd6:	4640      	mov	r0, r8
 801dcd8:	f7fb ffe0 	bl	8019c9c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801dcdc:	e898 0003 	ldmia.w	r8, {r0, r1}
 801dce0:	e887 0003 	stmia.w	r7, {r0, r1}
 801dce4:	4638      	mov	r0, r7
 801dce6:	4621      	mov	r1, r4
 801dce8:	f7f5 fb9c 	bl	8013424 <_ZN8touchgfx4RectaNERKS0_>
 801dcec:	4638      	mov	r0, r7
 801dcee:	f7f5 fbdc 	bl	80134aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801dcf2:	b138      	cbz	r0, 801dd04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801dcf4:	4623      	mov	r3, r4
 801dcf6:	9600      	str	r6, [sp, #0]
 801dcf8:	aa02      	add	r2, sp, #8
 801dcfa:	4649      	mov	r1, r9
 801dcfc:	4628      	mov	r0, r5
 801dcfe:	f7ff fdc3 	bl	801d888 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dd02:	e731      	b.n	801db68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dd04:	f8da 3000 	ldr.w	r3, [sl]
 801dd08:	aa02      	add	r2, sp, #8
 801dd0a:	4629      	mov	r1, r5
 801dd0c:	e9cd 6000 	strd	r6, r0, [sp]
 801dd10:	4650      	mov	r0, sl
 801dd12:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801dd16:	463b      	mov	r3, r7
 801dd18:	47d8      	blx	fp
 801dd1a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dd1e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801dd22:	4293      	cmp	r3, r2
 801dd24:	dd13      	ble.n	801dd4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 801dd26:	f9b4 0000 	ldrsh.w	r0, [r4]
 801dd2a:	1a9b      	subs	r3, r3, r2
 801dd2c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dd30:	f8ad 0018 	strh.w	r0, [sp, #24]
 801dd34:	4628      	mov	r0, r5
 801dd36:	f8ad 201a 	strh.w	r2, [sp, #26]
 801dd3a:	aa02      	add	r2, sp, #8
 801dd3c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801dd40:	4649      	mov	r1, r9
 801dd42:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dd46:	4643      	mov	r3, r8
 801dd48:	9600      	str	r6, [sp, #0]
 801dd4a:	f7ff fd9d 	bl	801d888 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dd4e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801dd52:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dd56:	4293      	cmp	r3, r2
 801dd58:	dd13      	ble.n	801dd82 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 801dd5a:	1a9b      	subs	r3, r3, r2
 801dd5c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801dd60:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801dd64:	f8ad 2018 	strh.w	r2, [sp, #24]
 801dd68:	aa02      	add	r2, sp, #8
 801dd6a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801dd6e:	4628      	mov	r0, r5
 801dd70:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dd74:	4643      	mov	r3, r8
 801dd76:	f8ad 101e 	strh.w	r1, [sp, #30]
 801dd7a:	4649      	mov	r1, r9
 801dd7c:	9600      	str	r6, [sp, #0]
 801dd7e:	f7ff fd83 	bl	801d888 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801dd82:	88a2      	ldrh	r2, [r4, #4]
 801dd84:	8823      	ldrh	r3, [r4, #0]
 801dd86:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801dd8a:	4413      	add	r3, r2
 801dd8c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dd90:	440a      	add	r2, r1
 801dd92:	b29b      	uxth	r3, r3
 801dd94:	b292      	uxth	r2, r2
 801dd96:	b218      	sxth	r0, r3
 801dd98:	b211      	sxth	r1, r2
 801dd9a:	4288      	cmp	r0, r1
 801dd9c:	dd13      	ble.n	801ddc6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 801dd9e:	1a9b      	subs	r3, r3, r2
 801dda0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801dda4:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801dda8:	aa02      	add	r2, sp, #8
 801ddaa:	f8ad 1018 	strh.w	r1, [sp, #24]
 801ddae:	4649      	mov	r1, r9
 801ddb0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ddb4:	4643      	mov	r3, r8
 801ddb6:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ddba:	4628      	mov	r0, r5
 801ddbc:	9600      	str	r6, [sp, #0]
 801ddbe:	f8ad 701a 	strh.w	r7, [sp, #26]
 801ddc2:	f7ff fd61 	bl	801d888 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ddc6:	88e2      	ldrh	r2, [r4, #6]
 801ddc8:	8863      	ldrh	r3, [r4, #2]
 801ddca:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801ddce:	4413      	add	r3, r2
 801ddd0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ddd4:	440a      	add	r2, r1
 801ddd6:	b29b      	uxth	r3, r3
 801ddd8:	b292      	uxth	r2, r2
 801ddda:	b218      	sxth	r0, r3
 801dddc:	b211      	sxth	r1, r2
 801ddde:	4288      	cmp	r0, r1
 801dde0:	f77f aec2 	ble.w	801db68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dde4:	f9b4 7000 	ldrsh.w	r7, [r4]
 801dde8:	1a9b      	subs	r3, r3, r2
 801ddea:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ddee:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ddf2:	4643      	mov	r3, r8
 801ddf4:	f8ad 7018 	strh.w	r7, [sp, #24]
 801ddf8:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ddfc:	f8ad 001c 	strh.w	r0, [sp, #28]
 801de00:	9600      	str	r6, [sp, #0]
 801de02:	e779      	b.n	801dcf8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801de04:	4b03      	ldr	r3, [pc, #12]	; (801de14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 801de06:	21b4      	movs	r1, #180	; 0xb4
 801de08:	4a03      	ldr	r2, [pc, #12]	; (801de18 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 801de0a:	4804      	ldr	r0, [pc, #16]	; (801de1c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 801de0c:	f007 ff44 	bl	8025c98 <__assert_func>
 801de10:	2400aeec 	.word	0x2400aeec
 801de14:	08029fa7 	.word	0x08029fa7
 801de18:	0802a6af 	.word	0x0802a6af
 801de1c:	0802a0dd 	.word	0x0802a0dd

0801de20 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801de20:	b508      	push	{r3, lr}
 801de22:	b180      	cbz	r0, 801de46 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801de24:	2902      	cmp	r1, #2
 801de26:	d014      	beq.n	801de52 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801de28:	2903      	cmp	r1, #3
 801de2a:	d01d      	beq.n	801de68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801de2c:	2901      	cmp	r1, #1
 801de2e:	d101      	bne.n	801de34 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801de30:	2001      	movs	r0, #1
 801de32:	bd08      	pop	{r3, pc}
 801de34:	4b0e      	ldr	r3, [pc, #56]	; (801de70 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801de36:	8818      	ldrh	r0, [r3, #0]
 801de38:	b990      	cbnz	r0, 801de60 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801de3a:	4b0e      	ldr	r3, [pc, #56]	; (801de74 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801de3c:	2150      	movs	r1, #80	; 0x50
 801de3e:	4a0e      	ldr	r2, [pc, #56]	; (801de78 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801de40:	480e      	ldr	r0, [pc, #56]	; (801de7c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801de42:	f007 ff29 	bl	8025c98 <__assert_func>
 801de46:	2902      	cmp	r1, #2
 801de48:	d00e      	beq.n	801de68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801de4a:	2903      	cmp	r1, #3
 801de4c:	d0f2      	beq.n	801de34 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801de4e:	2901      	cmp	r1, #1
 801de50:	d1ee      	bne.n	801de30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801de52:	4b07      	ldr	r3, [pc, #28]	; (801de70 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801de54:	8818      	ldrh	r0, [r3, #0]
 801de56:	2800      	cmp	r0, #0
 801de58:	d0ef      	beq.n	801de3a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801de5a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801de5e:	e7e8      	b.n	801de32 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801de60:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801de64:	4240      	negs	r0, r0
 801de66:	e7e4      	b.n	801de32 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801de68:	f04f 30ff 	mov.w	r0, #4294967295
 801de6c:	e7e1      	b.n	801de32 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801de6e:	bf00      	nop
 801de70:	2400aee6 	.word	0x2400aee6
 801de74:	0802a233 	.word	0x0802a233
 801de78:	0802a82c 	.word	0x0802a82c
 801de7c:	0802a275 	.word	0x0802a275

0801de80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801de80:	b508      	push	{r3, lr}
 801de82:	b180      	cbz	r0, 801dea6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801de84:	2902      	cmp	r1, #2
 801de86:	d014      	beq.n	801deb2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801de88:	2903      	cmp	r1, #3
 801de8a:	d018      	beq.n	801debe <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801de8c:	2901      	cmp	r1, #1
 801de8e:	d001      	beq.n	801de94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801de90:	2001      	movs	r0, #1
 801de92:	e013      	b.n	801debc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801de94:	4b0e      	ldr	r3, [pc, #56]	; (801ded0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801de96:	8818      	ldrh	r0, [r3, #0]
 801de98:	b970      	cbnz	r0, 801deb8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801de9a:	4b0e      	ldr	r3, [pc, #56]	; (801ded4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801de9c:	2150      	movs	r1, #80	; 0x50
 801de9e:	4a0e      	ldr	r2, [pc, #56]	; (801ded8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801dea0:	480e      	ldr	r0, [pc, #56]	; (801dedc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801dea2:	f007 fef9 	bl	8025c98 <__assert_func>
 801dea6:	2902      	cmp	r1, #2
 801dea8:	d009      	beq.n	801debe <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801deaa:	2903      	cmp	r1, #3
 801deac:	d0f0      	beq.n	801de90 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801deae:	2901      	cmp	r1, #1
 801deb0:	d1f0      	bne.n	801de94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801deb2:	f04f 30ff 	mov.w	r0, #4294967295
 801deb6:	e001      	b.n	801debc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801deb8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801debc:	bd08      	pop	{r3, pc}
 801debe:	4b04      	ldr	r3, [pc, #16]	; (801ded0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801dec0:	8818      	ldrh	r0, [r3, #0]
 801dec2:	2800      	cmp	r0, #0
 801dec4:	d0e9      	beq.n	801de9a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801dec6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801deca:	4240      	negs	r0, r0
 801decc:	e7f6      	b.n	801debc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801dece:	bf00      	nop
 801ded0:	2400aee6 	.word	0x2400aee6
 801ded4:	0802a233 	.word	0x0802a233
 801ded8:	0802a82c 	.word	0x0802a82c
 801dedc:	0802a275 	.word	0x0802a275

0801dee0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee4:	b099      	sub	sp, #100	; 0x64
 801dee6:	910b      	str	r1, [sp, #44]	; 0x2c
 801dee8:	a914      	add	r1, sp, #80	; 0x50
 801deea:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801deee:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801def2:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801def6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801defa:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801defe:	e881 000c 	stmia.w	r1, {r2, r3}
 801df02:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801df06:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801df0a:	930a      	str	r3, [sp, #40]	; 0x28
 801df0c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801df10:	f891 900d 	ldrb.w	r9, [r1, #13]
 801df14:	9311      	str	r3, [sp, #68]	; 0x44
 801df16:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801df1a:	7988      	ldrb	r0, [r1, #6]
 801df1c:	930c      	str	r3, [sp, #48]	; 0x30
 801df1e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801df22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801df26:	4303      	orrs	r3, r0
 801df28:	9309      	str	r3, [sp, #36]	; 0x24
 801df2a:	f000 81a1 	beq.w	801e270 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801df2e:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801df32:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801df36:	f891 9007 	ldrb.w	r9, [r1, #7]
 801df3a:	ea59 0903 	orrs.w	r9, r9, r3
 801df3e:	f000 8197 	beq.w	801e270 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801df42:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801df46:	b29b      	uxth	r3, r3
 801df48:	2e00      	cmp	r6, #0
 801df4a:	f000 813a 	beq.w	801e1c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801df4e:	1af6      	subs	r6, r6, r3
 801df50:	b2b6      	uxth	r6, r6
 801df52:	0433      	lsls	r3, r6, #16
 801df54:	d502      	bpl.n	801df5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801df56:	1bad      	subs	r5, r5, r6
 801df58:	2600      	movs	r6, #0
 801df5a:	b22d      	sxth	r5, r5
 801df5c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801df60:	a814      	add	r0, sp, #80	; 0x50
 801df62:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801df66:	428d      	cmp	r5, r1
 801df68:	b28b      	uxth	r3, r1
 801df6a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801df6e:	bfbf      	itttt	lt
 801df70:	18f6      	addlt	r6, r6, r3
 801df72:	1b75      	sublt	r5, r6, r5
 801df74:	b2ae      	uxthlt	r6, r5
 801df76:	460d      	movlt	r5, r1
 801df78:	8891      	ldrh	r1, [r2, #4]
 801df7a:	440b      	add	r3, r1
 801df7c:	4629      	mov	r1, r5
 801df7e:	b21b      	sxth	r3, r3
 801df80:	9310      	str	r3, [sp, #64]	; 0x40
 801df82:	88d3      	ldrh	r3, [r2, #6]
 801df84:	8852      	ldrh	r2, [r2, #2]
 801df86:	4413      	add	r3, r2
 801df88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801df8a:	b21b      	sxth	r3, r3
 801df8c:	930f      	str	r3, [sp, #60]	; 0x3c
 801df8e:	4bbd      	ldr	r3, [pc, #756]	; (801e284 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801df90:	f893 b000 	ldrb.w	fp, [r3]
 801df94:	f10b 3cff 	add.w	ip, fp, #4294967295
 801df98:	f1dc 0300 	rsbs	r3, ip, #0
 801df9c:	eb43 030c 	adc.w	r3, r3, ip
 801dfa0:	930e      	str	r3, [sp, #56]	; 0x38
 801dfa2:	4653      	mov	r3, sl
 801dfa4:	f7f8 fe5e 	bl	8016c64 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801dfa8:	4629      	mov	r1, r5
 801dfaa:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801dfae:	4653      	mov	r3, sl
 801dfb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dfb2:	a814      	add	r0, sp, #80	; 0x50
 801dfb4:	f7f8 fe6e 	bl	8016c94 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801dfb8:	a918      	add	r1, sp, #96	; 0x60
 801dfba:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801dfbe:	a817      	add	r0, sp, #92	; 0x5c
 801dfc0:	f7f8 ff8a 	bl	8016ed8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801dfc4:	f1ba 0f00 	cmp.w	sl, #0
 801dfc8:	f040 80fe 	bne.w	801e1c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801dfcc:	f1bb 0f01 	cmp.w	fp, #1
 801dfd0:	f040 8102 	bne.w	801e1d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801dfd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dfd6:	b153      	cbz	r3, 801dfee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801dfd8:	2408      	movs	r4, #8
 801dfda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dfdc:	fb94 f3f8 	sdiv	r3, r4, r8
 801dfe0:	1e5c      	subs	r4, r3, #1
 801dfe2:	4414      	add	r4, r2
 801dfe4:	fb94 f4f3 	sdiv	r4, r4, r3
 801dfe8:	fb14 f403 	smulbb	r4, r4, r3
 801dfec:	b2a4      	uxth	r4, r4
 801dfee:	b906      	cbnz	r6, 801dff2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 801dff0:	b16f      	cbz	r7, 801e00e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 801dff2:	fb07 6304 	mla	r3, r7, r4, r6
 801dff6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801dff8:	463a      	mov	r2, r7
 801dffa:	fb08 f303 	mul.w	r3, r8, r3
 801dffe:	f003 0707 	and.w	r7, r3, #7
 801e002:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801e006:	9328      	str	r3, [sp, #160]	; 0xa0
 801e008:	eba9 0302 	sub.w	r3, r9, r2
 801e00c:	930d      	str	r3, [sp, #52]	; 0x34
 801e00e:	4651      	mov	r1, sl
 801e010:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e012:	f7ff ff05 	bl	801de20 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801e016:	4651      	mov	r1, sl
 801e018:	4681      	mov	r9, r0
 801e01a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e01c:	f7ff ff30 	bl	801de80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801e020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e024:	4683      	mov	fp, r0
 801e026:	eba3 0a02 	sub.w	sl, r3, r2
 801e02a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e02c:	459a      	cmp	sl, r3
 801e02e:	bfa8      	it	ge
 801e030:	469a      	movge	sl, r3
 801e032:	f1ba 0f00 	cmp.w	sl, #0
 801e036:	f340 811b 	ble.w	801e270 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e03a:	1bad      	subs	r5, r5, r6
 801e03c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e03e:	1b5d      	subs	r5, r3, r5
 801e040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e042:	429d      	cmp	r5, r3
 801e044:	bfd4      	ite	le
 801e046:	ebc6 0605 	rsble	r6, r6, r5
 801e04a:	ebc6 0603 	rsbgt	r6, r6, r3
 801e04e:	2e00      	cmp	r6, #0
 801e050:	f340 810e 	ble.w	801e270 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e054:	1ba4      	subs	r4, r4, r6
 801e056:	fb08 f304 	mul.w	r3, r8, r4
 801e05a:	930f      	str	r3, [sp, #60]	; 0x3c
 801e05c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e05e:	2b00      	cmp	r3, #0
 801e060:	f040 810b 	bne.w	801e27a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801e064:	4b88      	ldr	r3, [pc, #544]	; (801e288 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e066:	6818      	ldr	r0, [r3, #0]
 801e068:	6803      	ldr	r3, [r0, #0]
 801e06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e06c:	4798      	blx	r3
 801e06e:	2301      	movs	r3, #1
 801e070:	4a86      	ldr	r2, [pc, #536]	; (801e28c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801e072:	fa03 f308 	lsl.w	r3, r3, r8
 801e076:	8811      	ldrh	r1, [r2, #0]
 801e078:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e07c:	3b01      	subs	r3, #1
 801e07e:	b2db      	uxtb	r3, r3
 801e080:	930e      	str	r3, [sp, #56]	; 0x38
 801e082:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e086:	fb01 2303 	mla	r3, r1, r3, r2
 801e08a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e08e:	930a      	str	r3, [sp, #40]	; 0x28
 801e090:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e092:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e096:	9313      	str	r3, [sp, #76]	; 0x4c
 801e098:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e09a:	0a19      	lsrs	r1, r3, #8
 801e09c:	b2cb      	uxtb	r3, r1
 801e09e:	9312      	str	r3, [sp, #72]	; 0x48
 801e0a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e0a2:	b2db      	uxtb	r3, r3
 801e0a4:	9311      	str	r3, [sp, #68]	; 0x44
 801e0a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e0a8:	095a      	lsrs	r2, r3, #5
 801e0aa:	4b79      	ldr	r3, [pc, #484]	; (801e290 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 801e0ac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e0b0:	400b      	ands	r3, r1
 801e0b2:	4313      	orrs	r3, r2
 801e0b4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e0b6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e0ba:	4313      	orrs	r3, r2
 801e0bc:	b29b      	uxth	r3, r3
 801e0be:	9310      	str	r3, [sp, #64]	; 0x40
 801e0c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e0c2:	781a      	ldrb	r2, [r3, #0]
 801e0c4:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801e0c8:	fb06 b919 	mls	r9, r6, r9, fp
 801e0cc:	413a      	asrs	r2, r7
 801e0ce:	fb03 fb06 	mul.w	fp, r3, r6
 801e0d2:	930d      	str	r3, [sp, #52]	; 0x34
 801e0d4:	b2d2      	uxtb	r2, r2
 801e0d6:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801e0da:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e0de:	f0c0 80ea 	bcc.w	801e2b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 801e0e2:	46b6      	mov	lr, r6
 801e0e4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801e0e8:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e0ec:	f0c0 80d2 	bcc.w	801e294 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801e0f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e0f2:	4013      	ands	r3, r2
 801e0f4:	d055      	beq.n	801e1a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 801e0f6:	20ff      	movs	r0, #255	; 0xff
 801e0f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e0fa:	fb90 f1f1 	sdiv	r1, r0, r1
 801e0fe:	434b      	muls	r3, r1
 801e100:	2bfe      	cmp	r3, #254	; 0xfe
 801e102:	dd03      	ble.n	801e10c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 801e104:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e106:	4281      	cmp	r1, r0
 801e108:	f000 80b9 	beq.w	801e27e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e10c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e10e:	f8bc 4000 	ldrh.w	r4, [ip]
 801e112:	fb11 f303 	smulbb	r3, r1, r3
 801e116:	1220      	asrs	r0, r4, #8
 801e118:	b29b      	uxth	r3, r3
 801e11a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e11e:	1c59      	adds	r1, r3, #1
 801e120:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e124:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e128:	10e1      	asrs	r1, r4, #3
 801e12a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e12e:	00e4      	lsls	r4, r4, #3
 801e130:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e134:	b29d      	uxth	r5, r3
 801e136:	43db      	mvns	r3, r3
 801e138:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801e13c:	b2db      	uxtb	r3, r3
 801e13e:	b2e4      	uxtb	r4, r4
 801e140:	9309      	str	r3, [sp, #36]	; 0x24
 801e142:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e144:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e148:	fb13 f905 	smulbb	r9, r3, r5
 801e14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e14e:	fb00 9003 	mla	r0, r0, r3, r9
 801e152:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e154:	fb13 f905 	smulbb	r9, r3, r5
 801e158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e15a:	b280      	uxth	r0, r0
 801e15c:	fb01 9103 	mla	r1, r1, r3, r9
 801e160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e162:	fb13 f505 	smulbb	r5, r3, r5
 801e166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e168:	b289      	uxth	r1, r1
 801e16a:	fb04 5403 	mla	r4, r4, r3, r5
 801e16e:	1c43      	adds	r3, r0, #1
 801e170:	b2a4      	uxth	r4, r4
 801e172:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e176:	f104 0901 	add.w	r9, r4, #1
 801e17a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e17e:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801e182:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801e186:	ea49 0000 	orr.w	r0, r9, r0
 801e18a:	f101 0901 	add.w	r9, r1, #1
 801e18e:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801e192:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e196:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e19a:	ea40 0009 	orr.w	r0, r0, r9
 801e19e:	f8ac 0000 	strh.w	r0, [ip]
 801e1a2:	4447      	add	r7, r8
 801e1a4:	b2bf      	uxth	r7, r7
 801e1a6:	2f07      	cmp	r7, #7
 801e1a8:	bf89      	itett	hi
 801e1aa:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801e1ac:	fa42 f208 	asrls.w	r2, r2, r8
 801e1b0:	2700      	movhi	r7, #0
 801e1b2:	785a      	ldrbhi	r2, [r3, #1]
 801e1b4:	bf8a      	itet	hi
 801e1b6:	3301      	addhi	r3, #1
 801e1b8:	b2d2      	uxtbls	r2, r2
 801e1ba:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801e1bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e1be:	449c      	add	ip, r3
 801e1c0:	e792      	b.n	801e0e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801e1c2:	441d      	add	r5, r3
 801e1c4:	b22d      	sxth	r5, r5
 801e1c6:	e6c9      	b.n	801df5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801e1c8:	f1ba 0f01 	cmp.w	sl, #1
 801e1cc:	f47f af02 	bne.w	801dfd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e1d0:	f1bb 0f01 	cmp.w	fp, #1
 801e1d4:	f47f aefe 	bne.w	801dfd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e1d8:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801e288 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 801e1dc:	f8db 0000 	ldr.w	r0, [fp]
 801e1e0:	6803      	ldr	r3, [r0, #0]
 801e1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1e4:	4798      	blx	r3
 801e1e6:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e1ea:	465a      	mov	r2, fp
 801e1ec:	d006      	beq.n	801e1fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801e1ee:	f1b8 0f04 	cmp.w	r8, #4
 801e1f2:	d140      	bne.n	801e276 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801e1f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e1f6:	3300      	adds	r3, #0
 801e1f8:	bf18      	it	ne
 801e1fa:	2301      	movne	r3, #1
 801e1fc:	0580      	lsls	r0, r0, #22
 801e1fe:	d563      	bpl.n	801e2c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801e200:	f1b8 0f08 	cmp.w	r8, #8
 801e204:	d160      	bne.n	801e2c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801e206:	2b00      	cmp	r3, #0
 801e208:	bf0c      	ite	eq
 801e20a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e20e:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e212:	2e00      	cmp	r6, #0
 801e214:	f47f aede 	bne.w	801dfd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e218:	2f00      	cmp	r7, #0
 801e21a:	f47f aedb 	bne.w	801dfd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e220:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e222:	18eb      	adds	r3, r5, r3
 801e224:	4283      	cmp	r3, r0
 801e226:	f73f aed5 	bgt.w	801dfd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e22c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e22e:	444b      	add	r3, r9
 801e230:	4283      	cmp	r3, r0
 801e232:	f73f aecf 	bgt.w	801dfd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e236:	f1b8 0f08 	cmp.w	r8, #8
 801e23a:	6810      	ldr	r0, [r2, #0]
 801e23c:	f04f 0600 	mov.w	r6, #0
 801e240:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801e244:	bf18      	it	ne
 801e246:	3401      	addne	r4, #1
 801e248:	6805      	ldr	r5, [r0, #0]
 801e24a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801e24e:	bf18      	it	ne
 801e250:	f024 0401 	bicne.w	r4, r4, #1
 801e254:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801e258:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e25a:	bf18      	it	ne
 801e25c:	b2a4      	uxthne	r4, r4
 801e25e:	9104      	str	r1, [sp, #16]
 801e260:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e262:	e9cd 4900 	strd	r4, r9, [sp]
 801e266:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801e26a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e26c:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 801e26e:	47a0      	blx	r4
 801e270:	b019      	add	sp, #100	; 0x64
 801e272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e276:	2300      	movs	r3, #0
 801e278:	e7c0      	b.n	801e1fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801e27a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e27c:	e6f7      	b.n	801e06e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 801e27e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e280:	e78d      	b.n	801e19e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 801e282:	bf00      	nop
 801e284:	2400aee4 	.word	0x2400aee4
 801e288:	2400aeec 	.word	0x2400aeec
 801e28c:	2400aee6 	.word	0x2400aee6
 801e290:	00fff800 	.word	0x00fff800
 801e294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e296:	b153      	cbz	r3, 801e2ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801e298:	441f      	add	r7, r3
 801e29a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e29c:	b2bf      	uxth	r7, r7
 801e29e:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801e2a2:	f007 0707 	and.w	r7, r7, #7
 801e2a6:	781a      	ldrb	r2, [r3, #0]
 801e2a8:	9328      	str	r3, [sp, #160]	; 0xa0
 801e2aa:	413a      	asrs	r2, r7
 801e2ac:	b2d2      	uxtb	r2, r2
 801e2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2b0:	445b      	add	r3, fp
 801e2b2:	930a      	str	r3, [sp, #40]	; 0x28
 801e2b4:	e711      	b.n	801e0da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801e2b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d1d9      	bne.n	801e270 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e2bc:	4b05      	ldr	r3, [pc, #20]	; (801e2d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 801e2be:	6818      	ldr	r0, [r3, #0]
 801e2c0:	6803      	ldr	r3, [r0, #0]
 801e2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e2c4:	4798      	blx	r3
 801e2c6:	e7d3      	b.n	801e270 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	f43f ae83 	beq.w	801dfd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801e2ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e2d2:	e79e      	b.n	801e212 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e2d4:	2400aeec 	.word	0x2400aeec

0801e2d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801e2d8:	b538      	push	{r3, r4, r5, lr}
 801e2da:	4c15      	ldr	r4, [pc, #84]	; (801e330 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801e2dc:	4605      	mov	r5, r0
 801e2de:	7823      	ldrb	r3, [r4, #0]
 801e2e0:	f3bf 8f5b 	dmb	ish
 801e2e4:	07da      	lsls	r2, r3, #31
 801e2e6:	d40b      	bmi.n	801e300 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e2e8:	4620      	mov	r0, r4
 801e2ea:	f007 fca8 	bl	8025c3e <__cxa_guard_acquire>
 801e2ee:	b138      	cbz	r0, 801e300 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e2f0:	4620      	mov	r0, r4
 801e2f2:	f007 fcb0 	bl	8025c56 <__cxa_guard_release>
 801e2f6:	4a0f      	ldr	r2, [pc, #60]	; (801e334 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e2f8:	490f      	ldr	r1, [pc, #60]	; (801e338 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801e2fa:	4810      	ldr	r0, [pc, #64]	; (801e33c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e2fc:	f007 fc98 	bl	8025c30 <__aeabi_atexit>
 801e300:	4c0f      	ldr	r4, [pc, #60]	; (801e340 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801e302:	7823      	ldrb	r3, [r4, #0]
 801e304:	f3bf 8f5b 	dmb	ish
 801e308:	07db      	lsls	r3, r3, #31
 801e30a:	d40b      	bmi.n	801e324 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e30c:	4620      	mov	r0, r4
 801e30e:	f007 fc96 	bl	8025c3e <__cxa_guard_acquire>
 801e312:	b138      	cbz	r0, 801e324 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e314:	4620      	mov	r0, r4
 801e316:	f007 fc9e 	bl	8025c56 <__cxa_guard_release>
 801e31a:	4a06      	ldr	r2, [pc, #24]	; (801e334 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e31c:	4909      	ldr	r1, [pc, #36]	; (801e344 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801e31e:	480a      	ldr	r0, [pc, #40]	; (801e348 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e320:	f007 fc86 	bl	8025c30 <__aeabi_atexit>
 801e324:	4b05      	ldr	r3, [pc, #20]	; (801e33c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e326:	612b      	str	r3, [r5, #16]
 801e328:	4b07      	ldr	r3, [pc, #28]	; (801e348 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e32a:	616b      	str	r3, [r5, #20]
 801e32c:	bd38      	pop	{r3, r4, r5, pc}
 801e32e:	bf00      	nop
 801e330:	2400afb8 	.word	0x2400afb8
 801e334:	24000000 	.word	0x24000000
 801e338:	0801c4d7 	.word	0x0801c4d7
 801e33c:	24000090 	.word	0x24000090
 801e340:	2400afbc 	.word	0x2400afbc
 801e344:	0801c4d5 	.word	0x0801c4d5
 801e348:	24000094 	.word	0x24000094

0801e34c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801e34c:	b538      	push	{r3, r4, r5, lr}
 801e34e:	4c15      	ldr	r4, [pc, #84]	; (801e3a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801e350:	4605      	mov	r5, r0
 801e352:	7823      	ldrb	r3, [r4, #0]
 801e354:	f3bf 8f5b 	dmb	ish
 801e358:	07da      	lsls	r2, r3, #31
 801e35a:	d40b      	bmi.n	801e374 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e35c:	4620      	mov	r0, r4
 801e35e:	f007 fc6e 	bl	8025c3e <__cxa_guard_acquire>
 801e362:	b138      	cbz	r0, 801e374 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e364:	4620      	mov	r0, r4
 801e366:	f007 fc76 	bl	8025c56 <__cxa_guard_release>
 801e36a:	4a0f      	ldr	r2, [pc, #60]	; (801e3a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e36c:	490f      	ldr	r1, [pc, #60]	; (801e3ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801e36e:	4810      	ldr	r0, [pc, #64]	; (801e3b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e370:	f007 fc5e 	bl	8025c30 <__aeabi_atexit>
 801e374:	4c0f      	ldr	r4, [pc, #60]	; (801e3b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801e376:	7823      	ldrb	r3, [r4, #0]
 801e378:	f3bf 8f5b 	dmb	ish
 801e37c:	07db      	lsls	r3, r3, #31
 801e37e:	d40b      	bmi.n	801e398 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e380:	4620      	mov	r0, r4
 801e382:	f007 fc5c 	bl	8025c3e <__cxa_guard_acquire>
 801e386:	b138      	cbz	r0, 801e398 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e388:	4620      	mov	r0, r4
 801e38a:	f007 fc64 	bl	8025c56 <__cxa_guard_release>
 801e38e:	4a06      	ldr	r2, [pc, #24]	; (801e3a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e390:	4909      	ldr	r1, [pc, #36]	; (801e3b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801e392:	480a      	ldr	r0, [pc, #40]	; (801e3bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e394:	f007 fc4c 	bl	8025c30 <__aeabi_atexit>
 801e398:	4b05      	ldr	r3, [pc, #20]	; (801e3b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e39a:	60ab      	str	r3, [r5, #8]
 801e39c:	4b07      	ldr	r3, [pc, #28]	; (801e3bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e39e:	60eb      	str	r3, [r5, #12]
 801e3a0:	bd38      	pop	{r3, r4, r5, pc}
 801e3a2:	bf00      	nop
 801e3a4:	2400af90 	.word	0x2400af90
 801e3a8:	24000000 	.word	0x24000000
 801e3ac:	0801c4db 	.word	0x0801c4db
 801e3b0:	24000068 	.word	0x24000068
 801e3b4:	2400af94 	.word	0x2400af94
 801e3b8:	0801c4d9 	.word	0x0801c4d9
 801e3bc:	2400006c 	.word	0x2400006c

0801e3c0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801e3c0:	b510      	push	{r4, lr}
 801e3c2:	4604      	mov	r4, r0
 801e3c4:	f7ff ff88 	bl	801e2d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801e3c8:	4620      	mov	r0, r4
 801e3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3ce:	f7ff bfbd 	b.w	801e34c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801e3d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e3d4:	b538      	push	{r3, r4, r5, lr}
 801e3d6:	4c15      	ldr	r4, [pc, #84]	; (801e42c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e3d8:	4605      	mov	r5, r0
 801e3da:	7823      	ldrb	r3, [r4, #0]
 801e3dc:	f3bf 8f5b 	dmb	ish
 801e3e0:	07da      	lsls	r2, r3, #31
 801e3e2:	d40b      	bmi.n	801e3fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e3e4:	4620      	mov	r0, r4
 801e3e6:	f007 fc2a 	bl	8025c3e <__cxa_guard_acquire>
 801e3ea:	b138      	cbz	r0, 801e3fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e3ec:	4620      	mov	r0, r4
 801e3ee:	f007 fc32 	bl	8025c56 <__cxa_guard_release>
 801e3f2:	4a0f      	ldr	r2, [pc, #60]	; (801e430 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e3f4:	490f      	ldr	r1, [pc, #60]	; (801e434 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e3f6:	4810      	ldr	r0, [pc, #64]	; (801e438 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e3f8:	f007 fc1a 	bl	8025c30 <__aeabi_atexit>
 801e3fc:	4c0f      	ldr	r4, [pc, #60]	; (801e43c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e3fe:	7823      	ldrb	r3, [r4, #0]
 801e400:	f3bf 8f5b 	dmb	ish
 801e404:	07db      	lsls	r3, r3, #31
 801e406:	d40b      	bmi.n	801e420 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e408:	4620      	mov	r0, r4
 801e40a:	f007 fc18 	bl	8025c3e <__cxa_guard_acquire>
 801e40e:	b138      	cbz	r0, 801e420 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e410:	4620      	mov	r0, r4
 801e412:	f007 fc20 	bl	8025c56 <__cxa_guard_release>
 801e416:	4a06      	ldr	r2, [pc, #24]	; (801e430 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e418:	4909      	ldr	r1, [pc, #36]	; (801e440 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e41a:	480a      	ldr	r0, [pc, #40]	; (801e444 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e41c:	f007 fc08 	bl	8025c30 <__aeabi_atexit>
 801e420:	4b05      	ldr	r3, [pc, #20]	; (801e438 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e422:	622b      	str	r3, [r5, #32]
 801e424:	4b07      	ldr	r3, [pc, #28]	; (801e444 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e426:	626b      	str	r3, [r5, #36]	; 0x24
 801e428:	bd38      	pop	{r3, r4, r5, pc}
 801e42a:	bf00      	nop
 801e42c:	2400afc0 	.word	0x2400afc0
 801e430:	24000000 	.word	0x24000000
 801e434:	0801c4cf 	.word	0x0801c4cf
 801e438:	24000098 	.word	0x24000098
 801e43c:	2400afc4 	.word	0x2400afc4
 801e440:	0801c4cd 	.word	0x0801c4cd
 801e444:	2400009c 	.word	0x2400009c

0801e448 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e448:	b538      	push	{r3, r4, r5, lr}
 801e44a:	4c15      	ldr	r4, [pc, #84]	; (801e4a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e44c:	4605      	mov	r5, r0
 801e44e:	7823      	ldrb	r3, [r4, #0]
 801e450:	f3bf 8f5b 	dmb	ish
 801e454:	07da      	lsls	r2, r3, #31
 801e456:	d40b      	bmi.n	801e470 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e458:	4620      	mov	r0, r4
 801e45a:	f007 fbf0 	bl	8025c3e <__cxa_guard_acquire>
 801e45e:	b138      	cbz	r0, 801e470 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e460:	4620      	mov	r0, r4
 801e462:	f007 fbf8 	bl	8025c56 <__cxa_guard_release>
 801e466:	4a0f      	ldr	r2, [pc, #60]	; (801e4a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e468:	490f      	ldr	r1, [pc, #60]	; (801e4a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e46a:	4810      	ldr	r0, [pc, #64]	; (801e4ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e46c:	f007 fbe0 	bl	8025c30 <__aeabi_atexit>
 801e470:	4c0f      	ldr	r4, [pc, #60]	; (801e4b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e472:	7823      	ldrb	r3, [r4, #0]
 801e474:	f3bf 8f5b 	dmb	ish
 801e478:	07db      	lsls	r3, r3, #31
 801e47a:	d40b      	bmi.n	801e494 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e47c:	4620      	mov	r0, r4
 801e47e:	f007 fbde 	bl	8025c3e <__cxa_guard_acquire>
 801e482:	b138      	cbz	r0, 801e494 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e484:	4620      	mov	r0, r4
 801e486:	f007 fbe6 	bl	8025c56 <__cxa_guard_release>
 801e48a:	4a06      	ldr	r2, [pc, #24]	; (801e4a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e48c:	4909      	ldr	r1, [pc, #36]	; (801e4b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e48e:	480a      	ldr	r0, [pc, #40]	; (801e4b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e490:	f007 fbce 	bl	8025c30 <__aeabi_atexit>
 801e494:	4b05      	ldr	r3, [pc, #20]	; (801e4ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e496:	61ab      	str	r3, [r5, #24]
 801e498:	4b07      	ldr	r3, [pc, #28]	; (801e4b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e49a:	61eb      	str	r3, [r5, #28]
 801e49c:	bd38      	pop	{r3, r4, r5, pc}
 801e49e:	bf00      	nop
 801e4a0:	2400af98 	.word	0x2400af98
 801e4a4:	24000000 	.word	0x24000000
 801e4a8:	0801c4d3 	.word	0x0801c4d3
 801e4ac:	24000070 	.word	0x24000070
 801e4b0:	2400af9c 	.word	0x2400af9c
 801e4b4:	0801c4d1 	.word	0x0801c4d1
 801e4b8:	24000074 	.word	0x24000074

0801e4bc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801e4bc:	b510      	push	{r4, lr}
 801e4be:	4604      	mov	r4, r0
 801e4c0:	f7ff ff88 	bl	801e3d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e4c4:	4620      	mov	r0, r4
 801e4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4ca:	f7ff bfbd 	b.w	801e448 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e4d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e4d0:	b538      	push	{r3, r4, r5, lr}
 801e4d2:	4c15      	ldr	r4, [pc, #84]	; (801e528 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e4d4:	4605      	mov	r5, r0
 801e4d6:	7823      	ldrb	r3, [r4, #0]
 801e4d8:	f3bf 8f5b 	dmb	ish
 801e4dc:	07da      	lsls	r2, r3, #31
 801e4de:	d40b      	bmi.n	801e4f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e4e0:	4620      	mov	r0, r4
 801e4e2:	f007 fbac 	bl	8025c3e <__cxa_guard_acquire>
 801e4e6:	b138      	cbz	r0, 801e4f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e4e8:	4620      	mov	r0, r4
 801e4ea:	f007 fbb4 	bl	8025c56 <__cxa_guard_release>
 801e4ee:	4a0f      	ldr	r2, [pc, #60]	; (801e52c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e4f0:	490f      	ldr	r1, [pc, #60]	; (801e530 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e4f2:	4810      	ldr	r0, [pc, #64]	; (801e534 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e4f4:	f007 fb9c 	bl	8025c30 <__aeabi_atexit>
 801e4f8:	4c0f      	ldr	r4, [pc, #60]	; (801e538 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e4fa:	7823      	ldrb	r3, [r4, #0]
 801e4fc:	f3bf 8f5b 	dmb	ish
 801e500:	07db      	lsls	r3, r3, #31
 801e502:	d40b      	bmi.n	801e51c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e504:	4620      	mov	r0, r4
 801e506:	f007 fb9a 	bl	8025c3e <__cxa_guard_acquire>
 801e50a:	b138      	cbz	r0, 801e51c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e50c:	4620      	mov	r0, r4
 801e50e:	f007 fba2 	bl	8025c56 <__cxa_guard_release>
 801e512:	4a06      	ldr	r2, [pc, #24]	; (801e52c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e514:	4909      	ldr	r1, [pc, #36]	; (801e53c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e516:	480a      	ldr	r0, [pc, #40]	; (801e540 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e518:	f007 fb8a 	bl	8025c30 <__aeabi_atexit>
 801e51c:	4b05      	ldr	r3, [pc, #20]	; (801e534 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e51e:	632b      	str	r3, [r5, #48]	; 0x30
 801e520:	4b07      	ldr	r3, [pc, #28]	; (801e540 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e522:	636b      	str	r3, [r5, #52]	; 0x34
 801e524:	bd38      	pop	{r3, r4, r5, pc}
 801e526:	bf00      	nop
 801e528:	2400afd0 	.word	0x2400afd0
 801e52c:	24000000 	.word	0x24000000
 801e530:	0801c4c7 	.word	0x0801c4c7
 801e534:	240000a8 	.word	0x240000a8
 801e538:	2400afd4 	.word	0x2400afd4
 801e53c:	0801c4c5 	.word	0x0801c4c5
 801e540:	240000ac 	.word	0x240000ac

0801e544 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e544:	b538      	push	{r3, r4, r5, lr}
 801e546:	4c15      	ldr	r4, [pc, #84]	; (801e59c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e548:	4605      	mov	r5, r0
 801e54a:	7823      	ldrb	r3, [r4, #0]
 801e54c:	f3bf 8f5b 	dmb	ish
 801e550:	07da      	lsls	r2, r3, #31
 801e552:	d40b      	bmi.n	801e56c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e554:	4620      	mov	r0, r4
 801e556:	f007 fb72 	bl	8025c3e <__cxa_guard_acquire>
 801e55a:	b138      	cbz	r0, 801e56c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e55c:	4620      	mov	r0, r4
 801e55e:	f007 fb7a 	bl	8025c56 <__cxa_guard_release>
 801e562:	4a0f      	ldr	r2, [pc, #60]	; (801e5a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e564:	490f      	ldr	r1, [pc, #60]	; (801e5a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e566:	4810      	ldr	r0, [pc, #64]	; (801e5a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e568:	f007 fb62 	bl	8025c30 <__aeabi_atexit>
 801e56c:	4c0f      	ldr	r4, [pc, #60]	; (801e5ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e56e:	7823      	ldrb	r3, [r4, #0]
 801e570:	f3bf 8f5b 	dmb	ish
 801e574:	07db      	lsls	r3, r3, #31
 801e576:	d40b      	bmi.n	801e590 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e578:	4620      	mov	r0, r4
 801e57a:	f007 fb60 	bl	8025c3e <__cxa_guard_acquire>
 801e57e:	b138      	cbz	r0, 801e590 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e580:	4620      	mov	r0, r4
 801e582:	f007 fb68 	bl	8025c56 <__cxa_guard_release>
 801e586:	4a06      	ldr	r2, [pc, #24]	; (801e5a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e588:	4909      	ldr	r1, [pc, #36]	; (801e5b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e58a:	480a      	ldr	r0, [pc, #40]	; (801e5b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e58c:	f007 fb50 	bl	8025c30 <__aeabi_atexit>
 801e590:	4b05      	ldr	r3, [pc, #20]	; (801e5a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e592:	62ab      	str	r3, [r5, #40]	; 0x28
 801e594:	4b07      	ldr	r3, [pc, #28]	; (801e5b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e596:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e598:	bd38      	pop	{r3, r4, r5, pc}
 801e59a:	bf00      	nop
 801e59c:	2400afa0 	.word	0x2400afa0
 801e5a0:	24000000 	.word	0x24000000
 801e5a4:	0801c4cb 	.word	0x0801c4cb
 801e5a8:	24000078 	.word	0x24000078
 801e5ac:	2400afa4 	.word	0x2400afa4
 801e5b0:	0801c4c9 	.word	0x0801c4c9
 801e5b4:	2400007c 	.word	0x2400007c

0801e5b8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e5b8:	b510      	push	{r4, lr}
 801e5ba:	4604      	mov	r4, r0
 801e5bc:	f7ff ff88 	bl	801e4d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e5c0:	4620      	mov	r0, r4
 801e5c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5c6:	f7ff bfbd 	b.w	801e544 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e5cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801e5cc:	b538      	push	{r3, r4, r5, lr}
 801e5ce:	4c15      	ldr	r4, [pc, #84]	; (801e624 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e5d0:	4605      	mov	r5, r0
 801e5d2:	7823      	ldrb	r3, [r4, #0]
 801e5d4:	f3bf 8f5b 	dmb	ish
 801e5d8:	07da      	lsls	r2, r3, #31
 801e5da:	d40b      	bmi.n	801e5f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e5dc:	4620      	mov	r0, r4
 801e5de:	f007 fb2e 	bl	8025c3e <__cxa_guard_acquire>
 801e5e2:	b138      	cbz	r0, 801e5f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e5e4:	4620      	mov	r0, r4
 801e5e6:	f007 fb36 	bl	8025c56 <__cxa_guard_release>
 801e5ea:	4a0f      	ldr	r2, [pc, #60]	; (801e628 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e5ec:	490f      	ldr	r1, [pc, #60]	; (801e62c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e5ee:	4810      	ldr	r0, [pc, #64]	; (801e630 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e5f0:	f007 fb1e 	bl	8025c30 <__aeabi_atexit>
 801e5f4:	4c0f      	ldr	r4, [pc, #60]	; (801e634 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801e5f6:	7823      	ldrb	r3, [r4, #0]
 801e5f8:	f3bf 8f5b 	dmb	ish
 801e5fc:	07db      	lsls	r3, r3, #31
 801e5fe:	d40b      	bmi.n	801e618 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e600:	4620      	mov	r0, r4
 801e602:	f007 fb1c 	bl	8025c3e <__cxa_guard_acquire>
 801e606:	b138      	cbz	r0, 801e618 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e608:	4620      	mov	r0, r4
 801e60a:	f007 fb24 	bl	8025c56 <__cxa_guard_release>
 801e60e:	4a06      	ldr	r2, [pc, #24]	; (801e628 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e610:	4909      	ldr	r1, [pc, #36]	; (801e638 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e612:	480a      	ldr	r0, [pc, #40]	; (801e63c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e614:	f007 fb0c 	bl	8025c30 <__aeabi_atexit>
 801e618:	4b05      	ldr	r3, [pc, #20]	; (801e630 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e61a:	652b      	str	r3, [r5, #80]	; 0x50
 801e61c:	4b07      	ldr	r3, [pc, #28]	; (801e63c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e61e:	656b      	str	r3, [r5, #84]	; 0x54
 801e620:	bd38      	pop	{r3, r4, r5, pc}
 801e622:	bf00      	nop
 801e624:	2400afd8 	.word	0x2400afd8
 801e628:	24000000 	.word	0x24000000
 801e62c:	0801c4b7 	.word	0x0801c4b7
 801e630:	240000b0 	.word	0x240000b0
 801e634:	2400afdc 	.word	0x2400afdc
 801e638:	0801c4b5 	.word	0x0801c4b5
 801e63c:	240000b4 	.word	0x240000b4

0801e640 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801e640:	b538      	push	{r3, r4, r5, lr}
 801e642:	4c15      	ldr	r4, [pc, #84]	; (801e698 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e644:	4605      	mov	r5, r0
 801e646:	7823      	ldrb	r3, [r4, #0]
 801e648:	f3bf 8f5b 	dmb	ish
 801e64c:	07da      	lsls	r2, r3, #31
 801e64e:	d40b      	bmi.n	801e668 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e650:	4620      	mov	r0, r4
 801e652:	f007 faf4 	bl	8025c3e <__cxa_guard_acquire>
 801e656:	b138      	cbz	r0, 801e668 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e658:	4620      	mov	r0, r4
 801e65a:	f007 fafc 	bl	8025c56 <__cxa_guard_release>
 801e65e:	4a0f      	ldr	r2, [pc, #60]	; (801e69c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e660:	490f      	ldr	r1, [pc, #60]	; (801e6a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e662:	4810      	ldr	r0, [pc, #64]	; (801e6a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e664:	f007 fae4 	bl	8025c30 <__aeabi_atexit>
 801e668:	4c0f      	ldr	r4, [pc, #60]	; (801e6a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801e66a:	7823      	ldrb	r3, [r4, #0]
 801e66c:	f3bf 8f5b 	dmb	ish
 801e670:	07db      	lsls	r3, r3, #31
 801e672:	d40b      	bmi.n	801e68c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e674:	4620      	mov	r0, r4
 801e676:	f007 fae2 	bl	8025c3e <__cxa_guard_acquire>
 801e67a:	b138      	cbz	r0, 801e68c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e67c:	4620      	mov	r0, r4
 801e67e:	f007 faea 	bl	8025c56 <__cxa_guard_release>
 801e682:	4a06      	ldr	r2, [pc, #24]	; (801e69c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e684:	4909      	ldr	r1, [pc, #36]	; (801e6ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e686:	480a      	ldr	r0, [pc, #40]	; (801e6b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e688:	f007 fad2 	bl	8025c30 <__aeabi_atexit>
 801e68c:	4b05      	ldr	r3, [pc, #20]	; (801e6a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e68e:	64ab      	str	r3, [r5, #72]	; 0x48
 801e690:	4b07      	ldr	r3, [pc, #28]	; (801e6b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e692:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e694:	bd38      	pop	{r3, r4, r5, pc}
 801e696:	bf00      	nop
 801e698:	2400afe0 	.word	0x2400afe0
 801e69c:	24000000 	.word	0x24000000
 801e6a0:	0801c4bb 	.word	0x0801c4bb
 801e6a4:	240000b8 	.word	0x240000b8
 801e6a8:	2400afe4 	.word	0x2400afe4
 801e6ac:	0801c4b9 	.word	0x0801c4b9
 801e6b0:	240000bc 	.word	0x240000bc

0801e6b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801e6b4:	b538      	push	{r3, r4, r5, lr}
 801e6b6:	4c15      	ldr	r4, [pc, #84]	; (801e70c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801e6b8:	4605      	mov	r5, r0
 801e6ba:	7823      	ldrb	r3, [r4, #0]
 801e6bc:	f3bf 8f5b 	dmb	ish
 801e6c0:	07da      	lsls	r2, r3, #31
 801e6c2:	d40b      	bmi.n	801e6dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e6c4:	4620      	mov	r0, r4
 801e6c6:	f007 faba 	bl	8025c3e <__cxa_guard_acquire>
 801e6ca:	b138      	cbz	r0, 801e6dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801e6cc:	4620      	mov	r0, r4
 801e6ce:	f007 fac2 	bl	8025c56 <__cxa_guard_release>
 801e6d2:	4a0f      	ldr	r2, [pc, #60]	; (801e710 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e6d4:	490f      	ldr	r1, [pc, #60]	; (801e714 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801e6d6:	4810      	ldr	r0, [pc, #64]	; (801e718 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e6d8:	f007 faaa 	bl	8025c30 <__aeabi_atexit>
 801e6dc:	4c0f      	ldr	r4, [pc, #60]	; (801e71c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801e6de:	7823      	ldrb	r3, [r4, #0]
 801e6e0:	f3bf 8f5b 	dmb	ish
 801e6e4:	07db      	lsls	r3, r3, #31
 801e6e6:	d40b      	bmi.n	801e700 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e6e8:	4620      	mov	r0, r4
 801e6ea:	f007 faa8 	bl	8025c3e <__cxa_guard_acquire>
 801e6ee:	b138      	cbz	r0, 801e700 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801e6f0:	4620      	mov	r0, r4
 801e6f2:	f007 fab0 	bl	8025c56 <__cxa_guard_release>
 801e6f6:	4a06      	ldr	r2, [pc, #24]	; (801e710 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801e6f8:	4909      	ldr	r1, [pc, #36]	; (801e720 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801e6fa:	480a      	ldr	r0, [pc, #40]	; (801e724 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e6fc:	f007 fa98 	bl	8025c30 <__aeabi_atexit>
 801e700:	4b05      	ldr	r3, [pc, #20]	; (801e718 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801e702:	642b      	str	r3, [r5, #64]	; 0x40
 801e704:	4b07      	ldr	r3, [pc, #28]	; (801e724 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801e706:	646b      	str	r3, [r5, #68]	; 0x44
 801e708:	bd38      	pop	{r3, r4, r5, pc}
 801e70a:	bf00      	nop
 801e70c:	2400afa8 	.word	0x2400afa8
 801e710:	24000000 	.word	0x24000000
 801e714:	0801c4bf 	.word	0x0801c4bf
 801e718:	24000080 	.word	0x24000080
 801e71c:	2400afac 	.word	0x2400afac
 801e720:	0801c4bd 	.word	0x0801c4bd
 801e724:	24000084 	.word	0x24000084

0801e728 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801e728:	b538      	push	{r3, r4, r5, lr}
 801e72a:	4c15      	ldr	r4, [pc, #84]	; (801e780 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801e72c:	4605      	mov	r5, r0
 801e72e:	7823      	ldrb	r3, [r4, #0]
 801e730:	f3bf 8f5b 	dmb	ish
 801e734:	07da      	lsls	r2, r3, #31
 801e736:	d40b      	bmi.n	801e750 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e738:	4620      	mov	r0, r4
 801e73a:	f007 fa80 	bl	8025c3e <__cxa_guard_acquire>
 801e73e:	b138      	cbz	r0, 801e750 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801e740:	4620      	mov	r0, r4
 801e742:	f007 fa88 	bl	8025c56 <__cxa_guard_release>
 801e746:	4a0f      	ldr	r2, [pc, #60]	; (801e784 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e748:	490f      	ldr	r1, [pc, #60]	; (801e788 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801e74a:	4810      	ldr	r0, [pc, #64]	; (801e78c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e74c:	f007 fa70 	bl	8025c30 <__aeabi_atexit>
 801e750:	4c0f      	ldr	r4, [pc, #60]	; (801e790 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801e752:	7823      	ldrb	r3, [r4, #0]
 801e754:	f3bf 8f5b 	dmb	ish
 801e758:	07db      	lsls	r3, r3, #31
 801e75a:	d40b      	bmi.n	801e774 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e75c:	4620      	mov	r0, r4
 801e75e:	f007 fa6e 	bl	8025c3e <__cxa_guard_acquire>
 801e762:	b138      	cbz	r0, 801e774 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801e764:	4620      	mov	r0, r4
 801e766:	f007 fa76 	bl	8025c56 <__cxa_guard_release>
 801e76a:	4a06      	ldr	r2, [pc, #24]	; (801e784 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801e76c:	4909      	ldr	r1, [pc, #36]	; (801e794 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801e76e:	480a      	ldr	r0, [pc, #40]	; (801e798 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e770:	f007 fa5e 	bl	8025c30 <__aeabi_atexit>
 801e774:	4b05      	ldr	r3, [pc, #20]	; (801e78c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801e776:	63ab      	str	r3, [r5, #56]	; 0x38
 801e778:	4b07      	ldr	r3, [pc, #28]	; (801e798 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801e77a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e77c:	bd38      	pop	{r3, r4, r5, pc}
 801e77e:	bf00      	nop
 801e780:	2400afc8 	.word	0x2400afc8
 801e784:	24000000 	.word	0x24000000
 801e788:	0801c4c3 	.word	0x0801c4c3
 801e78c:	240000a0 	.word	0x240000a0
 801e790:	2400afcc 	.word	0x2400afcc
 801e794:	0801c4c1 	.word	0x0801c4c1
 801e798:	240000a4 	.word	0x240000a4

0801e79c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801e79c:	b510      	push	{r4, lr}
 801e79e:	4604      	mov	r4, r0
 801e7a0:	f7ff ff14 	bl	801e5cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801e7a4:	4620      	mov	r0, r4
 801e7a6:	f7ff ff85 	bl	801e6b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801e7aa:	4620      	mov	r0, r4
 801e7ac:	f7ff ff48 	bl	801e640 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801e7b0:	4620      	mov	r0, r4
 801e7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e7b6:	f7ff bfb7 	b.w	801e728 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801e7bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e7bc:	b538      	push	{r3, r4, r5, lr}
 801e7be:	4c15      	ldr	r4, [pc, #84]	; (801e814 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e7c0:	4605      	mov	r5, r0
 801e7c2:	7823      	ldrb	r3, [r4, #0]
 801e7c4:	f3bf 8f5b 	dmb	ish
 801e7c8:	07da      	lsls	r2, r3, #31
 801e7ca:	d40b      	bmi.n	801e7e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e7cc:	4620      	mov	r0, r4
 801e7ce:	f007 fa36 	bl	8025c3e <__cxa_guard_acquire>
 801e7d2:	b138      	cbz	r0, 801e7e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e7d4:	4620      	mov	r0, r4
 801e7d6:	f007 fa3e 	bl	8025c56 <__cxa_guard_release>
 801e7da:	4a0f      	ldr	r2, [pc, #60]	; (801e818 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e7dc:	490f      	ldr	r1, [pc, #60]	; (801e81c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e7de:	4810      	ldr	r0, [pc, #64]	; (801e820 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e7e0:	f007 fa26 	bl	8025c30 <__aeabi_atexit>
 801e7e4:	4c0f      	ldr	r4, [pc, #60]	; (801e824 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e7e6:	7823      	ldrb	r3, [r4, #0]
 801e7e8:	f3bf 8f5b 	dmb	ish
 801e7ec:	07db      	lsls	r3, r3, #31
 801e7ee:	d40b      	bmi.n	801e808 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e7f0:	4620      	mov	r0, r4
 801e7f2:	f007 fa24 	bl	8025c3e <__cxa_guard_acquire>
 801e7f6:	b138      	cbz	r0, 801e808 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e7f8:	4620      	mov	r0, r4
 801e7fa:	f007 fa2c 	bl	8025c56 <__cxa_guard_release>
 801e7fe:	4a06      	ldr	r2, [pc, #24]	; (801e818 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e800:	4909      	ldr	r1, [pc, #36]	; (801e828 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e802:	480a      	ldr	r0, [pc, #40]	; (801e82c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e804:	f007 fa14 	bl	8025c30 <__aeabi_atexit>
 801e808:	4b05      	ldr	r3, [pc, #20]	; (801e820 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e80a:	662b      	str	r3, [r5, #96]	; 0x60
 801e80c:	4b07      	ldr	r3, [pc, #28]	; (801e82c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e80e:	666b      	str	r3, [r5, #100]	; 0x64
 801e810:	bd38      	pop	{r3, r4, r5, pc}
 801e812:	bf00      	nop
 801e814:	2400afb0 	.word	0x2400afb0
 801e818:	24000000 	.word	0x24000000
 801e81c:	0801c4af 	.word	0x0801c4af
 801e820:	24000088 	.word	0x24000088
 801e824:	2400afb4 	.word	0x2400afb4
 801e828:	0801c4ad 	.word	0x0801c4ad
 801e82c:	2400008c 	.word	0x2400008c

0801e830 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e830:	b538      	push	{r3, r4, r5, lr}
 801e832:	4c15      	ldr	r4, [pc, #84]	; (801e888 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e834:	4605      	mov	r5, r0
 801e836:	7823      	ldrb	r3, [r4, #0]
 801e838:	f3bf 8f5b 	dmb	ish
 801e83c:	07da      	lsls	r2, r3, #31
 801e83e:	d40b      	bmi.n	801e858 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e840:	4620      	mov	r0, r4
 801e842:	f007 f9fc 	bl	8025c3e <__cxa_guard_acquire>
 801e846:	b138      	cbz	r0, 801e858 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e848:	4620      	mov	r0, r4
 801e84a:	f007 fa04 	bl	8025c56 <__cxa_guard_release>
 801e84e:	4a0f      	ldr	r2, [pc, #60]	; (801e88c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e850:	490f      	ldr	r1, [pc, #60]	; (801e890 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e852:	4810      	ldr	r0, [pc, #64]	; (801e894 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e854:	f007 f9ec 	bl	8025c30 <__aeabi_atexit>
 801e858:	4c0f      	ldr	r4, [pc, #60]	; (801e898 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e85a:	7823      	ldrb	r3, [r4, #0]
 801e85c:	f3bf 8f5b 	dmb	ish
 801e860:	07db      	lsls	r3, r3, #31
 801e862:	d40b      	bmi.n	801e87c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e864:	4620      	mov	r0, r4
 801e866:	f007 f9ea 	bl	8025c3e <__cxa_guard_acquire>
 801e86a:	b138      	cbz	r0, 801e87c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e86c:	4620      	mov	r0, r4
 801e86e:	f007 f9f2 	bl	8025c56 <__cxa_guard_release>
 801e872:	4a06      	ldr	r2, [pc, #24]	; (801e88c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e874:	4909      	ldr	r1, [pc, #36]	; (801e89c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e876:	480a      	ldr	r0, [pc, #40]	; (801e8a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e878:	f007 f9da 	bl	8025c30 <__aeabi_atexit>
 801e87c:	4b05      	ldr	r3, [pc, #20]	; (801e894 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e87e:	65ab      	str	r3, [r5, #88]	; 0x58
 801e880:	4b07      	ldr	r3, [pc, #28]	; (801e8a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e882:	65eb      	str	r3, [r5, #92]	; 0x5c
 801e884:	bd38      	pop	{r3, r4, r5, pc}
 801e886:	bf00      	nop
 801e888:	2400af88 	.word	0x2400af88
 801e88c:	24000000 	.word	0x24000000
 801e890:	0801c4b3 	.word	0x0801c4b3
 801e894:	24000060 	.word	0x24000060
 801e898:	2400af8c 	.word	0x2400af8c
 801e89c:	0801c4b1 	.word	0x0801c4b1
 801e8a0:	24000064 	.word	0x24000064

0801e8a4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801e8a4:	b510      	push	{r4, lr}
 801e8a6:	4604      	mov	r4, r0
 801e8a8:	f7ff ff88 	bl	801e7bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e8ac:	4620      	mov	r0, r4
 801e8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8b2:	f7ff bfbd 	b.w	801e830 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e8b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e8b8:	b538      	push	{r3, r4, r5, lr}
 801e8ba:	4c15      	ldr	r4, [pc, #84]	; (801e910 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e8bc:	4605      	mov	r5, r0
 801e8be:	7823      	ldrb	r3, [r4, #0]
 801e8c0:	f3bf 8f5b 	dmb	ish
 801e8c4:	07da      	lsls	r2, r3, #31
 801e8c6:	d40b      	bmi.n	801e8e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e8c8:	4620      	mov	r0, r4
 801e8ca:	f007 f9b8 	bl	8025c3e <__cxa_guard_acquire>
 801e8ce:	b138      	cbz	r0, 801e8e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e8d0:	4620      	mov	r0, r4
 801e8d2:	f007 f9c0 	bl	8025c56 <__cxa_guard_release>
 801e8d6:	4a0f      	ldr	r2, [pc, #60]	; (801e914 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e8d8:	490f      	ldr	r1, [pc, #60]	; (801e918 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e8da:	4810      	ldr	r0, [pc, #64]	; (801e91c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e8dc:	f007 f9a8 	bl	8025c30 <__aeabi_atexit>
 801e8e0:	4c0f      	ldr	r4, [pc, #60]	; (801e920 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e8e2:	7823      	ldrb	r3, [r4, #0]
 801e8e4:	f3bf 8f5b 	dmb	ish
 801e8e8:	07db      	lsls	r3, r3, #31
 801e8ea:	d40b      	bmi.n	801e904 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e8ec:	4620      	mov	r0, r4
 801e8ee:	f007 f9a6 	bl	8025c3e <__cxa_guard_acquire>
 801e8f2:	b138      	cbz	r0, 801e904 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e8f4:	4620      	mov	r0, r4
 801e8f6:	f007 f9ae 	bl	8025c56 <__cxa_guard_release>
 801e8fa:	4a06      	ldr	r2, [pc, #24]	; (801e914 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e8fc:	4909      	ldr	r1, [pc, #36]	; (801e924 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e8fe:	480a      	ldr	r0, [pc, #40]	; (801e928 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e900:	f007 f996 	bl	8025c30 <__aeabi_atexit>
 801e904:	4b05      	ldr	r3, [pc, #20]	; (801e91c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e906:	672b      	str	r3, [r5, #112]	; 0x70
 801e908:	4b07      	ldr	r3, [pc, #28]	; (801e928 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e90a:	676b      	str	r3, [r5, #116]	; 0x74
 801e90c:	bd38      	pop	{r3, r4, r5, pc}
 801e90e:	bf00      	nop
 801e910:	2400af80 	.word	0x2400af80
 801e914:	24000000 	.word	0x24000000
 801e918:	0801c4a7 	.word	0x0801c4a7
 801e91c:	24000058 	.word	0x24000058
 801e920:	2400af84 	.word	0x2400af84
 801e924:	0801c4a5 	.word	0x0801c4a5
 801e928:	2400005c 	.word	0x2400005c

0801e92c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e92c:	b538      	push	{r3, r4, r5, lr}
 801e92e:	4c15      	ldr	r4, [pc, #84]	; (801e984 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e930:	4605      	mov	r5, r0
 801e932:	7823      	ldrb	r3, [r4, #0]
 801e934:	f3bf 8f5b 	dmb	ish
 801e938:	07da      	lsls	r2, r3, #31
 801e93a:	d40b      	bmi.n	801e954 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e93c:	4620      	mov	r0, r4
 801e93e:	f007 f97e 	bl	8025c3e <__cxa_guard_acquire>
 801e942:	b138      	cbz	r0, 801e954 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e944:	4620      	mov	r0, r4
 801e946:	f007 f986 	bl	8025c56 <__cxa_guard_release>
 801e94a:	4a0f      	ldr	r2, [pc, #60]	; (801e988 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e94c:	490f      	ldr	r1, [pc, #60]	; (801e98c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e94e:	4810      	ldr	r0, [pc, #64]	; (801e990 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e950:	f007 f96e 	bl	8025c30 <__aeabi_atexit>
 801e954:	4c0f      	ldr	r4, [pc, #60]	; (801e994 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e956:	7823      	ldrb	r3, [r4, #0]
 801e958:	f3bf 8f5b 	dmb	ish
 801e95c:	07db      	lsls	r3, r3, #31
 801e95e:	d40b      	bmi.n	801e978 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e960:	4620      	mov	r0, r4
 801e962:	f007 f96c 	bl	8025c3e <__cxa_guard_acquire>
 801e966:	b138      	cbz	r0, 801e978 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e968:	4620      	mov	r0, r4
 801e96a:	f007 f974 	bl	8025c56 <__cxa_guard_release>
 801e96e:	4a06      	ldr	r2, [pc, #24]	; (801e988 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e970:	4909      	ldr	r1, [pc, #36]	; (801e998 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e972:	480a      	ldr	r0, [pc, #40]	; (801e99c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e974:	f007 f95c 	bl	8025c30 <__aeabi_atexit>
 801e978:	4b05      	ldr	r3, [pc, #20]	; (801e990 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e97a:	66ab      	str	r3, [r5, #104]	; 0x68
 801e97c:	4b07      	ldr	r3, [pc, #28]	; (801e99c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e97e:	66eb      	str	r3, [r5, #108]	; 0x6c
 801e980:	bd38      	pop	{r3, r4, r5, pc}
 801e982:	bf00      	nop
 801e984:	2400af78 	.word	0x2400af78
 801e988:	24000000 	.word	0x24000000
 801e98c:	0801c4ab 	.word	0x0801c4ab
 801e990:	24000050 	.word	0x24000050
 801e994:	2400af7c 	.word	0x2400af7c
 801e998:	0801c4a9 	.word	0x0801c4a9
 801e99c:	24000054 	.word	0x24000054

0801e9a0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801e9a0:	b510      	push	{r4, lr}
 801e9a2:	4604      	mov	r4, r0
 801e9a4:	f7ff ff88 	bl	801e8b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e9a8:	4620      	mov	r0, r4
 801e9aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9ae:	f7ff bfbd 	b.w	801e92c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801e9b2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801e9b2:	b510      	push	{r4, lr}
 801e9b4:	4604      	mov	r4, r0
 801e9b6:	f7ff fff3 	bl	801e9a0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801e9ba:	4620      	mov	r0, r4
 801e9bc:	f7ff ff72 	bl	801e8a4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801e9c0:	4620      	mov	r0, r4
 801e9c2:	f7ff fdf9 	bl	801e5b8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801e9c6:	4620      	mov	r0, r4
 801e9c8:	f7ff fcfa 	bl	801e3c0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801e9cc:	4620      	mov	r0, r4
 801e9ce:	f7ff fd75 	bl	801e4bc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801e9d2:	4620      	mov	r0, r4
 801e9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9d8:	f7ff bee0 	b.w	801e79c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801e9dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801e9dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9e0:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801e9e4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801e9e8:	f1be 0f00 	cmp.w	lr, #0
 801e9ec:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801e9f0:	fb0e 4708 	mla	r7, lr, r8, r4
 801e9f4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801e9f8:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801e9fc:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801ea00:	eb02 0a07 	add.w	sl, r2, r7
 801ea04:	8808      	ldrh	r0, [r1, #0]
 801ea06:	db37      	blt.n	801ea78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801ea08:	45f3      	cmp	fp, lr
 801ea0a:	dd35      	ble.n	801ea78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801ea0c:	2c00      	cmp	r4, #0
 801ea0e:	db31      	blt.n	801ea74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801ea10:	45a0      	cmp	r8, r4
 801ea12:	dd2f      	ble.n	801ea74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801ea14:	5dd2      	ldrb	r2, [r2, r7]
 801ea16:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801ea1a:	1c62      	adds	r2, r4, #1
 801ea1c:	d42f      	bmi.n	801ea7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801ea1e:	4590      	cmp	r8, r2
 801ea20:	dd2d      	ble.n	801ea7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801ea22:	b366      	cbz	r6, 801ea7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801ea24:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ea28:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801ea2c:	f11e 0e01 	adds.w	lr, lr, #1
 801ea30:	d429      	bmi.n	801ea86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801ea32:	45f3      	cmp	fp, lr
 801ea34:	dd27      	ble.n	801ea86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801ea36:	f1bc 0f00 	cmp.w	ip, #0
 801ea3a:	f000 80a1 	beq.w	801eb80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 801ea3e:	2c00      	cmp	r4, #0
 801ea40:	db1f      	blt.n	801ea82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801ea42:	45a0      	cmp	r8, r4
 801ea44:	dd1d      	ble.n	801ea82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801ea46:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801ea4a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801ea4e:	3401      	adds	r4, #1
 801ea50:	d41c      	bmi.n	801ea8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801ea52:	45a0      	cmp	r8, r4
 801ea54:	dd1a      	ble.n	801ea8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801ea56:	b1de      	cbz	r6, 801ea90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801ea58:	44d0      	add	r8, sl
 801ea5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ea5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801ea62:	2e0f      	cmp	r6, #15
 801ea64:	d915      	bls.n	801ea92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801ea66:	4b49      	ldr	r3, [pc, #292]	; (801eb8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801ea68:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801ea6c:	4a48      	ldr	r2, [pc, #288]	; (801eb90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801ea6e:	4849      	ldr	r0, [pc, #292]	; (801eb94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801ea70:	f007 f912 	bl	8025c98 <__assert_func>
 801ea74:	4681      	mov	r9, r0
 801ea76:	e7d0      	b.n	801ea1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801ea78:	4607      	mov	r7, r0
 801ea7a:	4681      	mov	r9, r0
 801ea7c:	e7d6      	b.n	801ea2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801ea7e:	4607      	mov	r7, r0
 801ea80:	e7d4      	b.n	801ea2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801ea82:	4686      	mov	lr, r0
 801ea84:	e7e3      	b.n	801ea4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801ea86:	4603      	mov	r3, r0
 801ea88:	4686      	mov	lr, r0
 801ea8a:	e7ea      	b.n	801ea62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801ea8c:	4603      	mov	r3, r0
 801ea8e:	e7e8      	b.n	801ea62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801ea90:	4603      	mov	r3, r0
 801ea92:	f1bc 0f0f 	cmp.w	ip, #15
 801ea96:	d8e6      	bhi.n	801ea66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801ea98:	fb16 f80c 	smulbb	r8, r6, ip
 801ea9c:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801eaa0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801eaa4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801eaa8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801eaac:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801eab0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801eab4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801eab8:	ea44 0909 	orr.w	r9, r4, r9
 801eabc:	f1cc 0410 	rsb	r4, ip, #16
 801eac0:	041a      	lsls	r2, r3, #16
 801eac2:	ea4a 0707 	orr.w	r7, sl, r7
 801eac6:	1ba4      	subs	r4, r4, r6
 801eac8:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801eacc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ead0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ead4:	4377      	muls	r7, r6
 801ead6:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801eada:	4313      	orrs	r3, r2
 801eadc:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801eae0:	fb04 7409 	mla	r4, r4, r9, r7
 801eae4:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801eae8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801eaec:	b2af      	uxth	r7, r5
 801eaee:	fb08 4303 	mla	r3, r8, r3, r4
 801eaf2:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801eaf6:	43ed      	mvns	r5, r5
 801eaf8:	10c6      	asrs	r6, r0, #3
 801eafa:	4322      	orrs	r2, r4
 801eafc:	b2ed      	uxtb	r5, r5
 801eafe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eb02:	fb0c 3202 	mla	r2, ip, r2, r3
 801eb06:	fb16 f605 	smulbb	r6, r6, r5
 801eb0a:	0d53      	lsrs	r3, r2, #21
 801eb0c:	0952      	lsrs	r2, r2, #5
 801eb0e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eb12:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801eb16:	431a      	orrs	r2, r3
 801eb18:	b293      	uxth	r3, r2
 801eb1a:	1202      	asrs	r2, r0, #8
 801eb1c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801eb20:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801eb24:	00dc      	lsls	r4, r3, #3
 801eb26:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801eb2a:	fb12 f205 	smulbb	r2, r2, r5
 801eb2e:	b2e4      	uxtb	r4, r4
 801eb30:	fb0c 2c07 	mla	ip, ip, r7, r2
 801eb34:	10da      	asrs	r2, r3, #3
 801eb36:	00c3      	lsls	r3, r0, #3
 801eb38:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801eb3c:	fa1f fc8c 	uxth.w	ip, ip
 801eb40:	b2db      	uxtb	r3, r3
 801eb42:	fb02 6207 	mla	r2, r2, r7, r6
 801eb46:	fb13 f305 	smulbb	r3, r3, r5
 801eb4a:	b296      	uxth	r6, r2
 801eb4c:	fb04 3307 	mla	r3, r4, r7, r3
 801eb50:	b29a      	uxth	r2, r3
 801eb52:	f10c 0301 	add.w	r3, ip, #1
 801eb56:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801eb5a:	1c53      	adds	r3, r2, #1
 801eb5c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eb60:	1c72      	adds	r2, r6, #1
 801eb62:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801eb66:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801eb6a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801eb6e:	0952      	lsrs	r2, r2, #5
 801eb70:	ea43 030c 	orr.w	r3, r3, ip
 801eb74:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801eb78:	4313      	orrs	r3, r2
 801eb7a:	800b      	strh	r3, [r1, #0]
 801eb7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb80:	2e0f      	cmp	r6, #15
 801eb82:	f63f af70 	bhi.w	801ea66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801eb86:	4603      	mov	r3, r0
 801eb88:	4686      	mov	lr, r0
 801eb8a:	e785      	b.n	801ea98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801eb8c:	0802a1f1 	.word	0x0802a1f1
 801eb90:	0802a867 	.word	0x0802a867
 801eb94:	0802a275 	.word	0x0802a275

0801eb98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb9c:	ed2d 8b08 	vpush	{d8-d11}
 801eba0:	b099      	sub	sp, #100	; 0x64
 801eba2:	eeb0 aa40 	vmov.f32	s20, s0
 801eba6:	eef0 9a60 	vmov.f32	s19, s1
 801ebaa:	9215      	str	r2, [sp, #84]	; 0x54
 801ebac:	eeb0 9a41 	vmov.f32	s18, s2
 801ebb0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ebb2:	eeb0 8a62 	vmov.f32	s16, s5
 801ebb6:	9309      	str	r3, [sp, #36]	; 0x24
 801ebb8:	eef0 8a43 	vmov.f32	s17, s6
 801ebbc:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801ebc0:	eef0 ba44 	vmov.f32	s23, s8
 801ebc4:	9016      	str	r0, [sp, #88]	; 0x58
 801ebc6:	eeb0 ba64 	vmov.f32	s22, s9
 801ebca:	930d      	str	r3, [sp, #52]	; 0x34
 801ebcc:	eef0 aa45 	vmov.f32	s21, s10
 801ebd0:	6850      	ldr	r0, [r2, #4]
 801ebd2:	910c      	str	r1, [sp, #48]	; 0x30
 801ebd4:	6812      	ldr	r2, [r2, #0]
 801ebd6:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801ebda:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 801ebde:	fb00 1303 	mla	r3, r0, r3, r1
 801ebe2:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801ebe6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ebe8:	681b      	ldr	r3, [r3, #0]
 801ebea:	930b      	str	r3, [sp, #44]	; 0x2c
 801ebec:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ebee:	685e      	ldr	r6, [r3, #4]
 801ebf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ebf2:	3604      	adds	r6, #4
 801ebf4:	43db      	mvns	r3, r3
 801ebf6:	b2db      	uxtb	r3, r3
 801ebf8:	930a      	str	r3, [sp, #40]	; 0x28
 801ebfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	dc03      	bgt.n	801ec08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ec00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	f340 8225 	ble.w	801f052 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 801ec08:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ec0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ec0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ec12:	1e48      	subs	r0, r1, #1
 801ec14:	1e57      	subs	r7, r2, #1
 801ec16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec18:	2b00      	cmp	r3, #0
 801ec1a:	f340 80e3 	ble.w	801ede4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 801ec1e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801ec22:	ea4f 4325 	mov.w	r3, r5, asr #16
 801ec26:	d406      	bmi.n	801ec36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ec28:	4584      	cmp	ip, r0
 801ec2a:	da04      	bge.n	801ec36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	db02      	blt.n	801ec36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ec30:	42bb      	cmp	r3, r7
 801ec32:	f2c0 80d8 	blt.w	801ede6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801ec36:	f11c 0c01 	adds.w	ip, ip, #1
 801ec3a:	f100 80c9 	bmi.w	801edd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801ec3e:	4561      	cmp	r1, ip
 801ec40:	f2c0 80c6 	blt.w	801edd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801ec44:	3301      	adds	r3, #1
 801ec46:	f100 80c3 	bmi.w	801edd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801ec4a:	429a      	cmp	r2, r3
 801ec4c:	f2c0 80c0 	blt.w	801edd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801ec50:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ec54:	4647      	mov	r7, r8
 801ec56:	f1bb 0f00 	cmp.w	fp, #0
 801ec5a:	f340 80e3 	ble.w	801ee24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ec5e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801ec60:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ec64:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ec66:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801ec6a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ec6e:	ea5f 422a 	movs.w	r2, sl, asr #16
 801ec72:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ec76:	689b      	ldr	r3, [r3, #8]
 801ec78:	f100 8121 	bmi.w	801eebe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ec7c:	f103 39ff 	add.w	r9, r3, #4294967295
 801ec80:	454a      	cmp	r2, r9
 801ec82:	f280 811c 	bge.w	801eebe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ec86:	f1bc 0f00 	cmp.w	ip, #0
 801ec8a:	f2c0 8118 	blt.w	801eebe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ec8e:	f10e 39ff 	add.w	r9, lr, #4294967295
 801ec92:	45cc      	cmp	ip, r9
 801ec94:	f280 8113 	bge.w	801eebe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ec98:	b21b      	sxth	r3, r3
 801ec9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ec9c:	fb0c 2203 	mla	r2, ip, r3, r2
 801eca0:	eb04 0902 	add.w	r9, r4, r2
 801eca4:	5ca2      	ldrb	r2, [r4, r2]
 801eca6:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801ecaa:	2800      	cmp	r0, #0
 801ecac:	f000 80fe 	beq.w	801eeac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801ecb0:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ecb4:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801ecb8:	9211      	str	r2, [sp, #68]	; 0x44
 801ecba:	b151      	cbz	r1, 801ecd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ecbc:	eb09 0203 	add.w	r2, r9, r3
 801ecc0:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ecc4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ecc8:	930f      	str	r3, [sp, #60]	; 0x3c
 801ecca:	7853      	ldrb	r3, [r2, #1]
 801eccc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ecd0:	9312      	str	r3, [sp, #72]	; 0x48
 801ecd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ecd4:	fb10 f201 	smulbb	r2, r0, r1
 801ecd8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ecda:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ecde:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ece2:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801ece6:	10d2      	asrs	r2, r2, #3
 801ece8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ecec:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801ecf0:	ea4c 0c03 	orr.w	ip, ip, r3
 801ecf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ecf6:	041b      	lsls	r3, r3, #16
 801ecf8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ecfc:	4323      	orrs	r3, r4
 801ecfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ed00:	4353      	muls	r3, r2
 801ed02:	fb09 330c 	mla	r3, r9, ip, r3
 801ed06:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801ed0a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ed0e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ed12:	ea4c 0e0e 	orr.w	lr, ip, lr
 801ed16:	f1c1 0c10 	rsb	ip, r1, #16
 801ed1a:	ebac 0c00 	sub.w	ip, ip, r0
 801ed1e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ed22:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801ed26:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801ed2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed2c:	0418      	lsls	r0, r3, #16
 801ed2e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ed32:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ed36:	4318      	orrs	r0, r3
 801ed38:	fb02 c200 	mla	r2, r2, r0, ip
 801ed3c:	8838      	ldrh	r0, [r7, #0]
 801ed3e:	0d53      	lsrs	r3, r2, #21
 801ed40:	0952      	lsrs	r2, r2, #5
 801ed42:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ed46:	1201      	asrs	r1, r0, #8
 801ed48:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ed4c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801ed50:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ed54:	00c0      	lsls	r0, r0, #3
 801ed56:	431a      	orrs	r2, r3
 801ed58:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801ed5c:	fb11 f104 	smulbb	r1, r1, r4
 801ed60:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ed64:	b292      	uxth	r2, r2
 801ed66:	fb1e fe04 	smulbb	lr, lr, r4
 801ed6a:	b2c0      	uxtb	r0, r0
 801ed6c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801ed70:	fb10 f004 	smulbb	r0, r0, r4
 801ed74:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ed78:	fb0c 1c03 	mla	ip, ip, r3, r1
 801ed7c:	10d1      	asrs	r1, r2, #3
 801ed7e:	00d2      	lsls	r2, r2, #3
 801ed80:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ed84:	fa1f fc8c 	uxth.w	ip, ip
 801ed88:	b2d2      	uxtb	r2, r2
 801ed8a:	fb01 e103 	mla	r1, r1, r3, lr
 801ed8e:	fb02 0303 	mla	r3, r2, r3, r0
 801ed92:	b289      	uxth	r1, r1
 801ed94:	b29a      	uxth	r2, r3
 801ed96:	f10c 0301 	add.w	r3, ip, #1
 801ed9a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ed9e:	1c53      	adds	r3, r2, #1
 801eda0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eda4:	1c4a      	adds	r2, r1, #1
 801eda6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801edaa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801edae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801edb2:	0949      	lsrs	r1, r1, #5
 801edb4:	ea43 030c 	orr.w	r3, r3, ip
 801edb8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801edbc:	430b      	orrs	r3, r1
 801edbe:	803b      	strh	r3, [r7, #0]
 801edc0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801edc2:	3702      	adds	r7, #2
 801edc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801edc8:	449a      	add	sl, r3
 801edca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801edcc:	441d      	add	r5, r3
 801edce:	e742      	b.n	801ec56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801edd0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801edd2:	f108 0802 	add.w	r8, r8, #2
 801edd6:	449a      	add	sl, r3
 801edd8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801edda:	441d      	add	r5, r3
 801eddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801edde:	3b01      	subs	r3, #1
 801ede0:	9309      	str	r3, [sp, #36]	; 0x24
 801ede2:	e718      	b.n	801ec16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ede4:	d023      	beq.n	801ee2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ede6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ede8:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801edea:	3b01      	subs	r3, #1
 801edec:	fb00 a003 	mla	r0, r0, r3, sl
 801edf0:	1400      	asrs	r0, r0, #16
 801edf2:	f53f af2d 	bmi.w	801ec50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801edf6:	3901      	subs	r1, #1
 801edf8:	4288      	cmp	r0, r1
 801edfa:	f6bf af29 	bge.w	801ec50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801edfe:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801ee00:	fb01 5303 	mla	r3, r1, r3, r5
 801ee04:	141b      	asrs	r3, r3, #16
 801ee06:	f53f af23 	bmi.w	801ec50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ee0a:	3a01      	subs	r2, #1
 801ee0c:	4293      	cmp	r3, r2
 801ee0e:	f6bf af1f 	bge.w	801ec50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ee12:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801ee16:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801ee1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ee1e:	f1be 0f00 	cmp.w	lr, #0
 801ee22:	dc6c      	bgt.n	801eefe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801ee24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee26:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ee2a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801ee2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	f340 810e 	ble.w	801f052 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 801ee36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ee3a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ee3c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ee40:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ee44:	eef0 6a48 	vmov.f32	s13, s16
 801ee48:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ee4c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ee50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee54:	ee16 aa90 	vmov	sl, s13
 801ee58:	eef0 6a68 	vmov.f32	s13, s17
 801ee5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee60:	ee16 5a90 	vmov	r5, s13
 801ee64:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ee68:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ee6c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ee70:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ee74:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ee78:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ee7c:	ee18 2a10 	vmov	r2, s16
 801ee80:	eeb0 8a47 	vmov.f32	s16, s14
 801ee84:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee88:	ee18 2a90 	vmov	r2, s17
 801ee8c:	932d      	str	r3, [sp, #180]	; 0xb4
 801ee8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ee90:	eef0 8a67 	vmov.f32	s17, s15
 801ee94:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee98:	932e      	str	r3, [sp, #184]	; 0xb8
 801ee9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ee9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ee9e:	3b01      	subs	r3, #1
 801eea0:	930c      	str	r3, [sp, #48]	; 0x30
 801eea2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801eea4:	bf08      	it	eq
 801eea6:	4613      	moveq	r3, r2
 801eea8:	9309      	str	r3, [sp, #36]	; 0x24
 801eeaa:	e6a6      	b.n	801ebfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801eeac:	2900      	cmp	r1, #0
 801eeae:	f43f af10 	beq.w	801ecd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801eeb2:	f819 3003 	ldrb.w	r3, [r9, r3]
 801eeb6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801eeba:	930f      	str	r3, [sp, #60]	; 0x3c
 801eebc:	e709      	b.n	801ecd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801eebe:	f112 0901 	adds.w	r9, r2, #1
 801eec2:	f53f af7d 	bmi.w	801edc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801eec6:	454b      	cmp	r3, r9
 801eec8:	f6ff af7a 	blt.w	801edc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801eecc:	f11c 0901 	adds.w	r9, ip, #1
 801eed0:	f53f af76 	bmi.w	801edc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801eed4:	45ce      	cmp	lr, r9
 801eed6:	f6ff af73 	blt.w	801edc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801eeda:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801eedc:	b21b      	sxth	r3, r3
 801eede:	9202      	str	r2, [sp, #8]
 801eee0:	fa0f f28e 	sxth.w	r2, lr
 801eee4:	9300      	str	r3, [sp, #0]
 801eee6:	4633      	mov	r3, r6
 801eee8:	9201      	str	r2, [sp, #4]
 801eeea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801eeec:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801eef0:	e9cd c003 	strd	ip, r0, [sp, #12]
 801eef4:	4639      	mov	r1, r7
 801eef6:	9816      	ldr	r0, [sp, #88]	; 0x58
 801eef8:	f7ff fd70 	bl	801e9dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801eefc:	e760      	b.n	801edc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801eefe:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ef00:	ea4f 422a 	mov.w	r2, sl, asr #16
 801ef04:	1429      	asrs	r1, r5, #16
 801ef06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ef08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ef0c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801ef10:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ef14:	fb03 2101 	mla	r1, r3, r1, r2
 801ef18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ef1a:	440a      	add	r2, r1
 801ef1c:	5c61      	ldrb	r1, [r4, r1]
 801ef1e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801ef22:	f1bc 0f00 	cmp.w	ip, #0
 801ef26:	f000 808c 	beq.w	801f042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 801ef2a:	7857      	ldrb	r7, [r2, #1]
 801ef2c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801ef30:	9413      	str	r4, [sp, #76]	; 0x4c
 801ef32:	b140      	cbz	r0, 801ef46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ef34:	18d7      	adds	r7, r2, r3
 801ef36:	5cd3      	ldrb	r3, [r2, r3]
 801ef38:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ef3c:	9310      	str	r3, [sp, #64]	; 0x40
 801ef3e:	787b      	ldrb	r3, [r7, #1]
 801ef40:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ef44:	9314      	str	r3, [sp, #80]	; 0x50
 801ef46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ef48:	fb1c f200 	smulbb	r2, ip, r0
 801ef4c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ef4e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ef52:	041f      	lsls	r7, r3, #16
 801ef54:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ef58:	10d2      	asrs	r2, r2, #3
 801ef5a:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801ef5e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801ef62:	431f      	orrs	r7, r3
 801ef64:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801ef68:	9317      	str	r3, [sp, #92]	; 0x5c
 801ef6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ef6c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ef6e:	041b      	lsls	r3, r3, #16
 801ef70:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ef74:	ea43 030b 	orr.w	r3, r3, fp
 801ef78:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ef7c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ef80:	4353      	muls	r3, r2
 801ef82:	fb04 3707 	mla	r7, r4, r7, r3
 801ef86:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801ef8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ef8c:	ea43 0b01 	orr.w	fp, r3, r1
 801ef90:	f1c0 0110 	rsb	r1, r0, #16
 801ef94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef96:	eba1 0c0c 	sub.w	ip, r1, ip
 801ef9a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ef9e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801efa2:	fb0c 770b 	mla	r7, ip, fp, r7
 801efa6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801efaa:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801efae:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801efb2:	ea4c 0c0b 	orr.w	ip, ip, fp
 801efb6:	fb02 770c 	mla	r7, r2, ip, r7
 801efba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801efbc:	0d79      	lsrs	r1, r7, #21
 801efbe:	8812      	ldrh	r2, [r2, #0]
 801efc0:	097f      	lsrs	r7, r7, #5
 801efc2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801efc6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801efca:	430f      	orrs	r7, r1
 801efcc:	1211      	asrs	r1, r2, #8
 801efce:	b2bb      	uxth	r3, r7
 801efd0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801efd4:	10d7      	asrs	r7, r2, #3
 801efd6:	fb11 f104 	smulbb	r1, r1, r4
 801efda:	1218      	asrs	r0, r3, #8
 801efdc:	00d2      	lsls	r2, r2, #3
 801efde:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801efe2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801efe6:	fb17 f704 	smulbb	r7, r7, r4
 801efea:	b2d2      	uxtb	r2, r2
 801efec:	fb00 1009 	mla	r0, r0, r9, r1
 801eff0:	10d9      	asrs	r1, r3, #3
 801eff2:	fb12 f204 	smulbb	r2, r2, r4
 801eff6:	00db      	lsls	r3, r3, #3
 801eff8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801effc:	b280      	uxth	r0, r0
 801effe:	b2db      	uxtb	r3, r3
 801f000:	fb01 7109 	mla	r1, r1, r9, r7
 801f004:	fb03 2309 	mla	r3, r3, r9, r2
 801f008:	1c42      	adds	r2, r0, #1
 801f00a:	b289      	uxth	r1, r1
 801f00c:	b29b      	uxth	r3, r3
 801f00e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f012:	1c4f      	adds	r7, r1, #1
 801f014:	1c5a      	adds	r2, r3, #1
 801f016:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801f01a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f01e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f024:	0949      	lsrs	r1, r1, #5
 801f026:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f02a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f02e:	4310      	orrs	r0, r2
 801f030:	4308      	orrs	r0, r1
 801f032:	f823 0b02 	strh.w	r0, [r3], #2
 801f036:	930e      	str	r3, [sp, #56]	; 0x38
 801f038:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f03a:	449a      	add	sl, r3
 801f03c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f03e:	441d      	add	r5, r3
 801f040:	e6ed      	b.n	801ee1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801f042:	2800      	cmp	r0, #0
 801f044:	f43f af7f 	beq.w	801ef46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801f048:	5cd3      	ldrb	r3, [r2, r3]
 801f04a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f04e:	9310      	str	r3, [sp, #64]	; 0x40
 801f050:	e779      	b.n	801ef46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801f052:	b019      	add	sp, #100	; 0x64
 801f054:	ecbd 8b08 	vpop	{d8-d11}
 801f058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f05c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801f05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f060:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801f064:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801f068:	2e00      	cmp	r6, #0
 801f06a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801f06e:	fb06 570e 	mla	r7, r6, lr, r5
 801f072:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801f076:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801f07a:	eb02 0807 	add.w	r8, r2, r7
 801f07e:	8808      	ldrh	r0, [r1, #0]
 801f080:	db38      	blt.n	801f0f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801f082:	45b1      	cmp	r9, r6
 801f084:	dd36      	ble.n	801f0f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801f086:	2d00      	cmp	r5, #0
 801f088:	db32      	blt.n	801f0f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801f08a:	45ae      	cmp	lr, r5
 801f08c:	dd30      	ble.n	801f0f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801f08e:	5dd2      	ldrb	r2, [r2, r7]
 801f090:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801f094:	1c6a      	adds	r2, r5, #1
 801f096:	d430      	bmi.n	801f0fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801f098:	4596      	cmp	lr, r2
 801f09a:	dd2e      	ble.n	801f0fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801f09c:	b36c      	cbz	r4, 801f0fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801f09e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f0a2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f0a6:	3601      	adds	r6, #1
 801f0a8:	d42b      	bmi.n	801f102 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801f0aa:	45b1      	cmp	r9, r6
 801f0ac:	dd29      	ble.n	801f102 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801f0ae:	f1bc 0f00 	cmp.w	ip, #0
 801f0b2:	d028      	beq.n	801f106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801f0b4:	2d00      	cmp	r5, #0
 801f0b6:	db22      	blt.n	801f0fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801f0b8:	45ae      	cmp	lr, r5
 801f0ba:	dd20      	ble.n	801f0fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801f0bc:	f818 600e 	ldrb.w	r6, [r8, lr]
 801f0c0:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801f0c4:	3501      	adds	r5, #1
 801f0c6:	d407      	bmi.n	801f0d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801f0c8:	45ae      	cmp	lr, r5
 801f0ca:	dd05      	ble.n	801f0d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801f0cc:	b134      	cbz	r4, 801f0dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f0ce:	44c6      	add	lr, r8
 801f0d0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f0d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801f0d8:	2c0f      	cmp	r4, #15
 801f0da:	d802      	bhi.n	801f0e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801f0dc:	f1bc 0f0f 	cmp.w	ip, #15
 801f0e0:	d914      	bls.n	801f10c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 801f0e2:	4b26      	ldr	r3, [pc, #152]	; (801f17c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 801f0e4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801f0e8:	4a25      	ldr	r2, [pc, #148]	; (801f180 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801f0ea:	4826      	ldr	r0, [pc, #152]	; (801f184 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 801f0ec:	f006 fdd4 	bl	8025c98 <__assert_func>
 801f0f0:	4607      	mov	r7, r0
 801f0f2:	e7cf      	b.n	801f094 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 801f0f4:	4602      	mov	r2, r0
 801f0f6:	4607      	mov	r7, r0
 801f0f8:	e7d5      	b.n	801f0a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801f0fa:	4602      	mov	r2, r0
 801f0fc:	e7d3      	b.n	801f0a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801f0fe:	4606      	mov	r6, r0
 801f100:	e7e0      	b.n	801f0c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 801f102:	4606      	mov	r6, r0
 801f104:	e7e8      	b.n	801f0d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801f106:	2c0f      	cmp	r4, #15
 801f108:	d8eb      	bhi.n	801f0e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801f10a:	4606      	mov	r6, r0
 801f10c:	fb14 f30c 	smulbb	r3, r4, ip
 801f110:	043d      	lsls	r5, r7, #16
 801f112:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801f116:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f11a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801f11e:	10db      	asrs	r3, r3, #3
 801f120:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f124:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f128:	432f      	orrs	r7, r5
 801f12a:	f1cc 0510 	rsb	r5, ip, #16
 801f12e:	ea4e 0202 	orr.w	r2, lr, r2
 801f132:	1b2d      	subs	r5, r5, r4
 801f134:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801f138:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801f13c:	4354      	muls	r4, r2
 801f13e:	fb05 4507 	mla	r5, r5, r7, r4
 801f142:	0404      	lsls	r4, r0, #16
 801f144:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f148:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f14c:	4320      	orrs	r0, r4
 801f14e:	fb03 5400 	mla	r4, r3, r0, r5
 801f152:	0430      	lsls	r0, r6, #16
 801f154:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801f158:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801f15c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f160:	4330      	orrs	r0, r6
 801f162:	fb03 4000 	mla	r0, r3, r0, r4
 801f166:	0d43      	lsrs	r3, r0, #21
 801f168:	0940      	lsrs	r0, r0, #5
 801f16a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f16e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f172:	4318      	orrs	r0, r3
 801f174:	8008      	strh	r0, [r1, #0]
 801f176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f17a:	bf00      	nop
 801f17c:	0802a1f1 	.word	0x0802a1f1
 801f180:	0802a867 	.word	0x0802a867
 801f184:	0802a275 	.word	0x0802a275

0801f188 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f18c:	ed2d 8b0a 	vpush	{d8-d12}
 801f190:	b093      	sub	sp, #76	; 0x4c
 801f192:	eeb0 aa40 	vmov.f32	s20, s0
 801f196:	eef0 9a60 	vmov.f32	s19, s1
 801f19a:	920f      	str	r2, [sp, #60]	; 0x3c
 801f19c:	eeb0 9a41 	vmov.f32	s18, s2
 801f1a0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f1a2:	eeb0 8a62 	vmov.f32	s16, s5
 801f1a6:	9010      	str	r0, [sp, #64]	; 0x40
 801f1a8:	eef0 8a43 	vmov.f32	s17, s6
 801f1ac:	6850      	ldr	r0, [r2, #4]
 801f1ae:	eeb0 ca44 	vmov.f32	s24, s8
 801f1b2:	9108      	str	r1, [sp, #32]
 801f1b4:	eef0 ba64 	vmov.f32	s23, s9
 801f1b8:	9306      	str	r3, [sp, #24]
 801f1ba:	eeb0 ba45 	vmov.f32	s22, s10
 801f1be:	6812      	ldr	r2, [r2, #0]
 801f1c0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f1c4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f1c8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801f1cc:	fb00 1303 	mla	r3, r0, r3, r1
 801f1d0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801f1d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	9307      	str	r3, [sp, #28]
 801f1da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f1dc:	685f      	ldr	r7, [r3, #4]
 801f1de:	3704      	adds	r7, #4
 801f1e0:	9b08      	ldr	r3, [sp, #32]
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	dc03      	bgt.n	801f1ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f1e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f1e8:	2b00      	cmp	r3, #0
 801f1ea:	f340 81b2 	ble.w	801f552 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801f1ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f1f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f1f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f1f8:	1e48      	subs	r0, r1, #1
 801f1fa:	f102 3cff 	add.w	ip, r2, #4294967295
 801f1fe:	9b06      	ldr	r3, [sp, #24]
 801f200:	2b00      	cmp	r3, #0
 801f202:	f340 80a9 	ble.w	801f358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801f206:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f20a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f20e:	d406      	bmi.n	801f21e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f210:	4586      	cmp	lr, r0
 801f212:	da04      	bge.n	801f21e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f214:	2b00      	cmp	r3, #0
 801f216:	db02      	blt.n	801f21e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f218:	4563      	cmp	r3, ip
 801f21a:	f2c0 809e 	blt.w	801f35a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f21e:	f11e 0e01 	adds.w	lr, lr, #1
 801f222:	f100 808f 	bmi.w	801f344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f226:	4571      	cmp	r1, lr
 801f228:	f2c0 808c 	blt.w	801f344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f22c:	3301      	adds	r3, #1
 801f22e:	f100 8089 	bmi.w	801f344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f232:	429a      	cmp	r2, r3
 801f234:	f2c0 8086 	blt.w	801f344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f238:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f23c:	46c8      	mov	r8, r9
 801f23e:	f1bb 0f00 	cmp.w	fp, #0
 801f242:	f340 80a6 	ble.w	801f392 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801f246:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f248:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f24c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f24e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801f252:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f256:	1422      	asrs	r2, r4, #16
 801f258:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f25c:	689b      	ldr	r3, [r3, #8]
 801f25e:	f100 80e3 	bmi.w	801f428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801f262:	f103 3aff 	add.w	sl, r3, #4294967295
 801f266:	4552      	cmp	r2, sl
 801f268:	f280 80de 	bge.w	801f428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801f26c:	f1bc 0f00 	cmp.w	ip, #0
 801f270:	f2c0 80da 	blt.w	801f428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801f274:	f10e 3aff 	add.w	sl, lr, #4294967295
 801f278:	45d4      	cmp	ip, sl
 801f27a:	f280 80d5 	bge.w	801f428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801f27e:	b21b      	sxth	r3, r3
 801f280:	9d07      	ldr	r5, [sp, #28]
 801f282:	fb0c 2203 	mla	r2, ip, r3, r2
 801f286:	eb05 0a02 	add.w	sl, r5, r2
 801f28a:	5caa      	ldrb	r2, [r5, r2]
 801f28c:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801f290:	2800      	cmp	r0, #0
 801f292:	f000 80c0 	beq.w	801f416 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801f296:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f29a:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801f29e:	920b      	str	r2, [sp, #44]	; 0x2c
 801f2a0:	b151      	cbz	r1, 801f2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801f2a2:	eb0a 0203 	add.w	r2, sl, r3
 801f2a6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f2aa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f2ae:	9309      	str	r3, [sp, #36]	; 0x24
 801f2b0:	7853      	ldrb	r3, [r2, #1]
 801f2b2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f2b6:	930c      	str	r3, [sp, #48]	; 0x30
 801f2b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f2ba:	fb10 f201 	smulbb	r2, r0, r1
 801f2be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f2c0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f2c4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f2c8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f2cc:	10d2      	asrs	r2, r2, #3
 801f2ce:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f2d2:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801f2d6:	ea4c 0c03 	orr.w	ip, ip, r3
 801f2da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f2dc:	041b      	lsls	r3, r3, #16
 801f2de:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f2e2:	432b      	orrs	r3, r5
 801f2e4:	4353      	muls	r3, r2
 801f2e6:	fb0a 330c 	mla	r3, sl, ip, r3
 801f2ea:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f2ee:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f2f2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f2f6:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f2fa:	f1c1 0c10 	rsb	ip, r1, #16
 801f2fe:	ebac 0c00 	sub.w	ip, ip, r0
 801f302:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f306:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f30a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f310:	0418      	lsls	r0, r3, #16
 801f312:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f316:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f31a:	4318      	orrs	r0, r3
 801f31c:	fb02 c200 	mla	r2, r2, r0, ip
 801f320:	0d53      	lsrs	r3, r2, #21
 801f322:	0952      	lsrs	r2, r2, #5
 801f324:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f328:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f32c:	431a      	orrs	r2, r3
 801f32e:	f8a8 2000 	strh.w	r2, [r8]
 801f332:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f334:	f108 0802 	add.w	r8, r8, #2
 801f338:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f33c:	441c      	add	r4, r3
 801f33e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f340:	441e      	add	r6, r3
 801f342:	e77c      	b.n	801f23e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f344:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f346:	f109 0902 	add.w	r9, r9, #2
 801f34a:	441c      	add	r4, r3
 801f34c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f34e:	441e      	add	r6, r3
 801f350:	9b06      	ldr	r3, [sp, #24]
 801f352:	3b01      	subs	r3, #1
 801f354:	9306      	str	r3, [sp, #24]
 801f356:	e752      	b.n	801f1fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f358:	d020      	beq.n	801f39c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f35a:	9b06      	ldr	r3, [sp, #24]
 801f35c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801f35e:	3b01      	subs	r3, #1
 801f360:	fb00 4003 	mla	r0, r0, r3, r4
 801f364:	1400      	asrs	r0, r0, #16
 801f366:	f53f af67 	bmi.w	801f238 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f36a:	3901      	subs	r1, #1
 801f36c:	4288      	cmp	r0, r1
 801f36e:	f6bf af63 	bge.w	801f238 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f372:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f374:	fb01 6303 	mla	r3, r1, r3, r6
 801f378:	141b      	asrs	r3, r3, #16
 801f37a:	f53f af5d 	bmi.w	801f238 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f37e:	3a01      	subs	r2, #1
 801f380:	4293      	cmp	r3, r2
 801f382:	f6bf af59 	bge.w	801f238 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f386:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f38a:	46ca      	mov	sl, r9
 801f38c:	f1b8 0f00 	cmp.w	r8, #0
 801f390:	dc67      	bgt.n	801f462 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801f392:	9b06      	ldr	r3, [sp, #24]
 801f394:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f398:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801f39c:	9b08      	ldr	r3, [sp, #32]
 801f39e:	2b00      	cmp	r3, #0
 801f3a0:	f340 80d7 	ble.w	801f552 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801f3a4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f3a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f3aa:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f3ae:	eef0 6a48 	vmov.f32	s13, s16
 801f3b2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f3b6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f3ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3be:	ee16 4a90 	vmov	r4, s13
 801f3c2:	eef0 6a68 	vmov.f32	s13, s17
 801f3c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3ca:	ee16 6a90 	vmov	r6, s13
 801f3ce:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f3d2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f3d6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f3da:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f3de:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f3e2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f3e6:	ee18 2a10 	vmov	r2, s16
 801f3ea:	eeb0 8a47 	vmov.f32	s16, s14
 801f3ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3f2:	ee18 2a90 	vmov	r2, s17
 801f3f6:	9329      	str	r3, [sp, #164]	; 0xa4
 801f3f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f3fa:	eef0 8a67 	vmov.f32	s17, s15
 801f3fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801f402:	932a      	str	r3, [sp, #168]	; 0xa8
 801f404:	9b08      	ldr	r3, [sp, #32]
 801f406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f408:	3b01      	subs	r3, #1
 801f40a:	9308      	str	r3, [sp, #32]
 801f40c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f40e:	bf08      	it	eq
 801f410:	4613      	moveq	r3, r2
 801f412:	9306      	str	r3, [sp, #24]
 801f414:	e6e4      	b.n	801f1e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f416:	2900      	cmp	r1, #0
 801f418:	f43f af4e 	beq.w	801f2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801f41c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f420:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f424:	9309      	str	r3, [sp, #36]	; 0x24
 801f426:	e747      	b.n	801f2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801f428:	f112 0a01 	adds.w	sl, r2, #1
 801f42c:	d481      	bmi.n	801f332 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f42e:	4553      	cmp	r3, sl
 801f430:	f6ff af7f 	blt.w	801f332 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f434:	f11c 0a01 	adds.w	sl, ip, #1
 801f438:	f53f af7b 	bmi.w	801f332 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f43c:	45d6      	cmp	lr, sl
 801f43e:	f6ff af78 	blt.w	801f332 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f442:	b21b      	sxth	r3, r3
 801f444:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801f448:	fa0f f28e 	sxth.w	r2, lr
 801f44c:	9300      	str	r3, [sp, #0]
 801f44e:	463b      	mov	r3, r7
 801f450:	9201      	str	r2, [sp, #4]
 801f452:	9a07      	ldr	r2, [sp, #28]
 801f454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f458:	4641      	mov	r1, r8
 801f45a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f45c:	f7ff fdfe 	bl	801f05c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801f460:	e767      	b.n	801f332 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f462:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f464:	1422      	asrs	r2, r4, #16
 801f466:	1431      	asrs	r1, r6, #16
 801f468:	9d07      	ldr	r5, [sp, #28]
 801f46a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f46e:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801f472:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f476:	fb03 2101 	mla	r1, r3, r1, r2
 801f47a:	9a07      	ldr	r2, [sp, #28]
 801f47c:	440a      	add	r2, r1
 801f47e:	5c69      	ldrb	r1, [r5, r1]
 801f480:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801f484:	f1be 0f00 	cmp.w	lr, #0
 801f488:	d05c      	beq.n	801f544 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801f48a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f48e:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801f492:	950d      	str	r5, [sp, #52]	; 0x34
 801f494:	b150      	cbz	r0, 801f4ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801f496:	eb02 0c03 	add.w	ip, r2, r3
 801f49a:	5cd3      	ldrb	r3, [r2, r3]
 801f49c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f4a0:	930a      	str	r3, [sp, #40]	; 0x28
 801f4a2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f4a6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f4aa:	930e      	str	r3, [sp, #56]	; 0x38
 801f4ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f4ae:	fb1e f200 	smulbb	r2, lr, r0
 801f4b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f4b4:	f108 38ff 	add.w	r8, r8, #4294967295
 801f4b8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f4bc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f4c0:	10d2      	asrs	r2, r2, #3
 801f4c2:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801f4c6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f4ca:	ea4c 0c03 	orr.w	ip, ip, r3
 801f4ce:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801f4d2:	9311      	str	r3, [sp, #68]	; 0x44
 801f4d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4d6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f4d8:	041b      	lsls	r3, r3, #16
 801f4da:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f4de:	ea43 030b 	orr.w	r3, r3, fp
 801f4e2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f4e6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f4ea:	4353      	muls	r3, r2
 801f4ec:	fb05 3c0c 	mla	ip, r5, ip, r3
 801f4f0:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f4f4:	ea43 0b01 	orr.w	fp, r3, r1
 801f4f8:	f1c0 0110 	rsb	r1, r0, #16
 801f4fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4fe:	eba1 0e0e 	sub.w	lr, r1, lr
 801f502:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801f506:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f50a:	fb0e cc0b 	mla	ip, lr, fp, ip
 801f50e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801f512:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801f516:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f51a:	ea4b 0e0e 	orr.w	lr, fp, lr
 801f51e:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f522:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801f526:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f52a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f52e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f532:	ea43 0c0c 	orr.w	ip, r3, ip
 801f536:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f538:	441c      	add	r4, r3
 801f53a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f53c:	f82a cb02 	strh.w	ip, [sl], #2
 801f540:	441e      	add	r6, r3
 801f542:	e723      	b.n	801f38c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f544:	2800      	cmp	r0, #0
 801f546:	d0b1      	beq.n	801f4ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801f548:	5cd3      	ldrb	r3, [r2, r3]
 801f54a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f54e:	930a      	str	r3, [sp, #40]	; 0x28
 801f550:	e7ac      	b.n	801f4ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801f552:	b013      	add	sp, #76	; 0x4c
 801f554:	ecbd 8b0a 	vpop	{d8-d12}
 801f558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f55c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801f55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f560:	468b      	mov	fp, r1
 801f562:	8809      	ldrh	r1, [r1, #0]
 801f564:	b089      	sub	sp, #36	; 0x24
 801f566:	10cd      	asrs	r5, r1, #3
 801f568:	ea4f 2921 	mov.w	r9, r1, asr #8
 801f56c:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 801f570:	00c9      	lsls	r1, r1, #3
 801f572:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f576:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801f57a:	9202      	str	r2, [sp, #8]
 801f57c:	b2c9      	uxtb	r1, r1
 801f57e:	9500      	str	r5, [sp, #0]
 801f580:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 801f584:	9101      	str	r1, [sp, #4]
 801f586:	9900      	ldr	r1, [sp, #0]
 801f588:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801f58c:	0209      	lsls	r1, r1, #8
 801f58e:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801f592:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 801f596:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801f59a:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 801f59e:	fb04 650e 	mla	r5, r4, lr, r6
 801f5a2:	2c00      	cmp	r4, #0
 801f5a4:	eb02 0805 	add.w	r8, r2, r5
 801f5a8:	9a01      	ldr	r2, [sp, #4]
 801f5aa:	ea41 0102 	orr.w	r1, r1, r2
 801f5ae:	9107      	str	r1, [sp, #28]
 801f5b0:	db43      	blt.n	801f63a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 801f5b2:	45a2      	cmp	sl, r4
 801f5b4:	dd41      	ble.n	801f63a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 801f5b6:	2e00      	cmp	r6, #0
 801f5b8:	db3d      	blt.n	801f636 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 801f5ba:	45b6      	cmp	lr, r6
 801f5bc:	dd3b      	ble.n	801f636 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 801f5be:	9a02      	ldr	r2, [sp, #8]
 801f5c0:	5d55      	ldrb	r5, [r2, r5]
 801f5c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f5c6:	441d      	add	r5, r3
 801f5c8:	1c72      	adds	r2, r6, #1
 801f5ca:	d439      	bmi.n	801f640 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801f5cc:	4596      	cmp	lr, r2
 801f5ce:	dd37      	ble.n	801f640 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801f5d0:	2f00      	cmp	r7, #0
 801f5d2:	d035      	beq.n	801f640 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801f5d4:	f898 1001 	ldrb.w	r1, [r8, #1]
 801f5d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f5dc:	4419      	add	r1, r3
 801f5de:	3401      	adds	r4, #1
 801f5e0:	d432      	bmi.n	801f648 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801f5e2:	45a2      	cmp	sl, r4
 801f5e4:	dd30      	ble.n	801f648 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801f5e6:	b378      	cbz	r0, 801f648 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801f5e8:	2e00      	cmp	r6, #0
 801f5ea:	db2b      	blt.n	801f644 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 801f5ec:	45b6      	cmp	lr, r6
 801f5ee:	dd29      	ble.n	801f644 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 801f5f0:	f818 400e 	ldrb.w	r4, [r8, lr]
 801f5f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f5f8:	441c      	add	r4, r3
 801f5fa:	3601      	adds	r6, #1
 801f5fc:	d427      	bmi.n	801f64e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801f5fe:	45b6      	cmp	lr, r6
 801f600:	dd25      	ble.n	801f64e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801f602:	b327      	cbz	r7, 801f64e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801f604:	44c6      	add	lr, r8
 801f606:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f60a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f60e:	4413      	add	r3, r2
 801f610:	782a      	ldrb	r2, [r5, #0]
 801f612:	2f0f      	cmp	r7, #15
 801f614:	9202      	str	r2, [sp, #8]
 801f616:	780a      	ldrb	r2, [r1, #0]
 801f618:	9203      	str	r2, [sp, #12]
 801f61a:	7822      	ldrb	r2, [r4, #0]
 801f61c:	9204      	str	r2, [sp, #16]
 801f61e:	781a      	ldrb	r2, [r3, #0]
 801f620:	9205      	str	r2, [sp, #20]
 801f622:	d801      	bhi.n	801f628 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 801f624:	280f      	cmp	r0, #15
 801f626:	d914      	bls.n	801f652 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 801f628:	4b3f      	ldr	r3, [pc, #252]	; (801f728 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801f62a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801f62e:	4a3f      	ldr	r2, [pc, #252]	; (801f72c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 801f630:	483f      	ldr	r0, [pc, #252]	; (801f730 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 801f632:	f006 fb31 	bl	8025c98 <__assert_func>
 801f636:	ad07      	add	r5, sp, #28
 801f638:	e7c6      	b.n	801f5c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 801f63a:	a907      	add	r1, sp, #28
 801f63c:	460d      	mov	r5, r1
 801f63e:	e7ce      	b.n	801f5de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 801f640:	a907      	add	r1, sp, #28
 801f642:	e7cc      	b.n	801f5de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 801f644:	ac07      	add	r4, sp, #28
 801f646:	e7d8      	b.n	801f5fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 801f648:	ab07      	add	r3, sp, #28
 801f64a:	461c      	mov	r4, r3
 801f64c:	e7e0      	b.n	801f610 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801f64e:	ab07      	add	r3, sp, #28
 801f650:	e7de      	b.n	801f610 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801f652:	b2ba      	uxth	r2, r7
 801f654:	f891 8002 	ldrb.w	r8, [r1, #2]
 801f658:	b280      	uxth	r0, r0
 801f65a:	7849      	ldrb	r1, [r1, #1]
 801f65c:	78ae      	ldrb	r6, [r5, #2]
 801f65e:	fa1f f78c 	uxth.w	r7, ip
 801f662:	fb02 fa00 	mul.w	sl, r2, r0
 801f666:	0112      	lsls	r2, r2, #4
 801f668:	786d      	ldrb	r5, [r5, #1]
 801f66a:	ea6f 0c0c 	mvn.w	ip, ip
 801f66e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f672:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f676:	eba2 020a 	sub.w	r2, r2, sl
 801f67a:	fa5f fc8c 	uxtb.w	ip, ip
 801f67e:	b280      	uxth	r0, r0
 801f680:	fb19 f90c 	smulbb	r9, r9, ip
 801f684:	b292      	uxth	r2, r2
 801f686:	ebae 0e00 	sub.w	lr, lr, r0
 801f68a:	4351      	muls	r1, r2
 801f68c:	fa1f fe8e 	uxth.w	lr, lr
 801f690:	fb02 f808 	mul.w	r8, r2, r8
 801f694:	fb0e 1505 	mla	r5, lr, r5, r1
 801f698:	7861      	ldrb	r1, [r4, #1]
 801f69a:	fb0e 8806 	mla	r8, lr, r6, r8
 801f69e:	78a6      	ldrb	r6, [r4, #2]
 801f6a0:	fb00 5501 	mla	r5, r0, r1, r5
 801f6a4:	7859      	ldrb	r1, [r3, #1]
 801f6a6:	fb00 8806 	mla	r8, r0, r6, r8
 801f6aa:	789e      	ldrb	r6, [r3, #2]
 801f6ac:	9b00      	ldr	r3, [sp, #0]
 801f6ae:	fb0a 5101 	mla	r1, sl, r1, r5
 801f6b2:	fb0a 8606 	mla	r6, sl, r6, r8
 801f6b6:	fb13 f50c 	smulbb	r5, r3, ip
 801f6ba:	9b03      	ldr	r3, [sp, #12]
 801f6bc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f6c0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f6c4:	435a      	muls	r2, r3
 801f6c6:	9b02      	ldr	r3, [sp, #8]
 801f6c8:	fb06 9607 	mla	r6, r6, r7, r9
 801f6cc:	fb0e 2203 	mla	r2, lr, r3, r2
 801f6d0:	9b04      	ldr	r3, [sp, #16]
 801f6d2:	b2b6      	uxth	r6, r6
 801f6d4:	fb01 5107 	mla	r1, r1, r7, r5
 801f6d8:	fb00 2003 	mla	r0, r0, r3, r2
 801f6dc:	9b05      	ldr	r3, [sp, #20]
 801f6de:	f106 0901 	add.w	r9, r6, #1
 801f6e2:	b289      	uxth	r1, r1
 801f6e4:	fb0a 0a03 	mla	sl, sl, r3, r0
 801f6e8:	9b01      	ldr	r3, [sp, #4]
 801f6ea:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801f6ee:	1c4d      	adds	r5, r1, #1
 801f6f0:	fb13 fc0c 	smulbb	ip, r3, ip
 801f6f4:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f6f8:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 801f6fc:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 801f700:	fb0a c707 	mla	r7, sl, r7, ip
 801f704:	0949      	lsrs	r1, r1, #5
 801f706:	b2bf      	uxth	r7, r7
 801f708:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f70c:	1c7e      	adds	r6, r7, #1
 801f70e:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801f712:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f716:	ea46 0609 	orr.w	r6, r6, r9
 801f71a:	430e      	orrs	r6, r1
 801f71c:	f8ab 6000 	strh.w	r6, [fp]
 801f720:	b009      	add	sp, #36	; 0x24
 801f722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f726:	bf00      	nop
 801f728:	0802a1f1 	.word	0x0802a1f1
 801f72c:	0802a7be 	.word	0x0802a7be
 801f730:	0802a275 	.word	0x0802a275

0801f734 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f738:	ed2d 8b08 	vpush	{d8-d11}
 801f73c:	b095      	sub	sp, #84	; 0x54
 801f73e:	eeb0 aa40 	vmov.f32	s20, s0
 801f742:	eef0 9a60 	vmov.f32	s19, s1
 801f746:	9212      	str	r2, [sp, #72]	; 0x48
 801f748:	eeb0 9a41 	vmov.f32	s18, s2
 801f74c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f74e:	eeb0 8a62 	vmov.f32	s16, s5
 801f752:	9309      	str	r3, [sp, #36]	; 0x24
 801f754:	eef0 8a43 	vmov.f32	s17, s6
 801f758:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801f75c:	eef0 ba44 	vmov.f32	s23, s8
 801f760:	9013      	str	r0, [sp, #76]	; 0x4c
 801f762:	eeb0 ba64 	vmov.f32	s22, s9
 801f766:	930f      	str	r3, [sp, #60]	; 0x3c
 801f768:	eef0 aa45 	vmov.f32	s21, s10
 801f76c:	6850      	ldr	r0, [r2, #4]
 801f76e:	910e      	str	r1, [sp, #56]	; 0x38
 801f770:	6812      	ldr	r2, [r2, #0]
 801f772:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f776:	fb00 1303 	mla	r3, r0, r3, r1
 801f77a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f77e:	930a      	str	r3, [sp, #40]	; 0x28
 801f780:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f782:	681b      	ldr	r3, [r3, #0]
 801f784:	930d      	str	r3, [sp, #52]	; 0x34
 801f786:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f788:	685c      	ldr	r4, [r3, #4]
 801f78a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f78c:	3404      	adds	r4, #4
 801f78e:	43db      	mvns	r3, r3
 801f790:	b2db      	uxtb	r3, r3
 801f792:	930b      	str	r3, [sp, #44]	; 0x2c
 801f794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f796:	2b00      	cmp	r3, #0
 801f798:	dc03      	bgt.n	801f7a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f79a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	f340 8255 	ble.w	801fc4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801f7a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f7a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f7a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f7ac:	1e48      	subs	r0, r1, #1
 801f7ae:	1e55      	subs	r5, r2, #1
 801f7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7b2:	2b00      	cmp	r3, #0
 801f7b4:	f340 80f9 	ble.w	801f9aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f7b8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801f7ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f7bc:	1436      	asrs	r6, r6, #16
 801f7be:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f7c2:	d406      	bmi.n	801f7d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f7c4:	4286      	cmp	r6, r0
 801f7c6:	da04      	bge.n	801f7d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	db02      	blt.n	801f7d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f7cc:	42ab      	cmp	r3, r5
 801f7ce:	f2c0 80ed 	blt.w	801f9ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f7d2:	3601      	adds	r6, #1
 801f7d4:	f100 80da 	bmi.w	801f98c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801f7d8:	42b1      	cmp	r1, r6
 801f7da:	f2c0 80d7 	blt.w	801f98c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801f7de:	3301      	adds	r3, #1
 801f7e0:	f100 80d4 	bmi.w	801f98c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801f7e4:	429a      	cmp	r2, r3
 801f7e6:	f2c0 80d1 	blt.w	801f98c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801f7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7ec:	9311      	str	r3, [sp, #68]	; 0x44
 801f7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7f0:	930c      	str	r3, [sp, #48]	; 0x30
 801f7f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	f340 80fa 	ble.w	801f9ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f7fa:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801f7fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f7fe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f800:	68c6      	ldr	r6, [r0, #12]
 801f802:	141d      	asrs	r5, r3, #16
 801f804:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f806:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f80a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f80c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f80e:	1400      	asrs	r0, r0, #16
 801f810:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f814:	6892      	ldr	r2, [r2, #8]
 801f816:	f100 813e 	bmi.w	801fa96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801f81a:	1e57      	subs	r7, r2, #1
 801f81c:	42b8      	cmp	r0, r7
 801f81e:	f280 813a 	bge.w	801fa96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801f822:	2d00      	cmp	r5, #0
 801f824:	f2c0 8137 	blt.w	801fa96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801f828:	1e77      	subs	r7, r6, #1
 801f82a:	42bd      	cmp	r5, r7
 801f82c:	f280 8133 	bge.w	801fa96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801f830:	b212      	sxth	r2, r2
 801f832:	fb05 0002 	mla	r0, r5, r2, r0
 801f836:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f838:	f815 a000 	ldrb.w	sl, [r5, r0]
 801f83c:	182e      	adds	r6, r5, r0
 801f83e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801f842:	eb04 050a 	add.w	r5, r4, sl
 801f846:	2b00      	cmp	r3, #0
 801f848:	f000 8117 	beq.w	801fa7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801f84c:	f896 c001 	ldrb.w	ip, [r6, #1]
 801f850:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f854:	44a4      	add	ip, r4
 801f856:	2900      	cmp	r1, #0
 801f858:	f000 8117 	beq.w	801fa8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f85c:	18b0      	adds	r0, r6, r2
 801f85e:	5cb2      	ldrb	r2, [r6, r2]
 801f860:	7840      	ldrb	r0, [r0, #1]
 801f862:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f866:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f86a:	4422      	add	r2, r4
 801f86c:	4420      	add	r0, r4
 801f86e:	b29b      	uxth	r3, r3
 801f870:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801f874:	b289      	uxth	r1, r1
 801f876:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f87a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f87c:	fb03 f901 	mul.w	r9, r3, r1
 801f880:	011b      	lsls	r3, r3, #4
 801f882:	f8b6 e000 	ldrh.w	lr, [r6]
 801f886:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f88a:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801f88e:	eba3 0309 	sub.w	r3, r3, r9
 801f892:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801f896:	b289      	uxth	r1, r1
 801f898:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801f89c:	b29b      	uxth	r3, r3
 801f89e:	eba8 0801 	sub.w	r8, r8, r1
 801f8a2:	435f      	muls	r7, r3
 801f8a4:	fa1f f888 	uxth.w	r8, r8
 801f8a8:	9310      	str	r3, [sp, #64]	; 0x40
 801f8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8ac:	fb08 770b 	mla	r7, r8, fp, r7
 801f8b0:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f8b4:	fb01 770b 	mla	r7, r1, fp, r7
 801f8b8:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f8bc:	fb09 770b 	mla	r7, r9, fp, r7
 801f8c0:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801f8c4:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f8c8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f8cc:	fb1b fb03 	smulbb	fp, fp, r3
 801f8d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f8d2:	fb07 b706 	mla	r7, r7, r6, fp
 801f8d6:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f8da:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f8de:	f89c c000 	ldrb.w	ip, [ip]
 801f8e2:	b2bf      	uxth	r7, r7
 801f8e4:	435d      	muls	r5, r3
 801f8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8e8:	fb08 550b 	mla	r5, r8, fp, r5
 801f8ec:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f8f0:	fb01 550b 	mla	r5, r1, fp, r5
 801f8f4:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f8f8:	fb09 550b 	mla	r5, r9, fp, r5
 801f8fc:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801f900:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f904:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f908:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f90c:	fa5f fe8e 	uxtb.w	lr, lr
 801f910:	fb1b fb03 	smulbb	fp, fp, r3
 801f914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f916:	fb03 f30c 	mul.w	r3, r3, ip
 801f91a:	f892 c000 	ldrb.w	ip, [r2]
 801f91e:	fb05 b506 	mla	r5, r5, r6, fp
 801f922:	fb08 330a 	mla	r3, r8, sl, r3
 801f926:	b2ad      	uxth	r5, r5
 801f928:	fb01 330c 	mla	r3, r1, ip, r3
 801f92c:	f890 c000 	ldrb.w	ip, [r0]
 801f930:	f105 0b01 	add.w	fp, r5, #1
 801f934:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f93a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f93e:	fb1e fe03 	smulbb	lr, lr, r3
 801f942:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f946:	1c7b      	adds	r3, r7, #1
 801f948:	096d      	lsrs	r5, r5, #5
 801f94a:	fb0c e606 	mla	r6, ip, r6, lr
 801f94e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f952:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f956:	b2b6      	uxth	r6, r6
 801f958:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801f95c:	1c77      	adds	r7, r6, #1
 801f95e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f962:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f966:	431f      	orrs	r7, r3
 801f968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f96a:	433d      	orrs	r5, r7
 801f96c:	801d      	strh	r5, [r3, #0]
 801f96e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f970:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f972:	3302      	adds	r3, #2
 801f974:	930c      	str	r3, [sp, #48]	; 0x30
 801f976:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f978:	4413      	add	r3, r2
 801f97a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f97c:	9327      	str	r3, [sp, #156]	; 0x9c
 801f97e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f980:	4413      	add	r3, r2
 801f982:	9328      	str	r3, [sp, #160]	; 0xa0
 801f984:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f986:	3b01      	subs	r3, #1
 801f988:	9311      	str	r3, [sp, #68]	; 0x44
 801f98a:	e732      	b.n	801f7f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801f98c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f98e:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801f990:	4433      	add	r3, r6
 801f992:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 801f994:	9327      	str	r3, [sp, #156]	; 0x9c
 801f996:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f998:	4433      	add	r3, r6
 801f99a:	9328      	str	r3, [sp, #160]	; 0xa0
 801f99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f99e:	3b01      	subs	r3, #1
 801f9a0:	9309      	str	r3, [sp, #36]	; 0x24
 801f9a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9a4:	3302      	adds	r3, #2
 801f9a6:	930a      	str	r3, [sp, #40]	; 0x28
 801f9a8:	e702      	b.n	801f7b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f9aa:	d027      	beq.n	801f9fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9ae:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801f9b0:	3b01      	subs	r3, #1
 801f9b2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801f9b4:	fb00 5003 	mla	r0, r0, r3, r5
 801f9b8:	1400      	asrs	r0, r0, #16
 801f9ba:	f53f af16 	bmi.w	801f7ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f9be:	3901      	subs	r1, #1
 801f9c0:	4288      	cmp	r0, r1
 801f9c2:	f6bf af12 	bge.w	801f7ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f9c6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f9c8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801f9ca:	fb01 0303 	mla	r3, r1, r3, r0
 801f9ce:	141b      	asrs	r3, r3, #16
 801f9d0:	f53f af0b 	bmi.w	801f7ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f9d4:	3a01      	subs	r2, #1
 801f9d6:	4293      	cmp	r3, r2
 801f9d8:	f6bf af07 	bge.w	801f7ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9de:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801f9e2:	9311      	str	r3, [sp, #68]	; 0x44
 801f9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9e6:	930c      	str	r3, [sp, #48]	; 0x30
 801f9e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f9ea:	2b00      	cmp	r3, #0
 801f9ec:	dc70      	bgt.n	801fad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 801f9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f9f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f9fa:	930a      	str	r3, [sp, #40]	; 0x28
 801f9fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	f340 8124 	ble.w	801fc4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801fa04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fa08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa0a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fa0e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fa12:	eef0 6a48 	vmov.f32	s13, s16
 801fa16:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fa1a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fa1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa22:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801fa26:	eef0 6a68 	vmov.f32	s13, s17
 801fa2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa2e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801fa32:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fa36:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fa3a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fa3e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fa42:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fa46:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fa4a:	ee18 2a10 	vmov	r2, s16
 801fa4e:	eeb0 8a47 	vmov.f32	s16, s14
 801fa52:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa56:	ee18 2a90 	vmov	r2, s17
 801fa5a:	9329      	str	r3, [sp, #164]	; 0xa4
 801fa5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa5e:	eef0 8a67 	vmov.f32	s17, s15
 801fa62:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa66:	932a      	str	r3, [sp, #168]	; 0xa8
 801fa68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fa6c:	3b01      	subs	r3, #1
 801fa6e:	930e      	str	r3, [sp, #56]	; 0x38
 801fa70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa72:	bf08      	it	eq
 801fa74:	4613      	moveq	r3, r2
 801fa76:	9309      	str	r3, [sp, #36]	; 0x24
 801fa78:	e68c      	b.n	801f794 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fa7a:	b149      	cbz	r1, 801fa90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801fa7c:	5cb2      	ldrb	r2, [r6, r2]
 801fa7e:	4628      	mov	r0, r5
 801fa80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa84:	4422      	add	r2, r4
 801fa86:	46ac      	mov	ip, r5
 801fa88:	e6f1      	b.n	801f86e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fa8a:	4628      	mov	r0, r5
 801fa8c:	462a      	mov	r2, r5
 801fa8e:	e6ee      	b.n	801f86e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fa90:	4628      	mov	r0, r5
 801fa92:	462a      	mov	r2, r5
 801fa94:	e7f7      	b.n	801fa86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801fa96:	1c47      	adds	r7, r0, #1
 801fa98:	f53f af69 	bmi.w	801f96e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801fa9c:	42ba      	cmp	r2, r7
 801fa9e:	f6ff af66 	blt.w	801f96e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801faa2:	1c6f      	adds	r7, r5, #1
 801faa4:	f53f af63 	bmi.w	801f96e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801faa8:	42be      	cmp	r6, r7
 801faaa:	f6ff af60 	blt.w	801f96e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801faae:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fab0:	b236      	sxth	r6, r6
 801fab2:	b212      	sxth	r2, r2
 801fab4:	9002      	str	r0, [sp, #8]
 801fab6:	9601      	str	r6, [sp, #4]
 801fab8:	9200      	str	r2, [sp, #0]
 801faba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fabc:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801fac0:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801fac4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801fac8:	4623      	mov	r3, r4
 801faca:	f7ff fd47 	bl	801f55c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801face:	e74e      	b.n	801f96e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801fad0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801fad2:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801fad4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fad8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801fada:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801fadc:	1400      	asrs	r0, r0, #16
 801fade:	142d      	asrs	r5, r5, #16
 801fae0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fae2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fae6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801faea:	fb02 5000 	mla	r0, r2, r0, r5
 801faee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801faf0:	f815 9000 	ldrb.w	r9, [r5, r0]
 801faf4:	182e      	adds	r6, r5, r0
 801faf6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fafa:	eb04 0509 	add.w	r5, r4, r9
 801fafe:	2b00      	cmp	r3, #0
 801fb00:	f000 8096 	beq.w	801fc30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 801fb04:	7877      	ldrb	r7, [r6, #1]
 801fb06:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fb0a:	4427      	add	r7, r4
 801fb0c:	2900      	cmp	r1, #0
 801fb0e:	f000 8097 	beq.w	801fc40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 801fb12:	18b0      	adds	r0, r6, r2
 801fb14:	5cb2      	ldrb	r2, [r6, r2]
 801fb16:	7840      	ldrb	r0, [r0, #1]
 801fb18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb20:	4422      	add	r2, r4
 801fb22:	4420      	add	r0, r4
 801fb24:	b29b      	uxth	r3, r3
 801fb26:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fb28:	b289      	uxth	r1, r1
 801fb2a:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fb2e:	f8b6 c000 	ldrh.w	ip, [r6]
 801fb32:	fb03 f801 	mul.w	r8, r3, r1
 801fb36:	011b      	lsls	r3, r3, #4
 801fb38:	78be      	ldrb	r6, [r7, #2]
 801fb3a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801fb3e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fb42:	eba3 0308 	sub.w	r3, r3, r8
 801fb46:	f814 9009 	ldrb.w	r9, [r4, r9]
 801fb4a:	b289      	uxth	r1, r1
 801fb4c:	b29b      	uxth	r3, r3
 801fb4e:	ebae 0e01 	sub.w	lr, lr, r1
 801fb52:	435e      	muls	r6, r3
 801fb54:	fa1f fe8e 	uxth.w	lr, lr
 801fb58:	9310      	str	r3, [sp, #64]	; 0x40
 801fb5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb5c:	fb0e 660b 	mla	r6, lr, fp, r6
 801fb60:	f892 b002 	ldrb.w	fp, [r2, #2]
 801fb64:	fb01 660b 	mla	r6, r1, fp, r6
 801fb68:	f890 b002 	ldrb.w	fp, [r0, #2]
 801fb6c:	fb08 660b 	mla	r6, r8, fp, r6
 801fb70:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801fb74:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801fb78:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fb7c:	fb1b fb03 	smulbb	fp, fp, r3
 801fb80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fb82:	fb06 b60a 	mla	r6, r6, sl, fp
 801fb86:	f895 b001 	ldrb.w	fp, [r5, #1]
 801fb8a:	787d      	ldrb	r5, [r7, #1]
 801fb8c:	783f      	ldrb	r7, [r7, #0]
 801fb8e:	b2b6      	uxth	r6, r6
 801fb90:	435d      	muls	r5, r3
 801fb92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb94:	fb0e 550b 	mla	r5, lr, fp, r5
 801fb98:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fb9c:	fb01 550b 	mla	r5, r1, fp, r5
 801fba0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fba4:	fb08 550b 	mla	r5, r8, fp, r5
 801fba8:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801fbac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fbb0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801fbb4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801fbb8:	fa5f fc8c 	uxtb.w	ip, ip
 801fbbc:	fb1b fb03 	smulbb	fp, fp, r3
 801fbc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbc2:	437b      	muls	r3, r7
 801fbc4:	7817      	ldrb	r7, [r2, #0]
 801fbc6:	fb05 b50a 	mla	r5, r5, sl, fp
 801fbca:	fb0e 3309 	mla	r3, lr, r9, r3
 801fbce:	b2ad      	uxth	r5, r5
 801fbd0:	fb01 3307 	mla	r3, r1, r7, r3
 801fbd4:	7807      	ldrb	r7, [r0, #0]
 801fbd6:	f105 0b01 	add.w	fp, r5, #1
 801fbda:	fb08 3707 	mla	r7, r8, r7, r3
 801fbde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fbe0:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801fbe4:	fb1c fc03 	smulbb	ip, ip, r3
 801fbe8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fbec:	1c73      	adds	r3, r6, #1
 801fbee:	096d      	lsrs	r5, r5, #5
 801fbf0:	fb07 c70a 	mla	r7, r7, sl, ip
 801fbf4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801fbf8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fbfc:	b2bf      	uxth	r7, r7
 801fbfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc00:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801fc04:	1c7a      	adds	r2, r7, #1
 801fc06:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801fc0a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fc0e:	4316      	orrs	r6, r2
 801fc10:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fc12:	432e      	orrs	r6, r5
 801fc14:	f823 6b02 	strh.w	r6, [r3], #2
 801fc18:	930c      	str	r3, [sp, #48]	; 0x30
 801fc1a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fc1c:	4413      	add	r3, r2
 801fc1e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801fc20:	9327      	str	r3, [sp, #156]	; 0x9c
 801fc22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc24:	4413      	add	r3, r2
 801fc26:	9328      	str	r3, [sp, #160]	; 0xa0
 801fc28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fc2a:	3b01      	subs	r3, #1
 801fc2c:	9311      	str	r3, [sp, #68]	; 0x44
 801fc2e:	e6db      	b.n	801f9e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 801fc30:	b149      	cbz	r1, 801fc46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801fc32:	5cb2      	ldrb	r2, [r6, r2]
 801fc34:	4628      	mov	r0, r5
 801fc36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc3a:	4422      	add	r2, r4
 801fc3c:	462f      	mov	r7, r5
 801fc3e:	e771      	b.n	801fb24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 801fc40:	4628      	mov	r0, r5
 801fc42:	462a      	mov	r2, r5
 801fc44:	e76e      	b.n	801fb24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 801fc46:	4628      	mov	r0, r5
 801fc48:	462a      	mov	r2, r5
 801fc4a:	e7f7      	b.n	801fc3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801fc4c:	b015      	add	sp, #84	; 0x54
 801fc4e:	ecbd 8b08 	vpop	{d8-d11}
 801fc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fc58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801fc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc5c:	880e      	ldrh	r6, [r1, #0]
 801fc5e:	b085      	sub	sp, #20
 801fc60:	4691      	mov	r9, r2
 801fc62:	0230      	lsls	r0, r6, #8
 801fc64:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fc68:	9101      	str	r1, [sp, #4]
 801fc6a:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801fc6e:	0170      	lsls	r0, r6, #5
 801fc70:	00f6      	lsls	r6, r6, #3
 801fc72:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801fc76:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801fc7a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801fc7e:	b2f6      	uxtb	r6, r6
 801fc80:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801fc84:	ea4b 0000 	orr.w	r0, fp, r0
 801fc88:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801fc8c:	4306      	orrs	r6, r0
 801fc8e:	fb05 7a0c 	mla	sl, r5, ip, r7
 801fc92:	2d00      	cmp	r5, #0
 801fc94:	9603      	str	r6, [sp, #12]
 801fc96:	eb09 0e0a 	add.w	lr, r9, sl
 801fc9a:	db42      	blt.n	801fd22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 801fc9c:	45a8      	cmp	r8, r5
 801fc9e:	dd40      	ble.n	801fd22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 801fca0:	2f00      	cmp	r7, #0
 801fca2:	db3c      	blt.n	801fd1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 801fca4:	45bc      	cmp	ip, r7
 801fca6:	dd3a      	ble.n	801fd1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 801fca8:	f819 600a 	ldrb.w	r6, [r9, sl]
 801fcac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fcb0:	441e      	add	r6, r3
 801fcb2:	1c78      	adds	r0, r7, #1
 801fcb4:	d438      	bmi.n	801fd28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801fcb6:	4584      	cmp	ip, r0
 801fcb8:	dd36      	ble.n	801fd28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801fcba:	b3aa      	cbz	r2, 801fd28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801fcbc:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801fcc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fcc4:	4418      	add	r0, r3
 801fcc6:	3501      	adds	r5, #1
 801fcc8:	d432      	bmi.n	801fd30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801fcca:	45a8      	cmp	r8, r5
 801fccc:	dd30      	ble.n	801fd30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801fcce:	b37c      	cbz	r4, 801fd30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801fcd0:	2f00      	cmp	r7, #0
 801fcd2:	db2b      	blt.n	801fd2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 801fcd4:	45bc      	cmp	ip, r7
 801fcd6:	dd29      	ble.n	801fd2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 801fcd8:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801fcdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fce0:	441d      	add	r5, r3
 801fce2:	3701      	adds	r7, #1
 801fce4:	d427      	bmi.n	801fd36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801fce6:	45bc      	cmp	ip, r7
 801fce8:	dd25      	ble.n	801fd36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801fcea:	b322      	cbz	r2, 801fd36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801fcec:	44f4      	add	ip, lr
 801fcee:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801fcf2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fcf6:	443b      	add	r3, r7
 801fcf8:	781f      	ldrb	r7, [r3, #0]
 801fcfa:	2a0f      	cmp	r2, #15
 801fcfc:	f896 9000 	ldrb.w	r9, [r6]
 801fd00:	f890 a000 	ldrb.w	sl, [r0]
 801fd04:	4639      	mov	r1, r7
 801fd06:	f895 8000 	ldrb.w	r8, [r5]
 801fd0a:	d801      	bhi.n	801fd10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 801fd0c:	2c0f      	cmp	r4, #15
 801fd0e:	d914      	bls.n	801fd3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 801fd10:	4b2c      	ldr	r3, [pc, #176]	; (801fdc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801fd12:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801fd16:	4a2c      	ldr	r2, [pc, #176]	; (801fdc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801fd18:	482c      	ldr	r0, [pc, #176]	; (801fdcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 801fd1a:	f005 ffbd 	bl	8025c98 <__assert_func>
 801fd1e:	ae03      	add	r6, sp, #12
 801fd20:	e7c7      	b.n	801fcb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 801fd22:	a803      	add	r0, sp, #12
 801fd24:	4606      	mov	r6, r0
 801fd26:	e7ce      	b.n	801fcc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801fd28:	a803      	add	r0, sp, #12
 801fd2a:	e7cc      	b.n	801fcc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801fd2c:	ad03      	add	r5, sp, #12
 801fd2e:	e7d8      	b.n	801fce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 801fd30:	ab03      	add	r3, sp, #12
 801fd32:	461d      	mov	r5, r3
 801fd34:	e7e0      	b.n	801fcf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 801fd36:	ab03      	add	r3, sp, #12
 801fd38:	e7de      	b.n	801fcf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 801fd3a:	b292      	uxth	r2, r2
 801fd3c:	f890 c002 	ldrb.w	ip, [r0, #2]
 801fd40:	b2a4      	uxth	r4, r4
 801fd42:	f896 b002 	ldrb.w	fp, [r6, #2]
 801fd46:	7840      	ldrb	r0, [r0, #1]
 801fd48:	fb02 fe04 	mul.w	lr, r2, r4
 801fd4c:	0112      	lsls	r2, r2, #4
 801fd4e:	7876      	ldrb	r6, [r6, #1]
 801fd50:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801fd54:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801fd58:	eba2 020e 	sub.w	r2, r2, lr
 801fd5c:	b2a4      	uxth	r4, r4
 801fd5e:	b292      	uxth	r2, r2
 801fd60:	1b3f      	subs	r7, r7, r4
 801fd62:	fb02 fc0c 	mul.w	ip, r2, ip
 801fd66:	b2bf      	uxth	r7, r7
 801fd68:	fb07 cc0b 	mla	ip, r7, fp, ip
 801fd6c:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fd70:	fb04 cc0b 	mla	ip, r4, fp, ip
 801fd74:	f893 b002 	ldrb.w	fp, [r3, #2]
 801fd78:	785b      	ldrb	r3, [r3, #1]
 801fd7a:	fb0e cc0b 	mla	ip, lr, fp, ip
 801fd7e:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801fd82:	fb02 fc0a 	mul.w	ip, r2, sl
 801fd86:	4342      	muls	r2, r0
 801fd88:	7868      	ldrb	r0, [r5, #1]
 801fd8a:	fb07 cc09 	mla	ip, r7, r9, ip
 801fd8e:	fb07 2206 	mla	r2, r7, r6, r2
 801fd92:	fb04 cc08 	mla	ip, r4, r8, ip
 801fd96:	fb04 2400 	mla	r4, r4, r0, r2
 801fd9a:	fb0e cc01 	mla	ip, lr, r1, ip
 801fd9e:	fb0e 4e03 	mla	lr, lr, r3, r4
 801fda2:	9b01      	ldr	r3, [sp, #4]
 801fda4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fda8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801fdac:	ea4c 0c0b 	orr.w	ip, ip, fp
 801fdb0:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801fdb4:	ea4c 0c0e 	orr.w	ip, ip, lr
 801fdb8:	f8a3 c000 	strh.w	ip, [r3]
 801fdbc:	b005      	add	sp, #20
 801fdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdc2:	bf00      	nop
 801fdc4:	0802a1f1 	.word	0x0802a1f1
 801fdc8:	0802a7be 	.word	0x0802a7be
 801fdcc:	0802a275 	.word	0x0802a275

0801fdd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdd4:	ed2d 8b08 	vpush	{d8-d11}
 801fdd8:	b08f      	sub	sp, #60	; 0x3c
 801fdda:	eeb0 aa40 	vmov.f32	s20, s0
 801fdde:	eef0 9a60 	vmov.f32	s19, s1
 801fde2:	920c      	str	r2, [sp, #48]	; 0x30
 801fde4:	eeb0 9a41 	vmov.f32	s18, s2
 801fde8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fdea:	eeb0 8a62 	vmov.f32	s16, s5
 801fdee:	900d      	str	r0, [sp, #52]	; 0x34
 801fdf0:	eef0 8a43 	vmov.f32	s17, s6
 801fdf4:	6850      	ldr	r0, [r2, #4]
 801fdf6:	eef0 ba44 	vmov.f32	s23, s8
 801fdfa:	910a      	str	r1, [sp, #40]	; 0x28
 801fdfc:	eeb0 ba64 	vmov.f32	s22, s9
 801fe00:	9306      	str	r3, [sp, #24]
 801fe02:	eef0 aa45 	vmov.f32	s21, s10
 801fe06:	6812      	ldr	r2, [r2, #0]
 801fe08:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801fe0c:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 801fe10:	fb00 1303 	mla	r3, r0, r3, r1
 801fe14:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fe18:	9307      	str	r3, [sp, #28]
 801fe1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	9308      	str	r3, [sp, #32]
 801fe20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe22:	685c      	ldr	r4, [r3, #4]
 801fe24:	3404      	adds	r4, #4
 801fe26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	dc03      	bgt.n	801fe34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fe2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe2e:	2b00      	cmp	r3, #0
 801fe30:	f340 81d5 	ble.w	80201de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 801fe34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe3a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fe3e:	1e48      	subs	r0, r1, #1
 801fe40:	1e56      	subs	r6, r2, #1
 801fe42:	9b06      	ldr	r3, [sp, #24]
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	f340 80b6 	ble.w	801ffb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801fe4a:	ea5f 472b 	movs.w	r7, fp, asr #16
 801fe4e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801fe52:	d406      	bmi.n	801fe62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fe54:	4287      	cmp	r7, r0
 801fe56:	da04      	bge.n	801fe62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fe58:	2b00      	cmp	r3, #0
 801fe5a:	db02      	blt.n	801fe62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fe5c:	42b3      	cmp	r3, r6
 801fe5e:	f2c0 80ab 	blt.w	801ffb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fe62:	3701      	adds	r7, #1
 801fe64:	f100 809c 	bmi.w	801ffa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801fe68:	42b9      	cmp	r1, r7
 801fe6a:	f2c0 8099 	blt.w	801ffa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801fe6e:	3301      	adds	r3, #1
 801fe70:	f100 8096 	bmi.w	801ffa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801fe74:	429a      	cmp	r2, r3
 801fe76:	f2c0 8093 	blt.w	801ffa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801fe7a:	9b06      	ldr	r3, [sp, #24]
 801fe7c:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe7e:	9b07      	ldr	r3, [sp, #28]
 801fe80:	9309      	str	r3, [sp, #36]	; 0x24
 801fe82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe84:	2b00      	cmp	r3, #0
 801fe86:	f340 80b4 	ble.w	801fff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801fe8a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801fe8c:	142e      	asrs	r6, r5, #16
 801fe8e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801fe90:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801fe94:	68c7      	ldr	r7, [r0, #12]
 801fe96:	ea5f 402b 	movs.w	r0, fp, asr #16
 801fe9a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fe9e:	6892      	ldr	r2, [r2, #8]
 801fea0:	f100 80fb 	bmi.w	802009a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801fea4:	f102 3cff 	add.w	ip, r2, #4294967295
 801fea8:	4560      	cmp	r0, ip
 801feaa:	f280 80f6 	bge.w	802009a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801feae:	2e00      	cmp	r6, #0
 801feb0:	f2c0 80f3 	blt.w	802009a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801feb4:	f107 3cff 	add.w	ip, r7, #4294967295
 801feb8:	4566      	cmp	r6, ip
 801feba:	f280 80ee 	bge.w	802009a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801febe:	b212      	sxth	r2, r2
 801fec0:	fb06 0002 	mla	r0, r6, r2, r0
 801fec4:	9e08      	ldr	r6, [sp, #32]
 801fec6:	1837      	adds	r7, r6, r0
 801fec8:	5c30      	ldrb	r0, [r6, r0]
 801feca:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801fece:	eb04 0c08 	add.w	ip, r4, r8
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	f000 80d3 	beq.w	802007e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801fed8:	787e      	ldrb	r6, [r7, #1]
 801feda:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fede:	4426      	add	r6, r4
 801fee0:	2900      	cmp	r1, #0
 801fee2:	f000 80d4 	beq.w	802008e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801fee6:	18b8      	adds	r0, r7, r2
 801fee8:	5cba      	ldrb	r2, [r7, r2]
 801feea:	7840      	ldrb	r0, [r0, #1]
 801feec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fef0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fef4:	4422      	add	r2, r4
 801fef6:	4420      	add	r0, r4
 801fef8:	b29b      	uxth	r3, r3
 801fefa:	78b7      	ldrb	r7, [r6, #2]
 801fefc:	b289      	uxth	r1, r1
 801fefe:	f89c a002 	ldrb.w	sl, [ip, #2]
 801ff02:	f89c c001 	ldrb.w	ip, [ip, #1]
 801ff06:	fb03 f901 	mul.w	r9, r3, r1
 801ff0a:	011b      	lsls	r3, r3, #4
 801ff0c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ff10:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ff14:	eba3 0309 	sub.w	r3, r3, r9
 801ff18:	b289      	uxth	r1, r1
 801ff1a:	b29b      	uxth	r3, r3
 801ff1c:	ebae 0e01 	sub.w	lr, lr, r1
 801ff20:	435f      	muls	r7, r3
 801ff22:	fa1f fe8e 	uxth.w	lr, lr
 801ff26:	fb0e 770a 	mla	r7, lr, sl, r7
 801ff2a:	f892 a002 	ldrb.w	sl, [r2, #2]
 801ff2e:	fb01 770a 	mla	r7, r1, sl, r7
 801ff32:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ff36:	fb09 7a0a 	mla	sl, r9, sl, r7
 801ff3a:	f814 7008 	ldrb.w	r7, [r4, r8]
 801ff3e:	f896 8000 	ldrb.w	r8, [r6]
 801ff42:	7876      	ldrb	r6, [r6, #1]
 801ff44:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801ff48:	fb03 f808 	mul.w	r8, r3, r8
 801ff4c:	4373      	muls	r3, r6
 801ff4e:	fb0e 8807 	mla	r8, lr, r7, r8
 801ff52:	7817      	ldrb	r7, [r2, #0]
 801ff54:	fb0e 330c 	mla	r3, lr, ip, r3
 801ff58:	fb01 8807 	mla	r8, r1, r7, r8
 801ff5c:	7807      	ldrb	r7, [r0, #0]
 801ff5e:	fb09 8707 	mla	r7, r9, r7, r8
 801ff62:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ff66:	ea47 070a 	orr.w	r7, r7, sl
 801ff6a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ff6e:	fb01 310a 	mla	r1, r1, sl, r3
 801ff72:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ff76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff78:	fb09 1a0a 	mla	sl, r9, sl, r1
 801ff7c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ff80:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ff84:	ea47 070a 	orr.w	r7, r7, sl
 801ff88:	801f      	strh	r7, [r3, #0]
 801ff8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff8c:	3302      	adds	r3, #2
 801ff8e:	9309      	str	r3, [sp, #36]	; 0x24
 801ff90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ff92:	449b      	add	fp, r3
 801ff94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ff96:	441d      	add	r5, r3
 801ff98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff9a:	3b01      	subs	r3, #1
 801ff9c:	930b      	str	r3, [sp, #44]	; 0x2c
 801ff9e:	e770      	b.n	801fe82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ffa0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ffa2:	449b      	add	fp, r3
 801ffa4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ffa6:	441d      	add	r5, r3
 801ffa8:	9b06      	ldr	r3, [sp, #24]
 801ffaa:	3b01      	subs	r3, #1
 801ffac:	9306      	str	r3, [sp, #24]
 801ffae:	9b07      	ldr	r3, [sp, #28]
 801ffb0:	3302      	adds	r3, #2
 801ffb2:	9307      	str	r3, [sp, #28]
 801ffb4:	e745      	b.n	801fe42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ffb6:	d023      	beq.n	8020000 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ffb8:	9b06      	ldr	r3, [sp, #24]
 801ffba:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801ffbc:	3b01      	subs	r3, #1
 801ffbe:	fb00 b003 	mla	r0, r0, r3, fp
 801ffc2:	1400      	asrs	r0, r0, #16
 801ffc4:	f53f af59 	bmi.w	801fe7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ffc8:	3901      	subs	r1, #1
 801ffca:	4288      	cmp	r0, r1
 801ffcc:	f6bf af55 	bge.w	801fe7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ffd0:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ffd2:	fb01 5303 	mla	r3, r1, r3, r5
 801ffd6:	141b      	asrs	r3, r3, #16
 801ffd8:	f53f af4f 	bmi.w	801fe7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ffdc:	3a01      	subs	r2, #1
 801ffde:	4293      	cmp	r3, r2
 801ffe0:	f6bf af4b 	bge.w	801fe7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ffe4:	9b06      	ldr	r3, [sp, #24]
 801ffe6:	9309      	str	r3, [sp, #36]	; 0x24
 801ffe8:	9b07      	ldr	r3, [sp, #28]
 801ffea:	930b      	str	r3, [sp, #44]	; 0x2c
 801ffec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	dc70      	bgt.n	80200d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 801fff2:	9b06      	ldr	r3, [sp, #24]
 801fff4:	9a07      	ldr	r2, [sp, #28]
 801fff6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fffa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fffe:	9307      	str	r3, [sp, #28]
 8020000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020002:	2b00      	cmp	r3, #0
 8020004:	f340 80eb 	ble.w	80201de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8020008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802000c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802000e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020012:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020016:	eef0 6a48 	vmov.f32	s13, s16
 802001a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802001e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020022:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020026:	ee16 ba90 	vmov	fp, s13
 802002a:	eef0 6a68 	vmov.f32	s13, s17
 802002e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020032:	ee16 5a90 	vmov	r5, s13
 8020036:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802003a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802003e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020042:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020046:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802004a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802004e:	ee18 2a10 	vmov	r2, s16
 8020052:	eeb0 8a47 	vmov.f32	s16, s14
 8020056:	fb92 f3f3 	sdiv	r3, r2, r3
 802005a:	ee18 2a90 	vmov	r2, s17
 802005e:	9323      	str	r3, [sp, #140]	; 0x8c
 8020060:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020062:	eef0 8a67 	vmov.f32	s17, s15
 8020066:	fb92 f3f3 	sdiv	r3, r2, r3
 802006a:	9324      	str	r3, [sp, #144]	; 0x90
 802006c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802006e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020070:	3b01      	subs	r3, #1
 8020072:	930a      	str	r3, [sp, #40]	; 0x28
 8020074:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020076:	bf08      	it	eq
 8020078:	4613      	moveq	r3, r2
 802007a:	9306      	str	r3, [sp, #24]
 802007c:	e6d3      	b.n	801fe26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802007e:	b149      	cbz	r1, 8020094 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8020080:	5cba      	ldrb	r2, [r7, r2]
 8020082:	4660      	mov	r0, ip
 8020084:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020088:	4422      	add	r2, r4
 802008a:	4666      	mov	r6, ip
 802008c:	e734      	b.n	801fef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802008e:	4660      	mov	r0, ip
 8020090:	4662      	mov	r2, ip
 8020092:	e731      	b.n	801fef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020094:	4660      	mov	r0, ip
 8020096:	4662      	mov	r2, ip
 8020098:	e7f7      	b.n	802008a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802009a:	f110 0c01 	adds.w	ip, r0, #1
 802009e:	f53f af74 	bmi.w	801ff8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80200a2:	4562      	cmp	r2, ip
 80200a4:	f6ff af71 	blt.w	801ff8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80200a8:	f116 0c01 	adds.w	ip, r6, #1
 80200ac:	f53f af6d 	bmi.w	801ff8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80200b0:	4567      	cmp	r7, ip
 80200b2:	f6ff af6a 	blt.w	801ff8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80200b6:	b23f      	sxth	r7, r7
 80200b8:	b212      	sxth	r2, r2
 80200ba:	9701      	str	r7, [sp, #4]
 80200bc:	9200      	str	r2, [sp, #0]
 80200be:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80200c2:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80200c6:	4623      	mov	r3, r4
 80200c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80200ca:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80200ce:	f7ff fdc3 	bl	801fc58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80200d2:	e75a      	b.n	801ff8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80200d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80200d6:	ea4f 462b 	mov.w	r6, fp, asr #16
 80200da:	1428      	asrs	r0, r5, #16
 80200dc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80200e0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80200e4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80200e8:	fb02 6000 	mla	r0, r2, r0, r6
 80200ec:	9e08      	ldr	r6, [sp, #32]
 80200ee:	f816 8000 	ldrb.w	r8, [r6, r0]
 80200f2:	1837      	adds	r7, r6, r0
 80200f4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80200f8:	eb04 0c08 	add.w	ip, r4, r8
 80200fc:	2b00      	cmp	r3, #0
 80200fe:	d060      	beq.n	80201c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8020100:	787e      	ldrb	r6, [r7, #1]
 8020102:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020106:	4426      	add	r6, r4
 8020108:	2900      	cmp	r1, #0
 802010a:	d062      	beq.n	80201d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 802010c:	18b8      	adds	r0, r7, r2
 802010e:	5cba      	ldrb	r2, [r7, r2]
 8020110:	7840      	ldrb	r0, [r0, #1]
 8020112:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020116:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802011a:	4422      	add	r2, r4
 802011c:	4420      	add	r0, r4
 802011e:	b29b      	uxth	r3, r3
 8020120:	78b7      	ldrb	r7, [r6, #2]
 8020122:	b289      	uxth	r1, r1
 8020124:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020128:	f89c c001 	ldrb.w	ip, [ip, #1]
 802012c:	fb03 f901 	mul.w	r9, r3, r1
 8020130:	011b      	lsls	r3, r3, #4
 8020132:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020136:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802013a:	eba3 0309 	sub.w	r3, r3, r9
 802013e:	b289      	uxth	r1, r1
 8020140:	b29b      	uxth	r3, r3
 8020142:	ebae 0e01 	sub.w	lr, lr, r1
 8020146:	435f      	muls	r7, r3
 8020148:	fa1f fe8e 	uxth.w	lr, lr
 802014c:	fb0e 770a 	mla	r7, lr, sl, r7
 8020150:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020154:	fb01 770a 	mla	r7, r1, sl, r7
 8020158:	f890 a002 	ldrb.w	sl, [r0, #2]
 802015c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8020160:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020164:	f896 8000 	ldrb.w	r8, [r6]
 8020168:	7876      	ldrb	r6, [r6, #1]
 802016a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802016e:	fb03 f808 	mul.w	r8, r3, r8
 8020172:	4373      	muls	r3, r6
 8020174:	7856      	ldrb	r6, [r2, #1]
 8020176:	fb0e 8807 	mla	r8, lr, r7, r8
 802017a:	7817      	ldrb	r7, [r2, #0]
 802017c:	fb0e 330c 	mla	r3, lr, ip, r3
 8020180:	fb01 8807 	mla	r8, r1, r7, r8
 8020184:	7807      	ldrb	r7, [r0, #0]
 8020186:	fb01 3306 	mla	r3, r1, r6, r3
 802018a:	fb09 8707 	mla	r7, r9, r7, r8
 802018e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020192:	ea47 070a 	orr.w	r7, r7, sl
 8020196:	f890 a001 	ldrb.w	sl, [r0, #1]
 802019a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802019e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201a0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80201a4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80201a8:	ea47 070a 	orr.w	r7, r7, sl
 80201ac:	f823 7b02 	strh.w	r7, [r3], #2
 80201b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80201b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80201b4:	449b      	add	fp, r3
 80201b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80201b8:	441d      	add	r5, r3
 80201ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201bc:	3b01      	subs	r3, #1
 80201be:	9309      	str	r3, [sp, #36]	; 0x24
 80201c0:	e714      	b.n	801ffec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 80201c2:	b149      	cbz	r1, 80201d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 80201c4:	5cba      	ldrb	r2, [r7, r2]
 80201c6:	4660      	mov	r0, ip
 80201c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80201cc:	4422      	add	r2, r4
 80201ce:	4666      	mov	r6, ip
 80201d0:	e7a5      	b.n	802011e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80201d2:	4660      	mov	r0, ip
 80201d4:	4662      	mov	r2, ip
 80201d6:	e7a2      	b.n	802011e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80201d8:	4660      	mov	r0, ip
 80201da:	4662      	mov	r2, ip
 80201dc:	e7f7      	b.n	80201ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 80201de:	b00f      	add	sp, #60	; 0x3c
 80201e0:	ecbd 8b08 	vpop	{d8-d11}
 80201e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080201e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80201e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201ec:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 80201f0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80201f4:	2c00      	cmp	r4, #0
 80201f6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80201fa:	fb04 560c 	mla	r6, r4, ip, r5
 80201fe:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8020202:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8020206:	eb02 0e06 	add.w	lr, r2, r6
 802020a:	db3d      	blt.n	8020288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 802020c:	45a0      	cmp	r8, r4
 802020e:	dd3b      	ble.n	8020288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8020210:	2d00      	cmp	r5, #0
 8020212:	db37      	blt.n	8020284 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8020214:	45ac      	cmp	ip, r5
 8020216:	dd35      	ble.n	8020284 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8020218:	5d92      	ldrb	r2, [r2, r6]
 802021a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802021e:	1c6e      	adds	r6, r5, #1
 8020220:	d435      	bmi.n	802028e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8020222:	45b4      	cmp	ip, r6
 8020224:	dd33      	ble.n	802028e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8020226:	b3a0      	cbz	r0, 8020292 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8020228:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802022c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8020230:	3401      	adds	r4, #1
 8020232:	d432      	bmi.n	802029a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8020234:	45a0      	cmp	r8, r4
 8020236:	dd30      	ble.n	802029a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8020238:	b397      	cbz	r7, 80202a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 802023a:	2d00      	cmp	r5, #0
 802023c:	db2b      	blt.n	8020296 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 802023e:	45ac      	cmp	ip, r5
 8020240:	dd29      	ble.n	8020296 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8020242:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020246:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 802024a:	3501      	adds	r5, #1
 802024c:	d42b      	bmi.n	80202a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802024e:	45ac      	cmp	ip, r5
 8020250:	dd29      	ble.n	80202a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8020252:	b350      	cbz	r0, 80202aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8020254:	44f4      	add	ip, lr
 8020256:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802025a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802025e:	280f      	cmp	r0, #15
 8020260:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020264:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020268:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802026c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8020270:	d801      	bhi.n	8020276 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 8020272:	2f0f      	cmp	r7, #15
 8020274:	d91b      	bls.n	80202ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8020276:	4b8d      	ldr	r3, [pc, #564]	; (80204ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8020278:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802027c:	4a8c      	ldr	r2, [pc, #560]	; (80204b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 802027e:	488d      	ldr	r0, [pc, #564]	; (80204b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8020280:	f005 fd0a 	bl	8025c98 <__assert_func>
 8020284:	2200      	movs	r2, #0
 8020286:	e7ca      	b.n	802021e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8020288:	2600      	movs	r6, #0
 802028a:	4632      	mov	r2, r6
 802028c:	e7d0      	b.n	8020230 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 802028e:	2600      	movs	r6, #0
 8020290:	e7ce      	b.n	8020230 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8020292:	4606      	mov	r6, r0
 8020294:	e7cc      	b.n	8020230 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8020296:	2400      	movs	r4, #0
 8020298:	e7d7      	b.n	802024a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 802029a:	2300      	movs	r3, #0
 802029c:	461c      	mov	r4, r3
 802029e:	e7de      	b.n	802025e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80202a0:	463b      	mov	r3, r7
 80202a2:	463c      	mov	r4, r7
 80202a4:	e7db      	b.n	802025e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80202a6:	2300      	movs	r3, #0
 80202a8:	e7d9      	b.n	802025e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80202aa:	4603      	mov	r3, r0
 80202ac:	e7d7      	b.n	802025e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80202ae:	b280      	uxth	r0, r0
 80202b0:	b2bf      	uxth	r7, r7
 80202b2:	fb07 fe00 	mul.w	lr, r7, r0
 80202b6:	0100      	lsls	r0, r0, #4
 80202b8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80202bc:	eba0 0c0e 	sub.w	ip, r0, lr
 80202c0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80202c4:	b2bf      	uxth	r7, r7
 80202c6:	fa1f fc8c 	uxth.w	ip, ip
 80202ca:	1bed      	subs	r5, r5, r7
 80202cc:	fb0a f00c 	mul.w	r0, sl, ip
 80202d0:	b2ad      	uxth	r5, r5
 80202d2:	fb0b 0005 	mla	r0, fp, r5, r0
 80202d6:	fb07 0009 	mla	r0, r7, r9, r0
 80202da:	fb0e 0008 	mla	r0, lr, r8, r0
 80202de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80202e2:	9001      	str	r0, [sp, #4]
 80202e4:	2800      	cmp	r0, #0
 80202e6:	f000 80de 	beq.w	80204a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 80202ea:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80202ee:	d018      	beq.n	8020322 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 80202f0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80202f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80202f8:	fb0b f000 	mul.w	r0, fp, r0
 80202fc:	fb0b fb02 	mul.w	fp, fp, r2
 8020300:	0a02      	lsrs	r2, r0, #8
 8020302:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020306:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802030a:	4402      	add	r2, r0
 802030c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8020310:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020314:	0a12      	lsrs	r2, r2, #8
 8020316:	0a00      	lsrs	r0, r0, #8
 8020318:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802031c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020320:	4302      	orrs	r2, r0
 8020322:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020326:	d01a      	beq.n	802035e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8020328:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802032c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020330:	fb0a f000 	mul.w	r0, sl, r0
 8020334:	fb0a fa06 	mul.w	sl, sl, r6
 8020338:	0a06      	lsrs	r6, r0, #8
 802033a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802033e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020342:	4406      	add	r6, r0
 8020344:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020348:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802034c:	0a36      	lsrs	r6, r6, #8
 802034e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020352:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020356:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802035a:	ea46 060a 	orr.w	r6, r6, sl
 802035e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020362:	d01b      	beq.n	802039c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8020364:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020368:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802036c:	fb09 fa0a 	mul.w	sl, r9, sl
 8020370:	fb09 f004 	mul.w	r0, r9, r4
 8020374:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020378:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802037c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8020380:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020384:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8020388:	4454      	add	r4, sl
 802038a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802038e:	0a24      	lsrs	r4, r4, #8
 8020390:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020394:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020398:	ea44 0409 	orr.w	r4, r4, r9
 802039c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80203a0:	d01b      	beq.n	80203da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 80203a2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80203a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80203aa:	fb08 f909 	mul.w	r9, r8, r9
 80203ae:	fb08 f003 	mul.w	r0, r8, r3
 80203b2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80203b6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80203ba:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80203be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80203c2:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80203c6:	444b      	add	r3, r9
 80203c8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80203cc:	0a1b      	lsrs	r3, r3, #8
 80203ce:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80203d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80203d6:	ea43 0308 	orr.w	r3, r3, r8
 80203da:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80203de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80203e2:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80203e6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80203ea:	fb0c f808 	mul.w	r8, ip, r8
 80203ee:	8808      	ldrh	r0, [r1, #0]
 80203f0:	fb0c f606 	mul.w	r6, ip, r6
 80203f4:	fb05 8909 	mla	r9, r5, r9, r8
 80203f8:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80203fc:	fb05 6502 	mla	r5, r5, r2, r6
 8020400:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020404:	fb07 9908 	mla	r9, r7, r8, r9
 8020408:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 802040c:	fb07 5704 	mla	r7, r7, r4, r5
 8020410:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8020414:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020418:	b2b6      	uxth	r6, r6
 802041a:	fb0e 9808 	mla	r8, lr, r8, r9
 802041e:	9a01      	ldr	r2, [sp, #4]
 8020420:	fb0e 7e03 	mla	lr, lr, r3, r7
 8020424:	1205      	asrs	r5, r0, #8
 8020426:	4372      	muls	r2, r6
 8020428:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802042c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020430:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020434:	1c53      	adds	r3, r2, #1
 8020436:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802043a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802043e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020442:	ea48 0e0e 	orr.w	lr, r8, lr
 8020446:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802044a:	ea4f 421e 	mov.w	r2, lr, lsr #16
 802044e:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8020452:	b2db      	uxtb	r3, r3
 8020454:	fb12 f206 	smulbb	r2, r2, r6
 8020458:	fa5f fe8e 	uxtb.w	lr, lr
 802045c:	fb14 f406 	smulbb	r4, r4, r6
 8020460:	fb05 2503 	mla	r5, r5, r3, r2
 8020464:	10c2      	asrs	r2, r0, #3
 8020466:	fb1e fe06 	smulbb	lr, lr, r6
 802046a:	00c0      	lsls	r0, r0, #3
 802046c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020470:	b2ad      	uxth	r5, r5
 8020472:	b2c0      	uxtb	r0, r0
 8020474:	fb02 4203 	mla	r2, r2, r3, r4
 8020478:	fb00 e303 	mla	r3, r0, r3, lr
 802047c:	b294      	uxth	r4, r2
 802047e:	b298      	uxth	r0, r3
 8020480:	1c6b      	adds	r3, r5, #1
 8020482:	1c62      	adds	r2, r4, #1
 8020484:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020488:	1c43      	adds	r3, r0, #1
 802048a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802048e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020492:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020496:	0952      	lsrs	r2, r2, #5
 8020498:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802049c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80204a0:	432b      	orrs	r3, r5
 80204a2:	4313      	orrs	r3, r2
 80204a4:	800b      	strh	r3, [r1, #0]
 80204a6:	b003      	add	sp, #12
 80204a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204ac:	0802a1f1 	.word	0x0802a1f1
 80204b0:	0802a7be 	.word	0x0802a7be
 80204b4:	0802a275 	.word	0x0802a275

080204b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80204b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204bc:	ed2d 8b08 	vpush	{d8-d11}
 80204c0:	b09f      	sub	sp, #124	; 0x7c
 80204c2:	eeb0 aa40 	vmov.f32	s20, s0
 80204c6:	eef0 9a60 	vmov.f32	s19, s1
 80204ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80204cc:	eeb0 9a41 	vmov.f32	s18, s2
 80204d0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80204d2:	eeb0 8a62 	vmov.f32	s16, s5
 80204d6:	9309      	str	r3, [sp, #36]	; 0x24
 80204d8:	eef0 8a43 	vmov.f32	s17, s6
 80204dc:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80204e0:	eef0 ba44 	vmov.f32	s23, s8
 80204e4:	901d      	str	r0, [sp, #116]	; 0x74
 80204e6:	eeb0 ba64 	vmov.f32	s22, s9
 80204ea:	931c      	str	r3, [sp, #112]	; 0x70
 80204ec:	eef0 aa45 	vmov.f32	s21, s10
 80204f0:	6850      	ldr	r0, [r2, #4]
 80204f2:	9119      	str	r1, [sp, #100]	; 0x64
 80204f4:	6812      	ldr	r2, [r2, #0]
 80204f6:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80204f8:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80204fc:	fb00 1303 	mla	r3, r0, r3, r1
 8020500:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020504:	930c      	str	r3, [sp, #48]	; 0x30
 8020506:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020508:	681b      	ldr	r3, [r3, #0]
 802050a:	9312      	str	r3, [sp, #72]	; 0x48
 802050c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802050e:	685e      	ldr	r6, [r3, #4]
 8020510:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8020514:	3604      	adds	r6, #4
 8020516:	930d      	str	r3, [sp, #52]	; 0x34
 8020518:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802051a:	2b00      	cmp	r3, #0
 802051c:	dc03      	bgt.n	8020526 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802051e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020520:	2b00      	cmp	r3, #0
 8020522:	f340 8387 	ble.w	8020c34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8020526:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020528:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802052c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020530:	1e48      	subs	r0, r1, #1
 8020532:	1e57      	subs	r7, r2, #1
 8020534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020536:	2b00      	cmp	r3, #0
 8020538:	f340 8194 	ble.w	8020864 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 802053c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802053e:	142b      	asrs	r3, r5, #16
 8020540:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020544:	d406      	bmi.n	8020554 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020546:	4584      	cmp	ip, r0
 8020548:	da04      	bge.n	8020554 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802054a:	2b00      	cmp	r3, #0
 802054c:	db02      	blt.n	8020554 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802054e:	42bb      	cmp	r3, r7
 8020550:	f2c0 8189 	blt.w	8020866 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020554:	f11c 0c01 	adds.w	ip, ip, #1
 8020558:	f100 8177 	bmi.w	802084a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802055c:	4561      	cmp	r1, ip
 802055e:	f2c0 8174 	blt.w	802084a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8020562:	3301      	adds	r3, #1
 8020564:	f100 8171 	bmi.w	802084a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8020568:	429a      	cmp	r2, r3
 802056a:	f2c0 816e 	blt.w	802084a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802056e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020570:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020572:	931a      	str	r3, [sp, #104]	; 0x68
 8020574:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020576:	2b00      	cmp	r3, #0
 8020578:	f340 8193 	ble.w	80208a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802057c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802057e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020582:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020586:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802058a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802058c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8020590:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020592:	141b      	asrs	r3, r3, #16
 8020594:	f100 81d6 	bmi.w	8020944 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8020598:	f100 38ff 	add.w	r8, r0, #4294967295
 802059c:	4543      	cmp	r3, r8
 802059e:	f280 81d1 	bge.w	8020944 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80205a2:	f1bc 0f00 	cmp.w	ip, #0
 80205a6:	f2c0 81cd 	blt.w	8020944 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80205aa:	f10e 38ff 	add.w	r8, lr, #4294967295
 80205ae:	45c4      	cmp	ip, r8
 80205b0:	f280 81c8 	bge.w	8020944 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80205b4:	b200      	sxth	r0, r0
 80205b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80205b8:	fb0c 3300 	mla	r3, ip, r0, r3
 80205bc:	eb04 0803 	add.w	r8, r4, r3
 80205c0:	5ce3      	ldrb	r3, [r4, r3]
 80205c2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80205c6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80205ca:	2a00      	cmp	r2, #0
 80205cc:	f000 81af 	beq.w	802092e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80205d0:	f898 c001 	ldrb.w	ip, [r8, #1]
 80205d4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80205d8:	940e      	str	r4, [sp, #56]	; 0x38
 80205da:	0e24      	lsrs	r4, r4, #24
 80205dc:	9415      	str	r4, [sp, #84]	; 0x54
 80205de:	b179      	cbz	r1, 8020600 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80205e0:	eb08 0c00 	add.w	ip, r8, r0
 80205e4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80205e8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80205ec:	900a      	str	r0, [sp, #40]	; 0x28
 80205ee:	0e00      	lsrs	r0, r0, #24
 80205f0:	9013      	str	r0, [sp, #76]	; 0x4c
 80205f2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80205f6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80205fa:	900f      	str	r0, [sp, #60]	; 0x3c
 80205fc:	0e00      	lsrs	r0, r0, #24
 80205fe:	9016      	str	r0, [sp, #88]	; 0x58
 8020600:	b292      	uxth	r2, r2
 8020602:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020604:	b289      	uxth	r1, r1
 8020606:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020608:	fb02 f901 	mul.w	r9, r2, r1
 802060c:	0112      	lsls	r2, r2, #4
 802060e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020612:	eba2 0809 	sub.w	r8, r2, r9
 8020616:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802061a:	b289      	uxth	r1, r1
 802061c:	fa1f f888 	uxth.w	r8, r8
 8020620:	1a52      	subs	r2, r2, r1
 8020622:	fb08 f000 	mul.w	r0, r8, r0
 8020626:	b292      	uxth	r2, r2
 8020628:	fb02 000e 	mla	r0, r2, lr, r0
 802062c:	fb01 0004 	mla	r0, r1, r4, r0
 8020630:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020632:	fb09 0004 	mla	r0, r9, r4, r0
 8020636:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802063a:	2800      	cmp	r0, #0
 802063c:	f000 80fa 	beq.w	8020834 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020640:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020644:	d01b      	beq.n	802067e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8020646:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802064a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802064e:	fb0e fa0a 	mul.w	sl, lr, sl
 8020652:	fb0e fe03 	mul.w	lr, lr, r3
 8020656:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802065a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802065e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020662:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020666:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802066a:	4453      	add	r3, sl
 802066c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020670:	0a1b      	lsrs	r3, r3, #8
 8020672:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020676:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802067a:	ea43 030c 	orr.w	r3, r3, ip
 802067e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020680:	2cff      	cmp	r4, #255	; 0xff
 8020682:	d021      	beq.n	80206c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8020684:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020686:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802068a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802068c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020690:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020692:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020696:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020698:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802069c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80206a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80206a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80206a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80206ac:	44de      	add	lr, fp
 80206ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80206b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80206b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80206be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80206c2:	ea4e 040a 	orr.w	r4, lr, sl
 80206c6:	940e      	str	r4, [sp, #56]	; 0x38
 80206c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80206ca:	2cff      	cmp	r4, #255	; 0xff
 80206cc:	d021      	beq.n	8020712 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80206ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80206d0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80206d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80206d6:	fb04 fb0b 	mul.w	fp, r4, fp
 80206da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80206dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80206e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80206e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80206e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80206ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80206ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80206f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80206f6:	44de      	add	lr, fp
 80206f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80206fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020700:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020704:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020708:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802070c:	ea4e 040a 	orr.w	r4, lr, sl
 8020710:	940a      	str	r4, [sp, #40]	; 0x28
 8020712:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020714:	2cff      	cmp	r4, #255	; 0xff
 8020716:	d021      	beq.n	802075c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8020718:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802071a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802071e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020720:	fb04 fb0b 	mul.w	fp, r4, fp
 8020724:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020726:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802072a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802072c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020730:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020734:	fb04 fa0a 	mul.w	sl, r4, sl
 8020738:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802073c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020740:	44de      	add	lr, fp
 8020742:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020746:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802074a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802074e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020752:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020756:	ea4e 040a 	orr.w	r4, lr, sl
 802075a:	940f      	str	r4, [sp, #60]	; 0x3c
 802075c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802075e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020766:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802076a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802076c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020770:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020774:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020778:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802077a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802077e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020782:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020784:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020788:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802078c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802078e:	fb08 f80e 	mul.w	r8, r8, lr
 8020792:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020796:	fb02 8303 	mla	r3, r2, r3, r8
 802079a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802079c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207a0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80207a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80207a6:	fb01 330a 	mla	r3, r1, sl, r3
 80207aa:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80207ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80207b0:	fb09 3901 	mla	r9, r9, r1, r3
 80207b4:	883b      	ldrh	r3, [r7, #0]
 80207b6:	4342      	muls	r2, r0
 80207b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80207bc:	1c50      	adds	r0, r2, #1
 80207be:	1219      	asrs	r1, r3, #8
 80207c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80207c4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80207c8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80207cc:	ea4c 0c09 	orr.w	ip, ip, r9
 80207d0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80207d4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80207d8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80207dc:	b2c0      	uxtb	r0, r0
 80207de:	fb12 f204 	smulbb	r2, r2, r4
 80207e2:	fa5f fc8c 	uxtb.w	ip, ip
 80207e6:	fb1e fe04 	smulbb	lr, lr, r4
 80207ea:	fb01 2100 	mla	r1, r1, r0, r2
 80207ee:	10da      	asrs	r2, r3, #3
 80207f0:	fb1c fc04 	smulbb	ip, ip, r4
 80207f4:	00db      	lsls	r3, r3, #3
 80207f6:	b289      	uxth	r1, r1
 80207f8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80207fc:	b2db      	uxtb	r3, r3
 80207fe:	fb02 e200 	mla	r2, r2, r0, lr
 8020802:	fb03 c300 	mla	r3, r3, r0, ip
 8020806:	b292      	uxth	r2, r2
 8020808:	fa1f fc83 	uxth.w	ip, r3
 802080c:	1c4b      	adds	r3, r1, #1
 802080e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020812:	f10c 0301 	add.w	r3, ip, #1
 8020816:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802081a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802081e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020822:	430b      	orrs	r3, r1
 8020824:	1c51      	adds	r1, r2, #1
 8020826:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802082a:	0952      	lsrs	r2, r2, #5
 802082c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020830:	4313      	orrs	r3, r2
 8020832:	803b      	strh	r3, [r7, #0]
 8020834:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020836:	3702      	adds	r7, #2
 8020838:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802083a:	441a      	add	r2, r3
 802083c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802083e:	441d      	add	r5, r3
 8020840:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020842:	9231      	str	r2, [sp, #196]	; 0xc4
 8020844:	3b01      	subs	r3, #1
 8020846:	931a      	str	r3, [sp, #104]	; 0x68
 8020848:	e694      	b.n	8020574 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802084a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802084c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802084e:	441c      	add	r4, r3
 8020850:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020852:	441d      	add	r5, r3
 8020854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020856:	9431      	str	r4, [sp, #196]	; 0xc4
 8020858:	3b01      	subs	r3, #1
 802085a:	9309      	str	r3, [sp, #36]	; 0x24
 802085c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802085e:	3302      	adds	r3, #2
 8020860:	930c      	str	r3, [sp, #48]	; 0x30
 8020862:	e667      	b.n	8020534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020864:	d024      	beq.n	80208b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8020866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020868:	9833      	ldr	r0, [sp, #204]	; 0xcc
 802086a:	3b01      	subs	r3, #1
 802086c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802086e:	fb00 4003 	mla	r0, r0, r3, r4
 8020872:	1400      	asrs	r0, r0, #16
 8020874:	f53f ae7b 	bmi.w	802056e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020878:	3901      	subs	r1, #1
 802087a:	4288      	cmp	r0, r1
 802087c:	f6bf ae77 	bge.w	802056e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020880:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8020882:	fb01 5303 	mla	r3, r1, r3, r5
 8020886:	141b      	asrs	r3, r3, #16
 8020888:	f53f ae71 	bmi.w	802056e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802088c:	3a01      	subs	r2, #1
 802088e:	4293      	cmp	r3, r2
 8020890:	f6bf ae6d 	bge.w	802056e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020894:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020898:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802089c:	f1bb 0f00 	cmp.w	fp, #0
 80208a0:	dc70      	bgt.n	8020984 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 80208a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208a4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80208a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80208ae:	930c      	str	r3, [sp, #48]	; 0x30
 80208b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80208b2:	2b00      	cmp	r3, #0
 80208b4:	f340 81be 	ble.w	8020c34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 80208b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80208bc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80208be:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80208c2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80208c6:	eef0 6a48 	vmov.f32	s13, s16
 80208ca:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80208ce:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80208d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80208d6:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 80208da:	eef0 6a68 	vmov.f32	s13, s17
 80208de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80208e2:	ee16 5a90 	vmov	r5, s13
 80208e6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80208ea:	ee69 7a27 	vmul.f32	s15, s18, s15
 80208ee:	ee37 8a48 	vsub.f32	s16, s14, s16
 80208f2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80208f6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80208fa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80208fe:	ee18 2a10 	vmov	r2, s16
 8020902:	eeb0 8a47 	vmov.f32	s16, s14
 8020906:	fb92 f3f3 	sdiv	r3, r2, r3
 802090a:	ee18 2a90 	vmov	r2, s17
 802090e:	9333      	str	r3, [sp, #204]	; 0xcc
 8020910:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020912:	eef0 8a67 	vmov.f32	s17, s15
 8020916:	fb92 f3f3 	sdiv	r3, r2, r3
 802091a:	9334      	str	r3, [sp, #208]	; 0xd0
 802091c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802091e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020920:	3b01      	subs	r3, #1
 8020922:	9319      	str	r3, [sp, #100]	; 0x64
 8020924:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020926:	bf08      	it	eq
 8020928:	4613      	moveq	r3, r2
 802092a:	9309      	str	r3, [sp, #36]	; 0x24
 802092c:	e5f4      	b.n	8020518 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802092e:	2900      	cmp	r1, #0
 8020930:	f43f ae66 	beq.w	8020600 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020934:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020938:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802093c:	900a      	str	r0, [sp, #40]	; 0x28
 802093e:	0e00      	lsrs	r0, r0, #24
 8020940:	9013      	str	r0, [sp, #76]	; 0x4c
 8020942:	e65d      	b.n	8020600 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020944:	f113 0801 	adds.w	r8, r3, #1
 8020948:	f53f af74 	bmi.w	8020834 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802094c:	4540      	cmp	r0, r8
 802094e:	f6ff af71 	blt.w	8020834 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020952:	f11c 0801 	adds.w	r8, ip, #1
 8020956:	f53f af6d 	bmi.w	8020834 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802095a:	45c6      	cmp	lr, r8
 802095c:	f6ff af6a 	blt.w	8020834 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020960:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020962:	b200      	sxth	r0, r0
 8020964:	9302      	str	r3, [sp, #8]
 8020966:	fa0f f38e 	sxth.w	r3, lr
 802096a:	9000      	str	r0, [sp, #0]
 802096c:	9301      	str	r3, [sp, #4]
 802096e:	4633      	mov	r3, r6
 8020970:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020972:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020976:	e9cd c203 	strd	ip, r2, [sp, #12]
 802097a:	4639      	mov	r1, r7
 802097c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802097e:	f7ff fc33 	bl	80201e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8020982:	e757      	b.n	8020834 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020984:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020986:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802098a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802098c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020990:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020992:	1427      	asrs	r7, r4, #16
 8020994:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020996:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802099a:	142b      	asrs	r3, r5, #16
 802099c:	fb01 7303 	mla	r3, r1, r3, r7
 80209a0:	18e7      	adds	r7, r4, r3
 80209a2:	5ce3      	ldrb	r3, [r4, r3]
 80209a4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80209a8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80209ac:	2a00      	cmp	r2, #0
 80209ae:	f000 8137 	beq.w	8020c20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 80209b2:	f897 e001 	ldrb.w	lr, [r7, #1]
 80209b6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80209ba:	9410      	str	r4, [sp, #64]	; 0x40
 80209bc:	0e24      	lsrs	r4, r4, #24
 80209be:	9417      	str	r4, [sp, #92]	; 0x5c
 80209c0:	b170      	cbz	r0, 80209e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 80209c2:	eb07 0e01 	add.w	lr, r7, r1
 80209c6:	5c79      	ldrb	r1, [r7, r1]
 80209c8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80209cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80209ce:	0e09      	lsrs	r1, r1, #24
 80209d0:	9114      	str	r1, [sp, #80]	; 0x50
 80209d2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80209d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80209da:	9111      	str	r1, [sp, #68]	; 0x44
 80209dc:	0e09      	lsrs	r1, r1, #24
 80209de:	9118      	str	r1, [sp, #96]	; 0x60
 80209e0:	b292      	uxth	r2, r2
 80209e2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80209e4:	b280      	uxth	r0, r0
 80209e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80209e8:	fb02 f800 	mul.w	r8, r2, r0
 80209ec:	0112      	lsls	r2, r2, #4
 80209ee:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80209f2:	eba2 0e08 	sub.w	lr, r2, r8
 80209f6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80209fa:	b280      	uxth	r0, r0
 80209fc:	fa1f fe8e 	uxth.w	lr, lr
 8020a00:	1a12      	subs	r2, r2, r0
 8020a02:	fb0e f101 	mul.w	r1, lr, r1
 8020a06:	b292      	uxth	r2, r2
 8020a08:	fb02 110c 	mla	r1, r2, ip, r1
 8020a0c:	fb00 1104 	mla	r1, r0, r4, r1
 8020a10:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020a12:	fb08 1104 	mla	r1, r8, r4, r1
 8020a16:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020a1a:	2900      	cmp	r1, #0
 8020a1c:	f000 80f5 	beq.w	8020c0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8020a20:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020a24:	d019      	beq.n	8020a5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8020a26:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020a2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a2e:	fb0c fa0a 	mul.w	sl, ip, sl
 8020a32:	fb0c fc03 	mul.w	ip, ip, r3
 8020a36:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020a3a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020a3e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020a42:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020a46:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020a4a:	4453      	add	r3, sl
 8020a4c:	0a3f      	lsrs	r7, r7, #8
 8020a4e:	0a1b      	lsrs	r3, r3, #8
 8020a50:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020a54:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020a58:	433b      	orrs	r3, r7
 8020a5a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020a5c:	2cff      	cmp	r4, #255	; 0xff
 8020a5e:	d020      	beq.n	8020aa2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8020a60:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020a62:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020a66:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020a68:	4367      	muls	r7, r4
 8020a6a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020a6c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020a70:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020a74:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020a76:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020a7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a7e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a82:	44bc      	add	ip, r7
 8020a84:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020a88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a8c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a9c:	ea4c 040a 	orr.w	r4, ip, sl
 8020aa0:	9410      	str	r4, [sp, #64]	; 0x40
 8020aa2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020aa4:	2cff      	cmp	r4, #255	; 0xff
 8020aa6:	d020      	beq.n	8020aea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8020aa8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020aaa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020aae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020ab0:	4367      	muls	r7, r4
 8020ab2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020ab4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020ab8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020abc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020abe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020ac2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ac6:	fb04 fa0a 	mul.w	sl, r4, sl
 8020aca:	44bc      	add	ip, r7
 8020acc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020ad0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ad4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020ad8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020adc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ae0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020ae4:	ea4c 040a 	orr.w	r4, ip, sl
 8020ae8:	940b      	str	r4, [sp, #44]	; 0x2c
 8020aea:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020aec:	2cff      	cmp	r4, #255	; 0xff
 8020aee:	d020      	beq.n	8020b32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 8020af0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020af2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020af6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020af8:	4367      	muls	r7, r4
 8020afa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020afc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020b00:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020b04:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020b06:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020b0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b0e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020b12:	44bc      	add	ip, r7
 8020b14:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020b18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b1c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020b20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b2c:	ea4c 040a 	orr.w	r4, ip, sl
 8020b30:	9411      	str	r4, [sp, #68]	; 0x44
 8020b32:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020b34:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020b38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020b3c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020b40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020b42:	fb0e f707 	mul.w	r7, lr, r7
 8020b46:	fb02 770c 	mla	r7, r2, ip, r7
 8020b4a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020b4e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020b50:	fb00 770c 	mla	r7, r0, ip, r7
 8020b54:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020b58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020b5a:	fb08 770c 	mla	r7, r8, ip, r7
 8020b5e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020b62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020b64:	fb0e fe0c 	mul.w	lr, lr, ip
 8020b68:	0a3f      	lsrs	r7, r7, #8
 8020b6a:	fb02 e303 	mla	r3, r2, r3, lr
 8020b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020b70:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020b74:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020b78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020b7a:	fb00 330a 	mla	r3, r0, sl, r3
 8020b7e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020b82:	f8b9 0000 	ldrh.w	r0, [r9]
 8020b86:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020b8c:	1202      	asrs	r2, r0, #8
 8020b8e:	434b      	muls	r3, r1
 8020b90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b94:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020b98:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020b9c:	1c59      	adds	r1, r3, #1
 8020b9e:	ea47 070c 	orr.w	r7, r7, ip
 8020ba2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020ba6:	0c3b      	lsrs	r3, r7, #16
 8020ba8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020bac:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020bb0:	b2ff      	uxtb	r7, r7
 8020bb2:	fb13 f304 	smulbb	r3, r3, r4
 8020bb6:	b2c9      	uxtb	r1, r1
 8020bb8:	fb1c fc04 	smulbb	ip, ip, r4
 8020bbc:	fb02 3201 	mla	r2, r2, r1, r3
 8020bc0:	10c3      	asrs	r3, r0, #3
 8020bc2:	fb17 f704 	smulbb	r7, r7, r4
 8020bc6:	00c0      	lsls	r0, r0, #3
 8020bc8:	b292      	uxth	r2, r2
 8020bca:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020bce:	b2c0      	uxtb	r0, r0
 8020bd0:	fb03 c301 	mla	r3, r3, r1, ip
 8020bd4:	f102 0c01 	add.w	ip, r2, #1
 8020bd8:	fb00 7001 	mla	r0, r0, r1, r7
 8020bdc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020be0:	b280      	uxth	r0, r0
 8020be2:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8020be6:	b29b      	uxth	r3, r3
 8020be8:	1c42      	adds	r2, r0, #1
 8020bea:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020bee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020bf2:	ea42 020c 	orr.w	r2, r2, ip
 8020bf6:	f103 0c01 	add.w	ip, r3, #1
 8020bfa:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020bfe:	095b      	lsrs	r3, r3, #5
 8020c00:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020c04:	431a      	orrs	r2, r3
 8020c06:	f8a9 2000 	strh.w	r2, [r9]
 8020c0a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020c0c:	f109 0902 	add.w	r9, r9, #2
 8020c10:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020c12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020c16:	441a      	add	r2, r3
 8020c18:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020c1a:	9231      	str	r2, [sp, #196]	; 0xc4
 8020c1c:	441d      	add	r5, r3
 8020c1e:	e63d      	b.n	802089c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8020c20:	2800      	cmp	r0, #0
 8020c22:	f43f aedd 	beq.w	80209e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8020c26:	5c79      	ldrb	r1, [r7, r1]
 8020c28:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020c2c:	910b      	str	r1, [sp, #44]	; 0x2c
 8020c2e:	0e09      	lsrs	r1, r1, #24
 8020c30:	9114      	str	r1, [sp, #80]	; 0x50
 8020c32:	e6d5      	b.n	80209e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8020c34:	b01f      	add	sp, #124	; 0x7c
 8020c36:	ecbd 8b08 	vpop	{d8-d11}
 8020c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020c40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8020c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c44:	880e      	ldrh	r6, [r1, #0]
 8020c46:	b085      	sub	sp, #20
 8020c48:	4691      	mov	r9, r2
 8020c4a:	ea4f 2826 	mov.w	r8, r6, asr #8
 8020c4e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020c52:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8020c56:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 8020c5a:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8020c5e:	00f6      	lsls	r6, r6, #3
 8020c60:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8020c64:	9200      	str	r2, [sp, #0]
 8020c66:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 8020c6a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8020c6e:	9201      	str	r2, [sp, #4]
 8020c70:	b2f2      	uxtb	r2, r6
 8020c72:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8020c76:	9202      	str	r2, [sp, #8]
 8020c78:	fb04 560c 	mla	r6, r4, ip, r5
 8020c7c:	2c00      	cmp	r4, #0
 8020c7e:	eb09 0806 	add.w	r8, r9, r6
 8020c82:	db3f      	blt.n	8020d04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8020c84:	45a6      	cmp	lr, r4
 8020c86:	dd3d      	ble.n	8020d04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8020c88:	2d00      	cmp	r5, #0
 8020c8a:	db39      	blt.n	8020d00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8020c8c:	45ac      	cmp	ip, r5
 8020c8e:	dd37      	ble.n	8020d00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8020c90:	f819 2006 	ldrb.w	r2, [r9, r6]
 8020c94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020c98:	1c6e      	adds	r6, r5, #1
 8020c9a:	d436      	bmi.n	8020d0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8020c9c:	45b4      	cmp	ip, r6
 8020c9e:	dd34      	ble.n	8020d0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8020ca0:	b3a8      	cbz	r0, 8020d0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8020ca2:	f898 6001 	ldrb.w	r6, [r8, #1]
 8020ca6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8020caa:	3401      	adds	r4, #1
 8020cac:	d433      	bmi.n	8020d16 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8020cae:	45a6      	cmp	lr, r4
 8020cb0:	dd31      	ble.n	8020d16 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8020cb2:	b39f      	cbz	r7, 8020d1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8020cb4:	2d00      	cmp	r5, #0
 8020cb6:	eb08 0e0c 	add.w	lr, r8, ip
 8020cba:	db2a      	blt.n	8020d12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8020cbc:	45ac      	cmp	ip, r5
 8020cbe:	dd28      	ble.n	8020d12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8020cc0:	f818 400c 	ldrb.w	r4, [r8, ip]
 8020cc4:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8020cc8:	3501      	adds	r5, #1
 8020cca:	d42a      	bmi.n	8020d22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8020ccc:	45ac      	cmp	ip, r5
 8020cce:	dd28      	ble.n	8020d22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8020cd0:	b348      	cbz	r0, 8020d26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8020cd2:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020cd6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8020cda:	280f      	cmp	r0, #15
 8020cdc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020ce0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020ce4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020ce8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8020cec:	d801      	bhi.n	8020cf2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8020cee:	2f0f      	cmp	r7, #15
 8020cf0:	d91b      	bls.n	8020d2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8020cf2:	4b7e      	ldr	r3, [pc, #504]	; (8020eec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8020cf4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8020cf8:	4a7d      	ldr	r2, [pc, #500]	; (8020ef0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8020cfa:	487e      	ldr	r0, [pc, #504]	; (8020ef4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8020cfc:	f004 ffcc 	bl	8025c98 <__assert_func>
 8020d00:	2200      	movs	r2, #0
 8020d02:	e7c9      	b.n	8020c98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8020d04:	2600      	movs	r6, #0
 8020d06:	4632      	mov	r2, r6
 8020d08:	e7cf      	b.n	8020caa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8020d0a:	2600      	movs	r6, #0
 8020d0c:	e7cd      	b.n	8020caa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8020d0e:	4606      	mov	r6, r0
 8020d10:	e7cb      	b.n	8020caa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8020d12:	2400      	movs	r4, #0
 8020d14:	e7d8      	b.n	8020cc8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8020d16:	2300      	movs	r3, #0
 8020d18:	461c      	mov	r4, r3
 8020d1a:	e7de      	b.n	8020cda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8020d1c:	463b      	mov	r3, r7
 8020d1e:	463c      	mov	r4, r7
 8020d20:	e7db      	b.n	8020cda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8020d22:	2300      	movs	r3, #0
 8020d24:	e7d9      	b.n	8020cda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8020d26:	4603      	mov	r3, r0
 8020d28:	e7d7      	b.n	8020cda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8020d2a:	b280      	uxth	r0, r0
 8020d2c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020d30:	b2bf      	uxth	r7, r7
 8020d32:	fb00 fe07 	mul.w	lr, r0, r7
 8020d36:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8020d3a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020d3e:	eba0 0c0e 	sub.w	ip, r0, lr
 8020d42:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8020d46:	b2bf      	uxth	r7, r7
 8020d48:	fa1f fc8c 	uxth.w	ip, ip
 8020d4c:	eba5 0507 	sub.w	r5, r5, r7
 8020d50:	fb0c f00a 	mul.w	r0, ip, sl
 8020d54:	b2ad      	uxth	r5, r5
 8020d56:	fb05 000b 	mla	r0, r5, fp, r0
 8020d5a:	fb07 0009 	mla	r0, r7, r9, r0
 8020d5e:	fb0e 0008 	mla	r0, lr, r8, r0
 8020d62:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020d66:	9003      	str	r0, [sp, #12]
 8020d68:	d018      	beq.n	8020d9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 8020d6a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8020d6e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020d72:	fb0b f000 	mul.w	r0, fp, r0
 8020d76:	fb0b fb02 	mul.w	fp, fp, r2
 8020d7a:	0a02      	lsrs	r2, r0, #8
 8020d7c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020d80:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020d84:	4402      	add	r2, r0
 8020d86:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8020d8a:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020d8e:	0a12      	lsrs	r2, r2, #8
 8020d90:	0a00      	lsrs	r0, r0, #8
 8020d92:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020d96:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020d9a:	4302      	orrs	r2, r0
 8020d9c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020da0:	d019      	beq.n	8020dd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 8020da2:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020da6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020daa:	fb0a fb0b 	mul.w	fp, sl, fp
 8020dae:	fb0a fa06 	mul.w	sl, sl, r6
 8020db2:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020db6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020dba:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020dbe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020dc2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8020dc6:	445e      	add	r6, fp
 8020dc8:	0a00      	lsrs	r0, r0, #8
 8020dca:	0a36      	lsrs	r6, r6, #8
 8020dcc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020dd0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020dd4:	4306      	orrs	r6, r0
 8020dd6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020dda:	d019      	beq.n	8020e10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 8020ddc:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020de0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020de4:	fb09 fa0a 	mul.w	sl, r9, sl
 8020de8:	fb09 f904 	mul.w	r9, r9, r4
 8020dec:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020df0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020df4:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8020df8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020dfc:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8020e00:	4454      	add	r4, sl
 8020e02:	0a00      	lsrs	r0, r0, #8
 8020e04:	0a24      	lsrs	r4, r4, #8
 8020e06:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020e0a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020e0e:	4304      	orrs	r4, r0
 8020e10:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020e14:	d019      	beq.n	8020e4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 8020e16:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8020e1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e1e:	fb08 f909 	mul.w	r9, r8, r9
 8020e22:	fb08 f803 	mul.w	r8, r8, r3
 8020e26:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8020e2a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020e2e:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8020e32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e36:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8020e3a:	444b      	add	r3, r9
 8020e3c:	0a00      	lsrs	r0, r0, #8
 8020e3e:	0a1b      	lsrs	r3, r3, #8
 8020e40:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020e44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e48:	4303      	orrs	r3, r0
 8020e4a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020e4e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8020e52:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020e56:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020e5a:	fb0c f808 	mul.w	r8, ip, r8
 8020e5e:	fb0c f606 	mul.w	r6, ip, r6
 8020e62:	fb05 8800 	mla	r8, r5, r0, r8
 8020e66:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8020e6a:	fb05 6202 	mla	r2, r5, r2, r6
 8020e6e:	9d00      	ldr	r5, [sp, #0]
 8020e70:	fb07 8800 	mla	r8, r7, r0, r8
 8020e74:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8020e78:	fb0e 8000 	mla	r0, lr, r0, r8
 8020e7c:	0a00      	lsrs	r0, r0, #8
 8020e7e:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8020e82:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8020e86:	fb07 2700 	mla	r7, r7, r0, r2
 8020e8a:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8020e8e:	9b03      	ldr	r3, [sp, #12]
 8020e90:	fb0e 7000 	mla	r0, lr, r0, r7
 8020e94:	9a02      	ldr	r2, [sp, #8]
 8020e96:	43dc      	mvns	r4, r3
 8020e98:	9b01      	ldr	r3, [sp, #4]
 8020e9a:	0a00      	lsrs	r0, r0, #8
 8020e9c:	b2e4      	uxtb	r4, r4
 8020e9e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020ea2:	4363      	muls	r3, r4
 8020ea4:	4365      	muls	r5, r4
 8020ea6:	ea48 0000 	orr.w	r0, r8, r0
 8020eaa:	4362      	muls	r2, r4
 8020eac:	1c5e      	adds	r6, r3, #1
 8020eae:	4614      	mov	r4, r2
 8020eb0:	1c6a      	adds	r2, r5, #1
 8020eb2:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8020eb6:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8020eba:	0a03      	lsrs	r3, r0, #8
 8020ebc:	0c02      	lsrs	r2, r0, #16
 8020ebe:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8020ec2:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8020ec6:	00db      	lsls	r3, r3, #3
 8020ec8:	0212      	lsls	r2, r2, #8
 8020eca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020ece:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8020ed2:	4313      	orrs	r3, r2
 8020ed4:	1c62      	adds	r2, r4, #1
 8020ed6:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8020eda:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020ede:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020ee2:	4318      	orrs	r0, r3
 8020ee4:	8008      	strh	r0, [r1, #0]
 8020ee6:	b005      	add	sp, #20
 8020ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020eec:	0802a1f1 	.word	0x0802a1f1
 8020ef0:	0802a7be 	.word	0x0802a7be
 8020ef4:	0802a275 	.word	0x0802a275

08020ef8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020efc:	ed2d 8b08 	vpush	{d8-d11}
 8020f00:	b09b      	sub	sp, #108	; 0x6c
 8020f02:	eeb0 aa40 	vmov.f32	s20, s0
 8020f06:	eef0 9a60 	vmov.f32	s19, s1
 8020f0a:	9218      	str	r2, [sp, #96]	; 0x60
 8020f0c:	eeb0 9a41 	vmov.f32	s18, s2
 8020f10:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020f12:	eeb0 8a62 	vmov.f32	s16, s5
 8020f16:	9019      	str	r0, [sp, #100]	; 0x64
 8020f18:	eef0 8a43 	vmov.f32	s17, s6
 8020f1c:	6850      	ldr	r0, [r2, #4]
 8020f1e:	eef0 ba44 	vmov.f32	s23, s8
 8020f22:	9116      	str	r1, [sp, #88]	; 0x58
 8020f24:	eeb0 ba64 	vmov.f32	s22, s9
 8020f28:	9307      	str	r3, [sp, #28]
 8020f2a:	eef0 aa45 	vmov.f32	s21, s10
 8020f2e:	6812      	ldr	r2, [r2, #0]
 8020f30:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8020f32:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8020f36:	fb00 1303 	mla	r3, r0, r3, r1
 8020f3a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8020f40:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020f42:	681b      	ldr	r3, [r3, #0]
 8020f44:	930f      	str	r3, [sp, #60]	; 0x3c
 8020f46:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020f48:	685e      	ldr	r6, [r3, #4]
 8020f4a:	3604      	adds	r6, #4
 8020f4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020f4e:	2b00      	cmp	r3, #0
 8020f50:	dc03      	bgt.n	8020f5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020f52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	f340 8373 	ble.w	8021640 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8020f5a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020f5c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020f60:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020f64:	1e48      	subs	r0, r1, #1
 8020f66:	1e57      	subs	r7, r2, #1
 8020f68:	9b07      	ldr	r3, [sp, #28]
 8020f6a:	2b00      	cmp	r3, #0
 8020f6c:	f340 818f 	ble.w	802128e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8020f70:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8020f72:	142b      	asrs	r3, r5, #16
 8020f74:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020f78:	d406      	bmi.n	8020f88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020f7a:	4584      	cmp	ip, r0
 8020f7c:	da04      	bge.n	8020f88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020f7e:	2b00      	cmp	r3, #0
 8020f80:	db02      	blt.n	8020f88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020f82:	42bb      	cmp	r3, r7
 8020f84:	f2c0 8184 	blt.w	8021290 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8020f88:	f11c 0c01 	adds.w	ip, ip, #1
 8020f8c:	f100 8172 	bmi.w	8021274 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020f90:	4561      	cmp	r1, ip
 8020f92:	f2c0 816f 	blt.w	8021274 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020f96:	3301      	adds	r3, #1
 8020f98:	f100 816c 	bmi.w	8021274 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020f9c:	429a      	cmp	r2, r3
 8020f9e:	f2c0 8169 	blt.w	8021274 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020fa2:	9b07      	ldr	r3, [sp, #28]
 8020fa4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020fa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8020fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020faa:	2b00      	cmp	r3, #0
 8020fac:	f340 818e 	ble.w	80212cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8020fb0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020fb2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020fb6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020fba:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020fbe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020fc0:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020fc4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020fc6:	141b      	asrs	r3, r3, #16
 8020fc8:	f100 81d1 	bmi.w	802136e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8020fcc:	f101 38ff 	add.w	r8, r1, #4294967295
 8020fd0:	4543      	cmp	r3, r8
 8020fd2:	f280 81cc 	bge.w	802136e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8020fd6:	f1bc 0f00 	cmp.w	ip, #0
 8020fda:	f2c0 81c8 	blt.w	802136e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8020fde:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020fe2:	45c4      	cmp	ip, r8
 8020fe4:	f280 81c3 	bge.w	802136e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8020fe8:	b209      	sxth	r1, r1
 8020fea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020fec:	fb0c 3301 	mla	r3, ip, r1, r3
 8020ff0:	eb04 0803 	add.w	r8, r4, r3
 8020ff4:	5ce3      	ldrb	r3, [r4, r3]
 8020ff6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020ffa:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020ffe:	2a00      	cmp	r2, #0
 8021000:	f000 81aa 	beq.w	8021358 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8021004:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021008:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802100c:	940b      	str	r4, [sp, #44]	; 0x2c
 802100e:	0e24      	lsrs	r4, r4, #24
 8021010:	9412      	str	r4, [sp, #72]	; 0x48
 8021012:	b178      	cbz	r0, 8021034 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8021014:	eb08 0c01 	add.w	ip, r8, r1
 8021018:	f818 1001 	ldrb.w	r1, [r8, r1]
 802101c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021020:	9108      	str	r1, [sp, #32]
 8021022:	0e09      	lsrs	r1, r1, #24
 8021024:	9110      	str	r1, [sp, #64]	; 0x40
 8021026:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802102a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802102e:	910c      	str	r1, [sp, #48]	; 0x30
 8021030:	0e09      	lsrs	r1, r1, #24
 8021032:	9113      	str	r1, [sp, #76]	; 0x4c
 8021034:	b292      	uxth	r2, r2
 8021036:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021038:	b280      	uxth	r0, r0
 802103a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802103c:	fb02 f900 	mul.w	r9, r2, r0
 8021040:	0112      	lsls	r2, r2, #4
 8021042:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021046:	eba2 0809 	sub.w	r8, r2, r9
 802104a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802104e:	b280      	uxth	r0, r0
 8021050:	fa1f f888 	uxth.w	r8, r8
 8021054:	1a12      	subs	r2, r2, r0
 8021056:	fb08 f101 	mul.w	r1, r8, r1
 802105a:	b292      	uxth	r2, r2
 802105c:	fb02 110e 	mla	r1, r2, lr, r1
 8021060:	fb00 1104 	mla	r1, r0, r4, r1
 8021064:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021066:	fb09 1104 	mla	r1, r9, r4, r1
 802106a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802106e:	2900      	cmp	r1, #0
 8021070:	f000 80f5 	beq.w	802125e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8021074:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021078:	d01b      	beq.n	80210b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802107a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802107e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021082:	fb0e fa0a 	mul.w	sl, lr, sl
 8021086:	fb0e fe03 	mul.w	lr, lr, r3
 802108a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802108e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021092:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021096:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802109a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802109e:	4453      	add	r3, sl
 80210a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210a4:	0a1b      	lsrs	r3, r3, #8
 80210a6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80210aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80210ae:	ea43 030c 	orr.w	r3, r3, ip
 80210b2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80210b4:	2cff      	cmp	r4, #255	; 0xff
 80210b6:	d021      	beq.n	80210fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80210b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80210ba:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80210be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80210c0:	fb04 fb0b 	mul.w	fp, r4, fp
 80210c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80210c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80210ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80210cc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80210d0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80210d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80210d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80210dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80210e0:	44de      	add	lr, fp
 80210e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80210e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80210ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80210ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80210f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80210f6:	ea4e 040a 	orr.w	r4, lr, sl
 80210fa:	940b      	str	r4, [sp, #44]	; 0x2c
 80210fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80210fe:	2cff      	cmp	r4, #255	; 0xff
 8021100:	d021      	beq.n	8021146 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8021102:	9c08      	ldr	r4, [sp, #32]
 8021104:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021108:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802110a:	fb04 fb0b 	mul.w	fp, r4, fp
 802110e:	9c08      	ldr	r4, [sp, #32]
 8021110:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021114:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021116:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802111a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802111e:	fb04 fa0a 	mul.w	sl, r4, sl
 8021122:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021126:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802112a:	44de      	add	lr, fp
 802112c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021130:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021134:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021138:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802113c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021140:	ea4e 040a 	orr.w	r4, lr, sl
 8021144:	9408      	str	r4, [sp, #32]
 8021146:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021148:	2cff      	cmp	r4, #255	; 0xff
 802114a:	d021      	beq.n	8021190 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 802114c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802114e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021152:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021154:	fb04 fb0b 	mul.w	fp, r4, fp
 8021158:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802115a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802115e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021160:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021164:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021168:	fb04 fa0a 	mul.w	sl, r4, sl
 802116c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021170:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021174:	44de      	add	lr, fp
 8021176:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802117a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802117e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021182:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021186:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802118a:	ea4e 040a 	orr.w	r4, lr, sl
 802118e:	940c      	str	r4, [sp, #48]	; 0x30
 8021190:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021192:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021196:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802119a:	43c9      	mvns	r1, r1
 802119c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80211a0:	9c08      	ldr	r4, [sp, #32]
 80211a2:	fb08 fc0c 	mul.w	ip, r8, ip
 80211a6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80211aa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80211ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80211b0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80211b4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80211b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80211ba:	fb09 cc0e 	mla	ip, r9, lr, ip
 80211be:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80211c2:	fb08 f80e 	mul.w	r8, r8, lr
 80211c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80211ca:	fa5f fe81 	uxtb.w	lr, r1
 80211ce:	fb02 8303 	mla	r3, r2, r3, r8
 80211d2:	9a08      	ldr	r2, [sp, #32]
 80211d4:	f8b7 8000 	ldrh.w	r8, [r7]
 80211d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80211dc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80211e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80211e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80211e6:	fb00 330a 	mla	r3, r0, sl, r3
 80211ea:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80211ee:	ea4f 2228 	mov.w	r2, r8, asr #8
 80211f2:	fb09 3900 	mla	r9, r9, r0, r3
 80211f6:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80211fa:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80211fe:	b2c9      	uxtb	r1, r1
 8021200:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021204:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021208:	fb02 f20e 	mul.w	r2, r2, lr
 802120c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021210:	fb00 f00e 	mul.w	r0, r0, lr
 8021214:	1c53      	adds	r3, r2, #1
 8021216:	fb01 f10e 	mul.w	r1, r1, lr
 802121a:	ea4c 0c09 	orr.w	ip, ip, r9
 802121e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021222:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8021226:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802122a:	4a60      	ldr	r2, [pc, #384]	; (80213ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 802122c:	b2db      	uxtb	r3, r3
 802122e:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8021232:	1c43      	adds	r3, r0, #1
 8021234:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021238:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802123c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021240:	00db      	lsls	r3, r3, #3
 8021242:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021246:	4313      	orrs	r3, r2
 8021248:	1c4a      	adds	r2, r1, #1
 802124a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802124e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021252:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8021256:	ea4c 0c03 	orr.w	ip, ip, r3
 802125a:	f8a7 c000 	strh.w	ip, [r7]
 802125e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021260:	3702      	adds	r7, #2
 8021262:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021264:	441a      	add	r2, r3
 8021266:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021268:	441d      	add	r5, r3
 802126a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802126c:	922d      	str	r2, [sp, #180]	; 0xb4
 802126e:	3b01      	subs	r3, #1
 8021270:	9317      	str	r3, [sp, #92]	; 0x5c
 8021272:	e699      	b.n	8020fa8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021274:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021276:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8021278:	441c      	add	r4, r3
 802127a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802127c:	441d      	add	r5, r3
 802127e:	9b07      	ldr	r3, [sp, #28]
 8021280:	942d      	str	r4, [sp, #180]	; 0xb4
 8021282:	3b01      	subs	r3, #1
 8021284:	9307      	str	r3, [sp, #28]
 8021286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021288:	3302      	adds	r3, #2
 802128a:	930a      	str	r3, [sp, #40]	; 0x28
 802128c:	e66c      	b.n	8020f68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802128e:	d024      	beq.n	80212da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8021290:	9b07      	ldr	r3, [sp, #28]
 8021292:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8021294:	3b01      	subs	r3, #1
 8021296:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8021298:	fb00 4003 	mla	r0, r0, r3, r4
 802129c:	1400      	asrs	r0, r0, #16
 802129e:	f53f ae80 	bmi.w	8020fa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80212a2:	3901      	subs	r1, #1
 80212a4:	4288      	cmp	r0, r1
 80212a6:	f6bf ae7c 	bge.w	8020fa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80212aa:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80212ac:	fb01 5303 	mla	r3, r1, r3, r5
 80212b0:	141b      	asrs	r3, r3, #16
 80212b2:	f53f ae76 	bmi.w	8020fa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80212b6:	3a01      	subs	r2, #1
 80212b8:	4293      	cmp	r3, r2
 80212ba:	f6bf ae72 	bge.w	8020fa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80212be:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80212c2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80212c6:	f1bb 0f00 	cmp.w	fp, #0
 80212ca:	dc71      	bgt.n	80213b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80212cc:	9b07      	ldr	r3, [sp, #28]
 80212ce:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80212d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212d4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80212d8:	930a      	str	r3, [sp, #40]	; 0x28
 80212da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80212dc:	2b00      	cmp	r3, #0
 80212de:	f340 81af 	ble.w	8021640 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80212e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80212e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80212e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80212ec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80212f0:	eef0 6a48 	vmov.f32	s13, s16
 80212f4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80212f8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80212fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021300:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8021304:	eef0 6a68 	vmov.f32	s13, s17
 8021308:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802130c:	ee16 5a90 	vmov	r5, s13
 8021310:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021314:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021318:	ee37 8a48 	vsub.f32	s16, s14, s16
 802131c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021320:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021324:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021328:	ee18 2a10 	vmov	r2, s16
 802132c:	eeb0 8a47 	vmov.f32	s16, s14
 8021330:	fb92 f3f3 	sdiv	r3, r2, r3
 8021334:	ee18 2a90 	vmov	r2, s17
 8021338:	932f      	str	r3, [sp, #188]	; 0xbc
 802133a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802133c:	eef0 8a67 	vmov.f32	s17, s15
 8021340:	fb92 f3f3 	sdiv	r3, r2, r3
 8021344:	9330      	str	r3, [sp, #192]	; 0xc0
 8021346:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021348:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802134a:	3b01      	subs	r3, #1
 802134c:	9316      	str	r3, [sp, #88]	; 0x58
 802134e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021350:	bf08      	it	eq
 8021352:	4613      	moveq	r3, r2
 8021354:	9307      	str	r3, [sp, #28]
 8021356:	e5f9      	b.n	8020f4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8021358:	2800      	cmp	r0, #0
 802135a:	f43f ae6b 	beq.w	8021034 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802135e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021362:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021366:	9108      	str	r1, [sp, #32]
 8021368:	0e09      	lsrs	r1, r1, #24
 802136a:	9110      	str	r1, [sp, #64]	; 0x40
 802136c:	e662      	b.n	8021034 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802136e:	f113 0801 	adds.w	r8, r3, #1
 8021372:	f53f af74 	bmi.w	802125e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8021376:	4541      	cmp	r1, r8
 8021378:	f6ff af71 	blt.w	802125e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 802137c:	f11c 0801 	adds.w	r8, ip, #1
 8021380:	f53f af6d 	bmi.w	802125e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8021384:	45c6      	cmp	lr, r8
 8021386:	f6ff af6a 	blt.w	802125e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 802138a:	b209      	sxth	r1, r1
 802138c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021390:	fa0f f38e 	sxth.w	r3, lr
 8021394:	9100      	str	r1, [sp, #0]
 8021396:	4639      	mov	r1, r7
 8021398:	9301      	str	r3, [sp, #4]
 802139a:	4633      	mov	r3, r6
 802139c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80213a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80213a2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80213a4:	f7ff fc4c 	bl	8020c40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80213a8:	e759      	b.n	802125e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80213aa:	bf00      	nop
 80213ac:	fffff800 	.word	0xfffff800
 80213b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80213b2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80213b6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80213b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80213bc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80213be:	1427      	asrs	r7, r4, #16
 80213c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80213c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80213c6:	142b      	asrs	r3, r5, #16
 80213c8:	fb01 7303 	mla	r3, r1, r3, r7
 80213cc:	18e7      	adds	r7, r4, r3
 80213ce:	5ce3      	ldrb	r3, [r4, r3]
 80213d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80213d4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80213d8:	2a00      	cmp	r2, #0
 80213da:	f000 8127 	beq.w	802162c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80213de:	f897 e001 	ldrb.w	lr, [r7, #1]
 80213e2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80213e6:	940d      	str	r4, [sp, #52]	; 0x34
 80213e8:	0e24      	lsrs	r4, r4, #24
 80213ea:	9414      	str	r4, [sp, #80]	; 0x50
 80213ec:	b170      	cbz	r0, 802140c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80213ee:	eb07 0e01 	add.w	lr, r7, r1
 80213f2:	5c79      	ldrb	r1, [r7, r1]
 80213f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80213f8:	9109      	str	r1, [sp, #36]	; 0x24
 80213fa:	0e09      	lsrs	r1, r1, #24
 80213fc:	9111      	str	r1, [sp, #68]	; 0x44
 80213fe:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8021402:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021406:	910e      	str	r1, [sp, #56]	; 0x38
 8021408:	0e09      	lsrs	r1, r1, #24
 802140a:	9115      	str	r1, [sp, #84]	; 0x54
 802140c:	b292      	uxth	r2, r2
 802140e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021410:	b280      	uxth	r0, r0
 8021412:	fb02 f800 	mul.w	r8, r2, r0
 8021416:	0112      	lsls	r2, r2, #4
 8021418:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802141c:	eba2 0e08 	sub.w	lr, r2, r8
 8021420:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021426:	b280      	uxth	r0, r0
 8021428:	fa1f fe8e 	uxth.w	lr, lr
 802142c:	1a09      	subs	r1, r1, r0
 802142e:	fb0e f202 	mul.w	r2, lr, r2
 8021432:	b289      	uxth	r1, r1
 8021434:	fb01 220c 	mla	r2, r1, ip, r2
 8021438:	fb00 2204 	mla	r2, r0, r4, r2
 802143c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802143e:	fb08 2204 	mla	r2, r8, r4, r2
 8021442:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021446:	2a00      	cmp	r2, #0
 8021448:	f000 80e5 	beq.w	8021616 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802144c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021450:	d019      	beq.n	8021486 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 8021452:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021456:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802145a:	fb0c fa0a 	mul.w	sl, ip, sl
 802145e:	fb0c fc03 	mul.w	ip, ip, r3
 8021462:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021466:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802146a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802146e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021472:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021476:	4453      	add	r3, sl
 8021478:	0a3f      	lsrs	r7, r7, #8
 802147a:	0a1b      	lsrs	r3, r3, #8
 802147c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021480:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021484:	433b      	orrs	r3, r7
 8021486:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021488:	2cff      	cmp	r4, #255	; 0xff
 802148a:	d020      	beq.n	80214ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 802148c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802148e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021492:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021494:	4367      	muls	r7, r4
 8021496:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021498:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802149c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80214a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80214a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80214a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80214ae:	44bc      	add	ip, r7
 80214b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80214b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80214bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214c8:	ea4c 040a 	orr.w	r4, ip, sl
 80214cc:	940d      	str	r4, [sp, #52]	; 0x34
 80214ce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80214d0:	2cff      	cmp	r4, #255	; 0xff
 80214d2:	d020      	beq.n	8021516 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 80214d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80214d6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80214da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80214dc:	4367      	muls	r7, r4
 80214de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80214e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80214e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80214e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80214ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80214ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214f2:	fb04 fa0a 	mul.w	sl, r4, sl
 80214f6:	44bc      	add	ip, r7
 80214f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80214fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021500:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021504:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021508:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802150c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021510:	ea4c 040a 	orr.w	r4, ip, sl
 8021514:	9409      	str	r4, [sp, #36]	; 0x24
 8021516:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021518:	2cff      	cmp	r4, #255	; 0xff
 802151a:	d020      	beq.n	802155e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 802151c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802151e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021522:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021524:	4367      	muls	r7, r4
 8021526:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021528:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802152c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021530:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021532:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021536:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802153a:	fb04 fa0a 	mul.w	sl, r4, sl
 802153e:	44bc      	add	ip, r7
 8021540:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021544:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021548:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802154c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021550:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021554:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021558:	ea4c 040a 	orr.w	r4, ip, sl
 802155c:	940e      	str	r4, [sp, #56]	; 0x38
 802155e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021560:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021564:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021568:	43d2      	mvns	r2, r2
 802156a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802156e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021570:	b2d2      	uxtb	r2, r2
 8021572:	fb0e f707 	mul.w	r7, lr, r7
 8021576:	fb01 770c 	mla	r7, r1, ip, r7
 802157a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802157e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021580:	fb00 770c 	mla	r7, r0, ip, r7
 8021584:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021588:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802158a:	fb08 770c 	mla	r7, r8, ip, r7
 802158e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021592:	fb0e fe0c 	mul.w	lr, lr, ip
 8021596:	0a3f      	lsrs	r7, r7, #8
 8021598:	fb01 e303 	mla	r3, r1, r3, lr
 802159c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802159e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80215a2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80215a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80215a8:	fb00 330a 	mla	r3, r0, sl, r3
 80215ac:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80215b0:	fb08 3c0c 	mla	ip, r8, ip, r3
 80215b4:	f8b9 3000 	ldrh.w	r3, [r9]
 80215b8:	1218      	asrs	r0, r3, #8
 80215ba:	10d9      	asrs	r1, r3, #3
 80215bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215c0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80215c4:	00db      	lsls	r3, r3, #3
 80215c6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80215ca:	4350      	muls	r0, r2
 80215cc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80215d0:	b2db      	uxtb	r3, r3
 80215d2:	4351      	muls	r1, r2
 80215d4:	ea47 070c 	orr.w	r7, r7, ip
 80215d8:	4353      	muls	r3, r2
 80215da:	1c42      	adds	r2, r0, #1
 80215dc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80215e0:	0c3a      	lsrs	r2, r7, #16
 80215e2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80215e6:	4a19      	ldr	r2, [pc, #100]	; (802164c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 80215e8:	b2c0      	uxtb	r0, r0
 80215ea:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80215ee:	1c4a      	adds	r2, r1, #1
 80215f0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80215f4:	0a3a      	lsrs	r2, r7, #8
 80215f6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80215fa:	00c9      	lsls	r1, r1, #3
 80215fc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021600:	4301      	orrs	r1, r0
 8021602:	1c58      	adds	r0, r3, #1
 8021604:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021608:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802160c:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8021610:	4308      	orrs	r0, r1
 8021612:	f8a9 0000 	strh.w	r0, [r9]
 8021616:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021618:	f109 0902 	add.w	r9, r9, #2
 802161c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802161e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021622:	441a      	add	r2, r3
 8021624:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021626:	922d      	str	r2, [sp, #180]	; 0xb4
 8021628:	441d      	add	r5, r3
 802162a:	e64c      	b.n	80212c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 802162c:	2800      	cmp	r0, #0
 802162e:	f43f aeed 	beq.w	802140c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8021632:	5c79      	ldrb	r1, [r7, r1]
 8021634:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021638:	9109      	str	r1, [sp, #36]	; 0x24
 802163a:	0e09      	lsrs	r1, r1, #24
 802163c:	9111      	str	r1, [sp, #68]	; 0x44
 802163e:	e6e5      	b.n	802140c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8021640:	b01b      	add	sp, #108	; 0x6c
 8021642:	ecbd 8b08 	vpop	{d8-d11}
 8021646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802164a:	bf00      	nop
 802164c:	fffff800 	.word	0xfffff800

08021650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8021650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021654:	b085      	sub	sp, #20
 8021656:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802165a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802165e:	9103      	str	r1, [sp, #12]
 8021660:	2d00      	cmp	r5, #0
 8021662:	fb05 7106 	mla	r1, r5, r6, r7
 8021666:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802166a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802166e:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8021672:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8021676:	eb03 0901 	add.w	r9, r3, r1
 802167a:	9401      	str	r4, [sp, #4]
 802167c:	f2c0 80c0 	blt.w	8021800 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8021680:	45a8      	cmp	r8, r5
 8021682:	f340 80bd 	ble.w	8021800 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8021686:	2f00      	cmp	r7, #0
 8021688:	f2c0 80b6 	blt.w	80217f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 802168c:	42be      	cmp	r6, r7
 802168e:	f340 80b3 	ble.w	80217f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8021692:	f813 c001 	ldrb.w	ip, [r3, r1]
 8021696:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802169a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802169e:	d019      	beq.n	80216d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 80216a0:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80216a4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80216a8:	435a      	muls	r2, r3
 80216aa:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80216ae:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80216b2:	fb0c f403 	mul.w	r4, ip, r3
 80216b6:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80216ba:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80216be:	441a      	add	r2, r3
 80216c0:	f104 0320 	add.w	r3, r4, #32
 80216c4:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80216c8:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80216cc:	0a1b      	lsrs	r3, r3, #8
 80216ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80216d2:	4319      	orrs	r1, r3
 80216d4:	b289      	uxth	r1, r1
 80216d6:	1c7b      	adds	r3, r7, #1
 80216d8:	f100 8097 	bmi.w	802180a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80216dc:	429e      	cmp	r6, r3
 80216de:	f340 8094 	ble.w	802180a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80216e2:	2800      	cmp	r0, #0
 80216e4:	f000 8094 	beq.w	8021810 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 80216e8:	f899 4001 	ldrb.w	r4, [r9, #1]
 80216ec:	9b01      	ldr	r3, [sp, #4]
 80216ee:	2cff      	cmp	r4, #255	; 0xff
 80216f0:	885b      	ldrh	r3, [r3, #2]
 80216f2:	d01b      	beq.n	802172c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 80216f4:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80216f8:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80216fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021700:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8021704:	fb0a f202 	mul.w	r2, sl, r2
 8021708:	fb04 fa03 	mul.w	sl, r4, r3
 802170c:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8021710:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8021714:	441a      	add	r2, r3
 8021716:	f10a 0320 	add.w	r3, sl, #32
 802171a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802171e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8021722:	0a1b      	lsrs	r3, r3, #8
 8021724:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021728:	ea4b 0303 	orr.w	r3, fp, r3
 802172c:	b29b      	uxth	r3, r3
 802172e:	3501      	adds	r5, #1
 8021730:	d474      	bmi.n	802181c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8021732:	45a8      	cmp	r8, r5
 8021734:	dd72      	ble.n	802181c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8021736:	f1be 0f00 	cmp.w	lr, #0
 802173a:	f000 8120 	beq.w	802197e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 802173e:	2f00      	cmp	r7, #0
 8021740:	db69      	blt.n	8021816 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8021742:	42be      	cmp	r6, r7
 8021744:	dd67      	ble.n	8021816 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8021746:	f819 5006 	ldrb.w	r5, [r9, r6]
 802174a:	9a01      	ldr	r2, [sp, #4]
 802174c:	2dff      	cmp	r5, #255	; 0xff
 802174e:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8021752:	d01c      	beq.n	802178e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8021754:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8021758:	ea4f 08e5 	mov.w	r8, r5, asr #3
 802175c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021760:	fb08 f802 	mul.w	r8, r8, r2
 8021764:	fb05 fa0b 	mul.w	sl, r5, fp
 8021768:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802176c:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8021770:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021774:	4490      	add	r8, r2
 8021776:	f10a 0220 	add.w	r2, sl, #32
 802177a:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 802177e:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8021782:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021786:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802178a:	ea4b 0b0a 	orr.w	fp, fp, sl
 802178e:	fa1f fb8b 	uxth.w	fp, fp
 8021792:	3701      	adds	r7, #1
 8021794:	d447      	bmi.n	8021826 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8021796:	42be      	cmp	r6, r7
 8021798:	dd45      	ble.n	8021826 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 802179a:	2800      	cmp	r0, #0
 802179c:	d046      	beq.n	802182c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 802179e:	3601      	adds	r6, #1
 80217a0:	9a01      	ldr	r2, [sp, #4]
 80217a2:	f819 7006 	ldrb.w	r7, [r9, r6]
 80217a6:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80217aa:	2fff      	cmp	r7, #255	; 0xff
 80217ac:	d01a      	beq.n	80217e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 80217ae:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80217b2:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80217b6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80217ba:	fb08 f806 	mul.w	r8, r8, r6
 80217be:	fb07 f902 	mul.w	r9, r7, r2
 80217c2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80217c6:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80217ca:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80217ce:	44b0      	add	r8, r6
 80217d0:	f109 0620 	add.w	r6, r9, #32
 80217d4:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80217d8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80217dc:	0a36      	lsrs	r6, r6, #8
 80217de:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80217e2:	4332      	orrs	r2, r6
 80217e4:	b292      	uxth	r2, r2
 80217e6:	280f      	cmp	r0, #15
 80217e8:	d922      	bls.n	8021830 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 80217ea:	4b69      	ldr	r3, [pc, #420]	; (8021990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 80217ec:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80217f0:	4a68      	ldr	r2, [pc, #416]	; (8021994 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 80217f2:	4869      	ldr	r0, [pc, #420]	; (8021998 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 80217f4:	f004 fa50 	bl	8025c98 <__assert_func>
 80217f8:	f04f 0c00 	mov.w	ip, #0
 80217fc:	4661      	mov	r1, ip
 80217fe:	e76a      	b.n	80216d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8021800:	2400      	movs	r4, #0
 8021802:	46a4      	mov	ip, r4
 8021804:	4623      	mov	r3, r4
 8021806:	4621      	mov	r1, r4
 8021808:	e791      	b.n	802172e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802180a:	2400      	movs	r4, #0
 802180c:	4623      	mov	r3, r4
 802180e:	e78e      	b.n	802172e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8021810:	4604      	mov	r4, r0
 8021812:	4603      	mov	r3, r0
 8021814:	e78b      	b.n	802172e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8021816:	2500      	movs	r5, #0
 8021818:	46ab      	mov	fp, r5
 802181a:	e7ba      	b.n	8021792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 802181c:	2700      	movs	r7, #0
 802181e:	463d      	mov	r5, r7
 8021820:	463a      	mov	r2, r7
 8021822:	46bb      	mov	fp, r7
 8021824:	e7df      	b.n	80217e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8021826:	2700      	movs	r7, #0
 8021828:	463a      	mov	r2, r7
 802182a:	e7dc      	b.n	80217e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 802182c:	4607      	mov	r7, r0
 802182e:	4602      	mov	r2, r0
 8021830:	f1be 0f0f 	cmp.w	lr, #15
 8021834:	d8d9      	bhi.n	80217ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8021836:	b286      	uxth	r6, r0
 8021838:	fa1f f98e 	uxth.w	r9, lr
 802183c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021840:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021844:	fb06 f809 	mul.w	r8, r6, r9
 8021848:	0136      	lsls	r6, r6, #4
 802184a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802184e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021852:	9601      	str	r6, [sp, #4]
 8021854:	ea4a 0101 	orr.w	r1, sl, r1
 8021858:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 802185c:	fa1f f689 	uxth.w	r6, r9
 8021860:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021864:	fb10 f90e 	smulbb	r9, r0, lr
 8021868:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802186c:	9602      	str	r6, [sp, #8]
 802186e:	460e      	mov	r6, r1
 8021870:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8021874:	f1ce 0110 	rsb	r1, lr, #16
 8021878:	ea4a 0303 	orr.w	r3, sl, r3
 802187c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021880:	1a09      	subs	r1, r1, r0
 8021882:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8021886:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802188a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802188e:	4343      	muls	r3, r0
 8021890:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8021894:	9801      	ldr	r0, [sp, #4]
 8021896:	ea4a 0202 	orr.w	r2, sl, r2
 802189a:	fb01 3106 	mla	r1, r1, r6, r3
 802189e:	9e02      	ldr	r6, [sp, #8]
 80218a0:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80218a4:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80218a8:	fb09 1302 	mla	r3, r9, r2, r1
 80218ac:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80218b0:	1b80      	subs	r0, r0, r6
 80218b2:	9e01      	ldr	r6, [sp, #4]
 80218b4:	9a03      	ldr	r2, [sp, #12]
 80218b6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80218ba:	eba6 0608 	sub.w	r6, r6, r8
 80218be:	b280      	uxth	r0, r0
 80218c0:	8811      	ldrh	r1, [r2, #0]
 80218c2:	ea4a 0b0b 	orr.w	fp, sl, fp
 80218c6:	b2b6      	uxth	r6, r6
 80218c8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80218cc:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80218d0:	4374      	muls	r4, r6
 80218d2:	b292      	uxth	r2, r2
 80218d4:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80218d8:	fb0c 4400 	mla	r4, ip, r0, r4
 80218dc:	9802      	ldr	r0, [sp, #8]
 80218de:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80218e2:	fb00 4505 	mla	r5, r0, r5, r4
 80218e6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80218ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80218ee:	1208      	asrs	r0, r1, #8
 80218f0:	fb08 5707 	mla	r7, r8, r7, r5
 80218f4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80218f8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80218fc:	10cd      	asrs	r5, r1, #3
 80218fe:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021902:	ea43 0e0e 	orr.w	lr, r3, lr
 8021906:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802190a:	4357      	muls	r7, r2
 802190c:	fa1f f38e 	uxth.w	r3, lr
 8021910:	f107 0801 	add.w	r8, r7, #1
 8021914:	121c      	asrs	r4, r3, #8
 8021916:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 802191a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802191e:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8021922:	b2ff      	uxtb	r7, r7
 8021924:	fb10 f007 	smulbb	r0, r0, r7
 8021928:	fb15 f507 	smulbb	r5, r5, r7
 802192c:	fb04 0402 	mla	r4, r4, r2, r0
 8021930:	10d8      	asrs	r0, r3, #3
 8021932:	00db      	lsls	r3, r3, #3
 8021934:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021938:	b2a4      	uxth	r4, r4
 802193a:	fb00 5002 	mla	r0, r0, r2, r5
 802193e:	b2dd      	uxtb	r5, r3
 8021940:	00cb      	lsls	r3, r1, #3
 8021942:	b280      	uxth	r0, r0
 8021944:	b2db      	uxtb	r3, r3
 8021946:	fb13 f307 	smulbb	r3, r3, r7
 802194a:	fb05 3202 	mla	r2, r5, r2, r3
 802194e:	1c63      	adds	r3, r4, #1
 8021950:	b292      	uxth	r2, r2
 8021952:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021956:	1c53      	adds	r3, r2, #1
 8021958:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802195c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021960:	1c42      	adds	r2, r0, #1
 8021962:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021966:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802196a:	9a03      	ldr	r2, [sp, #12]
 802196c:	0940      	lsrs	r0, r0, #5
 802196e:	4323      	orrs	r3, r4
 8021970:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021974:	4303      	orrs	r3, r0
 8021976:	8013      	strh	r3, [r2, #0]
 8021978:	b005      	add	sp, #20
 802197a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802197e:	280f      	cmp	r0, #15
 8021980:	f63f af33 	bhi.w	80217ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8021984:	4677      	mov	r7, lr
 8021986:	4675      	mov	r5, lr
 8021988:	4672      	mov	r2, lr
 802198a:	46f3      	mov	fp, lr
 802198c:	e753      	b.n	8021836 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 802198e:	bf00      	nop
 8021990:	0802a1f1 	.word	0x0802a1f1
 8021994:	0802a7be 	.word	0x0802a7be
 8021998:	0802a275 	.word	0x0802a275

0802199c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219a0:	ed2d 8b08 	vpush	{d8-d11}
 80219a4:	b097      	sub	sp, #92	; 0x5c
 80219a6:	eeb0 aa40 	vmov.f32	s20, s0
 80219aa:	eef0 9a60 	vmov.f32	s19, s1
 80219ae:	9214      	str	r2, [sp, #80]	; 0x50
 80219b0:	eeb0 9a41 	vmov.f32	s18, s2
 80219b4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80219b6:	eeb0 8a62 	vmov.f32	s16, s5
 80219ba:	9308      	str	r3, [sp, #32]
 80219bc:	eef0 8a43 	vmov.f32	s17, s6
 80219c0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80219c4:	eef0 ba44 	vmov.f32	s23, s8
 80219c8:	9015      	str	r0, [sp, #84]	; 0x54
 80219ca:	eeb0 ba64 	vmov.f32	s22, s9
 80219ce:	9312      	str	r3, [sp, #72]	; 0x48
 80219d0:	eef0 aa45 	vmov.f32	s21, s10
 80219d4:	6850      	ldr	r0, [r2, #4]
 80219d6:	9111      	str	r1, [sp, #68]	; 0x44
 80219d8:	6812      	ldr	r2, [r2, #0]
 80219da:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80219de:	fb00 1303 	mla	r3, r0, r3, r1
 80219e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80219e6:	9309      	str	r3, [sp, #36]	; 0x24
 80219e8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80219ea:	681b      	ldr	r3, [r3, #0]
 80219ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80219ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80219f0:	685b      	ldr	r3, [r3, #4]
 80219f2:	930c      	str	r3, [sp, #48]	; 0x30
 80219f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80219f8:	930a      	str	r3, [sp, #40]	; 0x28
 80219fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80219fc:	2b00      	cmp	r3, #0
 80219fe:	dc03      	bgt.n	8021a08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021a00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	f340 83cd 	ble.w	80221a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8021a08:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021a0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021a0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021a12:	1e48      	subs	r0, r1, #1
 8021a14:	1e55      	subs	r5, r2, #1
 8021a16:	9b08      	ldr	r3, [sp, #32]
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	f340 81a5 	ble.w	8021d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8021a1e:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8021a20:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021a22:	1436      	asrs	r6, r6, #16
 8021a24:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021a28:	d406      	bmi.n	8021a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021a2a:	4286      	cmp	r6, r0
 8021a2c:	da04      	bge.n	8021a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	db02      	blt.n	8021a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021a32:	42ab      	cmp	r3, r5
 8021a34:	f2c0 8199 	blt.w	8021d6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8021a38:	3601      	adds	r6, #1
 8021a3a:	f100 8186 	bmi.w	8021d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8021a3e:	42b1      	cmp	r1, r6
 8021a40:	f2c0 8183 	blt.w	8021d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8021a44:	3301      	adds	r3, #1
 8021a46:	f100 8180 	bmi.w	8021d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8021a4a:	429a      	cmp	r2, r3
 8021a4c:	f2c0 817d 	blt.w	8021d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8021a50:	9b08      	ldr	r3, [sp, #32]
 8021a52:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021a56:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021a58:	9313      	str	r3, [sp, #76]	; 0x4c
 8021a5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021a5c:	2b00      	cmp	r3, #0
 8021a5e:	f340 81a6 	ble.w	8021dae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8021a62:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021a64:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8021a66:	1418      	asrs	r0, r3, #16
 8021a68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021a6a:	142d      	asrs	r5, r5, #16
 8021a6c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021a70:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021a72:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021a76:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021a78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021a7c:	f100 81fa 	bmi.w	8021e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8021a80:	f102 3eff 	add.w	lr, r2, #4294967295
 8021a84:	4575      	cmp	r5, lr
 8021a86:	f280 81f5 	bge.w	8021e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8021a8a:	2800      	cmp	r0, #0
 8021a8c:	f2c0 81f2 	blt.w	8021e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8021a90:	f103 3eff 	add.w	lr, r3, #4294967295
 8021a94:	4570      	cmp	r0, lr
 8021a96:	f280 81ed 	bge.w	8021e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8021a9a:	b212      	sxth	r2, r2
 8021a9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a9e:	fa1f fe81 	uxth.w	lr, r1
 8021aa2:	fb00 5002 	mla	r0, r0, r2, r5
 8021aa6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021aaa:	eb03 0a00 	add.w	sl, r3, r0
 8021aae:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021ab2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021ab6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021aba:	b29b      	uxth	r3, r3
 8021abc:	f1bc 0f00 	cmp.w	ip, #0
 8021ac0:	f000 81bb 	beq.w	8021e3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021ac4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021ac8:	eb0a 0b02 	add.w	fp, sl, r2
 8021acc:	fa1f fa8c 	uxth.w	sl, ip
 8021ad0:	940d      	str	r4, [sp, #52]	; 0x34
 8021ad2:	fb0a fe0e 	mul.w	lr, sl, lr
 8021ad6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021ada:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021ade:	eba5 050e 	sub.w	r5, r5, lr
 8021ae2:	940e      	str	r4, [sp, #56]	; 0x38
 8021ae4:	fa1f fa8a 	uxth.w	sl, sl
 8021ae8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021aea:	b2ad      	uxth	r5, r5
 8021aec:	eba3 030a 	sub.w	r3, r3, sl
 8021af0:	fb08 f505 	mul.w	r5, r8, r5
 8021af4:	b29b      	uxth	r3, r3
 8021af6:	fb09 5303 	mla	r3, r9, r3, r5
 8021afa:	fb0a 3304 	mla	r3, sl, r4, r3
 8021afe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021b00:	fb0e 3304 	mla	r3, lr, r4, r3
 8021b04:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021b08:	2b00      	cmp	r3, #0
 8021b0a:	f000 8111 	beq.w	8021d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021b0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021b10:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021b14:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021b18:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021b1c:	f000 8192 	beq.w	8021e44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8021b20:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021b24:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021b28:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021b2c:	fb0a fe0e 	mul.w	lr, sl, lr
 8021b30:	fb09 f000 	mul.w	r0, r9, r0
 8021b34:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021b38:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021b3c:	f100 0b20 	add.w	fp, r0, #32
 8021b40:	44ce      	add	lr, r9
 8021b42:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021b46:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021b4a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021b4e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021b52:	ea4e 0909 	orr.w	r9, lr, r9
 8021b56:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021b5a:	8868      	ldrh	r0, [r5, #2]
 8021b5c:	d019      	beq.n	8021b92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8021b5e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021b62:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021b66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021b6a:	fb0a fe0e 	mul.w	lr, sl, lr
 8021b6e:	fb08 f800 	mul.w	r8, r8, r0
 8021b72:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021b76:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021b7a:	f108 0b20 	add.w	fp, r8, #32
 8021b7e:	4486      	add	lr, r0
 8021b80:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021b84:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021b88:	0a00      	lsrs	r0, r0, #8
 8021b8a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021b8e:	ea4e 0000 	orr.w	r0, lr, r0
 8021b92:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021b96:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021b9a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021b9e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021ba2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021ba6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021baa:	ea4e 0909 	orr.w	r9, lr, r9
 8021bae:	ea4a 0000 	orr.w	r0, sl, r0
 8021bb2:	f1bc 0f00 	cmp.w	ip, #0
 8021bb6:	f000 8147 	beq.w	8021e48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8021bba:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021bbe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021bc0:	3a01      	subs	r2, #1
 8021bc2:	2cff      	cmp	r4, #255	; 0xff
 8021bc4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021bc8:	f102 0202 	add.w	r2, r2, #2
 8021bcc:	eb05 0e02 	add.w	lr, r5, r2
 8021bd0:	5aaa      	ldrh	r2, [r5, r2]
 8021bd2:	d018      	beq.n	8021c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021bd4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021bd8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021bdc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021be0:	fb04 fa02 	mul.w	sl, r4, r2
 8021be4:	fb08 f805 	mul.w	r8, r8, r5
 8021be8:	f10a 0520 	add.w	r5, sl, #32
 8021bec:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021bf0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021bf4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021bf8:	4442      	add	r2, r8
 8021bfa:	0a2d      	lsrs	r5, r5, #8
 8021bfc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021c00:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021c04:	432a      	orrs	r2, r5
 8021c06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021c08:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021c0c:	2cff      	cmp	r4, #255	; 0xff
 8021c0e:	d01a      	beq.n	8021c46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8021c10:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021c14:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021c18:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021c1c:	fb04 fa05 	mul.w	sl, r4, r5
 8021c20:	fb08 f80e 	mul.w	r8, r8, lr
 8021c24:	f10a 0e20 	add.w	lr, sl, #32
 8021c28:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021c2c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021c30:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021c34:	4445      	add	r5, r8
 8021c36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021c3a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021c3e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021c42:	ea45 050e 	orr.w	r5, r5, lr
 8021c46:	fb1c fe01 	smulbb	lr, ip, r1
 8021c4a:	f1cc 0810 	rsb	r8, ip, #16
 8021c4e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021c52:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021c56:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021c5a:	eba8 0801 	sub.w	r8, r8, r1
 8021c5e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021c62:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021c66:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021c6a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021c6e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021c72:	ea4a 0202 	orr.w	r2, sl, r2
 8021c76:	4341      	muls	r1, r0
 8021c78:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021c7c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021c80:	fb09 1108 	mla	r1, r9, r8, r1
 8021c84:	ea4b 0505 	orr.w	r5, fp, r5
 8021c88:	fb0c 1102 	mla	r1, ip, r2, r1
 8021c8c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021c90:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021c94:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021c98:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021c9c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021ca0:	ea42 0e0e 	orr.w	lr, r2, lr
 8021ca4:	fa1f f28e 	uxth.w	r2, lr
 8021ca8:	2bff      	cmp	r3, #255	; 0xff
 8021caa:	d103      	bne.n	8021cb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021cac:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021cae:	29ff      	cmp	r1, #255	; 0xff
 8021cb0:	f000 80de 	beq.w	8021e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8021cb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021cb6:	1215      	asrs	r5, r2, #8
 8021cb8:	8838      	ldrh	r0, [r7, #0]
 8021cba:	434b      	muls	r3, r1
 8021cbc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021cc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021cc2:	f103 0c01 	add.w	ip, r3, #1
 8021cc6:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8021cca:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021cce:	fa5f fc83 	uxtb.w	ip, r3
 8021cd2:	1203      	asrs	r3, r0, #8
 8021cd4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021cd8:	fb13 f30c 	smulbb	r3, r3, ip
 8021cdc:	fb05 3501 	mla	r5, r5, r1, r3
 8021ce0:	10c3      	asrs	r3, r0, #3
 8021ce2:	10d1      	asrs	r1, r2, #3
 8021ce4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021ce8:	00d2      	lsls	r2, r2, #3
 8021cea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021cee:	b2ad      	uxth	r5, r5
 8021cf0:	fb13 f30c 	smulbb	r3, r3, ip
 8021cf4:	b2d2      	uxtb	r2, r2
 8021cf6:	fb01 3104 	mla	r1, r1, r4, r3
 8021cfa:	00c3      	lsls	r3, r0, #3
 8021cfc:	b2db      	uxtb	r3, r3
 8021cfe:	b289      	uxth	r1, r1
 8021d00:	fb13 f30c 	smulbb	r3, r3, ip
 8021d04:	fb02 3304 	mla	r3, r2, r4, r3
 8021d08:	b29a      	uxth	r2, r3
 8021d0a:	1c6b      	adds	r3, r5, #1
 8021d0c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021d10:	1c53      	adds	r3, r2, #1
 8021d12:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021d16:	1c4a      	adds	r2, r1, #1
 8021d18:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021d1c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021d20:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021d24:	0949      	lsrs	r1, r1, #5
 8021d26:	432b      	orrs	r3, r5
 8021d28:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021d2c:	430b      	orrs	r3, r1
 8021d2e:	803b      	strh	r3, [r7, #0]
 8021d30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021d32:	3702      	adds	r7, #2
 8021d34:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021d36:	4413      	add	r3, r2
 8021d38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021d3a:	9329      	str	r3, [sp, #164]	; 0xa4
 8021d3c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021d3e:	441a      	add	r2, r3
 8021d40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021d42:	3b01      	subs	r3, #1
 8021d44:	922a      	str	r2, [sp, #168]	; 0xa8
 8021d46:	9313      	str	r3, [sp, #76]	; 0x4c
 8021d48:	e687      	b.n	8021a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8021d4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021d4c:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8021d4e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8021d50:	4433      	add	r3, r6
 8021d52:	9329      	str	r3, [sp, #164]	; 0xa4
 8021d54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021d56:	441c      	add	r4, r3
 8021d58:	9b08      	ldr	r3, [sp, #32]
 8021d5a:	3b01      	subs	r3, #1
 8021d5c:	942a      	str	r4, [sp, #168]	; 0xa8
 8021d5e:	9308      	str	r3, [sp, #32]
 8021d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d62:	3302      	adds	r3, #2
 8021d64:	9309      	str	r3, [sp, #36]	; 0x24
 8021d66:	e656      	b.n	8021a16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021d68:	d028      	beq.n	8021dbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8021d6a:	9b08      	ldr	r3, [sp, #32]
 8021d6c:	982b      	ldr	r0, [sp, #172]	; 0xac
 8021d6e:	3b01      	subs	r3, #1
 8021d70:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8021d72:	fb00 5003 	mla	r0, r0, r3, r5
 8021d76:	1400      	asrs	r0, r0, #16
 8021d78:	f53f ae6a 	bmi.w	8021a50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021d7c:	3901      	subs	r1, #1
 8021d7e:	4288      	cmp	r0, r1
 8021d80:	f6bf ae66 	bge.w	8021a50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021d84:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8021d86:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8021d88:	fb01 0303 	mla	r3, r1, r3, r0
 8021d8c:	141b      	asrs	r3, r3, #16
 8021d8e:	f53f ae5f 	bmi.w	8021a50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021d92:	3a01      	subs	r2, #1
 8021d94:	4293      	cmp	r3, r2
 8021d96:	f6bf ae5b 	bge.w	8021a50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021d9a:	9b08      	ldr	r3, [sp, #32]
 8021d9c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021da0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021da4:	9313      	str	r3, [sp, #76]	; 0x4c
 8021da6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	f300 8082 	bgt.w	8021eb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8021dae:	9b08      	ldr	r3, [sp, #32]
 8021db0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021db6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021dba:	9309      	str	r3, [sp, #36]	; 0x24
 8021dbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021dbe:	2b00      	cmp	r3, #0
 8021dc0:	f340 81ef 	ble.w	80221a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8021dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021dc8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021dca:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021dce:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021dd2:	eef0 6a48 	vmov.f32	s13, s16
 8021dd6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021dda:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021dde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021de2:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021de6:	eef0 6a68 	vmov.f32	s13, s17
 8021dea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021dee:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8021df2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021df6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021dfa:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021dfe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021e02:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021e06:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021e0a:	ee18 2a10 	vmov	r2, s16
 8021e0e:	eeb0 8a47 	vmov.f32	s16, s14
 8021e12:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e16:	ee18 2a90 	vmov	r2, s17
 8021e1a:	932b      	str	r3, [sp, #172]	; 0xac
 8021e1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e1e:	eef0 8a67 	vmov.f32	s17, s15
 8021e22:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e26:	932c      	str	r3, [sp, #176]	; 0xb0
 8021e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021e2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e2c:	3b01      	subs	r3, #1
 8021e2e:	9311      	str	r3, [sp, #68]	; 0x44
 8021e30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e32:	bf08      	it	eq
 8021e34:	4613      	moveq	r3, r2
 8021e36:	9308      	str	r3, [sp, #32]
 8021e38:	e5df      	b.n	80219fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021e3a:	fb08 f505 	mul.w	r5, r8, r5
 8021e3e:	fb09 5303 	mla	r3, r9, r3, r5
 8021e42:	e65f      	b.n	8021b04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8021e44:	4681      	mov	r9, r0
 8021e46:	e686      	b.n	8021b56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021e48:	f1c1 0210 	rsb	r2, r1, #16
 8021e4c:	4341      	muls	r1, r0
 8021e4e:	fb09 1902 	mla	r9, r9, r2, r1
 8021e52:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021e56:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021e5a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021e5e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021e62:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021e66:	ea42 0909 	orr.w	r9, r2, r9
 8021e6a:	fa1f f289 	uxth.w	r2, r9
 8021e6e:	e71b      	b.n	8021ca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021e70:	803a      	strh	r2, [r7, #0]
 8021e72:	e75d      	b.n	8021d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021e74:	f115 0e01 	adds.w	lr, r5, #1
 8021e78:	f53f af5a 	bmi.w	8021d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021e7c:	4572      	cmp	r2, lr
 8021e7e:	f6ff af57 	blt.w	8021d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021e82:	f110 0e01 	adds.w	lr, r0, #1
 8021e86:	f53f af53 	bmi.w	8021d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021e8a:	4573      	cmp	r3, lr
 8021e8c:	f6ff af50 	blt.w	8021d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021e90:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e92:	b21b      	sxth	r3, r3
 8021e94:	b212      	sxth	r2, r2
 8021e96:	9502      	str	r5, [sp, #8]
 8021e98:	9301      	str	r3, [sp, #4]
 8021e9a:	9200      	str	r2, [sp, #0]
 8021e9c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8021ea0:	e9cd c405 	strd	ip, r4, [sp, #20]
 8021ea4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8021ea8:	4639      	mov	r1, r7
 8021eaa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021eac:	f7ff fbd0 	bl	8021650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8021eb0:	e73e      	b.n	8021d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021eb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021eb4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021eb8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021eba:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8021ebe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021ec0:	fa1f fc82 	uxth.w	ip, r2
 8021ec4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021ec8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021eca:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8021ece:	141f      	asrs	r7, r3, #16
 8021ed0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021ed2:	141b      	asrs	r3, r3, #16
 8021ed4:	fb01 3707 	mla	r7, r1, r7, r3
 8021ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021eda:	eb03 0a07 	add.w	sl, r3, r7
 8021ede:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021ee2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8021ee6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021eea:	b29b      	uxth	r3, r3
 8021eec:	2d00      	cmp	r5, #0
 8021eee:	f000 813d 	beq.w	802216c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8021ef2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8021ef6:	eb0a 0b01 	add.w	fp, sl, r1
 8021efa:	fa1f fa85 	uxth.w	sl, r5
 8021efe:	940f      	str	r4, [sp, #60]	; 0x3c
 8021f00:	fb0a fc0c 	mul.w	ip, sl, ip
 8021f04:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021f08:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8021f0c:	eba0 000c 	sub.w	r0, r0, ip
 8021f10:	9410      	str	r4, [sp, #64]	; 0x40
 8021f12:	fa1f fa8a 	uxth.w	sl, sl
 8021f16:	b280      	uxth	r0, r0
 8021f18:	eba3 030a 	sub.w	r3, r3, sl
 8021f1c:	fb08 f000 	mul.w	r0, r8, r0
 8021f20:	b29b      	uxth	r3, r3
 8021f22:	fb09 0303 	mla	r3, r9, r3, r0
 8021f26:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021f28:	fb0a 3300 	mla	r3, sl, r0, r3
 8021f2c:	fb0c 3304 	mla	r3, ip, r4, r3
 8021f30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	f000 810b 	beq.w	8022150 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8021f3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021f3c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021f40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f42:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8021f46:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8021f4a:	f000 8114 	beq.w	8022176 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8021f4e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021f52:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021f56:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021f5a:	fb0a fc0c 	mul.w	ip, sl, ip
 8021f5e:	fb09 f707 	mul.w	r7, r9, r7
 8021f62:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8021f66:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021f6a:	f107 0b20 	add.w	fp, r7, #32
 8021f6e:	44cc      	add	ip, r9
 8021f70:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8021f74:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021f78:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021f7c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021f80:	ea4c 0909 	orr.w	r9, ip, r9
 8021f84:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021f88:	8847      	ldrh	r7, [r0, #2]
 8021f8a:	d019      	beq.n	8021fc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8021f8c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021f90:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021f94:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021f98:	fb0a fc0c 	mul.w	ip, sl, ip
 8021f9c:	fb08 f807 	mul.w	r8, r8, r7
 8021fa0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021fa4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021fa8:	f108 0b20 	add.w	fp, r8, #32
 8021fac:	44bc      	add	ip, r7
 8021fae:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8021fb2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021fb6:	0a3f      	lsrs	r7, r7, #8
 8021fb8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021fbc:	ea4c 0707 	orr.w	r7, ip, r7
 8021fc0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8021fc4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021fc8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8021fcc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021fd0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021fd4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021fd8:	ea4c 0909 	orr.w	r9, ip, r9
 8021fdc:	ea4a 0707 	orr.w	r7, sl, r7
 8021fe0:	2d00      	cmp	r5, #0
 8021fe2:	f000 80ca 	beq.w	802217a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021fe6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8021fea:	3901      	subs	r1, #1
 8021fec:	0049      	lsls	r1, r1, #1
 8021fee:	3102      	adds	r1, #2
 8021ff0:	eb00 0c01 	add.w	ip, r0, r1
 8021ff4:	5a41      	ldrh	r1, [r0, r1]
 8021ff6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021ff8:	28ff      	cmp	r0, #255	; 0xff
 8021ffa:	d019      	beq.n	8022030 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8021ffc:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022000:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022002:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022006:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802200a:	fb04 fa01 	mul.w	sl, r4, r1
 802200e:	fb08 f800 	mul.w	r8, r8, r0
 8022012:	f10a 0020 	add.w	r0, sl, #32
 8022016:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802201a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802201e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022022:	4441      	add	r1, r8
 8022024:	0a00      	lsrs	r0, r0, #8
 8022026:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802202a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802202e:	4301      	orrs	r1, r0
 8022030:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022032:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022036:	2cff      	cmp	r4, #255	; 0xff
 8022038:	d01a      	beq.n	8022070 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 802203a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802203e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022042:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022046:	fb04 fa00 	mul.w	sl, r4, r0
 802204a:	fb08 f80c 	mul.w	r8, r8, ip
 802204e:	f10a 0c20 	add.w	ip, sl, #32
 8022052:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022056:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802205a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802205e:	4440      	add	r0, r8
 8022060:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022064:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022068:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802206c:	ea40 000c 	orr.w	r0, r0, ip
 8022070:	fb15 fc02 	smulbb	ip, r5, r2
 8022074:	f1c5 0810 	rsb	r8, r5, #16
 8022078:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802207c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022080:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022084:	eba8 0802 	sub.w	r8, r8, r2
 8022088:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802208c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022090:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022094:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022098:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802209c:	ea4a 0101 	orr.w	r1, sl, r1
 80220a0:	437a      	muls	r2, r7
 80220a2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80220a6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80220aa:	fb09 2208 	mla	r2, r9, r8, r2
 80220ae:	ea4b 0000 	orr.w	r0, fp, r0
 80220b2:	fb05 2201 	mla	r2, r5, r1, r2
 80220b6:	fb0c 2200 	mla	r2, ip, r0, r2
 80220ba:	0d57      	lsrs	r7, r2, #21
 80220bc:	0952      	lsrs	r2, r2, #5
 80220be:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80220c2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80220c6:	433a      	orrs	r2, r7
 80220c8:	2bff      	cmp	r3, #255	; 0xff
 80220ca:	b292      	uxth	r2, r2
 80220cc:	d102      	bne.n	80220d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 80220ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 80220d0:	29ff      	cmp	r1, #255	; 0xff
 80220d2:	d063      	beq.n	802219c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 80220d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80220d6:	1215      	asrs	r5, r2, #8
 80220d8:	f8be 1000 	ldrh.w	r1, [lr]
 80220dc:	4343      	muls	r3, r0
 80220de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80220e0:	10cf      	asrs	r7, r1, #3
 80220e2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80220e6:	1c58      	adds	r0, r3, #1
 80220e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80220ec:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80220f0:	1208      	asrs	r0, r1, #8
 80220f2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80220f6:	00c9      	lsls	r1, r1, #3
 80220f8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80220fc:	b2db      	uxtb	r3, r3
 80220fe:	b2c9      	uxtb	r1, r1
 8022100:	fb10 f003 	smulbb	r0, r0, r3
 8022104:	fb11 f103 	smulbb	r1, r1, r3
 8022108:	fb05 0504 	mla	r5, r5, r4, r0
 802210c:	10d0      	asrs	r0, r2, #3
 802210e:	fb17 f703 	smulbb	r7, r7, r3
 8022112:	00d2      	lsls	r2, r2, #3
 8022114:	b2ad      	uxth	r5, r5
 8022116:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802211a:	b2d2      	uxtb	r2, r2
 802211c:	fb00 7004 	mla	r0, r0, r4, r7
 8022120:	1c6b      	adds	r3, r5, #1
 8022122:	fb02 1204 	mla	r2, r2, r4, r1
 8022126:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802212a:	b292      	uxth	r2, r2
 802212c:	b280      	uxth	r0, r0
 802212e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022132:	1c57      	adds	r7, r2, #1
 8022134:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022138:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802213c:	433d      	orrs	r5, r7
 802213e:	1c47      	adds	r7, r0, #1
 8022140:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022144:	097f      	lsrs	r7, r7, #5
 8022146:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802214a:	433d      	orrs	r5, r7
 802214c:	f8ae 5000 	strh.w	r5, [lr]
 8022150:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022152:	f10e 0e02 	add.w	lr, lr, #2
 8022156:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022158:	4413      	add	r3, r2
 802215a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802215c:	9329      	str	r3, [sp, #164]	; 0xa4
 802215e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022160:	441a      	add	r2, r3
 8022162:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022164:	3b01      	subs	r3, #1
 8022166:	922a      	str	r2, [sp, #168]	; 0xa8
 8022168:	9313      	str	r3, [sp, #76]	; 0x4c
 802216a:	e61c      	b.n	8021da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802216c:	fb08 f000 	mul.w	r0, r8, r0
 8022170:	fb09 0303 	mla	r3, r9, r3, r0
 8022174:	e6dc      	b.n	8021f30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8022176:	46b9      	mov	r9, r7
 8022178:	e704      	b.n	8021f84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 802217a:	f1c2 0110 	rsb	r1, r2, #16
 802217e:	437a      	muls	r2, r7
 8022180:	fb09 2901 	mla	r9, r9, r1, r2
 8022184:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022188:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802218c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022190:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022194:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022198:	4302      	orrs	r2, r0
 802219a:	e795      	b.n	80220c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 802219c:	f8ae 2000 	strh.w	r2, [lr]
 80221a0:	e7d6      	b.n	8022150 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 80221a2:	b017      	add	sp, #92	; 0x5c
 80221a4:	ecbd 8b08 	vpop	{d8-d11}
 80221a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080221ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80221ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221b0:	b085      	sub	sp, #20
 80221b2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80221b6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80221ba:	9103      	str	r1, [sp, #12]
 80221bc:	2d00      	cmp	r5, #0
 80221be:	fb05 7106 	mla	r1, r5, r6, r7
 80221c2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80221c6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80221ca:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 80221ce:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80221d2:	eb02 0901 	add.w	r9, r2, r1
 80221d6:	9401      	str	r4, [sp, #4]
 80221d8:	f2c0 80c0 	blt.w	802235c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80221dc:	45a8      	cmp	r8, r5
 80221de:	f340 80bd 	ble.w	802235c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80221e2:	2f00      	cmp	r7, #0
 80221e4:	f2c0 80b6 	blt.w	8022354 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80221e8:	42be      	cmp	r6, r7
 80221ea:	f340 80b3 	ble.w	8022354 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80221ee:	f812 c001 	ldrb.w	ip, [r2, r1]
 80221f2:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80221f6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80221fa:	d019      	beq.n	8022230 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 80221fc:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8022200:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022204:	435a      	muls	r2, r3
 8022206:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 802220a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 802220e:	fb0c f403 	mul.w	r4, ip, r3
 8022212:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8022216:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802221a:	441a      	add	r2, r3
 802221c:	f104 0320 	add.w	r3, r4, #32
 8022220:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8022224:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8022228:	0a1b      	lsrs	r3, r3, #8
 802222a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802222e:	4319      	orrs	r1, r3
 8022230:	b289      	uxth	r1, r1
 8022232:	1c7b      	adds	r3, r7, #1
 8022234:	f100 8097 	bmi.w	8022366 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8022238:	429e      	cmp	r6, r3
 802223a:	f340 8094 	ble.w	8022366 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 802223e:	2800      	cmp	r0, #0
 8022240:	f000 8094 	beq.w	802236c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8022244:	f899 4001 	ldrb.w	r4, [r9, #1]
 8022248:	9b01      	ldr	r3, [sp, #4]
 802224a:	2cff      	cmp	r4, #255	; 0xff
 802224c:	885b      	ldrh	r3, [r3, #2]
 802224e:	d01b      	beq.n	8022288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8022250:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8022254:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8022258:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802225c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022260:	fb0a f202 	mul.w	r2, sl, r2
 8022264:	fb04 fa03 	mul.w	sl, r4, r3
 8022268:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 802226c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8022270:	441a      	add	r2, r3
 8022272:	f10a 0320 	add.w	r3, sl, #32
 8022276:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802227a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802227e:	0a1b      	lsrs	r3, r3, #8
 8022280:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022284:	ea4b 0303 	orr.w	r3, fp, r3
 8022288:	b29b      	uxth	r3, r3
 802228a:	3501      	adds	r5, #1
 802228c:	d474      	bmi.n	8022378 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802228e:	45a8      	cmp	r8, r5
 8022290:	dd72      	ble.n	8022378 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8022292:	f1be 0f00 	cmp.w	lr, #0
 8022296:	f000 8110 	beq.w	80224ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 802229a:	2f00      	cmp	r7, #0
 802229c:	db69      	blt.n	8022372 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802229e:	42be      	cmp	r6, r7
 80222a0:	dd67      	ble.n	8022372 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80222a2:	f819 5006 	ldrb.w	r5, [r9, r6]
 80222a6:	9a01      	ldr	r2, [sp, #4]
 80222a8:	2dff      	cmp	r5, #255	; 0xff
 80222aa:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80222ae:	d01c      	beq.n	80222ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 80222b0:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80222b4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80222b8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80222bc:	fb08 f802 	mul.w	r8, r8, r2
 80222c0:	fb05 fa0b 	mul.w	sl, r5, fp
 80222c4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80222c8:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80222cc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80222d0:	4490      	add	r8, r2
 80222d2:	f10a 0220 	add.w	r2, sl, #32
 80222d6:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80222da:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80222de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80222e2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80222e6:	ea4b 0b0a 	orr.w	fp, fp, sl
 80222ea:	fa1f fb8b 	uxth.w	fp, fp
 80222ee:	3701      	adds	r7, #1
 80222f0:	d447      	bmi.n	8022382 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80222f2:	42be      	cmp	r6, r7
 80222f4:	dd45      	ble.n	8022382 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80222f6:	2800      	cmp	r0, #0
 80222f8:	d046      	beq.n	8022388 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 80222fa:	3601      	adds	r6, #1
 80222fc:	9a01      	ldr	r2, [sp, #4]
 80222fe:	f819 7006 	ldrb.w	r7, [r9, r6]
 8022302:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8022306:	2fff      	cmp	r7, #255	; 0xff
 8022308:	d01a      	beq.n	8022340 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 802230a:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 802230e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8022312:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022316:	fb08 f806 	mul.w	r8, r8, r6
 802231a:	fb07 f902 	mul.w	r9, r7, r2
 802231e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8022322:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8022326:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802232a:	44b0      	add	r8, r6
 802232c:	f109 0620 	add.w	r6, r9, #32
 8022330:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8022334:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8022338:	0a36      	lsrs	r6, r6, #8
 802233a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802233e:	4332      	orrs	r2, r6
 8022340:	b292      	uxth	r2, r2
 8022342:	280f      	cmp	r0, #15
 8022344:	d922      	bls.n	802238c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8022346:	4b61      	ldr	r3, [pc, #388]	; (80224cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8022348:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802234c:	4a60      	ldr	r2, [pc, #384]	; (80224d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 802234e:	4861      	ldr	r0, [pc, #388]	; (80224d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8022350:	f003 fca2 	bl	8025c98 <__assert_func>
 8022354:	f04f 0c00 	mov.w	ip, #0
 8022358:	4661      	mov	r1, ip
 802235a:	e76a      	b.n	8022232 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802235c:	2400      	movs	r4, #0
 802235e:	46a4      	mov	ip, r4
 8022360:	4623      	mov	r3, r4
 8022362:	4621      	mov	r1, r4
 8022364:	e791      	b.n	802228a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8022366:	2400      	movs	r4, #0
 8022368:	4623      	mov	r3, r4
 802236a:	e78e      	b.n	802228a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802236c:	4604      	mov	r4, r0
 802236e:	4603      	mov	r3, r0
 8022370:	e78b      	b.n	802228a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8022372:	2500      	movs	r5, #0
 8022374:	46ab      	mov	fp, r5
 8022376:	e7ba      	b.n	80222ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8022378:	2700      	movs	r7, #0
 802237a:	463d      	mov	r5, r7
 802237c:	463a      	mov	r2, r7
 802237e:	46bb      	mov	fp, r7
 8022380:	e7df      	b.n	8022342 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8022382:	2700      	movs	r7, #0
 8022384:	463a      	mov	r2, r7
 8022386:	e7dc      	b.n	8022342 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8022388:	4607      	mov	r7, r0
 802238a:	4602      	mov	r2, r0
 802238c:	f1be 0f0f 	cmp.w	lr, #15
 8022390:	d8d9      	bhi.n	8022346 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8022392:	b286      	uxth	r6, r0
 8022394:	fa1f f98e 	uxth.w	r9, lr
 8022398:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802239c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80223a0:	fb06 f809 	mul.w	r8, r6, r9
 80223a4:	0136      	lsls	r6, r6, #4
 80223a6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80223aa:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80223ae:	9601      	str	r6, [sp, #4]
 80223b0:	ea4a 0101 	orr.w	r1, sl, r1
 80223b4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80223b8:	fa1f f689 	uxth.w	r6, r9
 80223bc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80223c0:	fb10 f90e 	smulbb	r9, r0, lr
 80223c4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80223c8:	9602      	str	r6, [sp, #8]
 80223ca:	460e      	mov	r6, r1
 80223cc:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80223d0:	f1ce 0110 	rsb	r1, lr, #16
 80223d4:	ea4a 0303 	orr.w	r3, sl, r3
 80223d8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80223dc:	1a09      	subs	r1, r1, r0
 80223de:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80223e2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80223e6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80223ea:	4343      	muls	r3, r0
 80223ec:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80223f0:	ea4a 0202 	orr.w	r2, sl, r2
 80223f4:	9802      	ldr	r0, [sp, #8]
 80223f6:	fb01 3106 	mla	r1, r1, r6, r3
 80223fa:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80223fe:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022402:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8022406:	fb09 1302 	mla	r3, r9, r2, r1
 802240a:	9a03      	ldr	r2, [sp, #12]
 802240c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022410:	8811      	ldrh	r1, [r2, #0]
 8022412:	9a01      	ldr	r2, [sp, #4]
 8022414:	ea4a 0b0b 	orr.w	fp, sl, fp
 8022418:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802241c:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8022420:	1a12      	subs	r2, r2, r0
 8022422:	9801      	ldr	r0, [sp, #4]
 8022424:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8022428:	eba0 0608 	sub.w	r6, r0, r8
 802242c:	b292      	uxth	r2, r2
 802242e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022432:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022436:	b2b6      	uxth	r6, r6
 8022438:	10c8      	asrs	r0, r1, #3
 802243a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802243e:	4374      	muls	r4, r6
 8022440:	ea43 0e0e 	orr.w	lr, r3, lr
 8022444:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022448:	fb0c 4402 	mla	r4, ip, r2, r4
 802244c:	9a02      	ldr	r2, [sp, #8]
 802244e:	fa1f f38e 	uxth.w	r3, lr
 8022452:	fb02 4505 	mla	r5, r2, r5, r4
 8022456:	120a      	asrs	r2, r1, #8
 8022458:	00c9      	lsls	r1, r1, #3
 802245a:	fb08 5707 	mla	r7, r8, r7, r5
 802245e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022462:	b2c9      	uxtb	r1, r1
 8022464:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8022468:	b2ff      	uxtb	r7, r7
 802246a:	437a      	muls	r2, r7
 802246c:	4378      	muls	r0, r7
 802246e:	434f      	muls	r7, r1
 8022470:	1c51      	adds	r1, r2, #1
 8022472:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8022476:	121a      	asrs	r2, r3, #8
 8022478:	f022 0207 	bic.w	r2, r2, #7
 802247c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8022480:	1c41      	adds	r1, r0, #1
 8022482:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022486:	10d9      	asrs	r1, r3, #3
 8022488:	0212      	lsls	r2, r2, #8
 802248a:	f021 0103 	bic.w	r1, r1, #3
 802248e:	00db      	lsls	r3, r3, #3
 8022490:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8022494:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022498:	00c9      	lsls	r1, r1, #3
 802249a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802249e:	430a      	orrs	r2, r1
 80224a0:	1c79      	adds	r1, r7, #1
 80224a2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80224a6:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80224aa:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80224ae:	4313      	orrs	r3, r2
 80224b0:	9a03      	ldr	r2, [sp, #12]
 80224b2:	8013      	strh	r3, [r2, #0]
 80224b4:	b005      	add	sp, #20
 80224b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224ba:	280f      	cmp	r0, #15
 80224bc:	f63f af43 	bhi.w	8022346 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80224c0:	4677      	mov	r7, lr
 80224c2:	4675      	mov	r5, lr
 80224c4:	4672      	mov	r2, lr
 80224c6:	46f3      	mov	fp, lr
 80224c8:	e763      	b.n	8022392 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 80224ca:	bf00      	nop
 80224cc:	0802a1f1 	.word	0x0802a1f1
 80224d0:	0802a7be 	.word	0x0802a7be
 80224d4:	0802a275 	.word	0x0802a275

080224d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80224d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224dc:	ed2d 8b08 	vpush	{d8-d11}
 80224e0:	b093      	sub	sp, #76	; 0x4c
 80224e2:	eeb0 aa40 	vmov.f32	s20, s0
 80224e6:	eef0 9a60 	vmov.f32	s19, s1
 80224ea:	9210      	str	r2, [sp, #64]	; 0x40
 80224ec:	eeb0 9a41 	vmov.f32	s18, s2
 80224f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80224f2:	eeb0 8a62 	vmov.f32	s16, s5
 80224f6:	9011      	str	r0, [sp, #68]	; 0x44
 80224f8:	eef0 8a43 	vmov.f32	s17, s6
 80224fc:	6850      	ldr	r0, [r2, #4]
 80224fe:	eef0 ba44 	vmov.f32	s23, s8
 8022502:	910e      	str	r1, [sp, #56]	; 0x38
 8022504:	eeb0 ba64 	vmov.f32	s22, s9
 8022508:	9306      	str	r3, [sp, #24]
 802250a:	eef0 aa45 	vmov.f32	s21, s10
 802250e:	6812      	ldr	r2, [r2, #0]
 8022510:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8022514:	fb00 1303 	mla	r3, r0, r3, r1
 8022518:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802251c:	9307      	str	r3, [sp, #28]
 802251e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022520:	681b      	ldr	r3, [r3, #0]
 8022522:	9308      	str	r3, [sp, #32]
 8022524:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022526:	685b      	ldr	r3, [r3, #4]
 8022528:	9309      	str	r3, [sp, #36]	; 0x24
 802252a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802252c:	2b00      	cmp	r3, #0
 802252e:	dc03      	bgt.n	8022538 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022530:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022532:	2b00      	cmp	r3, #0
 8022534:	f340 83b6 	ble.w	8022ca4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8022538:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802253a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802253e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022542:	1e48      	subs	r0, r1, #1
 8022544:	1e55      	subs	r5, r2, #1
 8022546:	9b06      	ldr	r3, [sp, #24]
 8022548:	2b00      	cmp	r3, #0
 802254a:	f340 8165 	ble.w	8022818 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802254e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8022550:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022552:	1436      	asrs	r6, r6, #16
 8022554:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022558:	d406      	bmi.n	8022568 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802255a:	4286      	cmp	r6, r0
 802255c:	da04      	bge.n	8022568 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802255e:	2b00      	cmp	r3, #0
 8022560:	db02      	blt.n	8022568 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022562:	42ab      	cmp	r3, r5
 8022564:	f2c0 8159 	blt.w	802281a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022568:	3601      	adds	r6, #1
 802256a:	f100 8146 	bmi.w	80227fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802256e:	42b1      	cmp	r1, r6
 8022570:	f2c0 8143 	blt.w	80227fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022574:	3301      	adds	r3, #1
 8022576:	f100 8140 	bmi.w	80227fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802257a:	429a      	cmp	r2, r3
 802257c:	f2c0 813d 	blt.w	80227fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022580:	9b06      	ldr	r3, [sp, #24]
 8022582:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022586:	9f07      	ldr	r7, [sp, #28]
 8022588:	930f      	str	r3, [sp, #60]	; 0x3c
 802258a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802258c:	2b00      	cmp	r3, #0
 802258e:	f340 8166 	ble.w	802285e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8022592:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022594:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8022596:	1418      	asrs	r0, r3, #16
 8022598:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802259a:	142d      	asrs	r5, r5, #16
 802259c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80225a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80225a2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80225a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80225a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80225ac:	f100 81f0 	bmi.w	8022990 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80225b0:	f102 3eff 	add.w	lr, r2, #4294967295
 80225b4:	4575      	cmp	r5, lr
 80225b6:	f280 81eb 	bge.w	8022990 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80225ba:	2800      	cmp	r0, #0
 80225bc:	f2c0 81e8 	blt.w	8022990 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80225c0:	f103 3eff 	add.w	lr, r3, #4294967295
 80225c4:	4570      	cmp	r0, lr
 80225c6:	f280 81e3 	bge.w	8022990 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80225ca:	b212      	sxth	r2, r2
 80225cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225ce:	fa1f fe81 	uxth.w	lr, r1
 80225d2:	fb00 5002 	mla	r0, r0, r2, r5
 80225d6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80225da:	eb03 0a00 	add.w	sl, r3, r0
 80225de:	f813 9000 	ldrb.w	r9, [r3, r0]
 80225e2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80225e6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80225ea:	b29b      	uxth	r3, r3
 80225ec:	f1bc 0f00 	cmp.w	ip, #0
 80225f0:	f000 817b 	beq.w	80228ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80225f4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80225f8:	eb0a 0b02 	add.w	fp, sl, r2
 80225fc:	fa1f fa8c 	uxth.w	sl, ip
 8022600:	940a      	str	r4, [sp, #40]	; 0x28
 8022602:	fb0a fe0e 	mul.w	lr, sl, lr
 8022606:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802260a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802260e:	eba5 050e 	sub.w	r5, r5, lr
 8022612:	940b      	str	r4, [sp, #44]	; 0x2c
 8022614:	fa1f fa8a 	uxth.w	sl, sl
 8022618:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802261a:	b2ad      	uxth	r5, r5
 802261c:	eba3 030a 	sub.w	r3, r3, sl
 8022620:	fb08 f505 	mul.w	r5, r8, r5
 8022624:	b29b      	uxth	r3, r3
 8022626:	fb09 5303 	mla	r3, r9, r3, r5
 802262a:	fb0a 3304 	mla	r3, sl, r4, r3
 802262e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022630:	fb0e 3304 	mla	r3, lr, r4, r3
 8022634:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022638:	2b00      	cmp	r3, #0
 802263a:	f000 80d1 	beq.w	80227e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802263e:	9c08      	ldr	r4, [sp, #32]
 8022640:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022644:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8022648:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802264c:	f000 8152 	beq.w	80228f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8022650:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022654:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022658:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802265c:	fb0a fe0e 	mul.w	lr, sl, lr
 8022660:	fb09 f000 	mul.w	r0, r9, r0
 8022664:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8022668:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802266c:	f100 0b20 	add.w	fp, r0, #32
 8022670:	44ce      	add	lr, r9
 8022672:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8022676:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802267a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802267e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022682:	ea4e 0909 	orr.w	r9, lr, r9
 8022686:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802268a:	8868      	ldrh	r0, [r5, #2]
 802268c:	d019      	beq.n	80226c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802268e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022692:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022696:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802269a:	fb0a fe0e 	mul.w	lr, sl, lr
 802269e:	fb08 f800 	mul.w	r8, r8, r0
 80226a2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80226a6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80226aa:	f108 0b20 	add.w	fp, r8, #32
 80226ae:	4486      	add	lr, r0
 80226b0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80226b4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80226b8:	0a00      	lsrs	r0, r0, #8
 80226ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80226be:	ea4e 0000 	orr.w	r0, lr, r0
 80226c2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80226c6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80226ca:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80226ce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80226d2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80226d6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80226da:	ea4e 0909 	orr.w	r9, lr, r9
 80226de:	ea4a 0000 	orr.w	r0, sl, r0
 80226e2:	f1bc 0f00 	cmp.w	ip, #0
 80226e6:	f000 8107 	beq.w	80228f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80226ea:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80226ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80226f0:	3a01      	subs	r2, #1
 80226f2:	2cff      	cmp	r4, #255	; 0xff
 80226f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80226f8:	f102 0202 	add.w	r2, r2, #2
 80226fc:	eb05 0e02 	add.w	lr, r5, r2
 8022700:	5aaa      	ldrh	r2, [r5, r2]
 8022702:	d018      	beq.n	8022736 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022704:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8022708:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802270c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022710:	fb04 fa02 	mul.w	sl, r4, r2
 8022714:	fb08 f805 	mul.w	r8, r8, r5
 8022718:	f10a 0520 	add.w	r5, sl, #32
 802271c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8022720:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022724:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8022728:	4442      	add	r2, r8
 802272a:	0a2d      	lsrs	r5, r5, #8
 802272c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8022730:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022734:	432a      	orrs	r2, r5
 8022736:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022738:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802273c:	2cff      	cmp	r4, #255	; 0xff
 802273e:	d01a      	beq.n	8022776 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8022740:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8022744:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022748:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802274c:	fb04 fa05 	mul.w	sl, r4, r5
 8022750:	fb08 f80e 	mul.w	r8, r8, lr
 8022754:	f10a 0e20 	add.w	lr, sl, #32
 8022758:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802275c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022760:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8022764:	4445      	add	r5, r8
 8022766:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802276a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802276e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8022772:	ea45 050e 	orr.w	r5, r5, lr
 8022776:	fb1c fe01 	smulbb	lr, ip, r1
 802277a:	f1cc 0810 	rsb	r8, ip, #16
 802277e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022782:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022786:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802278a:	eba8 0801 	sub.w	r8, r8, r1
 802278e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022792:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022796:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802279a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802279e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80227a2:	ea4a 0202 	orr.w	r2, sl, r2
 80227a6:	4341      	muls	r1, r0
 80227a8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80227ac:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80227b0:	fb09 1108 	mla	r1, r9, r8, r1
 80227b4:	ea4b 0505 	orr.w	r5, fp, r5
 80227b8:	fb0c 1102 	mla	r1, ip, r2, r1
 80227bc:	fb0e 1e05 	mla	lr, lr, r5, r1
 80227c0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80227c4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80227c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80227cc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80227d0:	ea42 0e0e 	orr.w	lr, r2, lr
 80227d4:	fa1f f28e 	uxth.w	r2, lr
 80227d8:	2bff      	cmp	r3, #255	; 0xff
 80227da:	f040 80a1 	bne.w	8022920 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 80227de:	803a      	strh	r2, [r7, #0]
 80227e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80227e2:	3702      	adds	r7, #2
 80227e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80227e6:	4413      	add	r3, r2
 80227e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80227ea:	9325      	str	r3, [sp, #148]	; 0x94
 80227ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80227ee:	441a      	add	r2, r3
 80227f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80227f2:	3b01      	subs	r3, #1
 80227f4:	9226      	str	r2, [sp, #152]	; 0x98
 80227f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80227f8:	e6c7      	b.n	802258a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80227fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80227fc:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80227fe:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8022800:	4433      	add	r3, r6
 8022802:	9325      	str	r3, [sp, #148]	; 0x94
 8022804:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022806:	441c      	add	r4, r3
 8022808:	9b06      	ldr	r3, [sp, #24]
 802280a:	3b01      	subs	r3, #1
 802280c:	9426      	str	r4, [sp, #152]	; 0x98
 802280e:	9306      	str	r3, [sp, #24]
 8022810:	9b07      	ldr	r3, [sp, #28]
 8022812:	3302      	adds	r3, #2
 8022814:	9307      	str	r3, [sp, #28]
 8022816:	e696      	b.n	8022546 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022818:	d028      	beq.n	802286c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802281a:	9b06      	ldr	r3, [sp, #24]
 802281c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802281e:	3b01      	subs	r3, #1
 8022820:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8022822:	fb00 5003 	mla	r0, r0, r3, r5
 8022826:	1400      	asrs	r0, r0, #16
 8022828:	f53f aeaa 	bmi.w	8022580 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802282c:	3901      	subs	r1, #1
 802282e:	4288      	cmp	r0, r1
 8022830:	f6bf aea6 	bge.w	8022580 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022834:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022836:	9826      	ldr	r0, [sp, #152]	; 0x98
 8022838:	fb01 0303 	mla	r3, r1, r3, r0
 802283c:	141b      	asrs	r3, r3, #16
 802283e:	f53f ae9f 	bmi.w	8022580 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022842:	3a01      	subs	r2, #1
 8022844:	4293      	cmp	r3, r2
 8022846:	f6bf ae9b 	bge.w	8022580 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802284a:	9b06      	ldr	r3, [sp, #24]
 802284c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022850:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022854:	930f      	str	r3, [sp, #60]	; 0x3c
 8022856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022858:	2b00      	cmp	r3, #0
 802285a:	f300 80b6 	bgt.w	80229ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802285e:	9b06      	ldr	r3, [sp, #24]
 8022860:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022864:	9b07      	ldr	r3, [sp, #28]
 8022866:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802286a:	9307      	str	r3, [sp, #28]
 802286c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802286e:	2b00      	cmp	r3, #0
 8022870:	f340 8218 	ble.w	8022ca4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8022874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022878:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802287a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802287e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022882:	eef0 6a48 	vmov.f32	s13, s16
 8022886:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802288a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802288e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022892:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8022896:	eef0 6a68 	vmov.f32	s13, s17
 802289a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802289e:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80228a2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80228a6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80228aa:	ee37 8a48 	vsub.f32	s16, s14, s16
 80228ae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80228b2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80228b6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80228ba:	ee18 2a10 	vmov	r2, s16
 80228be:	eeb0 8a47 	vmov.f32	s16, s14
 80228c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80228c6:	ee18 2a90 	vmov	r2, s17
 80228ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80228cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228ce:	eef0 8a67 	vmov.f32	s17, s15
 80228d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80228d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80228d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80228da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80228dc:	3b01      	subs	r3, #1
 80228de:	930e      	str	r3, [sp, #56]	; 0x38
 80228e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228e2:	bf08      	it	eq
 80228e4:	4613      	moveq	r3, r2
 80228e6:	9306      	str	r3, [sp, #24]
 80228e8:	e61f      	b.n	802252a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80228ea:	fb08 f505 	mul.w	r5, r8, r5
 80228ee:	fb09 5303 	mla	r3, r9, r3, r5
 80228f2:	e69f      	b.n	8022634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80228f4:	4681      	mov	r9, r0
 80228f6:	e6c6      	b.n	8022686 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80228f8:	f1c1 0210 	rsb	r2, r1, #16
 80228fc:	4341      	muls	r1, r0
 80228fe:	fb09 1902 	mla	r9, r9, r2, r1
 8022902:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022906:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802290a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802290e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022912:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022916:	ea42 0909 	orr.w	r9, r2, r9
 802291a:	fa1f f289 	uxth.w	r2, r9
 802291e:	e75b      	b.n	80227d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022920:	f8b7 c000 	ldrh.w	ip, [r7]
 8022924:	43db      	mvns	r3, r3
 8022926:	ea4f 202c 	mov.w	r0, ip, asr #8
 802292a:	fa5f fe83 	uxtb.w	lr, r3
 802292e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022932:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022936:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802293a:	fb00 f00e 	mul.w	r0, r0, lr
 802293e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022942:	b2db      	uxtb	r3, r3
 8022944:	1c41      	adds	r1, r0, #1
 8022946:	fb05 f50e 	mul.w	r5, r5, lr
 802294a:	fb03 f30e 	mul.w	r3, r3, lr
 802294e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022952:	1211      	asrs	r1, r2, #8
 8022954:	f021 0107 	bic.w	r1, r1, #7
 8022958:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802295c:	48d4      	ldr	r0, [pc, #848]	; (8022cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 802295e:	b2c9      	uxtb	r1, r1
 8022960:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8022964:	1c69      	adds	r1, r5, #1
 8022966:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802296a:	10d1      	asrs	r1, r2, #3
 802296c:	00d2      	lsls	r2, r2, #3
 802296e:	f021 0103 	bic.w	r1, r1, #3
 8022972:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022976:	00c9      	lsls	r1, r1, #3
 8022978:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802297c:	4301      	orrs	r1, r0
 802297e:	1c58      	adds	r0, r3, #1
 8022980:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022984:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022988:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802298c:	430a      	orrs	r2, r1
 802298e:	e726      	b.n	80227de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022990:	f115 0e01 	adds.w	lr, r5, #1
 8022994:	f53f af24 	bmi.w	80227e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8022998:	4572      	cmp	r2, lr
 802299a:	f6ff af21 	blt.w	80227e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802299e:	f110 0e01 	adds.w	lr, r0, #1
 80229a2:	f53f af1d 	bmi.w	80227e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80229a6:	4573      	cmp	r3, lr
 80229a8:	f6ff af1a 	blt.w	80227e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80229ac:	b21b      	sxth	r3, r3
 80229ae:	b212      	sxth	r2, r2
 80229b0:	9301      	str	r3, [sp, #4]
 80229b2:	9200      	str	r2, [sp, #0]
 80229b4:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80229b8:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80229bc:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80229c0:	4639      	mov	r1, r7
 80229c2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80229c4:	f7ff fbf2 	bl	80221ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80229c8:	e70a      	b.n	80227e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80229ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80229cc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80229d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80229d2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80229d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80229d8:	fa1f fc82 	uxth.w	ip, r2
 80229dc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80229e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80229e2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80229e6:	141f      	asrs	r7, r3, #16
 80229e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80229ea:	141b      	asrs	r3, r3, #16
 80229ec:	fb01 3707 	mla	r7, r1, r7, r3
 80229f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229f2:	eb03 0a07 	add.w	sl, r3, r7
 80229f6:	f813 9007 	ldrb.w	r9, [r3, r7]
 80229fa:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80229fe:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022a02:	b29b      	uxth	r3, r3
 8022a04:	2d00      	cmp	r5, #0
 8022a06:	f000 80fe 	beq.w	8022c06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8022a0a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8022a0e:	eb0a 0b01 	add.w	fp, sl, r1
 8022a12:	fa1f fa85 	uxth.w	sl, r5
 8022a16:	940c      	str	r4, [sp, #48]	; 0x30
 8022a18:	fb0a fc0c 	mul.w	ip, sl, ip
 8022a1c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022a20:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022a24:	eba0 000c 	sub.w	r0, r0, ip
 8022a28:	940d      	str	r4, [sp, #52]	; 0x34
 8022a2a:	fa1f fa8a 	uxth.w	sl, sl
 8022a2e:	b280      	uxth	r0, r0
 8022a30:	eba3 030a 	sub.w	r3, r3, sl
 8022a34:	fb08 f000 	mul.w	r0, r8, r0
 8022a38:	b29b      	uxth	r3, r3
 8022a3a:	fb09 0303 	mla	r3, r9, r3, r0
 8022a3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022a40:	fb0a 3300 	mla	r3, sl, r0, r3
 8022a44:	fb0c 3304 	mla	r3, ip, r4, r3
 8022a48:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022a4c:	2b00      	cmp	r3, #0
 8022a4e:	f000 80cc 	beq.w	8022bea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8022a52:	9808      	ldr	r0, [sp, #32]
 8022a54:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022a58:	9c08      	ldr	r4, [sp, #32]
 8022a5a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022a5e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022a62:	f000 80d5 	beq.w	8022c10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8022a66:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022a6a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022a6e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022a72:	fb0a fc0c 	mul.w	ip, sl, ip
 8022a76:	fb09 f707 	mul.w	r7, r9, r7
 8022a7a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8022a7e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022a82:	f107 0b20 	add.w	fp, r7, #32
 8022a86:	44cc      	add	ip, r9
 8022a88:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022a8c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022a90:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022a94:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022a98:	ea4c 0909 	orr.w	r9, ip, r9
 8022a9c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022aa0:	8847      	ldrh	r7, [r0, #2]
 8022aa2:	d019      	beq.n	8022ad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8022aa4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022aa8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022aac:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022ab0:	fb0a fc0c 	mul.w	ip, sl, ip
 8022ab4:	fb08 f807 	mul.w	r8, r8, r7
 8022ab8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022abc:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022ac0:	f108 0b20 	add.w	fp, r8, #32
 8022ac4:	44bc      	add	ip, r7
 8022ac6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022aca:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022ace:	0a3f      	lsrs	r7, r7, #8
 8022ad0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022ad4:	ea4c 0707 	orr.w	r7, ip, r7
 8022ad8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022adc:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022ae0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022ae4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022ae8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022aec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022af0:	ea4c 0909 	orr.w	r9, ip, r9
 8022af4:	ea4a 0707 	orr.w	r7, sl, r7
 8022af8:	2d00      	cmp	r5, #0
 8022afa:	f000 808b 	beq.w	8022c14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8022afe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022b02:	3901      	subs	r1, #1
 8022b04:	0049      	lsls	r1, r1, #1
 8022b06:	3102      	adds	r1, #2
 8022b08:	eb00 0c01 	add.w	ip, r0, r1
 8022b0c:	5a41      	ldrh	r1, [r0, r1]
 8022b0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022b10:	28ff      	cmp	r0, #255	; 0xff
 8022b12:	d019      	beq.n	8022b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8022b14:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022b18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022b1a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022b1e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022b22:	fb04 fa01 	mul.w	sl, r4, r1
 8022b26:	fb08 f800 	mul.w	r8, r8, r0
 8022b2a:	f10a 0020 	add.w	r0, sl, #32
 8022b2e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022b32:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022b36:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022b3a:	4441      	add	r1, r8
 8022b3c:	0a00      	lsrs	r0, r0, #8
 8022b3e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022b42:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022b46:	4301      	orrs	r1, r0
 8022b48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022b4a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022b4e:	2cff      	cmp	r4, #255	; 0xff
 8022b50:	d01a      	beq.n	8022b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8022b52:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022b56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022b5a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022b5e:	fb04 fa00 	mul.w	sl, r4, r0
 8022b62:	fb08 f80c 	mul.w	r8, r8, ip
 8022b66:	f10a 0c20 	add.w	ip, sl, #32
 8022b6a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022b6e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022b72:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022b76:	4440      	add	r0, r8
 8022b78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b7c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022b80:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022b84:	ea40 000c 	orr.w	r0, r0, ip
 8022b88:	fb15 fc02 	smulbb	ip, r5, r2
 8022b8c:	f1c5 0810 	rsb	r8, r5, #16
 8022b90:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022b94:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022b98:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022b9c:	eba8 0802 	sub.w	r8, r8, r2
 8022ba0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022ba4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022ba8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022bac:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022bb0:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022bb4:	ea4a 0101 	orr.w	r1, sl, r1
 8022bb8:	437a      	muls	r2, r7
 8022bba:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022bbe:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022bc2:	fb09 2208 	mla	r2, r9, r8, r2
 8022bc6:	ea4b 0000 	orr.w	r0, fp, r0
 8022bca:	fb05 2201 	mla	r2, r5, r1, r2
 8022bce:	fb0c 2200 	mla	r2, ip, r0, r2
 8022bd2:	0d57      	lsrs	r7, r2, #21
 8022bd4:	0952      	lsrs	r2, r2, #5
 8022bd6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022bda:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022bde:	433a      	orrs	r2, r7
 8022be0:	2bff      	cmp	r3, #255	; 0xff
 8022be2:	b292      	uxth	r2, r2
 8022be4:	d127      	bne.n	8022c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8022be6:	f8ae 2000 	strh.w	r2, [lr]
 8022bea:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022bec:	f10e 0e02 	add.w	lr, lr, #2
 8022bf0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022bf2:	4413      	add	r3, r2
 8022bf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022bf6:	9325      	str	r3, [sp, #148]	; 0x94
 8022bf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022bfa:	441a      	add	r2, r3
 8022bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022bfe:	3b01      	subs	r3, #1
 8022c00:	9226      	str	r2, [sp, #152]	; 0x98
 8022c02:	930f      	str	r3, [sp, #60]	; 0x3c
 8022c04:	e627      	b.n	8022856 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8022c06:	fb08 f000 	mul.w	r0, r8, r0
 8022c0a:	fb09 0303 	mla	r3, r9, r3, r0
 8022c0e:	e71b      	b.n	8022a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8022c10:	46b9      	mov	r9, r7
 8022c12:	e743      	b.n	8022a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8022c14:	f1c2 0110 	rsb	r1, r2, #16
 8022c18:	437a      	muls	r2, r7
 8022c1a:	fb09 2901 	mla	r9, r9, r1, r2
 8022c1e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022c22:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022c26:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022c2a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022c2e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022c32:	4302      	orrs	r2, r0
 8022c34:	e7d4      	b.n	8022be0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8022c36:	f8be 7000 	ldrh.w	r7, [lr]
 8022c3a:	43db      	mvns	r3, r3
 8022c3c:	4c1c      	ldr	r4, [pc, #112]	; (8022cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8022c3e:	1238      	asrs	r0, r7, #8
 8022c40:	fa5f fc83 	uxtb.w	ip, r3
 8022c44:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022c48:	10fd      	asrs	r5, r7, #3
 8022c4a:	00fb      	lsls	r3, r7, #3
 8022c4c:	fb00 f00c 	mul.w	r0, r0, ip
 8022c50:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022c54:	b2db      	uxtb	r3, r3
 8022c56:	fb05 f10c 	mul.w	r1, r5, ip
 8022c5a:	1c45      	adds	r5, r0, #1
 8022c5c:	fb03 f30c 	mul.w	r3, r3, ip
 8022c60:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022c64:	1215      	asrs	r5, r2, #8
 8022c66:	f025 0507 	bic.w	r5, r5, #7
 8022c6a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022c6e:	1c4d      	adds	r5, r1, #1
 8022c70:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022c74:	10d1      	asrs	r1, r2, #3
 8022c76:	b2c0      	uxtb	r0, r0
 8022c78:	f021 0103 	bic.w	r1, r1, #3
 8022c7c:	00d2      	lsls	r2, r2, #3
 8022c7e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8022c82:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022c86:	00c9      	lsls	r1, r1, #3
 8022c88:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022c8c:	4308      	orrs	r0, r1
 8022c8e:	1c59      	adds	r1, r3, #1
 8022c90:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022c94:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022c98:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8022c9c:	4318      	orrs	r0, r3
 8022c9e:	f8ae 0000 	strh.w	r0, [lr]
 8022ca2:	e7a2      	b.n	8022bea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8022ca4:	b013      	add	sp, #76	; 0x4c
 8022ca6:	ecbd 8b08 	vpop	{d8-d11}
 8022caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cae:	bf00      	nop
 8022cb0:	fffff800 	.word	0xfffff800

08022cb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8022cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022cb8:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8022cbc:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8022cc0:	fb0c 4e03 	mla	lr, ip, r3, r4
 8022cc4:	f1bc 0f00 	cmp.w	ip, #0
 8022cc8:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8022ccc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8022cd0:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8022cd4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8022cd8:	8808      	ldrh	r0, [r1, #0]
 8022cda:	db2f      	blt.n	8022d3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8022cdc:	45e2      	cmp	sl, ip
 8022cde:	dd2d      	ble.n	8022d3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8022ce0:	2c00      	cmp	r4, #0
 8022ce2:	db29      	blt.n	8022d38 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8022ce4:	42a3      	cmp	r3, r4
 8022ce6:	dd27      	ble.n	8022d38 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8022ce8:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8022cec:	1c62      	adds	r2, r4, #1
 8022cee:	d428      	bmi.n	8022d42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8022cf0:	4293      	cmp	r3, r2
 8022cf2:	dd26      	ble.n	8022d42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8022cf4:	b32f      	cbz	r7, 8022d42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8022cf6:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8022cfa:	f11c 0c01 	adds.w	ip, ip, #1
 8022cfe:	d424      	bmi.n	8022d4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8022d00:	45e2      	cmp	sl, ip
 8022d02:	dd22      	ble.n	8022d4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8022d04:	2e00      	cmp	r6, #0
 8022d06:	f000 809d 	beq.w	8022e44 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8022d0a:	2c00      	cmp	r4, #0
 8022d0c:	db1b      	blt.n	8022d46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8022d0e:	42a3      	cmp	r3, r4
 8022d10:	dd19      	ble.n	8022d46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8022d12:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8022d16:	3401      	adds	r4, #1
 8022d18:	d41a      	bmi.n	8022d50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8022d1a:	42a3      	cmp	r3, r4
 8022d1c:	dd18      	ble.n	8022d50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8022d1e:	b1cf      	cbz	r7, 8022d54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8022d20:	3301      	adds	r3, #1
 8022d22:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8022d26:	2f0f      	cmp	r7, #15
 8022d28:	d915      	bls.n	8022d56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8022d2a:	4b49      	ldr	r3, [pc, #292]	; (8022e50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8022d2c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8022d30:	4a48      	ldr	r2, [pc, #288]	; (8022e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8022d32:	4849      	ldr	r0, [pc, #292]	; (8022e58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8022d34:	f002 ffb0 	bl	8025c98 <__assert_func>
 8022d38:	4681      	mov	r9, r0
 8022d3a:	e7d7      	b.n	8022cec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8022d3c:	4686      	mov	lr, r0
 8022d3e:	4681      	mov	r9, r0
 8022d40:	e7db      	b.n	8022cfa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8022d42:	4686      	mov	lr, r0
 8022d44:	e7d9      	b.n	8022cfa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8022d46:	4684      	mov	ip, r0
 8022d48:	e7e5      	b.n	8022d16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8022d4a:	4603      	mov	r3, r0
 8022d4c:	4684      	mov	ip, r0
 8022d4e:	e7ea      	b.n	8022d26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8022d50:	4603      	mov	r3, r0
 8022d52:	e7e8      	b.n	8022d26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8022d54:	4603      	mov	r3, r0
 8022d56:	2e0f      	cmp	r6, #15
 8022d58:	d8e7      	bhi.n	8022d2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8022d5a:	fb17 f806 	smulbb	r8, r7, r6
 8022d5e:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8022d62:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8022d66:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022d6a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022d6e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8022d72:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022d76:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022d7a:	ea44 0909 	orr.w	r9, r4, r9
 8022d7e:	f1c6 0410 	rsb	r4, r6, #16
 8022d82:	041a      	lsls	r2, r3, #16
 8022d84:	ea4a 0e0e 	orr.w	lr, sl, lr
 8022d88:	1be4      	subs	r4, r4, r7
 8022d8a:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8022d8e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022d92:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022d96:	fb07 fe0e 	mul.w	lr, r7, lr
 8022d9a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8022d9e:	4313      	orrs	r3, r2
 8022da0:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8022da4:	fb04 e409 	mla	r4, r4, r9, lr
 8022da8:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8022dac:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022db0:	b2af      	uxth	r7, r5
 8022db2:	fb08 4303 	mla	r3, r8, r3, r4
 8022db6:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8022dba:	43ed      	mvns	r5, r5
 8022dbc:	4322      	orrs	r2, r4
 8022dbe:	b2ed      	uxtb	r5, r5
 8022dc0:	fb06 3202 	mla	r2, r6, r2, r3
 8022dc4:	10c6      	asrs	r6, r0, #3
 8022dc6:	0d53      	lsrs	r3, r2, #21
 8022dc8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022dcc:	0952      	lsrs	r2, r2, #5
 8022dce:	fb16 f605 	smulbb	r6, r6, r5
 8022dd2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022dd6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022dda:	431a      	orrs	r2, r3
 8022ddc:	b293      	uxth	r3, r2
 8022dde:	1202      	asrs	r2, r0, #8
 8022de0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022de4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022de8:	00dc      	lsls	r4, r3, #3
 8022dea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022dee:	fb12 f205 	smulbb	r2, r2, r5
 8022df2:	b2e4      	uxtb	r4, r4
 8022df4:	fb0c 2c07 	mla	ip, ip, r7, r2
 8022df8:	10da      	asrs	r2, r3, #3
 8022dfa:	00c3      	lsls	r3, r0, #3
 8022dfc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022e00:	fa1f fc8c 	uxth.w	ip, ip
 8022e04:	b2db      	uxtb	r3, r3
 8022e06:	fb02 6207 	mla	r2, r2, r7, r6
 8022e0a:	fb13 f305 	smulbb	r3, r3, r5
 8022e0e:	b296      	uxth	r6, r2
 8022e10:	fb04 3307 	mla	r3, r4, r7, r3
 8022e14:	b29a      	uxth	r2, r3
 8022e16:	f10c 0301 	add.w	r3, ip, #1
 8022e1a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022e1e:	1c53      	adds	r3, r2, #1
 8022e20:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022e24:	1c72      	adds	r2, r6, #1
 8022e26:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022e2a:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8022e2e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022e32:	0952      	lsrs	r2, r2, #5
 8022e34:	ea43 030c 	orr.w	r3, r3, ip
 8022e38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022e3c:	4313      	orrs	r3, r2
 8022e3e:	800b      	strh	r3, [r1, #0]
 8022e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e44:	2f0f      	cmp	r7, #15
 8022e46:	f63f af70 	bhi.w	8022d2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8022e4a:	4603      	mov	r3, r0
 8022e4c:	4684      	mov	ip, r0
 8022e4e:	e784      	b.n	8022d5a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8022e50:	0802a1f1 	.word	0x0802a1f1
 8022e54:	0802a867 	.word	0x0802a867
 8022e58:	0802a275 	.word	0x0802a275

08022e5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e60:	ed2d 8b08 	vpush	{d8-d11}
 8022e64:	b093      	sub	sp, #76	; 0x4c
 8022e66:	461d      	mov	r5, r3
 8022e68:	eeb0 aa40 	vmov.f32	s20, s0
 8022e6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022e6e:	eef0 9a60 	vmov.f32	s19, s1
 8022e72:	9210      	str	r2, [sp, #64]	; 0x40
 8022e74:	eeb0 9a41 	vmov.f32	s18, s2
 8022e78:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8022e7c:	eeb0 8a62 	vmov.f32	s16, s5
 8022e80:	910a      	str	r1, [sp, #40]	; 0x28
 8022e82:	eef0 8a43 	vmov.f32	s17, s6
 8022e86:	920b      	str	r2, [sp, #44]	; 0x2c
 8022e88:	eef0 ba44 	vmov.f32	s23, s8
 8022e8c:	6859      	ldr	r1, [r3, #4]
 8022e8e:	eeb0 ba64 	vmov.f32	s22, s9
 8022e92:	681b      	ldr	r3, [r3, #0]
 8022e94:	eef0 aa45 	vmov.f32	s21, s10
 8022e98:	9011      	str	r0, [sp, #68]	; 0x44
 8022e9a:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8022e9e:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8022ea2:	fb01 2707 	mla	r7, r1, r7, r2
 8022ea6:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8022eaa:	9307      	str	r3, [sp, #28]
 8022eac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022eae:	681b      	ldr	r3, [r3, #0]
 8022eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8022eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022eb4:	43db      	mvns	r3, r3
 8022eb6:	b2db      	uxtb	r3, r3
 8022eb8:	9308      	str	r3, [sp, #32]
 8022eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ebc:	2b00      	cmp	r3, #0
 8022ebe:	dc03      	bgt.n	8022ec8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022ec0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022ec2:	2b00      	cmp	r3, #0
 8022ec4:	f340 8205 	ble.w	80232d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022ec8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022eca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022ece:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022ed2:	1e48      	subs	r0, r1, #1
 8022ed4:	f102 3cff 	add.w	ip, r2, #4294967295
 8022ed8:	2d00      	cmp	r5, #0
 8022eda:	f340 80da 	ble.w	8023092 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022ede:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022ee2:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022ee6:	d406      	bmi.n	8022ef6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022ee8:	4586      	cmp	lr, r0
 8022eea:	da04      	bge.n	8022ef6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	db02      	blt.n	8022ef6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022ef0:	4563      	cmp	r3, ip
 8022ef2:	f2c0 80cf 	blt.w	8023094 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022ef6:	f11e 0e01 	adds.w	lr, lr, #1
 8022efa:	f100 80c1 	bmi.w	8023080 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022efe:	4571      	cmp	r1, lr
 8022f00:	f2c0 80be 	blt.w	8023080 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022f04:	3301      	adds	r3, #1
 8022f06:	f100 80bb 	bmi.w	8023080 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022f0a:	429a      	cmp	r2, r3
 8022f0c:	f2c0 80b8 	blt.w	8023080 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022f10:	46a9      	mov	r9, r5
 8022f12:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022f16:	f1b9 0f00 	cmp.w	r9, #0
 8022f1a:	f340 80d8 	ble.w	80230ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022f1e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f20:	1421      	asrs	r1, r4, #16
 8022f22:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022f26:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022f2a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022f2e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022f32:	f100 8112 	bmi.w	802315a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022f36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8022f3a:	4551      	cmp	r1, sl
 8022f3c:	f280 810d 	bge.w	802315a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022f40:	2800      	cmp	r0, #0
 8022f42:	f2c0 810a 	blt.w	802315a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022f46:	f103 3aff 	add.w	sl, r3, #4294967295
 8022f4a:	4550      	cmp	r0, sl
 8022f4c:	f280 8105 	bge.w	802315a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022f50:	fa0f f38e 	sxth.w	r3, lr
 8022f54:	fb00 1103 	mla	r1, r0, r3, r1
 8022f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022f5a:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8022f5e:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8022f62:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8022f66:	f1bc 0f00 	cmp.w	ip, #0
 8022f6a:	d007      	beq.n	8022f7c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8022f6c:	005b      	lsls	r3, r3, #1
 8022f6e:	eb0a 0003 	add.w	r0, sl, r3
 8022f72:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8022f76:	930c      	str	r3, [sp, #48]	; 0x30
 8022f78:	8843      	ldrh	r3, [r0, #2]
 8022f7a:	930d      	str	r3, [sp, #52]	; 0x34
 8022f7c:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8022f80:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022f84:	fb12 f30c 	smulbb	r3, r2, ip
 8022f88:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022f8c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022f90:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022f94:	10db      	asrs	r3, r3, #3
 8022f96:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022f9a:	ea40 000e 	orr.w	r0, r0, lr
 8022f9e:	f1cc 0e10 	rsb	lr, ip, #16
 8022fa2:	ea4a 0101 	orr.w	r1, sl, r1
 8022fa6:	9f08      	ldr	r7, [sp, #32]
 8022fa8:	ebae 0e02 	sub.w	lr, lr, r2
 8022fac:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022fb0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022fb4:	4351      	muls	r1, r2
 8022fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022fb8:	fb0e 1e00 	mla	lr, lr, r0, r1
 8022fbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022fbe:	0410      	lsls	r0, r2, #16
 8022fc0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022fc4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022fc8:	4310      	orrs	r0, r2
 8022fca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022fcc:	0412      	lsls	r2, r2, #16
 8022fce:	fb03 e000 	mla	r0, r3, r0, lr
 8022fd2:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022fd6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022fda:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022fde:	ea42 020e 	orr.w	r2, r2, lr
 8022fe2:	fb03 0302 	mla	r3, r3, r2, r0
 8022fe6:	f8b8 0000 	ldrh.w	r0, [r8]
 8022fea:	0d5a      	lsrs	r2, r3, #21
 8022fec:	095b      	lsrs	r3, r3, #5
 8022fee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022ff2:	1201      	asrs	r1, r0, #8
 8022ff4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022ff8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022ffc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023000:	00c0      	lsls	r0, r0, #3
 8023002:	4313      	orrs	r3, r2
 8023004:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8023008:	fb11 f107 	smulbb	r1, r1, r7
 802300c:	b2c0      	uxtb	r0, r0
 802300e:	b29b      	uxth	r3, r3
 8023010:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023014:	fb10 f007 	smulbb	r0, r0, r7
 8023018:	fb1e fe07 	smulbb	lr, lr, r7
 802301c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023020:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023024:	fb0c 1c02 	mla	ip, ip, r2, r1
 8023028:	10d9      	asrs	r1, r3, #3
 802302a:	00db      	lsls	r3, r3, #3
 802302c:	fa1f fc8c 	uxth.w	ip, ip
 8023030:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023034:	b2db      	uxtb	r3, r3
 8023036:	fb01 e102 	mla	r1, r1, r2, lr
 802303a:	fb03 0302 	mla	r3, r3, r2, r0
 802303e:	b289      	uxth	r1, r1
 8023040:	b29a      	uxth	r2, r3
 8023042:	f10c 0301 	add.w	r3, ip, #1
 8023046:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802304a:	1c53      	adds	r3, r2, #1
 802304c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023050:	1c4a      	adds	r2, r1, #1
 8023052:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023056:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802305a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802305e:	0949      	lsrs	r1, r1, #5
 8023060:	ea43 030c 	orr.w	r3, r3, ip
 8023064:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023068:	430b      	orrs	r3, r1
 802306a:	f8a8 3000 	strh.w	r3, [r8]
 802306e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023070:	f108 0802 	add.w	r8, r8, #2
 8023074:	f109 39ff 	add.w	r9, r9, #4294967295
 8023078:	441c      	add	r4, r3
 802307a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802307c:	441e      	add	r6, r3
 802307e:	e74a      	b.n	8022f16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023080:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023082:	3d01      	subs	r5, #1
 8023084:	441c      	add	r4, r3
 8023086:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023088:	441e      	add	r6, r3
 802308a:	9b07      	ldr	r3, [sp, #28]
 802308c:	3302      	adds	r3, #2
 802308e:	9307      	str	r3, [sp, #28]
 8023090:	e722      	b.n	8022ed8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023092:	d022      	beq.n	80230da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8023094:	1e6b      	subs	r3, r5, #1
 8023096:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023098:	fb00 4003 	mla	r0, r0, r3, r4
 802309c:	1400      	asrs	r0, r0, #16
 802309e:	f53f af37 	bmi.w	8022f10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80230a2:	3901      	subs	r1, #1
 80230a4:	4288      	cmp	r0, r1
 80230a6:	f6bf af33 	bge.w	8022f10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80230aa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80230ac:	fb01 6303 	mla	r3, r1, r3, r6
 80230b0:	141b      	asrs	r3, r3, #16
 80230b2:	f53f af2d 	bmi.w	8022f10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80230b6:	3a01      	subs	r2, #1
 80230b8:	4293      	cmp	r3, r2
 80230ba:	f6bf af29 	bge.w	8022f10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80230be:	46a8      	mov	r8, r5
 80230c0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80230c4:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80230c8:	f1b8 0f00 	cmp.w	r8, #0
 80230cc:	dc60      	bgt.n	8023190 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80230ce:	9b07      	ldr	r3, [sp, #28]
 80230d0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80230d4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80230d8:	9307      	str	r3, [sp, #28]
 80230da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80230dc:	2b00      	cmp	r3, #0
 80230de:	f340 80f8 	ble.w	80232d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80230e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80230e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80230e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80230ec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80230f0:	eef0 6a48 	vmov.f32	s13, s16
 80230f4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80230f8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80230fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023100:	ee16 4a90 	vmov	r4, s13
 8023104:	eef0 6a68 	vmov.f32	s13, s17
 8023108:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802310c:	ee16 6a90 	vmov	r6, s13
 8023110:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023114:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023118:	ee37 8a48 	vsub.f32	s16, s14, s16
 802311c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023120:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023124:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023128:	ee18 2a10 	vmov	r2, s16
 802312c:	eeb0 8a47 	vmov.f32	s16, s14
 8023130:	fb92 f3f3 	sdiv	r3, r2, r3
 8023134:	ee18 2a90 	vmov	r2, s17
 8023138:	9327      	str	r3, [sp, #156]	; 0x9c
 802313a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802313c:	eef0 8a67 	vmov.f32	s17, s15
 8023140:	fb92 f3f3 	sdiv	r3, r2, r3
 8023144:	9328      	str	r3, [sp, #160]	; 0xa0
 8023146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023148:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802314a:	3b01      	subs	r3, #1
 802314c:	930a      	str	r3, [sp, #40]	; 0x28
 802314e:	bf08      	it	eq
 8023150:	4615      	moveq	r5, r2
 8023152:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023154:	bf18      	it	ne
 8023156:	461d      	movne	r5, r3
 8023158:	e6af      	b.n	8022eba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802315a:	f111 0a01 	adds.w	sl, r1, #1
 802315e:	d486      	bmi.n	802306e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023160:	45d6      	cmp	lr, sl
 8023162:	db84      	blt.n	802306e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023164:	f110 0a01 	adds.w	sl, r0, #1
 8023168:	d481      	bmi.n	802306e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802316a:	4553      	cmp	r3, sl
 802316c:	f6ff af7f 	blt.w	802306e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023170:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023172:	b21b      	sxth	r3, r3
 8023174:	9101      	str	r1, [sp, #4]
 8023176:	4641      	mov	r1, r8
 8023178:	9300      	str	r3, [sp, #0]
 802317a:	fa0f f38e 	sxth.w	r3, lr
 802317e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8023182:	e9cd c704 	strd	ip, r7, [sp, #16]
 8023186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023188:	9811      	ldr	r0, [sp, #68]	; 0x44
 802318a:	f7ff fd93 	bl	8022cb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802318e:	e76e      	b.n	802306e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023190:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023192:	1430      	asrs	r0, r6, #16
 8023194:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023196:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802319a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802319e:	1423      	asrs	r3, r4, #16
 80231a0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80231a4:	fb01 3000 	mla	r0, r1, r0, r3
 80231a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231aa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80231ae:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80231b2:	8858      	ldrh	r0, [r3, #2]
 80231b4:	f1be 0f00 	cmp.w	lr, #0
 80231b8:	d00b      	beq.n	80231d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 80231ba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80231be:	3901      	subs	r1, #1
 80231c0:	0049      	lsls	r1, r1, #1
 80231c2:	3102      	adds	r1, #2
 80231c4:	eb03 0b01 	add.w	fp, r3, r1
 80231c8:	5a5b      	ldrh	r3, [r3, r1]
 80231ca:	930e      	str	r3, [sp, #56]	; 0x38
 80231cc:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80231d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80231d2:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80231d6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80231da:	fb12 f30e 	smulbb	r3, r2, lr
 80231de:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80231e2:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80231e6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80231ea:	10db      	asrs	r3, r3, #3
 80231ec:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80231f0:	ea41 010c 	orr.w	r1, r1, ip
 80231f4:	f1ce 0c10 	rsb	ip, lr, #16
 80231f8:	ea4b 0000 	orr.w	r0, fp, r0
 80231fc:	9f08      	ldr	r7, [sp, #32]
 80231fe:	ebac 0c02 	sub.w	ip, ip, r2
 8023202:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023206:	f108 38ff 	add.w	r8, r8, #4294967295
 802320a:	4350      	muls	r0, r2
 802320c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8023210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023212:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023216:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023218:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802321c:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8023220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023222:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023226:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802322a:	0412      	lsls	r2, r2, #16
 802322c:	ea4b 0101 	orr.w	r1, fp, r1
 8023230:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023234:	fb03 c101 	mla	r1, r3, r1, ip
 8023238:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802323c:	4302      	orrs	r2, r0
 802323e:	fb03 1202 	mla	r2, r3, r2, r1
 8023242:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8023246:	0952      	lsrs	r2, r2, #5
 8023248:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802324c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8023250:	f8b9 2000 	ldrh.w	r2, [r9]
 8023254:	ea4b 0303 	orr.w	r3, fp, r3
 8023258:	1211      	asrs	r1, r2, #8
 802325a:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802325e:	b29b      	uxth	r3, r3
 8023260:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023264:	00d2      	lsls	r2, r2, #3
 8023266:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802326a:	fb11 f107 	smulbb	r1, r1, r7
 802326e:	1218      	asrs	r0, r3, #8
 8023270:	fb1c fc07 	smulbb	ip, ip, r7
 8023274:	b2d2      	uxtb	r2, r2
 8023276:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802327a:	fb12 f207 	smulbb	r2, r2, r7
 802327e:	fb00 100a 	mla	r0, r0, sl, r1
 8023282:	10d9      	asrs	r1, r3, #3
 8023284:	00db      	lsls	r3, r3, #3
 8023286:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802328a:	b280      	uxth	r0, r0
 802328c:	b2db      	uxtb	r3, r3
 802328e:	fb01 c10a 	mla	r1, r1, sl, ip
 8023292:	fb03 230a 	mla	r3, r3, sl, r2
 8023296:	1c42      	adds	r2, r0, #1
 8023298:	b289      	uxth	r1, r1
 802329a:	b29b      	uxth	r3, r3
 802329c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80232a0:	f101 0c01 	add.w	ip, r1, #1
 80232a4:	1c5a      	adds	r2, r3, #1
 80232a6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80232aa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80232ae:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80232b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80232b4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80232b8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80232bc:	441c      	add	r4, r3
 80232be:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80232c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80232c4:	4310      	orrs	r0, r2
 80232c6:	441e      	add	r6, r3
 80232c8:	ea40 000c 	orr.w	r0, r0, ip
 80232cc:	f829 0b02 	strh.w	r0, [r9], #2
 80232d0:	e6fa      	b.n	80230c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80232d2:	b013      	add	sp, #76	; 0x4c
 80232d4:	ecbd 8b08 	vpop	{d8-d11}
 80232d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080232dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80232dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232e0:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 80232e4:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80232e8:	fb06 5c03 	mla	ip, r6, r3, r5
 80232ec:	2e00      	cmp	r6, #0
 80232ee:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80232f2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80232f6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80232fa:	8808      	ldrh	r0, [r1, #0]
 80232fc:	db2e      	blt.n	802335c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80232fe:	45b0      	cmp	r8, r6
 8023300:	dd2c      	ble.n	802335c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8023302:	2d00      	cmp	r5, #0
 8023304:	db28      	blt.n	8023358 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8023306:	42ab      	cmp	r3, r5
 8023308:	dd26      	ble.n	8023358 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802330a:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 802330e:	1c6a      	adds	r2, r5, #1
 8023310:	d427      	bmi.n	8023362 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8023312:	4293      	cmp	r3, r2
 8023314:	dd25      	ble.n	8023362 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8023316:	b324      	cbz	r4, 8023362 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8023318:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802331c:	3601      	adds	r6, #1
 802331e:	d424      	bmi.n	802336a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8023320:	45b0      	cmp	r8, r6
 8023322:	dd22      	ble.n	802336a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8023324:	b31f      	cbz	r7, 802336e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8023326:	2d00      	cmp	r5, #0
 8023328:	db1d      	blt.n	8023366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802332a:	42ab      	cmp	r3, r5
 802332c:	dd1b      	ble.n	8023366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802332e:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8023332:	3501      	adds	r5, #1
 8023334:	d405      	bmi.n	8023342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8023336:	42ab      	cmp	r3, r5
 8023338:	dd03      	ble.n	8023342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802333a:	b124      	cbz	r4, 8023346 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 802333c:	3301      	adds	r3, #1
 802333e:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8023342:	2c0f      	cmp	r4, #15
 8023344:	d801      	bhi.n	802334a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023346:	2f0f      	cmp	r7, #15
 8023348:	d914      	bls.n	8023374 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 802334a:	4b27      	ldr	r3, [pc, #156]	; (80233e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 802334c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8023350:	4a26      	ldr	r2, [pc, #152]	; (80233ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8023352:	4827      	ldr	r0, [pc, #156]	; (80233f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8023354:	f002 fca0 	bl	8025c98 <__assert_func>
 8023358:	4684      	mov	ip, r0
 802335a:	e7d8      	b.n	802330e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 802335c:	4602      	mov	r2, r0
 802335e:	4684      	mov	ip, r0
 8023360:	e7dc      	b.n	802331c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8023362:	4602      	mov	r2, r0
 8023364:	e7da      	b.n	802331c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8023366:	4606      	mov	r6, r0
 8023368:	e7e3      	b.n	8023332 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 802336a:	4606      	mov	r6, r0
 802336c:	e7e9      	b.n	8023342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802336e:	2c0f      	cmp	r4, #15
 8023370:	d8eb      	bhi.n	802334a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023372:	4606      	mov	r6, r0
 8023374:	fb14 f307 	smulbb	r3, r4, r7
 8023378:	ea4f 450c 	mov.w	r5, ip, lsl #16
 802337c:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8023380:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023384:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8023388:	10db      	asrs	r3, r3, #3
 802338a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802338e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023392:	ea45 0c0c 	orr.w	ip, r5, ip
 8023396:	f1c7 0510 	rsb	r5, r7, #16
 802339a:	ea4e 0202 	orr.w	r2, lr, r2
 802339e:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 80233a2:	1b2d      	subs	r5, r5, r4
 80233a4:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80233a8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80233ac:	4354      	muls	r4, r2
 80233ae:	fb05 450c 	mla	r5, r5, ip, r4
 80233b2:	0404      	lsls	r4, r0, #16
 80233b4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80233b8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80233bc:	4320      	orrs	r0, r4
 80233be:	fb03 5400 	mla	r4, r3, r0, r5
 80233c2:	0430      	lsls	r0, r6, #16
 80233c4:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80233c8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80233cc:	4330      	orrs	r0, r6
 80233ce:	fb07 4000 	mla	r0, r7, r0, r4
 80233d2:	0d43      	lsrs	r3, r0, #21
 80233d4:	0940      	lsrs	r0, r0, #5
 80233d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80233da:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80233de:	4318      	orrs	r0, r3
 80233e0:	8008      	strh	r0, [r1, #0]
 80233e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233e6:	bf00      	nop
 80233e8:	0802a1f1 	.word	0x0802a1f1
 80233ec:	0802a867 	.word	0x0802a867
 80233f0:	0802a275 	.word	0x0802a275

080233f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80233f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233f8:	ed2d 8b08 	vpush	{d8-d11}
 80233fc:	b08f      	sub	sp, #60	; 0x3c
 80233fe:	461d      	mov	r5, r3
 8023400:	eeb0 aa40 	vmov.f32	s20, s0
 8023404:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023406:	eef0 9a60 	vmov.f32	s19, s1
 802340a:	9107      	str	r1, [sp, #28]
 802340c:	eeb0 9a41 	vmov.f32	s18, s2
 8023410:	6859      	ldr	r1, [r3, #4]
 8023412:	eeb0 8a62 	vmov.f32	s16, s5
 8023416:	920c      	str	r2, [sp, #48]	; 0x30
 8023418:	eef0 8a43 	vmov.f32	s17, s6
 802341c:	681b      	ldr	r3, [r3, #0]
 802341e:	eef0 ba44 	vmov.f32	s23, s8
 8023422:	eeb0 ba64 	vmov.f32	s22, s9
 8023426:	900d      	str	r0, [sp, #52]	; 0x34
 8023428:	eef0 aa45 	vmov.f32	s21, s10
 802342c:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8023430:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8023434:	fb01 2707 	mla	r7, r1, r7, r2
 8023438:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802343c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802343e:	f8d3 8000 	ldr.w	r8, [r3]
 8023442:	9b07      	ldr	r3, [sp, #28]
 8023444:	2b00      	cmp	r3, #0
 8023446:	dc03      	bgt.n	8023450 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8023448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802344a:	2b00      	cmp	r3, #0
 802344c:	f340 8182 	ble.w	8023754 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023450:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023452:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023456:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802345a:	1e48      	subs	r0, r1, #1
 802345c:	f102 3cff 	add.w	ip, r2, #4294967295
 8023460:	2d00      	cmp	r5, #0
 8023462:	f340 809b 	ble.w	802359c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8023466:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802346a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802346e:	d406      	bmi.n	802347e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023470:	4586      	cmp	lr, r0
 8023472:	da04      	bge.n	802347e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023474:	2b00      	cmp	r3, #0
 8023476:	db02      	blt.n	802347e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023478:	4563      	cmp	r3, ip
 802347a:	f2c0 8090 	blt.w	802359e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802347e:	f11e 0e01 	adds.w	lr, lr, #1
 8023482:	f100 8084 	bmi.w	802358e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023486:	4571      	cmp	r1, lr
 8023488:	f2c0 8081 	blt.w	802358e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802348c:	3301      	adds	r3, #1
 802348e:	d47e      	bmi.n	802358e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023490:	429a      	cmp	r2, r3
 8023492:	db7c      	blt.n	802358e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023494:	46aa      	mov	sl, r5
 8023496:	46b9      	mov	r9, r7
 8023498:	f1ba 0f00 	cmp.w	sl, #0
 802349c:	f340 8099 	ble.w	80235d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80234a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80234a2:	1421      	asrs	r1, r4, #16
 80234a4:	ea4f 4026 	mov.w	r0, r6, asr #16
 80234a8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80234ac:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80234b0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80234b4:	f100 80d1 	bmi.w	802365a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80234b8:	f10e 3bff 	add.w	fp, lr, #4294967295
 80234bc:	4559      	cmp	r1, fp
 80234be:	f280 80cc 	bge.w	802365a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80234c2:	2800      	cmp	r0, #0
 80234c4:	f2c0 80c9 	blt.w	802365a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80234c8:	f103 3bff 	add.w	fp, r3, #4294967295
 80234cc:	4558      	cmp	r0, fp
 80234ce:	f280 80c4 	bge.w	802365a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80234d2:	fa0f fe8e 	sxth.w	lr, lr
 80234d6:	fb00 110e 	mla	r1, r0, lr, r1
 80234da:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80234de:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80234e2:	8841      	ldrh	r1, [r0, #2]
 80234e4:	f1bc 0f00 	cmp.w	ip, #0
 80234e8:	d00b      	beq.n	8023502 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80234ea:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80234ee:	3b01      	subs	r3, #1
 80234f0:	005b      	lsls	r3, r3, #1
 80234f2:	3302      	adds	r3, #2
 80234f4:	eb00 0e03 	add.w	lr, r0, r3
 80234f8:	5ac3      	ldrh	r3, [r0, r3]
 80234fa:	9308      	str	r3, [sp, #32]
 80234fc:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8023500:	9309      	str	r3, [sp, #36]	; 0x24
 8023502:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8023506:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802350a:	fb12 f30c 	smulbb	r3, r2, ip
 802350e:	f1cc 0e10 	rsb	lr, ip, #16
 8023512:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023516:	10db      	asrs	r3, r3, #3
 8023518:	ebae 0e02 	sub.w	lr, lr, r2
 802351c:	ea40 000b 	orr.w	r0, r0, fp
 8023520:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023524:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023528:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802352c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023530:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8023534:	ea4b 0101 	orr.w	r1, fp, r1
 8023538:	4351      	muls	r1, r2
 802353a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802353c:	fb0e 1e00 	mla	lr, lr, r0, r1
 8023540:	0410      	lsls	r0, r2, #16
 8023542:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023546:	9908      	ldr	r1, [sp, #32]
 8023548:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802354c:	4310      	orrs	r0, r2
 802354e:	9a08      	ldr	r2, [sp, #32]
 8023550:	0412      	lsls	r2, r2, #16
 8023552:	fb03 e000 	mla	r0, r3, r0, lr
 8023556:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802355a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802355e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023562:	ea42 020e 	orr.w	r2, r2, lr
 8023566:	fb03 0302 	mla	r3, r3, r2, r0
 802356a:	0d5a      	lsrs	r2, r3, #21
 802356c:	095b      	lsrs	r3, r3, #5
 802356e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023572:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023576:	4313      	orrs	r3, r2
 8023578:	f8a9 3000 	strh.w	r3, [r9]
 802357c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802357e:	f109 0902 	add.w	r9, r9, #2
 8023582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023586:	441c      	add	r4, r3
 8023588:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802358a:	441e      	add	r6, r3
 802358c:	e784      	b.n	8023498 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802358e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023590:	3d01      	subs	r5, #1
 8023592:	3702      	adds	r7, #2
 8023594:	441c      	add	r4, r3
 8023596:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023598:	441e      	add	r6, r3
 802359a:	e761      	b.n	8023460 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802359c:	d01d      	beq.n	80235da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802359e:	1e6b      	subs	r3, r5, #1
 80235a0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80235a2:	fb00 4003 	mla	r0, r0, r3, r4
 80235a6:	1400      	asrs	r0, r0, #16
 80235a8:	f53f af74 	bmi.w	8023494 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80235ac:	3901      	subs	r1, #1
 80235ae:	4288      	cmp	r0, r1
 80235b0:	f6bf af70 	bge.w	8023494 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80235b4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80235b6:	fb01 6303 	mla	r3, r1, r3, r6
 80235ba:	141b      	asrs	r3, r3, #16
 80235bc:	f53f af6a 	bmi.w	8023494 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80235c0:	3a01      	subs	r2, #1
 80235c2:	4293      	cmp	r3, r2
 80235c4:	f6bf af66 	bge.w	8023494 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80235c8:	46a9      	mov	r9, r5
 80235ca:	46ba      	mov	sl, r7
 80235cc:	f1b9 0f00 	cmp.w	r9, #0
 80235d0:	dc5b      	bgt.n	802368a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80235d2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80235d6:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80235da:	9b07      	ldr	r3, [sp, #28]
 80235dc:	2b00      	cmp	r3, #0
 80235de:	f340 80b9 	ble.w	8023754 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80235e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80235e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80235e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80235ec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80235f0:	eef0 6a48 	vmov.f32	s13, s16
 80235f4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80235f8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80235fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023600:	ee16 4a90 	vmov	r4, s13
 8023604:	eef0 6a68 	vmov.f32	s13, s17
 8023608:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802360c:	ee16 6a90 	vmov	r6, s13
 8023610:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023614:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023618:	ee37 8a48 	vsub.f32	s16, s14, s16
 802361c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023620:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023624:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023628:	ee18 2a10 	vmov	r2, s16
 802362c:	eeb0 8a47 	vmov.f32	s16, s14
 8023630:	fb92 f3f3 	sdiv	r3, r2, r3
 8023634:	ee18 2a90 	vmov	r2, s17
 8023638:	9323      	str	r3, [sp, #140]	; 0x8c
 802363a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802363c:	eef0 8a67 	vmov.f32	s17, s15
 8023640:	fb92 f3f3 	sdiv	r3, r2, r3
 8023644:	9324      	str	r3, [sp, #144]	; 0x90
 8023646:	9b07      	ldr	r3, [sp, #28]
 8023648:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802364a:	3b01      	subs	r3, #1
 802364c:	9307      	str	r3, [sp, #28]
 802364e:	bf08      	it	eq
 8023650:	4615      	moveq	r5, r2
 8023652:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023654:	bf18      	it	ne
 8023656:	461d      	movne	r5, r3
 8023658:	e6f3      	b.n	8023442 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802365a:	f111 0b01 	adds.w	fp, r1, #1
 802365e:	d48d      	bmi.n	802357c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8023660:	45de      	cmp	lr, fp
 8023662:	db8b      	blt.n	802357c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8023664:	f110 0b01 	adds.w	fp, r0, #1
 8023668:	d488      	bmi.n	802357c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802366a:	455b      	cmp	r3, fp
 802366c:	db86      	blt.n	802357c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802366e:	b21b      	sxth	r3, r3
 8023670:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8023674:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8023678:	9300      	str	r3, [sp, #0]
 802367a:	4642      	mov	r2, r8
 802367c:	fa0f f38e 	sxth.w	r3, lr
 8023680:	4649      	mov	r1, r9
 8023682:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023684:	f7ff fe2a 	bl	80232dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8023688:	e778      	b.n	802357c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802368a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802368c:	1420      	asrs	r0, r4, #16
 802368e:	1431      	asrs	r1, r6, #16
 8023690:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023694:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023698:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802369c:	fb03 0101 	mla	r1, r3, r1, r0
 80236a0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80236a4:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80236a8:	8841      	ldrh	r1, [r0, #2]
 80236aa:	f1be 0f00 	cmp.w	lr, #0
 80236ae:	d00b      	beq.n	80236c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80236b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80236b4:	3b01      	subs	r3, #1
 80236b6:	005b      	lsls	r3, r3, #1
 80236b8:	3302      	adds	r3, #2
 80236ba:	eb00 0b03 	add.w	fp, r0, r3
 80236be:	5ac3      	ldrh	r3, [r0, r3]
 80236c0:	930a      	str	r3, [sp, #40]	; 0x28
 80236c2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80236c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80236c8:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80236cc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80236d0:	fb12 f30e 	smulbb	r3, r2, lr
 80236d4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80236d8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80236dc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80236e0:	10db      	asrs	r3, r3, #3
 80236e2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80236e6:	ea40 000c 	orr.w	r0, r0, ip
 80236ea:	f1ce 0c10 	rsb	ip, lr, #16
 80236ee:	ea4b 0101 	orr.w	r1, fp, r1
 80236f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80236f6:	ebac 0c02 	sub.w	ip, ip, r2
 80236fa:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80236fe:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8023702:	4351      	muls	r1, r2
 8023704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023706:	fb0c 1c00 	mla	ip, ip, r0, r1
 802370a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802370c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023710:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8023714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023716:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802371a:	0412      	lsls	r2, r2, #16
 802371c:	ea4b 0000 	orr.w	r0, fp, r0
 8023720:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8023724:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023728:	fb03 c000 	mla	r0, r3, r0, ip
 802372c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8023730:	ea42 0b0b 	orr.w	fp, r2, fp
 8023734:	fb03 000b 	mla	r0, r3, fp, r0
 8023738:	0d43      	lsrs	r3, r0, #21
 802373a:	0940      	lsrs	r0, r0, #5
 802373c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023740:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023744:	4318      	orrs	r0, r3
 8023746:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023748:	441c      	add	r4, r3
 802374a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802374c:	f82a 0b02 	strh.w	r0, [sl], #2
 8023750:	441e      	add	r6, r3
 8023752:	e73b      	b.n	80235cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8023754:	b00f      	add	sp, #60	; 0x3c
 8023756:	ecbd 8b08 	vpop	{d8-d11}
 802375a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023760 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8023760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023764:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8023768:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802376c:	fb04 5603 	mla	r6, r4, r3, r5
 8023770:	2c00      	cmp	r4, #0
 8023772:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8023776:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802377a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802377e:	db36      	blt.n	80237ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8023780:	45a6      	cmp	lr, r4
 8023782:	dd34      	ble.n	80237ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8023784:	2d00      	cmp	r5, #0
 8023786:	db30      	blt.n	80237ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8023788:	42ab      	cmp	r3, r5
 802378a:	dd2e      	ble.n	80237ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 802378c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8023790:	1c6e      	adds	r6, r5, #1
 8023792:	d42f      	bmi.n	80237f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8023794:	42b3      	cmp	r3, r6
 8023796:	dd2d      	ble.n	80237f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8023798:	b370      	cbz	r0, 80237f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802379a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802379e:	3401      	adds	r4, #1
 80237a0:	d42e      	bmi.n	8023800 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80237a2:	45a6      	cmp	lr, r4
 80237a4:	dd2c      	ble.n	8023800 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80237a6:	b377      	cbz	r7, 8023806 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 80237a8:	2d00      	cmp	r5, #0
 80237aa:	db27      	blt.n	80237fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80237ac:	42ab      	cmp	r3, r5
 80237ae:	dd25      	ble.n	80237fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80237b0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80237b4:	3501      	adds	r5, #1
 80237b6:	d429      	bmi.n	802380c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 80237b8:	42ab      	cmp	r3, r5
 80237ba:	dd27      	ble.n	802380c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 80237bc:	b340      	cbz	r0, 8023810 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 80237be:	3301      	adds	r3, #1
 80237c0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80237c4:	280f      	cmp	r0, #15
 80237c6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80237ca:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80237ce:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80237d2:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80237d6:	d801      	bhi.n	80237dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 80237d8:	2f0f      	cmp	r7, #15
 80237da:	d91b      	bls.n	8023814 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 80237dc:	4b8d      	ldr	r3, [pc, #564]	; (8023a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 80237de:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80237e2:	4a8d      	ldr	r2, [pc, #564]	; (8023a18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 80237e4:	488d      	ldr	r0, [pc, #564]	; (8023a1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 80237e6:	f002 fa57 	bl	8025c98 <__assert_func>
 80237ea:	2200      	movs	r2, #0
 80237ec:	e7d0      	b.n	8023790 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 80237ee:	2600      	movs	r6, #0
 80237f0:	4632      	mov	r2, r6
 80237f2:	e7d4      	b.n	802379e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80237f4:	2600      	movs	r6, #0
 80237f6:	e7d2      	b.n	802379e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80237f8:	4606      	mov	r6, r0
 80237fa:	e7d0      	b.n	802379e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80237fc:	2400      	movs	r4, #0
 80237fe:	e7d9      	b.n	80237b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8023800:	2300      	movs	r3, #0
 8023802:	461c      	mov	r4, r3
 8023804:	e7de      	b.n	80237c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8023806:	463b      	mov	r3, r7
 8023808:	463c      	mov	r4, r7
 802380a:	e7db      	b.n	80237c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802380c:	2300      	movs	r3, #0
 802380e:	e7d9      	b.n	80237c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8023810:	4603      	mov	r3, r0
 8023812:	e7d7      	b.n	80237c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8023814:	b280      	uxth	r0, r0
 8023816:	b2bf      	uxth	r7, r7
 8023818:	fb07 fe00 	mul.w	lr, r7, r0
 802381c:	0100      	lsls	r0, r0, #4
 802381e:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023822:	eba0 0c0e 	sub.w	ip, r0, lr
 8023826:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802382a:	b2bf      	uxth	r7, r7
 802382c:	fa1f fc8c 	uxth.w	ip, ip
 8023830:	1bed      	subs	r5, r5, r7
 8023832:	fb0a f00c 	mul.w	r0, sl, ip
 8023836:	b2ad      	uxth	r5, r5
 8023838:	fb0b 0005 	mla	r0, fp, r5, r0
 802383c:	fb07 0009 	mla	r0, r7, r9, r0
 8023840:	fb0e 0008 	mla	r0, lr, r8, r0
 8023844:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023848:	9001      	str	r0, [sp, #4]
 802384a:	2800      	cmp	r0, #0
 802384c:	f000 80de 	beq.w	8023a0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8023850:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023854:	d018      	beq.n	8023888 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 8023856:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802385a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802385e:	fb0b f000 	mul.w	r0, fp, r0
 8023862:	fb0b fb02 	mul.w	fp, fp, r2
 8023866:	0a02      	lsrs	r2, r0, #8
 8023868:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802386c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023870:	4402      	add	r2, r0
 8023872:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8023876:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802387a:	0a12      	lsrs	r2, r2, #8
 802387c:	0a00      	lsrs	r0, r0, #8
 802387e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023882:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023886:	4302      	orrs	r2, r0
 8023888:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802388c:	d01a      	beq.n	80238c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 802388e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8023892:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023896:	fb0a f000 	mul.w	r0, sl, r0
 802389a:	fb0a fa06 	mul.w	sl, sl, r6
 802389e:	0a06      	lsrs	r6, r0, #8
 80238a0:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80238a4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80238a8:	4406      	add	r6, r0
 80238aa:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80238ae:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80238b2:	0a36      	lsrs	r6, r6, #8
 80238b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80238b8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80238bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80238c0:	ea46 060a 	orr.w	r6, r6, sl
 80238c4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80238c8:	d01b      	beq.n	8023902 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 80238ca:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80238ce:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80238d2:	fb09 fa0a 	mul.w	sl, r9, sl
 80238d6:	fb09 f004 	mul.w	r0, r9, r4
 80238da:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80238de:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80238e2:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80238e6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80238ea:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80238ee:	4454      	add	r4, sl
 80238f0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80238f4:	0a24      	lsrs	r4, r4, #8
 80238f6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80238fa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80238fe:	ea44 0409 	orr.w	r4, r4, r9
 8023902:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023906:	d01b      	beq.n	8023940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8023908:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802390c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023910:	fb08 f909 	mul.w	r9, r8, r9
 8023914:	fb08 f003 	mul.w	r0, r8, r3
 8023918:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802391c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023920:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8023924:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023928:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802392c:	444b      	add	r3, r9
 802392e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023932:	0a1b      	lsrs	r3, r3, #8
 8023934:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023938:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802393c:	ea43 0308 	orr.w	r3, r3, r8
 8023940:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023944:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023948:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802394c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023950:	fb0c f808 	mul.w	r8, ip, r8
 8023954:	8808      	ldrh	r0, [r1, #0]
 8023956:	fb0c f606 	mul.w	r6, ip, r6
 802395a:	fb05 8909 	mla	r9, r5, r9, r8
 802395e:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8023962:	fb05 6502 	mla	r5, r5, r2, r6
 8023966:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802396a:	fb07 9908 	mla	r9, r7, r8, r9
 802396e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023972:	fb07 5704 	mla	r7, r7, r4, r5
 8023976:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802397a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802397e:	b2b6      	uxth	r6, r6
 8023980:	fb0e 9808 	mla	r8, lr, r8, r9
 8023984:	9a01      	ldr	r2, [sp, #4]
 8023986:	fb0e 7e03 	mla	lr, lr, r3, r7
 802398a:	1205      	asrs	r5, r0, #8
 802398c:	4372      	muls	r2, r6
 802398e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023992:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023996:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802399a:	1c53      	adds	r3, r2, #1
 802399c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80239a0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80239a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80239a8:	ea48 0e0e 	orr.w	lr, r8, lr
 80239ac:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80239b0:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80239b4:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80239b8:	b2db      	uxtb	r3, r3
 80239ba:	fb12 f206 	smulbb	r2, r2, r6
 80239be:	fa5f fe8e 	uxtb.w	lr, lr
 80239c2:	fb14 f406 	smulbb	r4, r4, r6
 80239c6:	fb05 2503 	mla	r5, r5, r3, r2
 80239ca:	10c2      	asrs	r2, r0, #3
 80239cc:	fb1e fe06 	smulbb	lr, lr, r6
 80239d0:	00c0      	lsls	r0, r0, #3
 80239d2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80239d6:	b2ad      	uxth	r5, r5
 80239d8:	b2c0      	uxtb	r0, r0
 80239da:	fb02 4203 	mla	r2, r2, r3, r4
 80239de:	fb00 e303 	mla	r3, r0, r3, lr
 80239e2:	b294      	uxth	r4, r2
 80239e4:	b298      	uxth	r0, r3
 80239e6:	1c6b      	adds	r3, r5, #1
 80239e8:	1c62      	adds	r2, r4, #1
 80239ea:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80239ee:	1c43      	adds	r3, r0, #1
 80239f0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80239f4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80239f8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80239fc:	0952      	lsrs	r2, r2, #5
 80239fe:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023a02:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023a06:	432b      	orrs	r3, r5
 8023a08:	4313      	orrs	r3, r2
 8023a0a:	800b      	strh	r3, [r1, #0]
 8023a0c:	b003      	add	sp, #12
 8023a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a12:	bf00      	nop
 8023a14:	0802a1f1 	.word	0x0802a1f1
 8023a18:	0802a7be 	.word	0x0802a7be
 8023a1c:	0802a275 	.word	0x0802a275

08023a20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a24:	ed2d 8b08 	vpush	{d8-d11}
 8023a28:	b09d      	sub	sp, #116	; 0x74
 8023a2a:	eeb0 aa40 	vmov.f32	s20, s0
 8023a2e:	eef0 9a60 	vmov.f32	s19, s1
 8023a32:	9219      	str	r2, [sp, #100]	; 0x64
 8023a34:	eeb0 9a41 	vmov.f32	s18, s2
 8023a38:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8023a3a:	eeb0 8a62 	vmov.f32	s16, s5
 8023a3e:	9307      	str	r3, [sp, #28]
 8023a40:	eef0 8a43 	vmov.f32	s17, s6
 8023a44:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8023a48:	eef0 ba44 	vmov.f32	s23, s8
 8023a4c:	901b      	str	r0, [sp, #108]	; 0x6c
 8023a4e:	eeb0 ba64 	vmov.f32	s22, s9
 8023a52:	931a      	str	r3, [sp, #104]	; 0x68
 8023a54:	eef0 aa45 	vmov.f32	s21, s10
 8023a58:	6850      	ldr	r0, [r2, #4]
 8023a5a:	9117      	str	r1, [sp, #92]	; 0x5c
 8023a5c:	6812      	ldr	r2, [r2, #0]
 8023a5e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8023a62:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8023a66:	fb00 1303 	mla	r3, r0, r3, r1
 8023a6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8023a70:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023a72:	681b      	ldr	r3, [r3, #0]
 8023a74:	9310      	str	r3, [sp, #64]	; 0x40
 8023a76:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023a7e:	2b00      	cmp	r3, #0
 8023a80:	dc03      	bgt.n	8023a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023a82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023a84:	2b00      	cmp	r3, #0
 8023a86:	f340 8375 	ble.w	8024174 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8023a8a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023a8c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023a90:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023a94:	1e48      	subs	r0, r1, #1
 8023a96:	1e57      	subs	r7, r2, #1
 8023a98:	9b07      	ldr	r3, [sp, #28]
 8023a9a:	2b00      	cmp	r3, #0
 8023a9c:	f340 818e 	ble.w	8023dbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8023aa0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023aa4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023aa8:	d406      	bmi.n	8023ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023aaa:	4584      	cmp	ip, r0
 8023aac:	da04      	bge.n	8023ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023aae:	2b00      	cmp	r3, #0
 8023ab0:	db02      	blt.n	8023ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023ab2:	42bb      	cmp	r3, r7
 8023ab4:	f2c0 8183 	blt.w	8023dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8023ab8:	f11c 0c01 	adds.w	ip, ip, #1
 8023abc:	f100 8173 	bmi.w	8023da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8023ac0:	4561      	cmp	r1, ip
 8023ac2:	f2c0 8170 	blt.w	8023da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8023ac6:	3301      	adds	r3, #1
 8023ac8:	f100 816d 	bmi.w	8023da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8023acc:	429a      	cmp	r2, r3
 8023ace:	f2c0 816a 	blt.w	8023da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8023ad2:	9b07      	ldr	r3, [sp, #28]
 8023ad4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023ad6:	9318      	str	r3, [sp, #96]	; 0x60
 8023ad8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023ada:	2b00      	cmp	r3, #0
 8023adc:	f340 818c 	ble.w	8023df8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8023ae0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8023ae2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023ae6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023ae8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023aec:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023af0:	1422      	asrs	r2, r4, #16
 8023af2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023af6:	689b      	ldr	r3, [r3, #8]
 8023af8:	f100 81cd 	bmi.w	8023e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8023afc:	f103 38ff 	add.w	r8, r3, #4294967295
 8023b00:	4542      	cmp	r2, r8
 8023b02:	f280 81c8 	bge.w	8023e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8023b06:	f1bc 0f00 	cmp.w	ip, #0
 8023b0a:	f2c0 81c4 	blt.w	8023e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8023b0e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023b12:	45c4      	cmp	ip, r8
 8023b14:	f280 81bf 	bge.w	8023e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8023b18:	b21b      	sxth	r3, r3
 8023b1a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023b1c:	fb0c 2203 	mla	r2, ip, r3, r2
 8023b20:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023b24:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023b28:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023b2c:	2800      	cmp	r0, #0
 8023b2e:	f000 81a9 	beq.w	8023e84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8023b32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023b36:	950c      	str	r5, [sp, #48]	; 0x30
 8023b38:	0e2d      	lsrs	r5, r5, #24
 8023b3a:	9513      	str	r5, [sp, #76]	; 0x4c
 8023b3c:	b181      	cbz	r1, 8023b60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023b3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023b42:	3b01      	subs	r3, #1
 8023b44:	009b      	lsls	r3, r3, #2
 8023b46:	3304      	adds	r3, #4
 8023b48:	eb08 0c03 	add.w	ip, r8, r3
 8023b4c:	f858 3003 	ldr.w	r3, [r8, r3]
 8023b50:	9308      	str	r3, [sp, #32]
 8023b52:	0e1b      	lsrs	r3, r3, #24
 8023b54:	9311      	str	r3, [sp, #68]	; 0x44
 8023b56:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023b5a:	930d      	str	r3, [sp, #52]	; 0x34
 8023b5c:	0e1b      	lsrs	r3, r3, #24
 8023b5e:	9314      	str	r3, [sp, #80]	; 0x50
 8023b60:	b280      	uxth	r0, r0
 8023b62:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023b64:	b289      	uxth	r1, r1
 8023b66:	fb00 f901 	mul.w	r9, r0, r1
 8023b6a:	0100      	lsls	r0, r0, #4
 8023b6c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023b70:	eba0 0809 	sub.w	r8, r0, r9
 8023b74:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023b78:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023b7a:	b289      	uxth	r1, r1
 8023b7c:	fa1f f888 	uxth.w	r8, r8
 8023b80:	1a5b      	subs	r3, r3, r1
 8023b82:	fb08 f000 	mul.w	r0, r8, r0
 8023b86:	b29b      	uxth	r3, r3
 8023b88:	fb03 000e 	mla	r0, r3, lr, r0
 8023b8c:	fb01 0005 	mla	r0, r1, r5, r0
 8023b90:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023b92:	fb09 0005 	mla	r0, r9, r5, r0
 8023b96:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023b9a:	2800      	cmp	r0, #0
 8023b9c:	f000 80fa 	beq.w	8023d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023ba0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023ba4:	d01b      	beq.n	8023bde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8023ba6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023baa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023bae:	fb0e fa0a 	mul.w	sl, lr, sl
 8023bb2:	fb0e fe02 	mul.w	lr, lr, r2
 8023bb6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023bba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023bbe:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023bc2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023bc6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023bca:	4452      	add	r2, sl
 8023bcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023bd0:	0a12      	lsrs	r2, r2, #8
 8023bd2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023bd6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023bda:	ea42 020c 	orr.w	r2, r2, ip
 8023bde:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023be0:	2dff      	cmp	r5, #255	; 0xff
 8023be2:	d021      	beq.n	8023c28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023be4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023be6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023bea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023bec:	fb05 fb0b 	mul.w	fp, r5, fp
 8023bf0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023bf2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023bf6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023bf8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023bfc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c00:	fb05 fa0a 	mul.w	sl, r5, sl
 8023c04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c08:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c0c:	44de      	add	lr, fp
 8023c0e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c22:	ea4e 050a 	orr.w	r5, lr, sl
 8023c26:	950c      	str	r5, [sp, #48]	; 0x30
 8023c28:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c2a:	2dff      	cmp	r5, #255	; 0xff
 8023c2c:	d021      	beq.n	8023c72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8023c2e:	9d08      	ldr	r5, [sp, #32]
 8023c30:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023c34:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c36:	fb05 fb0b 	mul.w	fp, r5, fp
 8023c3a:	9d08      	ldr	r5, [sp, #32]
 8023c3c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023c40:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c42:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c46:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c4a:	fb05 fa0a 	mul.w	sl, r5, sl
 8023c4e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c52:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c56:	44de      	add	lr, fp
 8023c58:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c6c:	ea4e 050a 	orr.w	r5, lr, sl
 8023c70:	9508      	str	r5, [sp, #32]
 8023c72:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023c74:	2dff      	cmp	r5, #255	; 0xff
 8023c76:	d021      	beq.n	8023cbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8023c78:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023c7a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023c7e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023c80:	fb05 fb0b 	mul.w	fp, r5, fp
 8023c84:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023c86:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023c8a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023c8c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c90:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c94:	fb05 fa0a 	mul.w	sl, r5, sl
 8023c98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c9c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023ca0:	44de      	add	lr, fp
 8023ca2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ca6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023caa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023cae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cb2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023cb6:	ea4e 050a 	orr.w	r5, lr, sl
 8023cba:	950d      	str	r5, [sp, #52]	; 0x34
 8023cbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023cbe:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023cc2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023cc6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023cca:	9d08      	ldr	r5, [sp, #32]
 8023ccc:	fb08 fc0c 	mul.w	ip, r8, ip
 8023cd0:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023cd4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023cd8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023cda:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023cde:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023ce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023ce4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023ce8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023cec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023cee:	fb08 f80e 	mul.w	r8, r8, lr
 8023cf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cf6:	fb03 8202 	mla	r2, r3, r2, r8
 8023cfa:	9b08      	ldr	r3, [sp, #32]
 8023cfc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d00:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8023d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023d06:	fb01 220a 	mla	r2, r1, sl, r2
 8023d0a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8023d0e:	883b      	ldrh	r3, [r7, #0]
 8023d10:	fb09 2901 	mla	r9, r9, r1, r2
 8023d14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023d16:	1219      	asrs	r1, r3, #8
 8023d18:	4342      	muls	r2, r0
 8023d1a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023d1e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023d22:	1c50      	adds	r0, r2, #1
 8023d24:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023d28:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023d2c:	ea4c 0c09 	orr.w	ip, ip, r9
 8023d30:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023d34:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023d38:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023d3c:	fa5f fc8c 	uxtb.w	ip, ip
 8023d40:	fb12 f205 	smulbb	r2, r2, r5
 8023d44:	b2c0      	uxtb	r0, r0
 8023d46:	fb1c fc05 	smulbb	ip, ip, r5
 8023d4a:	fb01 2100 	mla	r1, r1, r0, r2
 8023d4e:	10da      	asrs	r2, r3, #3
 8023d50:	fb1e fe05 	smulbb	lr, lr, r5
 8023d54:	00db      	lsls	r3, r3, #3
 8023d56:	b289      	uxth	r1, r1
 8023d58:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023d5c:	b2db      	uxtb	r3, r3
 8023d5e:	fb02 e200 	mla	r2, r2, r0, lr
 8023d62:	fb03 c300 	mla	r3, r3, r0, ip
 8023d66:	b292      	uxth	r2, r2
 8023d68:	fa1f fc83 	uxth.w	ip, r3
 8023d6c:	1c4b      	adds	r3, r1, #1
 8023d6e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023d72:	f10c 0301 	add.w	r3, ip, #1
 8023d76:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023d7a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023d7e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023d82:	430b      	orrs	r3, r1
 8023d84:	1c51      	adds	r1, r2, #1
 8023d86:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023d8a:	0952      	lsrs	r2, r2, #5
 8023d8c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023d90:	4313      	orrs	r3, r2
 8023d92:	803b      	strh	r3, [r7, #0]
 8023d94:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023d96:	3702      	adds	r7, #2
 8023d98:	441c      	add	r4, r3
 8023d9a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023d9c:	441e      	add	r6, r3
 8023d9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023da0:	3b01      	subs	r3, #1
 8023da2:	9318      	str	r3, [sp, #96]	; 0x60
 8023da4:	e698      	b.n	8023ad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023da6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023da8:	441c      	add	r4, r3
 8023daa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023dac:	441e      	add	r6, r3
 8023dae:	9b07      	ldr	r3, [sp, #28]
 8023db0:	3b01      	subs	r3, #1
 8023db2:	9307      	str	r3, [sp, #28]
 8023db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023db6:	3302      	adds	r3, #2
 8023db8:	930a      	str	r3, [sp, #40]	; 0x28
 8023dba:	e66d      	b.n	8023a98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023dbc:	d023      	beq.n	8023e06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023dbe:	9b07      	ldr	r3, [sp, #28]
 8023dc0:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8023dc2:	3b01      	subs	r3, #1
 8023dc4:	fb00 4003 	mla	r0, r0, r3, r4
 8023dc8:	1400      	asrs	r0, r0, #16
 8023dca:	f53f ae82 	bmi.w	8023ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023dce:	3901      	subs	r1, #1
 8023dd0:	4288      	cmp	r0, r1
 8023dd2:	f6bf ae7e 	bge.w	8023ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023dd6:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8023dd8:	fb01 6303 	mla	r3, r1, r3, r6
 8023ddc:	141b      	asrs	r3, r3, #16
 8023dde:	f53f ae78 	bmi.w	8023ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023de2:	3a01      	subs	r2, #1
 8023de4:	4293      	cmp	r3, r2
 8023de6:	f6bf ae74 	bge.w	8023ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023dea:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023dee:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023df2:	f1bb 0f00 	cmp.w	fp, #0
 8023df6:	dc6c      	bgt.n	8023ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8023df8:	9b07      	ldr	r3, [sp, #28]
 8023dfa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e00:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023e04:	930a      	str	r3, [sp, #40]	; 0x28
 8023e06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023e08:	2b00      	cmp	r3, #0
 8023e0a:	f340 81b3 	ble.w	8024174 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8023e0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e12:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023e14:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023e18:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023e1c:	eef0 6a48 	vmov.f32	s13, s16
 8023e20:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023e24:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023e28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e2c:	ee16 4a90 	vmov	r4, s13
 8023e30:	eef0 6a68 	vmov.f32	s13, s17
 8023e34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e38:	ee16 6a90 	vmov	r6, s13
 8023e3c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023e40:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023e44:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023e48:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023e4c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023e50:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023e54:	ee18 2a10 	vmov	r2, s16
 8023e58:	eeb0 8a47 	vmov.f32	s16, s14
 8023e5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e60:	ee18 2a90 	vmov	r2, s17
 8023e64:	9331      	str	r3, [sp, #196]	; 0xc4
 8023e66:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023e68:	eef0 8a67 	vmov.f32	s17, s15
 8023e6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e70:	9332      	str	r3, [sp, #200]	; 0xc8
 8023e72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023e74:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023e76:	3b01      	subs	r3, #1
 8023e78:	9317      	str	r3, [sp, #92]	; 0x5c
 8023e7a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023e7c:	bf08      	it	eq
 8023e7e:	4613      	moveq	r3, r2
 8023e80:	9307      	str	r3, [sp, #28]
 8023e82:	e5fb      	b.n	8023a7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8023e84:	2900      	cmp	r1, #0
 8023e86:	f43f ae6b 	beq.w	8023b60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023e8a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023e8e:	9308      	str	r3, [sp, #32]
 8023e90:	0e1b      	lsrs	r3, r3, #24
 8023e92:	9311      	str	r3, [sp, #68]	; 0x44
 8023e94:	e664      	b.n	8023b60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023e96:	f112 0801 	adds.w	r8, r2, #1
 8023e9a:	f53f af7b 	bmi.w	8023d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023e9e:	4543      	cmp	r3, r8
 8023ea0:	f6ff af78 	blt.w	8023d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023ea4:	f11c 0801 	adds.w	r8, ip, #1
 8023ea8:	f53f af74 	bmi.w	8023d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023eac:	45c6      	cmp	lr, r8
 8023eae:	f6ff af71 	blt.w	8023d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023eb2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023eb4:	b21b      	sxth	r3, r3
 8023eb6:	9201      	str	r2, [sp, #4]
 8023eb8:	fa0f f28e 	sxth.w	r2, lr
 8023ebc:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023ec0:	e9cd c002 	strd	ip, r0, [sp, #8]
 8023ec4:	9200      	str	r2, [sp, #0]
 8023ec6:	4639      	mov	r1, r7
 8023ec8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023eca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023ecc:	f7ff fc48 	bl	8023760 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8023ed0:	e760      	b.n	8023d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023ed2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023ed4:	1427      	asrs	r7, r4, #16
 8023ed6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023ed8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023edc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ee0:	1433      	asrs	r3, r6, #16
 8023ee2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023ee6:	fb01 7303 	mla	r3, r1, r3, r7
 8023eea:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8023eee:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023ef2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023ef6:	2a00      	cmp	r2, #0
 8023ef8:	f000 8133 	beq.w	8024162 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8023efc:	687d      	ldr	r5, [r7, #4]
 8023efe:	950e      	str	r5, [sp, #56]	; 0x38
 8023f00:	0e2d      	lsrs	r5, r5, #24
 8023f02:	9515      	str	r5, [sp, #84]	; 0x54
 8023f04:	b178      	cbz	r0, 8023f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8023f06:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8023f0a:	3901      	subs	r1, #1
 8023f0c:	0089      	lsls	r1, r1, #2
 8023f0e:	3104      	adds	r1, #4
 8023f10:	eb07 0e01 	add.w	lr, r7, r1
 8023f14:	5879      	ldr	r1, [r7, r1]
 8023f16:	9109      	str	r1, [sp, #36]	; 0x24
 8023f18:	0e09      	lsrs	r1, r1, #24
 8023f1a:	9112      	str	r1, [sp, #72]	; 0x48
 8023f1c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023f20:	910f      	str	r1, [sp, #60]	; 0x3c
 8023f22:	0e09      	lsrs	r1, r1, #24
 8023f24:	9116      	str	r1, [sp, #88]	; 0x58
 8023f26:	b292      	uxth	r2, r2
 8023f28:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023f2a:	b280      	uxth	r0, r0
 8023f2c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023f2e:	fb02 f800 	mul.w	r8, r2, r0
 8023f32:	0112      	lsls	r2, r2, #4
 8023f34:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023f38:	eba2 0e08 	sub.w	lr, r2, r8
 8023f3c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023f40:	b280      	uxth	r0, r0
 8023f42:	fa1f fe8e 	uxth.w	lr, lr
 8023f46:	1a12      	subs	r2, r2, r0
 8023f48:	fb0e f101 	mul.w	r1, lr, r1
 8023f4c:	b292      	uxth	r2, r2
 8023f4e:	fb02 110c 	mla	r1, r2, ip, r1
 8023f52:	fb00 1105 	mla	r1, r0, r5, r1
 8023f56:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023f58:	fb08 1105 	mla	r1, r8, r5, r1
 8023f5c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023f60:	2900      	cmp	r1, #0
 8023f62:	f000 80f5 	beq.w	8024150 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023f66:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023f6a:	d019      	beq.n	8023fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8023f6c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023f70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023f74:	fb0c fa0a 	mul.w	sl, ip, sl
 8023f78:	fb0c fc03 	mul.w	ip, ip, r3
 8023f7c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023f80:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023f84:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023f88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023f8c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023f90:	4453      	add	r3, sl
 8023f92:	0a3f      	lsrs	r7, r7, #8
 8023f94:	0a1b      	lsrs	r3, r3, #8
 8023f96:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023f9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023f9e:	433b      	orrs	r3, r7
 8023fa0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023fa2:	2dff      	cmp	r5, #255	; 0xff
 8023fa4:	d020      	beq.n	8023fe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8023fa6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023fa8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023fac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023fae:	436f      	muls	r7, r5
 8023fb0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023fb2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023fb6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023fba:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023fbc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023fc0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023fc4:	fb05 fa0a 	mul.w	sl, r5, sl
 8023fc8:	44bc      	add	ip, r7
 8023fca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023fce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023fd2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023fd6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023fda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023fde:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023fe2:	ea4c 050a 	orr.w	r5, ip, sl
 8023fe6:	950e      	str	r5, [sp, #56]	; 0x38
 8023fe8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023fea:	2dff      	cmp	r5, #255	; 0xff
 8023fec:	d020      	beq.n	8024030 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8023fee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023ff0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023ff4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023ff6:	436f      	muls	r7, r5
 8023ff8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023ffa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023ffe:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024002:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024004:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024008:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802400c:	fb05 fa0a 	mul.w	sl, r5, sl
 8024010:	44bc      	add	ip, r7
 8024012:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024016:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802401a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802401e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024022:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024026:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802402a:	ea4c 050a 	orr.w	r5, ip, sl
 802402e:	9509      	str	r5, [sp, #36]	; 0x24
 8024030:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024032:	2dff      	cmp	r5, #255	; 0xff
 8024034:	d020      	beq.n	8024078 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8024036:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024038:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802403c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802403e:	436f      	muls	r7, r5
 8024040:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024042:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024046:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802404a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802404c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024050:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024054:	fb05 fa0a 	mul.w	sl, r5, sl
 8024058:	44bc      	add	ip, r7
 802405a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802405e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024062:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024066:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802406a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802406e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024072:	ea4c 050a 	orr.w	r5, ip, sl
 8024076:	950f      	str	r5, [sp, #60]	; 0x3c
 8024078:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802407a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802407e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024082:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024086:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024088:	fb0e f707 	mul.w	r7, lr, r7
 802408c:	fb02 770c 	mla	r7, r2, ip, r7
 8024090:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024094:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024096:	fb00 770c 	mla	r7, r0, ip, r7
 802409a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802409e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80240a0:	fb08 770c 	mla	r7, r8, ip, r7
 80240a4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80240a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80240aa:	fb0e fe0c 	mul.w	lr, lr, ip
 80240ae:	0a3f      	lsrs	r7, r7, #8
 80240b0:	fb02 e303 	mla	r3, r2, r3, lr
 80240b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80240b6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80240ba:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80240be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80240c0:	fb00 330a 	mla	r3, r0, sl, r3
 80240c4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80240c8:	f8b9 0000 	ldrh.w	r0, [r9]
 80240cc:	fb08 3c0c 	mla	ip, r8, ip, r3
 80240d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240d2:	1202      	asrs	r2, r0, #8
 80240d4:	4359      	muls	r1, r3
 80240d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240da:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80240de:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80240e2:	1c4b      	adds	r3, r1, #1
 80240e4:	ea47 070c 	orr.w	r7, r7, ip
 80240e8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80240ec:	0c3b      	lsrs	r3, r7, #16
 80240ee:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80240f2:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80240f6:	b2ff      	uxtb	r7, r7
 80240f8:	fb13 f305 	smulbb	r3, r3, r5
 80240fc:	b2c9      	uxtb	r1, r1
 80240fe:	fb17 f705 	smulbb	r7, r7, r5
 8024102:	fb02 3201 	mla	r2, r2, r1, r3
 8024106:	10c3      	asrs	r3, r0, #3
 8024108:	fb1c fc05 	smulbb	ip, ip, r5
 802410c:	00c0      	lsls	r0, r0, #3
 802410e:	b292      	uxth	r2, r2
 8024110:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024114:	b2c0      	uxtb	r0, r0
 8024116:	fb03 c301 	mla	r3, r3, r1, ip
 802411a:	fb00 7001 	mla	r0, r0, r1, r7
 802411e:	1c51      	adds	r1, r2, #1
 8024120:	b29b      	uxth	r3, r3
 8024122:	b280      	uxth	r0, r0
 8024124:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024128:	f100 0c01 	add.w	ip, r0, #1
 802412c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024130:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8024134:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024138:	ea4c 0202 	orr.w	r2, ip, r2
 802413c:	f103 0c01 	add.w	ip, r3, #1
 8024140:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024144:	095b      	lsrs	r3, r3, #5
 8024146:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802414a:	431a      	orrs	r2, r3
 802414c:	f8a9 2000 	strh.w	r2, [r9]
 8024150:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024152:	f109 0902 	add.w	r9, r9, #2
 8024156:	f10b 3bff 	add.w	fp, fp, #4294967295
 802415a:	441c      	add	r4, r3
 802415c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802415e:	441e      	add	r6, r3
 8024160:	e647      	b.n	8023df2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8024162:	2800      	cmp	r0, #0
 8024164:	f43f aedf 	beq.w	8023f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8024168:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 802416c:	9109      	str	r1, [sp, #36]	; 0x24
 802416e:	0e09      	lsrs	r1, r1, #24
 8024170:	9112      	str	r1, [sp, #72]	; 0x48
 8024172:	e6d8      	b.n	8023f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8024174:	b01d      	add	sp, #116	; 0x74
 8024176:	ecbd 8b08 	vpop	{d8-d11}
 802417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024180 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8024180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024184:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8024188:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802418c:	fb04 5603 	mla	r6, r4, r3, r5
 8024190:	2c00      	cmp	r4, #0
 8024192:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8024196:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802419a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802419e:	db37      	blt.n	8024210 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 80241a0:	45a6      	cmp	lr, r4
 80241a2:	dd35      	ble.n	8024210 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 80241a4:	2d00      	cmp	r5, #0
 80241a6:	db31      	blt.n	802420c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80241a8:	42ab      	cmp	r3, r5
 80241aa:	dd2f      	ble.n	802420c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80241ac:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80241b0:	1c6e      	adds	r6, r5, #1
 80241b2:	d430      	bmi.n	8024216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 80241b4:	42b3      	cmp	r3, r6
 80241b6:	dd2e      	ble.n	8024216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 80241b8:	b378      	cbz	r0, 802421a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 80241ba:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80241be:	3401      	adds	r4, #1
 80241c0:	d42f      	bmi.n	8024222 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 80241c2:	45a6      	cmp	lr, r4
 80241c4:	dd2d      	ble.n	8024222 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 80241c6:	b37f      	cbz	r7, 8024228 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 80241c8:	2d00      	cmp	r5, #0
 80241ca:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 80241ce:	db26      	blt.n	802421e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80241d0:	42ab      	cmp	r3, r5
 80241d2:	dd24      	ble.n	802421e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80241d4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80241d8:	3501      	adds	r5, #1
 80241da:	d428      	bmi.n	802422e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80241dc:	42ab      	cmp	r3, r5
 80241de:	dd26      	ble.n	802422e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80241e0:	b338      	cbz	r0, 8024232 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 80241e2:	f8de 3004 	ldr.w	r3, [lr, #4]
 80241e6:	280f      	cmp	r0, #15
 80241e8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80241ec:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80241f0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80241f4:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80241f8:	d801      	bhi.n	80241fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 80241fa:	2f0f      	cmp	r7, #15
 80241fc:	d91b      	bls.n	8024236 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 80241fe:	4b87      	ldr	r3, [pc, #540]	; (802441c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8024200:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8024204:	4a86      	ldr	r2, [pc, #536]	; (8024420 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8024206:	4887      	ldr	r0, [pc, #540]	; (8024424 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8024208:	f001 fd46 	bl	8025c98 <__assert_func>
 802420c:	2200      	movs	r2, #0
 802420e:	e7cf      	b.n	80241b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8024210:	2600      	movs	r6, #0
 8024212:	4632      	mov	r2, r6
 8024214:	e7d3      	b.n	80241be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8024216:	2600      	movs	r6, #0
 8024218:	e7d1      	b.n	80241be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802421a:	4606      	mov	r6, r0
 802421c:	e7cf      	b.n	80241be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802421e:	2400      	movs	r4, #0
 8024220:	e7da      	b.n	80241d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 8024222:	2300      	movs	r3, #0
 8024224:	461c      	mov	r4, r3
 8024226:	e7de      	b.n	80241e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8024228:	463b      	mov	r3, r7
 802422a:	463c      	mov	r4, r7
 802422c:	e7db      	b.n	80241e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802422e:	2300      	movs	r3, #0
 8024230:	e7d9      	b.n	80241e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8024232:	4603      	mov	r3, r0
 8024234:	e7d7      	b.n	80241e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8024236:	b280      	uxth	r0, r0
 8024238:	b2bf      	uxth	r7, r7
 802423a:	fb07 fe00 	mul.w	lr, r7, r0
 802423e:	0100      	lsls	r0, r0, #4
 8024240:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024244:	eba0 0c0e 	sub.w	ip, r0, lr
 8024248:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802424c:	b2bf      	uxth	r7, r7
 802424e:	fa1f fc8c 	uxth.w	ip, ip
 8024252:	1bed      	subs	r5, r5, r7
 8024254:	fb0c f00a 	mul.w	r0, ip, sl
 8024258:	b2ad      	uxth	r5, r5
 802425a:	fb0b 0005 	mla	r0, fp, r5, r0
 802425e:	fb07 0009 	mla	r0, r7, r9, r0
 8024262:	fb0e 0008 	mla	r0, lr, r8, r0
 8024266:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802426a:	9001      	str	r0, [sp, #4]
 802426c:	2800      	cmp	r0, #0
 802426e:	f000 80d1 	beq.w	8024414 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 8024272:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024276:	d018      	beq.n	80242aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8024278:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802427c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024280:	fb0b f000 	mul.w	r0, fp, r0
 8024284:	fb0b fb02 	mul.w	fp, fp, r2
 8024288:	0a02      	lsrs	r2, r0, #8
 802428a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802428e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024292:	4402      	add	r2, r0
 8024294:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024298:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802429c:	0a12      	lsrs	r2, r2, #8
 802429e:	0a00      	lsrs	r0, r0, #8
 80242a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80242a4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80242a8:	4302      	orrs	r2, r0
 80242aa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80242ae:	d01a      	beq.n	80242e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 80242b0:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80242b4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80242b8:	fb0a f000 	mul.w	r0, sl, r0
 80242bc:	fb0a fa06 	mul.w	sl, sl, r6
 80242c0:	0a06      	lsrs	r6, r0, #8
 80242c2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80242c6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80242ca:	4406      	add	r6, r0
 80242cc:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80242d0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80242d4:	0a36      	lsrs	r6, r6, #8
 80242d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242da:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80242de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80242e2:	ea46 060a 	orr.w	r6, r6, sl
 80242e6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80242ea:	d01b      	beq.n	8024324 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 80242ec:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80242f0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80242f4:	fb09 fa0a 	mul.w	sl, r9, sl
 80242f8:	fb09 f004 	mul.w	r0, r9, r4
 80242fc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024300:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024304:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8024308:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802430c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8024310:	4454      	add	r4, sl
 8024312:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024316:	0a24      	lsrs	r4, r4, #8
 8024318:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802431c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024320:	ea44 0409 	orr.w	r4, r4, r9
 8024324:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024328:	d01b      	beq.n	8024362 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 802432a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802432e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024332:	fb08 f909 	mul.w	r9, r8, r9
 8024336:	fb08 f003 	mul.w	r0, r8, r3
 802433a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802433e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024342:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8024346:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802434a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802434e:	444b      	add	r3, r9
 8024350:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024354:	0a1b      	lsrs	r3, r3, #8
 8024356:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802435a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802435e:	ea43 0308 	orr.w	r3, r3, r8
 8024362:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024366:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802436a:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802436e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024372:	fb0c f808 	mul.w	r8, ip, r8
 8024376:	8808      	ldrh	r0, [r1, #0]
 8024378:	fb0c f606 	mul.w	r6, ip, r6
 802437c:	fb05 8909 	mla	r9, r5, r9, r8
 8024380:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8024384:	fb05 6502 	mla	r5, r5, r2, r6
 8024388:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802438c:	fb07 9908 	mla	r9, r7, r8, r9
 8024390:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8024394:	fb07 5704 	mla	r7, r7, r4, r5
 8024398:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802439c:	fb0e 9808 	mla	r8, lr, r8, r9
 80243a0:	10c4      	asrs	r4, r0, #3
 80243a2:	fb0e 7e03 	mla	lr, lr, r3, r7
 80243a6:	9b01      	ldr	r3, [sp, #4]
 80243a8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80243ac:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80243b0:	43da      	mvns	r2, r3
 80243b2:	1203      	asrs	r3, r0, #8
 80243b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80243b8:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80243bc:	b2d2      	uxtb	r2, r2
 80243be:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80243c2:	00c0      	lsls	r0, r0, #3
 80243c4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80243c8:	4353      	muls	r3, r2
 80243ca:	b2c0      	uxtb	r0, r0
 80243cc:	ea48 0e0e 	orr.w	lr, r8, lr
 80243d0:	4354      	muls	r4, r2
 80243d2:	4350      	muls	r0, r2
 80243d4:	1c5a      	adds	r2, r3, #1
 80243d6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80243da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80243de:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80243e2:	1c62      	adds	r2, r4, #1
 80243e4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80243e8:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80243ec:	021b      	lsls	r3, r3, #8
 80243ee:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80243f2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80243f6:	00d2      	lsls	r2, r2, #3
 80243f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80243fc:	4313      	orrs	r3, r2
 80243fe:	1c42      	adds	r2, r0, #1
 8024400:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024404:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 8024408:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 802440c:	ea4e 0e03 	orr.w	lr, lr, r3
 8024410:	f8a1 e000 	strh.w	lr, [r1]
 8024414:	b003      	add	sp, #12
 8024416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802441a:	bf00      	nop
 802441c:	0802a1f1 	.word	0x0802a1f1
 8024420:	0802a7be 	.word	0x0802a7be
 8024424:	0802a275 	.word	0x0802a275

08024428 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802442c:	ed2d 8b08 	vpush	{d8-d11}
 8024430:	b09b      	sub	sp, #108	; 0x6c
 8024432:	eeb0 aa40 	vmov.f32	s20, s0
 8024436:	eef0 9a60 	vmov.f32	s19, s1
 802443a:	9218      	str	r2, [sp, #96]	; 0x60
 802443c:	eeb0 9a41 	vmov.f32	s18, s2
 8024440:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8024442:	eeb0 8a62 	vmov.f32	s16, s5
 8024446:	9019      	str	r0, [sp, #100]	; 0x64
 8024448:	eef0 8a43 	vmov.f32	s17, s6
 802444c:	6850      	ldr	r0, [r2, #4]
 802444e:	eef0 ba44 	vmov.f32	s23, s8
 8024452:	9116      	str	r1, [sp, #88]	; 0x58
 8024454:	eeb0 ba64 	vmov.f32	s22, s9
 8024458:	9307      	str	r3, [sp, #28]
 802445a:	eef0 aa45 	vmov.f32	s21, s10
 802445e:	6812      	ldr	r2, [r2, #0]
 8024460:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8024464:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8024468:	fb00 1303 	mla	r3, r0, r3, r1
 802446c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024470:	930a      	str	r3, [sp, #40]	; 0x28
 8024472:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024474:	681b      	ldr	r3, [r3, #0]
 8024476:	930f      	str	r3, [sp, #60]	; 0x3c
 8024478:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802447a:	2b00      	cmp	r3, #0
 802447c:	dc03      	bgt.n	8024486 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802447e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024480:	2b00      	cmp	r3, #0
 8024482:	f340 8387 	ble.w	8024b94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8024486:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024488:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802448c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024490:	1e48      	subs	r0, r1, #1
 8024492:	1e57      	subs	r7, r2, #1
 8024494:	9b07      	ldr	r3, [sp, #28]
 8024496:	2b00      	cmp	r3, #0
 8024498:	f340 8166 	ble.w	8024768 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802449c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80244a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80244a4:	d406      	bmi.n	80244b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80244a6:	4584      	cmp	ip, r0
 80244a8:	da04      	bge.n	80244b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80244aa:	2b00      	cmp	r3, #0
 80244ac:	db02      	blt.n	80244b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80244ae:	42bb      	cmp	r3, r7
 80244b0:	f2c0 815b 	blt.w	802476a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80244b4:	f11c 0c01 	adds.w	ip, ip, #1
 80244b8:	f100 814b 	bmi.w	8024752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80244bc:	4561      	cmp	r1, ip
 80244be:	f2c0 8148 	blt.w	8024752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80244c2:	3301      	adds	r3, #1
 80244c4:	f100 8145 	bmi.w	8024752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80244c8:	429a      	cmp	r2, r3
 80244ca:	f2c0 8142 	blt.w	8024752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80244ce:	9b07      	ldr	r3, [sp, #28]
 80244d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80244d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80244d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80244d6:	2b00      	cmp	r3, #0
 80244d8:	f340 8165 	ble.w	80247a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80244dc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80244de:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80244e2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80244e4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80244e8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80244ec:	1422      	asrs	r2, r4, #16
 80244ee:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80244f2:	689b      	ldr	r3, [r3, #8]
 80244f4:	f100 81d5 	bmi.w	80248a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80244f8:	f103 38ff 	add.w	r8, r3, #4294967295
 80244fc:	4542      	cmp	r2, r8
 80244fe:	f280 81d0 	bge.w	80248a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8024502:	f1bc 0f00 	cmp.w	ip, #0
 8024506:	f2c0 81cc 	blt.w	80248a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802450a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802450e:	45c4      	cmp	ip, r8
 8024510:	f280 81c7 	bge.w	80248a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8024514:	b21b      	sxth	r3, r3
 8024516:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024518:	fb0c 2203 	mla	r2, ip, r3, r2
 802451c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8024520:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8024524:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024528:	2900      	cmp	r1, #0
 802452a:	f000 8182 	beq.w	8024832 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802452e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8024532:	950b      	str	r5, [sp, #44]	; 0x2c
 8024534:	0e2d      	lsrs	r5, r5, #24
 8024536:	9512      	str	r5, [sp, #72]	; 0x48
 8024538:	b180      	cbz	r0, 802455c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802453a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802453e:	3b01      	subs	r3, #1
 8024540:	009b      	lsls	r3, r3, #2
 8024542:	3304      	adds	r3, #4
 8024544:	eb08 0c03 	add.w	ip, r8, r3
 8024548:	f858 3003 	ldr.w	r3, [r8, r3]
 802454c:	9308      	str	r3, [sp, #32]
 802454e:	0e1b      	lsrs	r3, r3, #24
 8024550:	9310      	str	r3, [sp, #64]	; 0x40
 8024552:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024556:	930c      	str	r3, [sp, #48]	; 0x30
 8024558:	0e1b      	lsrs	r3, r3, #24
 802455a:	9313      	str	r3, [sp, #76]	; 0x4c
 802455c:	b289      	uxth	r1, r1
 802455e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024560:	b280      	uxth	r0, r0
 8024562:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024564:	fb01 f900 	mul.w	r9, r1, r0
 8024568:	0109      	lsls	r1, r1, #4
 802456a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802456e:	eba1 0809 	sub.w	r8, r1, r9
 8024572:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8024576:	b280      	uxth	r0, r0
 8024578:	fa1f f888 	uxth.w	r8, r8
 802457c:	1a09      	subs	r1, r1, r0
 802457e:	fb08 f303 	mul.w	r3, r8, r3
 8024582:	b289      	uxth	r1, r1
 8024584:	fb01 330e 	mla	r3, r1, lr, r3
 8024588:	fb00 3305 	mla	r3, r0, r5, r3
 802458c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802458e:	fb09 3305 	mla	r3, r9, r5, r3
 8024592:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024596:	2b00      	cmp	r3, #0
 8024598:	f000 80d2 	beq.w	8024740 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802459c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80245a0:	d01b      	beq.n	80245da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 80245a2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80245a6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80245aa:	fb0e fa0a 	mul.w	sl, lr, sl
 80245ae:	fb0e fe02 	mul.w	lr, lr, r2
 80245b2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80245b6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80245ba:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80245be:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80245c2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80245c6:	4452      	add	r2, sl
 80245c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80245cc:	0a12      	lsrs	r2, r2, #8
 80245ce:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80245d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80245d6:	ea42 020c 	orr.w	r2, r2, ip
 80245da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80245dc:	2dff      	cmp	r5, #255	; 0xff
 80245de:	d021      	beq.n	8024624 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80245e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80245e2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80245e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80245e8:	fb05 fb0b 	mul.w	fp, r5, fp
 80245ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80245ee:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80245f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80245f4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80245f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80245fc:	fb05 fa0a 	mul.w	sl, r5, sl
 8024600:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024604:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024608:	44de      	add	lr, fp
 802460a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802460e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024612:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024616:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802461a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802461e:	ea4e 050a 	orr.w	r5, lr, sl
 8024622:	950b      	str	r5, [sp, #44]	; 0x2c
 8024624:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024626:	2dff      	cmp	r5, #255	; 0xff
 8024628:	d021      	beq.n	802466e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802462a:	9d08      	ldr	r5, [sp, #32]
 802462c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024630:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024632:	fb05 fb0b 	mul.w	fp, r5, fp
 8024636:	9d08      	ldr	r5, [sp, #32]
 8024638:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802463c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802463e:	fb05 fa0e 	mul.w	sl, r5, lr
 8024642:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024646:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802464a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802464e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024652:	44de      	add	lr, fp
 8024654:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024658:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802465c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024660:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024664:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024668:	ea4e 050a 	orr.w	r5, lr, sl
 802466c:	9508      	str	r5, [sp, #32]
 802466e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024670:	2dff      	cmp	r5, #255	; 0xff
 8024672:	d021      	beq.n	80246b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8024674:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024676:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802467a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802467c:	fb05 fb0b 	mul.w	fp, r5, fp
 8024680:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024682:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024686:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024688:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802468c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024690:	fb05 fa0a 	mul.w	sl, r5, sl
 8024694:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024698:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802469c:	44de      	add	lr, fp
 802469e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246b2:	ea4e 050a 	orr.w	r5, lr, sl
 80246b6:	950c      	str	r5, [sp, #48]	; 0x30
 80246b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80246ba:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80246be:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80246c2:	2bff      	cmp	r3, #255	; 0xff
 80246c4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80246c8:	9d08      	ldr	r5, [sp, #32]
 80246ca:	fb08 fc0c 	mul.w	ip, r8, ip
 80246ce:	fb01 cc0e 	mla	ip, r1, lr, ip
 80246d2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80246d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80246d8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80246dc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80246e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80246e2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80246e6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80246ea:	fb08 f80e 	mul.w	r8, r8, lr
 80246ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80246f2:	fb01 8202 	mla	r2, r1, r2, r8
 80246f6:	9908      	ldr	r1, [sp, #32]
 80246f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80246fc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024700:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024702:	fb00 220a 	mla	r2, r0, sl, r2
 8024706:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802470a:	fb09 2900 	mla	r9, r9, r0, r2
 802470e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024712:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024716:	ea4c 0c09 	orr.w	ip, ip, r9
 802471a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802471e:	f040 8091 	bne.w	8024844 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8024722:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8024726:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802472a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802472e:	f022 0207 	bic.w	r2, r2, #7
 8024732:	431a      	orrs	r2, r3
 8024734:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8024738:	ea4c 0c02 	orr.w	ip, ip, r2
 802473c:	f8a7 c000 	strh.w	ip, [r7]
 8024740:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024742:	3702      	adds	r7, #2
 8024744:	441c      	add	r4, r3
 8024746:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024748:	441e      	add	r6, r3
 802474a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802474c:	3b01      	subs	r3, #1
 802474e:	9317      	str	r3, [sp, #92]	; 0x5c
 8024750:	e6c0      	b.n	80244d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8024752:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024754:	441c      	add	r4, r3
 8024756:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024758:	441e      	add	r6, r3
 802475a:	9b07      	ldr	r3, [sp, #28]
 802475c:	3b01      	subs	r3, #1
 802475e:	9307      	str	r3, [sp, #28]
 8024760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024762:	3302      	adds	r3, #2
 8024764:	930a      	str	r3, [sp, #40]	; 0x28
 8024766:	e695      	b.n	8024494 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024768:	d024      	beq.n	80247b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802476a:	9b07      	ldr	r3, [sp, #28]
 802476c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 802476e:	3b01      	subs	r3, #1
 8024770:	fb00 4003 	mla	r0, r0, r3, r4
 8024774:	1400      	asrs	r0, r0, #16
 8024776:	f53f aeaa 	bmi.w	80244ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802477a:	3901      	subs	r1, #1
 802477c:	4288      	cmp	r0, r1
 802477e:	f6bf aea6 	bge.w	80244ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8024782:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8024784:	fb01 6303 	mla	r3, r1, r3, r6
 8024788:	141b      	asrs	r3, r3, #16
 802478a:	f53f aea0 	bmi.w	80244ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802478e:	3a01      	subs	r2, #1
 8024790:	4293      	cmp	r3, r2
 8024792:	f6bf ae9c 	bge.w	80244ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8024796:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802479a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802479e:	f1bb 0f00 	cmp.w	fp, #0
 80247a2:	f300 809a 	bgt.w	80248da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 80247a6:	9b07      	ldr	r3, [sp, #28]
 80247a8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80247ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247ae:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80247b2:	930a      	str	r3, [sp, #40]	; 0x28
 80247b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80247b6:	2b00      	cmp	r3, #0
 80247b8:	f340 81ec 	ble.w	8024b94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 80247bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80247c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80247c2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80247c6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80247ca:	eef0 6a48 	vmov.f32	s13, s16
 80247ce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80247d2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80247d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247da:	ee16 4a90 	vmov	r4, s13
 80247de:	eef0 6a68 	vmov.f32	s13, s17
 80247e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247e6:	ee16 6a90 	vmov	r6, s13
 80247ea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80247ee:	ee69 7a27 	vmul.f32	s15, s18, s15
 80247f2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80247f6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80247fa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80247fe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024802:	ee18 2a10 	vmov	r2, s16
 8024806:	eeb0 8a47 	vmov.f32	s16, s14
 802480a:	fb92 f3f3 	sdiv	r3, r2, r3
 802480e:	ee18 2a90 	vmov	r2, s17
 8024812:	932f      	str	r3, [sp, #188]	; 0xbc
 8024814:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024816:	eef0 8a67 	vmov.f32	s17, s15
 802481a:	fb92 f3f3 	sdiv	r3, r2, r3
 802481e:	9330      	str	r3, [sp, #192]	; 0xc0
 8024820:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024822:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024824:	3b01      	subs	r3, #1
 8024826:	9316      	str	r3, [sp, #88]	; 0x58
 8024828:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802482a:	bf08      	it	eq
 802482c:	4613      	moveq	r3, r2
 802482e:	9307      	str	r3, [sp, #28]
 8024830:	e622      	b.n	8024478 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8024832:	2800      	cmp	r0, #0
 8024834:	f43f ae92 	beq.w	802455c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8024838:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802483c:	9308      	str	r3, [sp, #32]
 802483e:	0e1b      	lsrs	r3, r3, #24
 8024840:	9310      	str	r3, [sp, #64]	; 0x40
 8024842:	e68b      	b.n	802455c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8024844:	8839      	ldrh	r1, [r7, #0]
 8024846:	43db      	mvns	r3, r3
 8024848:	4dd5      	ldr	r5, [pc, #852]	; (8024ba0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 802484a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802484e:	fa5f f883 	uxtb.w	r8, r3
 8024852:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8024856:	10c8      	asrs	r0, r1, #3
 8024858:	00cb      	lsls	r3, r1, #3
 802485a:	fb0e fe08 	mul.w	lr, lr, r8
 802485e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024862:	b2db      	uxtb	r3, r3
 8024864:	f10e 0101 	add.w	r1, lr, #1
 8024868:	fb00 f008 	mul.w	r0, r0, r8
 802486c:	fb03 f308 	mul.w	r3, r3, r8
 8024870:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8024874:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8024878:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802487c:	f100 0e01 	add.w	lr, r0, #1
 8024880:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8024884:	b2c9      	uxtb	r1, r1
 8024886:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802488a:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802488e:	00d2      	lsls	r2, r2, #3
 8024890:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024894:	430a      	orrs	r2, r1
 8024896:	1c59      	adds	r1, r3, #1
 8024898:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802489c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80248a0:	e748      	b.n	8024734 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80248a2:	f112 0801 	adds.w	r8, r2, #1
 80248a6:	f53f af4b 	bmi.w	8024740 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80248aa:	4543      	cmp	r3, r8
 80248ac:	f6ff af48 	blt.w	8024740 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80248b0:	f11c 0801 	adds.w	r8, ip, #1
 80248b4:	f53f af44 	bmi.w	8024740 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80248b8:	45c6      	cmp	lr, r8
 80248ba:	f6ff af41 	blt.w	8024740 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80248be:	b21b      	sxth	r3, r3
 80248c0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80248c4:	fa0f f28e 	sxth.w	r2, lr
 80248c8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80248cc:	9200      	str	r2, [sp, #0]
 80248ce:	4639      	mov	r1, r7
 80248d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80248d2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80248d4:	f7ff fc54 	bl	8024180 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80248d8:	e732      	b.n	8024740 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80248da:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80248dc:	1421      	asrs	r1, r4, #16
 80248de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80248e0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80248e4:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80248e8:	1433      	asrs	r3, r6, #16
 80248ea:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80248ee:	fb07 1303 	mla	r3, r7, r3, r1
 80248f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80248f4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80248f8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80248fc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024900:	2a00      	cmp	r2, #0
 8024902:	f000 8108 	beq.w	8024b16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8024906:	684d      	ldr	r5, [r1, #4]
 8024908:	950d      	str	r5, [sp, #52]	; 0x34
 802490a:	0e2d      	lsrs	r5, r5, #24
 802490c:	9514      	str	r5, [sp, #80]	; 0x50
 802490e:	b178      	cbz	r0, 8024930 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024910:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8024914:	3f01      	subs	r7, #1
 8024916:	00bf      	lsls	r7, r7, #2
 8024918:	3704      	adds	r7, #4
 802491a:	eb01 0e07 	add.w	lr, r1, r7
 802491e:	59c9      	ldr	r1, [r1, r7]
 8024920:	9109      	str	r1, [sp, #36]	; 0x24
 8024922:	0e09      	lsrs	r1, r1, #24
 8024924:	9111      	str	r1, [sp, #68]	; 0x44
 8024926:	f8de 1004 	ldr.w	r1, [lr, #4]
 802492a:	910e      	str	r1, [sp, #56]	; 0x38
 802492c:	0e09      	lsrs	r1, r1, #24
 802492e:	9115      	str	r1, [sp, #84]	; 0x54
 8024930:	b292      	uxth	r2, r2
 8024932:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024934:	b280      	uxth	r0, r0
 8024936:	fb02 f900 	mul.w	r9, r2, r0
 802493a:	0112      	lsls	r2, r2, #4
 802493c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024940:	eba2 0e09 	sub.w	lr, r2, r9
 8024944:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024948:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802494a:	b280      	uxth	r0, r0
 802494c:	fa1f fe8e 	uxth.w	lr, lr
 8024950:	1a09      	subs	r1, r1, r0
 8024952:	fb0e f202 	mul.w	r2, lr, r2
 8024956:	b289      	uxth	r1, r1
 8024958:	fb01 220c 	mla	r2, r1, ip, r2
 802495c:	fb00 2205 	mla	r2, r0, r5, r2
 8024960:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024962:	fb09 2205 	mla	r2, r9, r5, r2
 8024966:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802496a:	2a00      	cmp	r2, #0
 802496c:	f000 80ca 	beq.w	8024b04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8024970:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024974:	d019      	beq.n	80249aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 8024976:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802497a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802497e:	fb0c fa0a 	mul.w	sl, ip, sl
 8024982:	fb0c fc03 	mul.w	ip, ip, r3
 8024986:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802498a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802498e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024992:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024996:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802499a:	4453      	add	r3, sl
 802499c:	0a3f      	lsrs	r7, r7, #8
 802499e:	0a1b      	lsrs	r3, r3, #8
 80249a0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80249a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80249a8:	433b      	orrs	r3, r7
 80249aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80249ac:	2dff      	cmp	r5, #255	; 0xff
 80249ae:	d020      	beq.n	80249f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 80249b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80249b2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80249b6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80249b8:	436f      	muls	r7, r5
 80249ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80249bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80249c0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80249c4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80249c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80249ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249ce:	fb05 fa0a 	mul.w	sl, r5, sl
 80249d2:	44bc      	add	ip, r7
 80249d4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80249d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80249e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80249e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80249ec:	ea4c 050a 	orr.w	r5, ip, sl
 80249f0:	950d      	str	r5, [sp, #52]	; 0x34
 80249f2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80249f4:	2dff      	cmp	r5, #255	; 0xff
 80249f6:	d020      	beq.n	8024a3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 80249f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80249fa:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80249fe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a00:	436f      	muls	r7, r5
 8024a02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024a04:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024a08:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a0a:	fb05 fa0c 	mul.w	sl, r5, ip
 8024a0e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a12:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a1a:	44bc      	add	ip, r7
 8024a1c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024a20:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024a24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a34:	ea4c 050a 	orr.w	r5, ip, sl
 8024a38:	9509      	str	r5, [sp, #36]	; 0x24
 8024a3a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024a3c:	2dff      	cmp	r5, #255	; 0xff
 8024a3e:	d020      	beq.n	8024a82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8024a40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024a42:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024a46:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024a48:	436f      	muls	r7, r5
 8024a4a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024a4c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a50:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024a54:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024a56:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a5e:	fb05 fa0a 	mul.w	sl, r5, sl
 8024a62:	44bc      	add	ip, r7
 8024a64:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024a68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a6c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024a70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a7c:	ea4c 050a 	orr.w	r5, ip, sl
 8024a80:	950e      	str	r5, [sp, #56]	; 0x38
 8024a82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024a84:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024a88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024a8c:	2aff      	cmp	r2, #255	; 0xff
 8024a8e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024a92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024a94:	fb0e f707 	mul.w	r7, lr, r7
 8024a98:	fb01 770c 	mla	r7, r1, ip, r7
 8024a9c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024aa0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024aa2:	fb00 770c 	mla	r7, r0, ip, r7
 8024aa6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024aaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024aac:	fb09 770c 	mla	r7, r9, ip, r7
 8024ab0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024ab4:	fb0e fe0c 	mul.w	lr, lr, ip
 8024ab8:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8024abc:	fb01 e303 	mla	r3, r1, r3, lr
 8024ac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024ac2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024ac6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024aca:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024acc:	fb00 330a 	mla	r3, r0, sl, r3
 8024ad0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024ad4:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024ad8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024adc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024ae0:	ea47 070c 	orr.w	r7, r7, ip
 8024ae4:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8024ae8:	d11e      	bne.n	8024b28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 8024aea:	097a      	lsrs	r2, r7, #5
 8024aec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8024af0:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024af4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024af8:	f023 0307 	bic.w	r3, r3, #7
 8024afc:	4313      	orrs	r3, r2
 8024afe:	431f      	orrs	r7, r3
 8024b00:	f8a8 7000 	strh.w	r7, [r8]
 8024b04:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024b06:	f108 0802 	add.w	r8, r8, #2
 8024b0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024b0e:	441c      	add	r4, r3
 8024b10:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024b12:	441e      	add	r6, r3
 8024b14:	e643      	b.n	802479e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8024b16:	2800      	cmp	r0, #0
 8024b18:	f43f af0a 	beq.w	8024930 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024b1c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024b20:	9109      	str	r1, [sp, #36]	; 0x24
 8024b22:	0e09      	lsrs	r1, r1, #24
 8024b24:	9111      	str	r1, [sp, #68]	; 0x44
 8024b26:	e703      	b.n	8024930 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024b28:	f8b8 1000 	ldrh.w	r1, [r8]
 8024b2c:	43d2      	mvns	r2, r2
 8024b2e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8024b32:	fa5f fe82 	uxtb.w	lr, r2
 8024b36:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024b3a:	10c8      	asrs	r0, r1, #3
 8024b3c:	00ca      	lsls	r2, r1, #3
 8024b3e:	fb0c fc0e 	mul.w	ip, ip, lr
 8024b42:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024b46:	b2d2      	uxtb	r2, r2
 8024b48:	f10c 0101 	add.w	r1, ip, #1
 8024b4c:	fb00 f00e 	mul.w	r0, r0, lr
 8024b50:	fb02 f20e 	mul.w	r2, r2, lr
 8024b54:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024b58:	0c39      	lsrs	r1, r7, #16
 8024b5a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024b5e:	4910      	ldr	r1, [pc, #64]	; (8024ba0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8024b60:	fa5f fc8c 	uxtb.w	ip, ip
 8024b64:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8024b68:	1c41      	adds	r1, r0, #1
 8024b6a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024b6e:	1c51      	adds	r1, r2, #1
 8024b70:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024b74:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024b78:	00c0      	lsls	r0, r0, #3
 8024b7a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024b7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024b82:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024b86:	ea4c 0c00 	orr.w	ip, ip, r0
 8024b8a:	ea47 0c0c 	orr.w	ip, r7, ip
 8024b8e:	f8a8 c000 	strh.w	ip, [r8]
 8024b92:	e7b7      	b.n	8024b04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8024b94:	b01b      	add	sp, #108	; 0x6c
 8024b96:	ecbd 8b08 	vpop	{d8-d11}
 8024b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b9e:	bf00      	nop
 8024ba0:	fffff800 	.word	0xfffff800

08024ba4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8024ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ba8:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8024bac:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024bb0:	2c00      	cmp	r4, #0
 8024bb2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024bb6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8024bba:	fb04 ce03 	mla	lr, r4, r3, ip
 8024bbe:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8024bc2:	db60      	blt.n	8024c86 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8024bc4:	45a1      	cmp	r9, r4
 8024bc6:	dd5e      	ble.n	8024c86 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8024bc8:	f1bc 0f00 	cmp.w	ip, #0
 8024bcc:	db59      	blt.n	8024c82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8024bce:	45e0      	cmp	r8, ip
 8024bd0:	dd57      	ble.n	8024c82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8024bd2:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8024bd6:	f01e 0f01 	tst.w	lr, #1
 8024bda:	5c16      	ldrb	r6, [r2, r0]
 8024bdc:	bf0c      	ite	eq
 8024bde:	f006 060f 	andeq.w	r6, r6, #15
 8024be2:	1136      	asrne	r6, r6, #4
 8024be4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024be8:	b2f6      	uxtb	r6, r6
 8024bea:	f11c 0001 	adds.w	r0, ip, #1
 8024bee:	d44d      	bmi.n	8024c8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8024bf0:	4580      	cmp	r8, r0
 8024bf2:	dd4b      	ble.n	8024c8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8024bf4:	2d00      	cmp	r5, #0
 8024bf6:	d04b      	beq.n	8024c90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8024bf8:	f10e 0a01 	add.w	sl, lr, #1
 8024bfc:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8024c00:	f01a 0f01 	tst.w	sl, #1
 8024c04:	5c10      	ldrb	r0, [r2, r0]
 8024c06:	bf0c      	ite	eq
 8024c08:	f000 000f 	andeq.w	r0, r0, #15
 8024c0c:	1100      	asrne	r0, r0, #4
 8024c0e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024c12:	b2c0      	uxtb	r0, r0
 8024c14:	3401      	adds	r4, #1
 8024c16:	d43f      	bmi.n	8024c98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8024c18:	45a1      	cmp	r9, r4
 8024c1a:	dd3d      	ble.n	8024c98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8024c1c:	2f00      	cmp	r7, #0
 8024c1e:	f000 80a8 	beq.w	8024d72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 8024c22:	f1bc 0f00 	cmp.w	ip, #0
 8024c26:	db35      	blt.n	8024c94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8024c28:	45e0      	cmp	r8, ip
 8024c2a:	dd33      	ble.n	8024c94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8024c2c:	eb03 090e 	add.w	r9, r3, lr
 8024c30:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8024c34:	f019 0f01 	tst.w	r9, #1
 8024c38:	5d14      	ldrb	r4, [r2, r4]
 8024c3a:	bf0c      	ite	eq
 8024c3c:	f004 040f 	andeq.w	r4, r4, #15
 8024c40:	1124      	asrne	r4, r4, #4
 8024c42:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024c46:	b2e4      	uxtb	r4, r4
 8024c48:	f11c 0c01 	adds.w	ip, ip, #1
 8024c4c:	d427      	bmi.n	8024c9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8024c4e:	45e0      	cmp	r8, ip
 8024c50:	dd25      	ble.n	8024c9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8024c52:	b335      	cbz	r5, 8024ca2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8024c54:	3301      	adds	r3, #1
 8024c56:	449e      	add	lr, r3
 8024c58:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024c5c:	f01e 0f01 	tst.w	lr, #1
 8024c60:	5cd2      	ldrb	r2, [r2, r3]
 8024c62:	bf0c      	ite	eq
 8024c64:	f002 020f 	andeq.w	r2, r2, #15
 8024c68:	1112      	asrne	r2, r2, #4
 8024c6a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024c6e:	b2d3      	uxtb	r3, r2
 8024c70:	2d0f      	cmp	r5, #15
 8024c72:	d917      	bls.n	8024ca4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8024c74:	4b42      	ldr	r3, [pc, #264]	; (8024d80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 8024c76:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8024c7a:	4a42      	ldr	r2, [pc, #264]	; (8024d84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8024c7c:	4842      	ldr	r0, [pc, #264]	; (8024d88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8024c7e:	f001 f80b 	bl	8025c98 <__assert_func>
 8024c82:	2600      	movs	r6, #0
 8024c84:	e7b1      	b.n	8024bea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8024c86:	2000      	movs	r0, #0
 8024c88:	4606      	mov	r6, r0
 8024c8a:	e7c3      	b.n	8024c14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8024c8c:	2000      	movs	r0, #0
 8024c8e:	e7c1      	b.n	8024c14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8024c90:	4628      	mov	r0, r5
 8024c92:	e7bf      	b.n	8024c14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8024c94:	2400      	movs	r4, #0
 8024c96:	e7d7      	b.n	8024c48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8024c98:	2300      	movs	r3, #0
 8024c9a:	461c      	mov	r4, r3
 8024c9c:	e7e8      	b.n	8024c70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8024c9e:	2300      	movs	r3, #0
 8024ca0:	e7e6      	b.n	8024c70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8024ca2:	462b      	mov	r3, r5
 8024ca4:	2f0f      	cmp	r7, #15
 8024ca6:	d8e5      	bhi.n	8024c74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8024ca8:	b2ad      	uxth	r5, r5
 8024caa:	b2bf      	uxth	r7, r7
 8024cac:	fb05 fc07 	mul.w	ip, r5, r7
 8024cb0:	012d      	lsls	r5, r5, #4
 8024cb2:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8024cb6:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8024cba:	eba5 050c 	sub.w	r5, r5, ip
 8024cbe:	b2bf      	uxth	r7, r7
 8024cc0:	b2ad      	uxth	r5, r5
 8024cc2:	1bd2      	subs	r2, r2, r7
 8024cc4:	4368      	muls	r0, r5
 8024cc6:	b292      	uxth	r2, r2
 8024cc8:	fb06 0002 	mla	r0, r6, r2, r0
 8024ccc:	fb07 0404 	mla	r4, r7, r4, r0
 8024cd0:	fb0c 4303 	mla	r3, ip, r3, r4
 8024cd4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024cd8:	b1b3      	cbz	r3, 8024d08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8024cda:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8024cde:	435a      	muls	r2, r3
 8024ce0:	1c53      	adds	r3, r2, #1
 8024ce2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024ce6:	4a29      	ldr	r2, [pc, #164]	; (8024d8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8024ce8:	121b      	asrs	r3, r3, #8
 8024cea:	6812      	ldr	r2, [r2, #0]
 8024cec:	2bff      	cmp	r3, #255	; 0xff
 8024cee:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8024cf2:	d10b      	bne.n	8024d0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8024cf4:	0950      	lsrs	r0, r2, #5
 8024cf6:	4b26      	ldr	r3, [pc, #152]	; (8024d90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8024cf8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024cfc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d00:	4033      	ands	r3, r6
 8024d02:	4318      	orrs	r0, r3
 8024d04:	4302      	orrs	r2, r0
 8024d06:	800a      	strh	r2, [r1, #0]
 8024d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024d0c:	880d      	ldrh	r5, [r1, #0]
 8024d0e:	b29f      	uxth	r7, r3
 8024d10:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8024d14:	43db      	mvns	r3, r3
 8024d16:	122c      	asrs	r4, r5, #8
 8024d18:	fb10 f007 	smulbb	r0, r0, r7
 8024d1c:	b2db      	uxtb	r3, r3
 8024d1e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024d22:	b2f6      	uxtb	r6, r6
 8024d24:	b2d2      	uxtb	r2, r2
 8024d26:	fb04 0403 	mla	r4, r4, r3, r0
 8024d2a:	10e8      	asrs	r0, r5, #3
 8024d2c:	fb12 f207 	smulbb	r2, r2, r7
 8024d30:	00ed      	lsls	r5, r5, #3
 8024d32:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024d36:	b2a4      	uxth	r4, r4
 8024d38:	fb16 f607 	smulbb	r6, r6, r7
 8024d3c:	b2ed      	uxtb	r5, r5
 8024d3e:	fb00 6603 	mla	r6, r0, r3, r6
 8024d42:	fb05 2303 	mla	r3, r5, r3, r2
 8024d46:	b2b0      	uxth	r0, r6
 8024d48:	b29a      	uxth	r2, r3
 8024d4a:	1c63      	adds	r3, r4, #1
 8024d4c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024d50:	1c53      	adds	r3, r2, #1
 8024d52:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024d56:	1c42      	adds	r2, r0, #1
 8024d58:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024d5c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024d60:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024d64:	0940      	lsrs	r0, r0, #5
 8024d66:	4323      	orrs	r3, r4
 8024d68:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d6c:	4303      	orrs	r3, r0
 8024d6e:	800b      	strh	r3, [r1, #0]
 8024d70:	e7ca      	b.n	8024d08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8024d72:	2d0f      	cmp	r5, #15
 8024d74:	f63f af7e 	bhi.w	8024c74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8024d78:	463b      	mov	r3, r7
 8024d7a:	463c      	mov	r4, r7
 8024d7c:	e794      	b.n	8024ca8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8024d7e:	bf00      	nop
 8024d80:	0802a1f1 	.word	0x0802a1f1
 8024d84:	0802a7be 	.word	0x0802a7be
 8024d88:	0802a275 	.word	0x0802a275
 8024d8c:	2400aef4 	.word	0x2400aef4
 8024d90:	00fff800 	.word	0x00fff800

08024d94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d98:	ed2d 8b08 	vpush	{d8-d11}
 8024d9c:	b097      	sub	sp, #92	; 0x5c
 8024d9e:	eeb0 aa40 	vmov.f32	s20, s0
 8024da2:	eef0 9a60 	vmov.f32	s19, s1
 8024da6:	9214      	str	r2, [sp, #80]	; 0x50
 8024da8:	eeb0 9a41 	vmov.f32	s18, s2
 8024dac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024dae:	eeb0 8a62 	vmov.f32	s16, s5
 8024db2:	9309      	str	r3, [sp, #36]	; 0x24
 8024db4:	eef0 8a43 	vmov.f32	s17, s6
 8024db8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024dbc:	eef0 ba44 	vmov.f32	s23, s8
 8024dc0:	9015      	str	r0, [sp, #84]	; 0x54
 8024dc2:	eeb0 ba64 	vmov.f32	s22, s9
 8024dc6:	6850      	ldr	r0, [r2, #4]
 8024dc8:	eef0 aa45 	vmov.f32	s21, s10
 8024dcc:	910d      	str	r1, [sp, #52]	; 0x34
 8024dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8024dd0:	6812      	ldr	r2, [r2, #0]
 8024dd2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024dd6:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8024dda:	fb00 1303 	mla	r3, r0, r3, r1
 8024dde:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024de2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024de4:	689b      	ldr	r3, [r3, #8]
 8024de6:	3301      	adds	r3, #1
 8024de8:	f023 0301 	bic.w	r3, r3, #1
 8024dec:	930a      	str	r3, [sp, #40]	; 0x28
 8024dee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024df0:	681f      	ldr	r7, [r3, #0]
 8024df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024df4:	2b00      	cmp	r3, #0
 8024df6:	dc03      	bgt.n	8024e00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024df8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024dfa:	2b00      	cmp	r3, #0
 8024dfc:	f340 8289 	ble.w	8025312 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8024e00:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024e02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024e06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024e0a:	1e48      	subs	r0, r1, #1
 8024e0c:	f102 3cff 	add.w	ip, r2, #4294967295
 8024e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e12:	2b00      	cmp	r3, #0
 8024e14:	f340 80c5 	ble.w	8024fa2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024e18:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024e1c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024e20:	d406      	bmi.n	8024e30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024e22:	4586      	cmp	lr, r0
 8024e24:	da04      	bge.n	8024e30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024e26:	2b00      	cmp	r3, #0
 8024e28:	db02      	blt.n	8024e30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024e2a:	4563      	cmp	r3, ip
 8024e2c:	f2c0 80ba 	blt.w	8024fa4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8024e30:	f11e 0e01 	adds.w	lr, lr, #1
 8024e34:	f100 80ab 	bmi.w	8024f8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024e38:	4571      	cmp	r1, lr
 8024e3a:	f2c0 80a8 	blt.w	8024f8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024e3e:	3301      	adds	r3, #1
 8024e40:	f100 80a5 	bmi.w	8024f8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024e44:	429a      	cmp	r2, r3
 8024e46:	f2c0 80a2 	blt.w	8024f8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e4c:	46c8      	mov	r8, r9
 8024e4e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8024e52:	930e      	str	r3, [sp, #56]	; 0x38
 8024e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024e56:	2b00      	cmp	r3, #0
 8024e58:	f340 80c4 	ble.w	8024fe4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8024e5c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024e5e:	1430      	asrs	r0, r6, #16
 8024e60:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024e64:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024e68:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024e6c:	1423      	asrs	r3, r4, #16
 8024e6e:	f100 814f 	bmi.w	8025110 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024e72:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024e76:	455b      	cmp	r3, fp
 8024e78:	f280 814a 	bge.w	8025110 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024e7c:	2800      	cmp	r0, #0
 8024e7e:	f2c0 8147 	blt.w	8025110 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024e82:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024e86:	4558      	cmp	r0, fp
 8024e88:	f280 8142 	bge.w	8025110 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024e8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024e8e:	fb00 3305 	mla	r3, r0, r5, r3
 8024e92:	0858      	lsrs	r0, r3, #1
 8024e94:	07dd      	lsls	r5, r3, #31
 8024e96:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024e9a:	bf54      	ite	pl
 8024e9c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024ea0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024ea4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024ea8:	fa5f fc8c 	uxtb.w	ip, ip
 8024eac:	2a00      	cmp	r2, #0
 8024eae:	f000 80dd 	beq.w	802506c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8024eb2:	1c58      	adds	r0, r3, #1
 8024eb4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024eb8:	07c0      	lsls	r0, r0, #31
 8024eba:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024ebe:	bf54      	ite	pl
 8024ec0:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024ec4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024ec8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024ecc:	fa5f f08e 	uxtb.w	r0, lr
 8024ed0:	9010      	str	r0, [sp, #64]	; 0x40
 8024ed2:	b1d9      	cbz	r1, 8024f0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8024ed4:	4453      	add	r3, sl
 8024ed6:	0858      	lsrs	r0, r3, #1
 8024ed8:	07dd      	lsls	r5, r3, #31
 8024eda:	f103 0301 	add.w	r3, r3, #1
 8024ede:	5c38      	ldrb	r0, [r7, r0]
 8024ee0:	bf54      	ite	pl
 8024ee2:	f000 000f 	andpl.w	r0, r0, #15
 8024ee6:	1100      	asrmi	r0, r0, #4
 8024ee8:	07dd      	lsls	r5, r3, #31
 8024eea:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024eee:	b2c0      	uxtb	r0, r0
 8024ef0:	900b      	str	r0, [sp, #44]	; 0x2c
 8024ef2:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8024ef6:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024efa:	bf54      	ite	pl
 8024efc:	f00e 030f 	andpl.w	r3, lr, #15
 8024f00:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024f04:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024f08:	b2db      	uxtb	r3, r3
 8024f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8024f0c:	b292      	uxth	r2, r2
 8024f0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024f10:	b289      	uxth	r1, r1
 8024f12:	fb02 f301 	mul.w	r3, r2, r1
 8024f16:	0112      	lsls	r2, r2, #4
 8024f18:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024f1c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024f20:	1ad2      	subs	r2, r2, r3
 8024f22:	b289      	uxth	r1, r1
 8024f24:	b292      	uxth	r2, r2
 8024f26:	1a40      	subs	r0, r0, r1
 8024f28:	436a      	muls	r2, r5
 8024f2a:	b280      	uxth	r0, r0
 8024f2c:	fb0c 2c00 	mla	ip, ip, r0, r2
 8024f30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024f32:	fb01 c102 	mla	r1, r1, r2, ip
 8024f36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024f38:	fb03 1302 	mla	r3, r3, r2, r1
 8024f3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024f40:	b1db      	cbz	r3, 8024f7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024f42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024f44:	4353      	muls	r3, r2
 8024f46:	1c5a      	adds	r2, r3, #1
 8024f48:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024f4c:	4ac6      	ldr	r2, [pc, #792]	; (8025268 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8024f4e:	121b      	asrs	r3, r3, #8
 8024f50:	6812      	ldr	r2, [r2, #0]
 8024f52:	2bff      	cmp	r3, #255	; 0xff
 8024f54:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024f58:	f040 8099 	bne.w	802508e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8024f5c:	0953      	lsrs	r3, r2, #5
 8024f5e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024f62:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024f66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024f6a:	f02c 0c07 	bic.w	ip, ip, #7
 8024f6e:	ea43 0c0c 	orr.w	ip, r3, ip
 8024f72:	ea4c 0202 	orr.w	r2, ip, r2
 8024f76:	f8a8 2000 	strh.w	r2, [r8]
 8024f7a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024f7c:	f108 0802 	add.w	r8, r8, #2
 8024f80:	441c      	add	r4, r3
 8024f82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f84:	441e      	add	r6, r3
 8024f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f88:	3b01      	subs	r3, #1
 8024f8a:	930e      	str	r3, [sp, #56]	; 0x38
 8024f8c:	e762      	b.n	8024e54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8024f8e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024f90:	f109 0902 	add.w	r9, r9, #2
 8024f94:	441c      	add	r4, r3
 8024f96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f98:	441e      	add	r6, r3
 8024f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f9c:	3b01      	subs	r3, #1
 8024f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8024fa0:	e736      	b.n	8024e10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024fa2:	d024      	beq.n	8024fee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8024fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fa6:	982b      	ldr	r0, [sp, #172]	; 0xac
 8024fa8:	3b01      	subs	r3, #1
 8024faa:	fb00 4003 	mla	r0, r0, r3, r4
 8024fae:	1400      	asrs	r0, r0, #16
 8024fb0:	f53f af4b 	bmi.w	8024e4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024fb4:	3901      	subs	r1, #1
 8024fb6:	4288      	cmp	r0, r1
 8024fb8:	f6bf af47 	bge.w	8024e4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024fbc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8024fbe:	fb01 6303 	mla	r3, r1, r3, r6
 8024fc2:	141b      	asrs	r3, r3, #16
 8024fc4:	f53f af41 	bmi.w	8024e4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024fc8:	3a01      	subs	r2, #1
 8024fca:	4293      	cmp	r3, r2
 8024fcc:	f6bf af3d 	bge.w	8024e4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024fd0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8024fd4:	46c8      	mov	r8, r9
 8024fd6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024fda:	930e      	str	r3, [sp, #56]	; 0x38
 8024fdc:	f1bb 0f00 	cmp.w	fp, #0
 8024fe0:	f300 80b7 	bgt.w	8025152 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8024fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fe6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024fea:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024ff0:	2b00      	cmp	r3, #0
 8024ff2:	f340 818e 	ble.w	8025312 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8024ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024ffa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ffc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025000:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025004:	eef0 6a48 	vmov.f32	s13, s16
 8025008:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802500c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025010:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025014:	ee16 4a90 	vmov	r4, s13
 8025018:	eef0 6a68 	vmov.f32	s13, s17
 802501c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025020:	ee16 6a90 	vmov	r6, s13
 8025024:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025028:	ee69 7a27 	vmul.f32	s15, s18, s15
 802502c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025030:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025034:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025038:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802503c:	ee18 2a10 	vmov	r2, s16
 8025040:	eeb0 8a47 	vmov.f32	s16, s14
 8025044:	fb92 f3f3 	sdiv	r3, r2, r3
 8025048:	ee18 2a90 	vmov	r2, s17
 802504c:	932b      	str	r3, [sp, #172]	; 0xac
 802504e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025050:	eef0 8a67 	vmov.f32	s17, s15
 8025054:	fb92 f3f3 	sdiv	r3, r2, r3
 8025058:	932c      	str	r3, [sp, #176]	; 0xb0
 802505a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802505c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802505e:	3b01      	subs	r3, #1
 8025060:	930d      	str	r3, [sp, #52]	; 0x34
 8025062:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025064:	bf08      	it	eq
 8025066:	4613      	moveq	r3, r2
 8025068:	9309      	str	r3, [sp, #36]	; 0x24
 802506a:	e6c2      	b.n	8024df2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802506c:	2900      	cmp	r1, #0
 802506e:	f43f af4d 	beq.w	8024f0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8025072:	eb0a 0003 	add.w	r0, sl, r3
 8025076:	0843      	lsrs	r3, r0, #1
 8025078:	07c0      	lsls	r0, r0, #31
 802507a:	5cfb      	ldrb	r3, [r7, r3]
 802507c:	bf54      	ite	pl
 802507e:	f003 030f 	andpl.w	r3, r3, #15
 8025082:	111b      	asrmi	r3, r3, #4
 8025084:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025088:	b2db      	uxtb	r3, r3
 802508a:	930b      	str	r3, [sp, #44]	; 0x2c
 802508c:	e73e      	b.n	8024f0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802508e:	f8b8 e000 	ldrh.w	lr, [r8]
 8025092:	fa1f fb83 	uxth.w	fp, r3
 8025096:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802509a:	43db      	mvns	r3, r3
 802509c:	ea4f 202e 	mov.w	r0, lr, asr #8
 80250a0:	fb11 f10b 	smulbb	r1, r1, fp
 80250a4:	b2db      	uxtb	r3, r3
 80250a6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80250aa:	fa5f fc8c 	uxtb.w	ip, ip
 80250ae:	b2d2      	uxtb	r2, r2
 80250b0:	fb00 1003 	mla	r0, r0, r3, r1
 80250b4:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80250b8:	fb1c fc0b 	smulbb	ip, ip, fp
 80250bc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80250c0:	b280      	uxth	r0, r0
 80250c2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80250c6:	fb12 fb0b 	smulbb	fp, r2, fp
 80250ca:	fa5f fe8e 	uxtb.w	lr, lr
 80250ce:	fb01 cc03 	mla	ip, r1, r3, ip
 80250d2:	fb0e bb03 	mla	fp, lr, r3, fp
 80250d6:	1c43      	adds	r3, r0, #1
 80250d8:	fa1f fc8c 	uxth.w	ip, ip
 80250dc:	fa1f fb8b 	uxth.w	fp, fp
 80250e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80250e4:	f10c 0101 	add.w	r1, ip, #1
 80250e8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80250ec:	f10b 0001 	add.w	r0, fp, #1
 80250f0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80250f4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80250f8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80250fc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025100:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025104:	4318      	orrs	r0, r3
 8025106:	ea40 000c 	orr.w	r0, r0, ip
 802510a:	f8a8 0000 	strh.w	r0, [r8]
 802510e:	e734      	b.n	8024f7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025110:	f113 0b01 	adds.w	fp, r3, #1
 8025114:	f53f af31 	bmi.w	8024f7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025118:	45dc      	cmp	ip, fp
 802511a:	f6ff af2e 	blt.w	8024f7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802511e:	f110 0b01 	adds.w	fp, r0, #1
 8025122:	f53f af2a 	bmi.w	8024f7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025126:	45de      	cmp	lr, fp
 8025128:	f6ff af27 	blt.w	8024f7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802512c:	9302      	str	r3, [sp, #8]
 802512e:	fa0f f38e 	sxth.w	r3, lr
 8025132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025134:	9301      	str	r3, [sp, #4]
 8025136:	fa0f f38c 	sxth.w	r3, ip
 802513a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802513e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8025142:	9300      	str	r3, [sp, #0]
 8025144:	463a      	mov	r2, r7
 8025146:	4653      	mov	r3, sl
 8025148:	4641      	mov	r1, r8
 802514a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802514c:	f7ff fd2a 	bl	8024ba4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8025150:	e713      	b.n	8024f7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025152:	1422      	asrs	r2, r4, #16
 8025154:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025156:	1433      	asrs	r3, r6, #16
 8025158:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802515c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025160:	fb05 2303 	mla	r3, r5, r3, r2
 8025164:	085a      	lsrs	r2, r3, #1
 8025166:	07dd      	lsls	r5, r3, #31
 8025168:	5cba      	ldrb	r2, [r7, r2]
 802516a:	bf54      	ite	pl
 802516c:	f002 020f 	andpl.w	r2, r2, #15
 8025170:	1112      	asrmi	r2, r2, #4
 8025172:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025176:	b2d2      	uxtb	r2, r2
 8025178:	2900      	cmp	r1, #0
 802517a:	d077      	beq.n	802526c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802517c:	f103 0e01 	add.w	lr, r3, #1
 8025180:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8025184:	f01e 0f01 	tst.w	lr, #1
 8025188:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802518c:	bf0c      	ite	eq
 802518e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025192:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025196:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802519a:	fa5f f58c 	uxtb.w	r5, ip
 802519e:	9512      	str	r5, [sp, #72]	; 0x48
 80251a0:	b308      	cbz	r0, 80251e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80251a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80251a4:	442b      	add	r3, r5
 80251a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80251aa:	07dd      	lsls	r5, r3, #31
 80251ac:	f103 0301 	add.w	r3, r3, #1
 80251b0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80251b4:	bf54      	ite	pl
 80251b6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80251ba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80251be:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80251c2:	fa5f f58c 	uxtb.w	r5, ip
 80251c6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80251ca:	950c      	str	r5, [sp, #48]	; 0x30
 80251cc:	07dd      	lsls	r5, r3, #31
 80251ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80251d2:	bf54      	ite	pl
 80251d4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80251d8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80251dc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80251e0:	fa5f f38c 	uxtb.w	r3, ip
 80251e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80251e6:	b289      	uxth	r1, r1
 80251e8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80251ea:	b280      	uxth	r0, r0
 80251ec:	fb01 f300 	mul.w	r3, r1, r0
 80251f0:	0109      	lsls	r1, r1, #4
 80251f2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80251f6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80251fa:	1ac9      	subs	r1, r1, r3
 80251fc:	b280      	uxth	r0, r0
 80251fe:	b289      	uxth	r1, r1
 8025200:	ebac 0c00 	sub.w	ip, ip, r0
 8025204:	4369      	muls	r1, r5
 8025206:	fa1f fc8c 	uxth.w	ip, ip
 802520a:	fb02 120c 	mla	r2, r2, ip, r1
 802520e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025210:	fb00 2001 	mla	r0, r0, r1, r2
 8025214:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025216:	fb03 0302 	mla	r3, r3, r2, r0
 802521a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802521e:	b1d3      	cbz	r3, 8025256 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025222:	4353      	muls	r3, r2
 8025224:	1c5a      	adds	r2, r3, #1
 8025226:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802522a:	4a0f      	ldr	r2, [pc, #60]	; (8025268 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802522c:	121b      	asrs	r3, r3, #8
 802522e:	6812      	ldr	r2, [r2, #0]
 8025230:	2bff      	cmp	r3, #255	; 0xff
 8025232:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8025236:	d12d      	bne.n	8025294 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8025238:	0953      	lsrs	r3, r2, #5
 802523a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802523e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025242:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025246:	f02c 0c07 	bic.w	ip, ip, #7
 802524a:	ea43 0c0c 	orr.w	ip, r3, ip
 802524e:	ea4c 0202 	orr.w	r2, ip, r2
 8025252:	f8a8 2000 	strh.w	r2, [r8]
 8025256:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025258:	f108 0802 	add.w	r8, r8, #2
 802525c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025260:	441c      	add	r4, r3
 8025262:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025264:	441e      	add	r6, r3
 8025266:	e6b9      	b.n	8024fdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8025268:	2400aef4 	.word	0x2400aef4
 802526c:	2800      	cmp	r0, #0
 802526e:	d0ba      	beq.n	80251e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025270:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025272:	442b      	add	r3, r5
 8025274:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025278:	07db      	lsls	r3, r3, #31
 802527a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802527e:	bf54      	ite	pl
 8025280:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025284:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025288:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802528c:	fa5f f38c 	uxtb.w	r3, ip
 8025290:	930c      	str	r3, [sp, #48]	; 0x30
 8025292:	e7a8      	b.n	80251e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025294:	f8b8 e000 	ldrh.w	lr, [r8]
 8025298:	fa1f fa83 	uxth.w	sl, r3
 802529c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80252a0:	43db      	mvns	r3, r3
 80252a2:	ea4f 202e 	mov.w	r0, lr, asr #8
 80252a6:	fb11 f10a 	smulbb	r1, r1, sl
 80252aa:	b2db      	uxtb	r3, r3
 80252ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80252b0:	b2d2      	uxtb	r2, r2
 80252b2:	fa5f fc8c 	uxtb.w	ip, ip
 80252b6:	fb00 1003 	mla	r0, r0, r3, r1
 80252ba:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80252be:	fb12 f20a 	smulbb	r2, r2, sl
 80252c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80252c6:	b280      	uxth	r0, r0
 80252c8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80252cc:	fb1c fc0a 	smulbb	ip, ip, sl
 80252d0:	fa5f fe8e 	uxtb.w	lr, lr
 80252d4:	fb0e 2203 	mla	r2, lr, r3, r2
 80252d8:	fb01 cc03 	mla	ip, r1, r3, ip
 80252dc:	1c43      	adds	r3, r0, #1
 80252de:	b292      	uxth	r2, r2
 80252e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80252e4:	1c51      	adds	r1, r2, #1
 80252e6:	fa1f fc8c 	uxth.w	ip, ip
 80252ea:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80252ee:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80252f2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80252f6:	4308      	orrs	r0, r1
 80252f8:	f10c 0101 	add.w	r1, ip, #1
 80252fc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025300:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025304:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025308:	ea40 000c 	orr.w	r0, r0, ip
 802530c:	f8a8 0000 	strh.w	r0, [r8]
 8025310:	e7a1      	b.n	8025256 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025312:	b017      	add	sp, #92	; 0x5c
 8025314:	ecbd 8b08 	vpop	{d8-d11}
 8025318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802531c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802531c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025320:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8025324:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8025328:	2c00      	cmp	r4, #0
 802532a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802532e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8025332:	fb04 ce03 	mla	lr, r4, r3, ip
 8025336:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802533a:	db60      	blt.n	80253fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802533c:	45a1      	cmp	r9, r4
 802533e:	dd5e      	ble.n	80253fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8025340:	f1bc 0f00 	cmp.w	ip, #0
 8025344:	db59      	blt.n	80253fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8025346:	45e0      	cmp	r8, ip
 8025348:	dd57      	ble.n	80253fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802534a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802534e:	f01e 0f01 	tst.w	lr, #1
 8025352:	5c16      	ldrb	r6, [r2, r0]
 8025354:	bf0c      	ite	eq
 8025356:	f006 060f 	andeq.w	r6, r6, #15
 802535a:	1136      	asrne	r6, r6, #4
 802535c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025360:	b2f6      	uxtb	r6, r6
 8025362:	f11c 0001 	adds.w	r0, ip, #1
 8025366:	d44d      	bmi.n	8025404 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8025368:	4580      	cmp	r8, r0
 802536a:	dd4b      	ble.n	8025404 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802536c:	2d00      	cmp	r5, #0
 802536e:	d04b      	beq.n	8025408 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8025370:	f10e 0a01 	add.w	sl, lr, #1
 8025374:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8025378:	f01a 0f01 	tst.w	sl, #1
 802537c:	5c10      	ldrb	r0, [r2, r0]
 802537e:	bf0c      	ite	eq
 8025380:	f000 000f 	andeq.w	r0, r0, #15
 8025384:	1100      	asrne	r0, r0, #4
 8025386:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802538a:	b2c0      	uxtb	r0, r0
 802538c:	3401      	adds	r4, #1
 802538e:	d43f      	bmi.n	8025410 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8025390:	45a1      	cmp	r9, r4
 8025392:	dd3d      	ble.n	8025410 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8025394:	2f00      	cmp	r7, #0
 8025396:	f000 8093 	beq.w	80254c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802539a:	f1bc 0f00 	cmp.w	ip, #0
 802539e:	db35      	blt.n	802540c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80253a0:	45e0      	cmp	r8, ip
 80253a2:	dd33      	ble.n	802540c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80253a4:	eb03 090e 	add.w	r9, r3, lr
 80253a8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80253ac:	f019 0f01 	tst.w	r9, #1
 80253b0:	5d14      	ldrb	r4, [r2, r4]
 80253b2:	bf0c      	ite	eq
 80253b4:	f004 040f 	andeq.w	r4, r4, #15
 80253b8:	1124      	asrne	r4, r4, #4
 80253ba:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80253be:	b2e4      	uxtb	r4, r4
 80253c0:	f11c 0c01 	adds.w	ip, ip, #1
 80253c4:	d427      	bmi.n	8025416 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80253c6:	45e0      	cmp	r8, ip
 80253c8:	dd25      	ble.n	8025416 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80253ca:	b335      	cbz	r5, 802541a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 80253cc:	3301      	adds	r3, #1
 80253ce:	449e      	add	lr, r3
 80253d0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80253d4:	f01e 0f01 	tst.w	lr, #1
 80253d8:	5cd2      	ldrb	r2, [r2, r3]
 80253da:	bf0c      	ite	eq
 80253dc:	f002 020f 	andeq.w	r2, r2, #15
 80253e0:	1112      	asrne	r2, r2, #4
 80253e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80253e6:	b2d3      	uxtb	r3, r2
 80253e8:	2d0f      	cmp	r5, #15
 80253ea:	d917      	bls.n	802541c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 80253ec:	4b37      	ldr	r3, [pc, #220]	; (80254cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 80253ee:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80253f2:	4a37      	ldr	r2, [pc, #220]	; (80254d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 80253f4:	4837      	ldr	r0, [pc, #220]	; (80254d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 80253f6:	f000 fc4f 	bl	8025c98 <__assert_func>
 80253fa:	2600      	movs	r6, #0
 80253fc:	e7b1      	b.n	8025362 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 80253fe:	2000      	movs	r0, #0
 8025400:	4606      	mov	r6, r0
 8025402:	e7c3      	b.n	802538c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8025404:	2000      	movs	r0, #0
 8025406:	e7c1      	b.n	802538c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8025408:	4628      	mov	r0, r5
 802540a:	e7bf      	b.n	802538c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802540c:	2400      	movs	r4, #0
 802540e:	e7d7      	b.n	80253c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8025410:	2300      	movs	r3, #0
 8025412:	461c      	mov	r4, r3
 8025414:	e7e8      	b.n	80253e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8025416:	2300      	movs	r3, #0
 8025418:	e7e6      	b.n	80253e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802541a:	462b      	mov	r3, r5
 802541c:	2f0f      	cmp	r7, #15
 802541e:	d8e5      	bhi.n	80253ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8025420:	b2ad      	uxth	r5, r5
 8025422:	b2bf      	uxth	r7, r7
 8025424:	fb05 fc07 	mul.w	ip, r5, r7
 8025428:	012d      	lsls	r5, r5, #4
 802542a:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802542e:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8025432:	eba5 050c 	sub.w	r5, r5, ip
 8025436:	b2bf      	uxth	r7, r7
 8025438:	b2ad      	uxth	r5, r5
 802543a:	1bd2      	subs	r2, r2, r7
 802543c:	4368      	muls	r0, r5
 802543e:	b292      	uxth	r2, r2
 8025440:	fb06 0002 	mla	r0, r6, r2, r0
 8025444:	fb07 0404 	mla	r4, r7, r4, r0
 8025448:	fb0c 4303 	mla	r3, ip, r3, r4
 802544c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025450:	b3a3      	cbz	r3, 80254bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8025452:	4a21      	ldr	r2, [pc, #132]	; (80254d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8025454:	880e      	ldrh	r6, [r1, #0]
 8025456:	6815      	ldr	r5, [r2, #0]
 8025458:	b29a      	uxth	r2, r3
 802545a:	1234      	asrs	r4, r6, #8
 802545c:	43db      	mvns	r3, r3
 802545e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8025462:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8025466:	b2db      	uxtb	r3, r3
 8025468:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802546c:	fb10 f002 	smulbb	r0, r0, r2
 8025470:	b2ed      	uxtb	r5, r5
 8025472:	fb17 f702 	smulbb	r7, r7, r2
 8025476:	fb04 0403 	mla	r4, r4, r3, r0
 802547a:	10f0      	asrs	r0, r6, #3
 802547c:	fb15 f202 	smulbb	r2, r5, r2
 8025480:	00f6      	lsls	r6, r6, #3
 8025482:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025486:	b2a4      	uxth	r4, r4
 8025488:	b2f6      	uxtb	r6, r6
 802548a:	fb00 7003 	mla	r0, r0, r3, r7
 802548e:	fb06 2303 	mla	r3, r6, r3, r2
 8025492:	b280      	uxth	r0, r0
 8025494:	b29a      	uxth	r2, r3
 8025496:	1c63      	adds	r3, r4, #1
 8025498:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802549c:	1c53      	adds	r3, r2, #1
 802549e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80254a2:	1c42      	adds	r2, r0, #1
 80254a4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80254a8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80254ac:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80254b0:	0940      	lsrs	r0, r0, #5
 80254b2:	4323      	orrs	r3, r4
 80254b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80254b8:	4303      	orrs	r3, r0
 80254ba:	800b      	strh	r3, [r1, #0]
 80254bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80254c0:	2d0f      	cmp	r5, #15
 80254c2:	d893      	bhi.n	80253ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 80254c4:	463b      	mov	r3, r7
 80254c6:	463c      	mov	r4, r7
 80254c8:	e7aa      	b.n	8025420 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 80254ca:	bf00      	nop
 80254cc:	0802a1f1 	.word	0x0802a1f1
 80254d0:	0802a7be 	.word	0x0802a7be
 80254d4:	0802a275 	.word	0x0802a275
 80254d8:	2400aef4 	.word	0x2400aef4

080254dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80254dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254e0:	ed2d 8b08 	vpush	{d8-d11}
 80254e4:	b093      	sub	sp, #76	; 0x4c
 80254e6:	461d      	mov	r5, r3
 80254e8:	eeb0 aa40 	vmov.f32	s20, s0
 80254ec:	920c      	str	r2, [sp, #48]	; 0x30
 80254ee:	eef0 9a60 	vmov.f32	s19, s1
 80254f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80254f4:	eeb0 9a41 	vmov.f32	s18, s2
 80254f8:	9011      	str	r0, [sp, #68]	; 0x44
 80254fa:	eeb0 8a62 	vmov.f32	s16, s5
 80254fe:	6850      	ldr	r0, [r2, #4]
 8025500:	eef0 8a43 	vmov.f32	s17, s6
 8025504:	9107      	str	r1, [sp, #28]
 8025506:	eef0 ba44 	vmov.f32	s23, s8
 802550a:	6812      	ldr	r2, [r2, #0]
 802550c:	eeb0 ba64 	vmov.f32	s22, s9
 8025510:	eef0 aa45 	vmov.f32	s21, s10
 8025514:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8025518:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802551c:	fb00 1303 	mla	r3, r0, r3, r1
 8025520:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025524:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025526:	689b      	ldr	r3, [r3, #8]
 8025528:	3301      	adds	r3, #1
 802552a:	f023 0301 	bic.w	r3, r3, #1
 802552e:	9306      	str	r3, [sp, #24]
 8025530:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025532:	681f      	ldr	r7, [r3, #0]
 8025534:	9b07      	ldr	r3, [sp, #28]
 8025536:	2b00      	cmp	r3, #0
 8025538:	dc03      	bgt.n	8025542 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802553a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802553c:	2b00      	cmp	r3, #0
 802553e:	f340 8267 	ble.w	8025a10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8025542:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025544:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025548:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802554c:	1e48      	subs	r0, r1, #1
 802554e:	f102 3cff 	add.w	ip, r2, #4294967295
 8025552:	2d00      	cmp	r5, #0
 8025554:	f340 80b7 	ble.w	80256c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025558:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802555c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025560:	d406      	bmi.n	8025570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025562:	4586      	cmp	lr, r0
 8025564:	da04      	bge.n	8025570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025566:	2b00      	cmp	r3, #0
 8025568:	db02      	blt.n	8025570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802556a:	4563      	cmp	r3, ip
 802556c:	f2c0 80ac 	blt.w	80256c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8025570:	f11e 0e01 	adds.w	lr, lr, #1
 8025574:	f100 809f 	bmi.w	80256b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8025578:	4571      	cmp	r1, lr
 802557a:	f2c0 809c 	blt.w	80256b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802557e:	3301      	adds	r3, #1
 8025580:	f100 8099 	bmi.w	80256b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8025584:	429a      	cmp	r2, r3
 8025586:	f2c0 8096 	blt.w	80256b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802558a:	46c8      	mov	r8, r9
 802558c:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8025590:	9509      	str	r5, [sp, #36]	; 0x24
 8025592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025594:	2b00      	cmp	r3, #0
 8025596:	f340 80b5 	ble.w	8025704 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802559a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802559e:	1430      	asrs	r0, r6, #16
 80255a0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80255a4:	9308      	str	r3, [sp, #32]
 80255a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80255a8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80255ac:	1423      	asrs	r3, r4, #16
 80255ae:	f100 813f 	bmi.w	8025830 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80255b2:	f10c 3bff 	add.w	fp, ip, #4294967295
 80255b6:	455b      	cmp	r3, fp
 80255b8:	f280 813a 	bge.w	8025830 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80255bc:	2800      	cmp	r0, #0
 80255be:	f2c0 8137 	blt.w	8025830 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80255c2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80255c6:	4558      	cmp	r0, fp
 80255c8:	f280 8132 	bge.w	8025830 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80255cc:	9a06      	ldr	r2, [sp, #24]
 80255ce:	fb00 3302 	mla	r3, r0, r2, r3
 80255d2:	0858      	lsrs	r0, r3, #1
 80255d4:	07da      	lsls	r2, r3, #31
 80255d6:	9a08      	ldr	r2, [sp, #32]
 80255d8:	f817 c000 	ldrb.w	ip, [r7, r0]
 80255dc:	bf54      	ite	pl
 80255de:	f00c 0c0f 	andpl.w	ip, ip, #15
 80255e2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80255e6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80255ea:	fa5f fc8c 	uxtb.w	ip, ip
 80255ee:	2a00      	cmp	r2, #0
 80255f0:	f000 80cc 	beq.w	802578c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80255f4:	1c58      	adds	r0, r3, #1
 80255f6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80255fa:	07c0      	lsls	r0, r0, #31
 80255fc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8025600:	bf54      	ite	pl
 8025602:	f00e 0e0f 	andpl.w	lr, lr, #15
 8025606:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802560a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802560e:	fa5f fe8e 	uxtb.w	lr, lr
 8025612:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8025616:	b1b9      	cbz	r1, 8025648 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8025618:	4453      	add	r3, sl
 802561a:	0858      	lsrs	r0, r3, #1
 802561c:	07da      	lsls	r2, r3, #31
 802561e:	5c38      	ldrb	r0, [r7, r0]
 8025620:	bf54      	ite	pl
 8025622:	f000 000f 	andpl.w	r0, r0, #15
 8025626:	1100      	asrmi	r0, r0, #4
 8025628:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802562c:	b2c0      	uxtb	r0, r0
 802562e:	900a      	str	r0, [sp, #40]	; 0x28
 8025630:	1c58      	adds	r0, r3, #1
 8025632:	0843      	lsrs	r3, r0, #1
 8025634:	07c2      	lsls	r2, r0, #31
 8025636:	5cfb      	ldrb	r3, [r7, r3]
 8025638:	bf54      	ite	pl
 802563a:	f003 030f 	andpl.w	r3, r3, #15
 802563e:	111b      	asrmi	r3, r3, #4
 8025640:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025644:	b2db      	uxtb	r3, r3
 8025646:	930e      	str	r3, [sp, #56]	; 0x38
 8025648:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802564c:	b289      	uxth	r1, r1
 802564e:	fb02 f301 	mul.w	r3, r2, r1
 8025652:	0112      	lsls	r2, r2, #4
 8025654:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025658:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802565c:	1ad2      	subs	r2, r2, r3
 802565e:	b289      	uxth	r1, r1
 8025660:	b292      	uxth	r2, r2
 8025662:	1a40      	subs	r0, r0, r1
 8025664:	fa1f fe80 	uxth.w	lr, r0
 8025668:	980d      	ldr	r0, [sp, #52]	; 0x34
 802566a:	4342      	muls	r2, r0
 802566c:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8025670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025672:	fb01 c102 	mla	r1, r1, r2, ip
 8025676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025678:	fb03 1302 	mla	r3, r3, r2, r1
 802567c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025680:	2bff      	cmp	r3, #255	; 0xff
 8025682:	f040 8094 	bne.w	80257ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8025686:	4bbf      	ldr	r3, [pc, #764]	; (8025984 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8025688:	681a      	ldr	r2, [r3, #0]
 802568a:	4bbf      	ldr	r3, [pc, #764]	; (8025988 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802568c:	0951      	lsrs	r1, r2, #5
 802568e:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8025692:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025696:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802569a:	430b      	orrs	r3, r1
 802569c:	4313      	orrs	r3, r2
 802569e:	f8a8 3000 	strh.w	r3, [r8]
 80256a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80256a4:	f108 0802 	add.w	r8, r8, #2
 80256a8:	441c      	add	r4, r3
 80256aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80256ac:	441e      	add	r6, r3
 80256ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80256b0:	3b01      	subs	r3, #1
 80256b2:	9309      	str	r3, [sp, #36]	; 0x24
 80256b4:	e76d      	b.n	8025592 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80256b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80256b8:	3d01      	subs	r5, #1
 80256ba:	f109 0902 	add.w	r9, r9, #2
 80256be:	441c      	add	r4, r3
 80256c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80256c2:	441e      	add	r6, r3
 80256c4:	e745      	b.n	8025552 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80256c6:	d021      	beq.n	802570c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80256c8:	1e6b      	subs	r3, r5, #1
 80256ca:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80256cc:	fb00 4003 	mla	r0, r0, r3, r4
 80256d0:	1400      	asrs	r0, r0, #16
 80256d2:	f53f af5a 	bmi.w	802558a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80256d6:	3901      	subs	r1, #1
 80256d8:	4288      	cmp	r0, r1
 80256da:	f6bf af56 	bge.w	802558a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80256de:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80256e0:	fb01 6303 	mla	r3, r1, r3, r6
 80256e4:	141b      	asrs	r3, r3, #16
 80256e6:	f53f af50 	bmi.w	802558a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80256ea:	3a01      	subs	r2, #1
 80256ec:	4293      	cmp	r3, r2
 80256ee:	f6bf af4c 	bge.w	802558a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80256f2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80256f6:	46a8      	mov	r8, r5
 80256f8:	46ce      	mov	lr, r9
 80256fa:	9308      	str	r3, [sp, #32]
 80256fc:	f1b8 0f00 	cmp.w	r8, #0
 8025700:	f300 80b6 	bgt.w	8025870 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025704:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025708:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802570c:	9b07      	ldr	r3, [sp, #28]
 802570e:	2b00      	cmp	r3, #0
 8025710:	f340 817e 	ble.w	8025a10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8025714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025718:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802571a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802571e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025722:	eef0 6a48 	vmov.f32	s13, s16
 8025726:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802572a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802572e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025732:	ee16 4a90 	vmov	r4, s13
 8025736:	eef0 6a68 	vmov.f32	s13, s17
 802573a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802573e:	ee16 6a90 	vmov	r6, s13
 8025742:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025746:	ee69 7a27 	vmul.f32	s15, s18, s15
 802574a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802574e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025752:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025756:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802575a:	ee18 2a10 	vmov	r2, s16
 802575e:	eeb0 8a47 	vmov.f32	s16, s14
 8025762:	fb92 f3f3 	sdiv	r3, r2, r3
 8025766:	ee18 2a90 	vmov	r2, s17
 802576a:	9327      	str	r3, [sp, #156]	; 0x9c
 802576c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802576e:	eef0 8a67 	vmov.f32	s17, s15
 8025772:	fb92 f3f3 	sdiv	r3, r2, r3
 8025776:	9328      	str	r3, [sp, #160]	; 0xa0
 8025778:	9b07      	ldr	r3, [sp, #28]
 802577a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802577c:	3b01      	subs	r3, #1
 802577e:	9307      	str	r3, [sp, #28]
 8025780:	bf08      	it	eq
 8025782:	4615      	moveq	r5, r2
 8025784:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025786:	bf18      	it	ne
 8025788:	461d      	movne	r5, r3
 802578a:	e6d3      	b.n	8025534 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802578c:	2900      	cmp	r1, #0
 802578e:	f43f af5b 	beq.w	8025648 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8025792:	eb0a 0003 	add.w	r0, sl, r3
 8025796:	0843      	lsrs	r3, r0, #1
 8025798:	07c0      	lsls	r0, r0, #31
 802579a:	5cfb      	ldrb	r3, [r7, r3]
 802579c:	bf54      	ite	pl
 802579e:	f003 030f 	andpl.w	r3, r3, #15
 80257a2:	111b      	asrmi	r3, r3, #4
 80257a4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80257a8:	b2db      	uxtb	r3, r3
 80257aa:	930a      	str	r3, [sp, #40]	; 0x28
 80257ac:	e74c      	b.n	8025648 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	f43f af77 	beq.w	80256a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80257b4:	4a73      	ldr	r2, [pc, #460]	; (8025984 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 80257b6:	fa1f fe83 	uxth.w	lr, r3
 80257ba:	f8b8 c000 	ldrh.w	ip, [r8]
 80257be:	43db      	mvns	r3, r3
 80257c0:	6810      	ldr	r0, [r2, #0]
 80257c2:	ea4f 212c 	mov.w	r1, ip, asr #8
 80257c6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80257ca:	b2db      	uxtb	r3, r3
 80257cc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80257d0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80257d4:	fb12 f20e 	smulbb	r2, r2, lr
 80257d8:	b2c0      	uxtb	r0, r0
 80257da:	fb1b fb0e 	smulbb	fp, fp, lr
 80257de:	fb01 2103 	mla	r1, r1, r3, r2
 80257e2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80257e6:	fb10 fe0e 	smulbb	lr, r0, lr
 80257ea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80257ee:	b289      	uxth	r1, r1
 80257f0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80257f4:	fa5f fc8c 	uxtb.w	ip, ip
 80257f8:	fb02 b203 	mla	r2, r2, r3, fp
 80257fc:	1c48      	adds	r0, r1, #1
 80257fe:	fb0c e303 	mla	r3, ip, r3, lr
 8025802:	b292      	uxth	r2, r2
 8025804:	b29b      	uxth	r3, r3
 8025806:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802580a:	f102 0b01 	add.w	fp, r2, #1
 802580e:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8025812:	1c59      	adds	r1, r3, #1
 8025814:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8025818:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802581c:	0952      	lsrs	r2, r2, #5
 802581e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8025822:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025826:	4301      	orrs	r1, r0
 8025828:	4311      	orrs	r1, r2
 802582a:	f8a8 1000 	strh.w	r1, [r8]
 802582e:	e738      	b.n	80256a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025830:	f113 0b01 	adds.w	fp, r3, #1
 8025834:	f53f af35 	bmi.w	80256a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025838:	45dc      	cmp	ip, fp
 802583a:	f6ff af32 	blt.w	80256a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802583e:	f110 0b01 	adds.w	fp, r0, #1
 8025842:	f53f af2e 	bmi.w	80256a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025846:	45de      	cmp	lr, fp
 8025848:	f6ff af2b 	blt.w	80256a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802584c:	9302      	str	r3, [sp, #8]
 802584e:	fa0f f38e 	sxth.w	r3, lr
 8025852:	9a08      	ldr	r2, [sp, #32]
 8025854:	9301      	str	r3, [sp, #4]
 8025856:	fa0f f38c 	sxth.w	r3, ip
 802585a:	9105      	str	r1, [sp, #20]
 802585c:	4641      	mov	r1, r8
 802585e:	9300      	str	r3, [sp, #0]
 8025860:	4653      	mov	r3, sl
 8025862:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025866:	463a      	mov	r2, r7
 8025868:	9811      	ldr	r0, [sp, #68]	; 0x44
 802586a:	f7ff fd57 	bl	802531c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802586e:	e718      	b.n	80256a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025870:	1422      	asrs	r2, r4, #16
 8025872:	9906      	ldr	r1, [sp, #24]
 8025874:	1433      	asrs	r3, r6, #16
 8025876:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802587a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802587e:	fb01 2303 	mla	r3, r1, r3, r2
 8025882:	085a      	lsrs	r2, r3, #1
 8025884:	07d9      	lsls	r1, r3, #31
 8025886:	5cba      	ldrb	r2, [r7, r2]
 8025888:	bf54      	ite	pl
 802588a:	f002 020f 	andpl.w	r2, r2, #15
 802588e:	1112      	asrmi	r2, r2, #4
 8025890:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025894:	b2d2      	uxtb	r2, r2
 8025896:	2800      	cmp	r0, #0
 8025898:	d063      	beq.n	8025962 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802589a:	f103 0a01 	add.w	sl, r3, #1
 802589e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80258a2:	f01a 0f01 	tst.w	sl, #1
 80258a6:	5c79      	ldrb	r1, [r7, r1]
 80258a8:	bf0c      	ite	eq
 80258aa:	f001 010f 	andeq.w	r1, r1, #15
 80258ae:	1109      	asrne	r1, r1, #4
 80258b0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80258b4:	b2c9      	uxtb	r1, r1
 80258b6:	910f      	str	r1, [sp, #60]	; 0x3c
 80258b8:	f1bc 0f00 	cmp.w	ip, #0
 80258bc:	d01a      	beq.n	80258f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 80258be:	9908      	ldr	r1, [sp, #32]
 80258c0:	440b      	add	r3, r1
 80258c2:	0859      	lsrs	r1, r3, #1
 80258c4:	f013 0f01 	tst.w	r3, #1
 80258c8:	f103 0301 	add.w	r3, r3, #1
 80258cc:	5c79      	ldrb	r1, [r7, r1]
 80258ce:	bf0c      	ite	eq
 80258d0:	f001 010f 	andeq.w	r1, r1, #15
 80258d4:	1109      	asrne	r1, r1, #4
 80258d6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80258da:	b2c9      	uxtb	r1, r1
 80258dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80258de:	0859      	lsrs	r1, r3, #1
 80258e0:	07db      	lsls	r3, r3, #31
 80258e2:	5c79      	ldrb	r1, [r7, r1]
 80258e4:	bf54      	ite	pl
 80258e6:	f001 010f 	andpl.w	r1, r1, #15
 80258ea:	1109      	asrmi	r1, r1, #4
 80258ec:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80258f0:	b2c9      	uxtb	r1, r1
 80258f2:	9110      	str	r1, [sp, #64]	; 0x40
 80258f4:	b280      	uxth	r0, r0
 80258f6:	fa1f fc8c 	uxth.w	ip, ip
 80258fa:	fb00 f30c 	mul.w	r3, r0, ip
 80258fe:	0100      	lsls	r0, r0, #4
 8025900:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8025904:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8025908:	1ac0      	subs	r0, r0, r3
 802590a:	fa1f fc8c 	uxth.w	ip, ip
 802590e:	b280      	uxth	r0, r0
 8025910:	eba1 010c 	sub.w	r1, r1, ip
 8025914:	fa1f fa81 	uxth.w	sl, r1
 8025918:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802591a:	4348      	muls	r0, r1
 802591c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802591e:	fb02 020a 	mla	r2, r2, sl, r0
 8025922:	fb0c 2c01 	mla	ip, ip, r1, r2
 8025926:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025928:	fb03 c302 	mla	r3, r3, r2, ip
 802592c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025930:	2bff      	cmp	r3, #255	; 0xff
 8025932:	d12b      	bne.n	802598c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025934:	4b13      	ldr	r3, [pc, #76]	; (8025984 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8025936:	681a      	ldr	r2, [r3, #0]
 8025938:	4b13      	ldr	r3, [pc, #76]	; (8025988 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802593a:	0951      	lsrs	r1, r2, #5
 802593c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8025940:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025944:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025948:	430b      	orrs	r3, r1
 802594a:	4313      	orrs	r3, r2
 802594c:	f8ae 3000 	strh.w	r3, [lr]
 8025950:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025952:	f10e 0e02 	add.w	lr, lr, #2
 8025956:	f108 38ff 	add.w	r8, r8, #4294967295
 802595a:	441c      	add	r4, r3
 802595c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802595e:	441e      	add	r6, r3
 8025960:	e6cc      	b.n	80256fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8025962:	f1bc 0f00 	cmp.w	ip, #0
 8025966:	d0c5      	beq.n	80258f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8025968:	9908      	ldr	r1, [sp, #32]
 802596a:	440b      	add	r3, r1
 802596c:	0859      	lsrs	r1, r3, #1
 802596e:	07db      	lsls	r3, r3, #31
 8025970:	5c79      	ldrb	r1, [r7, r1]
 8025972:	bf54      	ite	pl
 8025974:	f001 010f 	andpl.w	r1, r1, #15
 8025978:	1109      	asrmi	r1, r1, #4
 802597a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802597e:	b2c9      	uxtb	r1, r1
 8025980:	910b      	str	r1, [sp, #44]	; 0x2c
 8025982:	e7b7      	b.n	80258f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8025984:	2400aef4 	.word	0x2400aef4
 8025988:	fffff800 	.word	0xfffff800
 802598c:	2b00      	cmp	r3, #0
 802598e:	d0df      	beq.n	8025950 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8025990:	4a22      	ldr	r2, [pc, #136]	; (8025a1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 8025992:	fa1f fa83 	uxth.w	sl, r3
 8025996:	f8be c000 	ldrh.w	ip, [lr]
 802599a:	43db      	mvns	r3, r3
 802599c:	6810      	ldr	r0, [r2, #0]
 802599e:	ea4f 212c 	mov.w	r1, ip, asr #8
 80259a2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80259a6:	b2db      	uxtb	r3, r3
 80259a8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80259ac:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80259b0:	fb12 f20a 	smulbb	r2, r2, sl
 80259b4:	b2c0      	uxtb	r0, r0
 80259b6:	fb1b fb0a 	smulbb	fp, fp, sl
 80259ba:	fb01 2103 	mla	r1, r1, r3, r2
 80259be:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80259c2:	fb10 f00a 	smulbb	r0, r0, sl
 80259c6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80259ca:	b289      	uxth	r1, r1
 80259cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80259d0:	fa5f fc8c 	uxtb.w	ip, ip
 80259d4:	fb02 b203 	mla	r2, r2, r3, fp
 80259d8:	fb0c 0003 	mla	r0, ip, r3, r0
 80259dc:	1c4b      	adds	r3, r1, #1
 80259de:	b292      	uxth	r2, r2
 80259e0:	b280      	uxth	r0, r0
 80259e2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80259e6:	f100 0b01 	add.w	fp, r0, #1
 80259ea:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80259ee:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80259f2:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80259f6:	ea4b 0101 	orr.w	r1, fp, r1
 80259fa:	f102 0b01 	add.w	fp, r2, #1
 80259fe:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8025a02:	0952      	lsrs	r2, r2, #5
 8025a04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025a08:	4311      	orrs	r1, r2
 8025a0a:	f8ae 1000 	strh.w	r1, [lr]
 8025a0e:	e79f      	b.n	8025950 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8025a10:	b013      	add	sp, #76	; 0x4c
 8025a12:	ecbd 8b08 	vpop	{d8-d11}
 8025a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a1a:	bf00      	nop
 8025a1c:	2400aef4 	.word	0x2400aef4

08025a20 <CRC_Lock>:
 8025a20:	4a20      	ldr	r2, [pc, #128]	; (8025aa4 <CRC_Lock+0x84>)
 8025a22:	b530      	push	{r4, r5, lr}
 8025a24:	6813      	ldr	r3, [r2, #0]
 8025a26:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8025a2a:	f24c 2540 	movw	r5, #49728	; 0xc240
 8025a2e:	f023 0301 	bic.w	r3, r3, #1
 8025a32:	6013      	str	r3, [r2, #0]
 8025a34:	4b1c      	ldr	r3, [pc, #112]	; (8025aa8 <CRC_Lock+0x88>)
 8025a36:	681a      	ldr	r2, [r3, #0]
 8025a38:	4022      	ands	r2, r4
 8025a3a:	42aa      	cmp	r2, r5
 8025a3c:	d005      	beq.n	8025a4a <CRC_Lock+0x2a>
 8025a3e:	681b      	ldr	r3, [r3, #0]
 8025a40:	f24c 2270 	movw	r2, #49776	; 0xc270
 8025a44:	4023      	ands	r3, r4
 8025a46:	4293      	cmp	r3, r2
 8025a48:	d124      	bne.n	8025a94 <CRC_Lock+0x74>
 8025a4a:	4b18      	ldr	r3, [pc, #96]	; (8025aac <CRC_Lock+0x8c>)
 8025a4c:	681b      	ldr	r3, [r3, #0]
 8025a4e:	bb0b      	cbnz	r3, 8025a94 <CRC_Lock+0x74>
 8025a50:	4b17      	ldr	r3, [pc, #92]	; (8025ab0 <CRC_Lock+0x90>)
 8025a52:	681a      	ldr	r2, [r3, #0]
 8025a54:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025a58:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8025a5c:	d00d      	beq.n	8025a7a <CRC_Lock+0x5a>
 8025a5e:	681a      	ldr	r2, [r3, #0]
 8025a60:	f240 4483 	movw	r4, #1155	; 0x483
 8025a64:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025a68:	42a2      	cmp	r2, r4
 8025a6a:	d006      	beq.n	8025a7a <CRC_Lock+0x5a>
 8025a6c:	681b      	ldr	r3, [r3, #0]
 8025a6e:	f240 4285 	movw	r2, #1157	; 0x485
 8025a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025a76:	4293      	cmp	r3, r2
 8025a78:	d10c      	bne.n	8025a94 <CRC_Lock+0x74>
 8025a7a:	4b0e      	ldr	r3, [pc, #56]	; (8025ab4 <CRC_Lock+0x94>)
 8025a7c:	2201      	movs	r2, #1
 8025a7e:	601a      	str	r2, [r3, #0]
 8025a80:	681a      	ldr	r2, [r3, #0]
 8025a82:	2a00      	cmp	r2, #0
 8025a84:	d1fc      	bne.n	8025a80 <CRC_Lock+0x60>
 8025a86:	4b0c      	ldr	r3, [pc, #48]	; (8025ab8 <CRC_Lock+0x98>)
 8025a88:	6018      	str	r0, [r3, #0]
 8025a8a:	6818      	ldr	r0, [r3, #0]
 8025a8c:	1a43      	subs	r3, r0, r1
 8025a8e:	4258      	negs	r0, r3
 8025a90:	4158      	adcs	r0, r3
 8025a92:	bd30      	pop	{r4, r5, pc}
 8025a94:	4b09      	ldr	r3, [pc, #36]	; (8025abc <CRC_Lock+0x9c>)
 8025a96:	2201      	movs	r2, #1
 8025a98:	601a      	str	r2, [r3, #0]
 8025a9a:	681a      	ldr	r2, [r3, #0]
 8025a9c:	2a00      	cmp	r2, #0
 8025a9e:	d1fc      	bne.n	8025a9a <CRC_Lock+0x7a>
 8025aa0:	4b07      	ldr	r3, [pc, #28]	; (8025ac0 <CRC_Lock+0xa0>)
 8025aa2:	e7f1      	b.n	8025a88 <CRC_Lock+0x68>
 8025aa4:	e0002000 	.word	0xe0002000
 8025aa8:	e000ed00 	.word	0xe000ed00
 8025aac:	e0042000 	.word	0xe0042000
 8025ab0:	5c001000 	.word	0x5c001000
 8025ab4:	58024c08 	.word	0x58024c08
 8025ab8:	58024c00 	.word	0x58024c00
 8025abc:	40023008 	.word	0x40023008
 8025ac0:	40023000 	.word	0x40023000

08025ac4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8025ac4:	6101      	str	r1, [r0, #16]
 8025ac6:	4770      	bx	lr

08025ac8 <_ZN8touchgfx8Gestures4tickEv>:
 8025ac8:	7b83      	ldrb	r3, [r0, #14]
 8025aca:	b14b      	cbz	r3, 8025ae0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8025acc:	8903      	ldrh	r3, [r0, #8]
 8025ace:	3301      	adds	r3, #1
 8025ad0:	b29b      	uxth	r3, r3
 8025ad2:	2b07      	cmp	r3, #7
 8025ad4:	8103      	strh	r3, [r0, #8]
 8025ad6:	bf81      	itttt	hi
 8025ad8:	2300      	movhi	r3, #0
 8025ada:	8143      	strhhi	r3, [r0, #10]
 8025adc:	8183      	strhhi	r3, [r0, #12]
 8025ade:	7383      	strbhi	r3, [r0, #14]
 8025ae0:	4770      	bx	lr
	...

08025ae4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8025ae4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8025ae8:	4604      	mov	r4, r0
 8025aea:	4698      	mov	r8, r3
 8025aec:	8880      	ldrh	r0, [r0, #4]
 8025aee:	4617      	mov	r7, r2
 8025af0:	4b1d      	ldr	r3, [pc, #116]	; (8025b68 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8025af2:	460e      	mov	r6, r1
 8025af4:	f8ad 0006 	strh.w	r0, [sp, #6]
 8025af8:	eba8 0000 	sub.w	r0, r8, r0
 8025afc:	9300      	str	r3, [sp, #0]
 8025afe:	2300      	movs	r3, #0
 8025b00:	b280      	uxth	r0, r0
 8025b02:	8aa2      	ldrh	r2, [r4, #20]
 8025b04:	f88d 3004 	strb.w	r3, [sp, #4]
 8025b08:	b203      	sxth	r3, r0
 8025b0a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8025b0e:	88e1      	ldrh	r1, [r4, #6]
 8025b10:	2b00      	cmp	r3, #0
 8025b12:	f8ad 800a 	strh.w	r8, [sp, #10]
 8025b16:	f8ad 1008 	strh.w	r1, [sp, #8]
 8025b1a:	bfb8      	it	lt
 8025b1c:	4240      	neglt	r0, r0
 8025b1e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8025b22:	bfb8      	it	lt
 8025b24:	b203      	sxthlt	r3, r0
 8025b26:	4293      	cmp	r3, r2
 8025b28:	dc08      	bgt.n	8025b3c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8025b2a:	1a69      	subs	r1, r5, r1
 8025b2c:	b289      	uxth	r1, r1
 8025b2e:	b20b      	sxth	r3, r1
 8025b30:	2b00      	cmp	r3, #0
 8025b32:	bfbc      	itt	lt
 8025b34:	4249      	neglt	r1, r1
 8025b36:	b20b      	sxthlt	r3, r1
 8025b38:	429a      	cmp	r2, r3
 8025b3a:	da13      	bge.n	8025b64 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8025b3c:	6920      	ldr	r0, [r4, #16]
 8025b3e:	4669      	mov	r1, sp
 8025b40:	eba8 0606 	sub.w	r6, r8, r6
 8025b44:	1bef      	subs	r7, r5, r7
 8025b46:	6803      	ldr	r3, [r0, #0]
 8025b48:	685b      	ldr	r3, [r3, #4]
 8025b4a:	4798      	blx	r3
 8025b4c:	2300      	movs	r3, #0
 8025b4e:	2001      	movs	r0, #1
 8025b50:	8166      	strh	r6, [r4, #10]
 8025b52:	8123      	strh	r3, [r4, #8]
 8025b54:	81a7      	strh	r7, [r4, #12]
 8025b56:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025b5a:	80e5      	strh	r5, [r4, #6]
 8025b5c:	73a0      	strb	r0, [r4, #14]
 8025b5e:	b004      	add	sp, #16
 8025b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025b64:	2000      	movs	r0, #0
 8025b66:	e7fa      	b.n	8025b5e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8025b68:	080285cc 	.word	0x080285cc

08025b6c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b6e:	461e      	mov	r6, r3
 8025b70:	1e4b      	subs	r3, r1, #1
 8025b72:	b085      	sub	sp, #20
 8025b74:	4604      	mov	r4, r0
 8025b76:	2b01      	cmp	r3, #1
 8025b78:	460d      	mov	r5, r1
 8025b7a:	4617      	mov	r7, r2
 8025b7c:	d84b      	bhi.n	8025c16 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025b7e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025b82:	1cd3      	adds	r3, r2, #3
 8025b84:	b29b      	uxth	r3, r3
 8025b86:	2b06      	cmp	r3, #6
 8025b88:	d916      	bls.n	8025bb8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8025b8a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8025c2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025b8e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025b92:	f8cd c004 	str.w	ip, [sp, #4]
 8025b96:	f04f 0c00 	mov.w	ip, #0
 8025b9a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025b9e:	6900      	ldr	r0, [r0, #16]
 8025ba0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025ba4:	a901      	add	r1, sp, #4
 8025ba6:	f88d c008 	strb.w	ip, [sp, #8]
 8025baa:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025bae:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025bb2:	6803      	ldr	r3, [r0, #0]
 8025bb4:	689b      	ldr	r3, [r3, #8]
 8025bb6:	4798      	blx	r3
 8025bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025bbc:	1cd3      	adds	r3, r2, #3
 8025bbe:	b29b      	uxth	r3, r3
 8025bc0:	2b06      	cmp	r3, #6
 8025bc2:	d916      	bls.n	8025bf2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025bc4:	f8df c064 	ldr.w	ip, [pc, #100]	; 8025c2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025bc8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025bcc:	f8cd c004 	str.w	ip, [sp, #4]
 8025bd0:	f04f 0c01 	mov.w	ip, #1
 8025bd4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025bd8:	6920      	ldr	r0, [r4, #16]
 8025bda:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025bde:	a901      	add	r1, sp, #4
 8025be0:	f88d c008 	strb.w	ip, [sp, #8]
 8025be4:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025be8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025bec:	6803      	ldr	r3, [r0, #0]
 8025bee:	689b      	ldr	r3, [r3, #8]
 8025bf0:	4798      	blx	r3
 8025bf2:	4b0d      	ldr	r3, [pc, #52]	; (8025c28 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8025bf4:	a901      	add	r1, sp, #4
 8025bf6:	6920      	ldr	r0, [r4, #16]
 8025bf8:	9301      	str	r3, [sp, #4]
 8025bfa:	2300      	movs	r3, #0
 8025bfc:	f88d 5008 	strb.w	r5, [sp, #8]
 8025c00:	f8ad 700a 	strh.w	r7, [sp, #10]
 8025c04:	f8ad 600c 	strh.w	r6, [sp, #12]
 8025c08:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025c0c:	6803      	ldr	r3, [r0, #0]
 8025c0e:	681b      	ldr	r3, [r3, #0]
 8025c10:	4798      	blx	r3
 8025c12:	b005      	add	sp, #20
 8025c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025c16:	2900      	cmp	r1, #0
 8025c18:	d1eb      	bne.n	8025bf2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025c1a:	80a2      	strh	r2, [r4, #4]
 8025c1c:	80c6      	strh	r6, [r0, #6]
 8025c1e:	60a1      	str	r1, [r4, #8]
 8025c20:	81a1      	strh	r1, [r4, #12]
 8025c22:	73a1      	strb	r1, [r4, #14]
 8025c24:	e7e5      	b.n	8025bf2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025c26:	bf00      	nop
 8025c28:	080285b8 	.word	0x080285b8
 8025c2c:	08029658 	.word	0x08029658

08025c30 <__aeabi_atexit>:
 8025c30:	460b      	mov	r3, r1
 8025c32:	4601      	mov	r1, r0
 8025c34:	4618      	mov	r0, r3
 8025c36:	f000 b853 	b.w	8025ce0 <__cxa_atexit>

08025c3a <_ZdlPvj>:
 8025c3a:	f000 b812 	b.w	8025c62 <_ZdlPv>

08025c3e <__cxa_guard_acquire>:
 8025c3e:	6803      	ldr	r3, [r0, #0]
 8025c40:	07db      	lsls	r3, r3, #31
 8025c42:	d406      	bmi.n	8025c52 <__cxa_guard_acquire+0x14>
 8025c44:	7843      	ldrb	r3, [r0, #1]
 8025c46:	b103      	cbz	r3, 8025c4a <__cxa_guard_acquire+0xc>
 8025c48:	deff      	udf	#255	; 0xff
 8025c4a:	2301      	movs	r3, #1
 8025c4c:	7043      	strb	r3, [r0, #1]
 8025c4e:	4618      	mov	r0, r3
 8025c50:	4770      	bx	lr
 8025c52:	2000      	movs	r0, #0
 8025c54:	4770      	bx	lr

08025c56 <__cxa_guard_release>:
 8025c56:	2301      	movs	r3, #1
 8025c58:	6003      	str	r3, [r0, #0]
 8025c5a:	4770      	bx	lr

08025c5c <__cxa_pure_virtual>:
 8025c5c:	b508      	push	{r3, lr}
 8025c5e:	f000 f80f 	bl	8025c80 <_ZSt9terminatev>

08025c62 <_ZdlPv>:
 8025c62:	f000 b88f 	b.w	8025d84 <free>

08025c66 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025c66:	b508      	push	{r3, lr}
 8025c68:	4780      	blx	r0
 8025c6a:	f000 f80e 	bl	8025c8a <abort>
	...

08025c70 <_ZSt13get_terminatev>:
 8025c70:	4b02      	ldr	r3, [pc, #8]	; (8025c7c <_ZSt13get_terminatev+0xc>)
 8025c72:	6818      	ldr	r0, [r3, #0]
 8025c74:	f3bf 8f5b 	dmb	ish
 8025c78:	4770      	bx	lr
 8025c7a:	bf00      	nop
 8025c7c:	240000c0 	.word	0x240000c0

08025c80 <_ZSt9terminatev>:
 8025c80:	b508      	push	{r3, lr}
 8025c82:	f7ff fff5 	bl	8025c70 <_ZSt13get_terminatev>
 8025c86:	f7ff ffee 	bl	8025c66 <_ZN10__cxxabiv111__terminateEPFvvE>

08025c8a <abort>:
 8025c8a:	b508      	push	{r3, lr}
 8025c8c:	2006      	movs	r0, #6
 8025c8e:	f000 fc67 	bl	8026560 <raise>
 8025c92:	2001      	movs	r0, #1
 8025c94:	f7db fc76 	bl	8001584 <_exit>

08025c98 <__assert_func>:
 8025c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025c9a:	4614      	mov	r4, r2
 8025c9c:	461a      	mov	r2, r3
 8025c9e:	4b09      	ldr	r3, [pc, #36]	; (8025cc4 <__assert_func+0x2c>)
 8025ca0:	681b      	ldr	r3, [r3, #0]
 8025ca2:	4605      	mov	r5, r0
 8025ca4:	68d8      	ldr	r0, [r3, #12]
 8025ca6:	b14c      	cbz	r4, 8025cbc <__assert_func+0x24>
 8025ca8:	4b07      	ldr	r3, [pc, #28]	; (8025cc8 <__assert_func+0x30>)
 8025caa:	9100      	str	r1, [sp, #0]
 8025cac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025cb0:	4906      	ldr	r1, [pc, #24]	; (8025ccc <__assert_func+0x34>)
 8025cb2:	462b      	mov	r3, r5
 8025cb4:	f000 f828 	bl	8025d08 <fiprintf>
 8025cb8:	f7ff ffe7 	bl	8025c8a <abort>
 8025cbc:	4b04      	ldr	r3, [pc, #16]	; (8025cd0 <__assert_func+0x38>)
 8025cbe:	461c      	mov	r4, r3
 8025cc0:	e7f3      	b.n	8025caa <__assert_func+0x12>
 8025cc2:	bf00      	nop
 8025cc4:	240000c4 	.word	0x240000c4
 8025cc8:	0802a9f9 	.word	0x0802a9f9
 8025ccc:	0802aa06 	.word	0x0802aa06
 8025cd0:	0802aa34 	.word	0x0802aa34

08025cd4 <atexit>:
 8025cd4:	2300      	movs	r3, #0
 8025cd6:	4601      	mov	r1, r0
 8025cd8:	461a      	mov	r2, r3
 8025cda:	4618      	mov	r0, r3
 8025cdc:	f000 bd1c 	b.w	8026718 <__register_exitproc>

08025ce0 <__cxa_atexit>:
 8025ce0:	b510      	push	{r4, lr}
 8025ce2:	4c05      	ldr	r4, [pc, #20]	; (8025cf8 <__cxa_atexit+0x18>)
 8025ce4:	4613      	mov	r3, r2
 8025ce6:	b12c      	cbz	r4, 8025cf4 <__cxa_atexit+0x14>
 8025ce8:	460a      	mov	r2, r1
 8025cea:	4601      	mov	r1, r0
 8025cec:	2002      	movs	r0, #2
 8025cee:	f000 fd13 	bl	8026718 <__register_exitproc>
 8025cf2:	bd10      	pop	{r4, pc}
 8025cf4:	4620      	mov	r0, r4
 8025cf6:	e7fc      	b.n	8025cf2 <__cxa_atexit+0x12>
 8025cf8:	08026719 	.word	0x08026719

08025cfc <__errno>:
 8025cfc:	4b01      	ldr	r3, [pc, #4]	; (8025d04 <__errno+0x8>)
 8025cfe:	6818      	ldr	r0, [r3, #0]
 8025d00:	4770      	bx	lr
 8025d02:	bf00      	nop
 8025d04:	240000c4 	.word	0x240000c4

08025d08 <fiprintf>:
 8025d08:	b40e      	push	{r1, r2, r3}
 8025d0a:	b503      	push	{r0, r1, lr}
 8025d0c:	4601      	mov	r1, r0
 8025d0e:	ab03      	add	r3, sp, #12
 8025d10:	4805      	ldr	r0, [pc, #20]	; (8025d28 <fiprintf+0x20>)
 8025d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8025d16:	6800      	ldr	r0, [r0, #0]
 8025d18:	9301      	str	r3, [sp, #4]
 8025d1a:	f000 f925 	bl	8025f68 <_vfiprintf_r>
 8025d1e:	b002      	add	sp, #8
 8025d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8025d24:	b003      	add	sp, #12
 8025d26:	4770      	bx	lr
 8025d28:	240000c4 	.word	0x240000c4

08025d2c <__libc_init_array>:
 8025d2c:	b570      	push	{r4, r5, r6, lr}
 8025d2e:	4d0d      	ldr	r5, [pc, #52]	; (8025d64 <__libc_init_array+0x38>)
 8025d30:	4c0d      	ldr	r4, [pc, #52]	; (8025d68 <__libc_init_array+0x3c>)
 8025d32:	1b64      	subs	r4, r4, r5
 8025d34:	10a4      	asrs	r4, r4, #2
 8025d36:	2600      	movs	r6, #0
 8025d38:	42a6      	cmp	r6, r4
 8025d3a:	d109      	bne.n	8025d50 <__libc_init_array+0x24>
 8025d3c:	4d0b      	ldr	r5, [pc, #44]	; (8025d6c <__libc_init_array+0x40>)
 8025d3e:	4c0c      	ldr	r4, [pc, #48]	; (8025d70 <__libc_init_array+0x44>)
 8025d40:	f001 f824 	bl	8026d8c <_init>
 8025d44:	1b64      	subs	r4, r4, r5
 8025d46:	10a4      	asrs	r4, r4, #2
 8025d48:	2600      	movs	r6, #0
 8025d4a:	42a6      	cmp	r6, r4
 8025d4c:	d105      	bne.n	8025d5a <__libc_init_array+0x2e>
 8025d4e:	bd70      	pop	{r4, r5, r6, pc}
 8025d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8025d54:	4798      	blx	r3
 8025d56:	3601      	adds	r6, #1
 8025d58:	e7ee      	b.n	8025d38 <__libc_init_array+0xc>
 8025d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8025d5e:	4798      	blx	r3
 8025d60:	3601      	adds	r6, #1
 8025d62:	e7f2      	b.n	8025d4a <__libc_init_array+0x1e>
 8025d64:	0802ab28 	.word	0x0802ab28
 8025d68:	0802ab28 	.word	0x0802ab28
 8025d6c:	0802ab28 	.word	0x0802ab28
 8025d70:	0802ab3c 	.word	0x0802ab3c

08025d74 <malloc>:
 8025d74:	4b02      	ldr	r3, [pc, #8]	; (8025d80 <malloc+0xc>)
 8025d76:	4601      	mov	r1, r0
 8025d78:	6818      	ldr	r0, [r3, #0]
 8025d7a:	f000 b871 	b.w	8025e60 <_malloc_r>
 8025d7e:	bf00      	nop
 8025d80:	240000c4 	.word	0x240000c4

08025d84 <free>:
 8025d84:	4b02      	ldr	r3, [pc, #8]	; (8025d90 <free+0xc>)
 8025d86:	4601      	mov	r1, r0
 8025d88:	6818      	ldr	r0, [r3, #0]
 8025d8a:	f000 b819 	b.w	8025dc0 <_free_r>
 8025d8e:	bf00      	nop
 8025d90:	240000c4 	.word	0x240000c4

08025d94 <memcpy>:
 8025d94:	440a      	add	r2, r1
 8025d96:	4291      	cmp	r1, r2
 8025d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8025d9c:	d100      	bne.n	8025da0 <memcpy+0xc>
 8025d9e:	4770      	bx	lr
 8025da0:	b510      	push	{r4, lr}
 8025da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025daa:	4291      	cmp	r1, r2
 8025dac:	d1f9      	bne.n	8025da2 <memcpy+0xe>
 8025dae:	bd10      	pop	{r4, pc}

08025db0 <memset>:
 8025db0:	4402      	add	r2, r0
 8025db2:	4603      	mov	r3, r0
 8025db4:	4293      	cmp	r3, r2
 8025db6:	d100      	bne.n	8025dba <memset+0xa>
 8025db8:	4770      	bx	lr
 8025dba:	f803 1b01 	strb.w	r1, [r3], #1
 8025dbe:	e7f9      	b.n	8025db4 <memset+0x4>

08025dc0 <_free_r>:
 8025dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025dc2:	2900      	cmp	r1, #0
 8025dc4:	d048      	beq.n	8025e58 <_free_r+0x98>
 8025dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025dca:	9001      	str	r0, [sp, #4]
 8025dcc:	2b00      	cmp	r3, #0
 8025dce:	f1a1 0404 	sub.w	r4, r1, #4
 8025dd2:	bfb8      	it	lt
 8025dd4:	18e4      	addlt	r4, r4, r3
 8025dd6:	f000 ff21 	bl	8026c1c <__malloc_lock>
 8025dda:	4a20      	ldr	r2, [pc, #128]	; (8025e5c <_free_r+0x9c>)
 8025ddc:	9801      	ldr	r0, [sp, #4]
 8025dde:	6813      	ldr	r3, [r2, #0]
 8025de0:	4615      	mov	r5, r2
 8025de2:	b933      	cbnz	r3, 8025df2 <_free_r+0x32>
 8025de4:	6063      	str	r3, [r4, #4]
 8025de6:	6014      	str	r4, [r2, #0]
 8025de8:	b003      	add	sp, #12
 8025dea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025dee:	f000 bf1b 	b.w	8026c28 <__malloc_unlock>
 8025df2:	42a3      	cmp	r3, r4
 8025df4:	d90b      	bls.n	8025e0e <_free_r+0x4e>
 8025df6:	6821      	ldr	r1, [r4, #0]
 8025df8:	1862      	adds	r2, r4, r1
 8025dfa:	4293      	cmp	r3, r2
 8025dfc:	bf04      	itt	eq
 8025dfe:	681a      	ldreq	r2, [r3, #0]
 8025e00:	685b      	ldreq	r3, [r3, #4]
 8025e02:	6063      	str	r3, [r4, #4]
 8025e04:	bf04      	itt	eq
 8025e06:	1852      	addeq	r2, r2, r1
 8025e08:	6022      	streq	r2, [r4, #0]
 8025e0a:	602c      	str	r4, [r5, #0]
 8025e0c:	e7ec      	b.n	8025de8 <_free_r+0x28>
 8025e0e:	461a      	mov	r2, r3
 8025e10:	685b      	ldr	r3, [r3, #4]
 8025e12:	b10b      	cbz	r3, 8025e18 <_free_r+0x58>
 8025e14:	42a3      	cmp	r3, r4
 8025e16:	d9fa      	bls.n	8025e0e <_free_r+0x4e>
 8025e18:	6811      	ldr	r1, [r2, #0]
 8025e1a:	1855      	adds	r5, r2, r1
 8025e1c:	42a5      	cmp	r5, r4
 8025e1e:	d10b      	bne.n	8025e38 <_free_r+0x78>
 8025e20:	6824      	ldr	r4, [r4, #0]
 8025e22:	4421      	add	r1, r4
 8025e24:	1854      	adds	r4, r2, r1
 8025e26:	42a3      	cmp	r3, r4
 8025e28:	6011      	str	r1, [r2, #0]
 8025e2a:	d1dd      	bne.n	8025de8 <_free_r+0x28>
 8025e2c:	681c      	ldr	r4, [r3, #0]
 8025e2e:	685b      	ldr	r3, [r3, #4]
 8025e30:	6053      	str	r3, [r2, #4]
 8025e32:	4421      	add	r1, r4
 8025e34:	6011      	str	r1, [r2, #0]
 8025e36:	e7d7      	b.n	8025de8 <_free_r+0x28>
 8025e38:	d902      	bls.n	8025e40 <_free_r+0x80>
 8025e3a:	230c      	movs	r3, #12
 8025e3c:	6003      	str	r3, [r0, #0]
 8025e3e:	e7d3      	b.n	8025de8 <_free_r+0x28>
 8025e40:	6825      	ldr	r5, [r4, #0]
 8025e42:	1961      	adds	r1, r4, r5
 8025e44:	428b      	cmp	r3, r1
 8025e46:	bf04      	itt	eq
 8025e48:	6819      	ldreq	r1, [r3, #0]
 8025e4a:	685b      	ldreq	r3, [r3, #4]
 8025e4c:	6063      	str	r3, [r4, #4]
 8025e4e:	bf04      	itt	eq
 8025e50:	1949      	addeq	r1, r1, r5
 8025e52:	6021      	streq	r1, [r4, #0]
 8025e54:	6054      	str	r4, [r2, #4]
 8025e56:	e7c7      	b.n	8025de8 <_free_r+0x28>
 8025e58:	b003      	add	sp, #12
 8025e5a:	bd30      	pop	{r4, r5, pc}
 8025e5c:	2400afe8 	.word	0x2400afe8

08025e60 <_malloc_r>:
 8025e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e62:	1ccd      	adds	r5, r1, #3
 8025e64:	f025 0503 	bic.w	r5, r5, #3
 8025e68:	3508      	adds	r5, #8
 8025e6a:	2d0c      	cmp	r5, #12
 8025e6c:	bf38      	it	cc
 8025e6e:	250c      	movcc	r5, #12
 8025e70:	2d00      	cmp	r5, #0
 8025e72:	4606      	mov	r6, r0
 8025e74:	db01      	blt.n	8025e7a <_malloc_r+0x1a>
 8025e76:	42a9      	cmp	r1, r5
 8025e78:	d903      	bls.n	8025e82 <_malloc_r+0x22>
 8025e7a:	230c      	movs	r3, #12
 8025e7c:	6033      	str	r3, [r6, #0]
 8025e7e:	2000      	movs	r0, #0
 8025e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025e82:	f000 fecb 	bl	8026c1c <__malloc_lock>
 8025e86:	4921      	ldr	r1, [pc, #132]	; (8025f0c <_malloc_r+0xac>)
 8025e88:	680a      	ldr	r2, [r1, #0]
 8025e8a:	4614      	mov	r4, r2
 8025e8c:	b99c      	cbnz	r4, 8025eb6 <_malloc_r+0x56>
 8025e8e:	4f20      	ldr	r7, [pc, #128]	; (8025f10 <_malloc_r+0xb0>)
 8025e90:	683b      	ldr	r3, [r7, #0]
 8025e92:	b923      	cbnz	r3, 8025e9e <_malloc_r+0x3e>
 8025e94:	4621      	mov	r1, r4
 8025e96:	4630      	mov	r0, r6
 8025e98:	f000 fb2a 	bl	80264f0 <_sbrk_r>
 8025e9c:	6038      	str	r0, [r7, #0]
 8025e9e:	4629      	mov	r1, r5
 8025ea0:	4630      	mov	r0, r6
 8025ea2:	f000 fb25 	bl	80264f0 <_sbrk_r>
 8025ea6:	1c43      	adds	r3, r0, #1
 8025ea8:	d123      	bne.n	8025ef2 <_malloc_r+0x92>
 8025eaa:	230c      	movs	r3, #12
 8025eac:	6033      	str	r3, [r6, #0]
 8025eae:	4630      	mov	r0, r6
 8025eb0:	f000 feba 	bl	8026c28 <__malloc_unlock>
 8025eb4:	e7e3      	b.n	8025e7e <_malloc_r+0x1e>
 8025eb6:	6823      	ldr	r3, [r4, #0]
 8025eb8:	1b5b      	subs	r3, r3, r5
 8025eba:	d417      	bmi.n	8025eec <_malloc_r+0x8c>
 8025ebc:	2b0b      	cmp	r3, #11
 8025ebe:	d903      	bls.n	8025ec8 <_malloc_r+0x68>
 8025ec0:	6023      	str	r3, [r4, #0]
 8025ec2:	441c      	add	r4, r3
 8025ec4:	6025      	str	r5, [r4, #0]
 8025ec6:	e004      	b.n	8025ed2 <_malloc_r+0x72>
 8025ec8:	6863      	ldr	r3, [r4, #4]
 8025eca:	42a2      	cmp	r2, r4
 8025ecc:	bf0c      	ite	eq
 8025ece:	600b      	streq	r3, [r1, #0]
 8025ed0:	6053      	strne	r3, [r2, #4]
 8025ed2:	4630      	mov	r0, r6
 8025ed4:	f000 fea8 	bl	8026c28 <__malloc_unlock>
 8025ed8:	f104 000b 	add.w	r0, r4, #11
 8025edc:	1d23      	adds	r3, r4, #4
 8025ede:	f020 0007 	bic.w	r0, r0, #7
 8025ee2:	1ac2      	subs	r2, r0, r3
 8025ee4:	d0cc      	beq.n	8025e80 <_malloc_r+0x20>
 8025ee6:	1a1b      	subs	r3, r3, r0
 8025ee8:	50a3      	str	r3, [r4, r2]
 8025eea:	e7c9      	b.n	8025e80 <_malloc_r+0x20>
 8025eec:	4622      	mov	r2, r4
 8025eee:	6864      	ldr	r4, [r4, #4]
 8025ef0:	e7cc      	b.n	8025e8c <_malloc_r+0x2c>
 8025ef2:	1cc4      	adds	r4, r0, #3
 8025ef4:	f024 0403 	bic.w	r4, r4, #3
 8025ef8:	42a0      	cmp	r0, r4
 8025efa:	d0e3      	beq.n	8025ec4 <_malloc_r+0x64>
 8025efc:	1a21      	subs	r1, r4, r0
 8025efe:	4630      	mov	r0, r6
 8025f00:	f000 faf6 	bl	80264f0 <_sbrk_r>
 8025f04:	3001      	adds	r0, #1
 8025f06:	d1dd      	bne.n	8025ec4 <_malloc_r+0x64>
 8025f08:	e7cf      	b.n	8025eaa <_malloc_r+0x4a>
 8025f0a:	bf00      	nop
 8025f0c:	2400afe8 	.word	0x2400afe8
 8025f10:	2400afec 	.word	0x2400afec

08025f14 <__sfputc_r>:
 8025f14:	6893      	ldr	r3, [r2, #8]
 8025f16:	3b01      	subs	r3, #1
 8025f18:	2b00      	cmp	r3, #0
 8025f1a:	b410      	push	{r4}
 8025f1c:	6093      	str	r3, [r2, #8]
 8025f1e:	da08      	bge.n	8025f32 <__sfputc_r+0x1e>
 8025f20:	6994      	ldr	r4, [r2, #24]
 8025f22:	42a3      	cmp	r3, r4
 8025f24:	db01      	blt.n	8025f2a <__sfputc_r+0x16>
 8025f26:	290a      	cmp	r1, #10
 8025f28:	d103      	bne.n	8025f32 <__sfputc_r+0x1e>
 8025f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025f2e:	f000 bb33 	b.w	8026598 <__swbuf_r>
 8025f32:	6813      	ldr	r3, [r2, #0]
 8025f34:	1c58      	adds	r0, r3, #1
 8025f36:	6010      	str	r0, [r2, #0]
 8025f38:	7019      	strb	r1, [r3, #0]
 8025f3a:	4608      	mov	r0, r1
 8025f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025f40:	4770      	bx	lr

08025f42 <__sfputs_r>:
 8025f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f44:	4606      	mov	r6, r0
 8025f46:	460f      	mov	r7, r1
 8025f48:	4614      	mov	r4, r2
 8025f4a:	18d5      	adds	r5, r2, r3
 8025f4c:	42ac      	cmp	r4, r5
 8025f4e:	d101      	bne.n	8025f54 <__sfputs_r+0x12>
 8025f50:	2000      	movs	r0, #0
 8025f52:	e007      	b.n	8025f64 <__sfputs_r+0x22>
 8025f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025f58:	463a      	mov	r2, r7
 8025f5a:	4630      	mov	r0, r6
 8025f5c:	f7ff ffda 	bl	8025f14 <__sfputc_r>
 8025f60:	1c43      	adds	r3, r0, #1
 8025f62:	d1f3      	bne.n	8025f4c <__sfputs_r+0xa>
 8025f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025f68 <_vfiprintf_r>:
 8025f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f6c:	460d      	mov	r5, r1
 8025f6e:	b09d      	sub	sp, #116	; 0x74
 8025f70:	4614      	mov	r4, r2
 8025f72:	4698      	mov	r8, r3
 8025f74:	4606      	mov	r6, r0
 8025f76:	b118      	cbz	r0, 8025f80 <_vfiprintf_r+0x18>
 8025f78:	6983      	ldr	r3, [r0, #24]
 8025f7a:	b90b      	cbnz	r3, 8025f80 <_vfiprintf_r+0x18>
 8025f7c:	f000 fd48 	bl	8026a10 <__sinit>
 8025f80:	4b89      	ldr	r3, [pc, #548]	; (80261a8 <_vfiprintf_r+0x240>)
 8025f82:	429d      	cmp	r5, r3
 8025f84:	d11b      	bne.n	8025fbe <_vfiprintf_r+0x56>
 8025f86:	6875      	ldr	r5, [r6, #4]
 8025f88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025f8a:	07d9      	lsls	r1, r3, #31
 8025f8c:	d405      	bmi.n	8025f9a <_vfiprintf_r+0x32>
 8025f8e:	89ab      	ldrh	r3, [r5, #12]
 8025f90:	059a      	lsls	r2, r3, #22
 8025f92:	d402      	bmi.n	8025f9a <_vfiprintf_r+0x32>
 8025f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025f96:	f000 fdd9 	bl	8026b4c <__retarget_lock_acquire_recursive>
 8025f9a:	89ab      	ldrh	r3, [r5, #12]
 8025f9c:	071b      	lsls	r3, r3, #28
 8025f9e:	d501      	bpl.n	8025fa4 <_vfiprintf_r+0x3c>
 8025fa0:	692b      	ldr	r3, [r5, #16]
 8025fa2:	b9eb      	cbnz	r3, 8025fe0 <_vfiprintf_r+0x78>
 8025fa4:	4629      	mov	r1, r5
 8025fa6:	4630      	mov	r0, r6
 8025fa8:	f000 fb48 	bl	802663c <__swsetup_r>
 8025fac:	b1c0      	cbz	r0, 8025fe0 <_vfiprintf_r+0x78>
 8025fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025fb0:	07dc      	lsls	r4, r3, #31
 8025fb2:	d50e      	bpl.n	8025fd2 <_vfiprintf_r+0x6a>
 8025fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8025fb8:	b01d      	add	sp, #116	; 0x74
 8025fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025fbe:	4b7b      	ldr	r3, [pc, #492]	; (80261ac <_vfiprintf_r+0x244>)
 8025fc0:	429d      	cmp	r5, r3
 8025fc2:	d101      	bne.n	8025fc8 <_vfiprintf_r+0x60>
 8025fc4:	68b5      	ldr	r5, [r6, #8]
 8025fc6:	e7df      	b.n	8025f88 <_vfiprintf_r+0x20>
 8025fc8:	4b79      	ldr	r3, [pc, #484]	; (80261b0 <_vfiprintf_r+0x248>)
 8025fca:	429d      	cmp	r5, r3
 8025fcc:	bf08      	it	eq
 8025fce:	68f5      	ldreq	r5, [r6, #12]
 8025fd0:	e7da      	b.n	8025f88 <_vfiprintf_r+0x20>
 8025fd2:	89ab      	ldrh	r3, [r5, #12]
 8025fd4:	0598      	lsls	r0, r3, #22
 8025fd6:	d4ed      	bmi.n	8025fb4 <_vfiprintf_r+0x4c>
 8025fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025fda:	f000 fdb9 	bl	8026b50 <__retarget_lock_release_recursive>
 8025fde:	e7e9      	b.n	8025fb4 <_vfiprintf_r+0x4c>
 8025fe0:	2300      	movs	r3, #0
 8025fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8025fe4:	2320      	movs	r3, #32
 8025fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8025fee:	2330      	movs	r3, #48	; 0x30
 8025ff0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80261b4 <_vfiprintf_r+0x24c>
 8025ff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025ff8:	f04f 0901 	mov.w	r9, #1
 8025ffc:	4623      	mov	r3, r4
 8025ffe:	469a      	mov	sl, r3
 8026000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026004:	b10a      	cbz	r2, 802600a <_vfiprintf_r+0xa2>
 8026006:	2a25      	cmp	r2, #37	; 0x25
 8026008:	d1f9      	bne.n	8025ffe <_vfiprintf_r+0x96>
 802600a:	ebba 0b04 	subs.w	fp, sl, r4
 802600e:	d00b      	beq.n	8026028 <_vfiprintf_r+0xc0>
 8026010:	465b      	mov	r3, fp
 8026012:	4622      	mov	r2, r4
 8026014:	4629      	mov	r1, r5
 8026016:	4630      	mov	r0, r6
 8026018:	f7ff ff93 	bl	8025f42 <__sfputs_r>
 802601c:	3001      	adds	r0, #1
 802601e:	f000 80aa 	beq.w	8026176 <_vfiprintf_r+0x20e>
 8026022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026024:	445a      	add	r2, fp
 8026026:	9209      	str	r2, [sp, #36]	; 0x24
 8026028:	f89a 3000 	ldrb.w	r3, [sl]
 802602c:	2b00      	cmp	r3, #0
 802602e:	f000 80a2 	beq.w	8026176 <_vfiprintf_r+0x20e>
 8026032:	2300      	movs	r3, #0
 8026034:	f04f 32ff 	mov.w	r2, #4294967295
 8026038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802603c:	f10a 0a01 	add.w	sl, sl, #1
 8026040:	9304      	str	r3, [sp, #16]
 8026042:	9307      	str	r3, [sp, #28]
 8026044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026048:	931a      	str	r3, [sp, #104]	; 0x68
 802604a:	4654      	mov	r4, sl
 802604c:	2205      	movs	r2, #5
 802604e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026052:	4858      	ldr	r0, [pc, #352]	; (80261b4 <_vfiprintf_r+0x24c>)
 8026054:	f7da f944 	bl	80002e0 <memchr>
 8026058:	9a04      	ldr	r2, [sp, #16]
 802605a:	b9d8      	cbnz	r0, 8026094 <_vfiprintf_r+0x12c>
 802605c:	06d1      	lsls	r1, r2, #27
 802605e:	bf44      	itt	mi
 8026060:	2320      	movmi	r3, #32
 8026062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026066:	0713      	lsls	r3, r2, #28
 8026068:	bf44      	itt	mi
 802606a:	232b      	movmi	r3, #43	; 0x2b
 802606c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026070:	f89a 3000 	ldrb.w	r3, [sl]
 8026074:	2b2a      	cmp	r3, #42	; 0x2a
 8026076:	d015      	beq.n	80260a4 <_vfiprintf_r+0x13c>
 8026078:	9a07      	ldr	r2, [sp, #28]
 802607a:	4654      	mov	r4, sl
 802607c:	2000      	movs	r0, #0
 802607e:	f04f 0c0a 	mov.w	ip, #10
 8026082:	4621      	mov	r1, r4
 8026084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026088:	3b30      	subs	r3, #48	; 0x30
 802608a:	2b09      	cmp	r3, #9
 802608c:	d94e      	bls.n	802612c <_vfiprintf_r+0x1c4>
 802608e:	b1b0      	cbz	r0, 80260be <_vfiprintf_r+0x156>
 8026090:	9207      	str	r2, [sp, #28]
 8026092:	e014      	b.n	80260be <_vfiprintf_r+0x156>
 8026094:	eba0 0308 	sub.w	r3, r0, r8
 8026098:	fa09 f303 	lsl.w	r3, r9, r3
 802609c:	4313      	orrs	r3, r2
 802609e:	9304      	str	r3, [sp, #16]
 80260a0:	46a2      	mov	sl, r4
 80260a2:	e7d2      	b.n	802604a <_vfiprintf_r+0xe2>
 80260a4:	9b03      	ldr	r3, [sp, #12]
 80260a6:	1d19      	adds	r1, r3, #4
 80260a8:	681b      	ldr	r3, [r3, #0]
 80260aa:	9103      	str	r1, [sp, #12]
 80260ac:	2b00      	cmp	r3, #0
 80260ae:	bfbb      	ittet	lt
 80260b0:	425b      	neglt	r3, r3
 80260b2:	f042 0202 	orrlt.w	r2, r2, #2
 80260b6:	9307      	strge	r3, [sp, #28]
 80260b8:	9307      	strlt	r3, [sp, #28]
 80260ba:	bfb8      	it	lt
 80260bc:	9204      	strlt	r2, [sp, #16]
 80260be:	7823      	ldrb	r3, [r4, #0]
 80260c0:	2b2e      	cmp	r3, #46	; 0x2e
 80260c2:	d10c      	bne.n	80260de <_vfiprintf_r+0x176>
 80260c4:	7863      	ldrb	r3, [r4, #1]
 80260c6:	2b2a      	cmp	r3, #42	; 0x2a
 80260c8:	d135      	bne.n	8026136 <_vfiprintf_r+0x1ce>
 80260ca:	9b03      	ldr	r3, [sp, #12]
 80260cc:	1d1a      	adds	r2, r3, #4
 80260ce:	681b      	ldr	r3, [r3, #0]
 80260d0:	9203      	str	r2, [sp, #12]
 80260d2:	2b00      	cmp	r3, #0
 80260d4:	bfb8      	it	lt
 80260d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80260da:	3402      	adds	r4, #2
 80260dc:	9305      	str	r3, [sp, #20]
 80260de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80261c4 <_vfiprintf_r+0x25c>
 80260e2:	7821      	ldrb	r1, [r4, #0]
 80260e4:	2203      	movs	r2, #3
 80260e6:	4650      	mov	r0, sl
 80260e8:	f7da f8fa 	bl	80002e0 <memchr>
 80260ec:	b140      	cbz	r0, 8026100 <_vfiprintf_r+0x198>
 80260ee:	2340      	movs	r3, #64	; 0x40
 80260f0:	eba0 000a 	sub.w	r0, r0, sl
 80260f4:	fa03 f000 	lsl.w	r0, r3, r0
 80260f8:	9b04      	ldr	r3, [sp, #16]
 80260fa:	4303      	orrs	r3, r0
 80260fc:	3401      	adds	r4, #1
 80260fe:	9304      	str	r3, [sp, #16]
 8026100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026104:	482c      	ldr	r0, [pc, #176]	; (80261b8 <_vfiprintf_r+0x250>)
 8026106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802610a:	2206      	movs	r2, #6
 802610c:	f7da f8e8 	bl	80002e0 <memchr>
 8026110:	2800      	cmp	r0, #0
 8026112:	d03f      	beq.n	8026194 <_vfiprintf_r+0x22c>
 8026114:	4b29      	ldr	r3, [pc, #164]	; (80261bc <_vfiprintf_r+0x254>)
 8026116:	bb1b      	cbnz	r3, 8026160 <_vfiprintf_r+0x1f8>
 8026118:	9b03      	ldr	r3, [sp, #12]
 802611a:	3307      	adds	r3, #7
 802611c:	f023 0307 	bic.w	r3, r3, #7
 8026120:	3308      	adds	r3, #8
 8026122:	9303      	str	r3, [sp, #12]
 8026124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026126:	443b      	add	r3, r7
 8026128:	9309      	str	r3, [sp, #36]	; 0x24
 802612a:	e767      	b.n	8025ffc <_vfiprintf_r+0x94>
 802612c:	fb0c 3202 	mla	r2, ip, r2, r3
 8026130:	460c      	mov	r4, r1
 8026132:	2001      	movs	r0, #1
 8026134:	e7a5      	b.n	8026082 <_vfiprintf_r+0x11a>
 8026136:	2300      	movs	r3, #0
 8026138:	3401      	adds	r4, #1
 802613a:	9305      	str	r3, [sp, #20]
 802613c:	4619      	mov	r1, r3
 802613e:	f04f 0c0a 	mov.w	ip, #10
 8026142:	4620      	mov	r0, r4
 8026144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026148:	3a30      	subs	r2, #48	; 0x30
 802614a:	2a09      	cmp	r2, #9
 802614c:	d903      	bls.n	8026156 <_vfiprintf_r+0x1ee>
 802614e:	2b00      	cmp	r3, #0
 8026150:	d0c5      	beq.n	80260de <_vfiprintf_r+0x176>
 8026152:	9105      	str	r1, [sp, #20]
 8026154:	e7c3      	b.n	80260de <_vfiprintf_r+0x176>
 8026156:	fb0c 2101 	mla	r1, ip, r1, r2
 802615a:	4604      	mov	r4, r0
 802615c:	2301      	movs	r3, #1
 802615e:	e7f0      	b.n	8026142 <_vfiprintf_r+0x1da>
 8026160:	ab03      	add	r3, sp, #12
 8026162:	9300      	str	r3, [sp, #0]
 8026164:	462a      	mov	r2, r5
 8026166:	4b16      	ldr	r3, [pc, #88]	; (80261c0 <_vfiprintf_r+0x258>)
 8026168:	a904      	add	r1, sp, #16
 802616a:	4630      	mov	r0, r6
 802616c:	f3af 8000 	nop.w
 8026170:	4607      	mov	r7, r0
 8026172:	1c78      	adds	r0, r7, #1
 8026174:	d1d6      	bne.n	8026124 <_vfiprintf_r+0x1bc>
 8026176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026178:	07d9      	lsls	r1, r3, #31
 802617a:	d405      	bmi.n	8026188 <_vfiprintf_r+0x220>
 802617c:	89ab      	ldrh	r3, [r5, #12]
 802617e:	059a      	lsls	r2, r3, #22
 8026180:	d402      	bmi.n	8026188 <_vfiprintf_r+0x220>
 8026182:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026184:	f000 fce4 	bl	8026b50 <__retarget_lock_release_recursive>
 8026188:	89ab      	ldrh	r3, [r5, #12]
 802618a:	065b      	lsls	r3, r3, #25
 802618c:	f53f af12 	bmi.w	8025fb4 <_vfiprintf_r+0x4c>
 8026190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026192:	e711      	b.n	8025fb8 <_vfiprintf_r+0x50>
 8026194:	ab03      	add	r3, sp, #12
 8026196:	9300      	str	r3, [sp, #0]
 8026198:	462a      	mov	r2, r5
 802619a:	4b09      	ldr	r3, [pc, #36]	; (80261c0 <_vfiprintf_r+0x258>)
 802619c:	a904      	add	r1, sp, #16
 802619e:	4630      	mov	r0, r6
 80261a0:	f000 f880 	bl	80262a4 <_printf_i>
 80261a4:	e7e4      	b.n	8026170 <_vfiprintf_r+0x208>
 80261a6:	bf00      	nop
 80261a8:	0802aa94 	.word	0x0802aa94
 80261ac:	0802aab4 	.word	0x0802aab4
 80261b0:	0802aa74 	.word	0x0802aa74
 80261b4:	0802aa3c 	.word	0x0802aa3c
 80261b8:	0802aa46 	.word	0x0802aa46
 80261bc:	00000000 	.word	0x00000000
 80261c0:	08025f43 	.word	0x08025f43
 80261c4:	0802aa42 	.word	0x0802aa42

080261c8 <_printf_common>:
 80261c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80261cc:	4616      	mov	r6, r2
 80261ce:	4699      	mov	r9, r3
 80261d0:	688a      	ldr	r2, [r1, #8]
 80261d2:	690b      	ldr	r3, [r1, #16]
 80261d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80261d8:	4293      	cmp	r3, r2
 80261da:	bfb8      	it	lt
 80261dc:	4613      	movlt	r3, r2
 80261de:	6033      	str	r3, [r6, #0]
 80261e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80261e4:	4607      	mov	r7, r0
 80261e6:	460c      	mov	r4, r1
 80261e8:	b10a      	cbz	r2, 80261ee <_printf_common+0x26>
 80261ea:	3301      	adds	r3, #1
 80261ec:	6033      	str	r3, [r6, #0]
 80261ee:	6823      	ldr	r3, [r4, #0]
 80261f0:	0699      	lsls	r1, r3, #26
 80261f2:	bf42      	ittt	mi
 80261f4:	6833      	ldrmi	r3, [r6, #0]
 80261f6:	3302      	addmi	r3, #2
 80261f8:	6033      	strmi	r3, [r6, #0]
 80261fa:	6825      	ldr	r5, [r4, #0]
 80261fc:	f015 0506 	ands.w	r5, r5, #6
 8026200:	d106      	bne.n	8026210 <_printf_common+0x48>
 8026202:	f104 0a19 	add.w	sl, r4, #25
 8026206:	68e3      	ldr	r3, [r4, #12]
 8026208:	6832      	ldr	r2, [r6, #0]
 802620a:	1a9b      	subs	r3, r3, r2
 802620c:	42ab      	cmp	r3, r5
 802620e:	dc26      	bgt.n	802625e <_printf_common+0x96>
 8026210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026214:	1e13      	subs	r3, r2, #0
 8026216:	6822      	ldr	r2, [r4, #0]
 8026218:	bf18      	it	ne
 802621a:	2301      	movne	r3, #1
 802621c:	0692      	lsls	r2, r2, #26
 802621e:	d42b      	bmi.n	8026278 <_printf_common+0xb0>
 8026220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026224:	4649      	mov	r1, r9
 8026226:	4638      	mov	r0, r7
 8026228:	47c0      	blx	r8
 802622a:	3001      	adds	r0, #1
 802622c:	d01e      	beq.n	802626c <_printf_common+0xa4>
 802622e:	6823      	ldr	r3, [r4, #0]
 8026230:	68e5      	ldr	r5, [r4, #12]
 8026232:	6832      	ldr	r2, [r6, #0]
 8026234:	f003 0306 	and.w	r3, r3, #6
 8026238:	2b04      	cmp	r3, #4
 802623a:	bf08      	it	eq
 802623c:	1aad      	subeq	r5, r5, r2
 802623e:	68a3      	ldr	r3, [r4, #8]
 8026240:	6922      	ldr	r2, [r4, #16]
 8026242:	bf0c      	ite	eq
 8026244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026248:	2500      	movne	r5, #0
 802624a:	4293      	cmp	r3, r2
 802624c:	bfc4      	itt	gt
 802624e:	1a9b      	subgt	r3, r3, r2
 8026250:	18ed      	addgt	r5, r5, r3
 8026252:	2600      	movs	r6, #0
 8026254:	341a      	adds	r4, #26
 8026256:	42b5      	cmp	r5, r6
 8026258:	d11a      	bne.n	8026290 <_printf_common+0xc8>
 802625a:	2000      	movs	r0, #0
 802625c:	e008      	b.n	8026270 <_printf_common+0xa8>
 802625e:	2301      	movs	r3, #1
 8026260:	4652      	mov	r2, sl
 8026262:	4649      	mov	r1, r9
 8026264:	4638      	mov	r0, r7
 8026266:	47c0      	blx	r8
 8026268:	3001      	adds	r0, #1
 802626a:	d103      	bne.n	8026274 <_printf_common+0xac>
 802626c:	f04f 30ff 	mov.w	r0, #4294967295
 8026270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026274:	3501      	adds	r5, #1
 8026276:	e7c6      	b.n	8026206 <_printf_common+0x3e>
 8026278:	18e1      	adds	r1, r4, r3
 802627a:	1c5a      	adds	r2, r3, #1
 802627c:	2030      	movs	r0, #48	; 0x30
 802627e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026282:	4422      	add	r2, r4
 8026284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026288:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802628c:	3302      	adds	r3, #2
 802628e:	e7c7      	b.n	8026220 <_printf_common+0x58>
 8026290:	2301      	movs	r3, #1
 8026292:	4622      	mov	r2, r4
 8026294:	4649      	mov	r1, r9
 8026296:	4638      	mov	r0, r7
 8026298:	47c0      	blx	r8
 802629a:	3001      	adds	r0, #1
 802629c:	d0e6      	beq.n	802626c <_printf_common+0xa4>
 802629e:	3601      	adds	r6, #1
 80262a0:	e7d9      	b.n	8026256 <_printf_common+0x8e>
	...

080262a4 <_printf_i>:
 80262a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80262a8:	460c      	mov	r4, r1
 80262aa:	4691      	mov	r9, r2
 80262ac:	7e27      	ldrb	r7, [r4, #24]
 80262ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80262b0:	2f78      	cmp	r7, #120	; 0x78
 80262b2:	4680      	mov	r8, r0
 80262b4:	469a      	mov	sl, r3
 80262b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80262ba:	d807      	bhi.n	80262cc <_printf_i+0x28>
 80262bc:	2f62      	cmp	r7, #98	; 0x62
 80262be:	d80a      	bhi.n	80262d6 <_printf_i+0x32>
 80262c0:	2f00      	cmp	r7, #0
 80262c2:	f000 80d8 	beq.w	8026476 <_printf_i+0x1d2>
 80262c6:	2f58      	cmp	r7, #88	; 0x58
 80262c8:	f000 80a3 	beq.w	8026412 <_printf_i+0x16e>
 80262cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80262d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80262d4:	e03a      	b.n	802634c <_printf_i+0xa8>
 80262d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80262da:	2b15      	cmp	r3, #21
 80262dc:	d8f6      	bhi.n	80262cc <_printf_i+0x28>
 80262de:	a001      	add	r0, pc, #4	; (adr r0, 80262e4 <_printf_i+0x40>)
 80262e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80262e4:	0802633d 	.word	0x0802633d
 80262e8:	08026351 	.word	0x08026351
 80262ec:	080262cd 	.word	0x080262cd
 80262f0:	080262cd 	.word	0x080262cd
 80262f4:	080262cd 	.word	0x080262cd
 80262f8:	080262cd 	.word	0x080262cd
 80262fc:	08026351 	.word	0x08026351
 8026300:	080262cd 	.word	0x080262cd
 8026304:	080262cd 	.word	0x080262cd
 8026308:	080262cd 	.word	0x080262cd
 802630c:	080262cd 	.word	0x080262cd
 8026310:	0802645d 	.word	0x0802645d
 8026314:	08026381 	.word	0x08026381
 8026318:	0802643f 	.word	0x0802643f
 802631c:	080262cd 	.word	0x080262cd
 8026320:	080262cd 	.word	0x080262cd
 8026324:	0802647f 	.word	0x0802647f
 8026328:	080262cd 	.word	0x080262cd
 802632c:	08026381 	.word	0x08026381
 8026330:	080262cd 	.word	0x080262cd
 8026334:	080262cd 	.word	0x080262cd
 8026338:	08026447 	.word	0x08026447
 802633c:	680b      	ldr	r3, [r1, #0]
 802633e:	1d1a      	adds	r2, r3, #4
 8026340:	681b      	ldr	r3, [r3, #0]
 8026342:	600a      	str	r2, [r1, #0]
 8026344:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802634c:	2301      	movs	r3, #1
 802634e:	e0a3      	b.n	8026498 <_printf_i+0x1f4>
 8026350:	6825      	ldr	r5, [r4, #0]
 8026352:	6808      	ldr	r0, [r1, #0]
 8026354:	062e      	lsls	r6, r5, #24
 8026356:	f100 0304 	add.w	r3, r0, #4
 802635a:	d50a      	bpl.n	8026372 <_printf_i+0xce>
 802635c:	6805      	ldr	r5, [r0, #0]
 802635e:	600b      	str	r3, [r1, #0]
 8026360:	2d00      	cmp	r5, #0
 8026362:	da03      	bge.n	802636c <_printf_i+0xc8>
 8026364:	232d      	movs	r3, #45	; 0x2d
 8026366:	426d      	negs	r5, r5
 8026368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802636c:	485e      	ldr	r0, [pc, #376]	; (80264e8 <_printf_i+0x244>)
 802636e:	230a      	movs	r3, #10
 8026370:	e019      	b.n	80263a6 <_printf_i+0x102>
 8026372:	f015 0f40 	tst.w	r5, #64	; 0x40
 8026376:	6805      	ldr	r5, [r0, #0]
 8026378:	600b      	str	r3, [r1, #0]
 802637a:	bf18      	it	ne
 802637c:	b22d      	sxthne	r5, r5
 802637e:	e7ef      	b.n	8026360 <_printf_i+0xbc>
 8026380:	680b      	ldr	r3, [r1, #0]
 8026382:	6825      	ldr	r5, [r4, #0]
 8026384:	1d18      	adds	r0, r3, #4
 8026386:	6008      	str	r0, [r1, #0]
 8026388:	0628      	lsls	r0, r5, #24
 802638a:	d501      	bpl.n	8026390 <_printf_i+0xec>
 802638c:	681d      	ldr	r5, [r3, #0]
 802638e:	e002      	b.n	8026396 <_printf_i+0xf2>
 8026390:	0669      	lsls	r1, r5, #25
 8026392:	d5fb      	bpl.n	802638c <_printf_i+0xe8>
 8026394:	881d      	ldrh	r5, [r3, #0]
 8026396:	4854      	ldr	r0, [pc, #336]	; (80264e8 <_printf_i+0x244>)
 8026398:	2f6f      	cmp	r7, #111	; 0x6f
 802639a:	bf0c      	ite	eq
 802639c:	2308      	moveq	r3, #8
 802639e:	230a      	movne	r3, #10
 80263a0:	2100      	movs	r1, #0
 80263a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80263a6:	6866      	ldr	r6, [r4, #4]
 80263a8:	60a6      	str	r6, [r4, #8]
 80263aa:	2e00      	cmp	r6, #0
 80263ac:	bfa2      	ittt	ge
 80263ae:	6821      	ldrge	r1, [r4, #0]
 80263b0:	f021 0104 	bicge.w	r1, r1, #4
 80263b4:	6021      	strge	r1, [r4, #0]
 80263b6:	b90d      	cbnz	r5, 80263bc <_printf_i+0x118>
 80263b8:	2e00      	cmp	r6, #0
 80263ba:	d04d      	beq.n	8026458 <_printf_i+0x1b4>
 80263bc:	4616      	mov	r6, r2
 80263be:	fbb5 f1f3 	udiv	r1, r5, r3
 80263c2:	fb03 5711 	mls	r7, r3, r1, r5
 80263c6:	5dc7      	ldrb	r7, [r0, r7]
 80263c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80263cc:	462f      	mov	r7, r5
 80263ce:	42bb      	cmp	r3, r7
 80263d0:	460d      	mov	r5, r1
 80263d2:	d9f4      	bls.n	80263be <_printf_i+0x11a>
 80263d4:	2b08      	cmp	r3, #8
 80263d6:	d10b      	bne.n	80263f0 <_printf_i+0x14c>
 80263d8:	6823      	ldr	r3, [r4, #0]
 80263da:	07df      	lsls	r7, r3, #31
 80263dc:	d508      	bpl.n	80263f0 <_printf_i+0x14c>
 80263de:	6923      	ldr	r3, [r4, #16]
 80263e0:	6861      	ldr	r1, [r4, #4]
 80263e2:	4299      	cmp	r1, r3
 80263e4:	bfde      	ittt	le
 80263e6:	2330      	movle	r3, #48	; 0x30
 80263e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80263ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80263f0:	1b92      	subs	r2, r2, r6
 80263f2:	6122      	str	r2, [r4, #16]
 80263f4:	f8cd a000 	str.w	sl, [sp]
 80263f8:	464b      	mov	r3, r9
 80263fa:	aa03      	add	r2, sp, #12
 80263fc:	4621      	mov	r1, r4
 80263fe:	4640      	mov	r0, r8
 8026400:	f7ff fee2 	bl	80261c8 <_printf_common>
 8026404:	3001      	adds	r0, #1
 8026406:	d14c      	bne.n	80264a2 <_printf_i+0x1fe>
 8026408:	f04f 30ff 	mov.w	r0, #4294967295
 802640c:	b004      	add	sp, #16
 802640e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026412:	4835      	ldr	r0, [pc, #212]	; (80264e8 <_printf_i+0x244>)
 8026414:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8026418:	6823      	ldr	r3, [r4, #0]
 802641a:	680e      	ldr	r6, [r1, #0]
 802641c:	061f      	lsls	r7, r3, #24
 802641e:	f856 5b04 	ldr.w	r5, [r6], #4
 8026422:	600e      	str	r6, [r1, #0]
 8026424:	d514      	bpl.n	8026450 <_printf_i+0x1ac>
 8026426:	07d9      	lsls	r1, r3, #31
 8026428:	bf44      	itt	mi
 802642a:	f043 0320 	orrmi.w	r3, r3, #32
 802642e:	6023      	strmi	r3, [r4, #0]
 8026430:	b91d      	cbnz	r5, 802643a <_printf_i+0x196>
 8026432:	6823      	ldr	r3, [r4, #0]
 8026434:	f023 0320 	bic.w	r3, r3, #32
 8026438:	6023      	str	r3, [r4, #0]
 802643a:	2310      	movs	r3, #16
 802643c:	e7b0      	b.n	80263a0 <_printf_i+0xfc>
 802643e:	6823      	ldr	r3, [r4, #0]
 8026440:	f043 0320 	orr.w	r3, r3, #32
 8026444:	6023      	str	r3, [r4, #0]
 8026446:	2378      	movs	r3, #120	; 0x78
 8026448:	4828      	ldr	r0, [pc, #160]	; (80264ec <_printf_i+0x248>)
 802644a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802644e:	e7e3      	b.n	8026418 <_printf_i+0x174>
 8026450:	065e      	lsls	r6, r3, #25
 8026452:	bf48      	it	mi
 8026454:	b2ad      	uxthmi	r5, r5
 8026456:	e7e6      	b.n	8026426 <_printf_i+0x182>
 8026458:	4616      	mov	r6, r2
 802645a:	e7bb      	b.n	80263d4 <_printf_i+0x130>
 802645c:	680b      	ldr	r3, [r1, #0]
 802645e:	6826      	ldr	r6, [r4, #0]
 8026460:	6960      	ldr	r0, [r4, #20]
 8026462:	1d1d      	adds	r5, r3, #4
 8026464:	600d      	str	r5, [r1, #0]
 8026466:	0635      	lsls	r5, r6, #24
 8026468:	681b      	ldr	r3, [r3, #0]
 802646a:	d501      	bpl.n	8026470 <_printf_i+0x1cc>
 802646c:	6018      	str	r0, [r3, #0]
 802646e:	e002      	b.n	8026476 <_printf_i+0x1d2>
 8026470:	0671      	lsls	r1, r6, #25
 8026472:	d5fb      	bpl.n	802646c <_printf_i+0x1c8>
 8026474:	8018      	strh	r0, [r3, #0]
 8026476:	2300      	movs	r3, #0
 8026478:	6123      	str	r3, [r4, #16]
 802647a:	4616      	mov	r6, r2
 802647c:	e7ba      	b.n	80263f4 <_printf_i+0x150>
 802647e:	680b      	ldr	r3, [r1, #0]
 8026480:	1d1a      	adds	r2, r3, #4
 8026482:	600a      	str	r2, [r1, #0]
 8026484:	681e      	ldr	r6, [r3, #0]
 8026486:	6862      	ldr	r2, [r4, #4]
 8026488:	2100      	movs	r1, #0
 802648a:	4630      	mov	r0, r6
 802648c:	f7d9 ff28 	bl	80002e0 <memchr>
 8026490:	b108      	cbz	r0, 8026496 <_printf_i+0x1f2>
 8026492:	1b80      	subs	r0, r0, r6
 8026494:	6060      	str	r0, [r4, #4]
 8026496:	6863      	ldr	r3, [r4, #4]
 8026498:	6123      	str	r3, [r4, #16]
 802649a:	2300      	movs	r3, #0
 802649c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80264a0:	e7a8      	b.n	80263f4 <_printf_i+0x150>
 80264a2:	6923      	ldr	r3, [r4, #16]
 80264a4:	4632      	mov	r2, r6
 80264a6:	4649      	mov	r1, r9
 80264a8:	4640      	mov	r0, r8
 80264aa:	47d0      	blx	sl
 80264ac:	3001      	adds	r0, #1
 80264ae:	d0ab      	beq.n	8026408 <_printf_i+0x164>
 80264b0:	6823      	ldr	r3, [r4, #0]
 80264b2:	079b      	lsls	r3, r3, #30
 80264b4:	d413      	bmi.n	80264de <_printf_i+0x23a>
 80264b6:	68e0      	ldr	r0, [r4, #12]
 80264b8:	9b03      	ldr	r3, [sp, #12]
 80264ba:	4298      	cmp	r0, r3
 80264bc:	bfb8      	it	lt
 80264be:	4618      	movlt	r0, r3
 80264c0:	e7a4      	b.n	802640c <_printf_i+0x168>
 80264c2:	2301      	movs	r3, #1
 80264c4:	4632      	mov	r2, r6
 80264c6:	4649      	mov	r1, r9
 80264c8:	4640      	mov	r0, r8
 80264ca:	47d0      	blx	sl
 80264cc:	3001      	adds	r0, #1
 80264ce:	d09b      	beq.n	8026408 <_printf_i+0x164>
 80264d0:	3501      	adds	r5, #1
 80264d2:	68e3      	ldr	r3, [r4, #12]
 80264d4:	9903      	ldr	r1, [sp, #12]
 80264d6:	1a5b      	subs	r3, r3, r1
 80264d8:	42ab      	cmp	r3, r5
 80264da:	dcf2      	bgt.n	80264c2 <_printf_i+0x21e>
 80264dc:	e7eb      	b.n	80264b6 <_printf_i+0x212>
 80264de:	2500      	movs	r5, #0
 80264e0:	f104 0619 	add.w	r6, r4, #25
 80264e4:	e7f5      	b.n	80264d2 <_printf_i+0x22e>
 80264e6:	bf00      	nop
 80264e8:	0802aa4d 	.word	0x0802aa4d
 80264ec:	0802aa5e 	.word	0x0802aa5e

080264f0 <_sbrk_r>:
 80264f0:	b538      	push	{r3, r4, r5, lr}
 80264f2:	4d06      	ldr	r5, [pc, #24]	; (802650c <_sbrk_r+0x1c>)
 80264f4:	2300      	movs	r3, #0
 80264f6:	4604      	mov	r4, r0
 80264f8:	4608      	mov	r0, r1
 80264fa:	602b      	str	r3, [r5, #0]
 80264fc:	f7db f8ba 	bl	8001674 <_sbrk>
 8026500:	1c43      	adds	r3, r0, #1
 8026502:	d102      	bne.n	802650a <_sbrk_r+0x1a>
 8026504:	682b      	ldr	r3, [r5, #0]
 8026506:	b103      	cbz	r3, 802650a <_sbrk_r+0x1a>
 8026508:	6023      	str	r3, [r4, #0]
 802650a:	bd38      	pop	{r3, r4, r5, pc}
 802650c:	2400b46c 	.word	0x2400b46c

08026510 <_raise_r>:
 8026510:	291f      	cmp	r1, #31
 8026512:	b538      	push	{r3, r4, r5, lr}
 8026514:	4604      	mov	r4, r0
 8026516:	460d      	mov	r5, r1
 8026518:	d904      	bls.n	8026524 <_raise_r+0x14>
 802651a:	2316      	movs	r3, #22
 802651c:	6003      	str	r3, [r0, #0]
 802651e:	f04f 30ff 	mov.w	r0, #4294967295
 8026522:	bd38      	pop	{r3, r4, r5, pc}
 8026524:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026526:	b112      	cbz	r2, 802652e <_raise_r+0x1e>
 8026528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802652c:	b94b      	cbnz	r3, 8026542 <_raise_r+0x32>
 802652e:	4620      	mov	r0, r4
 8026530:	f000 f830 	bl	8026594 <_getpid_r>
 8026534:	462a      	mov	r2, r5
 8026536:	4601      	mov	r1, r0
 8026538:	4620      	mov	r0, r4
 802653a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802653e:	f000 b817 	b.w	8026570 <_kill_r>
 8026542:	2b01      	cmp	r3, #1
 8026544:	d00a      	beq.n	802655c <_raise_r+0x4c>
 8026546:	1c59      	adds	r1, r3, #1
 8026548:	d103      	bne.n	8026552 <_raise_r+0x42>
 802654a:	2316      	movs	r3, #22
 802654c:	6003      	str	r3, [r0, #0]
 802654e:	2001      	movs	r0, #1
 8026550:	e7e7      	b.n	8026522 <_raise_r+0x12>
 8026552:	2400      	movs	r4, #0
 8026554:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026558:	4628      	mov	r0, r5
 802655a:	4798      	blx	r3
 802655c:	2000      	movs	r0, #0
 802655e:	e7e0      	b.n	8026522 <_raise_r+0x12>

08026560 <raise>:
 8026560:	4b02      	ldr	r3, [pc, #8]	; (802656c <raise+0xc>)
 8026562:	4601      	mov	r1, r0
 8026564:	6818      	ldr	r0, [r3, #0]
 8026566:	f7ff bfd3 	b.w	8026510 <_raise_r>
 802656a:	bf00      	nop
 802656c:	240000c4 	.word	0x240000c4

08026570 <_kill_r>:
 8026570:	b538      	push	{r3, r4, r5, lr}
 8026572:	4d07      	ldr	r5, [pc, #28]	; (8026590 <_kill_r+0x20>)
 8026574:	2300      	movs	r3, #0
 8026576:	4604      	mov	r4, r0
 8026578:	4608      	mov	r0, r1
 802657a:	4611      	mov	r1, r2
 802657c:	602b      	str	r3, [r5, #0]
 802657e:	f7da fff1 	bl	8001564 <_kill>
 8026582:	1c43      	adds	r3, r0, #1
 8026584:	d102      	bne.n	802658c <_kill_r+0x1c>
 8026586:	682b      	ldr	r3, [r5, #0]
 8026588:	b103      	cbz	r3, 802658c <_kill_r+0x1c>
 802658a:	6023      	str	r3, [r4, #0]
 802658c:	bd38      	pop	{r3, r4, r5, pc}
 802658e:	bf00      	nop
 8026590:	2400b46c 	.word	0x2400b46c

08026594 <_getpid_r>:
 8026594:	f7da bfde 	b.w	8001554 <_getpid>

08026598 <__swbuf_r>:
 8026598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802659a:	460e      	mov	r6, r1
 802659c:	4614      	mov	r4, r2
 802659e:	4605      	mov	r5, r0
 80265a0:	b118      	cbz	r0, 80265aa <__swbuf_r+0x12>
 80265a2:	6983      	ldr	r3, [r0, #24]
 80265a4:	b90b      	cbnz	r3, 80265aa <__swbuf_r+0x12>
 80265a6:	f000 fa33 	bl	8026a10 <__sinit>
 80265aa:	4b21      	ldr	r3, [pc, #132]	; (8026630 <__swbuf_r+0x98>)
 80265ac:	429c      	cmp	r4, r3
 80265ae:	d12b      	bne.n	8026608 <__swbuf_r+0x70>
 80265b0:	686c      	ldr	r4, [r5, #4]
 80265b2:	69a3      	ldr	r3, [r4, #24]
 80265b4:	60a3      	str	r3, [r4, #8]
 80265b6:	89a3      	ldrh	r3, [r4, #12]
 80265b8:	071a      	lsls	r2, r3, #28
 80265ba:	d52f      	bpl.n	802661c <__swbuf_r+0x84>
 80265bc:	6923      	ldr	r3, [r4, #16]
 80265be:	b36b      	cbz	r3, 802661c <__swbuf_r+0x84>
 80265c0:	6923      	ldr	r3, [r4, #16]
 80265c2:	6820      	ldr	r0, [r4, #0]
 80265c4:	1ac0      	subs	r0, r0, r3
 80265c6:	6963      	ldr	r3, [r4, #20]
 80265c8:	b2f6      	uxtb	r6, r6
 80265ca:	4283      	cmp	r3, r0
 80265cc:	4637      	mov	r7, r6
 80265ce:	dc04      	bgt.n	80265da <__swbuf_r+0x42>
 80265d0:	4621      	mov	r1, r4
 80265d2:	4628      	mov	r0, r5
 80265d4:	f000 f988 	bl	80268e8 <_fflush_r>
 80265d8:	bb30      	cbnz	r0, 8026628 <__swbuf_r+0x90>
 80265da:	68a3      	ldr	r3, [r4, #8]
 80265dc:	3b01      	subs	r3, #1
 80265de:	60a3      	str	r3, [r4, #8]
 80265e0:	6823      	ldr	r3, [r4, #0]
 80265e2:	1c5a      	adds	r2, r3, #1
 80265e4:	6022      	str	r2, [r4, #0]
 80265e6:	701e      	strb	r6, [r3, #0]
 80265e8:	6963      	ldr	r3, [r4, #20]
 80265ea:	3001      	adds	r0, #1
 80265ec:	4283      	cmp	r3, r0
 80265ee:	d004      	beq.n	80265fa <__swbuf_r+0x62>
 80265f0:	89a3      	ldrh	r3, [r4, #12]
 80265f2:	07db      	lsls	r3, r3, #31
 80265f4:	d506      	bpl.n	8026604 <__swbuf_r+0x6c>
 80265f6:	2e0a      	cmp	r6, #10
 80265f8:	d104      	bne.n	8026604 <__swbuf_r+0x6c>
 80265fa:	4621      	mov	r1, r4
 80265fc:	4628      	mov	r0, r5
 80265fe:	f000 f973 	bl	80268e8 <_fflush_r>
 8026602:	b988      	cbnz	r0, 8026628 <__swbuf_r+0x90>
 8026604:	4638      	mov	r0, r7
 8026606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026608:	4b0a      	ldr	r3, [pc, #40]	; (8026634 <__swbuf_r+0x9c>)
 802660a:	429c      	cmp	r4, r3
 802660c:	d101      	bne.n	8026612 <__swbuf_r+0x7a>
 802660e:	68ac      	ldr	r4, [r5, #8]
 8026610:	e7cf      	b.n	80265b2 <__swbuf_r+0x1a>
 8026612:	4b09      	ldr	r3, [pc, #36]	; (8026638 <__swbuf_r+0xa0>)
 8026614:	429c      	cmp	r4, r3
 8026616:	bf08      	it	eq
 8026618:	68ec      	ldreq	r4, [r5, #12]
 802661a:	e7ca      	b.n	80265b2 <__swbuf_r+0x1a>
 802661c:	4621      	mov	r1, r4
 802661e:	4628      	mov	r0, r5
 8026620:	f000 f80c 	bl	802663c <__swsetup_r>
 8026624:	2800      	cmp	r0, #0
 8026626:	d0cb      	beq.n	80265c0 <__swbuf_r+0x28>
 8026628:	f04f 37ff 	mov.w	r7, #4294967295
 802662c:	e7ea      	b.n	8026604 <__swbuf_r+0x6c>
 802662e:	bf00      	nop
 8026630:	0802aa94 	.word	0x0802aa94
 8026634:	0802aab4 	.word	0x0802aab4
 8026638:	0802aa74 	.word	0x0802aa74

0802663c <__swsetup_r>:
 802663c:	4b32      	ldr	r3, [pc, #200]	; (8026708 <__swsetup_r+0xcc>)
 802663e:	b570      	push	{r4, r5, r6, lr}
 8026640:	681d      	ldr	r5, [r3, #0]
 8026642:	4606      	mov	r6, r0
 8026644:	460c      	mov	r4, r1
 8026646:	b125      	cbz	r5, 8026652 <__swsetup_r+0x16>
 8026648:	69ab      	ldr	r3, [r5, #24]
 802664a:	b913      	cbnz	r3, 8026652 <__swsetup_r+0x16>
 802664c:	4628      	mov	r0, r5
 802664e:	f000 f9df 	bl	8026a10 <__sinit>
 8026652:	4b2e      	ldr	r3, [pc, #184]	; (802670c <__swsetup_r+0xd0>)
 8026654:	429c      	cmp	r4, r3
 8026656:	d10f      	bne.n	8026678 <__swsetup_r+0x3c>
 8026658:	686c      	ldr	r4, [r5, #4]
 802665a:	89a3      	ldrh	r3, [r4, #12]
 802665c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026660:	0719      	lsls	r1, r3, #28
 8026662:	d42c      	bmi.n	80266be <__swsetup_r+0x82>
 8026664:	06dd      	lsls	r5, r3, #27
 8026666:	d411      	bmi.n	802668c <__swsetup_r+0x50>
 8026668:	2309      	movs	r3, #9
 802666a:	6033      	str	r3, [r6, #0]
 802666c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026670:	81a3      	strh	r3, [r4, #12]
 8026672:	f04f 30ff 	mov.w	r0, #4294967295
 8026676:	e03e      	b.n	80266f6 <__swsetup_r+0xba>
 8026678:	4b25      	ldr	r3, [pc, #148]	; (8026710 <__swsetup_r+0xd4>)
 802667a:	429c      	cmp	r4, r3
 802667c:	d101      	bne.n	8026682 <__swsetup_r+0x46>
 802667e:	68ac      	ldr	r4, [r5, #8]
 8026680:	e7eb      	b.n	802665a <__swsetup_r+0x1e>
 8026682:	4b24      	ldr	r3, [pc, #144]	; (8026714 <__swsetup_r+0xd8>)
 8026684:	429c      	cmp	r4, r3
 8026686:	bf08      	it	eq
 8026688:	68ec      	ldreq	r4, [r5, #12]
 802668a:	e7e6      	b.n	802665a <__swsetup_r+0x1e>
 802668c:	0758      	lsls	r0, r3, #29
 802668e:	d512      	bpl.n	80266b6 <__swsetup_r+0x7a>
 8026690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026692:	b141      	cbz	r1, 80266a6 <__swsetup_r+0x6a>
 8026694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026698:	4299      	cmp	r1, r3
 802669a:	d002      	beq.n	80266a2 <__swsetup_r+0x66>
 802669c:	4630      	mov	r0, r6
 802669e:	f7ff fb8f 	bl	8025dc0 <_free_r>
 80266a2:	2300      	movs	r3, #0
 80266a4:	6363      	str	r3, [r4, #52]	; 0x34
 80266a6:	89a3      	ldrh	r3, [r4, #12]
 80266a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80266ac:	81a3      	strh	r3, [r4, #12]
 80266ae:	2300      	movs	r3, #0
 80266b0:	6063      	str	r3, [r4, #4]
 80266b2:	6923      	ldr	r3, [r4, #16]
 80266b4:	6023      	str	r3, [r4, #0]
 80266b6:	89a3      	ldrh	r3, [r4, #12]
 80266b8:	f043 0308 	orr.w	r3, r3, #8
 80266bc:	81a3      	strh	r3, [r4, #12]
 80266be:	6923      	ldr	r3, [r4, #16]
 80266c0:	b94b      	cbnz	r3, 80266d6 <__swsetup_r+0x9a>
 80266c2:	89a3      	ldrh	r3, [r4, #12]
 80266c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80266c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80266cc:	d003      	beq.n	80266d6 <__swsetup_r+0x9a>
 80266ce:	4621      	mov	r1, r4
 80266d0:	4630      	mov	r0, r6
 80266d2:	f000 fa63 	bl	8026b9c <__smakebuf_r>
 80266d6:	89a0      	ldrh	r0, [r4, #12]
 80266d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80266dc:	f010 0301 	ands.w	r3, r0, #1
 80266e0:	d00a      	beq.n	80266f8 <__swsetup_r+0xbc>
 80266e2:	2300      	movs	r3, #0
 80266e4:	60a3      	str	r3, [r4, #8]
 80266e6:	6963      	ldr	r3, [r4, #20]
 80266e8:	425b      	negs	r3, r3
 80266ea:	61a3      	str	r3, [r4, #24]
 80266ec:	6923      	ldr	r3, [r4, #16]
 80266ee:	b943      	cbnz	r3, 8026702 <__swsetup_r+0xc6>
 80266f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80266f4:	d1ba      	bne.n	802666c <__swsetup_r+0x30>
 80266f6:	bd70      	pop	{r4, r5, r6, pc}
 80266f8:	0781      	lsls	r1, r0, #30
 80266fa:	bf58      	it	pl
 80266fc:	6963      	ldrpl	r3, [r4, #20]
 80266fe:	60a3      	str	r3, [r4, #8]
 8026700:	e7f4      	b.n	80266ec <__swsetup_r+0xb0>
 8026702:	2000      	movs	r0, #0
 8026704:	e7f7      	b.n	80266f6 <__swsetup_r+0xba>
 8026706:	bf00      	nop
 8026708:	240000c4 	.word	0x240000c4
 802670c:	0802aa94 	.word	0x0802aa94
 8026710:	0802aab4 	.word	0x0802aab4
 8026714:	0802aa74 	.word	0x0802aa74

08026718 <__register_exitproc>:
 8026718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802671c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80267d8 <__register_exitproc+0xc0>
 8026720:	4606      	mov	r6, r0
 8026722:	f8d8 0000 	ldr.w	r0, [r8]
 8026726:	461f      	mov	r7, r3
 8026728:	460d      	mov	r5, r1
 802672a:	4691      	mov	r9, r2
 802672c:	f000 fa0e 	bl	8026b4c <__retarget_lock_acquire_recursive>
 8026730:	4b25      	ldr	r3, [pc, #148]	; (80267c8 <__register_exitproc+0xb0>)
 8026732:	681c      	ldr	r4, [r3, #0]
 8026734:	b934      	cbnz	r4, 8026744 <__register_exitproc+0x2c>
 8026736:	4c25      	ldr	r4, [pc, #148]	; (80267cc <__register_exitproc+0xb4>)
 8026738:	601c      	str	r4, [r3, #0]
 802673a:	4b25      	ldr	r3, [pc, #148]	; (80267d0 <__register_exitproc+0xb8>)
 802673c:	b113      	cbz	r3, 8026744 <__register_exitproc+0x2c>
 802673e:	681b      	ldr	r3, [r3, #0]
 8026740:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026744:	6863      	ldr	r3, [r4, #4]
 8026746:	2b1f      	cmp	r3, #31
 8026748:	dd07      	ble.n	802675a <__register_exitproc+0x42>
 802674a:	f8d8 0000 	ldr.w	r0, [r8]
 802674e:	f000 f9ff 	bl	8026b50 <__retarget_lock_release_recursive>
 8026752:	f04f 30ff 	mov.w	r0, #4294967295
 8026756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802675a:	b34e      	cbz	r6, 80267b0 <__register_exitproc+0x98>
 802675c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026760:	b988      	cbnz	r0, 8026786 <__register_exitproc+0x6e>
 8026762:	4b1c      	ldr	r3, [pc, #112]	; (80267d4 <__register_exitproc+0xbc>)
 8026764:	b923      	cbnz	r3, 8026770 <__register_exitproc+0x58>
 8026766:	f8d8 0000 	ldr.w	r0, [r8]
 802676a:	f000 f9f0 	bl	8026b4e <__retarget_lock_release>
 802676e:	e7f0      	b.n	8026752 <__register_exitproc+0x3a>
 8026770:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026774:	f7ff fafe 	bl	8025d74 <malloc>
 8026778:	2800      	cmp	r0, #0
 802677a:	d0f4      	beq.n	8026766 <__register_exitproc+0x4e>
 802677c:	2300      	movs	r3, #0
 802677e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026782:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026786:	6863      	ldr	r3, [r4, #4]
 8026788:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802678c:	2201      	movs	r2, #1
 802678e:	409a      	lsls	r2, r3
 8026790:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026794:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026798:	4313      	orrs	r3, r2
 802679a:	2e02      	cmp	r6, #2
 802679c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80267a0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80267a4:	bf02      	ittt	eq
 80267a6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80267aa:	431a      	orreq	r2, r3
 80267ac:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80267b0:	6863      	ldr	r3, [r4, #4]
 80267b2:	f8d8 0000 	ldr.w	r0, [r8]
 80267b6:	1c5a      	adds	r2, r3, #1
 80267b8:	3302      	adds	r3, #2
 80267ba:	6062      	str	r2, [r4, #4]
 80267bc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80267c0:	f000 f9c6 	bl	8026b50 <__retarget_lock_release_recursive>
 80267c4:	2000      	movs	r0, #0
 80267c6:	e7c6      	b.n	8026756 <__register_exitproc+0x3e>
 80267c8:	2400b184 	.word	0x2400b184
 80267cc:	2400b0f8 	.word	0x2400b0f8
 80267d0:	0802aa70 	.word	0x0802aa70
 80267d4:	08025d75 	.word	0x08025d75
 80267d8:	24000128 	.word	0x24000128

080267dc <__sflush_r>:
 80267dc:	898a      	ldrh	r2, [r1, #12]
 80267de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80267e2:	4605      	mov	r5, r0
 80267e4:	0710      	lsls	r0, r2, #28
 80267e6:	460c      	mov	r4, r1
 80267e8:	d458      	bmi.n	802689c <__sflush_r+0xc0>
 80267ea:	684b      	ldr	r3, [r1, #4]
 80267ec:	2b00      	cmp	r3, #0
 80267ee:	dc05      	bgt.n	80267fc <__sflush_r+0x20>
 80267f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80267f2:	2b00      	cmp	r3, #0
 80267f4:	dc02      	bgt.n	80267fc <__sflush_r+0x20>
 80267f6:	2000      	movs	r0, #0
 80267f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80267fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80267fe:	2e00      	cmp	r6, #0
 8026800:	d0f9      	beq.n	80267f6 <__sflush_r+0x1a>
 8026802:	2300      	movs	r3, #0
 8026804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026808:	682f      	ldr	r7, [r5, #0]
 802680a:	602b      	str	r3, [r5, #0]
 802680c:	d032      	beq.n	8026874 <__sflush_r+0x98>
 802680e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026810:	89a3      	ldrh	r3, [r4, #12]
 8026812:	075a      	lsls	r2, r3, #29
 8026814:	d505      	bpl.n	8026822 <__sflush_r+0x46>
 8026816:	6863      	ldr	r3, [r4, #4]
 8026818:	1ac0      	subs	r0, r0, r3
 802681a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802681c:	b10b      	cbz	r3, 8026822 <__sflush_r+0x46>
 802681e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026820:	1ac0      	subs	r0, r0, r3
 8026822:	2300      	movs	r3, #0
 8026824:	4602      	mov	r2, r0
 8026826:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026828:	6a21      	ldr	r1, [r4, #32]
 802682a:	4628      	mov	r0, r5
 802682c:	47b0      	blx	r6
 802682e:	1c43      	adds	r3, r0, #1
 8026830:	89a3      	ldrh	r3, [r4, #12]
 8026832:	d106      	bne.n	8026842 <__sflush_r+0x66>
 8026834:	6829      	ldr	r1, [r5, #0]
 8026836:	291d      	cmp	r1, #29
 8026838:	d82c      	bhi.n	8026894 <__sflush_r+0xb8>
 802683a:	4a2a      	ldr	r2, [pc, #168]	; (80268e4 <__sflush_r+0x108>)
 802683c:	40ca      	lsrs	r2, r1
 802683e:	07d6      	lsls	r6, r2, #31
 8026840:	d528      	bpl.n	8026894 <__sflush_r+0xb8>
 8026842:	2200      	movs	r2, #0
 8026844:	6062      	str	r2, [r4, #4]
 8026846:	04d9      	lsls	r1, r3, #19
 8026848:	6922      	ldr	r2, [r4, #16]
 802684a:	6022      	str	r2, [r4, #0]
 802684c:	d504      	bpl.n	8026858 <__sflush_r+0x7c>
 802684e:	1c42      	adds	r2, r0, #1
 8026850:	d101      	bne.n	8026856 <__sflush_r+0x7a>
 8026852:	682b      	ldr	r3, [r5, #0]
 8026854:	b903      	cbnz	r3, 8026858 <__sflush_r+0x7c>
 8026856:	6560      	str	r0, [r4, #84]	; 0x54
 8026858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802685a:	602f      	str	r7, [r5, #0]
 802685c:	2900      	cmp	r1, #0
 802685e:	d0ca      	beq.n	80267f6 <__sflush_r+0x1a>
 8026860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026864:	4299      	cmp	r1, r3
 8026866:	d002      	beq.n	802686e <__sflush_r+0x92>
 8026868:	4628      	mov	r0, r5
 802686a:	f7ff faa9 	bl	8025dc0 <_free_r>
 802686e:	2000      	movs	r0, #0
 8026870:	6360      	str	r0, [r4, #52]	; 0x34
 8026872:	e7c1      	b.n	80267f8 <__sflush_r+0x1c>
 8026874:	6a21      	ldr	r1, [r4, #32]
 8026876:	2301      	movs	r3, #1
 8026878:	4628      	mov	r0, r5
 802687a:	47b0      	blx	r6
 802687c:	1c41      	adds	r1, r0, #1
 802687e:	d1c7      	bne.n	8026810 <__sflush_r+0x34>
 8026880:	682b      	ldr	r3, [r5, #0]
 8026882:	2b00      	cmp	r3, #0
 8026884:	d0c4      	beq.n	8026810 <__sflush_r+0x34>
 8026886:	2b1d      	cmp	r3, #29
 8026888:	d001      	beq.n	802688e <__sflush_r+0xb2>
 802688a:	2b16      	cmp	r3, #22
 802688c:	d101      	bne.n	8026892 <__sflush_r+0xb6>
 802688e:	602f      	str	r7, [r5, #0]
 8026890:	e7b1      	b.n	80267f6 <__sflush_r+0x1a>
 8026892:	89a3      	ldrh	r3, [r4, #12]
 8026894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026898:	81a3      	strh	r3, [r4, #12]
 802689a:	e7ad      	b.n	80267f8 <__sflush_r+0x1c>
 802689c:	690f      	ldr	r7, [r1, #16]
 802689e:	2f00      	cmp	r7, #0
 80268a0:	d0a9      	beq.n	80267f6 <__sflush_r+0x1a>
 80268a2:	0793      	lsls	r3, r2, #30
 80268a4:	680e      	ldr	r6, [r1, #0]
 80268a6:	bf08      	it	eq
 80268a8:	694b      	ldreq	r3, [r1, #20]
 80268aa:	600f      	str	r7, [r1, #0]
 80268ac:	bf18      	it	ne
 80268ae:	2300      	movne	r3, #0
 80268b0:	eba6 0807 	sub.w	r8, r6, r7
 80268b4:	608b      	str	r3, [r1, #8]
 80268b6:	f1b8 0f00 	cmp.w	r8, #0
 80268ba:	dd9c      	ble.n	80267f6 <__sflush_r+0x1a>
 80268bc:	6a21      	ldr	r1, [r4, #32]
 80268be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80268c0:	4643      	mov	r3, r8
 80268c2:	463a      	mov	r2, r7
 80268c4:	4628      	mov	r0, r5
 80268c6:	47b0      	blx	r6
 80268c8:	2800      	cmp	r0, #0
 80268ca:	dc06      	bgt.n	80268da <__sflush_r+0xfe>
 80268cc:	89a3      	ldrh	r3, [r4, #12]
 80268ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80268d2:	81a3      	strh	r3, [r4, #12]
 80268d4:	f04f 30ff 	mov.w	r0, #4294967295
 80268d8:	e78e      	b.n	80267f8 <__sflush_r+0x1c>
 80268da:	4407      	add	r7, r0
 80268dc:	eba8 0800 	sub.w	r8, r8, r0
 80268e0:	e7e9      	b.n	80268b6 <__sflush_r+0xda>
 80268e2:	bf00      	nop
 80268e4:	20400001 	.word	0x20400001

080268e8 <_fflush_r>:
 80268e8:	b538      	push	{r3, r4, r5, lr}
 80268ea:	690b      	ldr	r3, [r1, #16]
 80268ec:	4605      	mov	r5, r0
 80268ee:	460c      	mov	r4, r1
 80268f0:	b913      	cbnz	r3, 80268f8 <_fflush_r+0x10>
 80268f2:	2500      	movs	r5, #0
 80268f4:	4628      	mov	r0, r5
 80268f6:	bd38      	pop	{r3, r4, r5, pc}
 80268f8:	b118      	cbz	r0, 8026902 <_fflush_r+0x1a>
 80268fa:	6983      	ldr	r3, [r0, #24]
 80268fc:	b90b      	cbnz	r3, 8026902 <_fflush_r+0x1a>
 80268fe:	f000 f887 	bl	8026a10 <__sinit>
 8026902:	4b14      	ldr	r3, [pc, #80]	; (8026954 <_fflush_r+0x6c>)
 8026904:	429c      	cmp	r4, r3
 8026906:	d11b      	bne.n	8026940 <_fflush_r+0x58>
 8026908:	686c      	ldr	r4, [r5, #4]
 802690a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802690e:	2b00      	cmp	r3, #0
 8026910:	d0ef      	beq.n	80268f2 <_fflush_r+0xa>
 8026912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026914:	07d0      	lsls	r0, r2, #31
 8026916:	d404      	bmi.n	8026922 <_fflush_r+0x3a>
 8026918:	0599      	lsls	r1, r3, #22
 802691a:	d402      	bmi.n	8026922 <_fflush_r+0x3a>
 802691c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802691e:	f000 f915 	bl	8026b4c <__retarget_lock_acquire_recursive>
 8026922:	4628      	mov	r0, r5
 8026924:	4621      	mov	r1, r4
 8026926:	f7ff ff59 	bl	80267dc <__sflush_r>
 802692a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802692c:	07da      	lsls	r2, r3, #31
 802692e:	4605      	mov	r5, r0
 8026930:	d4e0      	bmi.n	80268f4 <_fflush_r+0xc>
 8026932:	89a3      	ldrh	r3, [r4, #12]
 8026934:	059b      	lsls	r3, r3, #22
 8026936:	d4dd      	bmi.n	80268f4 <_fflush_r+0xc>
 8026938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802693a:	f000 f909 	bl	8026b50 <__retarget_lock_release_recursive>
 802693e:	e7d9      	b.n	80268f4 <_fflush_r+0xc>
 8026940:	4b05      	ldr	r3, [pc, #20]	; (8026958 <_fflush_r+0x70>)
 8026942:	429c      	cmp	r4, r3
 8026944:	d101      	bne.n	802694a <_fflush_r+0x62>
 8026946:	68ac      	ldr	r4, [r5, #8]
 8026948:	e7df      	b.n	802690a <_fflush_r+0x22>
 802694a:	4b04      	ldr	r3, [pc, #16]	; (802695c <_fflush_r+0x74>)
 802694c:	429c      	cmp	r4, r3
 802694e:	bf08      	it	eq
 8026950:	68ec      	ldreq	r4, [r5, #12]
 8026952:	e7da      	b.n	802690a <_fflush_r+0x22>
 8026954:	0802aa94 	.word	0x0802aa94
 8026958:	0802aab4 	.word	0x0802aab4
 802695c:	0802aa74 	.word	0x0802aa74

08026960 <std>:
 8026960:	2300      	movs	r3, #0
 8026962:	b510      	push	{r4, lr}
 8026964:	4604      	mov	r4, r0
 8026966:	e9c0 3300 	strd	r3, r3, [r0]
 802696a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802696e:	6083      	str	r3, [r0, #8]
 8026970:	8181      	strh	r1, [r0, #12]
 8026972:	6643      	str	r3, [r0, #100]	; 0x64
 8026974:	81c2      	strh	r2, [r0, #14]
 8026976:	6183      	str	r3, [r0, #24]
 8026978:	4619      	mov	r1, r3
 802697a:	2208      	movs	r2, #8
 802697c:	305c      	adds	r0, #92	; 0x5c
 802697e:	f7ff fa17 	bl	8025db0 <memset>
 8026982:	4b05      	ldr	r3, [pc, #20]	; (8026998 <std+0x38>)
 8026984:	6263      	str	r3, [r4, #36]	; 0x24
 8026986:	4b05      	ldr	r3, [pc, #20]	; (802699c <std+0x3c>)
 8026988:	62a3      	str	r3, [r4, #40]	; 0x28
 802698a:	4b05      	ldr	r3, [pc, #20]	; (80269a0 <std+0x40>)
 802698c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802698e:	4b05      	ldr	r3, [pc, #20]	; (80269a4 <std+0x44>)
 8026990:	6224      	str	r4, [r4, #32]
 8026992:	6323      	str	r3, [r4, #48]	; 0x30
 8026994:	bd10      	pop	{r4, pc}
 8026996:	bf00      	nop
 8026998:	08026c35 	.word	0x08026c35
 802699c:	08026c57 	.word	0x08026c57
 80269a0:	08026c8f 	.word	0x08026c8f
 80269a4:	08026cb3 	.word	0x08026cb3

080269a8 <_cleanup_r>:
 80269a8:	4901      	ldr	r1, [pc, #4]	; (80269b0 <_cleanup_r+0x8>)
 80269aa:	f000 b8af 	b.w	8026b0c <_fwalk_reent>
 80269ae:	bf00      	nop
 80269b0:	080268e9 	.word	0x080268e9

080269b4 <__sfmoreglue>:
 80269b4:	b570      	push	{r4, r5, r6, lr}
 80269b6:	1e4a      	subs	r2, r1, #1
 80269b8:	2568      	movs	r5, #104	; 0x68
 80269ba:	4355      	muls	r5, r2
 80269bc:	460e      	mov	r6, r1
 80269be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80269c2:	f7ff fa4d 	bl	8025e60 <_malloc_r>
 80269c6:	4604      	mov	r4, r0
 80269c8:	b140      	cbz	r0, 80269dc <__sfmoreglue+0x28>
 80269ca:	2100      	movs	r1, #0
 80269cc:	e9c0 1600 	strd	r1, r6, [r0]
 80269d0:	300c      	adds	r0, #12
 80269d2:	60a0      	str	r0, [r4, #8]
 80269d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80269d8:	f7ff f9ea 	bl	8025db0 <memset>
 80269dc:	4620      	mov	r0, r4
 80269de:	bd70      	pop	{r4, r5, r6, pc}

080269e0 <__sfp_lock_acquire>:
 80269e0:	4801      	ldr	r0, [pc, #4]	; (80269e8 <__sfp_lock_acquire+0x8>)
 80269e2:	f000 b8b3 	b.w	8026b4c <__retarget_lock_acquire_recursive>
 80269e6:	bf00      	nop
 80269e8:	2400b468 	.word	0x2400b468

080269ec <__sfp_lock_release>:
 80269ec:	4801      	ldr	r0, [pc, #4]	; (80269f4 <__sfp_lock_release+0x8>)
 80269ee:	f000 b8af 	b.w	8026b50 <__retarget_lock_release_recursive>
 80269f2:	bf00      	nop
 80269f4:	2400b468 	.word	0x2400b468

080269f8 <__sinit_lock_acquire>:
 80269f8:	4801      	ldr	r0, [pc, #4]	; (8026a00 <__sinit_lock_acquire+0x8>)
 80269fa:	f000 b8a7 	b.w	8026b4c <__retarget_lock_acquire_recursive>
 80269fe:	bf00      	nop
 8026a00:	2400b463 	.word	0x2400b463

08026a04 <__sinit_lock_release>:
 8026a04:	4801      	ldr	r0, [pc, #4]	; (8026a0c <__sinit_lock_release+0x8>)
 8026a06:	f000 b8a3 	b.w	8026b50 <__retarget_lock_release_recursive>
 8026a0a:	bf00      	nop
 8026a0c:	2400b463 	.word	0x2400b463

08026a10 <__sinit>:
 8026a10:	b510      	push	{r4, lr}
 8026a12:	4604      	mov	r4, r0
 8026a14:	f7ff fff0 	bl	80269f8 <__sinit_lock_acquire>
 8026a18:	69a3      	ldr	r3, [r4, #24]
 8026a1a:	b11b      	cbz	r3, 8026a24 <__sinit+0x14>
 8026a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026a20:	f7ff bff0 	b.w	8026a04 <__sinit_lock_release>
 8026a24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026a28:	6523      	str	r3, [r4, #80]	; 0x50
 8026a2a:	4b13      	ldr	r3, [pc, #76]	; (8026a78 <__sinit+0x68>)
 8026a2c:	4a13      	ldr	r2, [pc, #76]	; (8026a7c <__sinit+0x6c>)
 8026a2e:	681b      	ldr	r3, [r3, #0]
 8026a30:	62a2      	str	r2, [r4, #40]	; 0x28
 8026a32:	42a3      	cmp	r3, r4
 8026a34:	bf04      	itt	eq
 8026a36:	2301      	moveq	r3, #1
 8026a38:	61a3      	streq	r3, [r4, #24]
 8026a3a:	4620      	mov	r0, r4
 8026a3c:	f000 f820 	bl	8026a80 <__sfp>
 8026a40:	6060      	str	r0, [r4, #4]
 8026a42:	4620      	mov	r0, r4
 8026a44:	f000 f81c 	bl	8026a80 <__sfp>
 8026a48:	60a0      	str	r0, [r4, #8]
 8026a4a:	4620      	mov	r0, r4
 8026a4c:	f000 f818 	bl	8026a80 <__sfp>
 8026a50:	2200      	movs	r2, #0
 8026a52:	60e0      	str	r0, [r4, #12]
 8026a54:	2104      	movs	r1, #4
 8026a56:	6860      	ldr	r0, [r4, #4]
 8026a58:	f7ff ff82 	bl	8026960 <std>
 8026a5c:	68a0      	ldr	r0, [r4, #8]
 8026a5e:	2201      	movs	r2, #1
 8026a60:	2109      	movs	r1, #9
 8026a62:	f7ff ff7d 	bl	8026960 <std>
 8026a66:	68e0      	ldr	r0, [r4, #12]
 8026a68:	2202      	movs	r2, #2
 8026a6a:	2112      	movs	r1, #18
 8026a6c:	f7ff ff78 	bl	8026960 <std>
 8026a70:	2301      	movs	r3, #1
 8026a72:	61a3      	str	r3, [r4, #24]
 8026a74:	e7d2      	b.n	8026a1c <__sinit+0xc>
 8026a76:	bf00      	nop
 8026a78:	0802aa38 	.word	0x0802aa38
 8026a7c:	080269a9 	.word	0x080269a9

08026a80 <__sfp>:
 8026a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026a82:	4607      	mov	r7, r0
 8026a84:	f7ff ffac 	bl	80269e0 <__sfp_lock_acquire>
 8026a88:	4b1e      	ldr	r3, [pc, #120]	; (8026b04 <__sfp+0x84>)
 8026a8a:	681e      	ldr	r6, [r3, #0]
 8026a8c:	69b3      	ldr	r3, [r6, #24]
 8026a8e:	b913      	cbnz	r3, 8026a96 <__sfp+0x16>
 8026a90:	4630      	mov	r0, r6
 8026a92:	f7ff ffbd 	bl	8026a10 <__sinit>
 8026a96:	3648      	adds	r6, #72	; 0x48
 8026a98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026a9c:	3b01      	subs	r3, #1
 8026a9e:	d503      	bpl.n	8026aa8 <__sfp+0x28>
 8026aa0:	6833      	ldr	r3, [r6, #0]
 8026aa2:	b30b      	cbz	r3, 8026ae8 <__sfp+0x68>
 8026aa4:	6836      	ldr	r6, [r6, #0]
 8026aa6:	e7f7      	b.n	8026a98 <__sfp+0x18>
 8026aa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026aac:	b9d5      	cbnz	r5, 8026ae4 <__sfp+0x64>
 8026aae:	4b16      	ldr	r3, [pc, #88]	; (8026b08 <__sfp+0x88>)
 8026ab0:	60e3      	str	r3, [r4, #12]
 8026ab2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026ab6:	6665      	str	r5, [r4, #100]	; 0x64
 8026ab8:	f000 f847 	bl	8026b4a <__retarget_lock_init_recursive>
 8026abc:	f7ff ff96 	bl	80269ec <__sfp_lock_release>
 8026ac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026ac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026ac8:	6025      	str	r5, [r4, #0]
 8026aca:	61a5      	str	r5, [r4, #24]
 8026acc:	2208      	movs	r2, #8
 8026ace:	4629      	mov	r1, r5
 8026ad0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026ad4:	f7ff f96c 	bl	8025db0 <memset>
 8026ad8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026adc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026ae0:	4620      	mov	r0, r4
 8026ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026ae4:	3468      	adds	r4, #104	; 0x68
 8026ae6:	e7d9      	b.n	8026a9c <__sfp+0x1c>
 8026ae8:	2104      	movs	r1, #4
 8026aea:	4638      	mov	r0, r7
 8026aec:	f7ff ff62 	bl	80269b4 <__sfmoreglue>
 8026af0:	4604      	mov	r4, r0
 8026af2:	6030      	str	r0, [r6, #0]
 8026af4:	2800      	cmp	r0, #0
 8026af6:	d1d5      	bne.n	8026aa4 <__sfp+0x24>
 8026af8:	f7ff ff78 	bl	80269ec <__sfp_lock_release>
 8026afc:	230c      	movs	r3, #12
 8026afe:	603b      	str	r3, [r7, #0]
 8026b00:	e7ee      	b.n	8026ae0 <__sfp+0x60>
 8026b02:	bf00      	nop
 8026b04:	0802aa38 	.word	0x0802aa38
 8026b08:	ffff0001 	.word	0xffff0001

08026b0c <_fwalk_reent>:
 8026b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026b10:	4606      	mov	r6, r0
 8026b12:	4688      	mov	r8, r1
 8026b14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026b18:	2700      	movs	r7, #0
 8026b1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026b1e:	f1b9 0901 	subs.w	r9, r9, #1
 8026b22:	d505      	bpl.n	8026b30 <_fwalk_reent+0x24>
 8026b24:	6824      	ldr	r4, [r4, #0]
 8026b26:	2c00      	cmp	r4, #0
 8026b28:	d1f7      	bne.n	8026b1a <_fwalk_reent+0xe>
 8026b2a:	4638      	mov	r0, r7
 8026b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026b30:	89ab      	ldrh	r3, [r5, #12]
 8026b32:	2b01      	cmp	r3, #1
 8026b34:	d907      	bls.n	8026b46 <_fwalk_reent+0x3a>
 8026b36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026b3a:	3301      	adds	r3, #1
 8026b3c:	d003      	beq.n	8026b46 <_fwalk_reent+0x3a>
 8026b3e:	4629      	mov	r1, r5
 8026b40:	4630      	mov	r0, r6
 8026b42:	47c0      	blx	r8
 8026b44:	4307      	orrs	r7, r0
 8026b46:	3568      	adds	r5, #104	; 0x68
 8026b48:	e7e9      	b.n	8026b1e <_fwalk_reent+0x12>

08026b4a <__retarget_lock_init_recursive>:
 8026b4a:	4770      	bx	lr

08026b4c <__retarget_lock_acquire_recursive>:
 8026b4c:	4770      	bx	lr

08026b4e <__retarget_lock_release>:
 8026b4e:	4770      	bx	lr

08026b50 <__retarget_lock_release_recursive>:
 8026b50:	4770      	bx	lr

08026b52 <__swhatbuf_r>:
 8026b52:	b570      	push	{r4, r5, r6, lr}
 8026b54:	460e      	mov	r6, r1
 8026b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b5a:	2900      	cmp	r1, #0
 8026b5c:	b096      	sub	sp, #88	; 0x58
 8026b5e:	4614      	mov	r4, r2
 8026b60:	461d      	mov	r5, r3
 8026b62:	da07      	bge.n	8026b74 <__swhatbuf_r+0x22>
 8026b64:	2300      	movs	r3, #0
 8026b66:	602b      	str	r3, [r5, #0]
 8026b68:	89b3      	ldrh	r3, [r6, #12]
 8026b6a:	061a      	lsls	r2, r3, #24
 8026b6c:	d410      	bmi.n	8026b90 <__swhatbuf_r+0x3e>
 8026b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026b72:	e00e      	b.n	8026b92 <__swhatbuf_r+0x40>
 8026b74:	466a      	mov	r2, sp
 8026b76:	f000 f8c3 	bl	8026d00 <_fstat_r>
 8026b7a:	2800      	cmp	r0, #0
 8026b7c:	dbf2      	blt.n	8026b64 <__swhatbuf_r+0x12>
 8026b7e:	9a01      	ldr	r2, [sp, #4]
 8026b80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026b84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026b88:	425a      	negs	r2, r3
 8026b8a:	415a      	adcs	r2, r3
 8026b8c:	602a      	str	r2, [r5, #0]
 8026b8e:	e7ee      	b.n	8026b6e <__swhatbuf_r+0x1c>
 8026b90:	2340      	movs	r3, #64	; 0x40
 8026b92:	2000      	movs	r0, #0
 8026b94:	6023      	str	r3, [r4, #0]
 8026b96:	b016      	add	sp, #88	; 0x58
 8026b98:	bd70      	pop	{r4, r5, r6, pc}
	...

08026b9c <__smakebuf_r>:
 8026b9c:	898b      	ldrh	r3, [r1, #12]
 8026b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026ba0:	079d      	lsls	r5, r3, #30
 8026ba2:	4606      	mov	r6, r0
 8026ba4:	460c      	mov	r4, r1
 8026ba6:	d507      	bpl.n	8026bb8 <__smakebuf_r+0x1c>
 8026ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026bac:	6023      	str	r3, [r4, #0]
 8026bae:	6123      	str	r3, [r4, #16]
 8026bb0:	2301      	movs	r3, #1
 8026bb2:	6163      	str	r3, [r4, #20]
 8026bb4:	b002      	add	sp, #8
 8026bb6:	bd70      	pop	{r4, r5, r6, pc}
 8026bb8:	ab01      	add	r3, sp, #4
 8026bba:	466a      	mov	r2, sp
 8026bbc:	f7ff ffc9 	bl	8026b52 <__swhatbuf_r>
 8026bc0:	9900      	ldr	r1, [sp, #0]
 8026bc2:	4605      	mov	r5, r0
 8026bc4:	4630      	mov	r0, r6
 8026bc6:	f7ff f94b 	bl	8025e60 <_malloc_r>
 8026bca:	b948      	cbnz	r0, 8026be0 <__smakebuf_r+0x44>
 8026bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026bd0:	059a      	lsls	r2, r3, #22
 8026bd2:	d4ef      	bmi.n	8026bb4 <__smakebuf_r+0x18>
 8026bd4:	f023 0303 	bic.w	r3, r3, #3
 8026bd8:	f043 0302 	orr.w	r3, r3, #2
 8026bdc:	81a3      	strh	r3, [r4, #12]
 8026bde:	e7e3      	b.n	8026ba8 <__smakebuf_r+0xc>
 8026be0:	4b0d      	ldr	r3, [pc, #52]	; (8026c18 <__smakebuf_r+0x7c>)
 8026be2:	62b3      	str	r3, [r6, #40]	; 0x28
 8026be4:	89a3      	ldrh	r3, [r4, #12]
 8026be6:	6020      	str	r0, [r4, #0]
 8026be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026bec:	81a3      	strh	r3, [r4, #12]
 8026bee:	9b00      	ldr	r3, [sp, #0]
 8026bf0:	6163      	str	r3, [r4, #20]
 8026bf2:	9b01      	ldr	r3, [sp, #4]
 8026bf4:	6120      	str	r0, [r4, #16]
 8026bf6:	b15b      	cbz	r3, 8026c10 <__smakebuf_r+0x74>
 8026bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026bfc:	4630      	mov	r0, r6
 8026bfe:	f000 f891 	bl	8026d24 <_isatty_r>
 8026c02:	b128      	cbz	r0, 8026c10 <__smakebuf_r+0x74>
 8026c04:	89a3      	ldrh	r3, [r4, #12]
 8026c06:	f023 0303 	bic.w	r3, r3, #3
 8026c0a:	f043 0301 	orr.w	r3, r3, #1
 8026c0e:	81a3      	strh	r3, [r4, #12]
 8026c10:	89a0      	ldrh	r0, [r4, #12]
 8026c12:	4305      	orrs	r5, r0
 8026c14:	81a5      	strh	r5, [r4, #12]
 8026c16:	e7cd      	b.n	8026bb4 <__smakebuf_r+0x18>
 8026c18:	080269a9 	.word	0x080269a9

08026c1c <__malloc_lock>:
 8026c1c:	4801      	ldr	r0, [pc, #4]	; (8026c24 <__malloc_lock+0x8>)
 8026c1e:	f7ff bf95 	b.w	8026b4c <__retarget_lock_acquire_recursive>
 8026c22:	bf00      	nop
 8026c24:	2400b464 	.word	0x2400b464

08026c28 <__malloc_unlock>:
 8026c28:	4801      	ldr	r0, [pc, #4]	; (8026c30 <__malloc_unlock+0x8>)
 8026c2a:	f7ff bf91 	b.w	8026b50 <__retarget_lock_release_recursive>
 8026c2e:	bf00      	nop
 8026c30:	2400b464 	.word	0x2400b464

08026c34 <__sread>:
 8026c34:	b510      	push	{r4, lr}
 8026c36:	460c      	mov	r4, r1
 8026c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026c3c:	f000 f894 	bl	8026d68 <_read_r>
 8026c40:	2800      	cmp	r0, #0
 8026c42:	bfab      	itete	ge
 8026c44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026c46:	89a3      	ldrhlt	r3, [r4, #12]
 8026c48:	181b      	addge	r3, r3, r0
 8026c4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026c4e:	bfac      	ite	ge
 8026c50:	6563      	strge	r3, [r4, #84]	; 0x54
 8026c52:	81a3      	strhlt	r3, [r4, #12]
 8026c54:	bd10      	pop	{r4, pc}

08026c56 <__swrite>:
 8026c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026c5a:	461f      	mov	r7, r3
 8026c5c:	898b      	ldrh	r3, [r1, #12]
 8026c5e:	05db      	lsls	r3, r3, #23
 8026c60:	4605      	mov	r5, r0
 8026c62:	460c      	mov	r4, r1
 8026c64:	4616      	mov	r6, r2
 8026c66:	d505      	bpl.n	8026c74 <__swrite+0x1e>
 8026c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026c6c:	2302      	movs	r3, #2
 8026c6e:	2200      	movs	r2, #0
 8026c70:	f000 f868 	bl	8026d44 <_lseek_r>
 8026c74:	89a3      	ldrh	r3, [r4, #12]
 8026c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026c7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026c7e:	81a3      	strh	r3, [r4, #12]
 8026c80:	4632      	mov	r2, r6
 8026c82:	463b      	mov	r3, r7
 8026c84:	4628      	mov	r0, r5
 8026c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026c8a:	f000 b817 	b.w	8026cbc <_write_r>

08026c8e <__sseek>:
 8026c8e:	b510      	push	{r4, lr}
 8026c90:	460c      	mov	r4, r1
 8026c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026c96:	f000 f855 	bl	8026d44 <_lseek_r>
 8026c9a:	1c43      	adds	r3, r0, #1
 8026c9c:	89a3      	ldrh	r3, [r4, #12]
 8026c9e:	bf15      	itete	ne
 8026ca0:	6560      	strne	r0, [r4, #84]	; 0x54
 8026ca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026ca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026caa:	81a3      	strheq	r3, [r4, #12]
 8026cac:	bf18      	it	ne
 8026cae:	81a3      	strhne	r3, [r4, #12]
 8026cb0:	bd10      	pop	{r4, pc}

08026cb2 <__sclose>:
 8026cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026cb6:	f000 b813 	b.w	8026ce0 <_close_r>
	...

08026cbc <_write_r>:
 8026cbc:	b538      	push	{r3, r4, r5, lr}
 8026cbe:	4d07      	ldr	r5, [pc, #28]	; (8026cdc <_write_r+0x20>)
 8026cc0:	4604      	mov	r4, r0
 8026cc2:	4608      	mov	r0, r1
 8026cc4:	4611      	mov	r1, r2
 8026cc6:	2200      	movs	r2, #0
 8026cc8:	602a      	str	r2, [r5, #0]
 8026cca:	461a      	mov	r2, r3
 8026ccc:	f7da fc81 	bl	80015d2 <_write>
 8026cd0:	1c43      	adds	r3, r0, #1
 8026cd2:	d102      	bne.n	8026cda <_write_r+0x1e>
 8026cd4:	682b      	ldr	r3, [r5, #0]
 8026cd6:	b103      	cbz	r3, 8026cda <_write_r+0x1e>
 8026cd8:	6023      	str	r3, [r4, #0]
 8026cda:	bd38      	pop	{r3, r4, r5, pc}
 8026cdc:	2400b46c 	.word	0x2400b46c

08026ce0 <_close_r>:
 8026ce0:	b538      	push	{r3, r4, r5, lr}
 8026ce2:	4d06      	ldr	r5, [pc, #24]	; (8026cfc <_close_r+0x1c>)
 8026ce4:	2300      	movs	r3, #0
 8026ce6:	4604      	mov	r4, r0
 8026ce8:	4608      	mov	r0, r1
 8026cea:	602b      	str	r3, [r5, #0]
 8026cec:	f7da fc8d 	bl	800160a <_close>
 8026cf0:	1c43      	adds	r3, r0, #1
 8026cf2:	d102      	bne.n	8026cfa <_close_r+0x1a>
 8026cf4:	682b      	ldr	r3, [r5, #0]
 8026cf6:	b103      	cbz	r3, 8026cfa <_close_r+0x1a>
 8026cf8:	6023      	str	r3, [r4, #0]
 8026cfa:	bd38      	pop	{r3, r4, r5, pc}
 8026cfc:	2400b46c 	.word	0x2400b46c

08026d00 <_fstat_r>:
 8026d00:	b538      	push	{r3, r4, r5, lr}
 8026d02:	4d07      	ldr	r5, [pc, #28]	; (8026d20 <_fstat_r+0x20>)
 8026d04:	2300      	movs	r3, #0
 8026d06:	4604      	mov	r4, r0
 8026d08:	4608      	mov	r0, r1
 8026d0a:	4611      	mov	r1, r2
 8026d0c:	602b      	str	r3, [r5, #0]
 8026d0e:	f7da fc88 	bl	8001622 <_fstat>
 8026d12:	1c43      	adds	r3, r0, #1
 8026d14:	d102      	bne.n	8026d1c <_fstat_r+0x1c>
 8026d16:	682b      	ldr	r3, [r5, #0]
 8026d18:	b103      	cbz	r3, 8026d1c <_fstat_r+0x1c>
 8026d1a:	6023      	str	r3, [r4, #0]
 8026d1c:	bd38      	pop	{r3, r4, r5, pc}
 8026d1e:	bf00      	nop
 8026d20:	2400b46c 	.word	0x2400b46c

08026d24 <_isatty_r>:
 8026d24:	b538      	push	{r3, r4, r5, lr}
 8026d26:	4d06      	ldr	r5, [pc, #24]	; (8026d40 <_isatty_r+0x1c>)
 8026d28:	2300      	movs	r3, #0
 8026d2a:	4604      	mov	r4, r0
 8026d2c:	4608      	mov	r0, r1
 8026d2e:	602b      	str	r3, [r5, #0]
 8026d30:	f7da fc87 	bl	8001642 <_isatty>
 8026d34:	1c43      	adds	r3, r0, #1
 8026d36:	d102      	bne.n	8026d3e <_isatty_r+0x1a>
 8026d38:	682b      	ldr	r3, [r5, #0]
 8026d3a:	b103      	cbz	r3, 8026d3e <_isatty_r+0x1a>
 8026d3c:	6023      	str	r3, [r4, #0]
 8026d3e:	bd38      	pop	{r3, r4, r5, pc}
 8026d40:	2400b46c 	.word	0x2400b46c

08026d44 <_lseek_r>:
 8026d44:	b538      	push	{r3, r4, r5, lr}
 8026d46:	4d07      	ldr	r5, [pc, #28]	; (8026d64 <_lseek_r+0x20>)
 8026d48:	4604      	mov	r4, r0
 8026d4a:	4608      	mov	r0, r1
 8026d4c:	4611      	mov	r1, r2
 8026d4e:	2200      	movs	r2, #0
 8026d50:	602a      	str	r2, [r5, #0]
 8026d52:	461a      	mov	r2, r3
 8026d54:	f7da fc80 	bl	8001658 <_lseek>
 8026d58:	1c43      	adds	r3, r0, #1
 8026d5a:	d102      	bne.n	8026d62 <_lseek_r+0x1e>
 8026d5c:	682b      	ldr	r3, [r5, #0]
 8026d5e:	b103      	cbz	r3, 8026d62 <_lseek_r+0x1e>
 8026d60:	6023      	str	r3, [r4, #0]
 8026d62:	bd38      	pop	{r3, r4, r5, pc}
 8026d64:	2400b46c 	.word	0x2400b46c

08026d68 <_read_r>:
 8026d68:	b538      	push	{r3, r4, r5, lr}
 8026d6a:	4d07      	ldr	r5, [pc, #28]	; (8026d88 <_read_r+0x20>)
 8026d6c:	4604      	mov	r4, r0
 8026d6e:	4608      	mov	r0, r1
 8026d70:	4611      	mov	r1, r2
 8026d72:	2200      	movs	r2, #0
 8026d74:	602a      	str	r2, [r5, #0]
 8026d76:	461a      	mov	r2, r3
 8026d78:	f7da fc0e 	bl	8001598 <_read>
 8026d7c:	1c43      	adds	r3, r0, #1
 8026d7e:	d102      	bne.n	8026d86 <_read_r+0x1e>
 8026d80:	682b      	ldr	r3, [r5, #0]
 8026d82:	b103      	cbz	r3, 8026d86 <_read_r+0x1e>
 8026d84:	6023      	str	r3, [r4, #0]
 8026d86:	bd38      	pop	{r3, r4, r5, pc}
 8026d88:	2400b46c 	.word	0x2400b46c

08026d8c <_init>:
 8026d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d8e:	bf00      	nop
 8026d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026d92:	bc08      	pop	{r3}
 8026d94:	469e      	mov	lr, r3
 8026d96:	4770      	bx	lr

08026d98 <_fini>:
 8026d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d9a:	bf00      	nop
 8026d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026d9e:	bc08      	pop	{r3}
 8026da0:	469e      	mov	lr, r3
 8026da2:	4770      	bx	lr
